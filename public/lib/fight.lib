<? # $Id: fight.lib,v 1.569 2010-03-05 13:05:59 p.knoblokh Exp $

require_once("/home/admin/web/dwar.fun/public_html/include/fsclient.inc");
require_once("/home/admin/web/dwar.fun/public_html/lib/pet.lib");
require_once("/home/admin/web/dwar.fun/public_html/lib/metric.lib");
require_once('/home/admin/web/dwar.fun/public_html/lib/user_stat.lib');
require_once('/home/admin/web/dwar.fun/public_html/lib/buildings.lib');
require_once("/home/admin/web/dwar.fun/public_html/lib/activity.lib");
require_once("/home/admin/web/dwar.fun/public_html/lib/adv_food.lib");
require_once("/home/admin/web/dwar.fun/public_html/lib/arena.lib");
require_once("/home/admin/web/dwar.fun/public_html/lib/user_drop.lib");
require_once("/home/admin/web/dwar.fun/public_html/lib/user_glory.lib");
require_once("/home/admin/web/dwar.fun/public_html/lib/pvp_fight.lib");
require_once("/home/admin/web/dwar.fun/public_html/lib/boss_planner.lib");
require_once("/home/admin/web/dwar.fun/public_html/lib/global_event.lib");
require_once("/home/admin/web/dwar.fun/public_html/lib/clan_bonus.lib");
require_once("/home/admin/web/dwar.fun/public_html/lib/hunt_attack.lib");
require_once("/home/admin/web/dwar.fun/public_html/lib/lite_pass.lib");
require_once("/home/admin/web/dwar.fun/public_html/lib/area_event.lib");

define('STANDART_YAROST_CNT', 20);

define('FIGHT_TTL', 86400*30);	// Время жизни боя
define('FIGHT_BOT_TTL', 60*60);	// Время жизни бота
define('FIGHT_PENDING_TIMEOUT', 600);	// Время жизни начинающегося боя
define('FIGHT_REQ_TTL', 1800);	// Время жизни заявки
define('FIGHT_MAX_USERS', 500);	// Максимальное кол-во пользователей в каждой команде
define('FIGHT_QS_MAX', 25000);	// Максимальное кол-во очков судьбы на лапе

// Имена и поля таблиц
define('TABLE_FIGHTS','fights');
define('FIELD_FIGHTS','');
define('TABLE_FIGHT_USERS','fight_users');
define('FIELD_FIGHT_USERS','');
define('TABLE_FIGHT_USER_SKILLS','fight_user_skills');
define('FIELD_FIGHT_USER_SKILLS','');
define('TABLE_FIGHT_USER_FLEE','fight_user_flee');
define('FIELD_FIGHT_USER_FLEE','');
define('TABLE_FIGHT_REQUESTS','fight_requests');
define('FIELD_FIGHT_REQUESTS','');
define('TABLE_FIGHT_REQUEST_USERS','fight_request_users');
define('FIELD_FIGHT_REQUEST_USERS','');
define('TABLE_FIGHT_ARCHIVES','fight_archives');
define('FIELD_FIGHT_ARCHIVES','');
define('TABLE_FIGHT_ARCHIVE_USERS','fight_archive_users');
define('FIELD_FIGHT_ARCHIVE_USERS','');
define('TABLE_FIGHT_STATS','fight_stats');
define('FIELD_FIGHT_STATS','');
define('TABLE_ID_FIGHTS','id_fights');
define('FIELD_ID_FIGHTS','');

// Типы боя
define('FIGHT_TYPE_DUEL', 1);
define('FIGHT_TYPE_GROUP', 2);
define('FIGHT_TYPE_CHAOTIC', 3);
define('FIGHT_TYPE_ARENA', 5);
define('FIGHT_TYPE_ADV_DUEL', 6);
define('FIGHT_TYPE_BOSS_PLANNER', 7);
define('FIGHT_TYPE_WARIOR', 9); // Битва за материк
define('FIGHT_TYPE_WARDRAGONS', 8); // Битва драконов

// Статусы боя
define('FIGHT_STATUS_PENDING', 0);
define('FIGHT_STATUS_RUNNING', 1);
define('FIGHT_STATUS_FINISHED', 2);

// Флаги боя
define('FIGHT_FLAG_CHAOSFIGHT', 0x0001);
define('FIGHT_FLAG_NORESTRICT', 0x0002);	// бой без правил
define('FIGHT_FLAG_NOINJURY',   0x0004);	// бой без травм
define('FIGHT_FLAG_PRIVATE',    0x0008);	// закрытый бой
define('FIGHT_FLAG_BLIND',      0x0010);	// бой вслепую
define('FIGHT_FLAG_STRONGHOLD', 0x0020);	// бой "осада крепости"
define('FIGHT_FLAG_CAN_LEAVE',  0x0040);    // можно убежать с боя
define('FIGHT_FLAG_NO_GREAT',   0x0080);    // не может стать великой битвой
define('FIGHT_FLAG_NO_BREAK',   0x0100);    // не ломаются вещи
define('FIGHT_FLAG_PROVOCATION',0x0200);    // провокационный бой
define('FIGHT_PLANNER_FLAG_WB', 0x0002);	// Великая битва

// Флаги игрока в бою
define('FIGHT_USER_FLAG_NOEXP',      0x0001); // 0 опыта при наказании
define('FIGHT_USER_FLAG_GOTLOOT',    0x0002); // получен лут
define('FIGHT_USER_FLAG_GOTINJURY',  0x0004); // получена травма
define('FIGHT_USER_FLAG_ENTER',      0x0008); // вошел в бой
define('FIGHT_USER_FLAG_MOUNTUSED',  0x0010); // использовано животное
define('FIGHT_USER_FLAG_UNMOUNTED',  0x0020); // перед боем был снят с ездового животного
define('FIGHT_USER_FLAG_INVISIBLE',  0x0040); // неведимый пользователь
define('FIGHT_USER_FLAG_FLEE',       0x0080); // Убежал
// Флаги заявки
define('FIGHT_REQF_ACCEPTED',  0x0001);
define('FIGHT_REQF_CONFIRMED', 0x0002);

//Специальные возможности для игроков
define('FS_ART_PASS_TURN', 7653); //Эффект пропуск хода

define('SOFT_REG_FIGHT_REDIRECT_TTL', 20); // Время жизни для fightRedirect если пользователь проходит плавную регистрацию

// Зависимости
require_once("/home/admin/web/dwar.fun/public_html/lib/session.lib");
require_once("/home/admin/web/dwar.fun/public_html/lib/bot.lib");
require_once("/home/admin/web/dwar.fun/public_html/lib/bonus.lib");
require_once("/home/admin/web/dwar.fun/public_html/lib/combo.lib");
require_once("/home/admin/web/dwar.fun/public_html/lib/clan.lib");
require_once("/home/admin/web/dwar.fun/public_html/lib/clan_stat.lib");
require_once("/home/admin/web/dwar.fun/public_html/lib/clan_info.lib");
require_once("/home/admin/web/dwar.fun/public_html/lib/party.lib");
require_once("/home/admin/web/dwar.fun/public_html/lib/injury.lib");
require_once("/home/admin/web/dwar.fun/public_html/lib/instance.lib");
require_once("/home/admin/web/dwar.fun/public_html/lib/slaughter.lib");
require_once("/home/admin/web/dwar.fun/public_html/lib/bg.lib");
require_once("/home/admin/web/dwar.fun/public_html/lib/spell.lib");
require_once("/home/admin/web/dwar.fun/public_html/lib/adv_premium.lib");
require_once("/home/admin/web/dwar.fun/public_html/lib/adv_chaot.lib");
require_once("/home/admin/web/dwar.fun/public_html/lib/provocation.lib");
require_once("/home/admin/web/dwar.fun/public_html/lib/squest.lib");


global $fscl, $fight_type_info;

$fscl = new fsClient(FS_HOST,FS_PORT);

$fight_type_info = array(
    FIGHT_TYPE_DUEL => array('id' => FIGHT_TYPE_DUEL, 'title' => translate('бой 1x1')),
    FIGHT_TYPE_GROUP => array('id' => FIGHT_TYPE_GROUP, 'title' => translate('групповой бой')),
    FIGHT_TYPE_CHAOTIC => array('id' => FIGHT_TYPE_CHAOTIC, 'title' => translate('хаотичный бой')),
    FIGHT_TYPE_ARENA => array('id' => FIGHT_TYPE_ARENA, 'title' => translate('арена равных')),
    FIGHT_TYPE_ADV_DUEL => array('id' => FIGHT_TYPE_ADV_DUEL, 'title' => translate('дуэль')),
    FIGHT_TYPE_BOSS_PLANNER => array('id' => FIGHT_TYPE_BOSS_PLANNER, 'title' => translate('атака босса')),
	FIGHT_TYPE_WARIOR => array('id' => FIGHT_TYPE_WARIOR, 'title' => translate('Битва за материк')),
	FIGHT_TYPE_WARDRAGONS => array('id' => FIGHT_TYPE_WARDRAGONS, 'title' => translate('Битва драконов')),
);


function _bot_pers_id($bot_id) {
    return $bot_id > 1000000000 ? $bot_id: $bot_id + 1000000000;
}

function _get_bot_id($pers_id) {
    return max($pers_id - 1000000000,0);
}

function _sk_time($sk, $gender) {
    $fn = ($sk >= 1000 ? PATH_SWF_IMGS.sprintf("img%04d.swf",$sk): PATH_SWF_SKELETONS.sprintf("%s/sk%02d.swf",($gender == 1 ? 'M': 'F'),$sk));
    return intval(@filemtime($fn));
}

// ===========================================================================================================================

function fight_get($ref=false, $add='') {
    global $db_4;
    return common_get($db_4,TABLE_FIGHTS,$ref,$add);
}

function fight_get_safe($fight_id) {
    if (!$fight_id) return false;
    $fight = fight_get($fight_id);
    return $fight;
}

function fight_list($area_id=null, $instance_id=null, $status=null, $add='', $field_list = '*') {
    global $db_4;
    $ref = false;
    if (isset($area_id)) $ref['area_id'] = $area_id;
    if (isset($instance_id)) $ref['instance_id'] = $instance_id;
    if (isset($status)) $ref['status'] = $status;
    return common_list($db_4,TABLE_FIGHTS,$ref,$add,$field_list);
}

function fight_count($area_id=null, $instance_id=null, $status=null, $add='') {
    global $db_4;
    $ref = false;
    if (isset($area_id)) $ref['area_id'] = $area_id;
    if (isset($instance_id)) $ref['instance_id'] = $instance_id;
    if (isset($status)) $ref['status'] = $status;
    return common_count($db_4,TABLE_FIGHTS,$ref,$add);
}

function fight_save($param) {
    global $db_4;
    return common_save($db_4,TABLE_FIGHTS,$param,FIELD_FIGHTS);
}

function fight_delete($ref=false) {
    global $db_4;
    common_delete($db_4,TABLE_FIGHTS,$ref);
    fight_user_delete(false,$ref);
    fight_user_skill_delete(array('fight_id' => $ref));
    user_bulk_update(false,'fight_id',0,$ref);
    provocation_fight_delete(array('fight_id' => $ref));
    return true;
}

function fight_user_get($ref=false, $add='') {
    global $db_4;
    return common_get($db_4,TABLE_FIGHT_USERS,$ref,$add);
}

function fight_user_list($fight_id, $team=false, $add='', $field_list = '*') {
    global $db_4;
    if (!$fight_id && !$add) return false;
    $query_add = '';
    if ($fight_id) $query_add .= sql_pholder(" AND fight_id=?",$fight_id);
    if ($team) $query_add .= sql_pholder(" AND team=?",$team);
    return common_list($db_4,TABLE_FIGHT_USERS,false,$query_add.$add, $field_list);
}

function fight_user_count($fight_id, $team=false, $add='') {
    global $db_4;
    if (!$fight_id && !$add) return false;
    $query_add = '';
    if ($fight_id) $query_add .= sql_pholder(" AND fight_id=?",$fight_id);
    if ($team) $query_add .= sql_pholder(" AND team=?",$team);
    return common_count($db_4,TABLE_FIGHT_USERS,false,$query_add.$add);
}

function fight_user_save($param) {
    global $db_4;
    return common_save($db_4,TABLE_FIGHT_USERS,$param,FIELD_FIGHT_USERS);
}

function fight_user_delete($ref=false, $fight_id=false, $add='') {
    global $db_4;
    if ($ref && !is_array($ref)) $ref = array('id' => $ref);
    if ($fight_id) $ref['fight_id'] = $fight_id;
    return common_delete($db_4,TABLE_FIGHT_USERS,$ref,$add);
}

function fight_user_skill_get($ref=false, $add='') {
    global $db_4;
    return common_get($db_4,TABLE_FIGHT_USER_SKILLS,$ref,$add);
}

function fight_user_skill_list($ref=false, $add='') {
    global $db_4;
    return common_list($db_4,TABLE_FIGHT_USER_SKILLS,$ref,$add);
}

function fight_user_skill_save($param) {
    global $db_4;
    if (!$param['id'] && !$param['fight_id'] && !$param['user_id']) return false;
    return common_save($db_4,TABLE_FIGHT_USER_SKILLS,$param,FIELD_FIGHT_USER_SKILLS);
}

function fight_user_skill_delete($ref=false) {
    global $db_4;
    return common_delete($db_4,TABLE_FIGHT_USER_SKILLS,$ref);
}

function fight_user_flee_get($ref=false, $add='') {
    global $db_4;
    return common_get($db_4,TABLE_FIGHT_USER_FLEE,$ref,$add);
}

function fight_user_flee_list($ref=false, $add='') {
    global $db_4;
    return common_list($db_4,TABLE_FIGHT_USER_FLEE,$ref,$add);
}

function fight_user_flee_save($param) {
    global $db_4;
    if (!$param['id'] && !$param['fight_id'] && !$param['user_id']) return false;
    return common_save($db_4,TABLE_FIGHT_USER_FLEE,$param,FIELD_FIGHT_USER_FLEE);
}

function fight_user_flee_delete($ref=false) {
    global $db_4;
    return common_delete($db_4,TABLE_FIGHT_USER_FLEE,$ref);
}

function fight_request_get($ref=false, $user_id=false, $add='') {
    global $db_4;
    if ($ref && !is_array($ref)) $ref = array('id' => $ref);
    if ($user_id) $ref['user_id'] = $user_id;
    return common_get($db_4,TABLE_FIGHT_REQUESTS,$ref,$add);
}

function fight_request_list($area_id=null, $type=null, $add='') {
    global $db_4;
    $ref = false;
    if (isset($area_id)) $ref['area_id'] = $area_id;
    if (isset($type)) $ref['type'] = $type;
    return common_list($db_4,TABLE_FIGHT_REQUESTS,$ref,$add);
}

function fight_request_count($area_id=null, $type=null, $add='') {
    global $db_4;
    $ref = false;
    if (isset($area_id)) $ref['area_id'] = $area_id;
    if (isset($type)) $ref['type'] = $type;
    return common_count($db_4,TABLE_FIGHT_REQUESTS,$ref,$add);
}

function fight_request_save($param) {
    global $db_4;
    return common_save($db_4,TABLE_FIGHT_REQUESTS,$param,FIELD_FIGHT_REQUESTS);
}

function fight_request_delete($ref=false, $add='') {
    global $db_4;
    common_delete($db_4,TABLE_FIGHT_REQUESTS,$ref,$add);
    fight_request_user_delete(false,$ref);
    return true;
}

function fight_request_user_get($ref=false, $user_id=false, $add='') {
    global $db_4;
    if ($ref && !is_array($ref)) $ref = array('id' => $ref);
    if ($user_id) $ref['user_id'] = $user_id;
    return common_get($db_4,TABLE_FIGHT_REQUEST_USERS,$ref,$add);
}

function fight_request_user_list($request_id, $team=false, $add='') {
    global $db_4;
    if (!$request_id && !$add) return false;
    $ref = false;
    if ($request_id) $ref['request_id'] = $request_id;
    if ($team) $ref['team'] = $team;
    return common_list($db_4,TABLE_FIGHT_REQUEST_USERS,$ref,$add);
}

function fight_request_user_count($request_id, $team=false, $add='') {
    global $db_4;
    if (!$request_id && !$add) return false;
    $ref = false;
    if ($request_id) $ref['request_id'] = $request_id;
    if ($team) $ref['team'] = $team;
    return common_count($db_4,TABLE_FIGHT_REQUEST_USERS,$ref,$add);
}

function fight_request_user_save($param) {
    global $db_4;
    if (!$param['id'] && !$param['request_id']) return false;
    return common_save($db_4,TABLE_FIGHT_REQUEST_USERS,$param,FIELD_FIGHT_REQUEST_USERS);
}

function fight_request_user_delete($ref=false, $request_id=false, $add='') {
    global $db_4;
    if ($ref && !is_array($ref)) $ref = array('id' => $ref);
    if ($request_id) $ref['request_id'] = $request_id;
    return common_delete($db_4,TABLE_FIGHT_REQUEST_USERS,$ref,$add);
}

function fight_lock($ref, $timewait=20, $timelock=600) {
    global $tq;
    if (!$ref) return false;
    return $tq->capture('FIGHT_'.intval($ref),$timewait,$timelock);
}

function fight_unlock($ref) {
    global $tq;
    if (!$ref) return false;
    return $tq->release('FIGHT_'.intval($ref));
}

function fight_request_lock($ref, $timewait=20, $timelock=60) {
    global $tq;
    if (!$ref) return false;
    return $tq->capture('FIGHT_REQUEST_'.intval($ref),$timewait,$timelock);
}

function fight_request_unlock($ref) {
    global $tq;
    if (!$ref) return false;
    return $tq->release('FIGHT_REQUEST_'.intval($ref));
}

function fight_request_sort_by_cost($request_id) {
    if (!$request_id) return false;
    $request_user_list = fight_request_user_list($request_id);
    if (!$request_user_list) return false;
    $costs = array();
    foreach ($request_user_list as $request_user) $costs[$request_user['id']] = user_get_cost($request_user['user_id']);
    arsort($costs);
    $n = 1;
    foreach ($costs as $ref=>$cost) {
        $team = (intval($n/2) % 2) + 1;
        fight_request_user_save(array(
            'id' => $ref,
            'team' => $team,
        ));
        $n++;
    }
    return true;
}

function fight_cleanup() {
    // Удаляем просроченные заявки
    $request_list = fight_request_list(null,null,sql_pholder(" AND stime<=?",time_current()-FIGHT_REQ_TTL));
    foreach ($request_list as $request) {
        if (!fight_request_lock($request['id'])) continue;
        fight_request_delete($request['id']);
        fight_request_unlock($request['id']);
    }

    // Удаляем неначатые бои
    $fight_list = fight_list(null,null,FIGHT_STATUS_PENDING,sql_pholder(" AND ctime<=?",time_current()-FIGHT_PENDING_TIMEOUT));
    foreach ($fight_list as $fight) fight_delete($fight['id']);
}

function fight_generate_fight_id() {
    global $db;

    $query = sql_pholder('INSERT INTO '.TABLE_ID_FIGHTS.' (id) VALUES (NULL)');
    $db->execSQL($query);
    $fight_id = $db->insert_id();

    return $fight_id;
}

// ===========================================================================================================================

// Управление нападением субьекта на объект
// $param:
//   ['attack_subject_avail'] = true - субъект должен быть вне боя
//   ['attack_object_avail'] = true - объект должен быть вне боя
//   ['test_only'] = true - проверка на возможность начать бой
function fight_attack(&$subject, &$object, $param=false) {
    global $object_table_info, $kind_info, $NODE_NUMS, $session_user;

    $test_only = $param['test_only'] ? true : false;
    unset($param['test_only']);

    if (!$subject || !$object) return false;
    if (!in_array($subject['object_class'],array(OBJECT_CLASS_USER,OBJECT_CLASS_BOT))) return false;
    if (!in_array($object['object_class'],array(OBJECT_CLASS_USER,OBJECT_CLASS_BOT))) return false;
    if (!($param['fight_flags'] & FIGHT_FLAG_NO_GREAT)) {
        if (!fight_attack_lock($object, $subject))
            return false;
    }
    // надо перечитать записи объектов, т.к. важна текущая ситуация
    $subject = common_object_get($subject['object_class'],$subject['id']);
    $object = common_object_get($object['object_class'],$object['id']);
    $error = false;
    do {
        if ($subject['fight_id']) {
            $error = translate('Инициатор уже находится в бою!');
            break;
        }
        if ($param['attack_object_avail'] && $object['fight_id']) {
            $error = translate('Цель уже находится в бою!');
            break;
        }
        if (($subject['object_class'] == OBJECT_CLASS_USER) && ($subject['flags'] & USER_FLAG_GHOST)) {
            $error = translate('Инициатор является призраком!');
            break;
        }
        if (($object['object_class'] == OBJECT_CLASS_USER) && ($object['flags'] & USER_FLAG_GHOST)) {
            $error = translate('Цель является призраком!');
            break;
        }
        if (($object['object_class'] == OBJECT_CLASS_USER) && $object['flags'] & USER_FLAG_NOATTACK) {
            $error = translate('На этого персонажа нельзя напасть!');
            break;
        }
        if (($object['object_class'] == OBJECT_CLASS_USER) && $object['flags2'] & ACTION_FLAG_ACTING_GUARD && !($object['flags'] & USER_FLAG_ADMIN)) {
            $error = translate('Нападение невозможно. Страж находится при исполнении.');
            break;
        }
        if (($object['object_class'] == OBJECT_CLASS_BOT) && ($object['flags'] & BOT_FLAG_NOATTACK)) {
            $error = translate('На эту цель нельзя напасть!');
            break;
        }
        if (($object['object_class'] == OBJECT_CLASS_USER) && user_is_invisible($object) && !($param['fight_flags'] & FIGHT_FLAG_NORESTRICT)) {
            $error = translate('На этого персонажа нельзя напасть!');
            break;
        }
        if (!user_is_near($subject,$object)) {
            $error = translate('Инициатор и цель находятся в разных местоположениях!');
            break;
        }
        if ($subject['instance_id']) {
            $instance_root = instance_get_root($subject['instance_id']);
        }
        if ($instance_root['clan_battle_id']) {
            $error = translate('Невозможно вмешаться в бой!');
            break;
        }

        if($instance_root['bg_id'] && $subject['object_class'] == OBJECT_CLASS_USER && $object['object_class'] == OBJECT_CLASS_USER){
            $bg = bg_get($instance_root['bg_id']);
            if($bg['wholerace']){
                $bg_user_hash = make_hash(bg_user_list(array('bg_id' => $bg['id'], 'instance_id' => $instance_root['id'], 'user_id' => array($subject['id'], $object['id']))), 'user_id');
            }
        }

        if ($object['party_id']) {
            $party_check = party_get($object['party_id']);
            if (($party_check['flags'] & PARTY_FLAG_10MAX) && !($instance_root['flags'] & INST_FLAG_10MAX)) {
                $object['party_id'] = 0;
            }
        }

        if ($subject['party_id']) {
            $party_check = party_get($subject['party_id']);
            if (($party_check['flags'] & PARTY_FLAG_10MAX) && !($instance_root['flags'] & INST_FLAG_10MAX)) {
                $subject['party_id'] = 0;
            }
        }

        //нельзя нападать на персонажей твоего альянса или клана даже без правил
        $subject_area = area_get($subject['area_id']);
        if ($subject['clan_id'] && !$instance_root['castle_id'] && !$instance_root['slaughter_id'] && !($subject_area['flags'] & AREA_FLAG_ALLOW_FRIEND_ATTACK)) {
            $subject_clan = clan_get(intval($subject['clan_id']));
            $subject_alliance = intval($subject_clan['alliance_id']);
            //получаем список пользователей для проверки
            $user_list = array();
            if ($object['fight_id']) {
                $fight_user = fight_user_get(array('fight_id' => $object['fight_id'], $object_table_info[$object['object_class']]['link'] => $object['id']));
                $team = $fight_user['team'] == 1 ? 2 : 1;
                $fight_user_list = make_hash(fight_user_list($object['fight_id']));
                foreach($fight_user_list as $fight_user) {
                    if (($fight_user['team'] != $team) && $fight_user['user_id']) {
                        $user_list[$fight_user['user_id']] = user_get(intval($fight_user['user_id']));
                    }
                }
            } elseif ($object['object_class'] == OBJECT_CLASS_USER) {
                $user_list = array($object['id'] => $object);
            }
            //бежим по пользователям и смотрим не состоят ли они в клане или в альянсе с нападающим
            foreach ($user_list as $user) {
                if ($user['clan_id']) {
                    if ($user['clan_id'] == $subject['clan_id']) {
                        //$error = translate('Вы не можете сражаться против участников Вашего клана!');
                        //break 2;
                    } elseif ($subject_alliance) {
                        $user_clan = clan_get(intval($user['clan_id']));
                        if ($user_clan['alliance_id'] == $subject_alliance) {
                            $error = translate('Вы не можете сражаться против участников Вашего альянса!');
                            break 2;
                        }
                    }
                }

            }
        }

        /* Не даем снова войти в бой на определённых локациях.
		 * http://task.corp.mail.ru/task/edit/id61382/     */
        if ($subject_area['flags'] & AREA_FLAG_NO_MORE_FIGTH) {
            // Нельзя вмешиваться в битвы тем, кто вышел из боя, который всё ещё идёт
            // Предыдущая битва могла быть в любой локации, так что надо проверить во всех нодах
            $check_flees = make_hash(fight_user_list(false, false, sql_pholder(' AND user_id=? AND flags & ?#FIGHT_USER_FLAG_FLEE', $subject['id'])), 'fight_id');
            $flee_fight_ids = array();
            foreach($check_flees as $flee_fight_user) {
                $flee_fight_ids[$flee_fight_user['fight_id']] = $flee_fight_user['fight_id'];
            }
            if ($flee_fight_ids) {
                $current_fights = fight_list(null, null, FIGHT_STATUS_RUNNING, sql_pholder('AND id in (?@)', $flee_fight_ids));
                if ($current_fights) {
                    $cur_fight = reset($current_fights);
                    $error =  sprintf(translate('Бой "%s", в котором вы принимали участие, еще не завершился!'), $cur_fight['title'] );
                }
            }
            if ($error) break;
        }

        if ($object['fight_id']) {	// вмешательство в существующий бой

            //Проверям что я не вмешиваюб в этот бой, после смерти и выхода из него же
            if ($subject['object_class'] == OBJECT_CLASS_USER) {
                if (fight_user_get(array('fight_id' => $object['fight_id'], 'user_id' => $subject['id']))) {
                    $error = translate('Вы не можете вмешаться в бой после выхода из него!');
                    break;
                }
            }

            $fight = fight_get($object['fight_id']);

            $area = area_get($fight['area_id']);
            if($area['flags2'] & AREA_FLAG2_ALL_PVP) $param['kind_team'] = true;

            if($fight['level'] && ($fight['level_time'] + 600 < time_current()) && !($subject['flags'] & USER_FLAG_ADMIN)) {
                $error = translate('Невозможно вмешаться в текущую великую битву, прошло 10 минут с её формирования!');
                break;
            }

            if($fight['type'] == FIGHT_TYPE_ARENA || $fight['type'] == FIGHT_TYPE_ADV_DUEL){
                $error = translate('Вы не можете вмешаться в аренный бой или бой дуэли!');
                break;
            }

            if($param['provocation'] && !($fight['flags'] & FIGHT_FLAG_PROVOCATION)){
                fight_save(array(
                    'id' => $fight['id'],
                    '_set' => sql_pholder(' flags = flags | ?#FIGHT_FLAG_PROVOCATION'),
                ));
            }

            $fight_user = fight_user_get(array('fight_id' => $object['fight_id'], $object_table_info[$object['object_class']]['link'] => $object['id']));

            if (!$fight || !$fight_user || ($fight['status'] != FIGHT_STATUS_RUNNING)) {
                common_object_save($object['object_class'], $object['id'], array(
                    'fight_id' => 0,
                ));
                if (!($param['fight_flags'] & FIGHT_FLAG_NO_GREAT)) {
                    fight_attack_unlock($object, $subject);
                }
                return fight_attack($subject,$object, $param);
            }
            $team = $fight_user['team'] == 1 ? 2 : 1;
            if (!($param['fight_flags'] & FIGHT_FLAG_PRIVATE) && ($fight['flags'] & FIGHT_FLAG_PRIVATE)) {
                $error = translate('Вы не можете вмешаться в закрытый бой!');
            } elseif (!($param['fight_flags'] & FIGHT_FLAG_NORESTRICT)) {	// проверяем правила нападения
                if ($fight['flags'] & FIGHT_FLAG_NORESTRICT) {
                    $error = translate('Вы не можете вмешаться в бой без правил!');
                } else {
                    if ($subject['instance_id']) {
                        $instance_root = instance_get_root($subject['instance_id']);
                    }
                    // Допустимо вписывание против своей расы в замках
                    do{
                        if($bg['wholerace']) break;
                        if (
                            (!$instance_root || ($instance_root['slaughter_id'] == 0))
                            && $subject['kind']
                            && (fight_user_count($fight['id'],$fight_user['team'],sql_pholder(" AND user_id > 0 AND user_kind=?",$subject['kind'])) > 0)
                        ) {
                            $error = translate('Вы не можете вмешаться в бой, т.к. на стороне цели есть персонажи Вашей расы!');
                        }
                    }while(0);
                }
            } elseif (!($fight['flags'] & FIGHT_FLAG_NORESTRICT)) {
                $error = translate('Вы не можете вмешаться в обычный бой!');
            }

            if($fight['flags'] & FIGHT_FLAG_PROVOCATION){
                $user_get_negative_effects = make_hash(user_get_artifact_list($subject['id'], 'TEMP_EFFECT', sql_pholder(' AND artikul_id IN (?@)', array(981,991))), 'artikul_id');
                if($user_get_negative_effects[981]){
                    $error = "Невозможно вмешаться в провакационный бой находясь под Яростью верциды!";
                }
                if($user_get_negative_effects[991]){
                    $error = "Невозможно вмешаться в провакационный бой находясь под Силой радуги!";
                }
            }

            // Если есть перевес на 25% в этой команде, то запрещается вступать в бой
            $team_weight_hash = array();
            if ($fight['level']) {
                // #112895 Запрещаем вход в ВБ
                if (($subject['flags'] & USER_FLAG_PUNISH) && user_get_punishment_state($subject['id'], CRIME_FINANCE2)) {
                    $error = translate('Вы не можете учавствовать в этом бою, на Вас наложено Проклятие Менялы!');
                    break;
                }
                $team_weight_hash = fight_team_weight($fight['id']);
                $overbalance = fight_user_weight(max($team_weight_hash[$team]['level_max'], $team_weight_hash[$fight_user['team']]['level_max']), 1);

                //TODO: Отключена ошибка при перевесе!
                //if (($team_weight_hash[$team]['weight'] - $team_weight_hash[$fight_user['team']]['weight']) >= $overbalance) $error = translate('Вы не можете вмешаться в бой за команду с явным перевесом сил!');

                if ($subject['injury_time'] > time_current()) {
                    $error = translate('У вас есть негативные эффекты, которые не позволяют вам участвовать в этом бою!');
                }

                // Также нельзя вмешиваться в великие битвы тем, кто вышел из боя, который всё ещё идёт
                // Предыдущая битва могла быть в любой локации, так что надо проверить во всех нодах
                $check_flees = make_hash(fight_user_list(false, false, sql_pholder(' AND user_id=? AND flags & ?#FIGHT_USER_FLAG_FLEE', $subject['id'])), 'fight_id');
                $flee_fight_ids = array();
                foreach($check_flees as $flee_fight_user) {
                    $flee_fight_ids[$flee_fight_user['fight_id']] = $flee_fight_user['fight_id'];
                }
                if ($flee_fight_ids) {
                    $current_fights = fight_list(null, null, FIGHT_STATUS_RUNNING, sql_pholder(' AND level AND id in (?@)', $flee_fight_ids));
                    if ($current_fights) {
                        $error =  translate('Вы не можете вступить в новую Великую Битву до завершения тех, в которых вы принимали участие!');
                    }
                }
            }
            if ($error) break;
            if (($fight['flags'] & FIGHT_FLAG_CHAOSFIGHT) && $kind_info[$subject['kind']] && (fight_user_count($fight['id'],$team," AND user_kind=100") > 0)) $error = translate('Вы не можете вмешаться в бой, т.к. окажетесь в закрытой команде!');
            elseif (!($fight['flags'] & FIGHT_FLAG_CHAOSFIGHT) && fight_user_count($fight['id'],$team," AND user_id>0") >= FIGHT_MAX_USERS) $error = translate('Вы не можете вмешаться в бой, т.к. достингуто максимальное количество игроков в вашей команде!');
            elseif ($team_weight_hash[$team]['weight'] >= fight_user_weight(max($team_weight_hash[$team]['level_max'], $team_weight_hash[($team == 1 ? 2 : 1)]['level_max']), 2)) $error = translate('Вы не можете вмешаться в бой, т.к. достигнут максимальный размер команды!');
            else {
                if ($test_only) break;
                $param2 = $param;
                if($bg_user_hash[$subject['id']]['user_kind'] && $bg_user_hash[$subject['id']]['user_kind'] != $subject['kind']){
                    $param2['force_kind'] = $bg_user_hash[$subject['id']]['user_kind'];
                }
                if (!fight_join($fight,$subject, $team, $param2)) $error = translate('Не удалось вмешаться в бой!');
            }

            if (!$error) {
                $not_chat = false;
                if ($subject['instance_id']) {
                    $instance = instance_get_root($subject['instance_id']);
                    if ($instance['slaughter_id']) $not_chat = true;
                }
                if (!$not_chat) {
                    no_translate_push(1);
                    $cht_text1 = translate('Член группы {0}[{1}] вмешался в бой {2}. {3}Вмешаться в бой{4}.');
                    no_translate_pop();
                    //	$cht_text2 = sprintf(translate('На члена группы %s[%d] совершено %s. %sВмешаться в бой%s.'),$object['nick'],$object['level'],'&laquo;'.$fight['title'].'&raquo;','<a href="#" onClick="'.($subject['object_class'] == OBJECT_CLASS_BOT  ? 'botAttack(\''.$subject['id'] : 'userAttack(\''.addslashes($subject['nick'])).'\',\'\');return false;" title="'.translate('Вмешаться в бой').'">','</a>');
                    chat_msg_send_party($cht_text1,$subject['party_id'],array(
                        'session_user_id'=> $subject['id'],
                        'area_id' => $subject['area_id'],
                        'instance_id' => $subject['instance_id'],
                        'do_translate' => true,
                        'translate_params' => array(
                            $subject['nick'],
                            $subject['level'],
                            sprintf('<a href="#" onclick="showFightInfo(%d, %d);return false;">&laquo;', $fight['id'], SERVER_ID).$fight['title'].'&raquo;</a>',
                            '<a href="#" onClick="'.($object['object_class'] == OBJECT_CLASS_BOT  ? 'botAttack(\''.$object['id'] : 'userAttack(\''.addslashes($object['nick'])).'\',\'\');return false;" title="'.translate('Вмешаться в бой').'">',
                            '</a>'
                        )
                    ));
                    //	chat_msg_send_party($cht_text2,$object['party_id'],array('session_user_id'=> $object['id'], 'area_id' => $object['area_id']));
                }
            }
        }
        else {	// создаем новый бой
            if ($test_only) break;

            $fight_timeout = 20;
            if ($subject['instance_id']) {
                $instance_root = instance_get_root($subject['instance_id']);
                $fight_timeout = $instance_root['fight_timeout'];
            }else if($subject['area_id']) {
                if(intval($subject_area['fight_timeout'])) $fight_timeout = intval($subject_area['fight_timeout']);
            }
            $fight_flags = 0;
            if ($subject['group_id'] || $object['group_id']) {	// смотрим на группу ботов
                $group_id = max($subject['group_id'],$object['group_id']);
                $group = bot_group_get($group_id);
                if ($group['flags'] & BOT_GRPF_CHAOSFIGHT) $fight_flags |= FIGHT_FLAG_CHAOSFIGHT;
            }

            if (!($subject_area['flags'] & AREA_FLAG_ENABLE_FIGHT_LEAVE)) $fight_flags |= FIGHT_FLAG_CAN_LEAVE;

            $is_soft_reg = $object['object_class'] == OBJECT_CLASS_USER && $object['flags'] & USER_FLAG_NOT_FINISHED_REG;

            $fight = array(
                'area_id' => $subject['area_id'],
                'instance_id' => $subject['instance_id'],
                'title' => ($param['fight_flags'] & FIGHT_FLAG_BLIND) ? translate('Схватка вслепую') : sprintf(translate('Нападение на %s'),user_is_invisible($object) ? translate('Невидимку') : ($is_soft_reg ? translate('Героя') : $object['nick'])),
                'type' => FIGHT_TYPE_DUEL,
                'timeout' => $fight_timeout,
                'level_min' => min($subject['level'],$object['level']),
                'level_max' => max($subject['level'],$object['level']),
                'team_max' => 0,
                'flags' => $fight_flags,
            );

            if($param['fight']) $fight = array_replace($fight, $param['fight']);

            $pers_data = array(
                array($object_table_info[$subject['object_class']]['link'] => $subject['id'], 'team' => 1),
                array($object_table_info[$object['object_class']]['link'] => $object['id'], 'team' => 2),
            );

            //Подмена рас
            if($subject['object_class'] == OBJECT_CLASS_USER && $bg_user_hash[$subject['id']]['user_kind'] && $bg_user_hash[$subject['id']]['user_kind'] != $subject['kind']){
                $pers_data[0]['force_kind'] = $bg_user_hash[$subject['id']]['user_kind'];
            }
            if($object['object_class'] == OBJECT_CLASS_USER && $bg_user_hash[$object['id']]['user_kind'] && $bg_user_hash[$object['id']]['user_kind'] != $subject['kind']){
                $pers_data[1]['force_kind'] = $bg_user_hash[$subject['id']]['user_kind'];
            }

            $html_subject = $subject['object_class'] == OBJECT_CLASS_USER ? html_user_info($subject): html_bot_info($subject);
            $html_object = $object['object_class'] == OBJECT_CLASS_USER ? html_user_info($object): html_bot_info($object);
            if (!$is_soft_reg && $subject['object_class'] == OBJECT_CLASS_USER) chat_msg_send_system(sprintf(translate('Вы совершили нападение на %s.'),(($param['fight_flags'] & FIGHT_FLAG_BLIND) || user_is_invisible($object)) ? translate('невидимку') : $html_object),CHAT_CHF_USER,$subject['id']);
            if (!$is_soft_reg && $object['object_class'] == OBJECT_CLASS_USER) {
                if ($object['language']) translate_default_language_push($object['language']);
                chat_msg_send_system(sprintf(translate('На Вас совершено нападение %s.'),(($param['fight_flags'] & FIGHT_FLAG_BLIND) || user_is_invisible($subject)) ? translate('невидимкой') : $html_subject),CHAT_CHF_USER,$object['id']);
                if ($object['language']) translate_default_language_pop();
            }
            if ($is_soft_reg) {
                $param['no_chat_msg'] = true;
                $param['fight_delay'] = 7;
                $param['soft_reg'] = true;
            }
            $user_hash = array();
            if ($subject['object_class'] == OBJECT_CLASS_USER) $user_hash[$subject['id']] = $subject;
            if ($object['object_class'] == OBJECT_CLASS_USER) $user_hash[$object['id']] = $object;
            $fight_id=fight_start($fight,$pers_data,$param,$user_hash);
            if (!$fight_id) {
                if(defined('NO_FIGHT_SETTINGS') && NO_FIGHT_SETTINGS) {
                    if(defined('NO_FIGHT_SETTINGS_TEXT') && NO_FIGHT_SETTINGS_TEXT) {
                        $error = translate(NO_FIGHT_SETTINGS_TEXT);
                    }else {
                        $error = translate('Бои временно отключены администрацией!');
                    }
                }else {
                    $error = translate('Не удалось начать бой!');
                }
            } else {
                $subject['fight_id']=$object['fight_id']=$fight_id;
            }

            if (!$error) {
                $not_chat = false;
                if ($subject['instance_id']) {
                    $instance = instance_get_root($subject['instance_id']);
                    if ($instance['slaughter_id']) $not_chat = true;
                }
                if (!$is_soft_reg && !$not_chat) {
                    $fight = fight_get($fight_id);
                    //no_translate_push(1);
                    $cht_text1 = translate('Член группы {0}[{1}] начал бой {2}. {3}Вмешаться в бой{4}.');
                    $cht_text2 = translate('На члена группы {0}[{1}] совершено {2}. {3}Вмешаться в бой{4}.');
                    //no_translate_pop();
                    chat_msg_send_party($cht_text1,$subject['party_id'],array('session_user_id'=> $subject['id'], 'area_id' => $subject['area_id'], 'instance_id' => $subject['instance_id'], 'do_translate' => true, 'translate_params' => array(
                        $subject['nick'],$subject['level'],sprintf('<a href="#" onclick="showFightInfo(%d, %d);return false;">&laquo;', $fight['id'], SERVER_ID).$fight['title'].'&raquo;</a>','<a href="#" onClick="'.($object['object_class'] == OBJECT_CLASS_BOT  ? 'botAttack(\''.$object['id'] : 'userAttack(\''.addslashes($object['nick'])).'\',\'\');return false;" title="'.translate('Вмешаться в бой').'">','</a>'
                    )));
                    chat_msg_send_party($cht_text2,$object['party_id'],array('session_user_id'=> $object['id'], 'area_id' => $object['area_id'], 'instance_id' => $subject['instance_id'], 'do_translate' => true, 'translate_params' => array(
                        $object['nick'],$object['level'],sprintf('<a href="#" onclick="showFightInfo(%d, %d);return false;">&laquo;', $fight['id'], SERVER_ID).$fight['title'].'&raquo;</a>','<a href="#" onClick="'.($subject['object_class'] == OBJECT_CLASS_BOT  ? 'botAttack(\''.$subject['id'] : 'userAttack(\''.addslashes($subject['nick'])).'\',\'\');return false;" title="'.translate('Вмешаться в бой').'">','</a>'
                    )));

                }
            }
        }
    } while (0);
    if ($error) $out['error'] = $error;
    else $out['status'] = true;
    if (!($param['fight_flags'] & FIGHT_FLAG_NO_GREAT)) {
        fight_attack_unlock($object, $subject);
    }
    return $out;
}

// LOCK объекта и субъекта атаки
function fight_attack_lock($object, $subject) {
    if ($subject['object_class'] == OBJECT_CLASS_USER && !session_lock($subject['id'])) return false;
    elseif ($subject['object_class'] == OBJECT_CLASS_BOT && !bot_lock($subject['id'])) return false;
    if ($object['object_class'] == OBJECT_CLASS_USER) {
        if (!session_lock($object['id'])) {
            if ($subject['object_class'] == OBJECT_CLASS_USER) session_unlock($subject['id']);
            elseif ($subject['object_class'] == OBJECT_CLASS_BOT) bot_unlock($subject['id']);
            return false;
        }
    } elseif ($object['object_class'] == OBJECT_CLASS_BOT) {
        if (!bot_lock($object['id'])) {
            if ($subject['object_class'] == OBJECT_CLASS_USER) session_unlock($subject['id']);
            elseif ($subject['object_class'] == OBJECT_CLASS_BOT) bot_unlock($subject['id']);
            return false;
        }
    }
    return true;
}

// RELEASE LOCK объекта и субъекта атаки
function fight_attack_unlock($object, $subject) {
    if ($subject['object_class'] == OBJECT_CLASS_USER) session_unlock($subject['id']);
    elseif ($subject['object_class'] == OBJECT_CLASS_BOT) bot_unlock($subject['id']);
    if ($object['object_class'] == OBJECT_CLASS_USER) session_unlock($object['id']);
    elseif ($object['object_class'] == OBJECT_CLASS_BOT) bot_unlock($object['id']);
    return true;
}

// Вмешательство объекта в текущий бой
function fight_join(&$fight, &$object, $team, $param=false) {
    if (!$fight || !$object || ($team < 1) || ($team > 2)) return false;
    if (!in_array($object['object_class'],array(OBJECT_CLASS_USER,OBJECT_CLASS_BOT))) return false;

    if ($fight['status'] != FIGHT_STATUS_RUNNING) return false;
    if ($object['object_class'] == OBJECT_CLASS_USER) {
        if ($fight['flags'] & FIGHT_FLAG_STRONGHOLD) {
            /**
             * #40609 В бой за крепость можно вмешаться только в течении 15 минут после его начала.
             */
            require_once("lib/stronghold.lib");
            if (STRONGHOLD_FIGHT_AVALIBLE_TIME < abs(time_current() - $fight['ctime']))
                return false;
        }

        fight_param_user_skill_init($param, false, false, $fight);
        if (!fight_bind($fight,$object['id'],$team,$param)) return false;
        user_save(array(
            'id' => $object['id'],
            'fight_id' => $fight['id']
        ));
        // Сбрасываем длительное действие, если таковое висело на пользователе

        NODE_PUSH(null, $object['id']);
        session_save(array(
            'uid' => $object['id'],
            'action_id' => 0,
            'ltime' => 0,
        ));
        NODE_POP();
        chat_msg_send_system(sprintf(translate('Вы вмешались в бой "<a href="#" onClick="showFightInfo(%d,%d);return false;"><b>%s</b></a>".'),$fight['id'],SERVER_ID,htmlspecialchars($fight['title'])),CHAT_CHF_USER,$object['id']);
        chat_msg_send_special(CODE_CALL_JSFUNC,CHAT_CHF_USER,$object['id'],array(
            'func' => 'fightRedirect('.$fight['id'].')',
        ));
    } else if ($object['object_class'] == OBJECT_CLASS_BOT) {
        if (!fight_bind_bot($fight['id'],$object['id'],$team,$param)) return false;
        bot_save(array(
            'id' => $object['id'],
            'fight_id' => $fight['id'],
        ));
    } else return false;

    $type = FIGHT_TYPE_GROUP;
    if($param['no_type']){
        $type = $fight['type'];
    }
    if($fight['type'] == FIGHT_TYPE_BOSS_PLANNER){
        $type = $fight['type'];
    }
	if($fight['type'] == FIGHT_TYPE_WARIOR){
        $type = $fight['type'];
    }
	if($fight['type'] == FIGHT_TYPE_WARDRAGONS){
        $type = $fight['type'];
    }
	
	//if($fight['level'] == 1){
    //    $level = $fight['level'];
    //}
    fight_save(array(
        'id' => $fight['id'],
        'type' => $type,
        'user_cnt' => $fight['user_cnt'] + 1,
        'level' => intval(fight_level_get($fight)),
        'level_max' => max(intval($fight['level_max']), intval($object['level'])),
    ));
    return true;
}

// ===========================================================================================================================

// Формирование и запуск боя по заявке
function fight_launch($request_id) {
    global $fight_type_info;

    if (!$request_id) return false;
    $request = fight_request_get($request_id);
    if (!$request) return false;
    if ($request['type'] == FIGHT_TYPE_CHAOTIC) fight_request_sort_by_cost($request_id);
    $request_user_list = fight_request_user_list($request_id);
    $team_hash = make_hash($request_user_list,'team',true);

    if($request['clan_id']){
        foreach ($request_user_list as $k=>$request_user){
            $request_user_list[$k]['force_kind'] = $request_user['team'];
        }
    }

    $c1 = count($team_hash[1]);
    $c2 = count($team_hash[2]);
    if (($c1 == 1) && ($c2 == 1)) $request['type'] = FIGHT_TYPE_DUEL;
    $fight = get_params($request,'area_id,title,type,timeout,level_min,level_max,team_max');
    if($request['clan_id']){
        $fight['in_clan_pvp'] = $request['clan_id'];
    }
    $fight['flags'] = FIGHT_FLAG_NOINJURY;
    if (!$c1 || !$c2 || !fight_start($fight,$request_user_list)) {
        $user_ids = get_hash($request_user_list,'user_id','user_id');
        chat_msg_send_system(sprintf(translate('Невозможно запустить бой по заявке на %s "<b>%s</b>".'),$fight_type_info[$request['type']]['title'],htmlspecialchars($request['title'])),CHAT_CHF_USER,$user_ids);
        return false;
    }
    return true;
}

function fight_param_user_skill_init(&$param, $area, $instance_artikul, $fight) {
    if($param['user_skill_params_init']) {
        return;
    }
    if(!$area && $fight['area_id']) $area = area_get($fight['area_id']);
    if(!$instance_artikul) {
        if($fight['instance_id']) $instance_root = instance_get_root($fight['instance_id']);
        if($instance_root) $instance_artikul = instance_artikul_get($instance_root['artikul_id']);
    }
    $param['user_skill_params_init'] = true;
    if($area) {
        $param['user_skill_params'] = array(
            'no_talents' => ($area['flags2'] & AREA_FLAG2_NO_TALENTS ? true : false),
            'no_clan_talents' => ($area['flags2'] & AREA_FLAG2_NO_CLAN_TALENTS ? true : false),
            'no_clan_bonus' => ($area['flags2'] & AREA_FLAG2_NO_CLAN_BONUS ? true : false),
            'no_obcast' => ($area['flags2'] & AREA_FLAG2_NO_OBCAST ? true : false),
        );
    }elseif($instance_artikul) {
        $param['user_skill_params'] = array(
            'no_talents' => ($instance_artikul['flags2'] & INST_FLAG_NO_TALENTS ? true : false),
            'no_clan_talents' => ($instance_artikul['flags2'] & INST_FLAG_NO_CLAN_TALENTS ? true : false),
            'no_clan_bonus' => ($instance_artikul['flags2'] & INST_FLAG_NO_CLAN_BONUS ? true : false),
            'no_obcast' => ($instance_artikul['flags2'] & INST_FLAG_NO_OBCAST ? true : false),
        );
    }
}

// Запуск боя
// $param:
//   ['fight_flags'] - флаги нового боя
//   ['no_chat_msg'] - не показывать текстовки в чат
//   ['fight_delay'] - задержка боя
//   ['soft_reg'] - Пользователь проходит плавную регистрацию
function fight_start($fight, $pers_data, $param=false, $user_hash = array()) {
    global $fscl;

    if (!$fight || !$pers_data) return false;

    if(defined('NO_FIGHT_SETTINGS') && NO_FIGHT_SETTINGS) {
        //logfile(DEBUG_FILE_LOG_DEV,print_r($pers_data,true));
        $allow_ids = array(1,DEV_ACCOUNT_ID);
        $allow_fight = false;
        foreach ($pers_data as $pers){
            if(in_array($pers['user_id'], $allow_ids)) $allow_fight = true;
        }

        if(!$allow_fight) return false;
    }

    $fight_id = fight_generate_fight_id();

    $fight_id = intval($fight_id);
    if (!$fight_id) return false;

    if($fight['area_id']) $area = area_get($fight['area_id']);
    if($fight['instance_id']) $instance_root = instance_get_root($fight['instance_id']);
    if($instance_root) $instance_artikul = instance_artikul_get($instance_root['artikul_id']);

    fight_param_user_skill_init($param, $area, $instance_artikul, $fight);

    // creating fight
    if (!$fight['title']) $fight['title'] = translate('Без названия');
    $fight['flags'] = intval($fight['flags']) | intval($param['fight_flags']);

    $fight_flags = 0;

    if($area['flags2'] & AREA_FLAG2_FIGHT_NO_BLOCK) $fight_flags |= FS_FF_NO_BLOCK;

    fight_save(array(
        '_mode' => CSMODE_INSERT,
        'id' => $fight_id,
        'area_id' => $fight['instance_id'] ? 0 : intval($fight['area_id']),
        'instance_id' => intval($fight['instance_id']),
        'title' => $fight['title'],
        'type' => intval($fight['type']),
        'status' => FIGHT_STATUS_PENDING,
        'timeout' => intval($fight['timeout']),
        'level_min' => intval($fight['level_min']),
        'level_max' => intval($fight['level_max']),
        'team_max' => intval($fight['team_max']),
        'flags' => $fight['flags'],
        'ctime' => time_current(),
        'adv_chaot_id' => ($fight['adv_chaot_id'] ? $fight['adv_chaot_id'] : 0),
        'boss_scheduler_id' => ($fight['boss_scheduler_id'] ? $fight['boss_scheduler_id'] : 0),
        'boss_artikul_id' => ($fight['boss_artikul_id'] ? $fight['boss_artikul_id'] : 0),
        'hunt_attack_id' => ($fight['hunt_attack_id'] ? $fight['hunt_attack_id'] : 0),
        'hunt_wave_id' => ($fight['hunt_wave_id'] ? $fight['hunt_wave_id'] : 0),
        'in_clan_pvp' => ($fight['in_clan_pvp'] ? $fight['in_clan_pvp'] : 0),
    ));

    $fight = fight_get($fight_id);

    if (!$fight_id) {
        fight_addlog("[fight_start]: Can't create a new fight in DB!");
        return false;
    }
    $answer = null;
    $fscl->sendCommand(FS_SCCT_CREATE_FIGHT,$fight_id);
    if (($status = $fscl->getAnswer($answer)) != FS_SS_OK) {
        fight_addlog(sprintf("[fight_start]: FS STATUS=%d: Can't create fight! (fight_id=%d)",$status,$fight_id));
        return false;
    }

    $fscl->sendCommand(FS_SCCT_SET_FIGHT_PARAMS,$fight_id,intval($fight['timeout']),$fight_flags);
    if (($status = $fscl->getAnswer($answer)) != FS_SS_OK) {
        fight_addlog(sprintf("[fight_start]: FS STATUS=%d: Can't set fight params! (fight_id=%d)",$status,$fight_id));
        return false;
    }

    if(is_array($param) && isset($param['lua_params'])){
		$lua_params = fight_lua_params($param['lua_params']);
		$fscl->sendCommand(FS_SCCT_SET_PARAMS_LUA, $fight_id, 'Fight', $lua_params);
		if (($status = $fscl->getAnswer($answer)) != FS_SS_OK) {
			fight_addlog(sprintf("[fight_start]: FS STATUS=%d: Can't set lua params! (fight_id=%d)",$status,$fight_id));
			return false;
		}
	}

    // loading personages
    $user_ids = array();
    $bot_ids = array();

    if($area['flags2'] & AREA_FLAG2_ALL_PVP) $param['kind_team'] = true;

    // вначале добавляем персонажей-людей
    foreach ($pers_data as $item) {
        if ($item['user_id']) {
            if($item['force_kind']) $param['force_kind'] = $item['force_kind'];
            if (!fight_bind($fight,$item['user_id'],$item['team'],$param)) {
                fight_addlog("[fight_start]: fight_bind() failed!");
                return false;
            }
            $user_ids[] = $item['user_id'];
        }
    }

    foreach ($pers_data as $item) {
        if ($item['bot_id']) {
            if (!fight_bind_bot($fight_id,$item['bot_id'],$item['team'],$param)) {
                fight_addlog("[fight_start]: fight_bind_bot() failed!");
                return false;
            }
            $bot_ids[] = $item['bot_id'];
        }
    }

    // starting fight
    $fscl->sendCommand(FS_SCCT_START_FIGHT,$fight_id);
    if (($status = $fscl->getAnswer($answer)) != FS_SS_OK) {
        fight_addlog(sprintf("[fight_start]: FS STATUS=%d: Can't start fight! (fight_id=%d)",$status,$fight_id));
        return false;
    }
    $fight['id'] = $fight_id; // Чтобы fight_level_get нормально отработал
    fight_save(array(
        'id' => $fight_id,
        'status' => FIGHT_STATUS_RUNNING,
        'user_cnt' => count($user_ids) + count($bot_ids),
        'level' => intval(fight_level_get($fight)),
    ));
    user_bulk_update($user_ids,'fight_id',$fight_id);
    if ($user_ids) {
        // Сбрасывание длительного действия
        session_save(array(
            '_add' => sql_pholder(' AND uid IN (?@)',$user_ids),
            '_set' => 'action_id=0,ltime=0'
        ));
    }
    bot_bulk_update($bot_ids,'fight_id',$fight_id);

    if (!$param['no_chat_msg']) {
        if (empty($user_hash)) {
            $user_hash = $user_ids ? make_hash(user_list(array('id' => $user_ids))) : array();
        }
        foreach ($user_hash as $user) {
            if ($user['language']) translate_default_language_push($user['language']);
            chat_msg_send_system(sprintf(translate('Начался бой "<a href="#" onClick="showFightInfo(%d,%d);return false;"><b>%s</b></a>".'),$fight_id,SERVER_ID,htmlspecialchars($fight['title'])),CHAT_CHF_USER,$user['id']);
            if ($user['language']) translate_default_language_pop();
        }
    }

    $chat_param = array(
        'func' => 'fightRedirect('.$fight_id.($param['fight_delay'] ? ', '.($param['fight_delay']*1000) : '').')',
    );
    // если Пользователь проходит плавную регистрацию установить время жизни fightRedirect
    if ($param['soft_reg']) $chat_param['dead_time'] = time_current()+SOFT_REG_FIGHT_REDIRECT_TTL;
    chat_msg_send_special(CODE_CALL_JSFUNC,CHAT_CHF_USER,$user_ids,$chat_param);
    return $fight_id;
}

// Подключение персонажа к бою
// $param:
//   ['user_skills'][user_id][skill_id] - прибавление скилла
//   ['lua_user_params'][$param => $value] - параметры для луа
function fight_bind($fight = array(), $user_id, $team, $param=false) {
    global $fscl;
    global $artikul_hash, $clan_hash;
    global $user_stat_skill_to_skill_id_for_lua;
    global $pet_food_level;

    if(!$fight) return false;
    $fight_id = intval($fight['id']);
    $user_id = intval($user_id);
    $team = intval($team);
    if (!$fight_id || !$user_id || ($team < 1) || ($team > 2)) return false;
    $user = user_get($user_id);
    if (!$user) return false;
    // Снятие флага фарминга, если таковой стоит
    if ($user['flags'] & (USER_FLAG_NOACTION | USER_FLAG_FARMING)) user_set_flag($user_id,(USER_FLAG_NOACTION | USER_FLAG_FARMING),false);
    if ($user['flags'] & USER_FLAG_NOT_FINISHED_REG) $user['nick'] = translate('Герой');
    NODE_PUSH(null, $user_id);

    //TODO: Очистка просроченных слотов
    user_free_expired_slots($user_id);

    // Восстановление способностей для вещей с флагом "Использовать 1 раз за бой"
    artifact_save(array(
        '_set' => "flags = flags & ~".ARTIFACT_FLAG_FIGHTONCE,
        '_add' => sql_pholder(" AND user_id=?", $user_id),
    ));
    if (user_undress($user_id, 'MOUNT')) { // нет жывотным в бою
        $unmounted=true;
        chat_msg_send_special(CODE_CALL_JSFUNC,CHAT_CHF_USER,$user_id,array('func' => "updateSwf({'items_right':''})",));
    } else {
        $unmounted=false;
    }
    $nick_data = array();
    if ($user['clan_id'] && !user_is_invisible($user) && !($param['fight_flags'] & FIGHT_FLAG_BLIND)) {
        $clan = cache_fetch($clan_hash,$user['clan_id'],'clan_get');
        //		$nick_data[] = PATH_IMAGE_CLANS.$clan['picture'];
        $nick_data[] = $clan['picture'];
    }
    $skill_info = user_get_skill_info($user_id, false, true, true, true, array('fight_param' => $param));
    $skill_hash = &$skill_info['skills'];
    if (is_array($param['user_skills'][$user_id])) {
        foreach ($param['user_skills'][$user_id] as $skill_id=>$value) {
            // увеличиваем макс. кол-во жизни у персов с невидимостью
            if (($skill_id == 'HPMAX') && (user_is_invisible($user))) {
                $percent = rand(0, INVISIBILITY_HP_INCREASE_PERCENT_MAX);
                $value += ($value * $percent);
            }

            $skill_hash[$skill_id]['skill_id'] = $skill_id;
            $skill_hash[$skill_id]['value'] += $value;
        }
    }



    $user_cfg = user_get_cfg($user, false, (($user['flags2'] & USER_FLAG2_HIDE_STYLE) ? false : true), false, array('fight_param' => $param));
    $combo_list = combo_user_list(false,$user_id,'',true);
    // формируем список эффектов
    $effects = array();
    $bound_effects_ids = array();
    $arrows_cnt = 0;
    $slot_num_max = false;
    foreach ($user_cfg['artifacts'] as $k=>$artifact) {
        // Применяем усиление кланового тотема
        if ($user['clan_id'] && $artifact['type_id'] == ARTIFACT_TYPE_ID_CLAN_TOTEM) {
            global $clan_hash_cache;
            $clan_info = cache_fetch($clan_hash_cache, $user['clan_id'], 'clan_info_get');

            if ($clan_info && $clan_info['totem_boost'] > 1) {
                $booster = artifact_list(false, $artifact['user_id'], null, true, false, sql_pholder(' AND type_id = ? LIMIT 1', ARTIFACT_TYPE_ID_CLAN_TOTEM_BOOST));
                if (!empty($booster)) {
                    $booster = reset($booster);

                    $user_cfg['artifacts'][$k]['field_mods']['e_i1'] = $clan_info['totem_boost'];
                    $user_cfg['artifacts'][$k]['field_mods']['e_f2'] = $clan_info['totem_boost'];
                }
            }
        }

        // Найдем стрелы для лука
        if ($arrows_cnt == 0 && $skill_hash['BOWARROWS']['value'] > 0 && $artifact['type_id'] == ARTIFACT_TYPE_ID_BOW) {
            $arrows_hash = artifact_get_arrows_hash();
            if ($arrows_hash) {
                $bow_artikul = artifact_artikul_get($artifact['artikul_id']);
                if ($bow_artikul && $arrows_hash[$bow_artikul['level_min']]) {
                    $same_level_arrows_ids = array_keys($arrows_hash[$bow_artikul['level_min']]);
                    $arrows_list = $same_level_arrows_ids ? artifact_list(false, $user_id, null, true, false, sql_pholder(' AND artikul_id IN (?@)', $same_level_arrows_ids)) : array();
                    foreach($arrows_list as $arrows) {
                        $arrows_cnt += $arrows['cnt'];
                    }

                    $arrows_cnt = min($arrows_cnt, $skill_hash['BOWARROWS']['value']);
                }

            }
        }
        $user_cfg['artifacts'][$k]['object_class'] = OBJECT_CLASS_ARTIFACT;
        if ($artifact['bound_effects']) {
            $bound_ids = explode(',', trim($artifact['bound_effects']));
            if (!empty($bound_ids)) foreach ($bound_ids as $bound_id) {
                $bound_id = intval($bound_id);
                if ($bound_id) $bound_effects_ids[$bound_id] = $bound_id;
            }
        }
    }
    $bound_effects = !empty($bound_effects_ids) ? artifact_artikul_list(array('id' => $bound_effects_ids)) : array();
    foreach ($bound_effects as $b_eff) {
        $b_eff['artikul_id'] = $b_eff['id'];
        unset($b_eff['id']);
        $b_eff['object_class'] = OBJECT_CLASS_ARTIFACT_ARTIKUL;
        $b_eff['slot_id'] = 'BOW';
        $b_eff['effect_type'] = 'bow';
        $user_cfg['artifacts'][] = $b_eff;
    }

    /*$user_cfg['artifacts'][] = array(
        'artikul_id' => FS_ART_PASS_TURN,
        'object_class' => OBJECT_CLASS_ARTIFACT_ARTIKUL,
        'slot_id' => 'VARIANT_EFFECT',
        'title' => strval(FS_ART_PASS_TURN),
        'cnt' => 9999,
        'effect_type' => 'pass_turn',
    );*/
    //Пропуск хода xD swfTransfer("item","game","useEffect@7653:");

    skill_objects_list($user_cfg['artifacts']);
    foreach ($user_cfg['artifacts'] as $artifact) {
        // время когда возожно следующее испосльзование
        $e_cdrtime = ($artifact['flags'] & ARTIFACT_FLAG_GLOBAL_COOLDOWN) ? $artifact['param2'] : 0;
        $e_energy_cost = $artifact['e_flags'] & FS_PEF_BOW ? $artifact['param1'] : 0;
        $sub_slot = 1;
        if ($artifact['slot_id'] == 'VARIANT_EFFECT') {
            $sub_slot = $artifact['slot_num'] % 2 ? 2 : 3;
            $artifact['slot_num'] = ceil($artifact['slot_num'] / 2);
        }
        $effect = array(
            'artikul_id' => $artifact['artikul_id'],
            'id' => $artifact['id'],
            'cnt' => $artifact['cnt'],
            'title' => $artifact['title'],
            'picture' => $artifact['picture'],
            'slot_num' => $artifact['slot_num'],
            'skills' => _skills($artifact['artifact_skills'],'value2'),
            'time_expire' => $artifact['time_expire'],
            'flags' => $artifact['flags'],
            'e_cdrtime' => $e_cdrtime,
            'e_energy_cost' => $e_energy_cost,
            'sub_slot' => $sub_slot,
            'field_mods' => $artifact['field_mods'],
        );

        if($artifact['effect_type']){
            $effect['effect_type'] = $artifact['effect_type'];
        }

        $slot_num_max = ($slot_num_max <= $artifact['slot_num'] ? $artifact['slot_num'] : $slot_num_max);

        // Активацию эффектов и знамени производит игрок вручную
        if (!in_array($artifact['slot_id'], array('BANNER', 'EFFECT', 'BOW', 'VARIANT_EFFECT'))) $effect['e_flags'] |= FS_PEF_ACTIVE;
        $effects[$artifact['id']] = $effect;
    }
    //logfile(DEBUG_FILE_LOG_DEV, print_r($effects,true));
    /*$effects_hash = make_hash($effects, 'slot_num', true);
	foreach ($effects_hash as $slot_num => $slot_effects) {
		if (count($slot_effects) === 1 && $slot_effects[0]['sub_slot'] === 1) {
			$effects[$slot_effects[0]['id']]['sub_slot'] = 0;
		}
	}*/
    foreach ($combo_list as $combo) {
        $effects[] = array(
            'artikul_id' => $combo['artikul_id'],
            'cnt' => 0,
            'e_flags' => FS_PEF_AUX,
        );
    }

    foreach (spell_user_list(array('user_id' => $user_id)) as $spell) {
        if (!$spell['slot']) continue;
        $effects[] = array(
            'artikul_id' => $spell['artikul_id'],
            'cnt' => 0,
            'slot_num' => $spell['slot'],
            'e_flags' => FS_PEF_SPELL,
        );
    }
    //logfile(DEBUG_FILE_LOG_DEV,print_r($effects,true));

    // creating personage
    $akey = rand(1000000,1000000000);
    $flags = 0;
    $ctrl_data = '';
    $pet = array();
    $pet_sk_time = 0;
    $pet_lvl = 0;
    $pet_exp = 0;
    $pet_ready = 0;
	$pet_src = '';

    do{
        if ($user['pet_id']) {
            $pet = pet_get($user['pet_id']);

            $pet_artikul = pet_artikul_get($pet['artikul_id']);
            $count_food_pet = $pet_food_level[$pet['quality']][$pet_artikul['level']];
            if($count_food_pet){
                $amount = artifact_amount($pet_artikul['food_artikul_id'], $user['id']);
                if($count_food_pet > $amount){
                    unset($pet);
                    unset($pet_artikul);
                    unset($user['pet_id']);
                    break; //Если еды слишком мало то питомец не актив!
                }
            }
			
			//Добываем PetSrc для боевки!
            if(!($user['flags2'] & USER_FLAG2_PET_VISIBLE)) {

            }
            $pet_src = PATH_IMAGE_PETS.$pet_artikul['fight_picture'];

            $pet_lvl = intval($pet_artikul['level']);
            $pet_ready = intval($pet['rest_time'] > time_current() && !($pet['flags'] & PET_FLAG_REST) && !($pet['flags'] & PET_FLAG_TRAINING));
            if ($pet_artikul && $pet_artikul['f_ctrlfunc'] && $pet_artikul['f_ctrlfile']) {
                $ctrl_data = ($pet_artikul['f_ctrlfile'] ? (defined('SERVER_ROOT_TEST') ? SERVER_ROOT_TEST : SERVER_ROOT).PATH_SCRIPTS.$pet_artikul['f_ctrlfile'].':' : '').$pet_artikul['f_ctrlfunc'];
            }
            if($pet_artikul ){
                $pet_effects = pet_artikul_effect_list(false, sql_pholder(' AND pet_artikul_id=?', $pet_artikul['id']));
                $ability_univiable = pet_spells_get(array('user_id' => $user['id'], 'pet_id' => $user['pet_id']));
                if($ability_univiable) $ability_univiable['unaviable_ids'] = json_decode($ability_univiable['unaviable_ids'], true);
                foreach ($pet_effects as $pet_effect) {
                    if($ability_univiable['unaviable_ids'][$pet_effect['artifact_artikul_id']]) continue;
                    $effects[] = array(
                        'artikul_id' => $pet_effect['artifact_artikul_id'],
                        'cnt' => intval($pet_effect['cnt']),
                        'e_flags' => FS_PEF_PET_ASSIST,
                        'effect_type' => 'pet',
                    );
                }
            }

            // убрал зависимость получаемого петом опыта от его сытости. теперь пет получает опыт только в случае, если его уровень меньше уровня хозяина
            if ($pet_artikul && $pet_artikul['exp_get'] && ($pet_artikul['level'] < $user['level'])) {
                $pet_exp = $pet_artikul['exp_get'];
            }

            $flags |= FS_PF_PET_ENABLE;

            //$pet_satiation = pet_get_satiation($pet);
            //if($pet_satiation > 0) { // Старый век

            //}
        }
    }while(0);

    do{
        break; //Код на способности питомцев (Миша сказал нахуй!)
        if ($user['pet_id']) {
            $pet = pet_get($user['pet_id']);
            $pet_satiation = pet_get_satiation($pet);
            if($pet) {
                $pet_artikul = pet_artikul_get($pet['artikul_id']);
                $pet_lvl = intval($pet_artikul['level']);
                $pet_ready = intval($pet['rest_time'] > time_current() && !($pet['flags'] & PET_FLAG_REST) && !($pet['flags'] & PET_FLAG_TRAINING));
                if ($pet_artikul && $pet_artikul['f_ctrlfunc'] && $pet_artikul['f_ctrlfile']) {
                    //$ctrl_data = ($pet_artikul['f_ctrlfile'] ? (defined('SERVER_ROOT_TEST') ? SERVER_ROOT_TEST : SERVER_ROOT).PATH_SCRIPTS.$pet_artikul['f_ctrlfile'].':' : '').$pet_artikul['f_ctrlfunc'];
                }
                if($pet_artikul ){
                    $pet_effects = pet_artikul_effect_list(false, sql_pholder(' AND pet_artikul_id=?', $pet_artikul['id']));
                    if($pet_effects){
                        $ability_artifact_ids = get_hash($pet_effects, 'artifact_artikul_id', 'cnt');
                        if($ability_artifact_ids){
                            $ability_artifacts = make_hash(artifact_artikul_list(array('id' => array_keys($ability_artifact_ids))));
                            $pet_spells = make_hash(pet_adv_effects_list(array('user_id' => $user['id'])),'artikul_id');

                            foreach ($ability_artifacts as $k=>$abil){
                                if(!$pet_spells[$abil['id']]) unset($ability_artifacts[$k]);
                            }
                        }
                        foreach ($ability_artifacts as $k=>$ability_artifact) $ability_artifacts[$k]['object_class'] = OBJECT_CLASS_ARTIFACT_ARTIKUL;
                        //Пропуск хода xD swfTransfer("item","game","useEffect@7653:");

                        skill_objects_list($ability_artifacts);
                        foreach ($ability_artifacts as $artifact) {
                            $pet_spell = $pet_spells[$artifact['id']];
                            if(!$pet_spell) continue;
                            $e_cdrtime = ($artifact['flags'] & ARTIFACT_FLAG_GLOBAL_COOLDOWN) ? $artifact['param2'] : 0;
                            $e_energy_cost = $artifact['e_flags'] & FS_PEF_BOW ? $artifact['param1'] : 0;
                            $slot_num_max++;
                            $artifact['slot_num'] = ceil($artifact['slot_num'] / 2);

                            $effect = array(
                                'artikul_id' => $artifact['id'],
                                'cnt' => $pet_spell['cnt'],
                                'title' => $artifact['title'],
                                'picture' => $artifact['picture'],
                                'skills' => _skills($artifact['artifact_skills'],'value2'),
                                'time_expire' => $artifact['time_expire'],
                                'flags' => $artifact['flags'],
                                'e_cdrtime' => $e_cdrtime,
                                'e_energy_cost' => $e_energy_cost,

                                'field_mods' => $artifact['field_mods'],
                            );

                            //$effects['slot_num'] = $slot_num_max;

                            //$effect['e_flags'] |= FS_PEF_ACTIVE;

                            $effects[$artifact['id']] = $effect;
                        }
                    }

                }

                // убрал зависимость получаемого петом опыта от его сытости. теперь пет получает опыт только в случае, если его уровень меньше уровня хозяина
                if ($pet_artikul && $pet_artikul['exp_get'] && ($pet_artikul['level'] < $user['level'])) {
                    $pet_exp = $pet_artikul['exp_get'];
                }

                $flags |= FS_PF_PET_ENABLE;
            }
        }
    }while(0);



    //Эффекты лука
    $bow_effects = array();
    $artikul_bow = artifact_get(array('user_id' => $user['id'], 'slot_id' => 'BOW'),sql_pholder(' AND !(flags & ?#ARTIFACT_FLAG_ARMOR_STYLE)'));
    if($artikul_bow){
        $bow_effect_list = make_hash(artifact_effect_list(array('artikul_id' => $artikul_bow['artikul_id'])),'effect_id');
        if($bow_effect_list){
            $bow_effects = make_hash(artifact_artikul_list(false, sql_pholder(' AND id IN(?@)',array_keys($bow_effect_list))));
        }
    }

    if($bow_effects){
        foreach ($bow_effects as $k=>$ability_artifact) $bow_effects[$k]['object_class'] = OBJECT_CLASS_ARTIFACT_ARTIKUL;
        //Пропуск хода xD swfTransfer("item","game","useEffect@7653:");

        skill_objects_list($bow_effects);
        foreach ($bow_effects as $artifact) {
            $e_cdrtime = ($artifact['flags'] & ARTIFACT_FLAG_GLOBAL_COOLDOWN) ? $artifact['param2'] : 0;
            $e_energy_cost = $artifact['e_flags'] & FS_PEF_BOW ? $artifact['param1'] : 0;
            $slot_num_max++;
            $artifact['slot_num'] = ceil($artifact['slot_num'] / 2);
            $effect = array(
                'artikul_id' => $artifact['id'],
                'cnt' => 9999,
                'title' => $artifact['title'],
                'picture' => $artifact['picture'],
                'skills' => _skills($artifact['artifact_skills'],'value2'),
                'time_expire' => $artifact['time_expire'],
                'flags' => $artifact['flags'],
                'e_cdrtime' => $e_cdrtime,
                'e_energy_cost' => $e_energy_cost,
                'field_mods' => $artifact['field_mods'],
                'effect_type' => 'bow',
            );
            $effects[] = $effect;
        }
    }

    //fight_bind
    //BANNER LOADER HUADER
    $user_slot_banner = user_get_artifact_list($user_id, 'BANNER');
    $u_banner = false;
    foreach ($user_slot_banner as $banner){
        if($banner['flags'] & ARTIFACT_FLAG_ARMOR_STYLE){
            continue;
        }
        $u_banner = $banner;
        break;
    }
    if($u_banner){
        $banner_artifact_artikul = artifact_artikul_get($u_banner['artikul_id']);
        $banner_skills = skill_object_list(OBJECT_CLASS_ARTIFACT_ARTIKUL, $banner_artifact_artikul);
        $e_cdrtime = ($u_banner['flags'] & ARTIFACT_FLAG_GLOBAL_COOLDOWN) ? $u_banner['param2'] : 0;

        $effect = array(
            'artikul_id' => $u_banner['artikul_id'],
            'cnt' => 1,
            'title' => $banner_artifact_artikul['title'],
            'picture' => $banner_artifact_artikul['picture'],
            'skills' => _skills($banner_skills,'value2'),
            'time_expire' => $u_banner['time_expire'],
            'flags' => $u_banner['flags'],
            'e_flags' => $banner_artifact_artikul['e_flags'],
            'e_cdrtime' => $e_cdrtime,
            'e_energy_cost' => 0,
            'field_mods' => $artifact['field_mods'],
            'effect_type' => 'banner',
            'slot_name' => $banner_artifact_artikul['slot_id'],
        );
        $effects[] = $effect;
    }

    //$aura_artifact_artikul = artifact_artikul_get(9831);

    //

    if(count(user_get_artifact_list($user_id, 'BANGLE')) > 0){
        foreach (spell_user_aura_list(array('user_id' => $user_id)) as $spell_aura) {
            if (!$spell_aura['slot']) continue;
            $aura_artifact_artikul = artifact_artikul_get($spell_aura['artikul_id']);
            $aura_skills = skill_object_list(OBJECT_CLASS_ARTIFACT_ARTIKUL, $aura_artifact_artikul);
            $e_cdrtime = ($aura_artifact_artikul['flags'] & ARTIFACT_FLAG_GLOBAL_COOLDOWN) ? $aura_artifact_artikul['param2'] : 0;
            $e_energy_cost = $aura_artifact_artikul['e_flags'] & FS_PEF_BOW ? $aura_artifact_artikul['param1'] : 0;
            $effects[] = array(
                'artikul_id' => $aura_artifact_artikul['id'],
                'cnt' => 9999,
                'title' => $aura_artifact_artikul['title'],
                'picture' => $aura_artifact_artikul['picture'],
                'skills' => _skills($aura_skills,'value2'),
                'time_expire' => $aura_artifact_artikul['time_expire'],
                'flags' => $aura_artifact_artikul['flags'],
                'e_flags' => $aura_artifact_artikul['e_flags'],
                'e_cdrtime' => $e_cdrtime,
                'e_energy_cost' => 0,
                'field_mods' => $aura_artifact_artikul['field_mods'],
                'effect_type' => 'aura',
                'slot_name' => $aura_artifact_artikul['slot_id'],
            );
        }
    }

    if ($skill_info['art']) $flags |= FS_PF_ART;



    $user_lua_params = array(
		'petLevel' => $pet_lvl,
		'petReady' => $pet_ready,
	);

	foreach ($skill_hash as $skill) {
		if ($skill['flags'] & SKILL_FLAG_TRANSFER_TO_LUA) {
			$user_lua_params['skill_'.$skill['skill_id']] = $skill['value'];
		}
	}

    // Пробегаемся по статистике, возможно что-то нужно передать в LUA
    $user_stats = user_stat_list(array(
		'user_id' => $user_id,
		'type_id' => USER_STAT_TYPE_SKILL,
		'object_id' => array_keys($user_stat_skill_to_skill_id_for_lua)), '', ' object_id, value ');
	if ($user_stats) {
		foreach ($user_stats as $stat) {
			if ($user_stat_skill_to_skill_id_for_lua[$stat['object_id']]) {
				$user_lua_params['skill_'.$user_stat_skill_to_skill_id_for_lua[$stat['object_id']]] = $stat['value'];
			}
		}
	}

    if (isset($param['lua_user_params'][$user_id])) {
		$user_lua_params += $param['lua_user_params'][$user_id];
	}

    // неведимко отмечается определенным флагом
    $user_invisible = user_is_invisible($user);
    if ($user_invisible) {
        $flags |= FS_PF_INVISIBLE;
    }

    if($user['flags2'] & USER_FLAG2_SWSTAND && spell_user_count(array('user_id' => $user['id']), ' AND slot > 0') > 0){
        $flags |= FS_PF_MAGIC;
    }

    $auth = auth_get($user_id);
    $fight_user_flags = 0;
    // невидимость
    if ($user_invisible) {
        $fight_user_flags |= FIGHT_USER_FLAG_INVISIBLE;
    }
    if ($unmounted) {
        $fight_user_flags |= FIGHT_USER_FLAG_UNMOUNTED;
    }
    if (($user['flags'] & USER_FLAG_PUNISH) && user_get_punishment_state($user['id'], CRIME_EXPERIENCE)) {
        $fight_user_flags |= FIGHT_USER_FLAG_NOEXP;
    }

    if ($user['party_id']) {
        $party_check = party_get($user['party_id']);
        if ($party_check['flags'] & PARTY_FLAG_10MAX) {
            if ($user['instance_id']) {
                $instance = instance_get($user['instance_id']);
                $instance_root = $instance['root_id'] ? instance_get($instance['root_id']) : $instance;
                if (!($instance_root['flags'] & INST_FLAG_10MAX)) {
                    $user['party_id'] = 0;
                }
            } else {
                $user['party_id'] = 0;
            }
        }
    }

    $kind_m = $user['kind'];
    if($fight['type'] == FIGHT_TYPE_CHAOTIC || $fight['type'] == FIGHT_TYPE_ARENA || $fight['type'] == FIGHT_TYPE_ADV_DUEL || $fight['type'] == FIGHT_TYPE_BOSS_PLANNER){
        $kind_m = $team;
    }
    if($param['force_kind']){
        $kind_m = $param['force_kind'];
    }
    if($param['kind_team']) $kind_m = $team;

    $fight_user_id = fight_user_save(array(
        'fight_id' => $fight_id,
        'user_id' => $user_id,
        'user_level' => $user['level'],
        'user_kind' => $kind_m,
        'user_rank' => $user['rank'],
        'user_ipaddr' => common_pack_ip($auth['last_ip']),
        'user_compid' => $auth['last_cid'],
        'team' => $team,
        'party_id' => $user['party_id'],
        'pet_id' => intval($pet['id']),
        'pet_exp_get' => $pet_exp,
        'flags' => $fight_user_flags,
    ));

    NODE_POP();

    $answer = null;
    $lua_params = fight_lua_user_params($user_lua_params, $user_id); //for me not $fight_user_id
	$fscl->sendCommand(FS_SCCT_SET_PARAMS_LUA,$fight_id, 'Pers', $lua_params);
	if (($status = $fscl->getAnswer($answer)) != FS_SS_OK) {
		fight_addlog(sprintf("[fight_bind]: FS STATUS=%d: Can't set lua params! (fight_id=%d)",$status,$fight_id));
		return false;
	}

    $nick = (($param['fight_flags'] & FIGHT_FLAG_BLIND) || $user_invisible) ? translate('Невидимка') : $user['nick'];
    $skeleton = $user_cfg['skeleton'];
    $gender = $user['gender'];

    // подменяем скелет и пол для невидимки
    if ($user_invisible) {
        $gender = 1;
        if (defined('INVISIBLE_SKELETON') && INVISIBLE_SKELETON) {
            $skeleton = INVISIBLE_SKELETON;
        } else {
            $skeleton = '2010';
        }
    }

    if ($user['flags'] & USER_FLAG_CSERVER_GUEST) {
        $user_info = user_info_get($user['id']);
        $clan_info = unserialize($user_info['clan_data']);
        if ($user_info['clan_data']) $user['clan_id'] = $clan_info['id'] | ($clan_info['server_id'] << 16);
    }

    $yarost = intval(STANDART_YAROST_CNT + $skill_hash['YAROST']['value']);
	$yarost_max = 100 + intval($skill_hash['YAROST_MAX']['value']);
    if($yarost >= $yarost_max){
        $yarost = $yarost_max;
    }

    $fscl->sendCommand(FS_SCCT_CREATE_PERS,
        $user_id,
        $akey,
        $flags,
        $nick,
        implode(',',$nick_data),
        intval($user['level']),
        intval($gender),
		0, //2012 party_id
		intval($user['clan_id']), //2012 clan_id
        $user['raid_id'] ? intval($user['raid_id']) : intval($kind_m),
        intval($user['class']),
        intval($skeleton),
        _sk_time($user_cfg['skeleton'],$user['gender']),
        0,
        0,
        0.0,
        $ctrl_data,
        intval($pet_lvl),
        intval($pet_ready),
        ($user['flags2'] & USER_FLAG2_AUTO_KICKS ? 1 : 0),
        intval($arrows_cnt), //Колчиество стрел
        intval($yarost), //Колчиество ярости в начале
		$pet_src,
		intval($yarost_max) //Колчиество ярости MAX
    );

    if (($status = $fscl->getAnswer($answer)) != FS_SS_OK) {
        fight_addlog(sprintf("[fight_bind]: FS STATUS=%d: Can't create personage! (user_id=%d)",$status,$user_id));
        return false;
    }
    // loading skills
    // подделываем уровень под характеристику, в дальнейшем будет как-то переделано
    $skill_hash['LEVEL'] = array('skill_id' => 'LEVEL', 'value' => $user['level']);

    //BOT_TYPE_DMG_ убираем из основных скиллов
    $bot_dmg_skill_hash = $bot_dmg_skill_values = array();
    foreach ($skill_hash as $_k=>$_v) {
        if(strpos($_k, 'BOT_TYPE_DMG_') !== false) {
            $bot_dmg_skill_hash[$_k] = $_v;
            unset($skill_hash[$_k]);
        }
    }

    $fscl->sendCommand(FS_SCCT_SET_SKILLS,$user_id,_skills($skill_hash,'value',true));
    if (($status = $fscl->getAnswer($answer)) != FS_SS_OK) {
        fight_addlog(sprintf("[fight_bind]: FS STATUS=%d: Can't set personage skills! (user_id=%d)",$status,$user_id));
        return false;
    }

    //Загрузим BOT_TYPE_DMG_ скиллы в особую секцию перса
    foreach ($bot_dmg_skill_hash as $_k=>$_skill) {
        $_skill_id = $_skill['skill_id'] ? $_skill['skill_id']: $_k;
        $_skill_id = intval(str_replace('BOT_TYPE_DMG_', '', $_skill_id));
        if (($_skill['value'] < 0)) $_skill['value'] = 0;
        $bot_dmg_skill_values[] = array('type' => PT_INT, 'id' => $_skill_id, 'val' => $_skill['value']);
    }
    //Загружаем только в случае наличия, экономим ресурсы
    if($bot_dmg_skill_values) {
        $fscl->sendCommand(FS_SCCT_BOTDMG_SKILLS, $user_id, $bot_dmg_skill_values);
        if (($status = $fscl->getAnswer($answer)) != FS_SS_OK) {
            fight_addlog(sprintf("[fight_bind]: FS STATUS=%d: Can't set personage skills! (user_id=%d)", $status, $user_id));
            return false;
        }
    }

    // loading parts
    if (!fight_bind_layers($user_id, $user_cfg['layers'])) return false;

    // loading effects
    if (!fight_bind_effects($user_id,$effects)) return false;
    // loading combos
    foreach ($combo_list as $combo) {
        $fscl->sendCommand(FS_SCCT_ADD_COMBO,
            $user_id,
            intval($combo['id']),
            intval($combo['level']),
            intval($combo['artikul_id']),
            _combo_seq($combo['seq'])
        );
        if (($status = $fscl->getAnswer($answer)) != FS_SS_OK) {
            fight_addlog(sprintf("[fight_bind]: FS STATUS=%d: Can't load personage combo! (user_id=%d, combo_id=%d)",$status,$user_id,$combo['id']));
            return false;
        }
    }
    // binding to the fight
    $fscl->sendCommand(FS_SCCT_BIND_PERS,$user_id,$fight_id,$team);
    if (($status = $fscl->getAnswer($answer)) != FS_SS_OK) {
        if ($status == FS_SS_WRONG_DATA) return false;
        fight_addlog(sprintf("[fight_bind]: FS STATUS=%d: Can't bind personage! (user_id=%d, fight_id=%d, team=%d)",$status,$user_id,$fight_id,$team));
        return false;
    }



    fight_user_skill_save(array(
        'fight_id' => $fight_id,
        'user_id' => $user_id,
        'data' => serialize(get_hash($skill_hash,'skill_id','value')),
    ));
    user_save(array(
        'id' => $user_id,
        'fight_akey' => $akey,
    ));
    return true;
}

// Подключение бота к бою
// $param
//   ['lua_bot_params'][$param => $value]
//   ['bot_params'][$param => $value] // параметры которые могут быть переданы из вне
//     'activator_id'    => $id           // id объекта, который вызвал бота
//     'activator_class' => $object_class // класс объекта, который вызвал бота
//     'target_id'       => $id           // id объекта, на которого совершил нападение бот
//     'target_class'    => $object_class // класс объекта, на которого совершил нападение бот
function fight_bind_bot($fight_id, $bot_id, $team, $param=false) {
    global $fscl, $rent_pers;

    $fight_id = intval($fight_id);
    $bot_id = intval($bot_id);
    $team = intval($team);
    if (!$fight_id || !$bot_id || ($team < 1) || ($team > 2)) return false;
    $bot = bot_get($bot_id);
    if (!$bot) return false;
    $skill_list = array();
    if($bot['rent_user_id']) {
        //Скиллы берем с юзера
        $skill_info = user_get_skill_info(intval($bot['rent_user_id']), false, true, true, true, array('downgrade_effect' => 0.50,));
        $skill_hash = &$skill_info['skills'];
        if (is_array($param['user_skills'][intval($bot['rent_user_id'])])) {
            foreach ($param['user_skills'][intval($bot['rent_user_id'])] as $skill_id=>$value) {
                $skill_hash[$skill_id]['skill_id'] = $skill_id;
                $skill_hash[$skill_id]['value'] += $value;
            }
        }
        $skill_list = $skill_hash;
    }elseif($bot['companion_id'] || $param['shadow']){
        $skill_info = companion_get_skill_info(($bot['companion_id'] ? $bot['companion_id'] : $param['shadow']['id']),false,true,true);
        $skill_list = &$skill_info['skills'];
    }else{
        $skill_list = skill_object_list(OBJECT_CLASS_BOT, $bot_id, '', true);
    }
    // Подготовка эффектов
    $effects = array();
    $bot_artukul_effects = bot_artikul_effect_list(array('bot_artikul_id' => $bot['artikul_id']));
    foreach ($bot_artukul_effects as $bot_artikul_effect) {
        if ($bot_artikul_effect['flags'] & BOT_EFFECT_GET_EFFECTS) {
            $effects[] = array(
                'artikul_id' => $bot_artikul_effect['artifact_artikul_id'],
                'cnt' => $bot_artikul_effect['cnt'],
            );
        }
    }

    if($bot['rent_user_id']){
        //Рента бота xD
        //Подключим абилки

        $user_level = $bot['level'];
        $RP = false;
        foreach ($rent_pers as $k=>$v){
            if(!in_array($user_level, $v['levels'])) continue;
            $RP = $v;
        }
        if($RP){
            if($RP['z']) $effects[] = array('artikul_id' => $RP['z'], 'cnt' => $RP['z_cnt'],);
            if($RP['g']) $effects[] = array('artikul_id' => $RP['g'], 'cnt' => $RP['g_cnt'],);
            if($RP['m']) $effects[] = array('artikul_id' => $RP['m'], 'cnt' => $RP['m_cnt'],);
            if($RP['k']) $effects[] = array('artikul_id' => $RP['k'], 'cnt' => $RP['k_cnt'],);
            $effects[] = array('artikul_id' => $RP['s_id'], 'cnt' => 9999,); //Подключим супер-удары
        }
        $effects[] = array('artikul_id' => UDAR_PERSA_ID, 'cnt' => 9999,); //Подключим удары
    }

    // creating bot
    $pers_id = fight_user_save(array(
        'fight_id' => $fight_id,
        'user_level' => $bot['level'],
        'user_kind' => $bot['kind'],
        'bot_id' => $bot['id'],
        'bot_artikul_id' => $bot['artikul_id'],
        'team' => $team,
        'rent_user_id' => $bot['rent_user_id'] ? intval($bot['rent_user_id']) : 0,
        'companion_id' => ($param['shadow'] ? $param['shadow']['id'] : 0),
    ));


    $bot_lua_params = array();
    foreach ($skill_list as $skill) {
        if ($skill['flags'] & SKILL_FLAG_TRANSFER_TO_LUA) {
            $bot_lua_params['skill_'.$skill['skill_id']] = $skill['value'];
        }
    }

    if (isset($param['bot_params'][$bot_id])) {
        $bot_params = $param['bot_params'][$bot_id];

        if (isset($bot_params['activator_id'])) {

            // определяемся с объектом, который вызвал бота в бой
            $ref = array('fight_id' => $fight_id);
            if ($bot_params['activator_class'] == OBJECT_CLASS_BOT) {
                $ref['bot_id'] = $bot_params['activator_id'];
            } else {
                $ref['user_id'] = $bot_params['activator_id'];
            }

            // передаем его в луа если он находится в этом бою
            $activator = fight_user_get($ref);
            if ($activator) {
                $bot_lua_params['activator_id'] = $activator['id'];
            }
        }

        if (isset($bot_params['target_id'])) {
            // определяемся с объектом, на которого натравили бота
            $ref = array('fight_id' => $fight_id);
            if ($bot_params['activator_class'] == OBJECT_CLASS_BOT) {
                $ref['bot_id'] = $bot_params['target_id'];
            } else {
                $ref['user_id'] = $bot_params['target_id'];
            }

            // передаем его в луа если он находится в этом бою
            $target = fight_user_get($ref);
            if ($target) {
                $bot_lua_params['target_id'] = $target['id'];
            }
        }
    }

    if($param['activator_id']){
        $bot_lua_params['activator_id'] = $param['activator_id'];
    }

    if (isset($param['lua_bot_params'][$bot_id])) {
        $bot_lua_params += $param['lua_bot_params'][$bot_id];
    }

    $lua_params = fight_lua_user_params($bot_lua_params, $pers_id);
	$fscl->sendCommand(FS_SCCT_SET_PARAMS_LUA,$fight_id, 'Pers', $lua_params);
	if (($status = $fscl->getAnswer($answer)) != FS_SS_OK) {
		fight_addlog(sprintf("[fight_bind_bot]: FS STATUS=%d: Can't set lua params! (fight_id=%d)",$status,$fight_id));
		return false;
	}

    $answer = null;
    $flags = FS_PF_BOT;
    if ($bot['flags'] & BOT_FLAG_ART) $flags |= FS_PF_ART;
    if ($bot['flags'] & BOT_FLAG_SKGHOST) $flags |= FS_PF_SKGHOST;
    if ($bot['flags'] & BOT_FLAG_CRITSIMILAR) $flags |= FS_PF_CRITSIMILAR;
    if ($bot['flags'] & BOT_FLAG_SK_HALF_MOROC_LIGHT) $flags |= FS_PF_HALF_MOROC_LIGHT;
    if ($bot['flags'] & BOT_FLAG_SK_HALF_MOROC_DARK) $flags |= FS_PF_HALF_MOROC_DARK;

    if($param['shadow']) $flags |= FS_PF_SHADOW; //COMPANION 2018

    $bot_cfg = false;
    if($param['shadow']){
        $bot_cfg = bot_get_cfg($bot, false, $param['shadow']);
    }else{
        $bot_cfg = bot_get_cfg($bot, false);
    }

    //logfile(DEBUG_FILE_LOG_DEV, print_r($bot_id,true));
    //logfile(DEBUG_FILE_LOG_DEV, print_r($pers_id,true));
    //logfile(DEBUG_FILE_LOG_DEV, print_r($bot,true));

    $kind = $bot['kind'];
    if($param['shadow']){ $kind = 100; $bot['gender'] = $team; }

    $fscl->sendCommand(FS_SCCT_CREATE_PERS,
        $pers_id,
        0,
        $flags,
        $bot['nick'],
        '',
        intval($bot['level']),
        intval($bot['gender']),
		0, //2012 party_id
		0, //2012 clan_id
        intval($kind),
        0,
        intval($bot_cfg['skeleton']),
        _sk_time($bot_cfg['skeleton'],$bot['gender']),
        intval($bot['f_pmask']),
        0,//intval($bot['artikul_id'])
        floatval($bot['exp_coef']/100),
        ($bot['f_ctrlfile'] ? (defined('SERVER_ROOT_TEST') ? SERVER_ROOT_TEST : SERVER_ROOT).PATH_SCRIPTS.$bot['f_ctrlfile'].':' : '').$bot['f_ctrlfunc'],
        intval($bot['type_id']),
        0,
        0,
        0, //Количество стрел
        0,
		'',
        0
    );
    if (($status = $fscl->getAnswer($answer)) != FS_SS_OK) {
        fight_addlog(sprintf("[fight_bind_bot]: FS STATUS=%d: Can't create bot! (pers_id=%d)",$status,$pers_id));
        return false;
    }
    // loading skills
    $skill_list[] = array('skill_id' => 'HP', 'value' => 1000000);
    $fscl->sendCommand(FS_SCCT_SET_SKILLS,$pers_id,_skills($skill_list,'value',true));
    if (($status = $fscl->getAnswer($answer)) != FS_SS_OK) {
        fight_addlog(sprintf("[fight_bind]: FS STATUS=%d: Can't set bot skills! (pers_id=%d)",$status,$pers_id));
        return false;
    }
    //loading parts
    if (!fight_bind_layers($pers_id, $bot_cfg['layers'])) return false;

    // loading effects
    if (!fight_bind_effects($pers_id,$effects)) return false;
    // binding to the fight
    $fscl->sendCommand(FS_SCCT_BIND_PERS,$pers_id,$fight_id,$team);
    if (($status = $fscl->getAnswer($answer)) != FS_SS_OK) {
        if ($status == FS_SS_WRONG_DATA) return false;
        //fight_addlog(sprintf("[fight_bind_bot]: FS STATUS=%d: Can't bind bot! (pers_id=%d, fight_id=%d, team=%d)",$status,$pers_id,$fight_id,$team));
        return false;
    }
    return true;
}

function fight_bind_layers($pers_id, $layers) {
    global $fscl, $_part_match;

    $n_parts = "";
    /*
    tPakId = allPaks[i];
    tColorId = allPaks[i + 1];
    tColorId2 = allPaks[i + 2];
    tColorId3 = allPaks[i + 3];
    animation = allPaks[i + 4];
    */

    foreach($_part_match as $a_m=>$l){
        for($i=0; $i<3;$i++){
            $n_parts .= $layers[$i][$l].',';
        }
    }

    $fscl->sendCommand(FS_SCCT_SET_PARTS,$pers_id,$n_parts);
    if (($status = $fscl->getAnswer($answer)) != FS_SS_OK) {
        fight_addlog(sprintf("[fight_bind]: FS STATUS=%d: Can't set personage parts! (user_id=%d)",$status,$user_id));
        return false;
    }
    return true;

    foreach ($layers as $layer=>$data) {
        $parts = array();
        foreach ($data as $k=>$v) $parts[] = array('type' => PT_INT, 'id' => $k, 'val' => $v);
        $fscl->sendCommand(FS_SCCT_SET_PARTS,$pers_id,$layer,$parts);
        if (($status = $fscl->getAnswer($answer)) != FS_SS_OK) {
            fight_addlog(sprintf("[fight_bind]: FS STATUS=%d: Can't set personage parts! (user_id=%d)",$status,$user_id));
            return false;
        }
    }

    return true;
}

// Загрузка эффектов персонажа
function fight_bind_effects($pers_id, &$effects) {
    global $fscl;
    $artikul_ids = get_hash($effects,'artikul_id','artikul_id');
    $artikuls = $artikul_ids ? make_hash(artifact_artikul_list(array('id' => $artikul_ids))) : array();
    foreach ($artikuls as $k=>$artikul) $artikuls[$k]['object_class'] = OBJECT_CLASS_ARTIFACT_ARTIKUL;
    skill_objects_list($artikuls);
    $s_slots = 0;

    foreach ($effects as $effect) {
        if (!$artikuls[$effect['artikul_id']]['e_code']) continue;
        if (!isset($effect['skills'])) $effect['skills'] = _skills($artikuls[$effect['artikul_id']]['artifact_skills'],'value2');
        $effect['flags'] |= $artikuls[$effect['artikul_id']]['flags'];
        if (isset($effect['e_flags'])) {
            $effect['e_flags'] |= $artikuls[$effect['artikul_id']]['e_flags'];
        } else {
            $effect['e_flags'] = $artikuls[$effect['artikul_id']]['e_flags'];
        }
        $effect = array_merge($artikuls[$effect['artikul_id']],$effect);
        if ($effect['flags'] & ARTIFACT_FLAG_HIDDEN) $effect['e_flags'] |= FS_PEF_HIDDEN;
        // Применяем модификаторы
        if (isset($effect['field_mods']) && is_array($effect['field_mods'])) {
            foreach ($effect['field_mods'] as $mod_key => $mod) {
                $effect[$mod_key] = $effect[$mod_key]*$mod;
            }
        }
        if($effect['effect_type'] == 'bow' ||
            $effect['effect_type'] == 'pass_turn' ||
            $effect['effect_type'] == 'pet' ||
            $effect['effect_type'] == 'banner' ||
            $effect['effect_type'] == 'aura'
        ) {
            //$effect['id'] = 0;
            $effect['slot_num'] = 0;
            //$effect['e_flags'] |= FS_PEF_SPELL; //TODO:Исправьте пожалуйста магии нет а спеллист доступен!
            $s_slots++;
        }

        /*
        if($effect['effect_type'] == 'bow' ||
            $effect['effect_type'] == 'pass_turn'
        ) $effect['e_flags'] |= FS_PEF_ACTIVE;
        */

        $fscl->sendCommand(FS_SCCT_ADD_EFFECT,
            $pers_id, //1
            intval($effect['id']), //2
            intval($effect['cnt']), //3
            intval($effect['e_code']), //4
            floatval($effect['e_f1']), //5
            floatval($effect['e_f2']), //6
            floatval($effect['e_f3']), //7
            intval($effect['e_i1']), //8
            intval($effect['e_i2']), //9
            intval($effect['e_i3']), //10
            intval($effect['e_flags']), //11
            intval($effect['artikul_id']), //12
            intval($effect['group_id']), //13
            intval($effect['e_dmg']), //14
            intval($effect['e_dmgtype']), //15
            ($effect['time_expire'] > 0 ? min($effect['time_expire'] - time_current(), intval($effect['e_acttime'])) : intval($effect['e_acttime'])), //16
            intval($effect['e_actmovecnt']), //17
            intval($effect['e_actperiod']), //18
            intval($effect['e_cdtime']), //19
            intval($effect['e_cdgrpid']), //20
            intval($effect['e_mp']), //21
            intval($effect['e_aoecnt']), //22
            floatval($effect['e_prob']/100), //23
            $effect['title'], //24
            $effect['picture'], //25
            intval($effect['slot_num']), //26
            $effect['e_animdata'], //27
            intval($effect['e_yarost']), //Для луков //28
            ($effect['slot_name'] ? $effect['slot_name'] : ''), //29
            ($effect['sub_slot'] ? $effect['sub_slot'] : 0), //30
            ($effect['e_cdrtime'] ? intval($effect['e_cdrtime']) : 0), //31
			floatval(0), //32
            intval(1), //33 cdType
            $effect['skills']
        );
        $answer = null;
        if (($status = $fscl->getAnswer($answer)) != FS_SS_OK) {
            fight_addlog(sprintf("[fight_bind]: FS STATUS=%d: Can't load personage effect! (pers_id=%d, effect_id=%d)",$status,$pers_id,$effect['id']));
            return false;
        }
    }
    return true;
}

#Функция по отлову нарушителей
function fight_check_ip_cid($fight_user_list = array(), $user_hash = array()){
    $ip_cid_hash = array();
    foreach ($fight_user_list as $fight_user){
        if(!$fight_user['user_id']) continue; //Пропускаем не игроков.
        if($user_hash[$fight_user['user_id']]['flags2'] & USER_FLAG2_FIGHT_ACCESS_IP) continue; //Игрок имеет право играть с 1 IP. Законно
        $ip_cid_hash[md5($fight_user['user_ipaddr'])][$fight_user['user_id']] = $fight_user;
    }
    //logfile(DEBUG_FILE_LOG_DEV, print_r($ip_cid_hash,true));
    foreach ($ip_cid_hash as $check){
        if(count($check) > 1){
            //logfile(DEBUG_FILE_LOG_DEV, print_r($check,true));
        }
    }
}

function fight_addlog($t){
	$backtrace = debug_backtrace_string();
	logfile(FIGHT_FILE_LOG, $backtrace.', '.$t);
	//print_r($t);
}

// Завершение боя
function fight_finish($fight_id) {
    global $fscl;
    global $artikul_hash, $party_hash, $fight_levels, $NODE_NUMS;
    global $user_equip_needed, $quality_info;
    global $user_stat_trends;
    $user_hash = array();

    $fight_id = intval($fight_id);
    if (!$fight_id) return false;

    $fight_honor_mod = 0;	// коэффициент хонора за бг/бойню
    $fight_exp_mod = 0;		// коэффициент опыта за бг/бойню

    $fight = fight_get($fight_id);
    if (!$fight || ($fight['status'] != FIGHT_STATUS_RUNNING)){
        if(($fight['status'] != FIGHT_STATUS_RUNNING)){
            //logfile(FIGHT_FILE_LOG, 'Fight ID:'.$fight_id.' не завершить, статус = '.$fight['status'].'.');
        }else{
            //logfile(FIGHT_FILE_LOG, 'Fight ID:'.$fight_id.' не найдено в базе данных.');
        }
        return false;
    }

    if($fight['type'] == FIGHT_TYPE_CHAOTIC && $fight['adv_chaot_id']){
        $adv_chaot = adv_chaot_get($fight['adv_chaot_id']);

        //Бонусы xD
        $adv_chaot_bonus_dmg = json_decode($adv_chaot['dmg_bonus'],true);

        $adv_chaot_bonus_wins = json_decode($adv_chaot['bonus_id_wins'],true);
        $adv_chaot_bonus_fails = json_decode($adv_chaot['bonus_id_fails'],true);

        $adv_chaot_bonus_win_all = intval($adv_chaot['bonus_id_win_all']);
        $adv_chaot_bonus_fail_all = intval($adv_chaot['bonus_id_fail_all']);

        $adv_chaot_random_bonus_id = intval($adv_chaot['random_bonus_id']);

        $adv_chaot_stat_users = array();
        $adv_chaot_stat_users_all = array();
    }

    if($fight['type'] == FIGHT_TYPE_BOSS_PLANNER && $fight['boss_scheduler_id'] && $fight['boss_artikul_id']){
        $boss_planner = boss_scheduler_get($fight['boss_scheduler_id']);
        $boss_planner_boss = boss_get($fight['boss_artikul_id']);

        if($boss_planner_boss) {
            //Бонусы xD
            $boss_planner_bonus_dmg = json_decode($boss_planner_boss['dmg_bonus'], true);

            $boss_planner_bonus_wins = json_decode($boss_planner_boss['bonus_id_wins'], true);
            $boss_planner_bonus_fails = json_decode($boss_planner_boss['bonus_id_fails'], true);

            $boss_planner_bonus_win_all = intval($boss_planner_boss['bonus_id_win_all']);
            $boss_planner_bonus_fail_all = intval($boss_planner_boss['bonus_id_fail_all']);
        }

        $boss_planner_stat_users = array();
        $boss_planner_stat_users_all = array();
    }

    $adv_stat_users_all = array();

    $area = $instance = $instance_root = $area_fight_bonus = false;
    $turn_into_ghost = true;
    $give_honor = false;
    if ($fight['instance_id']) {
        $instance = instance_get($fight['instance_id']);
        $instance_root = $instance['root_id'] ? instance_get($instance['root_id']) : $instance;
        if ($instance_root['bg_id']) {
            $bg = bg_get($instance_root['bg_id']);
            if ($bg) {
                $fight_honor_mod = $bg['mod_honor'] / 100;
                $fight_exp_mod = $bg['mod_exp'] / 100;
            }
        } else if ($instance_root['slaugter_id']) {
            $slaughter = slaughter_get($instance_root['slaughter_id']);
            if ($slaughter) {
                $fight_honor_mod = $slaughter['mod_honor'] / 100;
                $fight_exp_mod = $slaughter['mod_exp'] / 100;
            }
        } else if ($instance_root['clan_battle_id']) {
            $turn_into_ghost = false;
        }

        $give_honor = true;
    } else {
        $area = area_get($fight['area_id']);
        if ($area['flags'] & AREA_FLAG_DIE_NO_GHOST) $turn_into_ghost = false;
        if (($area['flags'] & AREA_FLAG_GIVEHONOR) || $fight['level']) $give_honor = true;
        if (($area['flags2'] & AREA_FLAG2_NO_ENJURY)) $fight['flags'] |= FIGHT_FLAG_NOINJURY; //Ставим флаг что не выдаем травмы.
    }

    if($fight['in_clan_pvp']) $turn_into_ghost = false;

    if($fight['area_id'] && $area){
        $area_fight_bonus = area_fight_bonus_get(array('area_id' => $area['id']));
    }

    if($fight['type'] == FIGHT_TYPE_ADV_DUEL){
        $give_honor = true;
    }

    $fs_fights = fight_fs_get_fights($fight_id);
    if ($fs_fights === false) {
        fight_addlog(sprintf("[fight_finish]: Can't get fight status! (fight_id=%d)",$fight_id));
        //logfile(FIGHT_FILE_LOG, sprintf("Can't get fight status! (fight_id=%d)",$fight_id));
        return false;
    }
    if ($fs_fights[$fight_id] && !in_array($fs_fights[$fight_id]['status'],array(FS_FS_OVER,FS_FS_FINISHED))) return false; // fight is still running

    // getting fight info and log
    $fight_info = fight_fs_get_fightinfo($fight_id);
    if (!$fight_info) {
        fight_abort($fight_id);
        //logfile(FIGHT_FILE_LOG, sprintf("Can't get fight info! (fight_id=%d)",$fight_id));
        $fight = fight_get($fight_id);
        $fight_users_list = fight_user_list($fight_id);
        //logfile(FIGHT_FILE_LOG, print_r($fight, true));
        //logfile(FIGHT_FILE_LOG, print_r($fight_users_list, true));
        return false;
    }

    $fight_user_list = make_hash(fight_user_list($fight_id));
    $fight_user_list_hash_user_id = make_hash($fight_user_list, 'user_id');
    $fightlog = fight_fs_get_fightlog($fight_id, 1);

    if($fight['type'] == FIGHT_TYPE_CHAOTIC){
        $chaot_fight_user_ids = array();
        foreach ($fight_user_list_hash_user_id as $_uid_n=>$_v){
            $chaot_fight_user_ids[$_uid_n] = $_uid_n;
        }
        _global_event_trigger(GLOBAL_EVENT_TYPE_USER_CNT_CHAOT, count($fight_user_list_hash_user_id), $chaot_fight_user_ids);
    }

    //logfile(DEBUG_FILE_LOG_DEV,'$fight_info = '.print_r($fight_info,true));
    //logfile(DEBUG_FILE_LOG_DEV,'$fightlog = '.print_r($fightlog,true));
    //logfile(DEBUG_FILE_LOG_DEV,'$fight_user_list = '.print_r($fight_user_list,true));

    // Начало: Проверка, пойдёт ли данный бой в статистику по фармовым боям #79968 - Экономика: Статистика PvE боев
    $user_ids = array();
    $bot_ids = array();
    $write_fight_stat=false;
    foreach($fight_user_list as $fight_user){
        if ($fight_user['user_id']) {
            $user_ids[$fight_user['user_id']] =$fight_user ;
        } elseif ($fight_user['bot_id'])
            $bot_ids[$fight_user['bot_id']] = array("team"=>$fight_user['team'],
                "bot_artikul_id"=>$fight_user["bot_artikul_id"],
                "bot_group_id");
    }
    if(count($user_ids)==1){
        $user_id=array_keys($user_ids);
        $user_id=$user_id[0];
        $fight_user_id = $user_ids[$user_id]['id'];
        foreach($bot_ids as $bot_id=>$bot){
            if($bot["team"]==$user_ids[$user_id]["team"]){
                //для проверки нам нужны только боты из другой команды
                unset($bot_ids[$bot_id]);
            }
        }
        //проверяем group_id ботов с которыми сражался юзер
        $bots=bot_list(false, $fight_id);
        foreach($bots as $bot) {
            $write_fight_stat=true;
            $FS["bot_artikul_id"]=$bot["artikul_id"];
            $FS["bot_group_id"]=$bot["group_id"];
            $FS["bot_lvl"]=$bot["level"];
        }
    }
    // Конец: Проверка, пойдёт ли данный бой в статистику по фармовым боям
    if($write_fight_stat) { //расчёт статистики
        NODE_PUSH(null, $user_id);
        $fs_user=user_get(array("id"=>$user_id));
        $FS["user_id"]=$user_id;
        $FS["fight_id"]=$fight_id;
        $FS["user_kind"]=$fs_user["kind"];
        $FS["user_class"]=$fs_user["class"];
        $FS["user_lvl"]=$fs_user["level"];

        $skills=user_get_skill_info($user_id);
        $skills=$skills["skills"];
        $FS["User_DMG"]=ceil($skills["STR"]["value"]+$skills["INTEL"]["value"]+($skills["PWRMIN"]["value"]+$skills["PWRMAX"]["value"])/2);
        $FS["User_Crit"]=intval($skills["CRIT"]["value"]);
        $FS["User_HP"]=intval($skills["HPMAX"]["value"]);
        $FS["User_Def"]=intval($skills["DEF_128"]["value"]);
        $FS["User_Res"]=intval($skills["RST_128"]["value"]);

        $FS["bot_army"]=count($bot_ids);
        $FS["stime"]=$fight["ctime"];

        $FS["fight_cost"] = fight_calc_cost($user_id, $fight_user_id, $fight_info);

        $FS["is_win"]=($user_ids[$user_id]["team"] == $fight_info["winnerTeam"]) ? 1 : 0;
        $FS["duration"]=$fight_info["rtime"];
        $FS["money"]=0;
        NODE_POP();
    }

    $debug_user_id = false;
    foreach ($fight_user_list as $f){
        if($f['user_id'] == DEV_ACCOUNT_ID) $debug_user_id = true;
    }
    if($debug_user_id){
        //logfile(NODE_FILE_LOG,'$fightlog = '.print_r($fightlog,true));
    }

    // посчет урона перса и группы по каждому боту
    $leader_near_fight = array();
    $dmg_target = array();
    foreach ($fightlog as $item) {
        $pers = $fight_info['persData'][$item['persId']];
        //logfile(DEBUG_FILE_LOG_DEV,'test 1'.print_r($pers,true));
        if (($pers['persFlags'] & FS_PF_BOT) || $fight_info['winnerTeam'] != $pers['teamNum'] || $item['code'] != FS_FLC_KICK) continue;
        //logfile(DEBUG_FILE_LOG_DEV,'test 2');
        if(!$item['oppId']) continue;
        $party_id = $fight_user_list_hash_user_id[$item['persId']]['party_id'];
        if ($party_id) {
            if (!isset($leader_near_fight[$party_id])) {
                $leader_near_fight[$party_id] = false;
                $party = party_get($party_id);
                if ($party) {
                    $leader_user = user_get($party['leader_id']);
                    $leader_near_fight[$party_id] = ($fight['area_id'] && ($leader_user['area_id'] == $fight['area_id'])) || ($fight['instance_id'] && ($leader_user['instance_id'] == $fight['instance_id']));
                }
            }

            if ($leader_near_fight[$party_id])
                $dmg_target[$item['oppId']][OBJECT_CLASS_PARTY][$party_id] += $item['i3'];
        }
        //logfile(DEBUG_FILE_LOG_DEV,'test 3 '.OBJECT_CLASS_USER.' = '.$item['oppId'].' = '.$item['persId'].' = '.$item['i3']);
        $dmg_target[$item['oppId']][OBJECT_CLASS_USER][$item['persId']] += $item['i3'];
    }

    //logfile(DEBUG_FILE_LOG_DEV,'$dmg_target_f = '.print_r($dmg_target,true));

    foreach ($dmg_target as $opp_id => $dmg_data) {
        foreach ($dmg_data as $object_class => $dmgs) {
            arsort($dmg_target[$opp_id][$object_class]);
            $max_dmg = reset($dmg_target[$opp_id][$object_class]);
            $dmg_target[$opp_id][$object_class] = array();
            foreach($dmgs as $pers_id => $dmg) {
                if ($dmg != $max_dmg) continue;
                $dmg_target[$opp_id][$object_class][] = array('id' => $pers_id, 'dmg' => $dmg);
            }
            $dmg_target[$opp_id][$object_class] = $dmg_target[$opp_id][$object_class][array_rand($dmg_target[$opp_id][$object_class])];
        }

        if (isset($dmg_target[$opp_id][OBJECT_CLASS_PARTY]) && $dmg_target[$opp_id][OBJECT_CLASS_PARTY]['dmg'] >= $dmg_target[$opp_id][OBJECT_CLASS_USER]['dmg']) {
            $pers_ids = array();
            foreach ($fight_user_list as $fight_user) {
                if ($fight_user['party_id'] == $dmg_target[$opp_id][OBJECT_CLASS_PARTY]['id']) {
                    $pers_ids[] = $fight_user['user_id'];
                }
            }
            $dmg_target[$opp_id] = array(
                'object_class' => OBJECT_CLASS_PARTY,
                'party_id' => $dmg_target[$opp_id][OBJECT_CLASS_PARTY]['id'],
            );
        } elseif ($dmg_target[$opp_id][OBJECT_CLASS_USER])  {
            $dmg_target[$opp_id] = array(
                'object_class' => OBJECT_CLASS_USER,
                'pers_id' => $dmg_target[$opp_id][OBJECT_CLASS_USER]['id'],
            );
        } else {
            unset($dmg_target[$opp_id]);
        }
    }
    // ----

    $answer = null;
    $fightlog_stat = fight_fs_get_fightlog_stat($fight_id);

    //logfile(DEBUG_FILE_LOG_DEV,'$fightlog_stat = '.print_r($fightlog_stat,true));

    $fscl->sendCommand(FS_SCCT_DELETE_FIGHTINFO,$fight_id);
    if (($status = $fscl->getAnswer($answer)) != FS_SS_OK) {
        fight_addlog(sprintf("[fight_finish]: FS STATUS=%d: Can't delete fight info! (fight_id=%d)",$status,$fight_id));
        logfile(FIGHT_FILE_LOG, sprintf("FS STATUS=%d: Can't delete fight info! (fight_id=%d)",$status,$fight_id));
    }

    // saving results
    if (defined('BEST_KIND') && BEST_KIND) {
        $best_kind = (int) BEST_KIND;
    } else {
        $best_kind = 0;
    }

    $alter_user_ids = array();
    $user_ids = array();
    $bot_ids = array();
    $kind_cnts = array();
    $team_cnts = array();
    $t = array();
    $winner_kind_uids = array();
    $user_list_keys = array();
    $user_drop = array();
    foreach ($fight_user_list as $fight_user) {
        if ($fight_user['user_id']) {
            $alter_user_ids[$fight_user['user_id']] = $fight_user['user_id'];
            $user_ids[$fight_user['user_id']] = $fight_user['user_id'];
            $kind_cnts[$fight_user['user_kind']][$fight_user['team']]++;
            $team_cnts[$fight_user['team']]++;
            if ($fight_user['team'] == $fight_info['winnerTeam']) {
                $user_list_keys[] = $fight_user['user_id'];
                $t[$fight_user['user_kind']]++;
                $winner_kind_uids[] = $fight_user['user_id'];
            }
        } elseif ($fight_user['bot_id']) $bot_ids[] = $fight_user['bot_id'];
    }

    //сразу загружаем к кэш информацию о всех пользователях, учавствовавших в бою, если пользователи участвовали
    if ($user_ids) $user_hash = make_hash(user_list(array('id' => $user_ids), '', false), 'id', false);
    if ($user_ids) $user_premium_hash = make_hash(adv_premium_list(array('user_id' => $user_ids), ' AND level > 0', true), 'user_id', false);
    $is_soft_reg = false;
    foreach ($user_hash as $user) {
        if ($user['flags'] & USER_FLAG_NOT_FINISHED_REG) {
            $is_soft_reg = true;
            break;
        }
    }

    #Функция по отлову нарушителей
    fight_check_ip_cid($fight_user_list, $user_hash);

    $estate_hash = $building_settings_hash = $estate_exp_percents = $estate_honor_percents = $work_added = array();
    if ($user_ids) {
        $estate_hash = make_hash(estate_list(array('user_id' => $user_ids)), 'user_id');
        if ($estate_hash) {
            $buildings = building_list(array('user_id' => $user_ids, 'type_id' => array(BUILDING_TYPE_EXP, BUILDING_TYPE_OBELISK)));
            $building_settings = building_settings_list(array('building_type_id' => array(BUILDING_TYPE_EXP, BUILDING_TYPE_OBELISK)));
            foreach($building_settings as $setting) {
                $building_settings_hash[$setting['building_type_id']][$setting['building_level']][$setting['name']] = $setting['value'];
            }
            foreach($buildings as $building) {
                if ($building['type_id'] == BUILDING_TYPE_EXP) {
                    $estate_exp_percents[$building['user_id']] = $building_settings_hash[BUILDING_TYPE_EXP][$building['level']]['PERCENT'];
                }
                if ($building['type_id'] == BUILDING_TYPE_OBELISK) {
                    $estate_honor_percents[$building['user_id']] = $building_settings_hash[BUILDING_TYPE_OBELISK][$building['level']]['PERCENT'];
                }
            }
        }
    }

    arsort($t);
    $winner_kind = reset(array_keys($t));	// победившая раса (актуально для PVP-боев)

    $fight_f_bot = !empty($bot_ids);	// бой с участием ботов
    $fight_f_pvp = $kind_cnts && $kind_cnts[1] && $kind_cnts[2] && (($kind_cnts[1][1] && $kind_cnts[2][2]) || ($kind_cnts[1][2] && $kind_cnts[2][1]));	// PVP-бой
    $exp_coef =	// коэффициент опыта
        ($fight_f_pvp ? 2.0:
            (($fight['type'] == FIGHT_TYPE_DUEL) && !$fight_f_bot ? 0.5:
                1));
    $massive_coef = (count($team_cnts) > 1) &&  (min($team_cnts) >= 100) ? min(count($user_ids)/1000, 1) : 0;	// коеффициент опыта за массовый бой

    if($fight['type'] == FIGHT_TYPE_ARENA || $fight['type'] == FIGHT_TYPE_ADV_DUEL){
        //Если мы на аренке или в дуэли
        $fight_f_pvp = true;
        $exp_coef = 0;
    }

    if ($user_ids) {
        if (!$is_soft_reg) {
            foreach ($user_ids as $user_id) {
                $user_lang = $user_hash[$user_id]['language'] ? $user_hash[$user_id]['language'] : false;
                if ($user_lang) translate_default_language_push($user_lang);

                $msg_text = sprintf(translate('Окончен бой "<a href="#" onClick="showFightInfo(%d,%d);return false;"><b>%s</b></a>".'),$fight_id,SERVER_ID,htmlspecialchars($fight['title']));
             
				if ($massive_coef) $msg_text .= ' '.translate('В связи с большим количеством бойцов полученный опыт был увеличен.');

                if ($user_lang) translate_default_language_pop();
                chat_msg_send_system($msg_text,CHAT_CHF_USER,$user_id);
            }
        }
        if ($fight['instance_id'] && $instance_root['slaugter_id']) {
            foreach($NODE_NUMS as $nn) {
                if ($nn == FRIDGE_NN) continue;
                NODE_PUSH($nn);
                session_save(array(
                    '_add' => sql_pholder(" AND uid IN (?@)",$user_ids),
                    '_set' => sql_pholder('fight_time=?',time_current()),
                ));
                NODE_POP();
            }
        }
    }

    $user_skills = $bot_skills = array();
    $user_levels = $bot_levels = $bot_artikuls = array();
    $bot_is_live_cnt = 0;
    $inst_bonus_ids = array();
    $dmg_user = array();
    $heal_user = array();
    $fight_flags = array();
    $bot_drop = array();
    $bot_drop_info = array(); //Сделай че нибудь бля
    $fight_users_with_broken_artifacts = array();
    $killed_bot_stat = array();
    // создадим хеш использованных петов
    $pet_ids = get_hash($fight_user_list, 'pet_id', 'pet_id');
    $pets_hash = array();
    foreach($NODE_NUMS as $nn) {
        if (FRIDGE_NN == $nn) continue;
        NODE_PUSH($nn);
        $pets_tmp = pet_list(false, null, sql_pholder(" AND id IN (?@) ", $pet_ids));
        foreach($pets_tmp as $pet_tmp) {
            $pets_hash[$pet_tmp['id']] = $pet_tmp;
        }
        NODE_POP();
    }

    $fight_user_bot_ids = array(); // список id для ботов из fight_users

    //logfile(DEBUG_FILE_LOG_DEV,'$user_list_keys = '.print_r($user_list_keys,true));

    if (count($user_list_keys)) {
        /*$fight_user_key = rand(0, count($user_list_keys) - 1);
        //logfile(DEBUG_FILE_LOG_DEV,'$fight_user_key = '.print_r($fight_user_key,true));
        $max_dmg_user = array(
            'id' => $user_list_keys[$fight_user_key],
            'dmg' => $fight_info['persData'][$user_list_keys[$fight_user_key]]['dmg'],
        );*/
    } else {
        $max_dmg_user = array(
            'id' => 0,
            'dmg' => 0,
        );
    }
    $dmg_party = array();

    // список ботов. Необходим в конце функции для сбора статистики (метрики) ($killed_bot_artikul_ids неподходит)
    $bot_hash = make_hash($fight_user_list,'bot_id');
    unset($bot_hash[0]);
    $bot_list = $bot_hash ? make_hash(bot_list(null,null,null,null, sql_pholder(' AND id IN(?@)', array_keys($bot_hash)))) : array();
    $bot_list_stats = array();

    $users_team_num = 0; //Не является публичной офертой xD
    foreach ($fight_user_list as $fight_user) {
        if($fight_user['user_id']){
            $users_team_num = $fight_user['team'];
            break;
        }
    }

    foreach ($fight_user_list as $fight_user) {
        $pers_id = $fight_user['id'];
        if ($fight_user['bot_id']) {	// окончание боя для бота
            $bot_id = $fight_user['bot_id'];
            $fight_user_bot_ids[$pers_id] = $pers_id;
            $pers_info = $fight_info['persData'][$fight_user['id']];
            if (!$pers_info) continue;

            $skill_list = skill_object_list(OBJECT_CLASS_BOT,$bot_id);
            $bot_skills[$bot_id] = get_hash($skill_list,'skill_id','value');
            $bot_levels[$bot_id] = $fight_user['user_level'];
            $data = array(0,$pers_info['dmg'],$pers_info['heal'],$pers_info['killCnt']);
            fight_user_save(array(
                'id' => $fight_user['id'],
                'team' => $pers_info['teamNum'],
                'data' => implode(':',$data),
            ));
            $bot = $bot_list[$bot_id];
            if (!$bot) continue;

            $bot_list[$bot_id] = $bot;
            $bot_list[$bot_id]['pers_info'] = $pers_info;
            $fight_user_bot_ids[$pers_info['persId']] = $pers_info['persId'];
            $bot_list_stats[$pers_info['persId']] = $bot;

            if ($pers_info['persStatus'] == FS_PS_DEAD) {	// бот умер
                if (!($bot['flags'] & BOT_FLAG_TEMP) &&
                    !($bot['flags'] & BOT_FLAG_DIE_LOSS) &&
                    !($bot['flags'] & BOT_FLAG_IGNORE_CONDITIONS)) {
                    $bots_to_save[$bot['id']] = $bot['id'];
                }
                if ($pers_info['teamNum'] != $fight_info['winnerTeam']) { // бот не победил
                    if ($bot['bonus_id']) {
                        $bot_drop[$pers_id]['bonus_id'] = $bot['bonus_id'];
                        if($bot['flags'] && BOT_FLAG_NOX2_PREMIUM){
                            $bot_drop_info[$bot['bonus_id']][] = $bot;
                        }
                    }
                    if ($bot['inst_bonus_id']) $inst_bonus_ids[] = $bot['inst_bonus_id'];
                    $money = rand($bot['money_min']*100,$bot['money_max']*100)/100;
                    if ($money > 0) $bot_drop[$pers_id]['money'] = array('level' => $bot['level'], 'money' => $money);
                    if ($bot['flags'] & BOT_FLAG_STAT) { // на боте стоит "считать статистику"
                        $killed_bot_stat[$pers_id]['stat']++;
                        $killed_bot_stat[$pers_id]['artikul_id'] = $bot['artikul_id'];
                    }
                    if ($bot['flags'] & BOT_FLAG_STAT_TIME) { // на боте стоит "считать статистику по времени убийства"
                        $killed_bot_stat[$pers_id]['time']++;
                        $killed_bot_stat[$pers_id]['artikul_id'] = $bot['artikul_id'];
                    }
                    if (($bot['flags'] & BOT_FLAG_DO_NOT_COUNT_DMG) && isset($dmg_target[$pers_id])) { // на боте стоит "Не учитывать урон от игроков при распределении дропа"
                        unset($dmg_target[$pers_id]);
                    }
                    if ($bot['flags'] & BOT_FLAG_DIE_LOSS) {
                        $bots_to_save[$bot['id']] = $bot['id'];
                    }
                }
            }else{
                $bot_is_live_cnt++;
            }

            //Companion Check
            if($bot['companion_id']){
                if(intval($pers_info['killCnt'])){ //Кол-во убийств
                    skill_object_set_value(OBJECT_CLASS_COMPANION, $bot['companion_id'], 'SHADOW_KILL_CNT', intval($pers_info['killCnt']), array('relative' => true));
                }
                if(intval($pers_info['enemyKillCnt'])){ //Кол-во скальпов
                    skill_object_set_value(OBJECT_CLASS_COMPANION, $bot['companion_id'], 'SHADOW_EKILL_CNT', intval($pers_info['enemyKillCnt']), array('relative' => true));
                }
            }

            if (($bot['flags'] & BOT_FLAG_TEMP) || ($bot['flags'] & BOT_FLAG_IGNORE_CONDITIONS)) {
                $bots_to_delete[$bot['id']] = $bot['id'];
                unset($bots_to_save[$bot['id']]);
            }
        }
    }
    if ($bot_list)	$bot_artikuls = make_hash(bot_artikul_list(false, sql_pholder(' AND id IN (?@)', array_keys(make_hash($bot_list, 'artikul_id')))));
    if ($bots_to_save) {
        $time_current = time_current();
        $insert_bots = array();
        foreach ($bots_to_save as $bot_id) {
            $respawn_time = $bot_list[$bot_id]['respawn_time'];
            $respawn_dispersion = $bot_artikuls[$bot_list[$bot_id]['artikul_id']]['respawn_dispersion'];
            $insert_bots[] = array(
                'id' => $bot_id,
                'rtime' => $respawn_time + (rand(-$respawn_dispersion, $respawn_dispersion) * $respawn_time / 100) + $time_current,
            );
        }
        bot_multi_update($insert_bots, array('id', 'rtime'));
    }
    if ($bots_to_delete) bot_delete(array('id' => array_keys($bots_to_delete)));

    $user_skills = array();
    $fight_user_skills_list = fight_user_skill_list(array('fight_id' => $fight_id));
    foreach($fight_user_skills_list as $fight_user_skills) {
        $user_skills[$fight_user_skills['user_id']] = $fight_user_skills['data'] ? unserialize($fight_user_skills['data']) : array();
    }

    bonus_temporary_variable_reset();

    $clan_bonus_info_hash = array();
    $clan_hash = array();

    foreach ($fight_user_list as $pers_id => $fight_user) {
        if ($fight_user['bot_id']) continue;
        $user_lang = $user_hash[$fight_user['user_id']]['language'] ? $user_hash[$fight_user['user_id']]['language'] : false;
        if (!($fight_user['flags'] & FIGHT_USER_FLAG_FLEE)) {
            NODE_PUSH(null, $fight_user['user_id']);

            $_clan = $clan_hash[$user_hash[$fight_user['user_id']]['clan_id']];
            $_clan_bonus = false;
            if($user_hash[$fight_user['user_id']] && $user_hash[$fight_user['user_id']]['clan_id'] && !$_clan) $_clan = cache_fetch($clan_hash,$user_hash[$fight_user['user_id']]['clan_id'],'clan_get');
            if($_clan && !$clan_bonus_info_hash[$_clan['id']]) {
                $_clan_bonus = clan_bonus_exist($_clan);
                $clan_bonus_info_hash[$_clan['id']] = $_clan_bonus;
            }elseif($clan_bonus_info_hash[$_clan['id']]){
                $_clan_bonus = $clan_bonus_info_hash[$_clan['id']];
            }

            fight_finish_for_user($fight, $fight_info, $fightlog_stat, $user_hash[$fight_user['user_id']], $fight_user_list, $pets_hash[$fight_user['pet_id']], $user_skills, $bot_skills, $user_premium_hash[$fight_user['user_id']], $_clan_bonus);
            NODE_POP();
        }

        //Функция учета активности по ботам!
        $killed_bot_stats = array();
        $killed_bot_stats_trend = 0;
        $user_activity = cache_fetch($user_hash, $fight_user['user_id'], 'user_get'); //Пользователь активности
        //logfile(DEBUG_FILE_LOG_DEV,print_r($user_activity,true));
        $user_lvl = $user_activity['level'];
        //logfile(DEBUG_FILE_LOG_DEV,print_r($fightlog_stat['death_kicks'],true));
        // logfile(DEBUG_FILE_LOG_DEV,print_r($bot_list_stats,true));
        foreach($fightlog_stat['death_kicks'] as $stat){
            if($stat['persId'] == $fight_user['user_id']){
                $bot = $bot_list_stats[$stat['oppId']];
                //logfile(DEBUG_FILE_LOG_DEV,print_r($stat['oppId'],true));
                $bot_level = $bot['level'];

                if($bot_level >= $user_activity['level'] + 1) $killed_bot_stats_trend++;

                if($bot_level < ($user_activity['level'] - 2)) {continue;} //Если уровень бота меньше нашего, то пропускаем
                $killed_bot_stats[$bot['artikul_id']]++;
            }
        }

        $user = cache_fetch($user_hash, $fight_user['user_id'], 'user_get');
        foreach ($killed_bot_stats as $bot_id => $cnt) {
            activity_user_check(ACTIVITY_STAT_BOT,$bot_id,$user,false,$cnt,$cnt);
            squest_trigger($user, SQUEST_ACTION_KILL_BOT, $bot_id, $cnt);
        }

        if($killed_bot_stats_trend > 0){
            $_user_trend = user_trend_identify($user['id']);
            if($_user_trend['trend'] > 0 && $_user_trend['trend_slots'] >= 9 && $user_stat_trends[$_user_trend['trend']]){
                //logfile(NODE_FILE_LOG, 'user_id:'.$user['id'].' trend '.$_user_trend['trend'].' kill_bot:'.$killed_bot_stats_trend);
                user_stat_update($user_id, USER_STAT_TYPE_SKILL, $user_stat_trends[$_user_trend['trend']], $killed_bot_stats_trend);
            }
        }

        // Размеры команд для ограничений
        bonus_temporary_var_set('TEAM_SIZE_'.$fight_user['user_id'], $team_cnts);

        // Расчет опыта
        bonus_temporary_var_set('PETWASFED_'.$fight_user['user_id'], $pets_hash[$fight_user['pet_id']] && $pets_hash[$fight_user['pet_id']]['satiation'] > 0 ? '1' : '0');
        $user_id = $fight_user['user_id'];
        $pers_info = $fight_info['persData'][$fight_user['user_id']];
        $user_level = $fight_user['user_level'];
        if (!$pers_info) continue;
        $exp = 0;
        if ($pers_info['teamNum'] == $fight_info['winnerTeam']) {
            $exp = $pers_info['exp'];

            /*$user_equip_cnt = user_body_equip_count($user_id);
            $user_equip_need_cnt = ($user_equip_needed[$user_hash[$user_id]['level']] ? $user_equip_needed[$user_hash[$user_id]['level']] : 7);

            if($user_equip_cnt < $user_equip_need_cnt){
                $exp = intval($exp / 10);
            }*/

            if ((($pers_info['dmg'] + $pers_info['heal']) > 0) && ($fight['type'] == FIGHT_TYPE_CHAOTIC)) {
                $exp += user_get_baseexp($user_level);
                if ($massive_coef) $exp *= $massive_coef + 1;
            }
        } else { // проигравший
            if ($massive_coef) $exp += $pers_info['exp'] * $massive_coef;
        }

        $adv_stat_users_all[$pers_info['teamNum']][$user_id] = $user_hash[$user_id];

        //Бонус по хаотической битве по урону.
        if($fight['type'] == FIGHT_TYPE_CHAOTIC){
            $user_dmg = $pers_info['dmg'];
            $user_dmg_bonus_id = false;
            foreach ($adv_chaot_bonus_dmg as $id=>$dmg_bns){
                if($user_dmg >= $dmg_bns['dmg']){
                    $user_dmg_bonus_id = intval($dmg_bns['bonus_id']);
                }
            }

            $adv_chaot_stat_users_all[$pers_info['teamNum']][$user_id] = $user_hash[$user_id];
            //Сохраним понадобится
            //TODO: Че долбаеб?
            /*if(count($adv_chaot_stat_users[$pers_info['teamNum']]) < 5){
                $adv_chaot_stat_users[$pers_info['teamNum']][$user_id] = array('user_id' => $user_id, 'dmg' => $pers_info['dmg']);
            }*/
            $adv_chaot_stat_users[$pers_info['teamNum']][$user_id] = array('user_id' => $user_id, 'dmg' => $pers_info['dmg']);

            if($user_dmg_bonus_id){
                //Применяем бонус который нужен

                $out_bonus = bonus_apply($user_hash[$user_id],$user_dmg_bonus_id);
                if(user_drop_check($fight)) user_drop_out_bonus($user_drop[$user_id], $out_bonus); //Сводная статистика после боя

                if(function_exists('squest_trigger')) {
                    try {
                        squest_trigger($user_hash[$user_id], SQUEST_ACTION_CHAOT_FIGHT);
                    } catch (Exception $exception) {}
                }
            }
        }

        if($fight['type'] == FIGHT_TYPE_BOSS_PLANNER){
            $user_dmg = $pers_info['dmg'];
            $user_dmg_bonus_id = false;
            foreach ($boss_planner_bonus_dmg as $id=>$dmg_bns){
                if($user_dmg >= $dmg_bns['dmg']){
                    $user_dmg_bonus_id = intval($dmg_bns['bonus_id']);
                }
            }

            $boss_planner_stat_users_all[$pers_info['teamNum']][$user_id] = $user_hash[$user_id];
            $boss_planner_stat_users[$pers_info['teamNum']][$user_id] = array('user_id' => $user_id, 'dmg' => $pers_info['dmg']);

            if($user_dmg_bonus_id){
                //Применяем бонус который нужен
                $out_bonus = bonus_apply($user_hash[$user_id],$user_dmg_bonus_id);
                if(user_drop_check($fight)) user_drop_out_bonus($user_drop[$user_id], $out_bonus); //Сводная статистика после боя
            }
        }

        if ($fight_exp_mod)	$exp += $exp * $fight_exp_mod;
        $exp *= $exp_coef;
        if (($fight['flags'] & FIGHT_FLAG_CHAOSFIGHT) && ($fight_user['user_kind'] == $best_kind)) $exp *= 10;	// коэффициент опыта за бой с хаосом
        if ($user_skills[$user_id]['EXPMOD']) $exp += intval($exp * $user_skills[$user_id]['EXPMOD'] * 0.01); // коэффициент пересчёта опыта из характеристики EXPMOD
        if ($fight_user['flags'] & FIGHT_USER_FLAG_NOEXP) $exp = 0; // если наложено проклятие, то не давать
        // учет времени онлайн ----
        require_once(partner_path()."template.inc");
        if (template_online_time_check($fight_user['user_id'], ONLINE_TIME_LONG)) { // режем опыт на 100% для woniu игроков в онлайне более L часов
            $user_lang = $user_hash[$user_id]['language'] ? $user_hash[$user_id]['language'] : false;
            if ($user_lang) translate_default_language_push($user_lang);
            chat_msg_send_system(sprintf(translate('Вы более не получаете опыта, доблести и вещи с монстров, т.к. провели в игре более %s часов.'), ONLINE_TIME_LONG/3600),CHAT_CHF_USER,$fight_user['user_id']);
            if ($user_lang) translate_default_language_pop();
            $exp = 0;
        } elseif (template_online_time_check($fight_user['user_id'], ONLINE_TIME_MEDIUM)) { // режем опыт на 50% для woniu игроков в онлайне более M часов (0 < M < L)
            $exp *= 0.5;
        }
        // ------------------------

        if ($estate_hash[$user_id]['exp_value'] && $estate_exp_percents[$user_id] && ($estate_hash[$user_id]['flags'] & ESTATE_FLAG_EXP_USE)) {
            $estate_exp = min($estate_hash[$user_id]['exp_value'], round($exp*($estate_exp_percents[$user_id]/100)));
            if ($estate_exp) {
                $user_lang = $user_hash[$user_id]['language'] ? $user_hash[$user_id]['language'] : false;
                if ($user_lang) translate_default_language_push($user_lang);
                if ($estate_hash[$user_id]['flags'] & ESTATE_FLAG_EXP_DECR) {
                    $estate_exp = min($estate_exp, $exp);
                    $exp -= $estate_exp;
                    $msg_text = sprintf(translate('Магия статуи опыта уменьшила полученный в бою опыт на %d!'), $estate_exp);
                } else {
                    $exp += $estate_exp;
                    $msg_text = sprintf(translate('Магия статуи опыта принесла вам %d дополнительного опыта в бою!'), $estate_exp);
                }
                if ($user_lang) translate_default_language_pop();
                chat_msg_send_system($msg_text,CHAT_CHF_USER,$user_id);
                estate_save(array(
                    'id' => $estate_hash[$user_id]['id'],
                    '_set' => sql_pholder('exp_value=exp_value-?',$estate_exp),
                ));
            }
        }


        if ($exp < 0) $exp = 0;
        if (defined('GLADIATORS_SERVER') && GLADIATORS_SERVER) {
            $exp = 0;
        }
        if ($exp > 0) {
            do{
                if($fight['in_clan_pvp'] && $user_hash[$user_id]['clan_id']){
                    $c_exp = max(0,floor($exp / 100 * 50));
                    $exp = $c_exp;
                    if($c_exp > 0){
                        clan_stat_skill_add($user_hash[$user_id]['clan_id'], USER_STAT_SKILL_EXP, $c_exp);
                    }
                    break;
                }
                NODE_PUSH(null, $fight_user['user_id']);
                $extra_exp = skill_object_get(OBJECT_CLASS_USER, $user_id, array('skill_id' => 'BONUS_EXP'));
                if($extra_exp['value']){
                    $minus_extra_exp = min($extra_exp['value'],$exp*EXTRA_EXP_KOEF);
                    skill_object_set_value(OBJECT_CLASS_USER, $user_id, 'BONUS_EXP', -$minus_extra_exp, array('relative' => true));
                    $exp += $minus_extra_exp;
                }
                if (!user_stat_update($user_id, USER_STAT_TYPE_SKILL, USER_STAT_SKILL_EXP, $exp, USER_STAT_OP_INC, array('exit_nostat' => 1))) {
                    $exp = 0;
                } else {
                    //Обновили експу юзерю обновим и клану
                    //
                    chat_msg_send_special(CODE_CALL_JSFUNC,CHAT_CHF_USER,$user_id,array('func' => "updateSwf({'lvl':''})",));
                }
                NODE_POP();
            } while(0);
        }
        $fight_user_list[$pers_id]['exp'] = $exp;
    }

    if($fight['type'] == FIGHT_TYPE_CHAOTIC) {
        //$adv_chaot_stat_users[$pers_info['teamNum']][$user_id] = $pers_info['dmg'];



        $img_haos = '<img title="Хаотичная битва" src="images/haos_battle.gif" border=0 align="absmiddle">';
        $cht_msg = '<a href=\'/fight_info.php?fight_id='.$fight['id'].'\' target=\'_blank\'> <b style=color:darkred;>«'.$img_haos.' '.$fight['title'].'» </b></a> <b style=color:darkgreen>Закончилась!</b><br>';

        $c_lev = array(
            1 => '#239a2d',
            2 => '#2187b9',
            3 => '#ff0c0c',
        );

        $temp_mesto = 1;
        $win_team_d = $fight_info['winnerTeam'];
        $fail_team_d = $win_team_d == 1 ? 2 : 1;
        $cht_msg .= '&nbsp;&nbsp;&nbsp;<b>Победители</b>:<br>';


        //TODO: Расчет победителей
        $team_win = array();
        foreach ($adv_chaot_stat_users[$win_team_d] as $user_id=>$stat) {
            $team_win[] = array('user_id' => $user_id, 'dmg' => $stat['dmg']);
        }
        $team_fail = array();
        foreach ($adv_chaot_stat_users[$fail_team_d] as $user_id=>$stat) {
            $team_fail[] = array('user_id' => $user_id, 'dmg' => $stat['dmg']);
        }

        common_fldsort($team_win,true, 'dmg');
        common_fldsort($team_fail,true, 'dmg');

        //logfile(DEBUG_FILE_LOG_DEV, print_r($team_win, true));
        //logfile(DEBUG_FILE_LOG_DEV, print_r($team_fail, true));

        foreach ($team_win as $stat){
            $user_id = $stat['user_id'];
            $bonus_id = $adv_chaot_bonus_wins[$temp_mesto]['bonus_id'];

            if(!$bonus_id) continue;
            //Поиск по виннерам
            if($bonus_id && $stat['dmg'] > 0){
                $out_bonus = bonus_apply($user_hash[$user_id], $bonus_id);
                if(user_drop_check($fight)) user_drop_out_bonus($user_drop[$user_id], $out_bonus); //Сводная статистика после боя
            }

            $cht_msg .= '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b style="'.($c_lev[$temp_mesto] ? 'color:'.$c_lev[$temp_mesto].';' : '').'">'.$temp_mesto.'место:</b> <b class=red>'.$user_hash[$user_id]['nick'].'</b><br>';

            $temp_mesto++;
        }
        $temp_mesto = 1;
        $cht_msg .= '&nbsp;&nbsp;&nbsp;<b>Проигравшие</b>: <br>';
        foreach ($team_fail as $stat){
            $user_id = $stat['user_id'];
            $bonus_id = $adv_chaot_bonus_fails[$temp_mesto]['bonus_id'];
            if(!$bonus_id) continue;
            //Поиск по проигравшим
            if($bonus_id && $stat['dmg'] > 0){
                $out_bonus = bonus_apply($user_hash[$user_id], $bonus_id);
                if(user_drop_check($fight)) user_drop_out_bonus($user_drop[$user_id], $out_bonus); //Сводная статистика после боя
            }

            $cht_msg .= '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b style="'.($c_lev[$temp_mesto] ? 'color:'.$c_lev[$temp_mesto].';' : '').'">'.$temp_mesto.'место:</b> <b class=red>'.$user_hash[$user_id]['nick'].'</b><br>';

            $temp_mesto++;
        }

        //chat_msg_send_system($cht_msg, CHAT_CHF_AREA); //TODO:Убрал пока что
    }

    if($fight['type'] == FIGHT_TYPE_BOSS_PLANNER){
        $temp_mesto = 1;
        $win_team_d = $fight_info['winnerTeam'];
        $fail_team_d = $win_team_d == 1 ? 2 : 1;


        //TODO: Расчет победителей
        $team_win = array();
        foreach ($boss_planner_stat_users[$win_team_d] as $user_id=>$stat) {
            $team_win[] = array('user_id' => $user_id, 'dmg' => $stat['dmg']);
        }
        $team_fail = array();
        foreach ($boss_planner_stat_users[$fail_team_d] as $user_id=>$stat) {
            $team_fail[] = array('user_id' => $user_id, 'dmg' => $stat['dmg']);
        }

        common_fldsort($team_win,true, 'dmg');
        common_fldsort($team_fail,true, 'dmg');

        foreach ($team_win as $stat){
            $user_id = $stat['user_id'];
            $bonus_id = $boss_planner_bonus_wins[$temp_mesto]['bonus_id'];

            if(!$bonus_id) continue;
            //Поиск по виннерам
            if($bonus_id && $stat['dmg'] > 0){
                $out_bonus = bonus_apply($user_hash[$user_id], $bonus_id);
                if(user_drop_check($fight)) user_drop_out_bonus($user_drop[$user_id], $out_bonus); //Сводная статистика после боя
            }
            $temp_mesto++;
        }
        $temp_mesto = 1;
        foreach ($team_fail as $stat){
            $user_id = $stat['user_id'];
            $bonus_id = $boss_planner_bonus_fails[$temp_mesto]['bonus_id'];
            if(!$bonus_id) continue;
            //Поиск по проигравшим
            if($bonus_id && $stat['dmg'] > 0){
                $out_bonus = bonus_apply($user_hash[$user_id], $bonus_id);
                if(user_drop_check($fight)) user_drop_out_bonus($user_drop[$user_id], $out_bonus); //Сводная статистика после боя
            }
            $temp_mesto++;
        }

        //chat_msg_send_system($cht_msg, CHAT_CHF_AREA); //TODO:Убрал пока что
    }

    // залочим все группы, которые могут получить дроп чтобы их не распустили в этот момент
    $lock_parties = array();
    if ($party_id) $lock_parties[$party_id] = $party_id;
    if ($bot_drop) {
        foreach ($bot_drop as $opp_id => $drop) {
            if ($dmg_target[$opp_id] && ($dmg_target[$opp_id]['object_class'] == OBJECT_CLASS_PARTY)) {
                $lock_parties[$dmg_target[$opp_id]['party_id']] = $dmg_target[$opp_id]['party_id'];
            }
        }
    }

    foreach($lock_parties as $lock_party_id) {
        party_lock($lock_party_id);
    }

    // отключение от боя
    user_bulk_update(false,'fight_id',0,$fight_id);

/* запишем факт битвы по клановой дуэли или другого типа битвы похуй на самом деле. */
    if($fight['in_clan_pvp']) {
        $clan = clan_get($fight['in_clan_pvp']);
        if($clan){
            clan_save(array('id' => $clan['id'], '_set' => sql_pholder(' cfight_cnt = cfight_cnt + 1, cfight_dtime = ?', mktime(23,59,59) + 1)));
        }
    }

    foreach ($fight_user_list as $fight_user) {
        if ($fight_user['user_id']) { 	// окончание боя для пользователя

            $pers_id = $fight_user['id'];

            $user_id = $fight_user['user_id'];
            $pers_info = $fight_info['persData'][$fight_user['user_id']];

            $user = $user_hash[$user_id];
            $_clan = $clan_hash[$user['clan_id']];
            $_clan_bonus = false;
            if($user && $user['clan_id'] && !$_clan) $_clan = cache_fetch($clan_hash,$user['clan_id'],'clan_get');
            if($_clan && !$clan_bonus_info_hash[$_clan['id']]) {
                $_clan_bonus = clan_bonus_exist($_clan);
                $clan_bonus_info_hash[$_clan['id']] = $_clan_bonus;
            }elseif($clan_bonus_info_hash[$_clan['id']]){
                $_clan_bonus = $clan_bonus_info_hash[$_clan['id']];
            }

            $premium_user = $user_premium_hash[$user_id];

            $death_cnt = intval($fightlog_stat['death_cnts'][$pers_id]);
            if (!$pers_info) continue;

            NODE_PUSH(null, $user_id);
            $user_level = $fight_user['user_level'];
            $user_levels[$user_id] = $user_level;
            $user_stats = make_hash(user_stat_list(array(
                'user_id' => $user_id,
                'type_id' => array(USER_STAT_TYPE_FIGHT),
            )), 'type_id', true);
            $stat_fight_hash = get_hash($user_stats, 'object_id', 'value');

            $honor = $pers_info['honor'];
            $honor_glory = $pers_info['honor'];

            if($_clan_bonus[CLAN_BONUS_TYPE_HONOR]) $fight_honor_mod += $_clan_bonus[CLAN_BONUS_TYPE_HONOR] / 100;
            if ($fight_honor_mod) {
                $honor += $honor * $fight_honor_mod;
                $honor_glory += $honor_glory * $fight_honor_mod;
            }

            if($premium_user['vars'][P_HONOR]['cnt']){
                $honor += $honor * $premium_user['vars'][P_HONOR]['cnt'];
                $honor_glory += $honor_glory * $premium_user['vars'][P_HONOR]['cnt'];
            }

            if($fight['type'] == FIGHT_TYPE_ARENA) {
                $honor = $honor * 2; //В полтора раза больше доблести.
                $honor_glory = $honor_glory * 2;
                $give_honor = true; //На любой локе даем доблу =)
            }

            if($fight['type'] == FIGHT_TYPE_ADV_DUEL){
                $honor = $honor * 2; //В полтора раза больше доблести.
                $honor_glory = $honor_glory * 2;
                $give_honor = true; //На любой локе даем доблу =)
                //logfile(DEBUG_FILE_LOG_DEV, print_r($user_hash[$user_id], true).' HONOR:'.$honor);
            }

            if($fight['type'] == FIGHT_TYPE_CHAOTIC){
                $honor = $honor * 3; //В два раза больше доблы!
                $honor_glory = $honor_glory * 3;
                $give_honor = true; //На любой локе даем доблу =)
                //logfile(DEBUG_FILE_LOG_DEV, print_r($user_hash[$user_id], true).' HONOR:'.$honor);
            }

            //logfile(NODE_FILE_LOG, print_r($pers_info, true));

            if ($pers_info['teamNum'] == $fight_info['winnerTeam']) {	// победитель
                // Если пользователь победил, но при этом не заходил во флэшку fight.php, то значит он пользуется ботом
                //if (!($fight_user['flags'] & FIGHT_USER_FLAG_ENTER)) cheater_check(user_get($user_id),3001);

                if ($fight_user['party_id']) {
                    if (isset($dmg_party[$fight_user['party_id']])) {
                        $dmg_party[$fight_user['party_id']] += $pers_info['dmg'];
                    } else {
                        $dmg_party[$fight_user['party_id']] = $pers_info['dmg'];
                    }
                }

                do{
                    if($fight_user['user_id'] == DEV_ACCOUNT_ID && NO_FIGHT_SETTINGS){
                        break;
                    }

                    if ($max_dmg_user['dmg'] < $pers_info['dmg']) {
                        $max_dmg_user['id'] = $fight_user['user_id'];
                        $max_dmg_user['dmg'] = $pers_info['dmg'];
                    }
                }while(0);

                if ($instance_root) {
                    if ($instance_root['castle_id']) $honor *= 3; // Умножаем доблесть в 3 раза в замках
                    if ($instance_root['clan_battle_id']) $honor *= 5; // Умножаем доблесть в 3 раза в замках
                    if ($instance_root['castle_id']) $honor_glory *= 3; // Умножаем славу в 3 раза в замках
                    if ($instance_root['clan_battle_id']) $honor_glory *= 5; // Умножаем славу в 3 раза в замках
                } elseif ($fight['level']) {
                    $honor *= $fight_levels[$fight['level']]['honor']; // В обычных локациях даём множитель доблести к великой битве
                    $honor_glory *= $fight_levels[$fight['level']]['honor']; // В обычных локациях даём множитель славы к великой битве
                    //				skill_object_set_value(OBJECT_CLASS_USER,$user_id,'GREAT_FIGHT_WIN',1,array('relative' => true));
                    //				skill_object_set_value(OBJECT_CLASS_USER,$user_id,'GREAT_FIGHT_REP',$fight_levels[$fight['level']]['rep'],array('relative' => true));
                    //				skill_object_set_value(OBJECT_CLASS_USER,$user_id,'GREAT_FIGHT_PART',1,array('relative' => true));
                    user_stat_update($user_id, USER_STAT_TYPE_SKILL, USER_STAT_SKILL_GREAT_FIGHT_WIN, 1);
                    global $armquality_levels;
                    if ($user_skills[$user_id]['ARMQUALITY'] >= $armquality_levels[$user_level]) {
                        user_stat_update($user_id, USER_STAT_TYPE_SKILL, USER_STAT_SKILL_GREAT_FIGHT_REP, $fight_levels[$fight['level']]['rep']);
                    } else {
                        $user_lang = $user_hash[$user_id]['language'] ? $user_hash[$user_id]['language'] : false;
                        if ($user_lang) translate_default_language_push($user_lang);
                        $msg_text = translate('Качество доспехов, в которых Вы участвовали в Великой Битве, было ниже необходимого для повышения репутации.');
                        chat_msg_send_system($msg_text, CHAT_CHF_USER, $user_id);
                        if ($user_lang) translate_default_language_pop();
                    }
                    user_stat_update($user_id, USER_STAT_TYPE_SKILL, USER_STAT_SKILL_GREAT_FIGHT_PART, 1);
                } elseif ($fight['flags'] & FIGHT_FLAG_STRONGHOLD) {
                    $honor *= STRONGHOLD_WINNER_HONOR_MULTIPLIER;
                    $honor_glory *= STRONGHOLD_WINNER_HONOR_MULTIPLIER;
                } elseif ($fight['flags'] & FIGHT_FLAG_NO_GREAT) {
                    $honor *= 5;
                    $honor_glory *= 5;
                }
                if (($pers_info['dmg'] + $pers_info['heal']) > 0) {
                    // собираем статистику
                    user_stat_update($user_id, USER_STAT_TYPE_MISC, USER_STAT_OBJECT_WIN_COUNT, 1);
                }

                if (($pers_info['dmg'] > 0 || ($fightlog_stat['timeout'][$pers_id])) && intval($stat_fight_hash[1]) < 1) {
                    $param = array(
                        'uid' => $user_id,
                    );
                    if ($pers_info['dmg'] > 0) $param['dmg'] = 1;
                    if ($fightlog_stat['timeout'][$pers_id]) $param['timeout'] = 1;

                    require_once("lib/stat.lib");
                    $stat = stat_user_new_log_get($user_id);
                    stat_user_new_log_save($param,!$stat);
                }

                // таблицы нанесенного урона
                $dmg_user[$fight_user['user_id']] = $pers_info['dmg'];	// урон пользователя
                $heal_user[$fight_user['user_id']] = $pers_info['heal']; // хил пользователя

                if($fight_user['user_id'] == DEV_ACCOUNT_ID && NO_FIGHT_SETTINGS){
                    $dmg_user[$fight_user['user_id']] = 0;
                }

                //Пвп Дуэли
                if($fight['type'] == FIGHT_TYPE_ADV_DUEL){
                    try{ pvp_fight_stat_add($user_id, 1,false); }catch (Exception $e){}
                    if(defined('DUEL_BONUS_WIN') && DUEL_BONUS_WIN){
                        $out_bonus = bonus_apply($user_hash[$user_id], DUEL_BONUS_WIN);
                        if(user_drop_check($fight)) user_drop_out_bonus($user_drop[$user_id], $out_bonus);
                    }
                }

            } else {	// проигравший
                // собираем статистику
                user_stat_update($user_id, USER_STAT_TYPE_MISC, USER_STAT_OBJECT_LOSS_COUNT, 1);
                if (!$instance_root && $fight['level']) {
                    $honor *=  $fight_levels[$fight['level']]['honor'] / 2; // В обычных локациях даём половинный множитель доблести к великой битве
                    $honor_glory *= $fight_levels[$fight['level']]['honor'] / 2; // В обычных локациях даём половинный множитель славы к великой битве
                    //				skill_object_set_value(OBJECT_CLASS_USER,$user_id,'GREAT_FIGHT_REP',$fight_levels[$fight['level']]['rep_loss'],array('relative' => true));
                    //				skill_object_set_value(OBJECT_CLASS_USER,$user_id,'GREAT_FIGHT_PART',1,array('relative' => true));
                    user_stat_update($user_id, USER_STAT_TYPE_SKILL, USER_STAT_SKILL_GREAT_FIGHT_REP, $fight_levels[$fight['level']]['rep_loss']);
                    user_stat_update($user_id, USER_STAT_TYPE_SKILL, USER_STAT_SKILL_GREAT_FIGHT_PART, 1);
                } elseif ($instance_root && $instance_root['slaughter_id']) {
                    $honor = intval($pers_info['honor'] * 0.8); // Даём доблесть проигравшим в бойнях, в размере 80% от набитого
                    $honor_glory = intval($pers_info['honor'] * 0.8); // Даём славу проигравшим в бойнях, в размере 80% от набитого
                } elseif ($instance_root && $instance_root['clan_battle_id']) {
                    $honor *= 2.5;
                    $honor_glory *= 2.5;
                } elseif ($fight['flags'] & FIGHT_FLAG_STRONGHOLD) {
                    $honor *= STRONGHOLD_LOSER_HONOR_MULTIPLIER;
                    $honor_glory *= STRONGHOLD_LOSER_HONOR_MULTIPLIER;
                } elseif ($fight['flags'] & FIGHT_FLAG_NO_GREAT) {
                    $honor = $honor*2.5;
                    $honor_glory = $honor_glory*2.5;
                } elseif($fight['type'] == FIGHT_TYPE_ADV_DUEL) {
                    $honor = intval($pers_info['honor'] * 0.75); // Даём доблесть проигравшим в размере 15% от набитого
                    $honor_glory = intval($pers_info['honor'] * 0.75); // Даём славу проигравшим в размере 15% от набитого
                } elseif($fight['type'] == FIGHT_TYPE_CHAOTIC){
                    $honor = intval($pers_info['honor'] * 0.80); // Даём Авторитет проигравшим в размере 55% от набитого
                    $honor_glory = intval($pers_info['honor'] * 0.80); // Даём честь проигравшим в размере 55% от набитого
                    $give_honor = true; //На любой локе даем доблу =)
                } else {
                    $honor = intval($pers_info['honor'] * 1.2); // Даём доблесть проигравшим в размере 5% от набитого
                    $honor_glory = intval($pers_info['honor'] * 1.2); // Даём славу проигравшим в размере 5% от набитого
                }

                //Пвп Дуэли
                if($fight['type'] == FIGHT_TYPE_ADV_DUEL){
                    try{ pvp_fight_stat_add($user_id, false,1); }catch (Exception $e){}
                    if(defined('DUEL_BONUS_FAIL') && DUEL_BONUS_FAIL){
                        $out_bonus = bonus_apply($user_hash[$user_id], DUEL_BONUS_FAIL);
                        if(user_drop_check($fight)) user_drop_out_bonus($user_drop[$user_id], $out_bonus);
                    }
                }
            }

            if (!$fight['in_clan_pvp'] && $give_honor && $estate_hash[$user_id]['honor_value'] && $estate_honor_percents[$user_id] && ($estate_hash[$user_id]['flags'] & ESTATE_FLAG_HONOR_USE)) {
                $estate_honor = min($estate_hash[$user_id]['honor_value'], round($honor*($estate_honor_percents[$user_id]/100)));
                if ($estate_honor) {
                    estate_save(array(
                        'id' => $estate_hash[$user_id]['id'],
                        '_set' => sql_pholder('honor_value=honor_value-?',$estate_honor),
                    ));
                    $honor += $estate_honor;
                    $user_lang = $user_hash[$user_id]['language'] ? $user_hash[$user_id]['language'] : false;
                    if ($user_lang) translate_default_language_push($user_lang);
                    $msg_text = sprintf(translate('Магия обелиска доблести принесла вам %d дополнительной доблести в бою!'), $estate_honor);
                    if ($user_lang) translate_default_language_pop();
                    chat_msg_send_system($msg_text,CHAT_CHF_USER,$user_id);
                }
            }
			
			///////////////////////// Выдача бонусов по урону (Бой за материк)
			if ($fight['type'] == FIGHT_TYPE_WARIOR) { // Проверка типа битвы 
				$honor = $honor * 4; //В полтора раза больше доблести.
                $honor_glory = $honor_glory * 2;
                $give_honor = true; //На любой локе даем доблу =)
			if ($pers_info['dmg'] > 15000) {
				$bid = 13847;
			} elseif ($pers_info['dmg'] > 10000) {
				$bid = 13846;
			} elseif ($pers_info['dmg'] > 7500) {
				$bid = 13845;
			} elseif ($pers_info['dmg'] > 5000) {
				$bid = 13738;
			} elseif ($pers_info['dmg'] > 3000) {
				$bid = 13737;
			} elseif ($pers_info['dmg'] > 1500) {
				$bid = 13736;
			} else {
				$bid = 13734;
			}
			bonus_apply($user, $bid);
		
			}
///////////////////////// Выдача бонусов по урону (Битва драконов)
if ($fight['type'] == FIGHT_TYPE_WARDRAGONS) { // Проверка типа битвы 
    $honor = $honor * 3; // В полтора раза больше доблести.
    $honor_glory = $honor_glory * 3;
    $give_honor = true; // На любой локе даем доблесть.

    if ($pers_info['dmg'] > 15000) { 
        $bid = 13841;
    } elseif ($pers_info['dmg'] > 10000) {
        $bid = 13840;
    } elseif ($pers_info['dmg'] > 7500) {
        $bid = 13839; 
    } elseif ($pers_info['dmg'] > 5000) {
        $bid = 13743;
    } elseif ($pers_info['dmg'] > 3000) {
        $bid = 13742;
    } elseif ($pers_info['dmg'] > 1500) {
        $bid = 13741;
    } elseif ($pers_info['dmg'] > 500) {
        $bid = 13740;
    } else {
        $bid = 13739;
    }
	bonus_apply($user, $bid);
 }

            //		skill_object_set_value(OBJECT_CLASS_USER,$user_id,'FIGHT_CNT',1,array('relative' => true));

            // Макс. количество уворотов, критов, блоков
            user_stat_update($user_id, USER_STAT_TYPE_SKILL, USER_STAT_SKILL_FS_DODGE_CNT, $fightlog_stat['hits'][$user_id][1], USER_STAT_OP_MAX);
            user_stat_update($user_id, USER_STAT_TYPE_SKILL, USER_STAT_SKILL_FS_CRIT_CNT,  $fightlog_stat['hits'][$user_id][2], USER_STAT_OP_MAX);
            user_stat_update($user_id, USER_STAT_TYPE_SKILL, USER_STAT_SKILL_FS_BLOCK_CNT, $fightlog_stat['hits'][$user_id][4], USER_STAT_OP_MAX);
            user_stat_update($user_id, USER_STAT_TYPE_SKILL, USER_STAT_SKILL_FS_DEATH_CNT, $fightlog_stat['death_cnts'][$user_id], USER_STAT_OP_MAX);
            user_stat_update($user_id, USER_STAT_TYPE_SKILL, USER_STAT_SKILL_FS_KILL_CNT,  $fightlog_stat['death_kick_cnt'][$user_id], USER_STAT_OP_MAX);
            user_stat_update($user_id, USER_STAT_TYPE_SKILL, USER_STAT_SKILL_FS_MAX_CRIT,  $fightlog_stat['max_crit'][$user_id], USER_STAT_OP_MAX);

            user_stat_update($user_id, USER_STAT_TYPE_SKILL, USER_STAT_SKILL_FS_MAX_CRIT_SF,  $fightlog_stat['max_crit_self'][$user_id], USER_STAT_OP_MAX);
            user_stat_update($user_id, USER_STAT_TYPE_SKILL, USER_STAT_SKILL_FS_DODGE_CNT_SF, $fightlog_stat['miss'][$user_id], USER_STAT_OP_MAX);
            user_stat_update($user_id, USER_STAT_TYPE_SKILL, USER_STAT_SKILL_FS_BLOCK_CNT_SF, $fightlog_stat['blocks'][$user_id], USER_STAT_OP_MAX);
            user_stat_update($user_id, USER_STAT_TYPE_SKILL, USER_STAT_SKILL_FS_HIT_CNT_SF,   $fightlog_stat['hits_self'][$user_id], USER_STAT_OP_MAX);
            //		if ($user_skills[$user_id]['FS_DODGE_CNT'] < $fightlog_stat['hits'][$pers_id][1]) skill_object_set_value(OBJECT_CLASS_USER, $user_id, 'FS_DODGE_CNT', $fightlog_stat['hits'][$pers_id][1]);
            //		if ($user_skills[$user_id]['FS_CRIT_CNT'] < $fightlog_stat['hits'][$pers_id][2]) skill_object_set_value(OBJECT_CLASS_USER, $user_id, 'FS_CRIT_CNT', $fightlog_stat['hits'][$pers_id][2]);
            //		if ($user_skills[$user_id]['FS_BLOCK_CNT'] < $fightlog_stat['hits'][$pers_id][4]) skill_object_set_value(OBJECT_CLASS_USER, $user_id, 'FS_BLOCK_CNT', $fightlog_stat['hits'][$pers_id][4]);
            //		if ($user_skills[$user_id]['FS_DEACTH_CNT'] < $fightlog_stat['death_cnts'][$pers_id]) skill_object_set_value(OBJECT_CLASS_USER, $user_id, 'FS_DEATH_CNT', $fightlog_stat['death_cnts'][$pers_id]);
            //		if ($user_skills[$user_id]['FS_KILL_CNT'] < $fightlog_stat['death_kick_cnt'][$pers_id]) skill_object_set_value(OBJECT_CLASS_USER, $user_id, 'FS_KILL_CNT', $fightlog_stat['death_kick_cnt'][$pers_id]);
            //		if ($user_skills[$user_id]['FS_MAX_CRIT'] < $fightlog_stat['max_crit'][$pers_id]) skill_object_set_value(OBJECT_CLASS_USER, $user_id, 'FS_MAX_CRIT', $fightlog_stat['max_crit'][$pers_id]);
            //
            //		if ($user_skills[$user_id]['FS_MAX_CRIT_SF'] < $fightlog_stat['max_crit_self'][$pers_id]) skill_object_set_value(OBJECT_CLASS_USER, $user_id, 'FS_MAX_CRIT_SF', $fightlog_stat['max_crit_self'][$pers_id]);
            //		if ($user_skills[$user_id]['FS_DODGE_CNT_SF'] < $fightlog_stat['miss'][$pers_id]) skill_object_set_value(OBJECT_CLASS_USER, $user_id, 'FS_DODGE_CNT_SF', $fightlog_stat['miss'][$pers_id]);
            //		if ($user_skills[$user_id]['FS_BLOCK_CNT_SF'] < $fightlog_stat['blocks'][$pers_id]) skill_object_set_value(OBJECT_CLASS_USER, $user_id, 'FS_BLOCK_CNT_SF', $fightlog_stat['blocks'][$pers_id]);
            //		if ($user_skills[$user_id]['FS_HIT_CNT_SF'] < $fightlog_stat['hits_self'][$pers_id]) skill_object_set_value(OBJECT_CLASS_USER, $user_id, 'FS_HIT_CNT_SF', $fightlog_stat['hits_self'][$pers_id]);

            //доблесть
            if (!$instance_root || !$instance_root['slaughter_id']) { // не учитываем коэффициент пересчёта доблести в бойнях
                if ($user_skills[$user_id]['HONORMOD']) $honor += intval($honor * $user_skills[$user_id]['HONORMOD'] * 0.01); // коэффициент пересчёта доблести из характеристики HONORMOD
            }
            if ($fight_user['flags'] & FIGHT_USER_FLAG_NOEXP) $honor = 0; // если наложено проклятие, то не давать
            if (!$give_honor) $honor = 0;
            //  #112895 Запрещаем получение доблести
            if (($user_hash[$user_id]['flags'] & USER_FLAG_PUNISH) && user_get_punishment_state($user_hash[$user_id]['id'], CRIME_FINANCE2)) $honor = 0;

            if(defined('HONOR_OUTER_LIMIT') && HONOR_OUTER_LIMIT) {
                if ($user_level >= 1 && $user_level <= 16 && ($fight_user['user_rank'] > max(4, $user_level - 1))) $honor = 0;    // ограничение выдачи доблести по званию
            }
            // учет времени онлайн ----
            /*require_once(partner_path()."template.inc");
            if (template_online_time_check($fight_user['user_id'], ONLINE_TIME_LONG)) { // режем опыт на 100% для woniu игроков в онлайне более L часов
                $honor = 0;
            } elseif (template_online_time_check($fight_user['user_id'], ONLINE_TIME_MEDIUM)) { // режем опыт на 50% для woniu игроков в онлайне более M часов (0 < M < L)
                $honor *= 0.5;
            }*/
            // ------------------------

            $exp = intval($fight_user['exp']);
            $honor = intval($honor);
            $honor_glory = intval($honor_glory);
            if ($exp > 0) {
                if ($fight_user['pet_id'] && $fight_user['pet_exp_get']) {
                    $exp_pet = round(($exp*$fight_user['pet_exp_get'])/100);
                    if ($user_skills[$user_id]['PET_EXPMOD']) {
                        $exp_pet += round($exp_pet * $user_skills[$user_id]['PET_EXPMOD'] * 0.01); // коэффициент пересчёта опыта питомца из характеристики PET_EXPMOD
                    }
                    $user = cache_fetch($user_hash, $user_id, 'user_get');
                    pet_exp($fight_user['pet_id'],$exp_pet,$user['level']);
                }
            }
            if ($honor > 0) {
                do{
                    if($fight['in_clan_pvp'] && $user_hash[$user_id]['clan_id']){
                        $c_honor = max(0,floor($honor / 100 * 40));
                        $honor = $c_honor;
                        if($c_honor > 0){
                            clan_stat_skill_add($user_hash[$user_id]['clan_id'], USER_STAT_SKILL_HONOR, $c_honor);
                        }
                        break;
                    }
                    if (!$instance_root || !$instance_root['slaughter_id']) {
                        $bonus_honor = skill_object_get(OBJECT_CLASS_USER, $user_id, array('skill_id' => 'BONUS_HONOR'));
                        if($bonus_honor['value']) {
                            $minus_bonus_honor = min($bonus_honor['value'],$honor*BONUS_HONOR_KOEF);
                            skill_object_set_value(OBJECT_CLASS_USER, $user_id, 'BONUS_HONOR', -$minus_bonus_honor, array('relative' => true));
                            $honor = $honor + $minus_bonus_honor;
                        }
                    }

                    if (!user_stat_update($user_id, USER_STAT_TYPE_SKILL, USER_STAT_SKILL_HONOR, $honor)) {
                        $honor = 0;
                    }

                    if (isset($user_skills[$user_id]['PROFILE_PVP']) && ($user_skills[$user_id]['PROFILE_PVP'] > 50) && $fight_f_pvp) {
                        $user = cache_fetch($user_hash, $user_id, 'user_get');
                        metric_group_add(METRIC_TYPES_PVP, array('level' => $user['level']), array('pvp_fights' => 1));
                        metric_group_add(METRIC_TYPES_PVP, array('level' => $user['level']), array('pvp_fight_expenses' => fight_calc_cost($user_id, $fight_user['id'], $fight_info) * 100));
                        if ($instance_root) {
                            metric_group_add(METRIC_TYPES_PVP, array('level' => $user['level']), array('pvp_fights_instance' => 1));
                        }
                    }

                    if ($instance_root && $instance_root['clan_battle_id'] && $honor > 0) {
                        user_stat_update($user_id, USER_STAT_TYPE_SKILL, USER_STAT_SKILL_HONOR_CB, $honor);
                    }
                    if ($fight_f_pvp){
                        $name = 'GREAT_WIN_CUR_'.$winner_kind;
                        $settings = common_get_db_settings($name);
                        common_save_db_settings(array($name => $settings[$name] + $pers_info['enemyKillCnt']));
                    }
                }while(0);
            }
            if($honor_glory > 0){
                //Фикс игроки с проклей не получают славу
                if(user_glory_open($user_hash[$user_id]) && !($user_hash[$user_id]['flags'] & USER_FLAG_PUNISH)){
                    user_glory_add($user_id, USER_GLORY_TYPE_GLORY, $honor_glory);
                }
            }
			
			// ОЧКИ СУДЬБЫ НАЧАЛО:
            $qs_x = user_stat_skill_get($user_id, array(USER_STAT_SKILL_QUEST_POINT));
			$qs_bonus = intval($pers_info['exp']);
            $qs_bonus_add = FIGHT_QS_MAX - ($qs_bonus + intval($qs_x[USER_STAT_SKILL_QUEST_POINT]));
            if($qs_bonus_add < 0) $qs_bonus += $qs_bonus_add;
            $qs_bonus = max($qs_bonus, 0);
            if($qs_bonus) user_stat_update($user_id, USER_STAT_TYPE_SKILL, USER_STAT_SKILL_QUEST_POINT, $qs_bonus);
            //chat_msg_send_system('У вас: '.intval($qs_x[USER_STAT_SKILL_QUEST_POINT]).', добавлено: '.$qs_bonus.' Эксп: '.$pers_info['exp'], CHAT_CHF_USER, $user_id);
			// ОЧКИ СУДЬБЫ КОНЕЦ //
			
            $out_bonus = array(
                'status' => BONUS_STATUS_OK,
                'stats' => array(
                    USER_STAT_TYPE_SKILL => array(
                        USER_STAT_SKILL_EXP => $exp,
                        USER_STAT_SKILL_HONOR => $honor,
						
                    )
                )
            ); //Добавим експу и доблесть
            if(user_drop_check($fight)) user_drop_out_bonus($user_drop[$user_id], $out_bonus);

            if ($pers_info['enemyKillCnt'] > 0) {
                $user = cache_fetch($user_hash,$user_id,'user_get');
                // #112895 Запрещаем получение скальпов
                if (!($user['flags'] & USER_FLAG_PUNISH) || !user_get_punishment_state($user_id, array(CRIME_EXPERIENCE, CRIME_FINANCE2))) {
                    user_stat_update($user_id, USER_STAT_TYPE_SKILL, USER_STAT_SKILL_F_KILLCNT, $pers_info['enemyKillCnt']);
                    // добавляем работу для поместий
                    if ($work_update = estate_user_work_update($user, $user_skills[$user_id], $estate_hash[$user_id], $pers_info['enemyKillCnt'] * WORK_FROM_PVP)) {
                        $work_added[$user_id] += $work_update;
                        $estate_hash[$user_id]['work'] += $work_update;
                        $user_skills[$user_id]['WORK_TODAY'] += $work_update;
                    }

                    if($user_id == DEV_ACCOUNT_ID){
                        building_user_res_add($user_id, BUILDING_RES_SPIRIT_USER, $pers_info['enemyKillCnt']);
                    }

                    if ($instance_root) {
                        if ($instance_root['bg_id']) {
                            $bg = bg_get($instance_root['bg_id']);
                            $user = cache_fetch($user_hash,$user_id,'user_get');
                            $out_bonus = bonus_apply_many($user,$bg['bonus_id_kill'],false, intval($pers_info['enemyKillCnt']));
                            if(user_drop_check($fight)) user_drop_out_bonus($user_drop[$user['id']], $out_bonus); //Сводная статистика после боя
                        }
                    }

                    if($adv_chaot && $adv_chaot['kill_bonus_id'] > 0){
                        $user = cache_fetch($user_hash,$user_id,'user_get');
                        $out_bonus = bonus_apply_many($user,$adv_chaot['kill_bonus_id'],false, intval($pers_info['enemyKillCnt']));
                        if(user_drop_check($fight)) user_drop_out_bonus($user_drop[$user['id']], $out_bonus); //Сводная статистика после боя
                    }

                    //Хуита
                    _global_event_trigger(GLOBAL_EVENT_TYPE_KILL_USER, $pers_info['enemyKillCnt'], $user_id);

                    lite_pass_user_action($user_hash[$user_id], LITE_PASS_ACTION_KILL_ENEMY, max($pers_info['enemyKillCnt'], 1));
                    squest_trigger($user_hash[$user_id], SQUEST_ACTION_KILL_ENEMY, '', max($pers_info['enemyKillCnt'], 1));
                    //logfile(NODE_FILE_LOG, $user_id.' killed '.$pers_info['enemyKillCnt'].' enimes');
                }
            }
            $data = array($exp,$pers_info['dmg'],$pers_info['heal'],$pers_info['killCnt'], $honor, $death_cnt);
            fight_user_save(array(
                'id' => $fight_user['id'],
                'team' => $pers_info['teamNum'],
                'data' => implode(':',$data),
            ));

            // статистика для инстансов (БГ)
            if ($instance_root) {
                $death_times = intval($fightlog_stat['death_times'][$pers_id]);
                instance_user_save(array(
                    '_set' => sprintf('dmg=dmg+(%d), heal=heal+(%d), exp=exp+(%d), honor=honor+(%d), kill_cnt=kill_cnt+(%d), death_cnt=death_cnt+(%d), death_time=%d',$pers_info['dmg'],$pers_info['heal'],$exp,$honor,$pers_info['killCnt'],$death_cnt,$death_times),
                    '_add' => sprintf(' AND instance_id=%d AND user_id=%d',$instance_root['id'],$user_id),
                ));
                if ($instance_root['slaughter_id'] && $pers_info['persStatus'] <> FS_PS_DEAD) {
                    $slaughter = slaughter_get($instance_root['slaughter_id']);
                    $user = cache_fetch($user_hash,$user_id,'user_get');
                    $out_bonus = bonus_apply($user,$slaughter['bonus_id_kill']);
                    if(user_drop_check($fight)) user_drop_out_bonus($user_drop[$user['id']], $out_bonus); //Сводная статистика после боя
                }
            }

            NODE_POP();
        }
    }

    // Сохранение в settings побед по великим битвам
    if ($fight['level']) {
        $name = 'GREAT_WIN_'.$winner_kind;
        $settings = common_get_db_settings($name);
        common_save_db_settings(array($name => $settings[$name] + 1));
    }

    // отключение от боя
    bot_bulk_update(false,'fight_id',0,$fight_id);

    //logfile(NODE_FILE_LOG, print_r($dmg_party, true));
    //logfile(NODE_FILE_LOG, print_r($max_dmg_user, true));

    if (count($dmg_party)) {
        arsort($dmg_party);
        foreach ($dmg_party as $_party_id=>$_max_dmg_party){
            $party_id = $_party_id;
            $max_dmg_party = $_max_dmg_party;
            break;
        }
        //list($party_id, $max_dmg_party) = each($dmg_party);
    } else {
        $party_id = 0;
        $max_dmg_party = -1;
    }

    //logfile(NODE_FILE_LOG, $party_id);
    //logfile(NODE_FILE_LOG, $max_dmg_party);

    // лут

    //logfile(DEBUG_FILE_LOG_DEV,'$bot_drop = '.print_r($bot_drop,true));

    //logfile(DEBUG_FILE_LOG_DEV,'$dmg_target = '.print_r($dmg_target,true));

    //logfile(DEBUG_FILE_LOG_DEV,'$max_dmg_user = '.print_r($max_dmg_user,true));

    //logfile(DEBUG_FILE_LOG_DEV,'$max_dmg_party = '.print_r($max_dmg_party,true));

    $debug_user_id = false;
    foreach ($user_hash as $user_id=>$f){
        if($user_id == DEV_ACCOUNT_ID) $debug_user_id = true;
    }
    if($debug_user_id){
        //logfile(NODE_FILE_LOG,'$dmg_target = '.print_r($dmg_target,true));
    }

    $user_bot_bonus_cnts = array();

    if ($bot_drop) {
        $gotloot = array();
        foreach ($bot_drop as $opp_id => $drop) {
            if (!$dmg_target[$opp_id]) {
                if (!$max_dmg_user['id']) {
                    continue;
                }
                // даем бонус тому, кто нанес больше дамага

                if ($max_dmg_user['dmg'] > $max_dmg_party) {
                    $target = array(
                        'object_class' => OBJECT_CLASS_USER,
                        'pers_id' => $max_dmg_user['id'],
                    );
                } else {
                    $target = array(
                        'object_class' => OBJECT_CLASS_PARTY,
                        'party_id' => $party_id,
                    );
                }

            } else {
                $target = $dmg_target[$opp_id];
            }

            $time_limit_coef = 1;
            $no_bonus = false;

            $premium_user = $user_premium_hash[$user_ids[$target['pers_id']]];

            switch ($target['object_class']) {
                case OBJECT_CLASS_USER:
                    $object_id = $user_ids[$target['pers_id']];
                    $user = cache_fetch($user_hash, $object_id, 'user_get');
                    // #112895 Убираем дроп с мобов ПОЛНОСТЬЮ
                    if (($user['flags'] & USER_FLAG_PUNISH) && user_get_punishment_state($user['id'], CRIME_FINANCE3))
                        continue 2;// продолжить цикл: foreach ($bot_drop as $opp_id => $drop) {

                    // учет времени онлайн ----
                    /*$time_limit_coef = 1;
                    require_once(partner_path()."template.inc");
                    if (template_online_time_check($user['id'], ONLINE_TIME_LONG)) { // режем деньги на 100% и шмот для woniu игроков в онлайне более L часов
                        $time_limit_coef = 0;
                        $no_bonus = true;
                    } elseif (template_online_time_check($user['id'], ONLINE_TIME_MEDIUM)) { // режем деньги на 100% для woniu игроков в онлайне более M часов (0 < M < L)
                        $time_limit_coef = 0.5;
                    }*/
                    // ------------------------
                    break;

                case OBJECT_CLASS_PARTY:
                    $object_id = $target['party_id'];
                    $party = cache_fetch($party_hash, $object_id, 'party_get');
                    break;
            }

            //logfile(DEBUG_FILE_LOG_DEV,'$time_limit_coef = '.print_r($time_limit_coef,true));
            //logfile(DEBUG_FILE_LOG_DEV,'$no_bonus = '.print_r($no_bonus,true));
            //logfile(DEBUG_FILE_LOG_DEV,'$target = '.print_r($target,true));

            if ($drop['bonus_id'] && !$no_bonus) {

                $no_x2_bot = false;
                foreach ($bot_drop_info[$drop['bonus_id']] as $bot){
                    if($bot['flags'] & BOT_FLAG_NOX2_PREMIUM){
                        $no_x2_bot = true;
                        break;
                    }
                }

                switch ($target['object_class']) {
                    case OBJECT_CLASS_USER:
                        //logfile(DEBUG_FILE_LOG_DEV,'$user = '.print_r($user,true));
                        NODE_PUSH(null, $user['id']);


                        $bart_id = $fight_user_list[$opp_id]['bot_artikul_id'];
                        if($user_bot_bonus_cnts[$user['id']][$bart_id]){
                            $user_bot_bonus_cnts[$user['id']][$bart_id]['cnt']++;
                        }else{
                            $user_bot_bonus_cnts[$user['id']][$bart_id] = array('bonus_id' => $drop['bonus_id'], 'cnt' => 1);
                        }

                        $_cnt = 1;
                        if($clan_bonus_info_hash[$user['clan_id']][CLAN_BONUS_TYPE_DOUBLE_DROP] && rand_roll(5/100)) $_cnt = 2;
                        $out_bonus = bonus_apply_many($user, $drop['bonus_id'], array('user_ids' => $user_ids, 'artifacts_received_stat' => true, 'auto_drop_active' => true, 'rolling_active' => true, 'message_stack' => 'FIGHT_BONUS_'.$user['id']), $_cnt);
                        if(user_drop_check($fight)) user_drop_out_bonus($user_drop[$user['id']], $out_bonus); //Сводная статистика после боя

                        //??)))
                        artifact_auto_drop_trigger($out_bonus, $user, $user_premium_hash[$user['id']]);

                        /*
                        if($premium_user['vars'][P_DROPX2] && !$no_x2_bot) {
                            $out_bonus = bonus_apply($user, $drop['bonus_id'], array('user_ids' => $user_ids, 'rolling_active' => true));
                            if(user_drop_check($fight)) user_drop_out_bonus($user_drop[$user['id']], $out_bonus); //Сводная статистика после боя
                        }
                        */
                        if ($out_bonus['status'] !== BONUS_STATUS_OK) {
                            fight_addlog(sprintf('Bad user bonus status in fight [%s] : %s', $fight_id, var_export($out_bonus, true)));
                        }
                        NODE_POP();

                        break;

                    case OBJECT_CLASS_PARTY:
                        //TODO: Непонятная хуйня, сделать бага не бага ебана рот
                        $in_instance = false;
                        foreach ($user_ids as $iduser){
                            if($user_hash[$iduser]['instance_id']){ $in_instance = true; break; }
                        }
                        if(count($user_ids) > 1){
                            $out_bonus = bonus_apply($party, $drop['bonus_id'], array('user_ids' => $user_ids, 'instance_id' => $fight['instance_id'], 'auto_drop_active' => true, 'rolling_active' => true, 'message_stack' => 'FIGHT_BONUS_'.$user['id']));
                            if ($out_bonus['status'] !== BONUS_STATUS_OK) {
                                fight_addlog(sprintf('Bad party bonus status in fight [%s] : %s', $fight_id, var_export($out_bonus, true)));
                            }
                        }elseif(count($user_ids) == 1){
                            $_cnt = 1;
                            $party_leader = $user_hash[$party['leader_id']];
                            if($clan_bonus_info_hash[$party_leader['clan_id']][CLAN_BONUS_TYPE_DOUBLE_DROP] && rand_roll(5/100)) $_cnt = 2;
                            $out_bonus = bonus_apply_many($party, $drop['bonus_id'], array('user_ids' => $user_ids, 'instance_id' => $fight['instance_id'], 'artifacts_received_stat' => true, 'auto_drop_active' => true, 'rolling_active' => true, 'message_stack' => 'FIGHT_BONUS_PARTY_'.$party['id']), $_cnt);
                            if(user_drop_check($fight)) user_drop_out_bonus($user_drop[$party['leader_id']], $out_bonus); //Сводная статистика после боя

                            //??)))
                            artifact_auto_drop_trigger($out_bonus, $user, $user_premium_hash[$user['id']]);

                            //TODO: Понадобилось разделить все как-то, если в группе один чувак то пожалуйста.. действуй все норма! x2 дроп
                            $premium_user = $user_premium_hash[$party['leader_id']];
                            /*
                            if($premium_user['vars'][P_DROPX2] && !$no_x2_bot) {
                                $out_bonus = bonus_apply($party, $drop['bonus_id'], array('user_ids' => $user_ids, 'instance_id' => $fight['instance_id'], 'rolling_active' => true));
                                if(user_drop_check($fight)) user_drop_out_bonus($user_drop[$party['leader_id']], $out_bonus); //Сводная статистика после боя
                            }
                            */
                            if ($out_bonus['status'] !== BONUS_STATUS_OK) {
                                fight_addlog(sprintf('Bad party bonus status in fight [%s] : %s', $fight_id, var_export($out_bonus, true)));
                            }
                        }
                        break;
                }

                if ($out_bonus['items']) {
                    $gotloot[$target['object_class']][$object_id]['bonus'] = true;
                }
            }

            $money = $drop['money'];
            if ($money) {
                switch ($target['object_class']) {
                    case OBJECT_CLASS_USER:
                        $d = max($user['level'] - $money['level'], 1);
                        break;

                    case OBJECT_CLASS_PARTY:
                        $d = max($party['level_max'] - $money['level'], 1);
                        break;
                }

                $money = $money['money'] / $d;
                $money = round($money * $time_limit_coef, 2);
                if ($money) {
                    if (!$gotloot[$target['object_class']][$object_id]['money_corr']) {
                        $gotloot[$target['object_class']][$object_id]['money_corr'] = $d > 1;
                    }
                    $gotloot[$target['object_class']][$object_id]['money'] += $money;
                    if ($d <= 1) {
                        $gotloot[$target['object_class']][$object_id]['cnt']++;
                    }
                }
            }
        }
        bonus_apply_message_trigger();

        if ($gotloot) {
            //logfile(DEBUG_FILE_LOG_DEV,print_r($gotloot,true));
            foreach ($gotloot as $object_class => $loot_info) {
                //logfile(DEBUG_FILE_LOG_DEV,print_r($loot_info,true));
                foreach ($loot_info as $object_id => $info) {
                    switch ($object_class) {
                        case OBJECT_CLASS_USER:
                            $fight_flags[$object_id] |= FIGHT_USER_FLAG_GOTLOOT;
                            break;

                        case OBJECT_CLASS_PARTY:
                            $party_user_ids = get_hash(party_member_list($object_id, PM_STATUS_ACTIVE), 'user_id', 'user_id');
                            foreach ($party_user_ids as $user_id) $fight_flags[$user_id] |= FIGHT_USER_FLAG_GOTLOOT;
                            break;
                    }

                    $premium_user = $user_premium_hash[$object_id];

                    if ($info['money']) {
                        if($write_fight_stat){
                            $FS["money"]=$info['money'];
                        }
                        switch ($object_class) {
                            case OBJECT_CLASS_USER:
                                $money_add = $user_skills[$object_id]['MONEYMOD'] ? $info['money'] * ($user_skills[$object_id]['MONEYMOD']/100) : false;
                                $money_add_prem = false;
                                if($premium_user['vars'][P_MONEY]['cnt']) {
                                    $money_add_prem = $info['money'] * ($premium_user['vars'][P_MONEY]['cnt']/100);
                                }

                                $punished = false;
                                // #112895 Падает 50% денег
                                if (($user_hash[$object_id]['flags'] & USER_FLAG_PUNISH) && user_get_punishment_state($user_hash[$object_id]['id'], CRIME_FINANCE2)) {
                                    $info['money'] = floor($info['money'] / 2 * 100) / 100;
                                    $money_add = $money_add !== false ? floor($money_add / 2 * 100) / 100 : $money_add;
                                    $money_add_prem = $money_add_prem !== false ? floor($money_add_prem / 2 * 100) / 100 : $money_add_prem;
                                    $punished = true;
                                }
                                $operations = array(MONEY_STAT_OPERATION_RECEIVE,MONEY_STAT_OPERATION_PURE_RECEIVE);
                                user_make_payment(MONEY_TYPE_GAME, $object_id, $info['money'] + ($money_add !== false ? $money_add : 0) + ($money_add_prem !== false ? $money_add_prem : 0),'',false,$operations);

                                $out_bonus = array(
                                    'status' => BONUS_STATUS_OK,
                                    'money' => array(
                                        MONEY_TYPE_GAME => $info['money'] + ($money_add !== false ? $money_add : 0) + ($money_add_prem !== false ? $money_add_prem : 0),
                                    ),
                                ); //Стараемся)

                                if(user_drop_check($fight)) user_drop_out_bonus($user_drop[$object_id], $out_bonus); //Сводная статистика после боя Для денюжек тоже сойдет, если постараться

                                $user_lang = $user_hash[$object_id]['language'] ? $user_hash[$object_id]['language'] : false;
                                if ($user_lang) translate_default_language_push($user_lang);
                                $msg_text = sprintf(translate('Вы получили: %s'), html_money_str(MONEY_TYPE_GAME, $info['money']));
                                if ($info['money_corr']) $msg_text .= translate(' (сумма уменьшена из-за разницы в уровне с монстром)');
                                if ($punished) $msg_text .= translate(' (сумма уменьшена из-за наложенного Проклятия Менялы)');
                                chat_msg_send_system($msg_text, CHAT_CHF_USER, $object_id);
                                if ($money_add !== false) chat_msg_send_system(sprintf(translate('Благодаря волшебному Горшочку золота вы сумели обогатиться еще на %s.'), html_money_str(MONEY_TYPE_GAME, $money_add)), CHAT_CHF_USER, $object_id);
                                if ($money_add_prem !== false && $money_add_prem >= 0.01) chat_msg_send_system(sprintf(translate('Благодаря <a href="#" onclick="_top().frames[\'main_frame\'].processMenu(\'b_prem\');return false;"><b style="color:'.$quality_info[$premium_user['level'] - 1]['color'].'">Премиальному аккаунту</b></a> вы сумели обогатиться еще на %s.'), html_money_str(MONEY_TYPE_GAME, $money_add_prem)), CHAT_CHF_USER, $object_id);
                                if ($user_lang) translate_default_language_pop();
                                NODE_PUSH(null, $object_id);
                                user_stat_update($object_id, USER_STAT_TYPE_MONEY, USER_STAT_OBJECT_BOT_MONEY, intval(($info['money'] + ($money_add !== false ? $money_add : 0)) * 100));
                                NODE_POP();
                                // добавляем работу для поместий
                                if ($work_update = estate_user_work_update($user_hash[$object_id], $user_skills[$object_id], $estate_hash[$object_id], $info['cnt'] * WORK_FROM_BOT)) {
                                    $work_added[$object_id] += $work_update;
                                    $estate_hash[$object_id]['work'] += $work_update;
                                    $user_skills[$object_id]['WORK_TODAY'] += $work_update;
                                }
                                //Добавляем убийство душ... че за хуйня чел блять?
                                if($object_id == DEV_ACCOUNT_ID){
                                    building_user_res_add($object_id, BUILDING_RES_SPIRIT_BOT, $info['cnt']);
                                }

                                //Убийтсва ботов
                                _global_event_trigger(GLOBAL_EVENT_TYPE_KILL_BOT, intval($info['cnt']), $user_id);

                                lite_pass_user_action($user_hash[$user_id], LITE_PASS_ACTION_KILL_BOT, intval($info['cnt']));

                                break;

                            case OBJECT_CLASS_PARTY:
                                // члены пати находящиеся в бою
                                $party_members_in_fight_user_ids = array_intersect($party_user_ids, $user_ids);

                                // члены хоть как-то проявившие себя в бою
                                $active_party_members = array();
                                foreach ($party_members_in_fight_user_ids as $user_id) {
                                    if ($dmg_user[$user_id] > 0 || $heal_user[$user_id] > 0) {
                                        $active_party_members[$user_id] = $user_id;
                                    }
                                }

                                if (!$active_party_members) $active_party_members = $party_members_in_fight_user_ids;

                                $money_per_user = $active_party_members ? $info['money'] / count($active_party_members) : 0;

                                $comment = sprintf(translate('раздача денежного дропа, party_id=%d'), $party_id);
                                foreach ($active_party_members as $user_id) {
                                    $user_lang = $user_hash[$user_id]['language'] ? $user_hash[$user_id]['language'] : false;
                                    if ($user_lang) translate_default_language_push($user_lang);

                                    $premium_user = $user_premium_hash[$user_id];

                                    $money_add_prem = false;
                                    if($premium_user['vars'][P_MONEY]['cnt']) {
                                        $money_add_prem = $info['money'] * ($premium_user['vars'][P_MONEY]['cnt']/100);
                                    }

                                    if(count($active_party_members) > 1){
                                        $money_add_prem = false;
                                    }

                                    $money_add = $user_skills[$user_id]['MONEYMOD'] ? $money_per_user * ($user_skills[$user_id]['MONEYMOD']/100) : false;
                                    $operations = array(MONEY_STAT_OPERATION_RECEIVE,MONEY_STAT_OPERATION_PURE_RECEIVE);
                                    if (user_make_payment(MONEY_TYPE_GAME, $user_id, $money_per_user + ($money_add !== false ? $money_add : 0) + ($money_add_prem !== false ? $money_add_prem : 0), $comment, false, $operations)) {
                                        chat_msg_send_system(sprintf(translate('Вы получили: %s'), html_money_str(MONEY_TYPE_GAME,$money_per_user)), CHAT_CHF_USER, $user_id);
                                        if ($money_add !== false) chat_msg_send_system(sprintf(translate('Благодаря волшебному Горшочку золота вы сумели обогатиться еще на %s.'), html_money_str(MONEY_TYPE_GAME, $money_add)), CHAT_CHF_USER, $user_id);
                                        if ($money_add_prem !== false && $money_add_prem >= 0.01) chat_msg_send_system(sprintf(translate('Благодаря <a href="#" onclick="_top().frames[\'main_frame\'].processMenu(\'b_prem\');return false;"><b style="color:'.$quality_info[$premium_user['level'] - 1]['color'].'">Премиальному аккаунту</b></a> вы сумели обогатиться еще на %s.'), html_money_str(MONEY_TYPE_GAME, $money_add_prem)), CHAT_CHF_USER, $user_id);
                                    }

                                    if(count($active_party_members) == 1){
                                        $out_bonus = array(
                                            'status' => BONUS_STATUS_OK,
                                            'money' => array(
                                                MONEY_TYPE_GAME => $info['money'] + ($money_add !== false ? $money_add : 0) + ($money_add_prem !== false ? $money_add_prem : 0),
                                            ),
                                        ); //Стараемся)

                                        if(user_drop_check($fight)) user_drop_out_bonus($user_drop[$user_id], $out_bonus); //Сводная статистика после боя Для денюжек тоже сойдет, если постараться
                                    }

                                    if ($user_lang) translate_default_language_pop();
                                    // добавляем работу для поместий
                                    if ($work_update = estate_user_work_update($user_hash[$user_id], $user_skills[$user_id], $estate_hash[$user_id], $info['cnt'] * WORK_FROM_BOT)) {
                                        $work_added[$user_id] += $work_update;
                                        $estate_hash[$user_id]['work'] += $work_update;
                                        $user_skills[$user_id]['WORK_TODAY'] += $work_update;
                                    }
                                    if($user_id == DEV_ACCOUNT_ID){
                                        building_user_res_add($user_id, BUILDING_RES_SPIRIT_BOT, $info['cnt']);
                                    }

                                    //Забыл)) хех
                                    _global_event_trigger(GLOBAL_EVENT_TYPE_KILL_BOT, intval($info['cnt']), $user_id);

                                    lite_pass_user_action($user_hash[$user_id], LITE_PASS_ACTION_KILL_BOT, intval($info['cnt']));
                                }

                                foreach ($party_user_ids as $user_id) {
                                    $user_lang = $user_hash[$user_id]['language'] ? $user_hash[$user_id]['language'] : false;
                                    if ($user_lang) translate_default_language_push($user_lang);
                                    $msg_text = sprintf(translate('Вашей группой найдено: %s'), html_money_str(MONEY_TYPE_GAME, $info['money']));
                                    if ($info['money_corr']) $msg_text .= translate(' (сумма уменьшена из-за разницы в уровне с монстром)');
                                    chat_msg_send_system($msg_text,CHAT_CHF_USER, $user_id);
                                    if ($user_lang) translate_default_language_pop();
                                }
                                break;
                        }
                    }
                    if ($object_class == OBJECT_CLASS_PARTY) {
                        chat_msg_send_special(CODE_CALL_JSFUNC,CHAT_CHF_USER,$party_user_ids,array('func' => 'updatePartyLoot()'));
                    }
                }
            }
        }
    }

    //area_event_trig
    foreach ($user_bot_bonus_cnts as $ae_uid=>$bot_bonus_info){
        $ae_user = cache_fetch($user_hash, $ae_uid, 'user_get');
        if(!$ae_user) continue;
        foreach ($bot_bonus_info as $ae_bid=>$_bonus_info){
            area_event_trigger($ae_user, AREA_EVENT_TYPE_BOT, $ae_bid, $_bonus_info['bonus_id'], $_bonus_info['cnt']);
        }
    }
    #logfile(NODE_FILE_LOG, print_r($user_bot_bonus_cnts, true));

    foreach ($work_added as $user_id => $work) {
        chat_msg_send_system(sprintf(translate('Вы получили %d энергии.'), $work), CHAT_CHF_USER, $user_id);
    }


    foreach($lock_parties as $lock_party_id) {
        party_unlock($lock_party_id);
    }
    if($write_fight_stat) {
        $FS['_delayed'] = 1;
        fight_stat_save($FS);
    }
    // обработка комбо
    $combo_ids = get_hash($fight_info['cmbData'],'cmbId','cmbId');
    if ($combo_ids) {
        $combo_user_hash = make_hash(combo_user_list(false,false,sql_pholder(" AND id IN (?@)",$combo_ids)),'id');
        foreach ($fight_info['cmbData'] as $cmb_info) {
            $combo_id = $cmb_info['cmbId'];
            $used = $cmb_info['useCnt'] > 0;
            if (!$combo_user_hash[$combo_id]) continue;
            if ($combo_user_hash[$combo_id]['used'] == $used) continue;
            if ($used > 0) {
                //Все предыдущие комбпо пожалуй дефолтными не считать)
                combo_user_save(array(
                    '_add' => sql_pholder(' AND user_id = ?', $combo_user_hash[$combo_id]['user_id']),
                    '_set' => sql_pholder(' def = 0'),
                ));
                combo_user_save(array(
                    'id' => $combo_id,
                    'used' => 1,
                    'def' => 1,
                ));
            }
        }
    }

    $fight_time = intval(time_current() - $fight_info['ctime']);
    // собираем статистику -----------
    $party_member_cache = array();
    $user_stat_type_finish = array();
    foreach ($killed_bot_stat as $pers_id => $stat) {
        if (!$dmg_target[$pers_id]) {
            if (!$max_dmg_user['id']) {
                continue;
            }
            // даем бонус тому, кто нанес больше дамага
            if ($max_dmg_user['dmg'] > $max_dmg_party) {
                $target = array(
                    'object_class' => OBJECT_CLASS_USER,
                    'pers_id' => $max_dmg_user['id'],
                );
            } else {
                $target = array(
                    'object_class' => OBJECT_CLASS_PARTY,
                    'party_id' => $party_id,
                );
            }
        } else {
            $target = $dmg_target[$pers_id];
        }

        $object_ids = array();
        switch ($target['object_class']) {
            case OBJECT_CLASS_USER:
                $object_ids[] = $user_ids[$target['pers_id']];
                break;

            case OBJECT_CLASS_PARTY:
                $party_members = cache_fetch($party_member_cache, $target['party_id'], 'party_member_list');
                if ($party_members) {
                    foreach ($party_members as $member) {
                        if ($member['status'] != PM_STATUS_ACTIVE || !in_array($member['user_id'], $user_ids)) continue;
                        $object_ids[] = $member['user_id'];
                    }
                }
                break;
        }

        foreach ($object_ids as $user_id) {
            NODE_PUSH(null, $user_id);
            if ($stat['stat']) user_stat_update($user_id, USER_STAT_TYPE_BOT, $stat['artikul_id'], $stat['stat']);
            if ($stat['time']) user_stat_update($user_id, USER_STAT_TYPE_BOT_FIGHT_TIME, $stat['artikul_id'], $fight_time, USER_STAT_OP_MIN);
            NODE_POP();
            $user_stat_type_finish[$user_id] = $user_id;
        }
    }
    unset($party_member_cache);

    foreach ($user_stat_type_finish as $user_id) {
        NODE_PUSH(null, $user_id);
        user_stat_update($user_id, USER_STAT_TYPE_FIGHT, $fight['level'] ? 4 : 1); // +1 великая битва или +1 обычная битва, константы из $achievement_fight_type_hash
        NODE_POP();
    }
    // -------------------------------


    if ($instance) {
        if ($instance_root['bg_id']) {
            $bg = bg_get($instance_root['bg_id']);
            if (($instance['flags'] & INST_FLAG_BGCOUNTPVP) && $fight_f_pvp && $winner_kind) {
                $skill_id = $bg['t'.$winner_kind.'_skill_id'];
                skill_object_set_value(OBJECT_CLASS_INSTANCE,$instance_root['id'],$skill_id,1,array('relative' => true));
                foreach ($winner_kind_uids as $user_id) {
                    $user_lang = $user_hash[$user_id]['language'] ? $user_hash[$user_id]['language'] : false;
                    if ($user_lang) translate_default_language_push($user_lang);
                    chat_msg_send_system(translate('Счет вашей команды увеличился на 1.'),CHAT_CHF_USER,$user_id);
                    if ($user_lang) translate_default_language_pop();
                }
            }
            if ($bg['flags'] & BG_FLAG_WRITE_STAT) {
                $metric_level = $instance_root['level_max'];
                if ($metric_level) metric_group_add(METRIC_TYPES_PVP_INST, array('bg_id' => $bg['id'], 'level' => $metric_level), array('pvp_inst_fight' => 1));
            }
        }
        if ($slaughter && ($slaughter['flags'] & SLAUGHTER_FLAG_WRITE_STAT)) {
            $metric_level = $instance_root['level_max'];
            if ($metric_level) metric_group_add(METRIC_TYPES_PVP_INST, array('slaughter_id' => $slaughter['id'], 'level' => $metric_level), array('slaughter_inst_fight' => 1));
        }
        foreach ($inst_bonus_ids as $bonus_id) {
            bonus_apply($instance,$bonus_id, array('rolling_active' => true, 'auto_drop_active' => true));
        }
    }

    // сохранение трофеев и выдача бонусов pvp
    $trophy = array();
    $fight_user_list_hash_user_id = make_hash($fight_user_list, 'user_id');
    foreach ($fightlog_stat['death_kicks'] as $item) {

        // преобразование fight_user_id (pers_id) => user_id
        $persId = $item['persId'];
        if (!isset($fight_user_list_hash_user_id[$persId])) {
            // ошибку не надо писать так как штатная ситуация, например, смерть по таймауту
            //fight_addlog(sprintf('fight_finish: Fight User [%d] not found!', $persId));
            continue;
        }
        $oppId = $item['oppId'];
        if (!isset($fight_user_list_hash_user_id[$oppId])) {
            //fight_addlog(sprintf('fight_finish: Fight User Opp [%d] not found!', $oppId));
        }

        if ($area && ($area['flags'] & AREA_FLAG_ENABLE_BONUS_PVP)) {
            $user = user_get($persId);
            if($user){
                if(user_get($oppId)){
                    $out_bonus = bonus_apply($user, 9829);
                    if(user_drop_check($fight)) user_drop_out_bonus($user_drop[$user['id']], $out_bonus); //Сводная статистика после боя
                }
            }
        }

        $persId = $fight_user_list_hash_user_id[$persId]['user_id'];
        $oppId = $fight_user_list_hash_user_id[$oppId]['user_id'];

        if (!isset($user_hash[$oppId])) {
            continue;
        }
        if (user_is_invisible($user_hash[$oppId])) {
            continue;
        }

        $trophy[$persId][] = $oppId;
        //logfile(DEBUG_FILE_LOG_DEV, print_r($trophy,true));
        //TODO: Если что-то не работает вот поэтомуЁ!
    }

    if (!$instance_root || !$instance_root['slaughter_id']) { //Не выдаём трофеи в бойнях, это противоречит логике о том, что все невидимки в бойне
        foreach ($trophy as $pers_id => $opp_ids) {

            $trophy_save = array(
                'fight_id' => $fight_id,
                'killer_id' => $pers_id,
                '_add' => sql_pholder(' AND fight_id=? AND user_id IN (?@)',$fight_id,$opp_ids),
            );

            if(($fight['level'] || ($area['flags2'] & AREA_FLAG2_BONUSES_WB_ALL)) && $area_fight_bonus['wb_scalp_bonus_id']){
            //if($area_fight_bonus['wb_scalp_bonus_id']){ //TODO:TEST
                $trophy_save['killer_bonus_id'] = $area_fight_bonus['wb_scalp_bonus_id'];
            }

            fight_user_save($trophy_save);
        }
    }

    if ($instance_root && $instance_root['clan_battle_id']) {
        require_once("lib/clan_battle.lib");
        $room = clan_battle_room_get(array('fight_id' => $fight['id'], 'clan_battle_id' => $instance_root['clan_battle_id']));
        if ($room) {
            clan_battle_room_save(array(
                '_set' => sql_pholder('winner_clan_num = ?', $fight_info['winnerTeam'] ? $fight_info['winnerTeam'] : -1),
                '_add' => sql_pholder(' AND fight_id = ? AND clan_battle_id = ?', $fight['id'], $instance_root['clan_battle_id'])
            ));

            $clan_battle = clan_battle_get(array('id' => $instance_root['clan_battle_id'], 'server_id' => SERVER_ID));
            if ($clan_battle) clan_battle_process_winner($clan_battle, $room['room']);
        }
    }

    // обработка окончания боя осады крепости
    if ($fight['flags'] & FIGHT_FLAG_STRONGHOLD) {
        // Сбрасываем ID рейда для крепости. Для всех участвовавших в бою пользователей
        if ($user_ids) {
            user_bulk_update($user_ids, 'raid_id', 0);
        }
        // получаем информацию о крепости, расположенной в локации боя
        $stronghold = stronghold_get(array('stronghold_area_id' => $fight['area_id']));
        if ($stronghold) {
            $stronghold_info = stronghold_info_get(array('stronghold_id' => $stronghold['id']));
            if ($stronghold_info) {
                // поднимаем кланы
                $stronghold_clan_hash = make_hash(clan_list(array('id' => array($stronghold_info['defender_clan_id'], $stronghold_info['attacker_clan_id']))));
                $clan_defender = $stronghold_clan_hash[$stronghold_info['defender_clan_id']];
                $clan_attacker = $stronghold_clan_hash[$stronghold_info['attacker_clan_id']];

                // определяем клан-победитель и клан-проигравший
                if ($fight_info['winnerTeam'] == STRONGHOLD_TEAM_ATTACKERS) {
                    $team_winner = STRONGHOLD_TEAM_ATTACKERS;
                    $team_defeat = STRONGHOLD_TEAM_DEFENDERS;
                    $clan_winner = $clan_attacker;
                    $clan_defeat = $clan_defender;
                } elseif ($fight_info['winnerTeam'] == STRONGHOLD_TEAM_DEFENDERS) {
                    $team_winner = STRONGHOLD_TEAM_DEFENDERS;
                    $team_defeat = STRONGHOLD_TEAM_ATTACKERS;
                    $clan_winner = $clan_defender;
                    $clan_defeat = $clan_attacker;
                }

                // выдаем победителям и проигравшим бонусы
                foreach ($fight_user_list as $fight_user) {
                    if ($fight_user['user_id']) {
                        $user = user_get($fight_user['user_id']);
                        NODE_PUSH(null, $user['id']);
                        if ($user && $stronghold['winner_bonus_id'] && $fight_user['team'] == $team_winner) {
                            $out_bonus = bonus_apply($user, $stronghold['winner_bonus_id']);
                            if(user_drop_check($fight)) user_drop_out_bonus($user_drop[$user['id']], $out_bonus); //Сводная статистика после боя
                        }
                        if ($user && $stronghold['defeat_bonus_id'] && $fight_user['team'] == $team_defeat) {
                            $out_bonus = bonus_apply($user, $stronghold['defeat_bonus_id']);
                            if(user_drop_check($fight)) user_drop_out_bonus($user_drop[$user['id']], $out_bonus); //Сводная статистика после боя
                        }
                        NODE_POP();
                    }
                }

                $message = sprintf(translate('Клан %s одержал победу над кланом %s и завладел крепостью %s.'), html_clan_info($clan_winner), html_clan_info($clan_defeat), $stronghold['title']);
                chat_msg_send_system($message, CHAT_CHF_AREA);

                // Обновляем статус крепости
                $stronghold_info['attacker_clan_id'] = 0;
                $stronghold_info['defender_clan_id'] = 0;
                $stronghold_info['owner_clan_id']    = $clan_winner['id'];
                $stronghold_info['siege_fight_id']   = 0;
                stronghold_info_save($stronghold_info);

                // Пишем историю крепости
                stronghold_siege_history_save(array(
                    'fight_id'         => $fight_id,
                    'stronghold_id'    => $stronghold['id'],
                    'siege_time'       => time_current(),
                    'attacker_clan_id' => $clan_attacker['id'],
                    'defender_clan_id' => $clan_defender['id'],
                    'winner_clan_id'   => $clan_winner['id'],
                ));
            }
        }
    }

    //Обработка бонусов локациии
    try{
        do{
            if(!($fight['level'] || ($area['flags2'] & AREA_FLAG2_BONUSES_WB_ALL))) break;
            if(!$area_fight_bonus) break;
            foreach ($fight_user_list as $fight_user) {
                if ($fight_user['user_id']) {
                    $user = cache_fetch($user_hash,$fight_user['user_id'],'user_get');
                    NODE_PUSH(null, $user['id']);
                    if ($user && $area_fight_bonus['wb_win_bonus_id'] && $fight_user['team'] == $fight_info['winnerTeam']) {
                        $out_bonus = bonus_apply($user, $area_fight_bonus['wb_win_bonus_id']);
                        if(user_drop_check($fight)) user_drop_out_bonus($user_drop[$user['id']], $out_bonus); //Сводная статистика после боя
                    }
                    if ($user && $area_fight_bonus['wb_fail_bonus_id'] && $fight_user['team'] != $fight_info['winnerTeam']) {
                        $out_bonus = bonus_apply($user, $area_fight_bonus['wb_fail_bonus_id']);
                        if(user_drop_check($fight)) user_drop_out_bonus($user_drop[$user['id']], $out_bonus); //Сводная статистика после боя
                    }
                    NODE_POP();
                }
            }
        }while(0);
    }catch(Exception $e){}

    // сохранение флагов
    $t = array();
    foreach ($fight_flags as $user_id=>$flags) {
        if (!in_array($user_id,$user_ids)) continue;
        $t[$flags][] = $user_id;
    }
    foreach ($t as $flags=>$uids) {
        fight_user_save(array(
            'fight_id' => $fight_id,
            '_set' => 'flags = flags | '.intval($flags),
            '_add' => sql_pholder(' AND fight_id=? AND user_id IN (?@)',$fight_id,$uids),
        ));
    }

    fight_save(array(
        'id' => $fight_id,
        'status' => FIGHT_STATUS_FINISHED,
        'ctime' => $fight_info['ctime'],
        'rtime' => $fight_info['rtime'],
        'winner_team' => $fight_info['winnerTeam'],
    ));
    fight_user_skill_delete(array('fight_id' => $fight_id));

    // Осады крепости сохраняются навсегда в архиве
    if ($fight['flags'] & FIGHT_FLAG_STRONGHOLD) {
        require_once("lib/archive.lib");
        $fight_archive = fight_get($fight_id);
        $fight_archive['user_list'] = fight_user_list($fight_id);
        archive_save(array(
            'object_type'    => ARCHIVE_TYPE_FIGHT,
            'object_id'      => $fight_id,
            'flags'          => ARCHIVE_FLAG_NODELETE,
            'ctime'          => time_current(),
            'data_serialize' => serialize($fight_archive),
            '_mode'          => CSMODE_INSERT,
        ));
    }

    // Пересчёт текущих великих битв на локации, так как одна из великих битв закончилась
    if ($fight['level']) chat_msg_send_special(CODE_CALL_JSFUNC,CHAT_CHF_AREA,array($fight['area_id']),array('func' => "updateSwf({'area_fight':''})"));

    // считаем количество боев с ботами
    if ($fight_f_bot) {

        $metric_values = array();
        if ($fight['type'] == FIGHT_TYPE_DUEL) {
            foreach($bot_list as $bot) {
                $metric_values['bot_fight_duel'] = 1;
                if ($bot['pers_info']['persStatus'] == FS_PS_DEAD) {
                    $metric_values['bot_fight_duel_death'] = 1;
                    if (!empty($money)) {
                        $metric_values['bot_fight_user_profit'] = $money * 100;
                    }
                }

                $metric_values['bot_fight_duel_time'] = $fight_info['rtime'];

                // обработка эффектов
                $artifact_ids = array();
                foreach ($fight_info['effData'] as $eff_info) {
                    if (!isset($fight_user_bot_ids[$eff_info['persId']])) {
                        $artifact_ids[$eff_info['effId']] = $eff_info['effId'];
                    }
                }


                if ($artifact_ids) {
                    $artifact_hash = array();
                    foreach ($NODE_NUMS as $nn){
                        if ($nn == FRIDGE_NN) continue;
                        NODE_PUSH($nn);
                        $node_artifacts = artifact_list(false,null,null,false,false,sql_pholder(" AND id IN (?@)",$artifact_ids));
                        foreach ($node_artifacts as $node_artifact) $artifact_hash[$node_artifact['id']] = $node_artifact;
                        NODE_POP();
                    }
                    $expense = 0;
                    foreach ($fight_info['effData'] as $eff_info) {
                        $artifact_id = $eff_info['effId'];
                        $artifact = $artifact_hash[$artifact_id];
                        if (!$artifact) continue;
                        $died = $artifact['cnt'] - $eff_info['cnt'];

                        //chanje_sub_slot // ZADATKY
                        //if($artifact['slot_id'] == 'VARIANT_EFFECT' && $eff_info['sub_slot'] )

                        if (!$died) continue;

                        $artifact_artikul = artifact_artikul_get($artifact['artikul_id']);
                        $expense += $artifact_artikul['price'] * $died;
                    }
                    if ($expense) {
                        $metric_values['bot_fight_duel_expense'] = $expense * 100;
                    }
                }

            }
        } else {
            foreach($bot_list as $bot) {
                $metric_values['bot_fight_nou_duel'] = 1;
            }
        }
        metric_group_add(METRIC_TYPES_BOT, array('object_id' => $bot['artikul_id']), $metric_values);
    }

    if ($fight['level'] && $max_dmg_user['id']) {
        NODE_PUSH(null, $fight_user_list[$max_dmg_user['id']]['user_id']);
        user_stat_update($fight_user_list[$max_dmg_user['id']]['user_id'], USER_STAT_TYPE_MISC, USER_STAT_OBJECT_GF_WIN_AS_LEADER, 1);
        $race = ($fight_user_list[$max_dmg_user['id']]['user_kind'] == 1) ? translate('расу людей') : translate(' древний народ');
        $msg = array(
            'type' => CHAT_MSG_TYPE_BROADCAST,
            'msg_text' => tpl_common_tags(sprintf(translate('Бесстрашный воин #USER[%d]#, проявив отвагу и решительность, приводит %s к победе в <a href="#" onclick="showFightInfo(%d);">Великой битве</a>!'), $fight_user_list[$max_dmg_user['id']]['user_id'], $race, $fight[id])),
        );
        chat_msg_send($msg, CHAT_CHF_AREA, array('area_id' => $fight['area_id']));
        NODE_POP();
    }

    //Автопоедание для всех
    try{
        if ($alter_user_ids) $user_hash = make_hash(user_list(array('id' => $alter_user_ids), '', false), 'id', false);
        adv_food_check_all($user_hash);
    }catch (Exception $e){}

    if($fight['type'] == FIGHT_TYPE_ARENA){
        #Сохраняем данные арены.
        $arena_user_list = make_hash(arena_user_list(false," AND fight_id = ".$fight_id." AND pending <= ".ARENA_STATUS_INFIGHT),'user_id'); //Загрузим всех игроков подавших заявки
        $arena_user_ext_ids = array();
        foreach ($arena_user_list as $arena_user){
            $arena_user_ext_ids[$arena_user['user_id']] = $arena_user['user_id'];
        }
        $arena_user_ext_list = arena_user_ext_list(array('user_id' => $arena_user_ext_ids));
        $remove_propuks_ids = array();
        foreach ($arena_user_ext_list as $arena_user_ext){
            if($arena_user_ext['cnt'] <= 0) {
                unset($arena_user_ext_ids[$arena_user_ext['user_id']]);
                $remove_propuks_ids[$arena_user_ext['user_id']] = true;
            }
        }
        foreach ($remove_propuks_ids as $user_id=>$bool){
            artifact_remove(ARENA_PROPUSK_ID, 1, $user_id);
        }
        if($arena_user_ext_ids) {
            arena_user_ext_save(array(
                '_mode' => CSMODE_UPDATE,
                '_add' => sql_pholder(' AND user_id IN (?@)', $arena_user_ext_ids),
                '_set' => ' cnt = cnt - 1',
            ));
        }
        foreach($arena_user_list as $arena_user){
            $arena_user['pending'] = ARENA_STATUS_FINISHING;
            arena_user_save($arena_user);
        }
    }

    if($fight['type'] == FIGHT_TYPE_CHAOTIC && $adv_chaot) {
        global $kind_info;
        if ($alter_user_ids) $user_hash = make_hash(user_list(array('id' => $alter_user_ids), '', false), 'id', false);
        if($adv_chaot['flags'] & ADV_CHAOT_FLAG_RETURN_LOC) {
            foreach ($fight_user_list as $fight_user) {
                if($fight_user['bot_id']) continue;
                if($fight_user['user_id'] && !($fight_user['flags'] & FIGHT_USER_FLAG_FLEE)) {
                    $user = $user_hash[$fight_user['user_id']];
                    if(!$user || !$user['id']) continue;
                    if($user['area_id_transfer']){
                        user_save(array(
                            'id' => $user['id'],
                            'area_id' => $user['area_id_transfer'],
                            'area_id_transfer' => 0,
                            'area_ftime' => 0,
                        ));
                    }else{
                        if($adv_chaot['flags'] & ADV_CHAOT_FLAG_RETURN_HOME) {
                            user_save(array(
                                'id' => $user['id'],
                                'area_id' => $kind_info[$user['kind']]['city_area_id'],
                                'area_id_transfer' => 0,
                                'area_ftime' => 0,
                            ));
                        }
                    }
                }
            }
        }
        /*if($adv_chaot['flags'] & ADV_CHAOT_FLAG_RETURN_HOME){
            foreach ($user_hash as $user){
                user_save(array(
                    'id' => $user['id'],
                    'area_id' => $kind_info[$user['kind']]['city_area_id'],
                    'area_id_transfer' => 0,
                    'area_ftime' => 0,
                ));
            }
        }*/

        //Бонус победителям и проигравшим
        $team_win_temp = $fight_info['winnerTeam'];
        $team_fail_temp = $team_win_temp == 1 ? 2 : 1;
        //$adv_chaot_stat_users_all[$pers_info['teamNum']][$user_id] = $user_hash[$user_id];
        if($adv_chaot_bonus_win_all){
            foreach ($adv_chaot_stat_users_all[$team_win_temp] as $user_id=>$user){
                if($fight_info['persData'][$user['id']]['dmg'] < 100) continue; // Не даем бонус если на набрали хотябы 100 урона
                $out_bonus = bonus_apply($user,$adv_chaot_bonus_win_all);
                if(user_drop_check($fight)) user_drop_out_bonus($user_drop[$user['id']], $out_bonus); //Сводная статистика после боя
            }
        }
        if($adv_chaot_bonus_fail_all){
            foreach ($adv_chaot_stat_users_all[$team_fail_temp] as $user_id=>$user){
                if($fight_info['persData'][$user['id']]['dmg'] < 100) continue; // Не даем бонус если на набрали хотябы 100 урона
                $out_bonus = bonus_apply($user,$adv_chaot_bonus_fail_all);
                if(user_drop_check($fight)) user_drop_out_bonus($user_drop[$user['id']], $out_bonus); //Сводная статистика после боя
            }
        }
        if($adv_chaot_random_bonus_id){
            $adv_chaot_user_ids = array();
            foreach ($adv_chaot_stat_users_all[$team_win_temp] as $user_id=>$user){
                if($fight_info['persData'][$user_id]['dmg'] < 100) continue; // Не даем бонус если на набрали хотябы 100 урона
                $adv_chaot_user_ids[$user_id] = $user_id;
            }
            foreach ($adv_chaot_stat_users_all[$team_fail_temp] as $user_id=>$user){
                if($fight_info['persData'][$user_id]['dmg'] < 100) continue; // Не даем бонус если на набрали хотябы 100 урона
                $adv_chaot_user_ids[$user_id] = $user_id;
            }
            if($adv_chaot_user_ids) $av_bonus_user_id = array_rand($adv_chaot_user_ids);
            if($user_hash[$av_bonus_user_id]){
                $out_bonus = bonus_apply($user_hash[$av_bonus_user_id],$adv_chaot_random_bonus_id);
                if(user_drop_check($fight)) user_drop_out_bonus($user_drop[$av_bonus_user_id], $out_bonus); //Сводная статистика после боя
            }
        }
    }


    if($fight['type'] == FIGHT_TYPE_BOSS_PLANNER && $boss_planner){
        global $kind_info;
        if ($alter_user_ids) $user_hash = make_hash(user_list(array('id' => $alter_user_ids), '', false), 'id', false);
        foreach ($user_hash as $user){
            if($user['area_id_transfer']){
                user_save(array(
                    'id' => $user['id'],
                    'area_id' => $user['area_id_transfer'],
                    'area_id_transfer' => 0,
                    'area_ftime' => 0,
                ));
            }else{
                user_save(array(
                    'id' => $user['id'],
                    'area_id' => BOSS_PLANNER_PREP_AREA_ID,
                    'area_id_transfer' => 0,
                    'area_ftime' => 0,
                ));
            }
        }

        //Бонус победителям и проигравшим
        $team_win_temp = $fight_info['winnerTeam'];
        $team_fail_temp = $team_win_temp == 1 ? 2 : 1;
        if($boss_planner_bonus_win_all){
            foreach ($boss_planner_stat_users_all[$team_win_temp] as $user_id=>$user){
                $out_bonus = bonus_apply($user,$boss_planner_bonus_win_all);
                if(user_drop_check($fight)) user_drop_out_bonus($user_drop[$user['id']], $out_bonus); //Сводная статистика после боя
            }
        }
        if($boss_planner_bonus_fail_all){
            foreach ($boss_planner_stat_users_all[$team_fail_temp] as $user_id=>$user){
                $out_bonus = bonus_apply($user,$boss_planner_bonus_fail_all);
                if(user_drop_check($fight)) user_drop_out_bonus($user_drop[$user['id']], $out_bonus); //Сводная статистика после боя
            }
        }
    }

    //Бонус по арене равных
    if($fight['type'] == FIGHT_TYPE_ARENA) {
        $week_hash = date('d.m.Y', strtotime('monday this week', time()));
        //Бонус победителям и проигравшим
        $team_win_temp = $fight_info['winnerTeam'];
        $team_fail_temp = $team_win_temp == 1 ? 2 : 1;
        //$adv_chaot_stat_users_all[$pers_info['teamNum']][$user_id] = $user_hash[$user_id];
        if (defined('ARENA_EQUAL_WIN_BONUS_ID') && ARENA_EQUAL_WIN_BONUS_ID) {
            foreach ($adv_stat_users_all[$team_win_temp] as $user_id => $user) {
                $out_bonus = bonus_apply($user, ARENA_EQUAL_WIN_BONUS_ID);
                if(user_drop_check($fight)) user_drop_out_bonus($user_drop[$user['id']], $out_bonus); //Сводная статистика после боя

                $pers_info = $fight_info['persData'][$user_id];
                if($pers_info['enemyKillCnt'] > 0) {
                    $arena_user_rating = arena_rating_get(array(
                        'user_id' => $user_id,
                        'week_hash' => $week_hash,
                    ));
                    if ($arena_user_rating) {
                        arena_rating_save(array(
                            'id' => $arena_user_rating['id'],
                            '_set' => sql_pholder(' cnt = cnt + ?, win_cnt = win_cnt + 1', $pers_info['enemyKillCnt']),
                        ));
                    }else{
                        arena_rating_save(array(
                            'id' => $arena_user_rating['id'],
                            'week_hash' => $week_hash,
                            'cnt' => $pers_info['enemyKillCnt'],
                            'win_cnt' => 1,
                        ));
                    }
                }
            }
        }
        if (defined('ARENA_EQUAL_FAIL_BONUS_ID') && ARENA_EQUAL_FAIL_BONUS_ID) {
            foreach ($adv_stat_users_all[$team_fail_temp] as $user_id => $user) {
                $out_bonus = bonus_apply($user, ARENA_EQUAL_FAIL_BONUS_ID);
                if(user_drop_check($fight)) user_drop_out_bonus($user_drop[$user['id']], $out_bonus); //Сводная статистика после боя
            }
        }
    }
    //Бонус в кланах арена победа и поражение
    if($fight['in_clan_pvp']) {
        //Бонус победителям и проигравшим
        $team_win_temp = $fight_info['winnerTeam'];
        $team_fail_temp = $team_win_temp == 1 ? 2 : 1;
        if (defined('CLAN_ARENA_SIM_WIN_BONUS_ID') && CLAN_ARENA_SIM_WIN_BONUS_ID) {
            foreach ($adv_stat_users_all[$team_win_temp] as $user_id => $user) {
                $out_bonus = bonus_apply($user, CLAN_ARENA_SIM_WIN_BONUS_ID);
                if(user_drop_check($fight)) user_drop_out_bonus($user_drop[$user['id']], $out_bonus); //Сводная статистика после боя
            }
        }
        if (defined('CLAN_ARENA_SIM_FAIL_BONUS_ID') && CLAN_ARENA_SIM_FAIL_BONUS_ID) {
            foreach ($adv_stat_users_all[$team_fail_temp] as $user_id => $user) {
                $out_bonus = bonus_apply($user, CLAN_ARENA_SIM_FAIL_BONUS_ID);
                if(user_drop_check($fight)) user_drop_out_bonus($user_drop[$user['id']], $out_bonus); //Сводная статистика после боя
            }
        }
    }

    provocation_fight_delete(array('fight_id' => $fight_id));

    //Сохраняем user_drop
    try{
        foreach ($user_drop as $user_id=>$drop){
            user_drop_add(array('user_id' => $user_id, 'fight_id' => $fight_id), $drop);
        }
    }catch (Exception $e){}

    if($fight['hunt_attack_id'] && $fight['hunt_wave_id']) {
        if(!$bot_is_live_cnt) $bot_is_live_cnt = 1;
        $hunt_attack = hunt_attack_get($fight['hunt_attack_id']);
        $hunt_attack_wave = hunt_attack_waves_get(array('id' => $fight['hunt_wave_id']));

        if($hunt_attack) $huser_ids = get_hash(hunt_attack_user_list(array('hunt_attack_id' => $hunt_attack['id'])), 'user_id', 'user_id');

        $user_ids = array();
        foreach ($fight_user_list as $fight_user) if($fight_user['user_id']) $user_ids[$fight_user['user_id']] = $fight_user['user_id'];
        if($user_ids) {
            $hunt_attack_user_list = hunt_attack_user_list(array('user_id' => $user_ids));
            $user_hash = make_hash(user_list(array('id' => $user_ids)));
        }
        if($hunt_attack && $hunt_attack_wave && $hunt_attack_user_list) {
            if (!$users_team_num) $users_team_num = 1; //Чтобы не было проблем!
            if ($fight_info['winnerTeam'] == $users_team_num) {
                foreach ($hunt_attack_user_list as $hunt_attack_user) {
                    $user = $user_hash[$hunt_attack_user['user_id']];
                    if($hunt_attack_wave['win_bonus_id']) bonus_apply($user, $hunt_attack_wave['win_bonus_id']);
                }
            }else{
                hunt_attack_save(array(
                    'id' => $hunt_attack['id'],
                    '_set' => sql_pholder(' bot_passed = bot_passed + ?', intval($bot_is_live_cnt)),
                ));
                if($hunt_attack_user_list[0]) {
                    hunt_attack_user_save(array(
                        'id' => $hunt_attack_user_list[0]['id'],
                        '_set' => sql_pholder(' bot_passed = bot_passed + ?', intval($bot_is_live_cnt)),
                    ));
                }
                foreach ($hunt_attack_user_list as $hunt_attack_user) {
                    $user = $user_hash[$hunt_attack_user['user_id']];
                    if($hunt_attack_wave['fail_bonus_id']) bonus_apply($user, $hunt_attack_wave['fail_bonus_id']);
                }
                if($huser_ids) chat_msg_send_system($bot_is_live_cnt.' '.format_by_count($bot_is_live_cnt, 'монстр прошел', 'монстра прошли', 'монстров прошли').' через портал!', CHAT_CHF_USER, $huser_ids);
            }
        }
    }
    return true;
}


function fight_finish_for_user($fight, $fight_info, $fight_log, $user, $fight_user_list, $pet, $user_skills, $bot_skills, $premium_user = array(), $_clan_bonus = false) {
    global $price_elements,$pet_food_level;
    $fight_user_hash = make_hash($fight_user_list, 'user_id');

    $fight_id = $fight['id'];
    $user_id = $user['id'];
    $fight_user = $fight_user_hash[$user_id];
    $pers_id = $fight_user['id'];
    $user_level = $fight_user['user_level'];
    $pers_info = $fight_info['persData'][$fight_user['user_id']];
    $broken_artifacts_exists = false;

    $bot_levels = get_hash($fight_user_list, 'bot_id', 'user_level');
    $user_levels = get_hash($fight_user_list, 'user_id', 'user_level');
    $fight_user_hash = make_hash($fight_user_list);


    $area = $instance = $instance_root = false;
    $turn_into_ghost = true;
    if ($fight['instance_id']) {
        $instance = instance_get($fight['instance_id']);
        $instance_root = $instance['root_id'] ? instance_get($instance['root_id']) : $instance;
    } else {
        $area = area_get($fight['area_id']);
        if ($area['flags'] & AREA_FLAG_DIE_NO_GHOST) $turn_into_ghost = false;
    }
    if($fight['type'] == FIGHT_TYPE_ARENA) {
        $turn_into_ghost = false; //На арене равных не становиться призраком
    }
    if($fight['in_clan_pvp']) $turn_into_ghost = false; //В клановых дуэлях тоже не надо призраков

    /**
     * Снимем сытость пета, если он был.
     * Питомец был в бою, снимем хавочку
     */
    if($fight_user['pet_id'] > 0) {
        pet_fight_hunger($pet);
        $pet_artikul = pet_artikul_get($pet['artikul_id']);
        $count_food_pet = $pet_food_level[$pet_artikul['quality']][$pet_artikul['level']];
        if($count_food_pet){
            artifact_remove($pet_artikul['food_artikul_id'], $count_food_pet, $user['id']);
        }

        if(intval($pet['rest_time'] < time_current() && !($pet['flags'] & PET_FLAG_REST) )) {
            pet_putoff($pet);
        }
    }


    // уровень жизни
    if ($user_skills[$user_id]['HPMAX'] > 0 && $user['fight_id'] == $fight_id) {
        $r = $user_level*30;
        $d = ($user_skills[$user_id]['HPMAX'] ? $pers_info['hp']*$r/$user_skills[$user_id]['HPMAX'] : 0);
        if (($pers_info['persStatus'] == FS_PS_DEAD) && $turn_into_ghost) $d -= 60*60*24*365;
        if($_clan_bonus[CLAN_BONUS_TYPE_UNLIM_HP]) $r = 1;
        skill_object_set_value(OBJECT_CLASS_USER,$user_id,'HP_T0',(time_current() - $d));
        skill_object_set_value(OBJECT_CLASS_USER,$user_id,'HP_T1',(time_current() - $d + $r));
    }

    // уровень манны
    if ($user_skills[$user_id]['MPMAX'] > 0 && $user['fight_id'] == $fight_id) {
        $r = $user_level*10;
        $d = ($user_skills[$user_id]['MPMAX'] ? $pers_info['mp']*$r/$user_skills[$user_id]['MPMAX'] : 0);
        if (($pers_info['persStatus'] == FS_PS_DEAD) && $turn_into_ghost) $d -= 60*60*24*365;
        if($_clan_bonus[CLAN_BONUS_TYPE_UNLIM_HP]) $r = 1;
        skill_object_set_value(OBJECT_CLASS_USER,$user_id,'MP_T0',(time_current() - $d));
        skill_object_set_value(OBJECT_CLASS_USER,$user_id,'MP_T1',(time_current() - $d + $r));
    }


    if ($pers_info['persStatus'] == FS_PS_DEAD && $user['fight_id'] == $fight_id) {
        if ($turn_into_ghost) { // при гибели в этом местоположении игрок превращается в призрака
            user_set_flag($user_id, USER_FLAG_GHOST, true);
            if($user && $user_id) {
                user_save(array(
                    'id' => $user_id,
                    'garea_id' => $user['area_id'],
                ));
            }
            //user_update_chat_client_session(user_get($user_id));
            // При гибели в замке игрок получает бонус умершего
            if ($instance_root && $instance_root['castle_id']) {
                $castle = castle_get($instance_root['castle_id']);
                if ($user && $castle && $castle['dead_bonus_id']) {
                    $out_bonus = bonus_apply($user,$castle['dead_bonus_id']);
                }
            }
            // При гибели в замке игрок попадает в отстойник, для бойни иной алгоритм
            if ($instance_root && $instance_root['castle_id']) user_save(array(
                'id' => $user_id,
                '_set' => sql_pholder('instance_id = 0, raid_id = 0'),
            ));
        }
        //Если пользователь умер в бойне, то флаг превращения всё равно должен быть поставлен, чтобы отработало воскрешение
        if ($instance_root && $instance_root['slaughter_id']) {
            //Определяем пустую локацию инстанса бойни, в которую перемещаме пользователя после гибелив бойне
            $instance_locations = make_hash(instance_list(array('parent_id' => $instance_root['id'])));
            foreach($instance_locations as $instance_id => $location) {
                if (!$instance_id) continue;
                $instance_locations[$instance_id]['object_class'] = OBJECT_CLASS_INSTANCE;
            }
            skill_objects_list($instance_locations);
            reset($instance_locations);
            $instance_locations_with_users = make_hash(user_list(array('instance_id' => array_keys($instance_locations))), 'instance_id', true);
            foreach($instance_locations as $instance_id => $location) {
                if (!$instance_id) continue;
                if ($instance_locations_with_users[$instance_id]) continue;
                if (!$location['artifact_skills']['INITROOMSPACE']) continue;
                if (!$instance_locations_with_users[$instance_id]) {
                    $user_param = array(
                        'id' => $user_id,
                        'instance_id' => $instance_id
                    );
                    //user_change_chat_channels($user, $user_param);
                    user_save($user_param);
                    break;
                }
            }
            user_resurrect($user_id);
        }
        if ($instance_root && $instance_root['clan_battle_id']) {
            user_resurrect($user_id);
        }
    }

    //Удаление артефактов, с флагом "Удалить после боя"
    //и списание стрел

    $artifact_list = artifact_list(false,$user_id,'*',true);
    foreach($artifact_list as $artifact) {
        //TODO: МОжет здесь баг
        if ($artifact['type_id'] == ARTIFACT_TYPE_ID_BOW) {
            $arrows_hash = artifact_get_arrows_hash();
            if ($arrows_hash) {
                $arrows_cnt_total = 0;
                $bow_artikul = artifact_artikul_get($artifact['artikul_id']);
                $same_level_arrows_ids = is_array($arrows_hash[$bow_artikul['level_min']]) ? array_keys($arrows_hash[$bow_artikul['level_min']]) : array();
                $arrows_list = $same_level_arrows_ids ? artifact_list(false, $user_id, null, true, false, sql_pholder(' AND artikul_id IN (?@)', $same_level_arrows_ids)) : array();
                foreach($arrows_list as $arrows) {
                    $arrows_cnt_total += $arrows['cnt'];
                }

                $arrows_cnt = min($arrows_cnt_total, $user_skills[$user_id]['BOWARROWS']);
                $diff = $arrows_cnt - $pers_info['arrowsCnt'];
                foreach($arrows_list as $arrows) {
                    if ($diff <= 0) break;

                    $cur_diff = min($arrows['cnt'], $diff);
                    $diff -= $cur_diff;
                    $arrows['cnt'] -= $cur_diff;
                    $param = array(
                        'id' => $arrows['id'],
                        'cnt' => $arrows['cnt'],
                    );
                    artifact_save($param);
                }
            }
        }

        if ($artifact['flags'] & ARTIFACT_FLAG_DELAFTERFIGHT) {
            artifact_delete($artifact);
        }
    }

    // поломка вещей
    $death_cnt = intval($fight_log['death_cnts'][$user_id]);
    if ($death_cnt > 0) {
        do {
            $artifact_list = artifact_list(false,$user_id,null,true, false, sql_pholder(' AND !(flags2 & ?#ARTIFACT_FLAG2_NO_BREAK)'));
            artifact_artikul_get_title($artifact_list);
            $artifacts = array();
            foreach ($artifact_list as $artifact) {
                if ($artifact['flags'] & ARTIFACT_FLAG_DELONDEATH) {
                    artifact_delete($artifact);
                    continue;
                }
                if (!$artifact['slot_id'] || !$artifact['durability_max']) continue;
                $artifacts[$artifact['id']] = $artifact;
            }

            if ($fight['flags'] & FIGHT_FLAG_NO_GREAT) break;
            if ($fight['flags'] & FIGHT_FLAG_NO_BREAK) break;
            $area = area_get($fight['area_id']);
            if (
                defined('DISABLE_FIGHT_ARTIFACT_BREAKS') && DISABLE_FIGHT_ARTIFACT_BREAKS
                || (isset($user_skills[$user_id]['NO_BREAK_ITEMS']) && $user_skills[$user_id]['NO_BREAK_ITEMS'])
                || $instance_root && ($instance_root['flags'] & INST_FLAG_NO_ARTIFACT_BREAK) ||  ($area['flags'] & AREA_FLAG_NESLOM) || ($fight['in_clan_pvp'])
            ) continue;
            $dur = array();
            $arts = $artifacts;
            $max_dur_artifacts = FIGHT_ARTIFACT_BREAKS_MAX_COUNT;
            for ($i=0; $i<$death_cnt; $i++) {
                $n = ceil(count($arts)*0.3); // какую часть вещей ломаем
                $n -= intval($premium_user['vars'][P_DISABLE_BREAK]['cnt']);
                if ($max_dur_artifacts) $n = min($n, $max_dur_artifacts);
                shuffle($arts);
                foreach (array_slice($arts,0,$n) as $art) {
                    $dur[$art['id']]++;
                }
            }
            $t = array();
            $t2 = array();
            foreach ($dur as $artifact_id=>$d) {
                $artifact = $artifacts[$artifact_id];
                $durability = max($artifact['durability']-$d,0);
                if (!$durability && ($artifact['durability_max'] <= 1)) { // полностью сломанная вещь
                    artifact_delete($artifact);
                    $t2[] = '<b>'.$artifact['title'].'</b>';
                    // лог-сервис -----------------------
                    logserv_log_operation(array(
                        'artifact' => $artifact,
                        'cnt' => -max($artifact['cnt'],1),
                        'comment' => translate('Полная поломка'),
                    ),$user_id);
                    // ----------------------------------
                } else {
                    $param = array(
                        'id' => $artifact['id'],
                        'durability' => $durability,
                    );
                    if (!$durability) $param['slot_id'] = '';
                    artifact_save($param);
                    $artifacts[$artifact_id]['durability'] = $durability;
                }
                // Вещь сломалась - нужно снять доспехи стиля, если они есть в этом слоте
                if (!$durability && $artifact['slot_id']) {
                    $param = array(
                        '_set' => " slot_id = '' ",
                        '_add' => sql_pholder(' AND user_id = ? AND slot_id = ? AND id <> ? AND flags & ? ', $artifact['user_id'], $artifact['slot_id'], $artifact['id'], ARTIFACT_FLAG_ARMOR_STYLE),
                    );
                    artifact_save($param);
                }
                $t[] = '<b>'.$artifact['title'].'</b> <b'.($durability/$artifact['durability_max'] < 0.05 ? ' class="red"' : '').'>('.($durability - $artifact['durability']).')</b>';
            }
            if (!($user['flags'] & USER_FLAG_NOT_FINISHED_REG)) {
                if ($t) chat_msg_send_system(sprintf(translate('Вещи потеряли прочность: %s.'),implode(', ',$t)),CHAT_CHF_USER,$user_id);
                if ($t2) chat_msg_send_system(sprintf(translate('Не подлежащие ремонту вещи удалены: %s.'),implode(', ',$t2)),CHAT_CHF_USER,$user_id);
            }
            if ($t) $broken_artifacts_exists = true;
        } while (0);
    }

    if (($user['flags'] & USER_FLAG_NOT_FINISHED_REG) && $user['tutorial_step'] == 2){
        $user_ids = array($user['id']);
        chat_msg_send_special(CODE_CALL_JSFUNC,CHAT_CHF_USER,$user_ids,array(
            'func' => 'tutorialNext('.$user['tutorial_step'].')',
        ));
    }

    // обработка эффектов

    if($user_id == DEV_ACCOUNT_ID){
        //logfile(DEBUG_FILE_LOG_DEV, print_r($fight_info['effData'], true));
    }

    $artifact_ids = get_hash($fight_info['effData'],'effId','effId');
    if ($artifact_ids) {
        $artifact_hash = make_hash(artifact_list(false,null,null,false,false,sql_pholder(" AND id IN (?@)",$artifact_ids)),'id');


        //TODO:Вырезаем функционал нелепый не предназначеный для питомцев...
        /*
        $ability_artifacts = array();
        $pet = pet_get($user['pet_id']);
        $pet_artikul = pet_artikul_get($pet['artikul_id']);
        $price_skill = array();

        $cnt_havka_pet = 0;
        if ($pet_artikul) {
            $pet_effects = pet_artikul_effect_list(false, sql_pholder(' AND pet_artikul_id=?', $pet_artikul['id']));
            $price_skill = $price_elements[$pet_artikul['quality']];
            $cnt_havka = artifact_get(array(
                'artikul_id' => $price_skill['artikul_id'],
                'user_id' => $user['id'],
            ));
            $cnt_havka_pet = ($cnt_havka['cnt'] ? $cnt_havka['cnt'] : 0);
            if ($pet_effects) {
                $ability_artifact_ids = get_hash($pet_effects, 'artifact_artikul_id', 'cnt');
                if ($ability_artifact_ids) {
                    $ability_artifacts = make_hash(artifact_artikul_list(array('id' => array_keys($ability_artifact_ids))));
                    $pet_spells = make_hash(pet_adv_effects_list(array('user_id' => $user['id'])), 'artikul_id');

                    foreach ($ability_artifacts as $k => $abil) {
                        if (!$pet_spells[$abil['id']]) unset($ability_artifacts[$k]);
                        $ability_artifacts[$k]['pet_spell'] = $pet_spells[$abil['id']];
                    }
                }
            }
        }*/

        foreach ($fight_info['effData'] as $eff_info) {

            if($eff_info['persId'] != $user['id']) continue;

            $artifact_id = $eff_info['effId'];

            if(!$artifact_id) continue;

            //if($eff_info['cnt'] <= 0) continue;

            if($eff_info['cnt'] > 800) continue;

            //TODO:Вырезаем функционал нелепый не предназначеный для питомцев...
            /*
            $pet_spell = $ability_artifacts[$artifact_id]['pet_spell'];
            if($pet_spell){ //Значит по эффектам питомца смотрим
                $cnt = $eff_info['cnt']; //Смотрим сколько осталось.
                $cnt_avail = $pet_spell['cnt']; //Смотрим сколько было.
                $cnt_used = $cnt_avail - $cnt; //Сколько потратили
                if($cnt_used){ //Если сколько нибудь потратили
                    if($pet_spell['flags'] & PET_SPELL_FLAG_ACTIVE){
                        $need_f = $price_skill['cnt'] * $cnt_used;
                        if($need_f <= $cnt_havka_pet){
                            $cnt_havka_pet -= $need_f;
                            artifact_remove($price_skill['artikul_id'], $need_f, $user['id']);
                        }else{
                            pet_adv_effects_save(array(
                                'id' => $pet_spell['id'],
                                '_set' => ' cnt = cnt - '.$cnt_used,
                            ));
                        }
                    }else{
                        pet_adv_effects_save(array(
                            'id' => $pet_spell['id'],
                            '_set' => ' cnt = cnt - '.$cnt_used,
                        ));
                    }
                }
            }*/

            //TODO: МОжет здесь баг связанный с петами

            $cnt = $eff_info['cnt'];
            $artifact = $artifact_hash[$artifact_id];

            if($artifact['user_id'] != $eff_info['persId']) continue;

            if($artifact['artikul_id'] == FS_ART_PASS_TURN) continue;

            // записываем время следующего использования для Знамени
            if ($artifact['flags'] & ARTIFACT_FLAG_GLOBAL_COOLDOWN && $artifact['slot_id'] == 'BANNER') {
                $param = array(
                    'id' => $artifact['id'],
                );
                $param['param2'] = $eff_info['cdrtime'];
                artifact_save($param);
                continue;
            }

            $died = $artifact['cnt'] - $eff_info['cnt'];
            if($user['flags'] & USER_FLAG_SLOTS_RESTORE) {
                $artifact_reserve = artifact_get(array('user_id' => $artifact['user_id'], 'slot_id' => '', 'artikul_id' => $artifact['artikul_id']));
                if ($artifact_reserve) {
                    $died_reserve = min($died, $artifact_reserve['cnt']);
                    $died -= $died_reserve;
                    if ($died_reserve >= $artifact_reserve['cnt']) { // весь отряд
                        artifact_delete($artifact_reserve['id']);
                    } else { // часть отряда

                        $param = array(
                            'id' => $artifact_reserve['id'],
                            'cnt' => $artifact_reserve['cnt'] - $died_reserve,
                        );
                        artifact_save($param);
                    }
                }
            }
            if ($died) {
                if ($died >= $artifact['cnt']) {
                    artifact_delete($artifact['id']);
                } else {
                    $param = array(
                        'id' => $artifact_id,
                        'cnt' => $artifact['cnt']-$died,
                    );
                    // записываем время следующего использования для предметов с глобальным кулдауном
                    if ($artifact['flags'] & ARTIFACT_FLAG_GLOBAL_COOLDOWN) {
                        $param['param2'] = $eff_info['cdrtime'];
                    }

                    artifact_save($param);

                }
            }
        }
    }

    // проверка слотов с эффектами на случай поломанных поясов
    if ($broken_artifacts_exists) {
        $slot_cnt_now = user_get_slot_num_max($user_id, 'EFFECT');
        $effect_list = user_get_artifact_list($user_id, 'EFFECT');
        foreach($effect_list as $effect) {
            if ($effect['slot_num'] > $slot_cnt_now) {
                $effect_in_backpack = artifact_get(array('artikul_id' => $effect['artikul_id'], 'user_id' => $user_id, 'slot_id' => ''));
                if (!$effect_in_backpack) {
                    // перекладываем
                    artifact_save(array(
                        'id' => $effect['id'],
                        'slot_id' => '',
                    ));
                } else {
                    // изменяем количество
                    artifact_change_cnt($effect_in_backpack['id'], $effect['cnt'], '', array(
                        'time_expire' => $effect['time_expire'],
                    ));
                    // удаляем старый
                    artifact_delete($effect);
                }
            }
        }
    }

    // выдача травм
    if ((!defined('DISABLE_FIGHT_INJURY') || !DISABLE_FIGHT_INJURY)
        && !($fight['flags'] & FIGHT_FLAG_NOINJURY)
        && (!$instance_root || !$instance_root['castle_id'])
        && (!$instance_root || !($instance_root['flags'] & INST_FLAG_NO_INJURY))
    ) {
        $pers_data = array();
        $fight_user_hash = make_hash($fight_user_list, 'user_id');
        $fight_bot_hash = make_hash($fight_user_list);
        #logfile(DEBUG_FILE_LOG_DEV, '$user_id = '.$user_id);
        #logfile(DEBUG_FILE_LOG_DEV, '$pers_id = '.$pers_id);

        #logfile(DEBUG_FILE_LOG_DEV, '$fight_user_hash = '.print_r($fight_user_hash,true));
        #logfile(DEBUG_FILE_LOG_DEV, '$fight_bot_hash = '.print_r($fight_bot_hash,true));
        #logfile(DEBUG_FILE_LOG_DEV, '$fight_log[\'death_kicks\'] = '.print_r($fight_log['death_kicks'],true));
        foreach ($fight_log['death_kicks'] as $item) {
            // persId - кто нанес смертельный удар
            // oppId - кому нанесли смертельный удар

            #logfile(DEBUG_FILE_LOG_DEV, '$item = '.print_r($item,true));

            if ($item['oppId'] != $user_id) { // обсчитываем только текущего пользователя
                continue;
            }

            #logfile(DEBUG_FILE_LOG_DEV, '$pers_info = '.print_r($pers_info,true));
            #logfile(DEBUG_FILE_LOG_DEV, '$user_skills = '.print_r($user_skills,true));
            if ($pers_info['injuryLower']) {
                if (!isset($user_skills[$user_id]['INJ_PROB_RESIST'])) $user_skills[$user_id]['INJ_PROB_RESIST'] = 0;
                $user_skills[$user_id]['INJ_PROB_RESIST'] += $pers_info['injuryLower'];
                #logfile(DEBUG_FILE_LOG_DEV, '$user_skills = '.print_r($user_skills,true));
            }

            if ($item['persId'] == 0) {
                //death kick нанесён сервером по таймауту, а пользователь даже
                //не подключался в бой, не получал пару для боя
                reset($fight_user_list);
                foreach($fight_user_list as $fight_pers) {
                    if ($fight_pers['team'] != $fight_user_hash[$item['oppId']]['team']) {
                        $item['persId'] = $fight_pers['user_id'];
                        break;
                    }
                }
            }

            $user_opp_id = $fight_user_hash[$item['oppId']]['user_id'];
            $user_pers_id = $fight_user_hash[$item['persId']]['user_id'];
            $bot_pers_id = $fight_bot_hash[$item['persId']]['bot_id'] ? $fight_bot_hash[$item['persId']]['bot_id'] : false;
            $bot_opp_id = $fight_bot_hash[$item['oppId']]['bot_id'] ? $fight_bot_hash[$item['oppId']]['bot_id'] : false;

            #logfile(DEBUG_FILE_LOG_DEV, '$fight_user_hash = '.print_r($fight_user_hash,true));

            //Тут нужно правильно настроить
            #logfile(DEBUG_FILE_LOG_DEV, '$user_opp_id = '.print_r($user_opp_id,true));
            #logfile(DEBUG_FILE_LOG_DEV, '$user_pers_id = '.print_r($user_pers_id,true));
            #logfile(DEBUG_FILE_LOG_DEV, '$bot_pers_id = '.print_r($bot_pers_id,true));
            #logfile(DEBUG_FILE_LOG_DEV, '$bot_opp_id = '.print_r($bot_opp_id,true));

            if ($bot_opp_id) continue;	// не травмируем ботов

            $t = array(
                'target_id' => $user_opp_id,
                'target_level' => $user_levels[$user_opp_id],
            );

            #logfile(DEBUG_FILE_LOG_DEV, '$t = '.print_r($t,true));

            if ($bot_pers_id) {
                $t['bot_id'] = $bot_pers_id;
                $t['pers_level'] = $bot_levels[$bot_pers_id];
            } else {
                // не травмируем вне инстансов пользователей с характеристикой ANTIINJ ударенных своей расой
                if (!$instance && $user_skills[$user_opp_id]['ANTIINJ']) {
                    $kinds = user_list(array('id' => array($user_opp_id,$user_pers_id)),'',false,'distinct kind');
                    if (count($kinds) == 1) continue;
                }
                $t['user_id'] = $user_pers_id;
                $t['pers_level'] = $user_levels[$user_pers_id];
            }

            #logfile(DEBUG_FILE_LOG_DEV, '$t = '.print_r($t,true));
            if ($item['kick'] == 2) $t['crit'] = true;	// критический удар
            $pers_data[] = $t;

            #logfile(DEBUG_FILE_LOG_DEV, '$pers_data = '.print_r($pers_data,true));
        }
        $injury_param = array();
        $injury_param['fight_flags'] = $fight['flags'];
        if ($instance && ($instance_root['bg_id'] || $instance_root['slaughter_id'] || $instance_root['clan_battle_id'])) {
            $injury_param['injury_in_instance'] = 1;
        }

        #logfile(DEBUG_FILE_LOG_DEV, '$injury_param = '.print_r($injury_param,true));

        $dmg_type = $item['dmgType'] ? $item['dmgType'] : FS_PDT_PHYSICAL;
        $out_injury = injury_calc($pers_data,$user_skills,$bot_skills,$dmg_type, $injury_param);

        #logfile(DEBUG_FILE_LOG_DEV, '$out_injury = '.print_r($out_injury,true));
        if ($out_injury) {
            $injuried_user_ids = array_keys($out_injury);

            fight_user_save(array(
                'fight_id' => $fight_id,
                '_set' => 'flags = flags | '.FIGHT_USER_FLAG_GOTINJURY,
                '_add' => sql_pholder(' AND fight_id=? AND user_id IN (?@)',$fight_id,$injuried_user_ids),
            ));
        }
    }

    // снова седлаем животное если ранее слазили.
    if ($fight_user['flags'] & FIGHT_USER_FLAG_UNMOUNTED) {
        // Выполняем действие - оседлать ездовое животное
        $user['fight_id'] = 0;
        $out_action = action_do("MOUNT", $user);

        if (!$out_action['error']) {
            chat_msg_send_special(CODE_CALL_JSFUNC,CHAT_CHF_USER,$user_id,array('func' => "updateSwf({'items_right':''});",));
        }
    }

    chat_msg_send_special(CODE_CALL_JSFUNC,CHAT_CHF_USER,$user_id,array('func' => "top.fightFinished();",));

    return true;
}


// Неудачное завершение боя
function fight_abort($fight_id) {
    global $fscl;
    global $kind_info;
    $answer = null;

    $fight_id = intval($fight_id);
    if (!$fight_id) return false;
    $fight = fight_get($fight_id);
    if (!$fight || ($fight['status'] != FIGHT_STATUS_RUNNING)) return false;
    $fscl->sendCommand(FS_SCCT_DELETE_FIGHT,$fight_id);
    $fscl->getAnswer($answer);
    $fight_user_list = fight_user_list($fight_id);
    $user_ids = array();
    $bot_ids = array();
    $alter_user_ids = array();
    foreach ($fight_user_list as $fight_user) {
        if ($fight_user['user_id']) {
            $alter_user_ids[$fight_user['user_id']] = $fight_user['user_id'];
            NODE_PUSH(null,$fight_user['user_id']);
            $artifact_list = artifact_list(false,$fight_user['user_id'],'TEMP_EFFECT',false,false,sql_pholder(' AND flags & ?#ARTIFACT_FLAG_DELAFTERFIGHT'));
            if ($artifact_list) {
                foreach($artifact_list as $artifact) {
                    artifact_delete($artifact);
                }
            }
            NODE_POP();
            $user_ids[] = $fight_user['user_id'];
        }
        if ($fight_user['bot_id']) $bot_ids[] = $fight_user['bot_id'];
    }
    chat_msg_send_system(sprintf(translate('Прерван бой "<b>%s</b>".'),htmlspecialchars($fight['title'])),CHAT_CHF_USER,$user_ids);
    user_bulk_update(false,'fight_id',0,$fight_id);
    bot_bulk_update(false,'fight_id',0,$fight_id);
    fight_delete($fight_id);

    $adv_chaot = array();
    if($fight['type'] == FIGHT_TYPE_CHAOTIC) $adv_chaot = adv_chaot_get($fight['adv_chaot_id']);

    $boss_planner = array();
    if($fight['type'] == FIGHT_TYPE_BOSS_PLANNER) $boss_planner = boss_scheduler_get($fight['boss_scheduler_id']);

    if($adv_chaot){
        if ($alter_user_ids) $user_hash = make_hash(user_list(array('id' => $alter_user_ids), '', false), 'id', false);
        if($adv_chaot['flags'] & ADV_CHAOT_FLAG_RETURN_LOC){
            foreach ($user_hash as $user){
                if($user['area_id_transfer']){
                    user_save(array(
                        'id' => $user['id'],
                        'area_id' => $user['area_id_transfer'],
                        'area_id_transfer' => 0,
                        'area_ftime' => 0,
                    ));
                }else{
                    if($adv_chaot['flags'] & ADV_CHAOT_FLAG_RETURN_HOME) {
                        user_save(array(
                            'id' => $user['id'],
                            'area_id' => $kind_info[$user['kind']]['city_area_id'],
                            'area_id_transfer' => 0,
                            'area_ftime' => 0,
                        ));
                    }
                }
            }
        } elseif ($adv_chaot['flags'] & ADV_CHAOT_FLAG_RETURN_HOME){
            foreach ($user_hash as $user){
                user_save(array(
                    'id' => $user['id'],
                    'area_id' => $kind_info[$user['kind']]['city_area_id'],
                    'area_id_transfer' => 0,
                    'area_ftime' => 0,
                ));
            }
        }
    }

    if($boss_planner){
        if ($alter_user_ids) $user_hash = make_hash(user_list(array('id' => $alter_user_ids), '', false), 'id', false);
        foreach ($user_hash as $user){
            user_save(array(
                'id' => $user['id'],
                'area_id' => BOSS_PLANNER_PREP_AREA_ID,
                'area_id_transfer' => 0,
                'area_ftime' => 0,
            ));
        }
    }

    try{
        if($fight['type'] == FIGHT_TYPE_ARENA){
            #Сохраняем данные арены.
            $arena_user_list = arena_user_list(false," AND fight_id = ".$fight_id." AND pending <= ".ARENA_STATUS_INFIGHT); //Загрузим всех игроков подавших заявки
            foreach($arena_user_list as $arena_user){
                $arena_user['pending'] = ARENA_STATUS_FINISHING;
                arena_user_save($arena_user);
            }
        }
    }catch (Exception $e){}
}

// Возвращает массив текущих боев на сервере
function fight_fs_get_fights($fight_id=0) {
    global $fscl;
    $answer = null;

    $fight_id = intval($fight_id);
    $startIdx = 0;
    $data = array();
    do {
        $fscl->sendCommand(FS_SCCT_GET_FIGHTS,$fight_id,$startIdx);
        if (($status = $fscl->getAnswer($answer)) != FS_SS_OK) {
            fight_addlog(sprintf("[fight_fs_get_fights]: FS STATUS=%d: Can't get fights! (fight_id=%d, startIdx=%d)",$status,$fight_id,$startIdx));
            return false;
        }
        $i = 2;
        $listSize = $answer[$i++]['val'];
        while ($i < count($answer)) {
            $fightId = $answer[$i]['val'];
            $data[$fightId] = array(
                'fightId' => $answer[$i++]['val'],
                'ctime' => $answer[$i++]['val'],
                'mtime' => $answer[$i++]['val'],
                'status' => $answer[$i++]['val'],
                'flags' => $answer[$i++]['val'],
                'persCnt' => $answer[$i++]['val'],
            );
            $startIdx++;
        }
    } while ($startIdx < $listSize);
    return $data;
}

// Возвращает состояние боя
function fight_fs_get_fightstate($fight_id, $pers_id=0) {
    global $fscl;

    $fight_id = intval($fight_id);
    if (!$fight_id) return false;
    $startIdx = 0;
    $data = array();
    do {
        $fscl->sendCommand(FS_SCCT_GET_FIGHTSTATE,$fight_id,$startIdx);
        if (($status = $fscl->getAnswer($answer)) != FS_SS_OK) {
            fight_addlog(sprintf("[fight_fs_get_fights]: FS STATUS=%d: Can't get fights! (fight_id=%d, startIdx=%d)",$status,$fight_id,$startIdx));
            return false;
        }
        $i = 2;
        $listSize = $answer[$i++]['val'];
        while ($i < count($answer)) {
            $persId = $answer[$i]['val'];
            $data[$persId] = array(
                'persId' => $answer[$i++]['val'],
                'persStatus' => $answer[$i++]['val'],
				'persLStatus' => $answer[$i++]['val'],
                'persFlags' => $answer[$i++]['val'],
                'teamNum' => $answer[$i++]['val'],
                'hp' => $answer[$i++]['val'],
                'hpMax' => $answer[$i++]['val'],
                'mp' => $answer[$i++]['val'],
                'mpMax' => $answer[$i++]['val'],
                'yarost' => $answer[$i++]['val'],
                'arrowsCnt' => $answer[$i++]['val'],
            );
            $startIdx++;
        }
    } while ($startIdx < $listSize);
    return $data;
}

// убежать с боя
function fight_fs_flee($fight_id, $fight_user_id) {

    global $fscl;
    $answer = null;

    $fight_id = intval($fight_id);
    if (!$fight_id) return false;

    $startIdx = 0;
    $persData = fight_fs_get_fightstate($fight_id,$fight_user_id);

    if (0 != intval($persData[$fight_user_id]['hp'])|!$persData) {
        return array('error' => sprintf('Henüz ölünmemiş'), 'result' => false);
    }

    $fightlog = array(
        'max_crit' => array(),
        'max_crit_self' => array(),
        'hits' => array(),
        'hits_self' => array(),
        'miss' => array(),
        'blocks' => array(),
        'death_kicks' => array(),
        'death_kick_cnt' => array(),
        'death_cnts' => array(),
        'death_times' => array(),
        'timeout' => array(),

    );
    global $fscl;
    $answer = null;
    $fight_id = intval($fight_id);
    if (!$fight_id) return false;
    $startIdx =1;

    do {
        $fscl->sendCommand(FS_SCCT_GET_FIGHTLOG,$fight_id,0,0);
        if (($status = $fscl->getAnswer($answer)) != FS_SS_OK) {
            //fight_addlog(sprintf("[fight_fs_get_deathlog]: FS STATUS=%d: Can't get fight log! (fight_id=%d)",$status,$fight_id));
            return false;
        }
        $i = 2;//sanki burada sıçıyor

        $listSize = $answer[$i++]['val'];
        while ($i < count($answer)) {
            $ctime = $answer[$i++]['val'];	// ctime
            $persId = $answer[$i++]['val'];	// persId
            $i++;	// persHp
            $i++;	// persHpMax
            $oppId = $answer[$i++]['val'];	// oppId
            $oppHp = $answer[$i++]['val'];	// oppHp
            $i++;	// oppHpMax
            $code = $answer[$i++]['val'];	// code
            $i1 = $answer[$i++]['val'];	// i1
            $i2 = $answer[$i++]['val'];	// i2
            $i3 = $answer[$i++]['val'];	// i3
            $s1 = $answer[$i++]['val'];	// s1
            $startIdx++;
            if ($code == FS_FLC_DEATH) {
                if ($fightlog['death_times'][$persId] < $ctime) {
                    $fightlog['death_kicks'][] = array(
                        'ctime' => $ctime,
                        'persId' => $i2,
                        'oppId' => $persId,
                        'kick' => 0,
                        'timeout' => $i1 > 0,
                    );
                    if ($i1 > 0) $fightlog['timeout'][$persId] = 1;
                    $fightlog['death_times'][$persId] = $ctime;
                    $fightlog['death_kick_cnt'][$i2]++;
                }
                $fightlog['death_cnts'][$persId]++;
            }

        }
    } while ($startIdx < $listSize);

    $startIdx = 0;
    $effData = array();
    do {
        $fscl->sendCommand(FS_SCCT_GET_LOG_AND_EFFECTS,$fight_id,2,$startIdx);
        if (($status = $fscl->getAnswer($answer)) != FS_SS_OK) {
            fight_addlog(sprintf("[fight_fs_get_fightinfo]: FS STATUS=%d: Can't get fight info! (fight_id=%d, mode=%d, startIdx=%d)",$status,$fight_id,2,$startIdx));
            return false;
        }
        $i = 2;
        $listSize = $answer[$i++]['val'];
        while ($i < count($answer)) {
            $effId = $answer[$i]['val'];
            $effData[$effId] = array(
                'effId' => $answer[$i++]['val'],
                'persId' => $answer[$i++]['val'],
                'cnt' => $answer[$i++]['val'],
                'cdrtime' => $answer[$i++]['val'],
                'slotNum' => $answer[$i++]['val'],
                'subSlot' => $answer[$i++]['val'],
            );
            $startIdx++;
        }
    } while ($startIdx < $listSize);

    $cmbData = array();
    $startIdx = 0;
    $cmbData = array();
    do {
        $fscl->sendCommand(FS_SCCT_GET_LOG_AND_EFFECTS,$fight_id,3,$startIdx);
        if (($status = $fscl->getAnswer($answer)) != FS_SS_OK) {
            fight_addlog(sprintf("[fight_fs_get_fightinfo]: FS STATUS=%d: Can't get fight info! (fight_id=%d, mode=%d, startIdx=%d)",$status,$fight_id,3,$startIdx));
            return false;
        }
        $i = 2;
        $listSize = $answer[$i++]['val'];
        while ($i < count($answer)) {
            $cmbId = $answer[$i]['val'];
            $cmbData[$cmbId] = array(
                'cmbId' => $answer[$i++]['val'],
                'persId' => $answer[$i++]['val'],
                'useCnt' => $answer[$i++]['val'],
            );
            $startIdx++;
        }
    } while ($startIdx < $listSize);

    return array(
        'fightlog' => $fightlog,
        'persData' => $persData,
        'effData' => $effData,
        'cmbData' => $cmbData,
    );
}

// Возвращает лог боя
// mode: 0 - текущий, 1 - законченный (fightinfo)
function fight_fs_get_fightlog($fight_id, $mode=0, $startIdx=0) {
    global $fscl;

    $fight_id = intval($fight_id);
    $mode = intval($mode);
    $startIdx = intval($startIdx);
    if (!$fight_id) return false;
    $data = array();
    do {
        $fscl->sendCommand(FS_SCCT_GET_FIGHTLOG,$fight_id,$mode,$startIdx);
        if (($status = $fscl->getAnswer($answer)) != FS_SS_OK) {
            fight_addlog(sprintf("[fight_fs_get_fightlog]: FS STATUS=%d: Can't get fight log! (fight_id=%d, mode=%d, startIdx=%d)",$status,$fight_id,$mode,$startIdx));
            return false;
        }
        $i = 2;
        $listSize = $answer[$i++]['val'];
        while ($i < count($answer)) {
            $data[] = array(
                'ctime' => $answer[$i++]['val'],
                'persId' => $answer[$i++]['val'],
                'persHp' => $answer[$i++]['val'],
                'persHpMax' => $answer[$i++]['val'],
                'oppId' => $answer[$i++]['val'],
                'oppHp' => $answer[$i++]['val'],
                'oppHpMax' => $answer[$i++]['val'],
                'code' => $answer[$i++]['val'],
                'i1' => $answer[$i++]['val'],
                'i2' => $answer[$i++]['val'],
                'i3' => $answer[$i++]['val'],
                's1' => $answer[$i++]['val'],
            );
            $startIdx++;
        }
    } while ($startIdx < $listSize);
    return $data;
}

// Возвращает сводный лог
function fight_fs_get_fightlog_stat_old($fight_id) {
    global $fscl;

    $fight_id = intval($fight_id);
    if (!$fight_id) return false;
    $startIdx = 0;
    $death_kicks = array();
    $death_cnts = array();
    $death_times = array();
    $hits = array();
    $hits_self = array();
    $max_crit = array();
    $max_crit_self = array();
    do {
        $fscl->sendCommand(FS_SCCT_GET_FIGHTLOG,$fight_id,1,$startIdx);
        if (($status = $fscl->getAnswer($answer)) != FS_SS_OK) {
            fight_addlog(sprintf("[fight_fs_get_deathlog]: FS STATUS=%d: Can't get fight log! (fight_id=%d)",$status,$fight_id));
            return false;
        }
        $i = 2;
        $listSize = $answer[$i++]['val'];
        while ($i < count($answer)) {
            $ctime = $answer[$i++]['val'];	// ctime
            $persId = $answer[$i++]['val'];	// persId
            $i++;	// persHp
            $i++;	// persHpMax
            $oppId = $answer[$i++]['val'];	// oppId
            $oppHp = $answer[$i++]['val'];	// oppHp
            $i++;	// oppHpMax
            $code = $answer[$i++]['val'];	// code
            $i1 = $answer[$i++]['val'];	// i1
            $i2 = $answer[$i++]['val'];	// i2
            $i3 = $answer[$i++]['val'];	// i2
            $i++;	// s1
            $startIdx++;

//			if(($code == FS_FLC_KICK) && $oppId && ($i1 == 1 || $i1 == 4)){
//                $hits[$oppId][$i1]++;
//                $hits_self[$persId][$i1]++;
//			}
//            if(($code == FS_FLC_KICK) && $persId && ($i1 == 2)){
//                if($i1 == 2 && $max_crit[$persId] > $i3){ //Добавляем максимальный крит персу.
//                    $max_crit[$persId] = $i3;
//				}
//                $hits[$persId][$i1]++;
//                $hits_self[$oppId][$i1]++;
//            }

            if (($code == FS_FLC_KICK) && $oppId && ($oppHp == 0)) {
                $death_kicks[] = array(
                    'ctime' => $ctime,
                    'persId' => $persId,
                    'oppId' => $oppId,
                    'kick' => $i1,
                );
                $death_times[$oppId] = $ctime;
            } elseif ($code == FS_FLC_DEATH) {
                if (($i2 > 0) && ($death_times[$persId] < $ctime)) {
                    $death_kicks[] = array(
                        'ctime' => $ctime,
                        'persId' => $i2,
                        'oppId' => $persId,
                        'kick' => 0,
                    );
                    $death_times[$persId] = $ctime;
                }
                $death_cnts[$persId]++;
            }
        }
    } while ($startIdx < $listSize);
    return array(
        'death_kicks' => $death_kicks,
        'death_cnts' => $death_cnts,
        'death_times' => $death_times,
        'hits' => $hits,
        'hits_self' => $hits_self,
    );
}

// Возвращает сводный лог
function fight_fs_get_fightlog_stat($fight_id) {
    global $fscl;
    $answer = null;

    $fight_id = intval($fight_id);
    if (!$fight_id) return false;
    $startIdx = 0;
    $death_kicks = array();
    $death_cnts = array();
    $death_times = array();
    $death_kick_cnt = array();
    $hits = array();
    $hits_self = array();
    $miss = array();
    $blocks = array();
    $max_crit = array();
    $max_crit_self = array();
    $timeout = array();
    do {
        $fscl->sendCommand(FS_SCCT_GET_FIGHTLOG,$fight_id,1,$startIdx);
        if (($status = $fscl->getAnswer($answer)) != FS_SS_OK) {
            fight_addlog(sprintf("[fight_fs_get_deathlog]: FS STATUS=%d: Can't get fight log! (fight_id=%d)",$status,$fight_id));
            return false;
        }
        $i = 2;
        $listSize = $answer[$i++]['val'];
        while ($i < count($answer)) {
            $ctime = $answer[$i++]['val'];	// ctime
            $persId = $answer[$i++]['val'];	// persId
            $i++;	// persHp
            $i++;	// persHpMax
            $oppId = $answer[$i++]['val'];	// oppId
            $oppHp = $answer[$i++]['val'];	// oppHp
            $i++;	// oppHpMax
            $code = $answer[$i++]['val'];	// code
            $i1 = $answer[$i++]['val'];	// i1
            $i2 = $answer[$i++]['val'];	// i2
            $i3 = $answer[$i++]['val'];	// i3
            $s1 = $answer[$i++]['val'];	// s1
            $startIdx++;
            if (($code == FS_FLC_KICK) && $oppId) {
                if ($oppHp == 0) {
                    $death_kicks[] = array(
                        'ctime' => $ctime,
                        'persId' => $persId,
                        'oppId' => $oppId,
                        'kick' => $i1,
                        'dmgType' => FS_PDT_PHYSICAL,
                    );
                    $death_kick_cnt[$persId]++;
                    $death_times[$oppId] = $ctime;
                }
                // Если персонаж увернулся или заблокировал - статистику считаем по оппоненту
                if (($i1 == 1) || ($i1 == 4)) {
                    $hits[$oppId][$i1]++;
                    if ($i1 == 1) $miss[$persId]++;
                    if ($i1 == 4) $blocks[$persId]++;
                } else {
                    //Новые фишки не считаем
                    if(!($i1 == 5 || $i1 == 6 || $i1 == 7)){
                        $hits[$persId][$i1]++;
                    }
                }
                $hits_self[$persId]++;
                // Максимальный крит
                if ($i1 == 2) $max_crit[$persId] = max($i3, $max_crit[$persId]);

                // Максимальный крит по мне
                if ($i1 == 2) $max_crit_self[$oppId] = max($i3, $max_crit_self[$oppId]);
            } elseif ($code == FS_FLC_DEATH) {
                if ($death_times[$persId] < $ctime) {
                    $death_kicks[] = array(
                        'ctime' => $ctime,
                        'persId' => $i2,
                        'oppId' => $persId,
                        'kick' => intval($s1),
                        'timeout' => $i1 > 0,
                        'dmgType' => $i3,
                    );
                    if ($i1 > 0) $timeout[$persId] = 1;
                    $death_times[$persId] = $ctime;
                    $death_kick_cnt[$i2]++;
                }
                $death_cnts[$persId]++;
            }
        }
    } while ($startIdx < $listSize);
    return array(
        'max_crit' => $max_crit,
        'max_crit_self' => $max_crit_self,
        'hits' => $hits,
        'hits_self' => $hits_self,
        'miss' => $miss,
        'blocks' => $blocks,
        'death_kicks' => $death_kicks,
        'death_kick_cnt' => $death_kick_cnt,
        'death_cnts' => $death_cnts,
        'death_times' => $death_times,
        'timeout' => $timeout,
    );
}

// Возвращает инфо боя
function fight_fs_get_fightinfo($fight_id, $user_id = 0) {
    global $fscl;

    $fight_id = intval($fight_id);
    if (!$fight_id) return false;
    // overall
    $fscl->sendCommand(FS_SCCT_GET_FIGHTINFO,$fight_id,0,0);
    if (($status = $fscl->getAnswer($answer)) != FS_SS_OK) {
        fight_addlog(sprintf("[fight_fs_get_fightinfo]: FS STATUS=%d: Can't get fight info! (fight_id=%d, mode=%d, startIdx=%d)",$status,$fight_id,0,0));
        return false;
    }
    $i = 2;
    $data = array(
        'ctime' => $answer[$i++]['val'],
        'rtime' => $answer[$i++]['val'],
        'winnerTeam' => $answer[$i++]['val'],
    );
    // persData
    $startIdx = $user_id;
    $persData = array();
    do {
        $fscl->sendCommand(FS_SCCT_GET_FIGHTINFO,$fight_id,1,$startIdx);
        if (($status = $fscl->getAnswer($answer)) != FS_SS_OK) {
            fight_addlog(sprintf("[fight_fs_get_fightinfo]: FS STATUS=%d: Can't get fight info! (fight_id=%d, mode=%d, startIdx=%d)",$status,$fight_id,1,$startIdx));
            return false;
        }
        $i = 2;
        $listSize = $answer[$i++]['val'];
        while ($i < count($answer)) {
            $persId = $answer[$i]['val'];
            $persData[$persId] = array(
                'persId' => $answer[$i++]['val'],
                'persStatus' => $answer[$i++]['val'],
                'persFlags' => $answer[$i++]['val'],
                'teamNum' => $answer[$i++]['val'],
                'dmg' => $answer[$i++]['val'],
                'heal' => $answer[$i++]['val'],
                'exp' => $answer[$i++]['val'],
                'honor' => $answer[$i++]['val'],
                'hp' => $answer[$i++]['val'],
                'mp' => $answer[$i++]['val'],
                'killCnt' => $answer[$i++]['val'],
                'enemyKillCnt' => $answer[$i++]['val'],
                'arrowsCnt' => $answer[$i++]['val'], //Для луков
            );
            $startIdx++;
        }
    } while ($startIdx < $listSize);
    // effData
    $startIdx = 0;
    $effData = array();
    do {
        $fscl->sendCommand(FS_SCCT_GET_FIGHTINFO,$fight_id,2,$startIdx);
        if (($status = $fscl->getAnswer($answer)) != FS_SS_OK) {
            fight_addlog(sprintf("[fight_fs_get_fightinfo]: FS STATUS=%d: Can't get fight info! (fight_id=%d, mode=%d, startIdx=%d)",$status,$fight_id,2,$startIdx));
            return false;
        }
        $i = 2;
        $listSize = $answer[$i++]['val'];
        while ($i < count($answer)) {
            $effId = $answer[$i]['val'];
            $effData[$effId] = array(
                'effId' => $answer[$i++]['val'],
                'persId' => $answer[$i++]['val'],
                'cnt' => $answer[$i++]['val'],
                'cdrtime' => $answer[$i++]['val'],
                'slotNum' => $answer[$i++]['val'],
                'subSlot' => $answer[$i++]['val'],
            );
            $startIdx++;
        }
    } while ($startIdx < $listSize);
    // cmbData
    $startIdx = 0;
    $cmbData = array();
    do {
        $fscl->sendCommand(FS_SCCT_GET_FIGHTINFO,$fight_id,3,$startIdx);
        if (($status = $fscl->getAnswer($answer)) != FS_SS_OK) {
            fight_addlog(sprintf("[fight_fs_get_fightinfo]: FS STATUS=%d: Can't get fight info! (fight_id=%d, mode=%d, startIdx=%d)",$status,$fight_id,3,$startIdx));
            return false;
        }
        //fight_fs_get_fightinfo
        $i = 2;
        $listSize = $answer[$i++]['val'];
        while ($i < count($answer)) {
            $cmbId = $answer[$i]['val'];
            $cmbData[$cmbId] = array(
                'cmbId' => $answer[$i++]['val'],
                'persId' => $answer[$i++]['val'],
                'useCnt' => $answer[$i++]['val'],
                /*'cdrtime' => $answer[$i++]['val'],
                'slotNum' => $answer[$i++]['val'],
                'subSlot' => $answer[$i++]['val'],*/
            );
            $startIdx++;
        }
    } while ($startIdx < $listSize);
    $data['persData'] = $persData;
    $data['effData'] = $effData;
    $data['cmbData'] = $cmbData;
    return $data;
}

// Определение текущего уровня боя
function fight_level_get(&$fight) {
    global $fight_levels;

    if ($fight['instance_id']) return $fight['level'];
    // Бой за Крепость не может быть великой битвой
    if ($fight['flags'] & FIGHT_FLAG_STRONGHOLD) {
        return 0;
    }
    // Если висит флаг что нельзя начать великую битву
    /*if ($fight['flags'] & FIGHT_FLAG_NO_GREAT) {
        return 0;
    }*/
    // В случае арены великие битвы запрещены
    if (!$fight['level']) {
        $area = area_get($fight['area_id']);
        if ($area['flags'] & AREA_FLAG_DIE_NO_GHOST) return 0;
    }

    // Определение количества участников в самой маленькой команде
    $min_team_cnt = fight_user_list($fight['id'],false,' AND user_id>0 GROUP BY team ORDER by cnt','team, count(*) cnt');
    if (!$min_team_cnt || (count($min_team_cnt) < 2)) return $fight['level'];
    $min_team_cnt = $min_team_cnt[0]['cnt'];
    $level = 0;
    // Определение уровня битвы
    foreach ($fight_levels as $cur_level => $fight_level) {
        if ($fight_level['cnt'] <= $min_team_cnt) $level = $cur_level;
        else break;
    }
    // Отправляем сообщение в чат на локацию, если началась великая битва
    if (!$fight['level'] && $level) {
        chat_msg_send_special(CODE_CALL_JSFUNC,CHAT_CHF_AREA,array($fight['area_id']),array('func' => "updateSwf({'area_fight':''})"));
        _global_event_trigger(GLOBAL_EVENT_TYPE_GREAT_BATTLE, 1);

        do{
            if(!$fight['id'] || !$fight['area_id']) break;
            $area_event = area_event_current_get_without();
            if($area_event['type_id'] == AREA_EVENT_TYPE_PVP_LC && $area_event['area_ids']){
                $area_ids = explode(',', $area_event['area_ids']);
                if(!in_array($fight['area_id'], $area_ids)) break;

                fight_save(array(
                    'id' => $fight['id'],
                    'area_event_id' => $area_event['id'],
                ));
            }
        }while(0);

        fight_save(array( //Нужно узнать время становления великой битвы!
            'id' => $fight['id'],
            'level_time' => time_current(),
        ));
    }
    return $level;
}

// Определение весов команд
function fight_team_weight($fight_id, $fight_users = array()) {
    if (!$fight_id) return false;

    if (!is_array($fight_users) || count($fight_users) == 0) {
        $fight_users = fight_user_list($fight_id,false,'AND user_id > 0');
    }
    foreach ($fight_users as $fuser) {
        if (!$weight_hash[$fuser['team']]['kind']) $weight_hash[$fuser['team']]['kind'] = $fuser['user_kind'];
        if (!$weight_hash[$fuser['team']]['weight']) $weight_hash[$fuser['team']]['weight'] = 0;
        $weight_hash[$fuser['team']]['weight'] += fight_user_weight($fuser['user_level']);
        $weight_hash[$fuser['team']]['level_max'] = max($weight_hash[$fuser['team']]['level_max'], $fuser['user_level']);
    }
    return $weight_hash;
}

// Определение различных весовых значений взависимости от уровня
// type = 0 - Определение веса игрока в бою в зависимости от его уровня
// type = 1 - Определение максимального перевеса в зависимости от максимального уровня участника
// type = 2 - Определение максимально допустимого веса команды в зависимости от максимального уровня участника
function fight_user_weight($level, $type=0) {
    $level = intval($level);
    switch($type) {
        default:
        case 0:
            $weights = array(1 => 1,1,2,3,4,6,9,13,18,27,53,64,78,94,114,140,169,205,249,302);
            break;
        case 1:
            $weights = array(1 => 3,3,4,5,6,9,13,18,25,35,69,83,94,113,137,161,191,227,269,319);
            break;
        case 2:
            $weights = array(1 => 70,80,107,157,251,382,592,897,1258,1930,2944,4827,7937,12218,18350,26503,36916,49959,65944,85183);
            break;
    }
    if ($level <= 1) return $weights[1];
    else if($level >= count($weights)) return $weights[count($weights)];
    else return $weights[$level];
}

function fight_lua_params($params, $separator ='; ') {
    $lua_params = array();
    foreach ($params as $param => $value) {
        $lua_params[] = $param.'='.$value;
    }
    return implode($separator, $lua_params);
}

function fight_lua_user_params($params, $pers_id) {
    $lua_params = fight_lua_params($params, ', ');
    return 'objects['.$pers_id.']={'.$lua_params.'}';
}

function fight_conf() {
    global $session_user;
    $cnt = 0;
    $cnt += intval(fight_count($session_user['area_id'],null,FIGHT_STATUS_RUNNING,' AND level > 0'));
    return sprintf('<fight in_process="%d"/>',$cnt);
}

function fight_conf_count() {
    global $session_user;
    $cnt = 0;
    $cnt += intval(fight_count($session_user['area_id'],null,FIGHT_STATUS_RUNNING,' AND level > 0'));
    return $cnt;
}

function fight_flee($fight_id, $user_id) {
    $fight_id = intval($fight_id);
    $fight = $fight_id ? fight_get($fight_id) : false;

    if (!$fight || ($fight['status'] != FIGHT_STATUS_RUNNING)) {
        return array('error' => 'Бой не активен!', 'result' => false);
    }

    /*
    if($fight['type'] == FIGHT_TYPE_CHAOTIC){
        return array('error' => 'Нельзя выйти из хаотичной битвы!', 'result' => false);
    }

    if($fight['flags'] & FIGHT_FLAG_NORESTRICT) return array('error' => 'Из этой битвы выйти невозможно!', 'result' => false);
    */

    $user = user_get($user_id);
    if (!$user || $user['fight_id'] != $fight_id) {
        return array('error' => 'Вы не находитесь в данной битве!', 'result' => false);
    }

    if ($user['instance_id']) {
        return array('error' => 'Вы не можете выйти из боя!', 'result' => false);
    }

    $fight_user_list = fight_user_list($fight_id);

    $bot_skills = array();
    foreach($fight_user_list as $fight_user) {
        if ($fight_user['bot_id']) {
            $bot_id = $fight_user['bot_id'];
            $skill_list = skill_object_list(OBJECT_CLASS_BOT,$bot_id);
            $bot_skills[$bot_id] = get_hash($skill_list,'skill_id','value');
        }
    }

    $fight_user_hash = make_hash($fight_user_list, 'user_id');

    //Если в бою есть бот c галкой "запретить выход из боя", то из боя выходить нельзя
    $bot_artikul_ids = array_keys(make_hash($fight_user_list, 'bot_artikul_id'));
    if ($bot_artikul_ids) {
        $check = bot_artikul_list(false, sql_pholder(' and id in (?@) and flags & '. BOT_FLAG_DENY_FLEE, $bot_artikul_ids));
        if ($check) {
            return array('error' => 'Какой-то монстр не дает вам сбежать из боя!', 'result' => false);
        }
    }

    $fight_user = $fight_user_hash[$user['id']];
    if (!$fight_user || ($fight_user['flag'] & FIGHT_USER_FLAG_FLEE)) {
        return array('error' => 'Из этой битвы нельзя выйти!', 'result' => false);
    }

    $area = area_get($user['area_id']);
    if (!$area || ($area['flags'] & AREA_FLAG_ENABLE_FIGHT_LEAVE)) {
        return array('error' => 'На этой локации нельзя выйти из битвы!', 'result' => false);
    }

    NODE_PUSH(null, $user['id']);
    $user_skill_info = user_get_skill_info($user['id']);
    NODE_POP();
    $user_skills = array();
    $fight_user_skills_list = fight_user_skill_list(array('fight_id' => $fight_id));
    foreach($fight_user_skills_list as $fight_user_skills) {
        $user_skills[$fight_user_skills['user_id']] = $fight_user_skills['data'] ? unserialize($fight_user_skills['data']) : array();
    }

    if(!fight_lock($fight_id)) {
        return array('error' => sprintf('Подождите немного!', $fsinfo), 'result' => false);
    }

    $fsinfo = fight_fs_flee($fight_id, $fight_user['user_id']);
    if (!$fsinfo) {
        fight_unlock($fight_id);
        return array('error' => sprintf('Плохой ответ от боевого сервера!', $fsinfo), 'result' => false);
    }

    // Пока не сделано http://task.corp.dwarmail.lan/task/edit/id59599/ фс может вернуть плохой ответ с хорошим статусом
    if (!intval($fsinfo['persData'])) {
        fight_unlock($fight_id);
        return array('error' => sprintf('По всей видимости вы еще живы!',$fsinfo), 'result' => false);
    }
    if (!intval($fsinfo['effData'])) {
        fight_unlock($fight_id);
        return array('error' => sprintf('!!!',$fsinfo), 'result' => false);
    }
    if (0 > intval($fsinfo['persData']['persId'][$fight_user['user_id']['hp']])) {
        fight_unlock($fight_id);
        return array('error' => sprintf('Вы еще живы?'), 'result' => false);
    }

    //$fsinfo['persData'][$fight_user['id']] = $fsinfo['persData'][$fight_user['id']];

    $pet = false;
    if ($fight_user['pet_id']) {
        $pet = pet_get($fight_user['pet_id']);
    }
    $fsinfo['pet_satiation'] = $pet && $pet['satiation'] > 0 ? 1 : 0;

    $user_lang = $user['language'] ? $user['language'] : false;
    if ($user_lang) translate_default_language_push($user_lang);
    NODE_PUSH(null, $user['id']);
    $res = fight_finish_for_user($fight, $fsinfo, $fsinfo['fightlog'], $user, $fight_user_list, $pet, $user_skills, $bot_skills);
    NODE_POP();
    if ($user_lang) translate_default_language_pop();
    if (!$res) {
        fight_unlock($fight_id);
        return array('error' => 'Мистика!', 'result' => false);
    }

    fight_user_save(array(
        'id' => $fight_user['id'],
        '_set' => 'flags = flags | '.FIGHT_USER_FLAG_FLEE,
    ));

    user_save(array(
        'id' => $user['id'],
        'fight_id' => '0',
    ));

    fight_user_flee_save(array(
        'fight_id' => $fight_id,
        'user_id'  => $user['id'],
        'data'     => serialize($fsinfo),
    ));

    fight_unlock($fight_id);
    return array('error' => '', 'result' => true);
}

// убежать с боя
function fight_flee2($fight_id, $user_id, $checker = false) {
    $fight_id = intval($fight_id);
    $fight = $fight_id ? fight_get($fight_id) : false;

    if (!$fight || ($fight['status'] != FIGHT_STATUS_RUNNING)) {
        return array('error' => 'Битва не активна.', 'result' => false);
    }

    if($fight['flags'] & FIGHT_FLAG_NORESTRICT) return array('error' => 'Из этой битвы нельзя выходить', 'result' => false);

    $user = user_get($user_id);
    if (!$user || $user['fight_id'] != $fight_id) {
        return array('error' => 'Вы не находитесь в данном бою', 'result' => false);
    }

    $poterya_dushi = artifact_get(1926, ' AND user_id = '.$user['id'], ' AND slot_id != \'\'');

    if($poterya_dushi){
        return array('error' => 'Вы не моежете выйти из боя с потерей души!', 'result' => false);
    }

    if($user['instance_id']){
        return array('error' => 'Вы находитесь в инстансе. Выход из боя запрещен.', 'result' => false);
    }

    $fight_user_list = fight_user_list($fight_id);

    $bot_skills = array();
    foreach($fight_user_list as $fight_user) {
        if ($fight_user['bot_id']) {
            $bot_id = $fight_user['bot_id'];
            $skill_list = skill_object_list(OBJECT_CLASS_BOT,$bot_id);
            $bot_skills[$bot_id] = get_hash($skill_list,'skill_id','value');
        }
    }

    $fight_user_hash = make_hash($fight_user_list, 'user_id');

    //Если в бою есть бот c галкой "запретить выход из боя", то из боя выходить нельзя
    $bot_artikul_ids = array_keys(make_hash($fight_user_list, 'bot_artikul_id'));
    if ($bot_artikul_ids) {
        $check = bot_artikul_list(false, sql_pholder(' and id in (?@) and flags & '. BOT_FLAG_DENY_FLEE, $bot_artikul_ids));
        if ($check) {
            return array('error' => 'В бою присутствует очень агрресивный монстр, не позволяющий вам сбежать.', 'result' => false);
        }
    }

    $fight_user = $fight_user_hash[$user['id']];
    if (!$fight_user || ($fight_user['flag'] & FIGHT_USER_FLAG_FLEE)) {
        return array('error' => 'Из этой битвы нельзя выйти', 'result' => false);
    }

    $area = area_get($user['area_id']);
    if (!$area || ($area['flags'] & AREA_FLAG_ENABLE_FIGHT_LEAVE)) {
        return array('error' => 'В этой локации нельзя сбежать из битвы', 'result' => false);
    }

    NODE_PUSH(null, $user['id']);
    $user_skill_info = user_get_skill_info($user['id']);
    NODE_POP();
    $user_skills = array();
    $fight_user_skills_list = fight_user_skill_list(array('fight_id' => $fight_id));
    foreach($fight_user_skills_list as $fight_user_skills) {
        $user_skills[$fight_user_skills['user_id']] = $fight_user_skills['data'] ? unserialize($fight_user_skills['data']) : array();
    }

    if($user['fight_id'] != $fight_id){
        return array('error' => 'Вы не находитесь в данном бою!', 'result' => false);
    }

    if(!$checker && !$check){
        //Не завершать бой а просто освободить персонажа.
        $fight_state = fight_fs_get_fightstate($user['fight_id']);
        if (!$fight_state) {
            return array('error' => sprintf('Error from FS (returned %s)', $fight_state), 'result' => false);
        }

        $dead = intval($fight_state[$user['id']]['persStatus'] == FS_PS_DEAD);
        if($dead != 1) {
            return array('error' => 'Вы еще живой!', 'result' => false);
        }

        user_save(array('id' => $user['id'], 'fight_id' => 0));

        return array('error' => '', 'result' => true);
    }

    return array('error' => '', 'result' => true);

    // Пока не сделано http://task.corp.mail.ru/task/edit/id59599/ фс может вернуть плохой ответ с хорошим статусом
    if (!intval($fsinfo['persData'][$user['id']]['persId'])) {
        return array('error' => sprintf('Bad response from FS'), 'result' => false);
    }

    $pet = false;
    if ($fight_user['pet_id']) {
        $pet = pet_get($fight_user['pet_id']);
    }
    $fsinfo['pet_satiation'] = $pet && $pet['satiation'] > 0 ? 1 : 0;

    $user_lang = $user['language'] ? $user['language'] : false;
    if ($user_lang) translate_default_language_push($user_lang);
    NODE_PUSH(null, $user['id']);
    $res = fight_finish_for_user($fight, $fsinfo, $fsinfo['fightlog'], $user, $fight_user_list, $pet, $user_skills, $bot_skills);
    NODE_POP();
    if ($user_lang) translate_default_language_pop();
    if (!$res) return array('error' => 'Mystic', 'result' => false);

    fight_user_save(array(
        'id' => $fight_user['id'],
        '_set' => 'flags = flags | '.FIGHT_USER_FLAG_FLEE,
    ));

    user_save(array(
        'id' => $user['id'],
        'fight_id' => '0',
    ));

    fight_user_flee_save(array(
        'fight_id' => $fight_id,
        'user_id'  => $user['id'],
        'data'     => serialize($fsinfo),
    ));

    return array('error' => '', 'result' => true);
}

function fight_stat_save($param) {
    global $db_diff;
    return common_save($db_diff,TABLE_FIGHT_STATS,$param,FIELD_FIGHT_STATS);
}

function fight_stat_list($ref=false,$add='') {
    global $db_diff;
    return common_list($db_diff,TABLE_FIGHT_STATS,$ref,$add);
}

function fight_stat_delete($ref=false,$add='') {
    global $db_diff;
    return common_delete($db_diff,TABLE_FIGHT_STATS,$ref, $add);
}

function fight_calc_cost($user_id, $fight_user_id, $fight_info) {
    if (!$user_id || !$fight_user_id || !$fight_info) return false;

    $fight_cost = 0;

    $artifact_ids = array();
    foreach ($fight_info['effData'] as $eff_info) {
        if ($eff_info['persId'] == $fight_user_id) $artifact_ids[] = $eff_info['effId'];
    }

    if ($artifact_ids) {
        //если в бою были использованы банки, то узнаём сколько их было изначально, заодно вытащим временные эффекты
        $artifact_hash = make_hash(artifact_list(false, $user_id, null, false, false, sql_pholder(" AND (slot_id='TEMP_EFFECT' OR id IN (?@))", $artifact_ids)), 'id');
    } else {
        //в противном случае вытащим только временные эффекты
        $artifact_hash = make_hash(artifact_list(false, $user_id, "TEMP_EFFECT", false, false), 'id');
    }

    if ($artifact_hash) {
        $artikuls = array();
        $spent = $fight_info['effData'];
        foreach($artifact_hash as $artifact) {
            $artikuls[] = $artifact["artikul_id"];
            if(is_array($spent[$artifact["id"]])){
                $spent[$artifact["id"]]["cnt"] = $artifact["cnt"] - $spent[$artifact["id"]]["cnt"];
            }
        }

        // узнаём цены на использованные артифакты и временные эффекты
        $artikuls_hash = make_hash(artifact_artikul_list(false, sql_pholder(" AND id IN (?@)", $artikuls), "id, price, price_type, param1"), 'id');
        //считаем стоимость использованных в бою
        foreach ($spent as $item) {
            $artifact_id = $item['effId'];
            $artifact = $artifact_hash[$artifact_id];
            if (!$artifact) continue;

            if ($artikuls_hash[$artifact["artikul_id"]]["price_type"] == MONEY_TYPE_GAME) {
                $fight_cost += $item['cnt'] * $artikuls_hash[$artifact["artikul_id"]]['price'];
            } elseif ($artifact["price_type"] == MONEY_TYPE_SILVER) {
                $fight_cost += $item['cnt'] * $artikuls_hash[$artifact["artikul_id"]]['price'] * 50;
            } elseif ($artifact["price_type"] == MONEY_TYPE_GOLD) {
                $fight_cost += $item['cnt'] * $artikuls_hash[$artifact["artikul_id"]]['price'] * 100;
            }
        }

        //считаем стоимость временных
        foreach ($artifact_hash as $artifact) {
            if (($artifact["slot_id"] == 'TEMP_EFFECT') && ($artifact["time_expire"] > $fight_info["ctime"])) {
                if ($artikuls_hash[$artifact["artikul_id"]]['param1'] > 0) {
                    $fight_cost += ($artikuls_hash[$artifact["artikul_id"]]['price'] / $artikuls_hash[$artifact["artikul_id"]]['param1']) * $fight_info["rtime"];
                }
            }
        }
    }

    return $fight_cost;
}

function fight_renta_join($my = array(), $user = array()){
    global $rent_pers,$object_table_info;

    $out = array();
    if (!in_array($my['object_class'],array(OBJECT_CLASS_USER,OBJECT_CLASS_BOT))){
        $out['error'] = 'Неправильный объект!';
        return $out;
    }
    if (!$my['fight_id']){
        $out['error'] = 'Вы не находитесь в бою!';
        return $out;
    }

    if(!$user || !$rent_pers){
        $out['error'] = 'Не получилось инициализироать помощника!';
        return $out;
    }
    $user_level = $user['level'];
    $RP = false;
    foreach ($rent_pers as $k=>$v){
        if(!in_array($user_level, $v['levels'])) continue;
        $RP = $v;
    }
    if(!$RP){
        $out['error'] = 'Инициализация персонажа прервана, парметры заданы неверно!';
        return $out;
    }

    $artikul_bot = bot_artikul_get(RENTA_BOT_ID);
    if (!$artikul_bot){
        $out['error'] = 'Артикул бота не найден!';
        return $out;
    }

    //Создадим бота с указанем ID перса и RP для указания характеристик и абилок!
    $RP_bot = get_params($artikul_bot,BOT_CREATE_FIELDS);
    $RP_bot['artikul_id'] = RENTA_BOT_ID;
    $RP_bot['ctime'] = time_current();
    $RP_bot['flags'] |= BOT_FLAG_TEMP; //Временный бот)
    $RP_bot['rent_user_id'] = $user['id']; //Укажем что это перс, рентабельный xD лоол
    $RP_bot['nick'] = 'Призрак '.$user['nick'].' ['.$user['level'].']'; //Укажем ник
    $RP_bot['level'] = $user['level']; //Укажем уровень
    $RP_bot_id = bot_save($RP_bot);



    $fight_user = fight_user_get(array('fight_id' => $my['fight_id'], $object_table_info[$my['object_class']]['link'] => $my['id']));
    if (!$fight_user) return false;

    $fight = fight_get($my['fight_id']);
    $area=area_get($my['area_id']);

    if (!$my['instance_id'] && ($fight['level'])) {
        if (!($area['flags'] & AREA_FLAG_ALLOW_MOROC) && !($artikul_bot['flags'] & BOT_FLAG_ALLOW_GREAT_BATTLE)) return false;
    }

    $bot = bot_get($RP_bot_id);

    // запоминаем кто призвал бота
    $param['bot_params'][$RP_bot_id]['activator_class'] = $my['object_class'];
    $param['bot_params'][$RP_bot_id]['activator_id'] = $my['id'];

    $status = false;
    if ($my['instance_id'] ? instance_lock($my['instance_id']) : 1) {
        $fight = fight_get($my['fight_id']);
        $status = fight_join($fight,$bot,$fight_user['team'],$param);
        if ($my['instance_id']) instance_unlock($my['instance_id']);
    }
    if (!$status) bot_delete($bot['id']);
    return $status;
}

function fight_is_pvp($fight = array()){
    if(!$fight) return false;
    if($fight['is_pvp']) return true;
    $fight_user_list = fight_user_list($fight['id'],false, ' AND user_id > 0 AND bot_id = 0','id,user_kind,team');
    $kind_cnts = array();
    foreach ($fight_user_list as $fight_user) {
        $kind_cnts[$fight_user['team']]++;
    }
    $fight_f_pvp = $kind_cnts && $kind_cnts[1] && $kind_cnts[2];	// PVP-бой
    if($fight_f_pvp){
        fight_save(array(
            'id' => $fight['id'],
            'is_pvp' => 1,
        ));
    }
    return $fight_f_pvp;
}

?>
