(function ($) {
    "use strict";
    function safeAdd(x, y) {
        var lsw = (x & 65535) + (y & 65535);
        var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
        return (msw << 16) | (lsw & 65535);
    }
    function bitRotateLeft(num, cnt) {
        return (num << cnt) | (num >>> (32 - cnt));
    }
    function md5cmn(q, a, b, x, s, t) {
        return safeAdd(bitRotateLeft(safeAdd(safeAdd(a, q), safeAdd(x, t)), s), b);
    }
    function md5ff(a, b, c, d, x, s, t) {
        return md5cmn((b & c) | (~b & d), a, b, x, s, t);
    }
    function md5gg(a, b, c, d, x, s, t) {
        return md5cmn((b & d) | (c & ~d), a, b, x, s, t);
    }
    function md5hh(a, b, c, d, x, s, t) {
        return md5cmn(b ^ c ^ d, a, b, x, s, t);
    }
    function md5ii(a, b, c, d, x, s, t) {
        return md5cmn(c ^ (b | ~d), a, b, x, s, t);
    }
    function binlMD5(x, len) {
        x[len >> 5] |= 128 << len % 32;
        x[(((len + 64) >>> 9) << 4) + 14] = len;
        var i;
        var olda;
        var oldb;
        var oldc;
        var oldd;
        var a = 1732584193;
        var b = -271733879;
        var c = -1732584194;
        var d = 271733878;
        for (i = 0; i < x.length; i += 16) {
            olda = a;
            oldb = b;
            oldc = c;
            oldd = d;
            a = md5ff(a, b, c, d, x[i], 7, -680876936);
            d = md5ff(d, a, b, c, x[i + 1], 12, -389564586);
            c = md5ff(c, d, a, b, x[i + 2], 17, 606105819);
            b = md5ff(b, c, d, a, x[i + 3], 22, -1044525330);
            a = md5ff(a, b, c, d, x[i + 4], 7, -176418897);
            d = md5ff(d, a, b, c, x[i + 5], 12, 1200080426);
            c = md5ff(c, d, a, b, x[i + 6], 17, -1473231341);
            b = md5ff(b, c, d, a, x[i + 7], 22, -45705983);
            a = md5ff(a, b, c, d, x[i + 8], 7, 1770035416);
            d = md5ff(d, a, b, c, x[i + 9], 12, -1958414417);
            c = md5ff(c, d, a, b, x[i + 10], 17, -42063);
            b = md5ff(b, c, d, a, x[i + 11], 22, -1990404162);
            a = md5ff(a, b, c, d, x[i + 12], 7, 1804603682);
            d = md5ff(d, a, b, c, x[i + 13], 12, -40341101);
            c = md5ff(c, d, a, b, x[i + 14], 17, -1502002290);
            b = md5ff(b, c, d, a, x[i + 15], 22, 1236535329);
            a = md5gg(a, b, c, d, x[i + 1], 5, -165796510);
            d = md5gg(d, a, b, c, x[i + 6], 9, -1069501632);
            c = md5gg(c, d, a, b, x[i + 11], 14, 643717713);
            b = md5gg(b, c, d, a, x[i], 20, -373897302);
            a = md5gg(a, b, c, d, x[i + 5], 5, -701558691);
            d = md5gg(d, a, b, c, x[i + 10], 9, 38016083);
            c = md5gg(c, d, a, b, x[i + 15], 14, -660478335);
            b = md5gg(b, c, d, a, x[i + 4], 20, -405537848);
            a = md5gg(a, b, c, d, x[i + 9], 5, 568446438);
            d = md5gg(d, a, b, c, x[i + 14], 9, -1019803690);
            c = md5gg(c, d, a, b, x[i + 3], 14, -187363961);
            b = md5gg(b, c, d, a, x[i + 8], 20, 1163531501);
            a = md5gg(a, b, c, d, x[i + 13], 5, -1444681467);
            d = md5gg(d, a, b, c, x[i + 2], 9, -51403784);
            c = md5gg(c, d, a, b, x[i + 7], 14, 1735328473);
            b = md5gg(b, c, d, a, x[i + 12], 20, -1926607734);
            a = md5hh(a, b, c, d, x[i + 5], 4, -378558);
            d = md5hh(d, a, b, c, x[i + 8], 11, -2022574463);
            c = md5hh(c, d, a, b, x[i + 11], 16, 1839030562);
            b = md5hh(b, c, d, a, x[i + 14], 23, -35309556);
            a = md5hh(a, b, c, d, x[i + 1], 4, -1530992060);
            d = md5hh(d, a, b, c, x[i + 4], 11, 1272893353);
            c = md5hh(c, d, a, b, x[i + 7], 16, -155497632);
            b = md5hh(b, c, d, a, x[i + 10], 23, -1094730640);
            a = md5hh(a, b, c, d, x[i + 13], 4, 681279174);
            d = md5hh(d, a, b, c, x[i], 11, -358537222);
            c = md5hh(c, d, a, b, x[i + 3], 16, -722521979);
            b = md5hh(b, c, d, a, x[i + 6], 23, 76029189);
            a = md5hh(a, b, c, d, x[i + 9], 4, -640364487);
            d = md5hh(d, a, b, c, x[i + 12], 11, -421815835);
            c = md5hh(c, d, a, b, x[i + 15], 16, 530742520);
            b = md5hh(b, c, d, a, x[i + 2], 23, -995338651);
            a = md5ii(a, b, c, d, x[i], 6, -198630844);
            d = md5ii(d, a, b, c, x[i + 7], 10, 1126891415);
            c = md5ii(c, d, a, b, x[i + 14], 15, -1416354905);
            b = md5ii(b, c, d, a, x[i + 5], 21, -57434055);
            a = md5ii(a, b, c, d, x[i + 12], 6, 1700485571);
            d = md5ii(d, a, b, c, x[i + 3], 10, -1894986606);
            c = md5ii(c, d, a, b, x[i + 10], 15, -1051523);
            b = md5ii(b, c, d, a, x[i + 1], 21, -2054922799);
            a = md5ii(a, b, c, d, x[i + 8], 6, 1873313359);
            d = md5ii(d, a, b, c, x[i + 15], 10, -30611744);
            c = md5ii(c, d, a, b, x[i + 6], 15, -1560198380);
            b = md5ii(b, c, d, a, x[i + 13], 21, 1309151649);
            a = md5ii(a, b, c, d, x[i + 4], 6, -145523070);
            d = md5ii(d, a, b, c, x[i + 11], 10, -1120210379);
            c = md5ii(c, d, a, b, x[i + 2], 15, 718787259);
            b = md5ii(b, c, d, a, x[i + 9], 21, -343485551);
            a = safeAdd(a, olda);
            b = safeAdd(b, oldb);
            c = safeAdd(c, oldc);
            d = safeAdd(d, oldd);
        }
        return [a, b, c, d];
    }
    function binl2rstr(input) {
        var i;
        var output = "";
        var length32 = input.length * 32;
        for (i = 0; i < length32; i += 8) {
            output += String.fromCharCode((input[i >> 5] >>> i % 32) & 255);
        }
        return output;
    }
    function rstr2binl(input) {
        var i;
        var output = [];
        output[(input.length >> 2) - 1] = undefined;
        for (i = 0; i < output.length; i += 1) {
            output[i] = 0;
        }
        var length8 = input.length * 8;
        for (i = 0; i < length8; i += 8) {
            output[i >> 5] |= (input.charCodeAt(i / 8) & 255) << i % 32;
        }
        return output;
    }
    function rstrMD5(s) {
        return binl2rstr(binlMD5(rstr2binl(s), s.length * 8));
    }
    function rstrHMACMD5(key, data) {
        var i;
        var bkey = rstr2binl(key);
        var ipad = [];
        var opad = [];
        var hash;
        ipad[15] = opad[15] = undefined;
        if (bkey.length > 16) {
            bkey = binlMD5(bkey, key.length * 8);
        }
        for (i = 0; i < 16; i += 1) {
            ipad[i] = bkey[i] ^ 909522486;
            opad[i] = bkey[i] ^ 1549556828;
        }
        hash = binlMD5(ipad.concat(rstr2binl(data)), 512 + data.length * 8);
        return binl2rstr(binlMD5(opad.concat(hash), 512 + 128));
    }
    function rstr2hex(input) {
        var hexTab = "0123456789abcdef";
        var output = "";
        var x;
        var i;
        for (i = 0; i < input.length; i += 1) {
            x = input.charCodeAt(i);
            output += hexTab.charAt((x >>> 4) & 15) + hexTab.charAt(x & 15);
        }
        return output;
    }
    function str2rstrUTF8(input) {
        return unescape(encodeURIComponent(input));
    }
    function rawMD5(s) {
        return rstrMD5(str2rstrUTF8(s));
    }
    function hexMD5(s) {
        return rstr2hex(rawMD5(s));
    }
    function rawHMACMD5(k, d) {
        return rstrHMACMD5(str2rstrUTF8(k), str2rstrUTF8(d));
    }
    function hexHMACMD5(k, d) {
        return rstr2hex(rawHMACMD5(k, d));
    }
    function md5(string, key, raw) {
        if (!key) {
            if (!raw) {
                return hexMD5(string);
            }
            return rawMD5(string);
        }
        if (!raw) {
            return hexHMACMD5(key, string);
        }
        return rawHMACMD5(key, string);
    }
    if (typeof define === "function" && define.amd) {
        define(function () {
            return md5;
        });
    } else if (typeof module === "object" && module.exports) {
        module.exports = md5;
    } else {
        $.md5 = md5;
    }
})(this);
(function () {
    "use strict";
    var HowlerGlobal = function () {
        this.init();
    };
    HowlerGlobal.prototype = {
        init: function () {
            var self = this || Howler;
            self._counter = 1e3;
            self._codecs = {};
            self._howls = [];
            self._muted = false;
            self._volume = 1;
            self._canPlayEvent = "canplaythrough";
            self._navigator = typeof window !== "undefined" && window.navigator ? window.navigator : null;
            self.masterGain = null;
            self.noAudio = false;
            self.usingWebAudio = true;
            self.autoSuspend = true;
            self.ctx = null;
            self.mobileAutoEnable = true;
            self._setup();
            return self;
        },
        volume: function (vol) {
            var self = this || Howler;
            vol = parseFloat(vol);
            if (!self.ctx) {
                setupAudioContext();
            }
            if (typeof vol !== "undefined" && vol >= 0 && vol <= 1) {
                self._volume = vol;
                if (self._muted) {
                    return self;
                }
                if (self.usingWebAudio) {
                    self.masterGain.gain.setValueAtTime(vol, Howler.ctx.currentTime);
                }
                for (var i = 0; i < self._howls.length; i++) {
                    if (!self._howls[i]._webAudio) {
                        var ids = self._howls[i]._getSoundIds();
                        for (var j = 0; j < ids.length; j++) {
                            var sound = self._howls[i]._soundById(ids[j]);
                            if (sound && sound._node) {
                                sound._node.volume = sound._volume * vol;
                            }
                        }
                    }
                }
                return self;
            }
            return self._volume;
        },
        mute: function (muted) {
            var self = this || Howler;
            if (!self.ctx) {
                setupAudioContext();
            }
            self._muted = muted;
            if (self.usingWebAudio) {
                self.masterGain.gain.setValueAtTime(muted ? 0 : self._volume, Howler.ctx.currentTime);
            }
            for (var i = 0; i < self._howls.length; i++) {
                if (!self._howls[i]._webAudio) {
                    var ids = self._howls[i]._getSoundIds();
                    for (var j = 0; j < ids.length; j++) {
                        var sound = self._howls[i]._soundById(ids[j]);
                        if (sound && sound._node) {
                            sound._node.muted = muted ? true : sound._muted;
                        }
                    }
                }
            }
            return self;
        },
        unload: function () {
            var self = this || Howler;
            for (var i = self._howls.length - 1; i >= 0; i--) {
                self._howls[i].unload();
            }
            if (self.usingWebAudio && self.ctx && typeof self.ctx.close !== "undefined") {
                self.ctx.close();
                self.ctx = null;
                setupAudioContext();
            }
            return self;
        },
        codecs: function (ext) {
            return (this || Howler)._codecs[ext.replace(/^x-/, "")];
        },
        _setup: function () {
            var self = this || Howler;
            self.state = self.ctx ? self.ctx.state || "running" : "running";
            self._autoSuspend();
            if (!self.usingWebAudio) {
                if (typeof Audio !== "undefined") {
                    try {
                        var test = new Audio();
                        if (typeof test.oncanplaythrough === "undefined") {
                            self._canPlayEvent = "canplay";
                        }
                    } catch (e) {
                        self.noAudio = true;
                    }
                } else {
                    self.noAudio = true;
                }
            }
            try {
                var test = new Audio();
                if (test.muted) {
                    self.noAudio = true;
                }
            } catch (e) {}
            if (!self.noAudio) {
                self._setupCodecs();
            }
            return self;
        },
        _setupCodecs: function () {
            var self = this || Howler;
            var audioTest = null;
            try {
                audioTest = typeof Audio !== "undefined" ? new Audio() : null;
            } catch (err) {
                return self;
            }
            if (!audioTest || typeof audioTest.canPlayType !== "function") {
                return self;
            }
            var mpegTest = audioTest.canPlayType("audio/mpeg;").replace(/^no$/, "");
            var checkOpera = self._navigator && self._navigator.userAgent.match(/OPR\/([0-6].)/g);
            var isOldOpera = checkOpera && parseInt(checkOpera[0].split("/")[1], 10) < 33;
            self._codecs = {
                mp3: !!(!isOldOpera && (mpegTest || audioTest.canPlayType("audio/mp3;").replace(/^no$/, ""))),
                mpeg: !!mpegTest,
                opus: !!audioTest.canPlayType('audio/ogg; codecs="opus"').replace(/^no$/, ""),
                ogg: !!audioTest.canPlayType('audio/ogg; codecs="vorbis"').replace(/^no$/, ""),
                oga: !!audioTest.canPlayType('audio/ogg; codecs="vorbis"').replace(/^no$/, ""),
                wav: !!audioTest.canPlayType('audio/wav; codecs="1"').replace(/^no$/, ""),
                aac: !!audioTest.canPlayType("audio/aac;").replace(/^no$/, ""),
                caf: !!audioTest.canPlayType("audio/x-caf;").replace(/^no$/, ""),
                m4a: !!(audioTest.canPlayType("audio/x-m4a;") || audioTest.canPlayType("audio/m4a;") || audioTest.canPlayType("audio/aac;")).replace(/^no$/, ""),
                mp4: !!(audioTest.canPlayType("audio/x-mp4;") || audioTest.canPlayType("audio/mp4;") || audioTest.canPlayType("audio/aac;")).replace(/^no$/, ""),
                weba: !!audioTest.canPlayType('audio/webm; codecs="vorbis"').replace(/^no$/, ""),
                webm: !!audioTest.canPlayType('audio/webm; codecs="vorbis"').replace(/^no$/, ""),
                dolby: !!audioTest.canPlayType('audio/mp4; codecs="ec-3"').replace(/^no$/, ""),
                flac: !!(audioTest.canPlayType("audio/x-flac;") || audioTest.canPlayType("audio/flac;")).replace(/^no$/, ""),
            };
            return self;
        },
        _enableMobileAudio: function () {
            var self = this || Howler;
            var isMobile = /iPhone|iPad|iPod|Android|BlackBerry|BB10|Silk|Mobi/i.test(self._navigator && self._navigator.userAgent);
            var isTouch = !!("ontouchend" in window || (self._navigator && self._navigator.maxTouchPoints > 0) || (self._navigator && self._navigator.msMaxTouchPoints > 0));
            if (self._mobileEnabled || !self.ctx || (!isMobile && !isTouch)) {
                return;
            }
            self._mobileEnabled = false;
            if (!self._mobileUnloaded && self.ctx.sampleRate !== 44100) {
                self._mobileUnloaded = true;
                self.unload();
            }
            self._scratchBuffer = self.ctx.createBuffer(1, 1, 22050);
            var unlock = function () {
                Howler._autoResume();
                var source = self.ctx.createBufferSource();
                source.buffer = self._scratchBuffer;
                source.connect(self.ctx.destination);
                if (typeof source.start === "undefined") {
                    source.noteOn(0);
                } else {
                    source.start(0);
                }
                if (typeof self.ctx.resume === "function") {
                    self.ctx.resume();
                }
                source.onended = function () {
                    source.disconnect(0);
                    self._mobileEnabled = true;
                    self.mobileAutoEnable = false;
                    document.removeEventListener("touchstart", unlock, true);
                    document.removeEventListener("touchend", unlock, true);
                };
            };
            document.addEventListener("touchstart", unlock, true);
            document.addEventListener("touchend", unlock, true);
            return self;
        },
        _autoSuspend: function () {
            var self = this;
            if (!self.autoSuspend || !self.ctx || typeof self.ctx.suspend === "undefined" || !Howler.usingWebAudio) {
                return;
            }
            for (var i = 0; i < self._howls.length; i++) {
                if (self._howls[i]._webAudio) {
                    for (var j = 0; j < self._howls[i]._sounds.length; j++) {
                        if (!self._howls[i]._sounds[j]._paused) {
                            return self;
                        }
                    }
                }
            }
            if (self._suspendTimer) {
                clearTimeout(self._suspendTimer);
            }
            self._suspendTimer = setTimeout(function () {
                if (!self.autoSuspend) {
                    return;
                }
                self._suspendTimer = null;
                self.state = "suspending";
                self.ctx.suspend().then(function () {
                    self.state = "suspended";
                    if (self._resumeAfterSuspend) {
                        delete self._resumeAfterSuspend;
                        self._autoResume();
                    }
                });
            }, 3e4);
            return self;
        },
        _autoResume: function () {
            var self = this;
            if (!self.ctx || typeof self.ctx.resume === "undefined" || !Howler.usingWebAudio) {
                return;
            }
            if (self.state === "running" && self._suspendTimer) {
                clearTimeout(self._suspendTimer);
                self._suspendTimer = null;
            } else if (self.state === "suspended") {
                self.ctx.resume().then(function () {
                    self.state = "running";
                    for (var i = 0; i < self._howls.length; i++) {
                        self._howls[i]._emit("resume");
                    }
                });
                if (self._suspendTimer) {
                    clearTimeout(self._suspendTimer);
                    self._suspendTimer = null;
                }
            } else if (self.state === "suspending") {
                self._resumeAfterSuspend = true;
            }
            return self;
        },
    };
    var Howler = new HowlerGlobal();
    var Howl = function (o) {
        var self = this;
        if (!o.src || o.src.length === 0) {
            console.error("An array of source files must be passed with any new Howl.");
            return;
        }
        self.init(o);
    };
    Howl.prototype = {
        init: function (o) {
            var self = this;
            if (!Howler.ctx) {
                setupAudioContext();
            }
            self._autoplay = o.autoplay || false;
            self._format = typeof o.format !== "string" ? o.format : [o.format];
            self._html5 = o.html5 || false;
            self._muted = o.mute || false;
            self._loop = o.loop || false;
            self._pool = o.pool || 5;
            self._preload = typeof o.preload === "boolean" ? o.preload : true;
            self._rate = o.rate || 1;
            self._sprite = o.sprite || {};
            self._src = typeof o.src !== "string" ? o.src : [o.src];
            self._volume = o.volume !== undefined ? o.volume : 1;
            self._xhrWithCredentials = o.xhrWithCredentials || false;
            self._duration = 0;
            self._state = "unloaded";
            self._sounds = [];
            self._endTimers = {};
            self._queue = [];
            self._playLock = false;
            self._onend = o.onend ? [{ fn: o.onend }] : [];
            self._onfade = o.onfade ? [{ fn: o.onfade }] : [];
            self._onload = o.onload ? [{ fn: o.onload }] : [];
            self._onloaderror = o.onloaderror ? [{ fn: o.onloaderror }] : [];
            self._onplayerror = o.onplayerror ? [{ fn: o.onplayerror }] : [];
            self._onpause = o.onpause ? [{ fn: o.onpause }] : [];
            self._onplay = o.onplay ? [{ fn: o.onplay }] : [];
            self._onstop = o.onstop ? [{ fn: o.onstop }] : [];
            self._onmute = o.onmute ? [{ fn: o.onmute }] : [];
            self._onvolume = o.onvolume ? [{ fn: o.onvolume }] : [];
            self._onrate = o.onrate ? [{ fn: o.onrate }] : [];
            self._onseek = o.onseek ? [{ fn: o.onseek }] : [];
            self._onresume = [];
            self._webAudio = Howler.usingWebAudio && !self._html5;
            if (typeof Howler.ctx !== "undefined" && Howler.ctx && Howler.mobileAutoEnable) {
                Howler._enableMobileAudio();
            }
            Howler._howls.push(self);
            if (self._autoplay) {
                self._queue.push({
                    event: "play",
                    action: function () {
                        self.play();
                    },
                });
            }
            if (self._preload) {
                self.load();
            }
            return self;
        },
        load: function () {
            var self = this;
            var url = null;
            if (Howler.noAudio) {
                self._emit("loaderror", null, "No audio support.");
                return;
            }
            if (typeof self._src === "string") {
                self._src = [self._src];
            }
            for (var i = 0; i < self._src.length; i++) {
                var ext, str;
                if (self._format && self._format[i]) {
                    ext = self._format[i];
                } else {
                    str = self._src[i];
                    if (typeof str !== "string") {
                        self._emit("loaderror", null, "Non-string found in selected audio sources - ignoring.");
                        continue;
                    }
                    ext = /^data:audio\/([^;,]+);/i.exec(str);
                    if (!ext) {
                        ext = /\.([^.]+)$/.exec(str.split("?", 1)[0]);
                    }
                    if (ext) {
                        ext = ext[1].toLowerCase();
                    }
                }
                if (!ext) {
                    console.warn('No file extension was found. Consider using the "format" property or specify an extension.');
                }
                if (ext && Howler.codecs(ext)) {
                    url = self._src[i];
                    break;
                }
            }
            if (!url) {
                self._emit("loaderror", null, "No codec support for selected audio sources.");
                return;
            }
            self._src = url;
            self._state = "loading";
            if (window.location.protocol === "https:" && url.slice(0, 5) === "http:") {
                self._html5 = true;
                self._webAudio = false;
            }
            new Sound(self);
            if (self._webAudio) {
                loadBuffer(self);
            }
            return self;
        },
        play: function (sprite, internal) {
            var self = this;
            var id = null;
            if (typeof sprite === "number") {
                id = sprite;
                sprite = null;
            } else if (typeof sprite === "string" && self._state === "loaded" && !self._sprite[sprite]) {
                return null;
            } else if (typeof sprite === "undefined") {
                sprite = "__default";
                var num = 0;
                for (var i = 0; i < self._sounds.length; i++) {
                    if (self._sounds[i]._paused && !self._sounds[i]._ended) {
                        num++;
                        id = self._sounds[i]._id;
                    }
                }
                if (num === 1) {
                    sprite = null;
                } else {
                    id = null;
                }
            }
            var sound = id ? self._soundById(id) : self._inactiveSound();
            if (!sound) {
                return null;
            }
            if (id && !sprite) {
                sprite = sound._sprite || "__default";
            }
            if (self._state !== "loaded") {
                sound._sprite = sprite;
                sound._ended = false;
                var soundId = sound._id;
                self._queue.push({
                    event: "play",
                    action: function () {
                        self.play(soundId);
                    },
                });
                return soundId;
            }
            if (id && !sound._paused) {
                if (!internal) {
                    setTimeout(function () {
                        self._emit("play", sound._id);
                    }, 0);
                }
                return sound._id;
            }
            if (self._webAudio) {
                Howler._autoResume();
            }
            var seek = Math.max(0, sound._seek > 0 ? sound._seek : self._sprite[sprite][0] / 1e3);
            var duration = Math.max(0, (self._sprite[sprite][0] + self._sprite[sprite][1]) / 1e3 - seek);
            var timeout = (duration * 1e3) / Math.abs(sound._rate);
            sound._paused = false;
            sound._ended = false;
            sound._sprite = sprite;
            sound._seek = seek;
            sound._start = self._sprite[sprite][0] / 1e3;
            sound._stop = (self._sprite[sprite][0] + self._sprite[sprite][1]) / 1e3;
            sound._loop = !!(sound._loop || self._sprite[sprite][2]);
            var node = sound._node;
            if (self._webAudio) {
                var playWebAudio = function () {
                    self._refreshBuffer(sound);
                    var vol = sound._muted || self._muted ? 0 : sound._volume;
                    node.gain.setValueAtTime(vol, Howler.ctx.currentTime);
                    sound._playStart = Howler.ctx.currentTime;
                    if (typeof node.bufferSource.start === "undefined") {
                        sound._loop ? node.bufferSource.noteGrainOn(0, seek, 86400) : node.bufferSource.noteGrainOn(0, seek, duration);
                    } else {
                        sound._loop ? node.bufferSource.start(0, seek, 86400) : node.bufferSource.start(0, seek, duration);
                    }
                    if (timeout !== Infinity) {
                        self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);
                    }
                    if (!internal) {
                        setTimeout(function () {
                            self._emit("play", sound._id);
                        }, 0);
                    }
                };
                if (Howler.state === "running") {
                    playWebAudio();
                } else {
                    self.once("resume", playWebAudio);
                    self._clearTimer(sound._id);
                }
            } else {
                var playHtml5 = function () {
                    node.currentTime = seek;
                    node.muted = sound._muted || self._muted || Howler._muted || node.muted;
                    node.volume = sound._volume * Howler.volume();
                    node.playbackRate = sound._rate;
                    try {
                        var play = node.play();
                        if (typeof Promise !== "undefined" && play instanceof Promise) {
                            self._playLock = true;
                            play.then(function () {
                                self._playLock = false;
                                self._loadQueue();
                            });
                        }
                        if (node.paused) {
                            self._emit("playerror", sound._id, "Playback was unable to start. This is most commonly an issue " + "on mobile devices where playback was not within a user interaction.");
                            return;
                        }
                        if (timeout !== Infinity) {
                            self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);
                        }
                        if (!internal) {
                            self._emit("play", sound._id);
                        }
                    } catch (err) {
                        self._emit("playerror", sound._id, err);
                    }
                };
                var loadedNoReadyState = (window && window.ejecta) || (!node.readyState && Howler._navigator.isCocoonJS);
                if (node.readyState === 4 || loadedNoReadyState) {
                    playHtml5();
                } else {
                    var listener = function () {
                        playHtml5();
                        node.removeEventListener(Howler._canPlayEvent, listener, false);
                    };
                    node.addEventListener(Howler._canPlayEvent, listener, false);
                    self._clearTimer(sound._id);
                }
            }
            return sound._id;
        },
        pause: function (id) {
            var self = this;
            if (self._state !== "loaded" || self._playLock) {
                self._queue.push({
                    event: "pause",
                    action: function () {
                        self.pause(id);
                    },
                });
                return self;
            }
            var ids = self._getSoundIds(id);
            for (var i = 0; i < ids.length; i++) {
                self._clearTimer(ids[i]);
                var sound = self._soundById(ids[i]);
                if (sound && !sound._paused) {
                    sound._seek = self.seek(ids[i]);
                    sound._rateSeek = 0;
                    sound._paused = true;
                    self._stopFade(ids[i]);
                    if (sound._node) {
                        if (self._webAudio) {
                            if (!sound._node.bufferSource) {
                                continue;
                            }
                            if (typeof sound._node.bufferSource.stop === "undefined") {
                                sound._node.bufferSource.noteOff(0);
                            } else {
                                sound._node.bufferSource.stop(0);
                            }
                            self._cleanBuffer(sound._node);
                        } else if (!isNaN(sound._node.duration) || sound._node.duration === Infinity) {
                            sound._node.pause();
                        }
                    }
                }
                if (!arguments[1]) {
                    self._emit("pause", sound ? sound._id : null);
                }
            }
            return self;
        },
        stop: function (id, internal) {
            var self = this;
            if (self._state !== "loaded") {
                self._queue.push({
                    event: "stop",
                    action: function () {
                        self.stop(id);
                    },
                });
                return self;
            }
            var ids = self._getSoundIds(id);
            for (var i = 0; i < ids.length; i++) {
                self._clearTimer(ids[i]);
                var sound = self._soundById(ids[i]);
                if (sound) {
                    sound._seek = sound._start || 0;
                    sound._rateSeek = 0;
                    sound._paused = true;
                    sound._ended = true;
                    self._stopFade(ids[i]);
                    if (sound._node) {
                        if (self._webAudio) {
                            if (sound._node.bufferSource) {
                                if (typeof sound._node.bufferSource.stop === "undefined") {
                                    sound._node.bufferSource.noteOff(0);
                                } else {
                                    sound._node.bufferSource.stop(0);
                                }
                                self._cleanBuffer(sound._node);
                            }
                        } else if (!isNaN(sound._node.duration) || sound._node.duration === Infinity) {
                            sound._node.currentTime = sound._start || 0;
                            sound._node.pause();
                        }
                    }
                    if (!internal) {
                        self._emit("stop", sound._id);
                    }
                }
            }
            return self;
        },
        mute: function (muted, id) {
            var self = this;
            if (self._state !== "loaded") {
                self._queue.push({
                    event: "mute",
                    action: function () {
                        self.mute(muted, id);
                    },
                });
                return self;
            }
            if (typeof id === "undefined") {
                if (typeof muted === "boolean") {
                    self._muted = muted;
                } else {
                    return self._muted;
                }
            }
            var ids = self._getSoundIds(id);
            for (var i = 0; i < ids.length; i++) {
                var sound = self._soundById(ids[i]);
                if (sound) {
                    sound._muted = muted;
                    if (sound._interval) {
                        self._stopFade(sound._id);
                    }
                    if (self._webAudio && sound._node) {
                        sound._node.gain.setValueAtTime(muted ? 0 : sound._volume, Howler.ctx.currentTime);
                    } else if (sound._node) {
                        sound._node.muted = Howler._muted ? true : muted;
                    }
                    self._emit("mute", sound._id);
                }
            }
            return self;
        },
        volume: function () {
            var self = this;
            var args = arguments;
            var vol, id;
            if (args.length === 0) {
                return self._volume;
            } else if (args.length === 1 || (args.length === 2 && typeof args[1] === "undefined")) {
                var ids = self._getSoundIds();
                var index = ids.indexOf(args[0]);
                if (index >= 0) {
                    id = parseInt(args[0], 10);
                } else {
                    vol = parseFloat(args[0]);
                }
            } else if (args.length >= 2) {
                vol = parseFloat(args[0]);
                id = parseInt(args[1], 10);
            }
            var sound;
            if (typeof vol !== "undefined" && vol >= 0 && vol <= 1) {
                if (self._state !== "loaded") {
                    self._queue.push({
                        event: "volume",
                        action: function () {
                            self.volume.apply(self, args);
                        },
                    });
                    return self;
                }
                if (typeof id === "undefined") {
                    self._volume = vol;
                }
                id = self._getSoundIds(id);
                for (var i = 0; i < id.length; i++) {
                    sound = self._soundById(id[i]);
                    if (sound) {
                        sound._volume = vol;
                        if (!args[2]) {
                            self._stopFade(id[i]);
                        }
                        if (self._webAudio && sound._node && !sound._muted) {
                            sound._node.gain.setValueAtTime(vol, Howler.ctx.currentTime);
                        } else if (sound._node && !sound._muted) {
                            sound._node.volume = vol * Howler.volume();
                        }
                        self._emit("volume", sound._id);
                    }
                }
            } else {
                sound = id ? self._soundById(id) : self._sounds[0];
                return sound ? sound._volume : 0;
            }
            return self;
        },
        fade: function (from, to, len, id) {
            var self = this;
            if (self._state !== "loaded") {
                self._queue.push({
                    event: "fade",
                    action: function () {
                        self.fade(from, to, len, id);
                    },
                });
                return self;
            }
            self.volume(from, id);
            var ids = self._getSoundIds(id);
            for (var i = 0; i < ids.length; i++) {
                var sound = self._soundById(ids[i]);
                if (sound) {
                    if (!id) {
                        self._stopFade(ids[i]);
                    }
                    if (self._webAudio && !sound._muted) {
                        var currentTime = Howler.ctx.currentTime;
                        var end = currentTime + len / 1e3;
                        sound._volume = from;
                        sound._node.gain.setValueAtTime(from, currentTime);
                        sound._node.gain.linearRampToValueAtTime(to, end);
                    }
                    self._startFadeInterval(sound, from, to, len, ids[i], typeof id === "undefined");
                }
            }
            return self;
        },
        _startFadeInterval: function (sound, from, to, len, id, isGroup) {
            var self = this;
            var vol = from;
            var diff = to - from;
            var steps = Math.abs(diff / 0.01);
            var stepLen = Math.max(4, steps > 0 ? len / steps : len);
            var lastTick = Date.now();
            sound._fadeTo = to;
            sound._interval = setInterval(function () {
                var tick = (Date.now() - lastTick) / len;
                lastTick = Date.now();
                vol += diff * tick;
                vol = Math.max(0, vol);
                vol = Math.min(1, vol);
                vol = Math.round(vol * 100) / 100;
                if (self._webAudio) {
                    sound._volume = vol;
                } else {
                    self.volume(vol, sound._id, true);
                }
                if (isGroup) {
                    self._volume = vol;
                }
                if ((to < from && vol <= to) || (to > from && vol >= to)) {
                    clearInterval(sound._interval);
                    sound._interval = null;
                    sound._fadeTo = null;
                    self.volume(to, sound._id);
                    self._emit("fade", sound._id);
                }
            }, stepLen);
        },
        _stopFade: function (id) {
            var self = this;
            var sound = self._soundById(id);
            if (sound && sound._interval) {
                if (self._webAudio) {
                    sound._node.gain.cancelScheduledValues(Howler.ctx.currentTime);
                }
                clearInterval(sound._interval);
                sound._interval = null;
                self.volume(sound._fadeTo, id);
                sound._fadeTo = null;
                self._emit("fade", id);
            }
            return self;
        },
        loop: function () {
            var self = this;
            var args = arguments;
            var loop, id, sound;
            if (args.length === 0) {
                return self._loop;
            } else if (args.length === 1) {
                if (typeof args[0] === "boolean") {
                    loop = args[0];
                    self._loop = loop;
                } else {
                    sound = self._soundById(parseInt(args[0], 10));
                    return sound ? sound._loop : false;
                }
            } else if (args.length === 2) {
                loop = args[0];
                id = parseInt(args[1], 10);
            }
            var ids = self._getSoundIds(id);
            for (var i = 0; i < ids.length; i++) {
                sound = self._soundById(ids[i]);
                if (sound) {
                    sound._loop = loop;
                    if (self._webAudio && sound._node && sound._node.bufferSource) {
                        sound._node.bufferSource.loop = loop;
                        if (loop) {
                            sound._node.bufferSource.loopStart = sound._start || 0;
                            sound._node.bufferSource.loopEnd = sound._stop;
                        }
                    }
                }
            }
            return self;
        },
        rate: function () {
            var self = this;
            var args = arguments;
            var rate, id;
            if (args.length === 0) {
                id = self._sounds[0]._id;
            } else if (args.length === 1) {
                var ids = self._getSoundIds();
                var index = ids.indexOf(args[0]);
                if (index >= 0) {
                    id = parseInt(args[0], 10);
                } else {
                    rate = parseFloat(args[0]);
                }
            } else if (args.length === 2) {
                rate = parseFloat(args[0]);
                id = parseInt(args[1], 10);
            }
            var sound;
            if (typeof rate === "number") {
                if (self._state !== "loaded") {
                    self._queue.push({
                        event: "rate",
                        action: function () {
                            self.rate.apply(self, args);
                        },
                    });
                    return self;
                }
                if (typeof id === "undefined") {
                    self._rate = rate;
                }
                id = self._getSoundIds(id);
                for (var i = 0; i < id.length; i++) {
                    sound = self._soundById(id[i]);
                    if (sound) {
                        sound._rateSeek = self.seek(id[i]);
                        sound._playStart = self._webAudio ? Howler.ctx.currentTime : sound._playStart;
                        sound._rate = rate;
                        if (self._webAudio && sound._node && sound._node.bufferSource) {
                            sound._node.bufferSource.playbackRate.setValueAtTime(rate, Howler.ctx.currentTime);
                        } else if (sound._node) {
                            sound._node.playbackRate = rate;
                        }
                        var seek = self.seek(id[i]);
                        var duration = (self._sprite[sound._sprite][0] + self._sprite[sound._sprite][1]) / 1e3 - seek;
                        var timeout = (duration * 1e3) / Math.abs(sound._rate);
                        if (self._endTimers[id[i]] || !sound._paused) {
                            self._clearTimer(id[i]);
                            self._endTimers[id[i]] = setTimeout(self._ended.bind(self, sound), timeout);
                        }
                        self._emit("rate", sound._id);
                    }
                }
            } else {
                sound = self._soundById(id);
                return sound ? sound._rate : self._rate;
            }
            return self;
        },
        seek: function () {
            var self = this;
            var args = arguments;
            var seek, id;
            if (args.length === 0) {
                id = self._sounds[0]._id;
            } else if (args.length === 1) {
                var ids = self._getSoundIds();
                var index = ids.indexOf(args[0]);
                if (index >= 0) {
                    id = parseInt(args[0], 10);
                } else if (self._sounds.length) {
                    id = self._sounds[0]._id;
                    seek = parseFloat(args[0]);
                }
            } else if (args.length === 2) {
                seek = parseFloat(args[0]);
                id = parseInt(args[1], 10);
            }
            if (typeof id === "undefined") {
                return self;
            }
            if (self._state !== "loaded") {
                self._queue.push({
                    event: "seek",
                    action: function () {
                        self.seek.apply(self, args);
                    },
                });
                return self;
            }
            var sound = self._soundById(id);
            if (sound) {
                if (typeof seek === "number" && seek >= 0) {
                    var playing = self.playing(id);
                    if (playing) {
                        self.pause(id, true);
                    }
                    sound._seek = seek;
                    sound._ended = false;
                    self._clearTimer(id);
                    if (playing) {
                        self.play(id, true);
                    }
                    if (!self._webAudio && sound._node) {
                        sound._node.currentTime = seek;
                    }
                    self._emit("seek", id);
                } else {
                    if (self._webAudio) {
                        var realTime = self.playing(id) ? Howler.ctx.currentTime - sound._playStart : 0;
                        var rateSeek = sound._rateSeek ? sound._rateSeek - sound._seek : 0;
                        return sound._seek + (rateSeek + realTime * Math.abs(sound._rate));
                    } else {
                        return sound._node.currentTime;
                    }
                }
            }
            return self;
        },
        playing: function (id) {
            var self = this;
            if (typeof id === "number") {
                var sound = self._soundById(id);
                return sound ? !sound._paused : false;
            }
            for (var i = 0; i < self._sounds.length; i++) {
                if (!self._sounds[i]._paused) {
                    return true;
                }
            }
            return false;
        },
        duration: function (id) {
            var self = this;
            var duration = self._duration;
            var sound = self._soundById(id);
            if (sound) {
                duration = self._sprite[sound._sprite][1] / 1e3;
            }
            return duration;
        },
        state: function () {
            return this._state;
        },
        unload: function () {
            var self = this;
            var sounds = self._sounds;
            for (var i = 0; i < sounds.length; i++) {
                if (!sounds[i]._paused) {
                    self.stop(sounds[i]._id);
                }
                if (!self._webAudio) {
                    var checkIE = /MSIE |Trident\//.test(Howler._navigator && Howler._navigator.userAgent);
                    if (!checkIE) {
                        sounds[i]._node.src = "data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA";
                    }
                    sounds[i]._node.removeEventListener("error", sounds[i]._errorFn, false);
                    sounds[i]._node.removeEventListener(Howler._canPlayEvent, sounds[i]._loadFn, false);
                }
                delete sounds[i]._node;
                self._clearTimer(sounds[i]._id);
                var index = Howler._howls.indexOf(self);
                if (index >= 0) {
                    Howler._howls.splice(index, 1);
                }
            }
            var remCache = true;
            for (i = 0; i < Howler._howls.length; i++) {
                if (Howler._howls[i]._src === self._src) {
                    remCache = false;
                    break;
                }
            }
            if (cache && remCache) {
                delete cache[self._src];
            }
            Howler.noAudio = false;
            self._state = "unloaded";
            self._sounds = [];
            self = null;
            return null;
        },
        on: function (event, fn, id, once) {
            var self = this;
            var events = self["_on" + event];
            if (typeof fn === "function") {
                events.push(once ? { id: id, fn: fn, once: once } : { id: id, fn: fn });
            }
            return self;
        },
        off: function (event, fn, id) {
            var self = this;
            var events = self["_on" + event];
            var i = 0;
            if (typeof fn === "number") {
                id = fn;
                fn = null;
            }
            if (fn || id) {
                for (i = 0; i < events.length; i++) {
                    var isId = id === events[i].id;
                    if ((fn === events[i].fn && isId) || (!fn && isId)) {
                        events.splice(i, 1);
                        break;
                    }
                }
            } else if (event) {
                self["_on" + event] = [];
            } else {
                var keys = Object.keys(self);
                for (i = 0; i < keys.length; i++) {
                    if (keys[i].indexOf("_on") === 0 && Array.isArray(self[keys[i]])) {
                        self[keys[i]] = [];
                    }
                }
            }
            return self;
        },
        once: function (event, fn, id) {
            var self = this;
            self.on(event, fn, id, 1);
            return self;
        },
        _emit: function (event, id, msg) {
            var self = this;
            var events = self["_on" + event];
            for (var i = events.length - 1; i >= 0; i--) {
                if (!events[i].id || events[i].id === id || event === "load") {
                    setTimeout(
                        function (fn) {
                            fn.call(this, id, msg);
                        }.bind(self, events[i].fn),
                        0
                    );
                    if (events[i].once) {
                        self.off(event, events[i].fn, events[i].id);
                    }
                }
            }
            return self;
        },
        _loadQueue: function () {
            var self = this;
            if (self._queue.length > 0) {
                var task = self._queue[0];
                self.once(task.event, function () {
                    self._queue.shift();
                    self._loadQueue();
                });
                task.action();
            }
            return self;
        },
        _ended: function (sound) {
            var self = this;
            var sprite = sound._sprite;
            if (!self._webAudio && sound._node && !sound._node.paused && !sound._node.ended && sound._node.currentTime < sound._stop) {
                setTimeout(self._ended.bind(self, sound), 100);
                return self;
            }
            var loop = !!(sound._loop || self._sprite[sprite][2]);
            self._emit("end", sound._id);
            if (!self._webAudio && loop) {
                self.stop(sound._id, true).play(sound._id);
            }
            if (self._webAudio && loop) {
                self._emit("play", sound._id);
                sound._seek = sound._start || 0;
                sound._rateSeek = 0;
                sound._playStart = Howler.ctx.currentTime;
                var timeout = ((sound._stop - sound._start) * 1e3) / Math.abs(sound._rate);
                self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);
            }
            if (self._webAudio && !loop) {
                sound._paused = true;
                sound._ended = true;
                sound._seek = sound._start || 0;
                sound._rateSeek = 0;
                self._clearTimer(sound._id);
                self._cleanBuffer(sound._node);
                Howler._autoSuspend();
            }
            if (!self._webAudio && !loop) {
                self.stop(sound._id);
            }
            return self;
        },
        _clearTimer: function (id) {
            var self = this;
            if (self._endTimers[id]) {
                clearTimeout(self._endTimers[id]);
                delete self._endTimers[id];
            }
            return self;
        },
        _soundById: function (id) {
            var self = this;
            for (var i = 0; i < self._sounds.length; i++) {
                if (id === self._sounds[i]._id) {
                    return self._sounds[i];
                }
            }
            return null;
        },
        _inactiveSound: function () {
            var self = this;
            self._drain();
            for (var i = 0; i < self._sounds.length; i++) {
                if (self._sounds[i]._ended) {
                    return self._sounds[i].reset();
                }
            }
            return new Sound(self);
        },
        _drain: function () {
            var self = this;
            var limit = self._pool;
            var cnt = 0;
            var i = 0;
            if (self._sounds.length < limit) {
                return;
            }
            for (i = 0; i < self._sounds.length; i++) {
                if (self._sounds[i]._ended) {
                    cnt++;
                }
            }
            for (i = self._sounds.length - 1; i >= 0; i--) {
                if (cnt <= limit) {
                    return;
                }
                if (self._sounds[i]._ended) {
                    if (self._webAudio && self._sounds[i]._node) {
                        self._sounds[i]._node.disconnect(0);
                    }
                    self._sounds.splice(i, 1);
                    cnt--;
                }
            }
        },
        _getSoundIds: function (id) {
            var self = this;
            if (typeof id === "undefined") {
                var ids = [];
                for (var i = 0; i < self._sounds.length; i++) {
                    ids.push(self._sounds[i]._id);
                }
                return ids;
            } else {
                return [id];
            }
        },
        _refreshBuffer: function (sound) {
            var self = this;
            sound._node.bufferSource = Howler.ctx.createBufferSource();
            sound._node.bufferSource.buffer = cache[self._src];
            if (sound._panner) {
                sound._node.bufferSource.connect(sound._panner);
            } else {
                sound._node.bufferSource.connect(sound._node);
            }
            sound._node.bufferSource.loop = sound._loop;
            if (sound._loop) {
                sound._node.bufferSource.loopStart = sound._start || 0;
                sound._node.bufferSource.loopEnd = sound._stop;
            }
            sound._node.bufferSource.playbackRate.setValueAtTime(sound._rate, Howler.ctx.currentTime);
            return self;
        },
        _cleanBuffer: function (node) {
            var self = this;
            if (Howler._scratchBuffer) {
                node.bufferSource.onended = null;
                node.bufferSource.disconnect(0);
                try {
                    node.bufferSource.buffer = Howler._scratchBuffer;
                } catch (e) {}
            }
            node.bufferSource = null;
            return self;
        },
    };
    var Sound = function (howl) {
        this._parent = howl;
        this.init();
    };
    Sound.prototype = {
        init: function () {
            var self = this;
            var parent = self._parent;
            self._muted = parent._muted;
            self._loop = parent._loop;
            self._volume = parent._volume;
            self._rate = parent._rate;
            self._seek = 0;
            self._paused = true;
            self._ended = true;
            self._sprite = "__default";
            self._id = ++Howler._counter;
            parent._sounds.push(self);
            self.create();
            return self;
        },
        create: function () {
            var self = this;
            var parent = self._parent;
            var volume = Howler._muted || self._muted || self._parent._muted ? 0 : self._volume;
            if (parent._webAudio) {
                self._node = typeof Howler.ctx.createGain === "undefined" ? Howler.ctx.createGainNode() : Howler.ctx.createGain();
                self._node.gain.setValueAtTime(volume, Howler.ctx.currentTime);
                self._node.paused = true;
                self._node.connect(Howler.masterGain);
            } else {
                self._node = new Audio();
                self._errorFn = self._errorListener.bind(self);
                self._node.addEventListener("error", self._errorFn, false);
                self._loadFn = self._loadListener.bind(self);
                self._node.addEventListener(Howler._canPlayEvent, self._loadFn, false);
                self._node.src = parent._src;
                self._node.preload = "auto";
                self._node.volume = volume * Howler.volume();
                self._node.load();
            }
            return self;
        },
        reset: function () {
            var self = this;
            var parent = self._parent;
            self._muted = parent._muted;
            self._loop = parent._loop;
            self._volume = parent._volume;
            self._rate = parent._rate;
            self._seek = 0;
            self._rateSeek = 0;
            self._paused = true;
            self._ended = true;
            self._sprite = "__default";
            self._id = ++Howler._counter;
            return self;
        },
        _errorListener: function () {
            var self = this;
            self._parent._emit("loaderror", self._id, self._node.error ? self._node.error.code : 0);
            self._node.removeEventListener("error", self._errorFn, false);
        },
        _loadListener: function () {
            var self = this;
            var parent = self._parent;
            parent._duration = Math.ceil(self._node.duration * 10) / 10;
            if (Object.keys(parent._sprite).length === 0) {
                parent._sprite = { __default: [0, parent._duration * 1e3] };
            }
            if (parent._state !== "loaded") {
                parent._state = "loaded";
                parent._emit("load");
                parent._loadQueue();
            }
            self._node.removeEventListener(Howler._canPlayEvent, self._loadFn, false);
        },
    };
    var cache = {};
    var loadBuffer = function (self) {
        var url = self._src;
        if (cache[url]) {
            self._duration = cache[url].duration;
            loadSound(self);
            return;
        }
        if (/^data:[^;]+;base64,/.test(url)) {
            var data = atob(url.split(",")[1]);
            var dataView = new Uint8Array(data.length);
            for (var i = 0; i < data.length; ++i) {
                dataView[i] = data.charCodeAt(i);
            }
            decodeAudioData(dataView.buffer, self);
        } else {
            var xhr = new XMLHttpRequest();
            xhr.open("GET", url, true);
            xhr.withCredentials = self._xhrWithCredentials;
            xhr.responseType = "arraybuffer";
            xhr.onload = function () {
                var code = (xhr.status + "")[0];
                if (code !== "0" && code !== "2" && code !== "3") {
                    self._emit("loaderror", null, "Failed loading audio file with status: " + xhr.status + ".");
                    return;
                }
                decodeAudioData(xhr.response, self);
            };
            xhr.onerror = function () {
                if (self._webAudio) {
                    self._html5 = true;
                    self._webAudio = false;
                    self._sounds = [];
                    delete cache[url];
                    self.load();
                }
            };
            safeXhrSend(xhr);
        }
    };
    var safeXhrSend = function (xhr) {
        try {
            xhr.send();
        } catch (e) {
            xhr.onerror();
        }
    };
    var decodeAudioData = function (arraybuffer, self) {
        Howler.ctx.decodeAudioData(
            arraybuffer,
            function (buffer) {
                if (buffer && self._sounds.length > 0) {
                    cache[self._src] = buffer;
                    loadSound(self, buffer);
                }
            },
            function () {
                self._emit("loaderror", null, "Decoding audio data failed.");
            }
        );
    };
    var loadSound = function (self, buffer) {
        if (buffer && !self._duration) {
            self._duration = buffer.duration;
        }
        if (Object.keys(self._sprite).length === 0) {
            self._sprite = { __default: [0, self._duration * 1e3] };
        }
        if (self._state !== "loaded") {
            self._state = "loaded";
            self._emit("load");
            self._loadQueue();
        }
    };
    var setupAudioContext = function () {
        try {
            if (typeof AudioContext !== "undefined") {
                Howler.ctx = new AudioContext();
            } else if (typeof webkitAudioContext !== "undefined") {
                Howler.ctx = new webkitAudioContext();
            } else {
                Howler.usingWebAudio = false;
            }
        } catch (e) {
            Howler.usingWebAudio = false;
        }
        var iOS = /iP(hone|od|ad)/.test(Howler._navigator && Howler._navigator.platform);
        var appVersion = Howler._navigator && Howler._navigator.appVersion.match(/OS (\d+)_(\d+)_?(\d+)?/);
        var version = appVersion ? parseInt(appVersion[1], 10) : null;
        if (iOS && version && version < 9) {
            var safari = /safari/.test(Howler._navigator && Howler._navigator.userAgent.toLowerCase());
            if ((Howler._navigator && Howler._navigator.standalone && !safari) || (Howler._navigator && !Howler._navigator.standalone && !safari)) {
                Howler.usingWebAudio = false;
            }
        }
        if (Howler.usingWebAudio) {
            Howler.masterGain = typeof Howler.ctx.createGain === "undefined" ? Howler.ctx.createGainNode() : Howler.ctx.createGain();
            Howler.masterGain.gain.setValueAtTime(Howler._muted ? 0 : 1, Howler.ctx.currentTime);
            Howler.masterGain.connect(Howler.ctx.destination);
        }
        Howler._setup();
    };
    if (typeof define === "function" && define.amd) {
        define([], function () {
            return { Howler: Howler, Howl: Howl };
        });
    }
    if (typeof exports !== "undefined") {
        exports.Howler = Howler;
        exports.Howl = Howl;
    }
    if (typeof window !== "undefined") {
        window.HowlerGlobal = HowlerGlobal;
        window.Howler = Howler;
        window.Howl = Howl;
        window.Sound = Sound;
    } else if (typeof global !== "undefined") {
        global.HowlerGlobal = HowlerGlobal;
        global.Howler = Howler;
        global.Howl = Howl;
        global.Sound = Sound;
    }
})();
(function () {
    "use strict";
    HowlerGlobal.prototype._pos = [0, 0, 0];
    HowlerGlobal.prototype._orientation = [0, 0, -1, 0, 1, 0];
    HowlerGlobal.prototype.stereo = function (pan) {
        var self = this;
        if (!self.ctx || !self.ctx.listener) {
            return self;
        }
        for (var i = self._howls.length - 1; i >= 0; i--) {
            self._howls[i].stereo(pan);
        }
        return self;
    };
    HowlerGlobal.prototype.pos = function (x, y, z) {
        var self = this;
        if (!self.ctx || !self.ctx.listener) {
            return self;
        }
        y = typeof y !== "number" ? self._pos[1] : y;
        z = typeof z !== "number" ? self._pos[2] : z;
        if (typeof x === "number") {
            self._pos = [x, y, z];
            self.ctx.listener.setPosition(self._pos[0], self._pos[1], self._pos[2]);
        } else {
            return self._pos;
        }
        return self;
    };
    HowlerGlobal.prototype.orientation = function (x, y, z, xUp, yUp, zUp) {
        var self = this;
        if (!self.ctx || !self.ctx.listener) {
            return self;
        }
        var or = self._orientation;
        y = typeof y !== "number" ? or[1] : y;
        z = typeof z !== "number" ? or[2] : z;
        xUp = typeof xUp !== "number" ? or[3] : xUp;
        yUp = typeof yUp !== "number" ? or[4] : yUp;
        zUp = typeof zUp !== "number" ? or[5] : zUp;
        if (typeof x === "number") {
            self._orientation = [x, y, z, xUp, yUp, zUp];
            self.ctx.listener.setOrientation(x, y, z, xUp, yUp, zUp);
        } else {
            return or;
        }
        return self;
    };
    Howl.prototype.init = (function (_super) {
        return function (o) {
            var self = this;
            self._orientation = o.orientation || [1, 0, 0];
            self._stereo = o.stereo || null;
            self._pos = o.pos || null;
            self._pannerAttr = {
                coneInnerAngle: typeof o.coneInnerAngle !== "undefined" ? o.coneInnerAngle : 360,
                coneOuterAngle: typeof o.coneOuterAngle !== "undefined" ? o.coneOuterAngle : 360,
                coneOuterGain: typeof o.coneOuterGain !== "undefined" ? o.coneOuterGain : 0,
                distanceModel: typeof o.distanceModel !== "undefined" ? o.distanceModel : "inverse",
                maxDistance: typeof o.maxDistance !== "undefined" ? o.maxDistance : 1e4,
                panningModel: typeof o.panningModel !== "undefined" ? o.panningModel : "HRTF",
                refDistance: typeof o.refDistance !== "undefined" ? o.refDistance : 1,
                rolloffFactor: typeof o.rolloffFactor !== "undefined" ? o.rolloffFactor : 1,
            };
            self._onstereo = o.onstereo ? [{ fn: o.onstereo }] : [];
            self._onpos = o.onpos ? [{ fn: o.onpos }] : [];
            self._onorientation = o.onorientation ? [{ fn: o.onorientation }] : [];
            return _super.call(this, o);
        };
    })(Howl.prototype.init);
    Howl.prototype.stereo = function (pan, id) {
        var self = this;
        if (!self._webAudio) {
            return self;
        }
        if (self._state !== "loaded") {
            self._queue.push({
                event: "stereo",
                action: function () {
                    self.stereo(pan, id);
                },
            });
            return self;
        }
        var pannerType = typeof Howler.ctx.createStereoPanner === "undefined" ? "spatial" : "stereo";
        if (typeof id === "undefined") {
            if (typeof pan === "number") {
                self._stereo = pan;
                self._pos = [pan, 0, 0];
            } else {
                return self._stereo;
            }
        }
        var ids = self._getSoundIds(id);
        for (var i = 0; i < ids.length; i++) {
            var sound = self._soundById(ids[i]);
            if (sound) {
                if (typeof pan === "number") {
                    sound._stereo = pan;
                    sound._pos = [pan, 0, 0];
                    if (sound._node) {
                        sound._pannerAttr.panningModel = "equalpower";
                        if (!sound._panner || !sound._panner.pan) {
                            setupPanner(sound, pannerType);
                        }
                        if (pannerType === "spatial") {
                            sound._panner.setPosition(pan, 0, 0);
                        } else {
                            sound._panner.pan.setValueAtTime(pan, Howler.ctx.currentTime);
                        }
                    }
                    self._emit("stereo", sound._id);
                } else {
                    return sound._stereo;
                }
            }
        }
        return self;
    };
    Howl.prototype.pos = function (x, y, z, id) {
        var self = this;
        if (!self._webAudio) {
            return self;
        }
        if (self._state !== "loaded") {
            self._queue.push({
                event: "pos",
                action: function () {
                    self.pos(x, y, z, id);
                },
            });
            return self;
        }
        y = typeof y !== "number" ? 0 : y;
        z = typeof z !== "number" ? -0.5 : z;
        if (typeof id === "undefined") {
            if (typeof x === "number") {
                self._pos = [x, y, z];
            } else {
                return self._pos;
            }
        }
        var ids = self._getSoundIds(id);
        for (var i = 0; i < ids.length; i++) {
            var sound = self._soundById(ids[i]);
            if (sound) {
                if (typeof x === "number") {
                    sound._pos = [x, y, z];
                    if (sound._node) {
                        if (!sound._panner || sound._panner.pan) {
                            setupPanner(sound, "spatial");
                        }
                        sound._panner.setPosition(x, y, z);
                    }
                    self._emit("pos", sound._id);
                } else {
                    return sound._pos;
                }
            }
        }
        return self;
    };
    Howl.prototype.orientation = function (x, y, z, id) {
        var self = this;
        if (!self._webAudio) {
            return self;
        }
        if (self._state !== "loaded") {
            self._queue.push({
                event: "orientation",
                action: function () {
                    self.orientation(x, y, z, id);
                },
            });
            return self;
        }
        y = typeof y !== "number" ? self._orientation[1] : y;
        z = typeof z !== "number" ? self._orientation[2] : z;
        if (typeof id === "undefined") {
            if (typeof x === "number") {
                self._orientation = [x, y, z];
            } else {
                return self._orientation;
            }
        }
        var ids = self._getSoundIds(id);
        for (var i = 0; i < ids.length; i++) {
            var sound = self._soundById(ids[i]);
            if (sound) {
                if (typeof x === "number") {
                    sound._orientation = [x, y, z];
                    if (sound._node) {
                        if (!sound._panner) {
                            if (!sound._pos) {
                                sound._pos = self._pos || [0, 0, -0.5];
                            }
                            setupPanner(sound, "spatial");
                        }
                        sound._panner.setOrientation(x, y, z);
                    }
                    self._emit("orientation", sound._id);
                } else {
                    return sound._orientation;
                }
            }
        }
        return self;
    };
    Howl.prototype.pannerAttr = function () {
        var self = this;
        var args = arguments;
        var o, id, sound;
        if (!self._webAudio) {
            return self;
        }
        if (args.length === 0) {
            return self._pannerAttr;
        } else if (args.length === 1) {
            if (typeof args[0] === "object") {
                o = args[0];
                if (typeof id === "undefined") {
                    if (!o.pannerAttr) {
                        o.pannerAttr = {
                            coneInnerAngle: o.coneInnerAngle,
                            coneOuterAngle: o.coneOuterAngle,
                            coneOuterGain: o.coneOuterGain,
                            distanceModel: o.distanceModel,
                            maxDistance: o.maxDistance,
                            refDistance: o.refDistance,
                            rolloffFactor: o.rolloffFactor,
                            panningModel: o.panningModel,
                        };
                    }
                    self._pannerAttr = {
                        coneInnerAngle: typeof o.pannerAttr.coneInnerAngle !== "undefined" ? o.pannerAttr.coneInnerAngle : self._coneInnerAngle,
                        coneOuterAngle: typeof o.pannerAttr.coneOuterAngle !== "undefined" ? o.pannerAttr.coneOuterAngle : self._coneOuterAngle,
                        coneOuterGain: typeof o.pannerAttr.coneOuterGain !== "undefined" ? o.pannerAttr.coneOuterGain : self._coneOuterGain,
                        distanceModel: typeof o.pannerAttr.distanceModel !== "undefined" ? o.pannerAttr.distanceModel : self._distanceModel,
                        maxDistance: typeof o.pannerAttr.maxDistance !== "undefined" ? o.pannerAttr.maxDistance : self._maxDistance,
                        refDistance: typeof o.pannerAttr.refDistance !== "undefined" ? o.pannerAttr.refDistance : self._refDistance,
                        rolloffFactor: typeof o.pannerAttr.rolloffFactor !== "undefined" ? o.pannerAttr.rolloffFactor : self._rolloffFactor,
                        panningModel: typeof o.pannerAttr.panningModel !== "undefined" ? o.pannerAttr.panningModel : self._panningModel,
                    };
                }
            } else {
                sound = self._soundById(parseInt(args[0], 10));
                return sound ? sound._pannerAttr : self._pannerAttr;
            }
        } else if (args.length === 2) {
            o = args[0];
            id = parseInt(args[1], 10);
        }
        var ids = self._getSoundIds(id);
        for (var i = 0; i < ids.length; i++) {
            sound = self._soundById(ids[i]);
            if (sound) {
                var pa = sound._pannerAttr;
                pa = {
                    coneInnerAngle: typeof o.coneInnerAngle !== "undefined" ? o.coneInnerAngle : pa.coneInnerAngle,
                    coneOuterAngle: typeof o.coneOuterAngle !== "undefined" ? o.coneOuterAngle : pa.coneOuterAngle,
                    coneOuterGain: typeof o.coneOuterGain !== "undefined" ? o.coneOuterGain : pa.coneOuterGain,
                    distanceModel: typeof o.distanceModel !== "undefined" ? o.distanceModel : pa.distanceModel,
                    maxDistance: typeof o.maxDistance !== "undefined" ? o.maxDistance : pa.maxDistance,
                    refDistance: typeof o.refDistance !== "undefined" ? o.refDistance : pa.refDistance,
                    rolloffFactor: typeof o.rolloffFactor !== "undefined" ? o.rolloffFactor : pa.rolloffFactor,
                    panningModel: typeof o.panningModel !== "undefined" ? o.panningModel : pa.panningModel,
                };
                var panner = sound._panner;
                if (panner) {
                    panner.coneInnerAngle = pa.coneInnerAngle;
                    panner.coneOuterAngle = pa.coneOuterAngle;
                    panner.coneOuterGain = pa.coneOuterGain;
                    panner.distanceModel = pa.distanceModel;
                    panner.maxDistance = pa.maxDistance;
                    panner.refDistance = pa.refDistance;
                    panner.rolloffFactor = pa.rolloffFactor;
                    panner.panningModel = pa.panningModel;
                } else {
                    if (!sound._pos) {
                        sound._pos = self._pos || [0, 0, -0.5];
                    }
                    setupPanner(sound, "spatial");
                }
            }
        }
        return self;
    };
    Sound.prototype.init = (function (_super) {
        return function () {
            var self = this;
            var parent = self._parent;
            self._orientation = parent._orientation;
            self._stereo = parent._stereo;
            self._pos = parent._pos;
            self._pannerAttr = parent._pannerAttr;
            _super.call(this);
            if (self._stereo) {
                parent.stereo(self._stereo);
            } else if (self._pos) {
                parent.pos(self._pos[0], self._pos[1], self._pos[2], self._id);
            }
        };
    })(Sound.prototype.init);
    Sound.prototype.reset = (function (_super) {
        return function () {
            var self = this;
            var parent = self._parent;
            self._orientation = parent._orientation;
            self._pos = parent._pos;
            self._pannerAttr = parent._pannerAttr;
            return _super.call(this);
        };
    })(Sound.prototype.reset);
    var setupPanner = function (sound, type) {
        type = type || "spatial";
        if (type === "spatial") {
            sound._panner = Howler.ctx.createPanner();
            sound._panner.coneInnerAngle = sound._pannerAttr.coneInnerAngle;
            sound._panner.coneOuterAngle = sound._pannerAttr.coneOuterAngle;
            sound._panner.coneOuterGain = sound._pannerAttr.coneOuterGain;
            sound._panner.distanceModel = sound._pannerAttr.distanceModel;
            sound._panner.maxDistance = sound._pannerAttr.maxDistance;
            sound._panner.refDistance = sound._pannerAttr.refDistance;
            sound._panner.rolloffFactor = sound._pannerAttr.rolloffFactor;
            sound._panner.panningModel = sound._pannerAttr.panningModel;
            sound._panner.setPosition(sound._pos[0], sound._pos[1], sound._pos[2]);
            sound._panner.setOrientation(sound._orientation[0], sound._orientation[1], sound._orientation[2]);
        } else {
            sound._panner = Howler.ctx.createStereoPanner();
            sound._panner.pan.setValueAtTime(sound._stereo, Howler.ctx.currentTime);
        }
        sound._panner.connect(sound._node);
        if (!sound._paused) {
            sound._parent.pause(sound._id, true).play(sound._id, true);
        }
    };
})();
var _Group = function () {
    this._tweens = {};
    this._tweensAddedDuringUpdate = {};
};
_Group.prototype = {
    getAll: function () {
        return Object.keys(this._tweens).map(
            function (tweenId) {
                return this._tweens[tweenId];
            }.bind(this)
        );
    },
    removeAll: function () {
        this._tweens = {};
    },
    add: function (tween) {
        this._tweens[tween.getId()] = tween;
        this._tweensAddedDuringUpdate[tween.getId()] = tween;
    },
    remove: function (tween) {
        delete this._tweens[tween.getId()];
        delete this._tweensAddedDuringUpdate[tween.getId()];
    },
    update: function (time, preserve) {
        var tweenIds = Object.keys(this._tweens);
        if (tweenIds.length === 0) {
            return false;
        }
        time = time !== undefined ? time : TWEEN.now();
        while (tweenIds.length > 0) {
            this._tweensAddedDuringUpdate = {};
            for (var i = 0; i < tweenIds.length; i++) {
                var tween = this._tweens[tweenIds[i]];
                if (tween && tween.update(time) === false) {
                    tween._isPlaying = false;
                    if (!preserve) {
                        delete this._tweens[tweenIds[i]];
                    }
                }
            }
            tweenIds = Object.keys(this._tweensAddedDuringUpdate);
        }
        return true;
    },
};
var TWEEN = new _Group();
TWEEN.Group = _Group;
TWEEN._nextId = 0;
TWEEN.nextId = function () {
    return TWEEN._nextId++;
};
if (typeof window === "undefined" && typeof process !== "undefined") {
    TWEEN.now = function () {
        var time = process.hrtime();
        return time[0] * 1e3 + time[1] / 1e6;
    };
} else if (typeof window !== "undefined" && window.performance !== undefined && window.performance.now !== undefined) {
    TWEEN.now = window.performance.now.bind(window.performance);
} else if (Date.now !== undefined) {
    TWEEN.now = Date.now;
} else {
    TWEEN.now = function () {
        return new Date().getTime();
    };
}
TWEEN.Tween = function (object, group) {
    this._object = object;
    this._valuesStart = {};
    this._valuesEnd = {};
    this._valuesStartRepeat = {};
    this._duration = 1e3;
    this._repeat = 0;
    this._repeatDelayTime = undefined;
    this._yoyo = false;
    this._isPlaying = false;
    this._reversed = false;
    this._delayTime = 0;
    this._startTime = null;
    this._easingFunction = TWEEN.Easing.Linear.None;
    this._interpolationFunction = TWEEN.Interpolation.Linear;
    this._chainedTweens = [];
    this._onStartCallback = null;
    this._onStartCallbackFired = false;
    this._onUpdateCallback = null;
    this._onCompleteCallback = null;
    this._onStopCallback = null;
    this._group = group || TWEEN;
    this._id = TWEEN.nextId();
};
TWEEN.Tween.prototype = {
    getId: function getId() {
        return this._id;
    },
    isPlaying: function isPlaying() {
        return this._isPlaying;
    },
    to: function to(properties, duration) {
        this._valuesEnd = properties;
        if (duration !== undefined) {
            this._duration = duration;
        }
        return this;
    },
    start: function start(time) {
        this._group.add(this);
        this._isPlaying = true;
        this._onStartCallbackFired = false;
        this._startTime = time !== undefined ? (typeof time === "string" ? TWEEN.now() + parseFloat(time) : time) : TWEEN.now();
        this._startTime += this._delayTime;
        for (var property in this._valuesEnd) {
            if (this._valuesEnd[property] instanceof Array) {
                if (this._valuesEnd[property].length === 0) {
                    continue;
                }
                this._valuesEnd[property] = [this._object[property]].concat(this._valuesEnd[property]);
            }
            if (this._object[property] === undefined) {
                continue;
            }
            this._valuesStart[property] = this._object[property];
            if (this._valuesStart[property] instanceof Array === false) {
                this._valuesStart[property] *= 1;
            }
            this._valuesStartRepeat[property] = this._valuesStart[property] || 0;
        }
        return this;
    },
    stop: function stop() {
        if (!this._isPlaying) {
            return this;
        }
        this._group.remove(this);
        this._isPlaying = false;
        if (this._onStopCallback !== null) {
            this._onStopCallback(this._object);
        }
        this.stopChainedTweens();
        return this;
    },
    end: function end() {
        this.update(this._startTime + this._duration);
        return this;
    },
    stopChainedTweens: function stopChainedTweens() {
        for (var i = 0, numChainedTweens = this._chainedTweens.length; i < numChainedTweens; i++) {
            this._chainedTweens[i].stop();
        }
    },
    delay: function delay(amount) {
        this._delayTime = amount;
        return this;
    },
    repeat: function repeat(times) {
        this._repeat = times;
        return this;
    },
    repeatDelay: function repeatDelay(amount) {
        this._repeatDelayTime = amount;
        return this;
    },
    yoyo: function yoyo(yoyo) {
        this._yoyo = yoyo;
        return this;
    },
    easing: function easing(easing) {
        this._easingFunction = easing;
        return this;
    },
    interpolation: function interpolation(interpolation) {
        this._interpolationFunction = interpolation;
        return this;
    },
    chain: function chain() {
        this._chainedTweens = arguments;
        return this;
    },
    onStart: function onStart(callback) {
        this._onStartCallback = callback;
        return this;
    },
    onUpdate: function onUpdate(callback) {
        this._onUpdateCallback = callback;
        return this;
    },
    onComplete: function onComplete(callback) {
        this._onCompleteCallback = callback;
        return this;
    },
    onStop: function onStop(callback) {
        this._onStopCallback = callback;
        return this;
    },
    update: function update(time) {
        var property;
        var elapsed;
        var value;
        if (time < this._startTime) {
            return true;
        }
        if (this._onStartCallbackFired === false) {
            if (this._onStartCallback !== null) {
                this._onStartCallback(this._object);
            }
            this._onStartCallbackFired = true;
        }
        elapsed = (time - this._startTime) / this._duration;
        elapsed = elapsed > 1 ? 1 : elapsed;
        value = this._easingFunction(elapsed);
        for (property in this._valuesEnd) {
            if (this._valuesStart[property] === undefined) {
                continue;
            }
            var start = this._valuesStart[property] || 0;
            var end = this._valuesEnd[property];
            if (end instanceof Array) {
                this._object[property] = this._interpolationFunction(end, value);
            } else {
                if (typeof end === "string") {
                    if (end.charAt(0) === "+" || end.charAt(0) === "-") {
                        end = start + parseFloat(end);
                    } else {
                        end = parseFloat(end);
                    }
                }
                if (typeof end === "number") {
                    this._object[property] = start + (end - start) * value;
                }
            }
        }
        if (this._onUpdateCallback !== null) {
            this._onUpdateCallback(this._object);
        }
        if (elapsed === 1) {
            if (this._repeat > 0) {
                if (isFinite(this._repeat)) {
                    this._repeat--;
                }
                for (property in this._valuesStartRepeat) {
                    if (typeof this._valuesEnd[property] === "string") {
                        this._valuesStartRepeat[property] = this._valuesStartRepeat[property] + parseFloat(this._valuesEnd[property]);
                    }
                    if (this._yoyo) {
                        var tmp = this._valuesStartRepeat[property];
                        this._valuesStartRepeat[property] = this._valuesEnd[property];
                        this._valuesEnd[property] = tmp;
                    }
                    this._valuesStart[property] = this._valuesStartRepeat[property];
                }
                if (this._yoyo) {
                    this._reversed = !this._reversed;
                }
                if (this._repeatDelayTime !== undefined) {
                    this._startTime = time + this._repeatDelayTime;
                } else {
                    this._startTime = time + this._delayTime;
                }
                return true;
            } else {
                if (this._onCompleteCallback !== null) {
                    this._onCompleteCallback(this._object);
                }
                for (var i = 0, numChainedTweens = this._chainedTweens.length; i < numChainedTweens; i++) {
                    this._chainedTweens[i].start(this._startTime + this._duration);
                }
                return false;
            }
        }
        return true;
    },
};
TWEEN.Easing = {
    Linear: {
        None: function (k) {
            return k;
        },
    },
    Quadratic: {
        In: function (k) {
            return k * k;
        },
        Out: function (k) {
            return k * (2 - k);
        },
        InOut: function (k) {
            if ((k *= 2) < 1) {
                return 0.5 * k * k;
            }
            return -0.5 * (--k * (k - 2) - 1);
        },
    },
    Cubic: {
        In: function (k) {
            return k * k * k;
        },
        Out: function (k) {
            return --k * k * k + 1;
        },
        InOut: function (k) {
            if ((k *= 2) < 1) {
                return 0.5 * k * k * k;
            }
            return 0.5 * ((k -= 2) * k * k + 2);
        },
    },
    Quartic: {
        In: function (k) {
            return k * k * k * k;
        },
        Out: function (k) {
            return 1 - --k * k * k * k;
        },
        InOut: function (k) {
            if ((k *= 2) < 1) {
                return 0.5 * k * k * k * k;
            }
            return -0.5 * ((k -= 2) * k * k * k - 2);
        },
    },
    Quintic: {
        In: function (k) {
            return k * k * k * k * k;
        },
        Out: function (k) {
            return --k * k * k * k * k + 1;
        },
        InOut: function (k) {
            if ((k *= 2) < 1) {
                return 0.5 * k * k * k * k * k;
            }
            return 0.5 * ((k -= 2) * k * k * k * k + 2);
        },
    },
    Sinusoidal: {
        In: function (k) {
            return 1 - Math.cos((k * Math.PI) / 2);
        },
        Out: function (k) {
            return Math.sin((k * Math.PI) / 2);
        },
        InOut: function (k) {
            return 0.5 * (1 - Math.cos(Math.PI * k));
        },
    },
    Exponential: {
        In: function (k) {
            return k === 0 ? 0 : Math.pow(1024, k - 1);
        },
        Out: function (k) {
            return k === 1 ? 1 : 1 - Math.pow(2, -10 * k);
        },
        InOut: function (k) {
            if (k === 0) {
                return 0;
            }
            if (k === 1) {
                return 1;
            }
            if ((k *= 2) < 1) {
                return 0.5 * Math.pow(1024, k - 1);
            }
            return 0.5 * (-Math.pow(2, -10 * (k - 1)) + 2);
        },
    },
    Circular: {
        In: function (k) {
            return 1 - Math.sqrt(1 - k * k);
        },
        Out: function (k) {
            return Math.sqrt(1 - --k * k);
        },
        InOut: function (k) {
            if ((k *= 2) < 1) {
                return -0.5 * (Math.sqrt(1 - k * k) - 1);
            }
            return 0.5 * (Math.sqrt(1 - (k -= 2) * k) + 1);
        },
    },
    Elastic: {
        In: function (k) {
            if (k === 0) {
                return 0;
            }
            if (k === 1) {
                return 1;
            }
            return -Math.pow(2, 10 * (k - 1)) * Math.sin((k - 1.1) * 5 * Math.PI);
        },
        Out: function (k) {
            if (k === 0) {
                return 0;
            }
            if (k === 1) {
                return 1;
            }
            return Math.pow(2, -10 * k) * Math.sin((k - 0.1) * 5 * Math.PI) + 1;
        },
        InOut: function (k) {
            if (k === 0) {
                return 0;
            }
            if (k === 1) {
                return 1;
            }
            k *= 2;
            if (k < 1) {
                return -0.5 * Math.pow(2, 10 * (k - 1)) * Math.sin((k - 1.1) * 5 * Math.PI);
            }
            return 0.5 * Math.pow(2, -10 * (k - 1)) * Math.sin((k - 1.1) * 5 * Math.PI) + 1;
        },
    },
    Back: {
        In: function (k) {
            var s = 1.70158;
            return k * k * ((s + 1) * k - s);
        },
        Out: function (k) {
            var s = 1.70158;
            return --k * k * ((s + 1) * k + s) + 1;
        },
        InOut: function (k) {
            var s = 1.70158 * 1.525;
            if ((k *= 2) < 1) {
                return 0.5 * (k * k * ((s + 1) * k - s));
            }
            return 0.5 * ((k -= 2) * k * ((s + 1) * k + s) + 2);
        },
    },
    Bounce: {
        In: function (k) {
            return 1 - TWEEN.Easing.Bounce.Out(1 - k);
        },
        Out: function (k) {
            if (k < 1 / 2.75) {
                return 7.5625 * k * k;
            } else if (k < 2 / 2.75) {
                return 7.5625 * (k -= 1.5 / 2.75) * k + 0.75;
            } else if (k < 2.5 / 2.75) {
                return 7.5625 * (k -= 2.25 / 2.75) * k + 0.9375;
            } else {
                return 7.5625 * (k -= 2.625 / 2.75) * k + 0.984375;
            }
        },
        InOut: function (k) {
            if (k < 0.5) {
                return TWEEN.Easing.Bounce.In(k * 2) * 0.5;
            }
            return TWEEN.Easing.Bounce.Out(k * 2 - 1) * 0.5 + 0.5;
        },
    },
};
TWEEN.Interpolation = {
    Linear: function (v, k) {
        var m = v.length - 1;
        var f = m * k;
        var i = Math.floor(f);
        var fn = TWEEN.Interpolation.Utils.Linear;
        if (k < 0) {
            return fn(v[0], v[1], f);
        }
        if (k > 1) {
            return fn(v[m], v[m - 1], m - f);
        }
        return fn(v[i], v[i + 1 > m ? m : i + 1], f - i);
    },
    Bezier: function (v, k) {
        var b = 0;
        var n = v.length - 1;
        var pw = Math.pow;
        var bn = TWEEN.Interpolation.Utils.Bernstein;
        for (var i = 0; i <= n; i++) {
            b += pw(1 - k, n - i) * pw(k, i) * v[i] * bn(n, i);
        }
        return b;
    },
    CatmullRom: function (v, k) {
        var m = v.length - 1;
        var f = m * k;
        var i = Math.floor(f);
        var fn = TWEEN.Interpolation.Utils.CatmullRom;
        if (v[0] === v[m]) {
            if (k < 0) {
                i = Math.floor((f = m * (1 + k)));
            }
            return fn(v[(i - 1 + m) % m], v[i], v[(i + 1) % m], v[(i + 2) % m], f - i);
        } else {
            if (k < 0) {
                return v[0] - (fn(v[0], v[0], v[1], v[1], -f) - v[0]);
            }
            if (k > 1) {
                return v[m] - (fn(v[m], v[m], v[m - 1], v[m - 1], f - m) - v[m]);
            }
            return fn(v[i ? i - 1 : 0], v[i], v[m < i + 1 ? m : i + 1], v[m < i + 2 ? m : i + 2], f - i);
        }
    },
    Utils: {
        Linear: function (p0, p1, t) {
            return (p1 - p0) * t + p0;
        },
        Bernstein: function (n, i) {
            var fc = TWEEN.Interpolation.Utils.Factorial;
            return fc(n) / fc(i) / fc(n - i);
        },
        Factorial: (function () {
            var a = [1];
            return function (n) {
                var s = 1;
                if (a[n]) {
                    return a[n];
                }
                for (var i = n; i > 1; i--) {
                    s *= i;
                }
                a[n] = s;
                return s;
            };
        })(),
        CatmullRom: function (p0, p1, p2, p3, t) {
            var v0 = (p2 - p0) * 0.5;
            var v1 = (p3 - p1) * 0.5;
            var t2 = t * t;
            var t3 = t * t2;
            return (2 * p1 - 2 * p2 + v0 + v1) * t3 + (-3 * p1 + 3 * p2 - 2 * v0 - v1) * t2 + v0 * t + p1;
        },
    },
};
(function (root) {
    if (typeof define === "function" && define.amd) {
        define([], function () {
            return TWEEN;
        });
    } else if (typeof module !== "undefined" && typeof exports === "object") {
        module.exports = TWEEN;
    } else if (root !== undefined) {
        root.TWEEN = TWEEN;
    }
})(this);
!(function (e) {
    if ("object" == typeof exports && "undefined" != typeof module) module.exports = e();
    else if ("function" == typeof define && define.amd) define([], e);
    else {
        ("undefined" != typeof window ? window : "undefined" != typeof global ? global : "undefined" != typeof self ? self : this).pako = e();
    }
})(function () {
    return (function e(t, i, n) {
        function a(o, s) {
            if (!i[o]) {
                if (!t[o]) {
                    var f = "function" == typeof require && require;
                    if (!s && f) return f(o, !0);
                    if (r) return r(o, !0);
                    var l = new Error("Cannot find module '" + o + "'");
                    throw ((l.code = "MODULE_NOT_FOUND"), l);
                }
                var d = (i[o] = { exports: {} });
                t[o][0].call(
                    d.exports,
                    function (e) {
                        var i = t[o][1][e];
                        return a(i || e);
                    },
                    d,
                    d.exports,
                    e,
                    t,
                    i,
                    n
                );
            }
            return i[o].exports;
        }
        for (var r = "function" == typeof require && require, o = 0; o < n.length; o++) a(n[o]);
        return a;
    })(
        {
            1: [
                function (e, t, i) {
                    "use strict";
                    function n(e, t) {
                        return Object.prototype.hasOwnProperty.call(e, t);
                    }
                    var a = "undefined" != typeof Uint8Array && "undefined" != typeof Uint16Array && "undefined" != typeof Int32Array;
                    (i.assign = function (e) {
                        for (var t = Array.prototype.slice.call(arguments, 1); t.length; ) {
                            var i = t.shift();
                            if (i) {
                                if ("object" != typeof i) throw new TypeError(i + "must be non-object");
                                for (var a in i) n(i, a) && (e[a] = i[a]);
                            }
                        }
                        return e;
                    }),
                        (i.shrinkBuf = function (e, t) {
                            return e.length === t ? e : e.subarray ? e.subarray(0, t) : ((e.length = t), e);
                        });
                    var r = {
                            arraySet: function (e, t, i, n, a) {
                                if (t.subarray && e.subarray) e.set(t.subarray(i, i + n), a);
                                else for (var r = 0; r < n; r++) e[a + r] = t[i + r];
                            },
                            flattenChunks: function (e) {
                                var t, i, n, a, r, o;
                                for (n = 0, t = 0, i = e.length; t < i; t++) n += e[t].length;
                                for (o = new Uint8Array(n), a = 0, t = 0, i = e.length; t < i; t++) (r = e[t]), o.set(r, a), (a += r.length);
                                return o;
                            },
                        },
                        o = {
                            arraySet: function (e, t, i, n, a) {
                                for (var r = 0; r < n; r++) e[a + r] = t[i + r];
                            },
                            flattenChunks: function (e) {
                                return [].concat.apply([], e);
                            },
                        };
                    (i.setTyped = function (e) {
                        e ? ((i.Buf8 = Uint8Array), (i.Buf16 = Uint16Array), (i.Buf32 = Int32Array), i.assign(i, r)) : ((i.Buf8 = Array), (i.Buf16 = Array), (i.Buf32 = Array), i.assign(i, o));
                    }),
                        i.setTyped(a);
                },
                {},
            ],
            2: [
                function (e, t, i) {
                    "use strict";
                    function n(e, t) {
                        if (t < 65537 && ((e.subarray && o) || (!e.subarray && r))) return String.fromCharCode.apply(null, a.shrinkBuf(e, t));
                        for (var i = "", n = 0; n < t; n++) i += String.fromCharCode(e[n]);
                        return i;
                    }
                    var a = e("./common"),
                        r = !0,
                        o = !0;
                    try {
                        String.fromCharCode.apply(null, [0]);
                    } catch (e) {
                        r = !1;
                    }
                    try {
                        String.fromCharCode.apply(null, new Uint8Array(1));
                    } catch (e) {
                        o = !1;
                    }
                    for (var s = new a.Buf8(256), f = 0; f < 256; f++) s[f] = f >= 252 ? 6 : f >= 248 ? 5 : f >= 240 ? 4 : f >= 224 ? 3 : f >= 192 ? 2 : 1;
                    (s[254] = s[254] = 1),
                        (i.string2buf = function (e) {
                            var t,
                                i,
                                n,
                                r,
                                o,
                                s = e.length,
                                f = 0;
                            for (r = 0; r < s; r++)
                                55296 == (64512 & (i = e.charCodeAt(r))) && r + 1 < s && 56320 == (64512 & (n = e.charCodeAt(r + 1))) && ((i = 65536 + ((i - 55296) << 10) + (n - 56320)), r++),
                                    (f += i < 128 ? 1 : i < 2048 ? 2 : i < 65536 ? 3 : 4);
                            for (t = new a.Buf8(f), o = 0, r = 0; o < f; r++)
                                55296 == (64512 & (i = e.charCodeAt(r))) && r + 1 < s && 56320 == (64512 & (n = e.charCodeAt(r + 1))) && ((i = 65536 + ((i - 55296) << 10) + (n - 56320)), r++),
                                    i < 128
                                        ? (t[o++] = i)
                                        : i < 2048
                                        ? ((t[o++] = 192 | (i >>> 6)), (t[o++] = 128 | (63 & i)))
                                        : i < 65536
                                            ? ((t[o++] = 224 | (i >>> 12)), (t[o++] = 128 | ((i >>> 6) & 63)), (t[o++] = 128 | (63 & i)))
                                            : ((t[o++] = 240 | (i >>> 18)), (t[o++] = 128 | ((i >>> 12) & 63)), (t[o++] = 128 | ((i >>> 6) & 63)), (t[o++] = 128 | (63 & i)));
                            return t;
                        }),
                        (i.buf2binstring = function (e) {
                            return n(e, e.length);
                        }),
                        (i.binstring2buf = function (e) {
                            for (var t = new a.Buf8(e.length), i = 0, n = t.length; i < n; i++) t[i] = e.charCodeAt(i);
                            return t;
                        }),
                        (i.buf2string = function (e, t) {
                            var i,
                                a,
                                r,
                                o,
                                f = t || e.length,
                                l = new Array(2 * f);
                            for (a = 0, i = 0; i < f; )
                                if ((r = e[i++]) < 128) l[a++] = r;
                                else if ((o = s[r]) > 4) (l[a++] = 65533), (i += o - 1);
                                else {
                                    for (r &= 2 === o ? 31 : 3 === o ? 15 : 7; o > 1 && i < f; ) (r = (r << 6) | (63 & e[i++])), o--;
                                    o > 1 ? (l[a++] = 65533) : r < 65536 ? (l[a++] = r) : ((r -= 65536), (l[a++] = 55296 | ((r >> 10) & 1023)), (l[a++] = 56320 | (1023 & r)));
                                }
                            return n(l, a);
                        }),
                        (i.utf8border = function (e, t) {
                            var i;
                            for ((t = t || e.length) > e.length && (t = e.length), i = t - 1; i >= 0 && 128 == (192 & e[i]); ) i--;
                            return i < 0 ? t : 0 === i ? t : i + s[e[i]] > t ? i : t;
                        });
                },
                { "./common": 1 },
            ],
            3: [
                function (e, t, i) {
                    "use strict";
                    t.exports = function (e, t, i, n) {
                        for (var a = (65535 & e) | 0, r = ((e >>> 16) & 65535) | 0, o = 0; 0 !== i; ) {
                            i -= o = i > 2e3 ? 2e3 : i;
                            do {
                                r = (r + (a = (a + t[n++]) | 0)) | 0;
                            } while (--o);
                            (a %= 65521), (r %= 65521);
                        }
                        return a | (r << 16) | 0;
                    };
                },
                {},
            ],
            4: [
                function (e, t, i) {
                    "use strict";
                    t.exports = {
                        Z_NO_FLUSH: 0,
                        Z_PARTIAL_FLUSH: 1,
                        Z_SYNC_FLUSH: 2,
                        Z_FULL_FLUSH: 3,
                        Z_FINISH: 4,
                        Z_BLOCK: 5,
                        Z_TREES: 6,
                        Z_OK: 0,
                        Z_STREAM_END: 1,
                        Z_NEED_DICT: 2,
                        Z_ERRNO: -1,
                        Z_STREAM_ERROR: -2,
                        Z_DATA_ERROR: -3,
                        Z_BUF_ERROR: -5,
                        Z_NO_COMPRESSION: 0,
                        Z_BEST_SPEED: 1,
                        Z_BEST_COMPRESSION: 9,
                        Z_DEFAULT_COMPRESSION: -1,
                        Z_FILTERED: 1,
                        Z_HUFFMAN_ONLY: 2,
                        Z_RLE: 3,
                        Z_FIXED: 4,
                        Z_DEFAULT_STRATEGY: 0,
                        Z_BINARY: 0,
                        Z_TEXT: 1,
                        Z_UNKNOWN: 2,
                        Z_DEFLATED: 8,
                    };
                },
                {},
            ],
            5: [
                function (e, t, i) {
                    "use strict";
                    var n = (function () {
                        for (var e, t = [], i = 0; i < 256; i++) {
                            e = i;
                            for (var n = 0; n < 8; n++) e = 1 & e ? 3988292384 ^ (e >>> 1) : e >>> 1;
                            t[i] = e;
                        }
                        return t;
                    })();
                    t.exports = function (e, t, i, a) {
                        var r = n,
                            o = a + i;
                        e ^= -1;
                        for (var s = a; s < o; s++) e = (e >>> 8) ^ r[255 & (e ^ t[s])];
                        return -1 ^ e;
                    };
                },
                {},
            ],
            6: [
                function (e, t, i) {
                    "use strict";
                    t.exports = function () {
                        (this.text = 0), (this.time = 0), (this.xflags = 0), (this.os = 0), (this.extra = null), (this.extra_len = 0), (this.name = ""), (this.comment = ""), (this.hcrc = 0), (this.done = !1);
                    };
                },
                {},
            ],
            7: [
                function (e, t, i) {
                    "use strict";
                    t.exports = function (e, t) {
                        var i, n, a, r, o, s, f, l, d, u, c, h, b, w, m, k, _, g, v, p, x, y, S, E, B;
                        (i = e.state),
                            (n = e.next_in),
                            (E = e.input),
                            (a = n + (e.avail_in - 5)),
                            (r = e.next_out),
                            (B = e.output),
                            (o = r - (t - e.avail_out)),
                            (s = r + (e.avail_out - 257)),
                            (f = i.dmax),
                            (l = i.wsize),
                            (d = i.whave),
                            (u = i.wnext),
                            (c = i.window),
                            (h = i.hold),
                            (b = i.bits),
                            (w = i.lencode),
                            (m = i.distcode),
                            (k = (1 << i.lenbits) - 1),
                            (_ = (1 << i.distbits) - 1);
                        e: do {
                            b < 15 && ((h += E[n++] << b), (b += 8), (h += E[n++] << b), (b += 8)), (g = w[h & k]);
                            t: for (;;) {
                                if (((v = g >>> 24), (h >>>= v), (b -= v), 0 === (v = (g >>> 16) & 255))) B[r++] = 65535 & g;
                                else {
                                    if (!(16 & v)) {
                                        if (0 == (64 & v)) {
                                            g = w[(65535 & g) + (h & ((1 << v) - 1))];
                                            continue t;
                                        }
                                        if (32 & v) {
                                            i.mode = 12;
                                            break e;
                                        }
                                        (e.msg = "invalid literal/length code"), (i.mode = 30);
                                        break e;
                                    }
                                    (p = 65535 & g),
                                    (v &= 15) && (b < v && ((h += E[n++] << b), (b += 8)), (p += h & ((1 << v) - 1)), (h >>>= v), (b -= v)),
                                    b < 15 && ((h += E[n++] << b), (b += 8), (h += E[n++] << b), (b += 8)),
                                        (g = m[h & _]);
                                    i: for (;;) {
                                        if (((v = g >>> 24), (h >>>= v), (b -= v), !(16 & (v = (g >>> 16) & 255)))) {
                                            if (0 == (64 & v)) {
                                                g = m[(65535 & g) + (h & ((1 << v) - 1))];
                                                continue i;
                                            }
                                            (e.msg = "invalid distance code"), (i.mode = 30);
                                            break e;
                                        }
                                        if (((x = 65535 & g), (v &= 15), b < v && ((h += E[n++] << b), (b += 8) < v && ((h += E[n++] << b), (b += 8))), (x += h & ((1 << v) - 1)) > f)) {
                                            (e.msg = "invalid distance too far back"), (i.mode = 30);
                                            break e;
                                        }
                                        if (((h >>>= v), (b -= v), (v = r - o), x > v)) {
                                            if ((v = x - v) > d && i.sane) {
                                                (e.msg = "invalid distance too far back"), (i.mode = 30);
                                                break e;
                                            }
                                            if (((y = 0), (S = c), 0 === u)) {
                                                if (((y += l - v), v < p)) {
                                                    p -= v;
                                                    do {
                                                        B[r++] = c[y++];
                                                    } while (--v);
                                                    (y = r - x), (S = B);
                                                }
                                            } else if (u < v) {
                                                if (((y += l + u - v), (v -= u) < p)) {
                                                    p -= v;
                                                    do {
                                                        B[r++] = c[y++];
                                                    } while (--v);
                                                    if (((y = 0), u < p)) {
                                                        p -= v = u;
                                                        do {
                                                            B[r++] = c[y++];
                                                        } while (--v);
                                                        (y = r - x), (S = B);
                                                    }
                                                }
                                            } else if (((y += u - v), v < p)) {
                                                p -= v;
                                                do {
                                                    B[r++] = c[y++];
                                                } while (--v);
                                                (y = r - x), (S = B);
                                            }
                                            for (; p > 2; ) (B[r++] = S[y++]), (B[r++] = S[y++]), (B[r++] = S[y++]), (p -= 3);
                                            p && ((B[r++] = S[y++]), p > 1 && (B[r++] = S[y++]));
                                        } else {
                                            y = r - x;
                                            do {
                                                (B[r++] = B[y++]), (B[r++] = B[y++]), (B[r++] = B[y++]), (p -= 3);
                                            } while (p > 2);
                                            p && ((B[r++] = B[y++]), p > 1 && (B[r++] = B[y++]));
                                        }
                                        break;
                                    }
                                }
                                break;
                            }
                        } while (n < a && r < s);
                        (n -= p = b >> 3), (h &= (1 << (b -= p << 3)) - 1), (e.next_in = n), (e.next_out = r), (e.avail_in = n < a ? a - n + 5 : 5 - (n - a)), (e.avail_out = r < s ? s - r + 257 : 257 - (r - s)), (i.hold = h), (i.bits = b);
                    };
                },
                {},
            ],
            8: [
                function (e, t, i) {
                    "use strict";
                    function n(e) {
                        return ((e >>> 24) & 255) + ((e >>> 8) & 65280) + ((65280 & e) << 8) + ((255 & e) << 24);
                    }
                    function a() {
                        (this.mode = 0),
                            (this.last = !1),
                            (this.wrap = 0),
                            (this.havedict = !1),
                            (this.flags = 0),
                            (this.dmax = 0),
                            (this.check = 0),
                            (this.total = 0),
                            (this.head = null),
                            (this.wbits = 0),
                            (this.wsize = 0),
                            (this.whave = 0),
                            (this.wnext = 0),
                            (this.window = null),
                            (this.hold = 0),
                            (this.bits = 0),
                            (this.length = 0),
                            (this.offset = 0),
                            (this.extra = 0),
                            (this.lencode = null),
                            (this.distcode = null),
                            (this.lenbits = 0),
                            (this.distbits = 0),
                            (this.ncode = 0),
                            (this.nlen = 0),
                            (this.ndist = 0),
                            (this.have = 0),
                            (this.next = null),
                            (this.lens = new h.Buf16(320)),
                            (this.work = new h.Buf16(288)),
                            (this.lendyn = null),
                            (this.distdyn = null),
                            (this.sane = 0),
                            (this.back = 0),
                            (this.was = 0);
                    }
                    function r(e) {
                        var t;
                        return e && e.state
                            ? ((t = e.state),
                                (e.total_in = e.total_out = t.total = 0),
                                (e.msg = ""),
                            t.wrap && (e.adler = 1 & t.wrap),
                                (t.mode = O),
                                (t.last = 0),
                                (t.havedict = 0),
                                (t.dmax = 32768),
                                (t.head = null),
                                (t.hold = 0),
                                (t.bits = 0),
                                (t.lencode = t.lendyn = new h.Buf32(de)),
                                (t.distcode = t.distdyn = new h.Buf32(ue)),
                                (t.sane = 1),
                                (t.back = -1),
                                S)
                            : Z;
                    }
                    function o(e) {
                        var t;
                        return e && e.state ? ((t = e.state), (t.wsize = 0), (t.whave = 0), (t.wnext = 0), r(e)) : Z;
                    }
                    function s(e, t) {
                        var i, n;
                        return e && e.state
                            ? ((n = e.state),
                                t < 0 ? ((i = 0), (t = -t)) : ((i = 1 + (t >> 4)), t < 48 && (t &= 15)),
                                t && (t < 8 || t > 15) ? Z : (null !== n.window && n.wbits !== t && (n.window = null), (n.wrap = i), (n.wbits = t), o(e)))
                            : Z;
                    }
                    function f(e, t) {
                        var i, n;
                        return e ? ((n = new a()), (e.state = n), (n.window = null), (i = s(e, t)) !== S && (e.state = null), i) : Z;
                    }
                    function l(e) {
                        if (he) {
                            var t;
                            for (u = new h.Buf32(512), c = new h.Buf32(32), t = 0; t < 144; ) e.lens[t++] = 8;
                            for (; t < 256; ) e.lens[t++] = 9;
                            for (; t < 280; ) e.lens[t++] = 7;
                            for (; t < 288; ) e.lens[t++] = 8;
                            for (k(g, e.lens, 0, 288, u, 0, e.work, { bits: 9 }), t = 0; t < 32; ) e.lens[t++] = 5;
                            k(v, e.lens, 0, 32, c, 0, e.work, { bits: 5 }), (he = !1);
                        }
                        (e.lencode = u), (e.lenbits = 9), (e.distcode = c), (e.distbits = 5);
                    }
                    function d(e, t, i, n) {
                        var a,
                            r = e.state;
                        return (
                            null === r.window && ((r.wsize = 1 << r.wbits), (r.wnext = 0), (r.whave = 0), (r.window = new h.Buf8(r.wsize))),
                                n >= r.wsize
                                    ? (h.arraySet(r.window, t, i - r.wsize, r.wsize, 0), (r.wnext = 0), (r.whave = r.wsize))
                                    : ((a = r.wsize - r.wnext) > n && (a = n),
                                        h.arraySet(r.window, t, i - n, a, r.wnext),
                                        (n -= a) ? (h.arraySet(r.window, t, i - n, n, 0), (r.wnext = n), (r.whave = r.wsize)) : ((r.wnext += a), r.wnext === r.wsize && (r.wnext = 0), r.whave < r.wsize && (r.whave += a))),
                                0
                        );
                    }
                    var u,
                        c,
                        h = e("../utils/common"),
                        b = e("./adler32"),
                        w = e("./crc32"),
                        m = e("./inffast"),
                        k = e("./inftrees"),
                        _ = 0,
                        g = 1,
                        v = 2,
                        p = 4,
                        x = 5,
                        y = 6,
                        S = 0,
                        E = 1,
                        B = 2,
                        Z = -2,
                        A = -3,
                        z = -4,
                        R = -5,
                        N = 8,
                        O = 1,
                        C = 2,
                        I = 3,
                        T = 4,
                        U = 5,
                        D = 6,
                        F = 7,
                        L = 8,
                        H = 9,
                        j = 10,
                        M = 11,
                        K = 12,
                        P = 13,
                        Y = 14,
                        q = 15,
                        G = 16,
                        X = 17,
                        W = 18,
                        J = 19,
                        Q = 20,
                        V = 21,
                        $ = 22,
                        ee = 23,
                        te = 24,
                        ie = 25,
                        ne = 26,
                        ae = 27,
                        re = 28,
                        oe = 29,
                        se = 30,
                        fe = 31,
                        le = 32,
                        de = 852,
                        ue = 592,
                        ce = 15,
                        he = !0;
                    (i.inflateReset = o),
                        (i.inflateReset2 = s),
                        (i.inflateResetKeep = r),
                        (i.inflateInit = function (e) {
                            return f(e, ce);
                        }),
                        (i.inflateInit2 = f),
                        (i.inflate = function (e, t) {
                            var i,
                                a,
                                r,
                                o,
                                s,
                                f,
                                u,
                                c,
                                de,
                                ue,
                                ce,
                                he,
                                be,
                                we,
                                me,
                                ke,
                                _e,
                                ge,
                                ve,
                                pe,
                                xe,
                                ye,
                                Se,
                                Ee,
                                Be = 0,
                                Ze = new h.Buf8(4),
                                Ae = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];
                            if (!e || !e.state || !e.output || (!e.input && 0 !== e.avail_in)) return Z;
                            (i = e.state).mode === K && (i.mode = P), (s = e.next_out), (r = e.output), (u = e.avail_out), (o = e.next_in), (a = e.input), (f = e.avail_in), (c = i.hold), (de = i.bits), (ue = f), (ce = u), (ye = S);
                            e: for (;;)
                                switch (i.mode) {
                                    case O:
                                        if (0 === i.wrap) {
                                            i.mode = P;
                                            break;
                                        }
                                        for (; de < 16; ) {
                                            if (0 === f) break e;
                                            f--, (c += a[o++] << de), (de += 8);
                                        }
                                        if (2 & i.wrap && 35615 === c) {
                                            (i.check = 0), (Ze[0] = 255 & c), (Ze[1] = (c >>> 8) & 255), (i.check = w(i.check, Ze, 2, 0)), (c = 0), (de = 0), (i.mode = C);
                                            break;
                                        }
                                        if (((i.flags = 0), i.head && (i.head.done = !1), !(1 & i.wrap) || (((255 & c) << 8) + (c >> 8)) % 31)) {
                                            (e.msg = "incorrect header check"), (i.mode = se);
                                            break;
                                        }
                                        if ((15 & c) !== N) {
                                            (e.msg = "unknown compression method"), (i.mode = se);
                                            break;
                                        }
                                        if (((c >>>= 4), (de -= 4), (xe = 8 + (15 & c)), 0 === i.wbits)) i.wbits = xe;
                                        else if (xe > i.wbits) {
                                            (e.msg = "invalid window size"), (i.mode = se);
                                            break;
                                        }
                                        (i.dmax = 1 << xe), (e.adler = i.check = 1), (i.mode = 512 & c ? j : K), (c = 0), (de = 0);
                                        break;
                                    case C:
                                        for (; de < 16; ) {
                                            if (0 === f) break e;
                                            f--, (c += a[o++] << de), (de += 8);
                                        }
                                        if (((i.flags = c), (255 & i.flags) !== N)) {
                                            (e.msg = "unknown compression method"), (i.mode = se);
                                            break;
                                        }
                                        if (57344 & i.flags) {
                                            (e.msg = "unknown header flags set"), (i.mode = se);
                                            break;
                                        }
                                        i.head && (i.head.text = (c >> 8) & 1), 512 & i.flags && ((Ze[0] = 255 & c), (Ze[1] = (c >>> 8) & 255), (i.check = w(i.check, Ze, 2, 0))), (c = 0), (de = 0), (i.mode = I);
                                    case I:
                                        for (; de < 32; ) {
                                            if (0 === f) break e;
                                            f--, (c += a[o++] << de), (de += 8);
                                        }
                                        i.head && (i.head.time = c),
                                        512 & i.flags && ((Ze[0] = 255 & c), (Ze[1] = (c >>> 8) & 255), (Ze[2] = (c >>> 16) & 255), (Ze[3] = (c >>> 24) & 255), (i.check = w(i.check, Ze, 4, 0))),
                                            (c = 0),
                                            (de = 0),
                                            (i.mode = T);
                                    case T:
                                        for (; de < 16; ) {
                                            if (0 === f) break e;
                                            f--, (c += a[o++] << de), (de += 8);
                                        }
                                        i.head && ((i.head.xflags = 255 & c), (i.head.os = c >> 8)), 512 & i.flags && ((Ze[0] = 255 & c), (Ze[1] = (c >>> 8) & 255), (i.check = w(i.check, Ze, 2, 0))), (c = 0), (de = 0), (i.mode = U);
                                    case U:
                                        if (1024 & i.flags) {
                                            for (; de < 16; ) {
                                                if (0 === f) break e;
                                                f--, (c += a[o++] << de), (de += 8);
                                            }
                                            (i.length = c), i.head && (i.head.extra_len = c), 512 & i.flags && ((Ze[0] = 255 & c), (Ze[1] = (c >>> 8) & 255), (i.check = w(i.check, Ze, 2, 0))), (c = 0), (de = 0);
                                        } else i.head && (i.head.extra = null);
                                        i.mode = D;
                                    case D:
                                        if (
                                            1024 & i.flags &&
                                            ((he = i.length) > f && (he = f),
                                            he &&
                                            (i.head && ((xe = i.head.extra_len - i.length), i.head.extra || (i.head.extra = new Array(i.head.extra_len)), h.arraySet(i.head.extra, a, o, he, xe)),
                                            512 & i.flags && (i.check = w(i.check, a, he, o)),
                                                (f -= he),
                                                (o += he),
                                                (i.length -= he)),
                                                i.length)
                                        )
                                            break e;
                                        (i.length = 0), (i.mode = F);
                                    case F:
                                        if (2048 & i.flags) {
                                            if (0 === f) break e;
                                            he = 0;
                                            do {
                                                (xe = a[o + he++]), i.head && xe && i.length < 65536 && (i.head.name += String.fromCharCode(xe));
                                            } while (xe && he < f);
                                            if ((512 & i.flags && (i.check = w(i.check, a, he, o)), (f -= he), (o += he), xe)) break e;
                                        } else i.head && (i.head.name = null);
                                        (i.length = 0), (i.mode = L);
                                    case L:
                                        if (4096 & i.flags) {
                                            if (0 === f) break e;
                                            he = 0;
                                            do {
                                                (xe = a[o + he++]), i.head && xe && i.length < 65536 && (i.head.comment += String.fromCharCode(xe));
                                            } while (xe && he < f);
                                            if ((512 & i.flags && (i.check = w(i.check, a, he, o)), (f -= he), (o += he), xe)) break e;
                                        } else i.head && (i.head.comment = null);
                                        i.mode = H;
                                    case H:
                                        if (512 & i.flags) {
                                            for (; de < 16; ) {
                                                if (0 === f) break e;
                                                f--, (c += a[o++] << de), (de += 8);
                                            }
                                            if (c !== (65535 & i.check)) {
                                                (e.msg = "header crc mismatch"), (i.mode = se);
                                                break;
                                            }
                                            (c = 0), (de = 0);
                                        }
                                        i.head && ((i.head.hcrc = (i.flags >> 9) & 1), (i.head.done = !0)), (e.adler = i.check = 0), (i.mode = K);
                                        break;
                                    case j:
                                        for (; de < 32; ) {
                                            if (0 === f) break e;
                                            f--, (c += a[o++] << de), (de += 8);
                                        }
                                        (e.adler = i.check = n(c)), (c = 0), (de = 0), (i.mode = M);
                                    case M:
                                        if (0 === i.havedict) return (e.next_out = s), (e.avail_out = u), (e.next_in = o), (e.avail_in = f), (i.hold = c), (i.bits = de), B;
                                        (e.adler = i.check = 1), (i.mode = K);
                                    case K:
                                        if (t === x || t === y) break e;
                                    case P:
                                        if (i.last) {
                                            (c >>>= 7 & de), (de -= 7 & de), (i.mode = ae);
                                            break;
                                        }
                                        for (; de < 3; ) {
                                            if (0 === f) break e;
                                            f--, (c += a[o++] << de), (de += 8);
                                        }
                                        switch (((i.last = 1 & c), (c >>>= 1), (de -= 1), 3 & c)) {
                                            case 0:
                                                i.mode = Y;
                                                break;
                                            case 1:
                                                if ((l(i), (i.mode = Q), t === y)) {
                                                    (c >>>= 2), (de -= 2);
                                                    break e;
                                                }
                                                break;
                                            case 2:
                                                i.mode = X;
                                                break;
                                            case 3:
                                                (e.msg = "invalid block type"), (i.mode = se);
                                        }
                                        (c >>>= 2), (de -= 2);
                                        break;
                                    case Y:
                                        for (c >>>= 7 & de, de -= 7 & de; de < 32; ) {
                                            if (0 === f) break e;
                                            f--, (c += a[o++] << de), (de += 8);
                                        }
                                        if ((65535 & c) != ((c >>> 16) ^ 65535)) {
                                            (e.msg = "invalid stored block lengths"), (i.mode = se);
                                            break;
                                        }
                                        if (((i.length = 65535 & c), (c = 0), (de = 0), (i.mode = q), t === y)) break e;
                                    case q:
                                        i.mode = G;
                                    case G:
                                        if ((he = i.length)) {
                                            if ((he > f && (he = f), he > u && (he = u), 0 === he)) break e;
                                            h.arraySet(r, a, o, he, s), (f -= he), (o += he), (u -= he), (s += he), (i.length -= he);
                                            break;
                                        }
                                        i.mode = K;
                                        break;
                                    case X:
                                        for (; de < 14; ) {
                                            if (0 === f) break e;
                                            f--, (c += a[o++] << de), (de += 8);
                                        }
                                        if (((i.nlen = 257 + (31 & c)), (c >>>= 5), (de -= 5), (i.ndist = 1 + (31 & c)), (c >>>= 5), (de -= 5), (i.ncode = 4 + (15 & c)), (c >>>= 4), (de -= 4), i.nlen > 286 || i.ndist > 30)) {
                                            (e.msg = "too many length or distance symbols"), (i.mode = se);
                                            break;
                                        }
                                        (i.have = 0), (i.mode = W);
                                    case W:
                                        for (; i.have < i.ncode; ) {
                                            for (; de < 3; ) {
                                                if (0 === f) break e;
                                                f--, (c += a[o++] << de), (de += 8);
                                            }
                                            (i.lens[Ae[i.have++]] = 7 & c), (c >>>= 3), (de -= 3);
                                        }
                                        for (; i.have < 19; ) i.lens[Ae[i.have++]] = 0;
                                        if (((i.lencode = i.lendyn), (i.lenbits = 7), (Se = { bits: i.lenbits }), (ye = k(_, i.lens, 0, 19, i.lencode, 0, i.work, Se)), (i.lenbits = Se.bits), ye)) {
                                            (e.msg = "invalid code lengths set"), (i.mode = se);
                                            break;
                                        }
                                        (i.have = 0), (i.mode = J);
                                    case J:
                                        for (; i.have < i.nlen + i.ndist; ) {
                                            for (; (Be = i.lencode[c & ((1 << i.lenbits) - 1)]), (me = Be >>> 24), (ke = (Be >>> 16) & 255), (_e = 65535 & Be), !(me <= de); ) {
                                                if (0 === f) break e;
                                                f--, (c += a[o++] << de), (de += 8);
                                            }
                                            if (_e < 16) (c >>>= me), (de -= me), (i.lens[i.have++] = _e);
                                            else {
                                                if (16 === _e) {
                                                    for (Ee = me + 2; de < Ee; ) {
                                                        if (0 === f) break e;
                                                        f--, (c += a[o++] << de), (de += 8);
                                                    }
                                                    if (((c >>>= me), (de -= me), 0 === i.have)) {
                                                        (e.msg = "invalid bit length repeat"), (i.mode = se);
                                                        break;
                                                    }
                                                    (xe = i.lens[i.have - 1]), (he = 3 + (3 & c)), (c >>>= 2), (de -= 2);
                                                } else if (17 === _e) {
                                                    for (Ee = me + 3; de < Ee; ) {
                                                        if (0 === f) break e;
                                                        f--, (c += a[o++] << de), (de += 8);
                                                    }
                                                    (de -= me), (xe = 0), (he = 3 + (7 & (c >>>= me))), (c >>>= 3), (de -= 3);
                                                } else {
                                                    for (Ee = me + 7; de < Ee; ) {
                                                        if (0 === f) break e;
                                                        f--, (c += a[o++] << de), (de += 8);
                                                    }
                                                    (de -= me), (xe = 0), (he = 11 + (127 & (c >>>= me))), (c >>>= 7), (de -= 7);
                                                }
                                                if (i.have + he > i.nlen + i.ndist) {
                                                    (e.msg = "invalid bit length repeat"), (i.mode = se);
                                                    break;
                                                }
                                                for (; he--; ) i.lens[i.have++] = xe;
                                            }
                                        }
                                        if (i.mode === se) break;
                                        if (0 === i.lens[256]) {
                                            (e.msg = "invalid code -- missing end-of-block"), (i.mode = se);
                                            break;
                                        }
                                        if (((i.lenbits = 9), (Se = { bits: i.lenbits }), (ye = k(g, i.lens, 0, i.nlen, i.lencode, 0, i.work, Se)), (i.lenbits = Se.bits), ye)) {
                                            (e.msg = "invalid literal/lengths set"), (i.mode = se);
                                            break;
                                        }
                                        if (((i.distbits = 6), (i.distcode = i.distdyn), (Se = { bits: i.distbits }), (ye = k(v, i.lens, i.nlen, i.ndist, i.distcode, 0, i.work, Se)), (i.distbits = Se.bits), ye)) {
                                            (e.msg = "invalid distances set"), (i.mode = se);
                                            break;
                                        }
                                        if (((i.mode = Q), t === y)) break e;
                                    case Q:
                                        i.mode = V;
                                    case V:
                                        if (f >= 6 && u >= 258) {
                                            (e.next_out = s),
                                                (e.avail_out = u),
                                                (e.next_in = o),
                                                (e.avail_in = f),
                                                (i.hold = c),
                                                (i.bits = de),
                                                m(e, ce),
                                                (s = e.next_out),
                                                (r = e.output),
                                                (u = e.avail_out),
                                                (o = e.next_in),
                                                (a = e.input),
                                                (f = e.avail_in),
                                                (c = i.hold),
                                                (de = i.bits),
                                            i.mode === K && (i.back = -1);
                                            break;
                                        }
                                        for (i.back = 0; (Be = i.lencode[c & ((1 << i.lenbits) - 1)]), (me = Be >>> 24), (ke = (Be >>> 16) & 255), (_e = 65535 & Be), !(me <= de); ) {
                                            if (0 === f) break e;
                                            f--, (c += a[o++] << de), (de += 8);
                                        }
                                        if (ke && 0 == (240 & ke)) {
                                            for (ge = me, ve = ke, pe = _e; (Be = i.lencode[pe + ((c & ((1 << (ge + ve)) - 1)) >> ge)]), (me = Be >>> 24), (ke = (Be >>> 16) & 255), (_e = 65535 & Be), !(ge + me <= de); ) {
                                                if (0 === f) break e;
                                                f--, (c += a[o++] << de), (de += 8);
                                            }
                                            (c >>>= ge), (de -= ge), (i.back += ge);
                                        }
                                        if (((c >>>= me), (de -= me), (i.back += me), (i.length = _e), 0 === ke)) {
                                            i.mode = ne;
                                            break;
                                        }
                                        if (32 & ke) {
                                            (i.back = -1), (i.mode = K);
                                            break;
                                        }
                                        if (64 & ke) {
                                            (e.msg = "invalid literal/length code"), (i.mode = se);
                                            break;
                                        }
                                        (i.extra = 15 & ke), (i.mode = $);
                                    case $:
                                        if (i.extra) {
                                            for (Ee = i.extra; de < Ee; ) {
                                                if (0 === f) break e;
                                                f--, (c += a[o++] << de), (de += 8);
                                            }
                                            (i.length += c & ((1 << i.extra) - 1)), (c >>>= i.extra), (de -= i.extra), (i.back += i.extra);
                                        }
                                        (i.was = i.length), (i.mode = ee);
                                    case ee:
                                        for (; (Be = i.distcode[c & ((1 << i.distbits) - 1)]), (me = Be >>> 24), (ke = (Be >>> 16) & 255), (_e = 65535 & Be), !(me <= de); ) {
                                            if (0 === f) break e;
                                            f--, (c += a[o++] << de), (de += 8);
                                        }
                                        if (0 == (240 & ke)) {
                                            for (ge = me, ve = ke, pe = _e; (Be = i.distcode[pe + ((c & ((1 << (ge + ve)) - 1)) >> ge)]), (me = Be >>> 24), (ke = (Be >>> 16) & 255), (_e = 65535 & Be), !(ge + me <= de); ) {
                                                if (0 === f) break e;
                                                f--, (c += a[o++] << de), (de += 8);
                                            }
                                            (c >>>= ge), (de -= ge), (i.back += ge);
                                        }
                                        if (((c >>>= me), (de -= me), (i.back += me), 64 & ke)) {
                                            (e.msg = "invalid distance code"), (i.mode = se);
                                            break;
                                        }
                                        (i.offset = _e), (i.extra = 15 & ke), (i.mode = te);
                                    case te:
                                        if (i.extra) {
                                            for (Ee = i.extra; de < Ee; ) {
                                                if (0 === f) break e;
                                                f--, (c += a[o++] << de), (de += 8);
                                            }
                                            (i.offset += c & ((1 << i.extra) - 1)), (c >>>= i.extra), (de -= i.extra), (i.back += i.extra);
                                        }
                                        if (i.offset > i.dmax) {
                                            (e.msg = "invalid distance too far back"), (i.mode = se);
                                            break;
                                        }
                                        i.mode = ie;
                                    case ie:
                                        if (0 === u) break e;
                                        if (((he = ce - u), i.offset > he)) {
                                            if ((he = i.offset - he) > i.whave && i.sane) {
                                                (e.msg = "invalid distance too far back"), (i.mode = se);
                                                break;
                                            }
                                            he > i.wnext ? ((he -= i.wnext), (be = i.wsize - he)) : (be = i.wnext - he), he > i.length && (he = i.length), (we = i.window);
                                        } else (we = r), (be = s - i.offset), (he = i.length);
                                        he > u && (he = u), (u -= he), (i.length -= he);
                                        do {
                                            r[s++] = we[be++];
                                        } while (--he);
                                        0 === i.length && (i.mode = V);
                                        break;
                                    case ne:
                                        if (0 === u) break e;
                                        (r[s++] = i.length), u--, (i.mode = V);
                                        break;
                                    case ae:
                                        if (i.wrap) {
                                            for (; de < 32; ) {
                                                if (0 === f) break e;
                                                f--, (c |= a[o++] << de), (de += 8);
                                            }
                                            if (((ce -= u), (e.total_out += ce), (i.total += ce), ce && (e.adler = i.check = i.flags ? w(i.check, r, ce, s - ce) : b(i.check, r, ce, s - ce)), (ce = u), (i.flags ? c : n(c)) !== i.check)) {
                                                (e.msg = "incorrect data check"), (i.mode = se);
                                                break;
                                            }
                                            (c = 0), (de = 0);
                                        }
                                        i.mode = re;
                                    case re:
                                        if (i.wrap && i.flags) {
                                            for (; de < 32; ) {
                                                if (0 === f) break e;
                                                f--, (c += a[o++] << de), (de += 8);
                                            }
                                            if (c !== (4294967295 & i.total)) {
                                                (e.msg = "incorrect length check"), (i.mode = se);
                                                break;
                                            }
                                            (c = 0), (de = 0);
                                        }
                                        i.mode = oe;
                                    case oe:
                                        ye = E;
                                        break e;
                                    case se:
                                        ye = A;
                                        break e;
                                    case fe:
                                        return z;
                                    case le:
                                    default:
                                        return Z;
                                }
                            return (
                                (e.next_out = s),
                                    (e.avail_out = u),
                                    (e.next_in = o),
                                    (e.avail_in = f),
                                    (i.hold = c),
                                    (i.bits = de),
                                    (i.wsize || (ce !== e.avail_out && i.mode < se && (i.mode < ae || t !== p))) && d(e, e.output, e.next_out, ce - e.avail_out)
                                        ? ((i.mode = fe), z)
                                        : ((ue -= e.avail_in),
                                            (ce -= e.avail_out),
                                            (e.total_in += ue),
                                            (e.total_out += ce),
                                            (i.total += ce),
                                        i.wrap && ce && (e.adler = i.check = i.flags ? w(i.check, r, ce, e.next_out - ce) : b(i.check, r, ce, e.next_out - ce)),
                                            (e.data_type = i.bits + (i.last ? 64 : 0) + (i.mode === K ? 128 : 0) + (i.mode === Q || i.mode === q ? 256 : 0)),
                                        ((0 === ue && 0 === ce) || t === p) && ye === S && (ye = R),
                                            ye)
                            );
                        }),
                        (i.inflateEnd = function (e) {
                            if (!e || !e.state) return Z;
                            var t = e.state;
                            return t.window && (t.window = null), (e.state = null), S;
                        }),
                        (i.inflateGetHeader = function (e, t) {
                            var i;
                            return e && e.state ? (0 == (2 & (i = e.state).wrap) ? Z : ((i.head = t), (t.done = !1), S)) : Z;
                        }),
                        (i.inflateSetDictionary = function (e, t) {
                            var i,
                                n,
                                a = t.length;
                            return e && e.state ? (0 !== (i = e.state).wrap && i.mode !== M ? Z : i.mode === M && ((n = 1), (n = b(n, t, a, 0)) !== i.check) ? A : d(e, t, a, a) ? ((i.mode = fe), z) : ((i.havedict = 1), S)) : Z;
                        }),
                        (i.inflateInfo = "pako inflate (from Nodeca project)");
                },
                { "../utils/common": 1, "./adler32": 3, "./crc32": 5, "./inffast": 7, "./inftrees": 9 },
            ],
            9: [
                function (e, t, i) {
                    "use strict";
                    var n = e("../utils/common"),
                        a = [3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0],
                        r = [16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18, 19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78],
                        o = [1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577, 0, 0],
                        s = [16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 64, 64];
                    t.exports = function (e, t, i, f, l, d, u, c) {
                        var h,
                            b,
                            w,
                            m,
                            k,
                            _,
                            g,
                            v,
                            p,
                            x = c.bits,
                            y = 0,
                            S = 0,
                            E = 0,
                            B = 0,
                            Z = 0,
                            A = 0,
                            z = 0,
                            R = 0,
                            N = 0,
                            O = 0,
                            C = null,
                            I = 0,
                            T = new n.Buf16(16),
                            U = new n.Buf16(16),
                            D = null,
                            F = 0;
                        for (y = 0; y <= 15; y++) T[y] = 0;
                        for (S = 0; S < f; S++) T[t[i + S]]++;
                        for (Z = x, B = 15; B >= 1 && 0 === T[B]; B--);
                        if ((Z > B && (Z = B), 0 === B)) return (l[d++] = 20971520), (l[d++] = 20971520), (c.bits = 1), 0;
                        for (E = 1; E < B && 0 === T[E]; E++);
                        for (Z < E && (Z = E), R = 1, y = 1; y <= 15; y++) if (((R <<= 1), (R -= T[y]) < 0)) return -1;
                        if (R > 0 && (0 === e || 1 !== B)) return -1;
                        for (U[1] = 0, y = 1; y < 15; y++) U[y + 1] = U[y] + T[y];
                        for (S = 0; S < f; S++) 0 !== t[i + S] && (u[U[t[i + S]]++] = S);
                        if (
                            (0 === e ? ((C = D = u), (_ = 19)) : 1 === e ? ((C = a), (I -= 257), (D = r), (F -= 257), (_ = 256)) : ((C = o), (D = s), (_ = -1)),
                                (O = 0),
                                (S = 0),
                                (y = E),
                                (k = d),
                                (A = Z),
                                (z = 0),
                                (w = -1),
                                (N = 1 << Z),
                                (m = N - 1),
                            (1 === e && N > 852) || (2 === e && N > 592))
                        )
                            return 1;
                        for (;;) {
                            (g = y - z), u[S] < _ ? ((v = 0), (p = u[S])) : u[S] > _ ? ((v = D[F + u[S]]), (p = C[I + u[S]])) : ((v = 96), (p = 0)), (h = 1 << (y - z)), (E = b = 1 << A);
                            do {
                                l[k + (O >> z) + (b -= h)] = (g << 24) | (v << 16) | p | 0;
                            } while (0 !== b);
                            for (h = 1 << (y - 1); O & h; ) h >>= 1;
                            if ((0 !== h ? ((O &= h - 1), (O += h)) : (O = 0), S++, 0 == --T[y])) {
                                if (y === B) break;
                                y = t[i + u[S]];
                            }
                            if (y > Z && (O & m) !== w) {
                                for (0 === z && (z = Z), k += E, R = 1 << (A = y - z); A + z < B && !((R -= T[A + z]) <= 0); ) A++, (R <<= 1);
                                if (((N += 1 << A), (1 === e && N > 852) || (2 === e && N > 592))) return 1;
                                l[(w = O & m)] = (Z << 24) | (A << 16) | (k - d) | 0;
                            }
                        }
                        return 0 !== O && (l[k + O] = ((y - z) << 24) | (64 << 16) | 0), (c.bits = Z), 0;
                    };
                },
                { "../utils/common": 1 },
            ],
            10: [
                function (e, t, i) {
                    "use strict";
                    t.exports = { 2: "need dictionary", 1: "stream end", 0: "", "-1": "file error", "-2": "stream error", "-3": "data error", "-4": "insufficient memory", "-5": "buffer error", "-6": "incompatible version" };
                },
                {},
            ],
            11: [
                function (e, t, i) {
                    "use strict";
                    t.exports = function () {
                        (this.input = null),
                            (this.next_in = 0),
                            (this.avail_in = 0),
                            (this.total_in = 0),
                            (this.output = null),
                            (this.next_out = 0),
                            (this.avail_out = 0),
                            (this.total_out = 0),
                            (this.msg = ""),
                            (this.state = null),
                            (this.data_type = 2),
                            (this.adler = 0);
                    };
                },
                {},
            ],
            "/lib/inflate.js": [
                function (e, t, i) {
                    "use strict";
                    function n(e) {
                        if (!(this instanceof n)) return new n(e);
                        this.options = o.assign({ chunkSize: 16384, windowBits: 0, to: "" }, e || {});
                        var t = this.options;
                        t.raw && t.windowBits >= 0 && t.windowBits < 16 && ((t.windowBits = -t.windowBits), 0 === t.windowBits && (t.windowBits = -15)),
                        !(t.windowBits >= 0 && t.windowBits < 16) || (e && e.windowBits) || (t.windowBits += 32),
                        t.windowBits > 15 && t.windowBits < 48 && 0 == (15 & t.windowBits) && (t.windowBits |= 15),
                            (this.err = 0),
                            (this.msg = ""),
                            (this.ended = !1),
                            (this.chunks = []),
                            (this.strm = new d()),
                            (this.strm.avail_out = 0);
                        var i = r.inflateInit2(this.strm, t.windowBits);
                        if (i !== f.Z_OK) throw new Error(l[i]);
                        (this.header = new u()), r.inflateGetHeader(this.strm, this.header);
                    }
                    function a(e, t) {
                        var i = new n(t);
                        if ((i.push(e, !0), i.err)) throw i.msg || l[i.err];
                        return i.result;
                    }
                    var r = e("./zlib/inflate"),
                        o = e("./utils/common"),
                        s = e("./utils/strings"),
                        f = e("./zlib/constants"),
                        l = e("./zlib/messages"),
                        d = e("./zlib/zstream"),
                        u = e("./zlib/gzheader"),
                        c = Object.prototype.toString;
                    (n.prototype.push = function (e, t) {
                        var i,
                            n,
                            a,
                            l,
                            d,
                            u,
                            h = this.strm,
                            b = this.options.chunkSize,
                            w = this.options.dictionary,
                            m = !1;
                        if (this.ended) return !1;
                        (n = t === ~~t ? t : !0 === t ? f.Z_FINISH : f.Z_NO_FLUSH),
                            "string" == typeof e ? (h.input = s.binstring2buf(e)) : "[object ArrayBuffer]" === c.call(e) ? (h.input = new Uint8Array(e)) : (h.input = e),
                            (h.next_in = 0),
                            (h.avail_in = h.input.length);
                        do {
                            if (
                                (0 === h.avail_out && ((h.output = new o.Buf8(b)), (h.next_out = 0), (h.avail_out = b)),
                                (i = r.inflate(h, f.Z_NO_FLUSH)) === f.Z_NEED_DICT &&
                                w &&
                                ((u = "string" == typeof w ? s.string2buf(w) : "[object ArrayBuffer]" === c.call(w) ? new Uint8Array(w) : w), (i = r.inflateSetDictionary(this.strm, u))),
                                i === f.Z_BUF_ERROR && !0 === m && ((i = f.Z_OK), (m = !1)),
                                i !== f.Z_STREAM_END && i !== f.Z_OK)
                            )
                                return this.onEnd(i), (this.ended = !0), !1;
                            h.next_out &&
                            ((0 !== h.avail_out && i !== f.Z_STREAM_END && (0 !== h.avail_in || (n !== f.Z_FINISH && n !== f.Z_SYNC_FLUSH))) ||
                                ("string" === this.options.to
                                    ? ((a = s.utf8border(h.output, h.next_out)),
                                        (l = h.next_out - a),
                                        (d = s.buf2string(h.output, a)),
                                        (h.next_out = l),
                                        (h.avail_out = b - l),
                                    l && o.arraySet(h.output, h.output, a, l, 0),
                                        this.onData(d))
                                    : this.onData(o.shrinkBuf(h.output, h.next_out)))),
                            0 === h.avail_in && 0 === h.avail_out && (m = !0);
                        } while ((h.avail_in > 0 || 0 === h.avail_out) && i !== f.Z_STREAM_END);
                        return (
                            i === f.Z_STREAM_END && (n = f.Z_FINISH), n === f.Z_FINISH ? ((i = r.inflateEnd(this.strm)), this.onEnd(i), (this.ended = !0), i === f.Z_OK) : n !== f.Z_SYNC_FLUSH || (this.onEnd(f.Z_OK), (h.avail_out = 0), !0)
                        );
                    }),
                        (n.prototype.onData = function (e) {
                            this.chunks.push(e);
                        }),
                        (n.prototype.onEnd = function (e) {
                            e === f.Z_OK && ("string" === this.options.to ? (this.result = this.chunks.join("")) : (this.result = o.flattenChunks(this.chunks))), (this.chunks = []), (this.err = e), (this.msg = this.strm.msg);
                        }),
                        (i.Inflate = n),
                        (i.inflate = a),
                        (i.inflateRaw = function (e, t) {
                            return (t = t || {}), (t.raw = !0), a(e, t);
                        }),
                        (i.ungzip = a);
                },
                { "./utils/common": 1, "./utils/strings": 2, "./zlib/constants": 4, "./zlib/gzheader": 6, "./zlib/inflate": 8, "./zlib/messages": 10, "./zlib/zstream": 11 },
            ],
        },
        {},
        []
    )("/lib/inflate.js");
});
!(function e(r, t, n) {
    function o(i, a) {
        if (!t[i]) {
            if (!r[i]) {
                var u = "function" == typeof require && require;
                if (!a && u) return u(i, !0);
                if (s) return s(i, !0);
                throw new Error("Cannot find module '" + i + "'");
            }
            var f = (t[i] = { exports: {} });
            r[i][0].call(
                f.exports,
                function (e) {
                    var t = r[i][1][e];
                    return o(t ? t : e);
                },
                f,
                f.exports,
                e,
                r,
                t,
                n
            );
        }
        return t[i].exports;
    }
    for (var s = "function" == typeof require && require, i = 0; i < n.length; i++) o(n[i]);
    return o;
})(
    {
        1: [
            function (e) {
                (function () {
                    var r = e("./lib/amf/amf.js"),
                        t = e("./lib/amf/spec.js"),
                        n = e("./lib/type/bytearray.js");
                    (window.AMF = r), (window.Spec = t), (window.ByteArray = n);
                }.call(
                    this,
                    e("/Library/WebServer/Documents/projects/amf/js/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js"),
                    "undefined" != typeof self ? self : "undefined" != typeof window ? window : {},
                    e("buffer").Buffer,
                    arguments[3],
                    arguments[4],
                    arguments[5],
                    arguments[6],
                    "/fake_aabf2119.js",
                    "/"
                ));
            },
            {
                "./lib/amf/amf.js": 2,
                "./lib/amf/spec.js": 6,
                "./lib/type/bytearray.js": 14,
                "/Library/WebServer/Documents/projects/amf/js/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js": 22,
                buffer: 19,
            },
        ],
        2: [
            function (e, r) {
                (function () {
                    function t(e, r, t, n) {
                        n = "undefined" == typeof n ? f : n;
                        var o = new d(),
                            s = new m(o, n);
                        return s.serialize(e, r, t);
                    }
                    function n(e, r) {
                        var t = new c(e),
                            n = new p(t);
                        return n.deserialize(r);
                    }
                    function o(e) {
                        return n(e);
                    }
                    function s(e, r) {
                        return t(e, !0, void 0, r);
                    }
                    function i(e, r) {
                        b[e] = r;
                    }
                    function a(e) {
                        return e in b ? b[e] : null;
                    }
                    var u = 1,
                        f = 0,
                        l = "_classMapping";
                    r.exports = { serialize: t, deserialize: n, parse: o, stringify: s, registerClassAlias: i, getClassByAlias: a, CLASS_MAPPING: u, DEFAULT_OPTIONS: f, CLASS_MAPPING_FIELD: l };
                    var d = e("../io/output.js"),
                        c = e("../io/input.js"),
                        m = e("../amf/serializer.js"),
                        p = e("../amf/deserializer.js"),
                        b = {};
                }.call(
                    this,
                    e("/Library/WebServer/Documents/projects/amf/js/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js"),
                    "undefined" != typeof self ? self : "undefined" != typeof window ? window : {},
                    e("buffer").Buffer,
                    arguments[3],
                    arguments[4],
                    arguments[5],
                    arguments[6],
                    "/lib/amf/amf.js",
                    "/lib/amf"
                ));
            },
            {
                "../amf/deserializer.js": 4,
                "../amf/serializer.js": 5,
                "../io/input.js": 11,
                "../io/output.js": 12,
                "/Library/WebServer/Documents/projects/amf/js/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js": 22,
                buffer: 19,
            },
        ],
        3: [
            function (e, r) {
                (function () {
                    var t = e("./spec.js"),
                        n = e("../type/bytearray.js"),
                        o = e("../util/reference-store.js"),
                        s = e("../exception/not-supported.js"),
                        i = function (e) {
                            (this.stream = e), (this.referenceStore = new o());
                        };
                    (i.prototype = {
                        getDataType: function (e) {
                            switch (!0) {
                                case "undefined" == typeof e:
                                    return t.AMF3_UNDEFINED;
                                case null === e:
                                    return t.AMF3_NULL;
                                case e === !0 || e === !1:
                                    return e ? t.AMF3_TRUE : t.AMF3_FALSE;
                                case "number" == typeof e && e % 1 === 0:
                                    return e < t.MIN_INT || e > t.MAX_INT ? t.AMF3_DOUBLE : t.AMF3_INT;
                                case "number" == typeof e && e % 1 !== 0:
                                    return t.AMF3_DOUBLE;
                                case "string" == typeof e:
                                    return t.AMF3_STRING;
                                case e instanceof Date:
                                    return t.AMF3_DATE;
                                case e instanceof n:
                                    return t.AMF3_BYTE_ARRAY;
                                case e instanceof Array:
                                    return t.AMF3_ARRAY;
                                case "object" == typeof e:
                                    return t.AMF3_OBJECT;
                                case "function" == typeof e:
                                    throw new s("Cannot serialize a function");
                                default:
                                    return null;
                            }
                        },
                    }),
                        (r.exports = i);
                }.call(
                    this,
                    e("/Library/WebServer/Documents/projects/amf/js/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js"),
                    "undefined" != typeof self ? self : "undefined" != typeof window ? window : {},
                    e("buffer").Buffer,
                    arguments[3],
                    arguments[4],
                    arguments[5],
                    arguments[6],
                    "/lib/amf/base.js",
                    "/lib/amf"
                ));
            },
            {
                "../exception/not-supported.js": 9,
                "../type/bytearray.js": 14,
                "../util/reference-store.js": 18,
                "./spec.js": 6,
                "/Library/WebServer/Documents/projects/amf/js/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js": 22,
                buffer: 19,
            },
        ],
        4: [
            function (e, r) {
                (function () {
                    var t = e("./amf.js"),
                        n = e("./base.js"),
                        o = e("./spec.js"),
                        s = e("../util/reference-store.js"),
                        i = e("../type/bytearray.js"),
                        a = e("utf8"),
                        u = e("../exception/deserialization.js"),
                        f = function (e) {
                            n.call(this, e);
                        };
                    (f.prototype = new n()),
                        (f.prototype.constructor = f),
                        (f.prototype.deserialize = function (e) {
                            var r = this.stream.readByte(e);
                            switch (parseInt(r)) {
                                case o.AMF3_UNDEFINED:
                                    return void 0;
                                case o.AMF3_NULL:
                                    return null;
                                case o.AMF3_FALSE:
                                    return !1;
                                case o.AMF3_TRUE:
                                    return !0;
                                case o.AMF3_INT:
                                    return this.deserializeInt();
                                case o.AMF3_DOUBLE:
                                    return this.deserializeDouble();
                                case o.AMF3_STRING:
                                    return this.deserializeString();
                                case o.AMF3_DATE:
                                    return this.deserializeDate();
                                case o.AMF3_ARRAY:
                                    return this.deserializeArray();
                                case o.AMF3_OBJECT:
                                    return this.deserializeObject();
                                case o.AMF3_BYTE_ARRAY:
                                    return this.deserializeByteArray();
                                default:
                                    throw new u("Cannot deserialize type: " + r);
                            }
                        }),
                        (f.prototype.deserializeInt = function () {
                            for (var e = 0, r = 0, t = this.stream.readByte(); 0 !== (128 & t) && 3 > r; ) (e <<= 7), (e |= 127 & t), (t = this.stream.readByte()), r++;
                            return 3 > r ? ((e <<= 7), (e |= t)) : ((e <<= 8), (e |= t), 0 !== (268435456 & e) && (e |= 3758096384)), e;
                        }),
                        (f.prototype.deserializeDouble = function () {
                            return this.stream.readDouble();
                        }),
                        (f.prototype.deserializeString = function () {
                            var e = this.deserializeInt();
                            if (0 === (e & o.REFERENCE_BIT)) return (e >>= o.REFERENCE_BIT), this.referenceStore.getByReference(e, s.TYPE_STRING);
                            var r = e >> o.REFERENCE_BIT,
                                t = a.decode(this.stream.readRawBytes(r));
                            return this.referenceStore.addReference(t, s.TYPE_STRING), t;
                        }),
                        (f.prototype.deserializeDate = function () {
                            var e = this.deserializeInt();
                            if (0 === (e & o.REFERENCE_BIT)) return (e >>= o.REFERENCE_BIT), this.referenceStore.getByReference(e, s.TYPE_OBJECT);
                            var r = this.stream.readDouble(),
                                t = new Date(r);
                            return this.referenceStore.addReference(t, s.TYPE_OBJECT), t;
                        }),
                        (f.prototype.deserializeArray = function () {
                            var e = this.deserializeInt();
                            if (0 === (e & o.REFERENCE_BIT)) return (e >>= o.REFERENCE_BIT), this.referenceStore.getByReference(e, s.TYPE_OBJECT);
                            var r = e >> o.REFERENCE_BIT,
                                t = [];
                            this.referenceStore.addReference(t, s.TYPE_OBJECT);
                            for (var n = this.deserializeString(); n.length > 0; ) (t[n] = this.deserialize()), (n = this.deserializeString());
                            for (var i = 0; r > i; i++) t.push(this.deserialize());
                            return t;
                        }),
                        (f.prototype.deserializeObject = function () {
                            var e = this.deserializeInt();
                            if (0 === (e & o.REFERENCE_BIT)) return (e >>= o.REFERENCE_BIT), this.referenceStore.getByReference(e, s.TYPE_OBJECT);
                            var r = this.deserializeString(),
                                n = {};
                            this.referenceStore.addReference(n, s.TYPE_OBJECT);
                            for (var i = {}, a = this.deserializeString(); a.length; ) (i[a] = this.deserialize()), (a = this.deserializeString());
                            if (r && r.length > 0) {
                                var f = t.getClassByAlias(r);
                                if (!f) throw new u("Class " + r + " cannot be found. Consider registering a class alias.");
                                (n = new f()), "importData" in n && "function" == typeof n.importData ? n.importData(i) : l(n, i);
                            } else l(n, i);
                            return n;
                        });
                    var l = function (e, r) {
                        try {
                            for (var t in r) {
                                var n = r[t];
                                e[t] = n;
                            }
                        } catch (o) {
                            throw new u("Property '" + t + "' cannot be set on instance '" + typeof e + "'");
                        }
                    };
                    (f.prototype.deserializeByteArray = function () {
                        var e = this.deserializeInt();
                        if (0 === (e & o.REFERENCE_BIT)) return (e >>= o.REFERENCE_BIT), this.referenceStore.getByReference(e, s.TYPE_OBJECT);
                        var r = e >> o.REFERENCE_BIT,
                            t = this.stream.readRawBytes(r);
                        return new i(t);
                    }),
                        (r.exports = f);
                }.call(
                    this,
                    e("/Library/WebServer/Documents/projects/amf/js/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js"),
                    "undefined" != typeof self ? self : "undefined" != typeof window ? window : {},
                    e("buffer").Buffer,
                    arguments[3],
                    arguments[4],
                    arguments[5],
                    arguments[6],
                    "/lib/amf/deserializer.js",
                    "/lib/amf"
                ));
            },
            {
                "../exception/deserialization.js": 8,
                "../type/bytearray.js": 14,
                "../util/reference-store.js": 18,
                "./amf.js": 2,
                "./base.js": 3,
                "./spec.js": 6,
                "/Library/WebServer/Documents/projects/amf/js/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js": 22,
                buffer: 19,
                utf8: 23,
            },
        ],
        5: [
            function (e, r) {
                (function () {
                    var t = e("./base.js"),
                        n = e("./spec.js"),
                        o = e("../util/reference-store.js"),
                        s = e("../util/object.js"),
                        i = (e("../type/bytearray.js"), e("utf8")),
                        a = e("../exception/serialization.js"),
                        u = function (e, r) {
                            (this.options = r), t.call(this, e);
                        };
                    (u.prototype = new t()),
                        (u.prototype.constructor = u),
                        (u.prototype.serialize = function (e, r, t) {
                            "undefined" == typeof r && (r = !0);
                            var o = t ? t : this.getDataType(e);
                            switch ((r && this.stream.writeByte(o), o)) {
                                case n.AMF3_UNDEFINED:
                                case n.AMF3_NULL:
                                case n.AMF3_FALSE:
                                case n.AMF3_TRUE:
                                    break;
                                case n.AMF3_INT:
                                    this.serializeInt(e);
                                    break;
                                case n.AMF3_DOUBLE:
                                    this.serializeDouble(e);
                                    break;
                                case n.AMF3_STRING:
                                    this.serializeString(e);
                                    break;
                                case n.AMF3_DATE:
                                    this.serializeDate(e);
                                    break;
                                case n.AMF3_ARRAY:
                                    this.serializeArray(e);
                                    break;
                                case n.AMF3_OBJECT:
                                    this.serializeObject(e);
                                    break;
                                case n.AMF3_BYTE_ARRAY:
                                    this.serializeByteArray(e);
                                    break;
                                default:
                                    throw new a("Unrecognized AMF type [" + o + "]");
                            }
                            return this.stream.getRaw();
                        }),
                        (u.prototype.serializeInt = function (e) {
                            if (e < n.MIN_INT || e > n.MAX_INT) throw new a("Integer out of range: " + e);
                            (e &= 536870911),
                                e < n.MIN_2_BYTE_INT
                                    ? this.stream.writeByte(e)
                                    : e < n.MIN_3_BYTE_INT
                                    ? (this.stream.writeByte(((e >> 7) & 127) | 128), this.stream.writeByte(127 & e))
                                    : e < n.MIN_4_BYTE_INT
                                        ? (this.stream.writeByte(((e >> 14) & 127) | 128), this.stream.writeByte(((e >> 7) & 127) | 128), this.stream.writeByte(127 & e))
                                        : (this.stream.writeByte(((e >> 22) & 127) | 128), this.stream.writeByte(((e >> 15) & 127) | 128), this.stream.writeByte(((e >> 8) & 127) | 128), this.stream.writeByte(255 & e));
                        }),
                        (u.prototype.serializeDouble = function (e) {
                            this.stream.writeDouble(e);
                        }),
                        (u.prototype.serializeString = function (e, r) {
                            if ((r = "undefined" == typeof r ? !0 : r)) {
                                var t = this.referenceStore.getReference(e, o.TYPE_STRING);
                                if (t !== !1) return void this.serializeInt(t << 1);
                            }
                            var n = i.encode(e);
                            this.serializeInt((n.length << 1) | 1), this.stream.writeRaw(n);
                        }),
                        (u.prototype.serializeDate = function (e) {
                            var r = this.referenceStore.getReference(e, o.TYPE_OBJECT);
                            return r !== !1 ? void this.serializeInt(r << 1) : void this.serialize(e.getTime(), !0, n.AMF3_DOUBLE);
                        }),
                        (u.prototype.serializeArray = function (e) {
                            var r = this.referenceStore.getReference(e, o.TYPE_OBJECT);
                            if (r !== !1) return void this.serializeInt(r << 1);
                            var t = null,
                                s = n.isDenseArray(e);
                            if (s) {
                                this.serializeInt((e.length << 1) | n.REFERENCE_BIT), this.serializeString("");
                                for (var i in e) (t = e[i]), this.serialize(t);
                            } else {
                                this.serializeInt(1);
                                for (var a in e) (t = e[a]), this.serializeString(a, !1), this.serialize(t);
                                this.serializeString("");
                            }
                        }),
                        (u.prototype.serializeObject = function (e) {
                            var r = this.referenceStore.getReference(e, o.TYPE_OBJECT);
                            if (r !== !1) return void this.serializeInt(r << 1);
                            var t = e;
                            s.isSerializable(e) && (e = e.exportData());
                            var n = s.getObjectKeys(e);
                            if ((this.serializeInt(11), this.serializeString(s.getClassName(t, this.options), !1), n.length > 0))
                                for (var i in n) {
                                    var a = n[i],
                                        u = e[a];
                                    this.serializeString(a, !1), this.serialize(u);
                                }
                            this.serializeString("");
                        }),
                        (u.prototype.serializeByteArray = function (e) {
                            if (!("getData" in e)) throw new a("Invalid ByteArray data provided");
                            var r = this.referenceStore.getReference(e, o.TYPE_OBJECT);
                            return r !== !1 ? void this.serializeInt(r << 1) : (this.serializeInt((e.getData().length << 1) | n.REFERENCE_BIT), void this.stream.writeRaw(e.getData()));
                        }),
                        (r.exports = u);
                }.call(
                    this,
                    e("/Library/WebServer/Documents/projects/amf/js/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js"),
                    "undefined" != typeof self ? self : "undefined" != typeof window ? window : {},
                    e("buffer").Buffer,
                    arguments[3],
                    arguments[4],
                    arguments[5],
                    arguments[6],
                    "/lib/amf/serializer.js",
                    "/lib/amf"
                ));
            },
            {
                "../exception/serialization.js": 10,
                "../type/bytearray.js": 14,
                "../util/object.js": 17,
                "../util/reference-store.js": 18,
                "./base.js": 3,
                "./spec.js": 6,
                "/Library/WebServer/Documents/projects/amf/js/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js": 22,
                buffer: 19,
                utf8: 23,
            },
        ],
        6: [
            function (e, r) {
                (function () {
                    r.exports = {
                        AMF3_UNDEFINED: 0,
                        AMF3_NULL: 1,
                        AMF3_FALSE: 2,
                        AMF3_TRUE: 3,
                        AMF3_INT: 4,
                        AMF3_DOUBLE: 5,
                        AMF3_STRING: 6,
                        AMF3_XML_DOC: 7,
                        AMF3_DATE: 8,
                        AMF3_ARRAY: 9,
                        AMF3_OBJECT: 10,
                        AMF3_XML: 11,
                        AMF3_BYTE_ARRAY: 12,
                        AMF3_VECTOR_INT: 13,
                        AMF3_VECTOR_UINT: 14,
                        AMF3_VECTOR_DOUBLE: 15,
                        AMF3_VECTOR_OBJECT: 16,
                        AMF3_DICTIONARY: 17,
                        OBJECT_DYNAMIC: 0,
                        REFERENCE_BIT: 1,
                        MIN_2_BYTE_INT: 128,
                        MIN_3_BYTE_INT: 16384,
                        MIN_4_BYTE_INT: 2097152,
                        MAX_INT: 268435455,
                        MIN_INT: -268435456,
                        isLittleEndian: function () {
                            return !0;
                        },
                        isDenseArray: function (e) {
                            if (!e) return !0;
                            var r = 0;
                            for (var t in e) {
                                if (t != r) return !1;
                                r++;
                            }
                            return !0;
                        },
                    };
                }.call(
                    this,
                    e("/Library/WebServer/Documents/projects/amf/js/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js"),
                    "undefined" != typeof self ? self : "undefined" != typeof window ? window : {},
                    e("buffer").Buffer,
                    arguments[3],
                    arguments[4],
                    arguments[5],
                    arguments[6],
                    "/lib/amf/spec.js",
                    "/lib/amf"
                ));
            },
            { "/Library/WebServer/Documents/projects/amf/js/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js": 22, buffer: 19 },
        ],
        7: [
            function (e, r) {
                (function () {
                    var e = function (e, r) {
                        (this.message = e), (this.name = r);
                    };
                    (e.prototype = new Error()), (e.prototype.constructor = e), (r.exports = e);
                }.call(
                    this,
                    e("/Library/WebServer/Documents/projects/amf/js/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js"),
                    "undefined" != typeof self ? self : "undefined" != typeof window ? window : {},
                    e("buffer").Buffer,
                    arguments[3],
                    arguments[4],
                    arguments[5],
                    arguments[6],
                    "/lib/exception/base.js",
                    "/lib/exception"
                ));
            },
            { "/Library/WebServer/Documents/projects/amf/js/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js": 22, buffer: 19 },
        ],
        8: [
            function (e, r) {
                (function () {
                    var t = e("./base.js"),
                        n = function (e) {
                            t.call(this, e, "DeserializationException");
                        };
                    (n.prototype = new t()), (n.prototype.constructor = n), (r.exports = n);
                }.call(
                    this,
                    e("/Library/WebServer/Documents/projects/amf/js/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js"),
                    "undefined" != typeof self ? self : "undefined" != typeof window ? window : {},
                    e("buffer").Buffer,
                    arguments[3],
                    arguments[4],
                    arguments[5],
                    arguments[6],
                    "/lib/exception/deserialization.js",
                    "/lib/exception"
                ));
            },
            { "./base.js": 7, "/Library/WebServer/Documents/projects/amf/js/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js": 22, buffer: 19 },
        ],
        9: [
            function (e, r) {
                (function () {
                    var t = e("./base.js"),
                        n = function (e) {
                            t.call(this, e, "NotSupportedException");
                        };
                    (n.prototype = new t()), (n.prototype.constructor = n), (r.exports = n);
                }.call(
                    this,
                    e("/Library/WebServer/Documents/projects/amf/js/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js"),
                    "undefined" != typeof self ? self : "undefined" != typeof window ? window : {},
                    e("buffer").Buffer,
                    arguments[3],
                    arguments[4],
                    arguments[5],
                    arguments[6],
                    "/lib/exception/not-supported.js",
                    "/lib/exception"
                ));
            },
            { "./base.js": 7, "/Library/WebServer/Documents/projects/amf/js/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js": 22, buffer: 19 },
        ],
        10: [
            function (e, r) {
                (function () {
                    var t = e("./base.js"),
                        n = function (e) {
                            t.call(this, e, "SerializationException");
                        };
                    (n.prototype = new t()), (n.prototype.constructor = n), (r.exports = n);
                }.call(
                    this,
                    e("/Library/WebServer/Documents/projects/amf/js/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js"),
                    "undefined" != typeof self ? self : "undefined" != typeof window ? window : {},
                    e("buffer").Buffer,
                    arguments[3],
                    arguments[4],
                    arguments[5],
                    arguments[6],
                    "/lib/exception/serialization.js",
                    "/lib/exception"
                ));
            },
            { "./base.js": 7, "/Library/WebServer/Documents/projects/amf/js/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js": 22, buffer: 19 },
        ],
        11: [
            function (e, r) {
                (function () {
                    var t = e("./stream.js"),
                        n = (e("../amf/spec.js"), e("../util/ieee754.js")),
                        o = function (e) {
                            (this.pointer = 0), t.call(this, e);
                        };
                    (o.prototype = new t()),
                        (o.prototype.constructor = o),
                        (o.prototype.readByte = function () {
                            return this.readBytes(1);
                        }),
                        (o.prototype.readRawByte = function () {
                            return this.readBytes(1, !0);
                        }),
                        (o.prototype.readRawBytes = function (e) {
                            return "undefined" == typeof e && (e = 1), this.readBytes(e, !0);
                        }),
                        (o.prototype.readBytes = function (e, r) {
                            if (("undefined" == typeof e && (e = 1), "undefined" == typeof r && (r = !1), (value = this.getRaw().substr(this.pointer, e)), (this.pointer += value.length), r)) return value;
                            for (var t = "", n = 0; n < value.length; n++) t += value.charCodeAt(n);
                            return t;
                        }),
                        (o.prototype.readDouble = function () {
                            var e = this.readRawBytes(8);
                            return n.unpack(s(e));
                        });
                    var s = function (e) {
                        var r = [],
                            t = e.split("");
                        for (var n in t) r.push(t[n].toString().charCodeAt(0));
                        return r;
                    };
                    r.exports = o;
                }.call(
                    this,
                    e("/Library/WebServer/Documents/projects/amf/js/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js"),
                    "undefined" != typeof self ? self : "undefined" != typeof window ? window : {},
                    e("buffer").Buffer,
                    arguments[3],
                    arguments[4],
                    arguments[5],
                    arguments[6],
                    "/lib/io/input.js",
                    "/lib/io"
                ));
            },
            { "../amf/spec.js": 6, "../util/ieee754.js": 15, "./stream.js": 13, "/Library/WebServer/Documents/projects/amf/js/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js": 22, buffer: 19 },
        ],
        12: [
            function (e, r) {
                (function () {
                    var t = e("./stream.js"),
                        n = (e("../amf/spec.js"), e("../util/ieee754.js")),
                        o = function (e) {
                            t.call(this, e);
                        };
                    (o.prototype = new t()),
                        (o.prototype.constructor = o),
                        (o.prototype.writeByte = function (e) {
                            this.raw += String.fromCharCode(e);
                        }),
                        (o.prototype.writeDouble = function (e) {
                            this.raw += s(n.pack(e, 11, 52));
                        }),
                        (o.prototype.writeRaw = function (e) {
                            this.raw += e;
                        });
                    var s = function (e) {
                        var r = "";
                        for (var t in e) {
                            var n = e[t];
                            r += String.fromCharCode(parseInt(n));
                        }
                        return r;
                    };
                    r.exports = o;
                }.call(
                    this,
                    e("/Library/WebServer/Documents/projects/amf/js/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js"),
                    "undefined" != typeof self ? self : "undefined" != typeof window ? window : {},
                    e("buffer").Buffer,
                    arguments[3],
                    arguments[4],
                    arguments[5],
                    arguments[6],
                    "/lib/io/output.js",
                    "/lib/io"
                ));
            },
            { "../amf/spec.js": 6, "../util/ieee754.js": 15, "./stream.js": 13, "/Library/WebServer/Documents/projects/amf/js/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js": 22, buffer: 19 },
        ],
        13: [
            function (e, r) {
                (function () {
                    var e = function (e) {
                        (e && "undefined" != typeof e) || (e = ""), (this.raw = e.toString());
                    };
                    (e.prototype = {
                        getRaw: function () {
                            return this.raw;
                        },
                        toString: function () {
                            return this.getRaw();
                        },
                    }),
                        (r.exports = e);
                }.call(
                    this,
                    e("/Library/WebServer/Documents/projects/amf/js/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js"),
                    "undefined" != typeof self ? self : "undefined" != typeof window ? window : {},
                    e("buffer").Buffer,
                    arguments[3],
                    arguments[4],
                    arguments[5],
                    arguments[6],
                    "/lib/io/stream.js",
                    "/lib/io"
                ));
            },
            { "/Library/WebServer/Documents/projects/amf/js/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js": 22, buffer: 19 },
        ],
        14: [
            function (e, r) {
                (function () {
                    var e = function (e) {
                        this.data = e;
                    };
                    (e.prototype = {
                        getData: function () {
                            return this.data;
                        },
                        setData: function (e) {
                            this.data = e;
                        },
                        toString: function () {
                            return this.getData();
                        },
                    }),
                        (r.exports = e);
                }.call(
                    this,
                    e("/Library/WebServer/Documents/projects/amf/js/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js"),
                    "undefined" != typeof self ? self : "undefined" != typeof window ? window : {},
                    e("buffer").Buffer,
                    arguments[3],
                    arguments[4],
                    arguments[5],
                    arguments[6],
                    "/lib/type/bytearray.js",
                    "/lib/type"
                ));
            },
            { "/Library/WebServer/Documents/projects/amf/js/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js": 22, buffer: 19 },
        ],
        15: [
            function (e, r) {
                (function () {
                    function e(e) {
                        var r,
                            t,
                            n,
                            o,
                            s,
                            i,
                            a,
                            u,
                            f = 11,
                            l = 52,
                            d = (1 << (f - 1)) - 1;
                        for (
                            isNaN(e)
                                ? ((t = (1 << d) - 1), (n = Math.pow(2, l - 1)), (r = 0))
                                : 1 / 0 === e || e === -1 / 0
                                ? ((t = (1 << d) - 1), (n = 0), (r = 0 > e ? 1 : 0))
                                : 0 === e
                                    ? ((t = 0), (n = 0), (r = 1 / e === -1 / 0 ? 1 : 0))
                                    : ((r = 0 > e),
                                        (e = Math.abs(e)),
                                        e >= Math.pow(2, 1 - d)
                                            ? ((o = Math.min(Math.floor(Math.log(e) / Math.LN2), d)), (t = o + d), (n = Math.round(e * Math.pow(2, l - o) - Math.pow(2, l))))
                                            : ((t = 0), (n = Math.round(e / Math.pow(2, 1 - d - l))))),
                                i = [],
                                s = l;
                            s;
                            s -= 1
                        )
                            i.push(n % 2 ? 1 : 0), (n = Math.floor(n / 2));
                        for (s = f; s; s -= 1) i.push(t % 2 ? 1 : 0), (t = Math.floor(t / 2));
                        for (i.push(r ? 1 : 0), i.reverse(), a = i.join(""), u = []; a.length; ) u.push(parseInt(a.substring(0, 8), 2)), (a = a.substring(8));
                        return u;
                    }
                    function t(e) {
                        var r,
                            t,
                            n,
                            o,
                            s,
                            i,
                            a,
                            u,
                            f = 11,
                            l = 52,
                            d = [];
                        for (r = e.length; r; r -= 1) for (n = e[r - 1], t = 8; t; t -= 1) d.push(n % 2 ? 1 : 0), (n >>= 1);
                        return (
                            d.reverse(),
                                (o = d.join("")),
                                (s = (1 << (f - 1)) - 1),
                                (i = parseInt(o.substring(0, 1), 2) ? -1 : 1),
                                (a = parseInt(o.substring(1, 1 + f), 2)),
                                (u = parseInt(o.substring(1 + f), 2)),
                                a === (1 << f) - 1 ? (0 !== u ? 0 / 0 : (1 / 0) * i) : a > 0 ? i * Math.pow(2, a - s) * (1 + u / Math.pow(2, l)) : 0 !== u ? i * Math.pow(2, -(s - 1)) * (u / Math.pow(2, l)) : 0 > i ? -0 : 0
                        );
                    }
                    r.exports = { pack: e, unpack: t };
                }.call(
                    this,
                    e("/Library/WebServer/Documents/projects/amf/js/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js"),
                    "undefined" != typeof self ? self : "undefined" != typeof window ? window : {},
                    e("buffer").Buffer,
                    arguments[3],
                    arguments[4],
                    arguments[5],
                    arguments[6],
                    "/lib/util/ieee754.js",
                    "/lib/util"
                ));
            },
            { "/Library/WebServer/Documents/projects/amf/js/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js": 22, buffer: 19 },
        ],
        16: [
            function (e, r) {
                (function () {
                    r.exports = function (e, r, t) {
                        if (void 0 === e || null === e) throw new TypeError('"array" is null or not defined');
                        var n = e.length >>> 0;
                        for (t = +t || 0, 1 / 0 === Math.abs(t) && (t = 0), 0 > t && ((t += n), 0 > t && (t = 0)); n > t; t++) if (e[t] === r) return t;
                        return -1;
                    };
                }.call(
                    this,
                    e("/Library/WebServer/Documents/projects/amf/js/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js"),
                    "undefined" != typeof self ? self : "undefined" != typeof window ? window : {},
                    e("buffer").Buffer,
                    arguments[3],
                    arguments[4],
                    arguments[5],
                    arguments[6],
                    "/lib/util/indexof.js",
                    "/lib/util"
                ));
            },
            { "/Library/WebServer/Documents/projects/amf/js/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js": 22, buffer: 19 },
        ],
        17: [
            function (e, r) {
                (function () {
                    var t = e("./../amf/amf.js"),
                        n = function (e) {
                            return e ? "exportData" in e && "importData" in e : !1;
                        },
                        o = function (e, r) {
                            return "object" == typeof e && t.CLASS_MAPPING_FIELD in e ? (r & t.CLASS_MAPPING ? e._classMapping : "") : "";
                        },
                        s = function (e) {
                            if (!e) return [];
                            var r = [];
                            for (var n in e) n != t.CLASS_MAPPING_FIELD && "function" != typeof e[n] && r.push(n);
                            return r;
                        };
                    r.exports = { isSerializable: n, getClassName: o, getObjectKeys: s };
                }.call(
                    this,
                    e("/Library/WebServer/Documents/projects/amf/js/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js"),
                    "undefined" != typeof self ? self : "undefined" != typeof window ? window : {},
                    e("buffer").Buffer,
                    arguments[3],
                    arguments[4],
                    arguments[5],
                    arguments[6],
                    "/lib/util/object.js",
                    "/lib/util"
                ));
            },
            { "./../amf/amf.js": 2, "/Library/WebServer/Documents/projects/amf/js/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js": 22, buffer: 19 },
        ],
        18: [
            function (e, r) {
                (function () {
                    var t = e("./indexof.js"),
                        n = function () {
                            (this.store = {}), (this.store[n.TYPE_STRING] = []), (this.store[n.TYPE_OBJECT] = []);
                        },
                        o = function (e, r) {
                            var n = t(this.store[r], e);
                            return n >= 0 ? n : this.validate(e) ? (this.addReference(e, r), !1) : !1;
                        },
                        s = function (e, r) {
                            if (!this.store.hasOwnProperty(r)) return !1;
                            var t = this.store[r].length;
                            return e >= t ? !1 : t ? this.store[r][e] : !1;
                        },
                        i = function (e) {
                            return null === e || ("string" == typeof e && !e.length) ? !1 : !0;
                        },
                        a = function (e, r) {
                            return this.validate(e) ? (this.store[r].push(e), e) : !1;
                        };
                    (n.prototype = { getReference: o, addReference: a, getByReference: s, validate: i }), (n.TYPE_STRING = "string"), (n.TYPE_OBJECT = "object"), (r.exports = n);
                }.call(
                    this,
                    e("/Library/WebServer/Documents/projects/amf/js/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js"),
                    "undefined" != typeof self ? self : "undefined" != typeof window ? window : {},
                    e("buffer").Buffer,
                    arguments[3],
                    arguments[4],
                    arguments[5],
                    arguments[6],
                    "/lib/util/reference-store.js",
                    "/lib/util"
                ));
            },
            { "./indexof.js": 16, "/Library/WebServer/Documents/projects/amf/js/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js": 22, buffer: 19 },
        ],
        19: [
            function (e, r, t) {
                (function (r, n, o) {
                    function o(e, r, t) {
                        if (!(this instanceof o)) return new o(e, r, t);
                        var n = typeof e;
                        if ("base64" === r && "string" === n) for (e = L(e); e.length % 4 !== 0; ) e += "=";
                        var s;
                        if ("number" === n) s = F(e);
                        else if ("string" === n) s = o.byteLength(e, r);
                        else {
                            if ("object" !== n) throw new Error("First argument needs to be a number, array or string.");
                            s = F(e.length);
                        }
                        var i;
                        o._useTypedArrays ? (i = M(new Uint8Array(s))) : ((i = this), (i.length = s), (i._isBuffer = !0));
                        var a;
                        if (o._useTypedArrays && "function" == typeof Uint8Array && e instanceof Uint8Array) i._set(e);
                        else if (R(e)) for (a = 0; s > a; a++) i[a] = o.isBuffer(e) ? e.readUInt8(a) : e[a];
                        else if ("string" === n) i.write(e, 0, r);
                        else if ("number" === n && !o._useTypedArrays && !t) for (a = 0; s > a; a++) i[a] = 0;
                        return i;
                    }
                    function s(e, r, t, n) {
                        t = Number(t) || 0;
                        var s = e.length - t;
                        n ? ((n = Number(n)), n > s && (n = s)) : (n = s);
                        var i = r.length;
                        G(i % 2 === 0, "Invalid hex string"), n > i / 2 && (n = i / 2);
                        for (var a = 0; n > a; a++) {
                            var u = parseInt(r.substr(2 * a, 2), 16);
                            G(!isNaN(u), "Invalid hex string"), (e[t + a] = u);
                        }
                        return (o._charsWritten = 2 * a), a;
                    }
                    function i(e, r, t, n) {
                        var s = (o._charsWritten = O(z(r), e, t, n));
                        return s;
                    }
                    function a(e, r, t, n) {
                        var s = (o._charsWritten = O(U(r), e, t, n));
                        return s;
                    }
                    function u(e, r, t, n) {
                        return a(e, r, t, n);
                    }
                    function f(e, r, t, n) {
                        var s = (o._charsWritten = O(W(r), e, t, n));
                        return s;
                    }
                    function l(e, r, t, n) {
                        var s = (o._charsWritten = O(x(r), e, t, n));
                        return s;
                    }
                    function d(e, r, t) {
                        return X.fromByteArray(0 === r && t === e.length ? e : e.slice(r, t));
                    }
                    function c(e, r, t) {
                        var n = "",
                            o = "";
                        t = Math.min(e.length, t);
                        for (var s = r; t > s; s++) e[s] <= 127 ? ((n += Y(o) + String.fromCharCode(e[s])), (o = "")) : (o += "%" + e[s].toString(16));
                        return n + Y(o);
                    }
                    function m(e, r, t) {
                        var n = "";
                        t = Math.min(e.length, t);
                        for (var o = r; t > o; o++) n += String.fromCharCode(e[o]);
                        return n;
                    }
                    function p(e, r, t) {
                        return m(e, r, t);
                    }
                    function b(e, r, t) {
                        var n = e.length;
                        (!r || 0 > r) && (r = 0), (!t || 0 > t || t > n) && (t = n);
                        for (var o = "", s = r; t > s; s++) o += C(e[s]);
                        return o;
                    }
                    function h(e, r, t) {
                        for (var n = e.slice(r, t), o = "", s = 0; s < n.length; s += 2) o += String.fromCharCode(n[s] + 256 * n[s + 1]);
                        return o;
                    }
                    function y(e, r, t, n) {
                        n || (G("boolean" == typeof t, "missing or invalid endian"), G(void 0 !== r && null !== r, "missing offset"), G(r + 1 < e.length, "Trying to read beyond buffer length"));
                        var o = e.length;
                        if (!(r >= o)) {
                            var s;
                            return t ? ((s = e[r]), o > r + 1 && (s |= e[r + 1] << 8)) : ((s = e[r] << 8), o > r + 1 && (s |= e[r + 1])), s;
                        }
                    }
                    function g(e, r, t, n) {
                        n || (G("boolean" == typeof t, "missing or invalid endian"), G(void 0 !== r && null !== r, "missing offset"), G(r + 3 < e.length, "Trying to read beyond buffer length"));
                        var o = e.length;
                        if (!(r >= o)) {
                            var s;
                            return (
                                t
                                    ? (o > r + 2 && (s = e[r + 2] << 16), o > r + 1 && (s |= e[r + 1] << 8), (s |= e[r]), o > r + 3 && (s += (e[r + 3] << 24) >>> 0))
                                    : (o > r + 1 && (s = e[r + 1] << 16), o > r + 2 && (s |= e[r + 2] << 8), o > r + 3 && (s |= e[r + 3]), (s += (e[r] << 24) >>> 0)),
                                    s
                            );
                        }
                    }
                    function w(e, r, t, n) {
                        n || (G("boolean" == typeof t, "missing or invalid endian"), G(void 0 !== r && null !== r, "missing offset"), G(r + 1 < e.length, "Trying to read beyond buffer length"));
                        var o = e.length;
                        if (!(r >= o)) {
                            var s = y(e, r, t, !0),
                                i = 32768 & s;
                            return i ? -1 * (65535 - s + 1) : s;
                        }
                    }
                    function _(e, r, t, n) {
                        n || (G("boolean" == typeof t, "missing or invalid endian"), G(void 0 !== r && null !== r, "missing offset"), G(r + 3 < e.length, "Trying to read beyond buffer length"));
                        var o = e.length;
                        if (!(r >= o)) {
                            var s = g(e, r, t, !0),
                                i = 2147483648 & s;
                            return i ? -1 * (4294967295 - s + 1) : s;
                        }
                    }
                    function v(e, r, t, n) {
                        return n || (G("boolean" == typeof t, "missing or invalid endian"), G(r + 3 < e.length, "Trying to read beyond buffer length")), q.read(e, r, t, 23, 4);
                    }
                    function j(e, r, t, n) {
                        return n || (G("boolean" == typeof t, "missing or invalid endian"), G(r + 7 < e.length, "Trying to read beyond buffer length")), q.read(e, r, t, 52, 8);
                    }
                    function E(e, r, t, n, o) {
                        o ||
                        (G(void 0 !== r && null !== r, "missing value"),
                            G("boolean" == typeof n, "missing or invalid endian"),
                            G(void 0 !== t && null !== t, "missing offset"),
                            G(t + 1 < e.length, "trying to write beyond buffer length"),
                            k(r, 65535));
                        var s = e.length;
                        if (!(t >= s)) for (var i = 0, a = Math.min(s - t, 2); a > i; i++) e[t + i] = (r & (255 << (8 * (n ? i : 1 - i)))) >>> (8 * (n ? i : 1 - i));
                    }
                    function I(e, r, t, n, o) {
                        o ||
                        (G(void 0 !== r && null !== r, "missing value"),
                            G("boolean" == typeof n, "missing or invalid endian"),
                            G(void 0 !== t && null !== t, "missing offset"),
                            G(t + 3 < e.length, "trying to write beyond buffer length"),
                            k(r, 4294967295));
                        var s = e.length;
                        if (!(t >= s)) for (var i = 0, a = Math.min(s - t, 4); a > i; i++) e[t + i] = (r >>> (8 * (n ? i : 3 - i))) & 255;
                    }
                    function A(e, r, t, n, o) {
                        o ||
                        (G(void 0 !== r && null !== r, "missing value"),
                            G("boolean" == typeof n, "missing or invalid endian"),
                            G(void 0 !== t && null !== t, "missing offset"),
                            G(t + 1 < e.length, "Trying to write beyond buffer length"),
                            P(r, 32767, -32768));
                        var s = e.length;
                        t >= s || (r >= 0 ? E(e, r, t, n, o) : E(e, 65535 + r + 1, t, n, o));
                    }
                    function B(e, r, t, n, o) {
                        o ||
                        (G(void 0 !== r && null !== r, "missing value"),
                            G("boolean" == typeof n, "missing or invalid endian"),
                            G(void 0 !== t && null !== t, "missing offset"),
                            G(t + 3 < e.length, "Trying to write beyond buffer length"),
                            P(r, 2147483647, -2147483648));
                        var s = e.length;
                        t >= s || (r >= 0 ? I(e, r, t, n, o) : I(e, 4294967295 + r + 1, t, n, o));
                    }
                    function S(e, r, t, n, o) {
                        o ||
                        (G(void 0 !== r && null !== r, "missing value"),
                            G("boolean" == typeof n, "missing or invalid endian"),
                            G(void 0 !== t && null !== t, "missing offset"),
                            G(t + 3 < e.length, "Trying to write beyond buffer length"),
                            J(r, 34028234663852886e22, -34028234663852886e22));
                        var s = e.length;
                        t >= s || q.write(e, r, t, n, 23, 4);
                    }
                    function T(e, r, t, n, o) {
                        o ||
                        (G(void 0 !== r && null !== r, "missing value"),
                            G("boolean" == typeof n, "missing or invalid endian"),
                            G(void 0 !== t && null !== t, "missing offset"),
                            G(t + 7 < e.length, "Trying to write beyond buffer length"),
                            J(r, 17976931348623157e292, -17976931348623157e292));
                        var s = e.length;
                        t >= s || q.write(e, r, t, n, 52, 8);
                    }
                    function L(e) {
                        return e.trim ? e.trim() : e.replace(/^\s+|\s+$/g, "");
                    }
                    function M(e) {
                        return (
                            (e._isBuffer = !0),
                                (e._get = e.get),
                                (e._set = e.set),
                                (e.get = V.get),
                                (e.set = V.set),
                                (e.write = V.write),
                                (e.toString = V.toString),
                                (e.toLocaleString = V.toString),
                                (e.toJSON = V.toJSON),
                                (e.copy = V.copy),
                                (e.slice = V.slice),
                                (e.readUInt8 = V.readUInt8),
                                (e.readUInt16LE = V.readUInt16LE),
                                (e.readUInt16BE = V.readUInt16BE),
                                (e.readUInt32LE = V.readUInt32LE),
                                (e.readUInt32BE = V.readUInt32BE),
                                (e.readInt8 = V.readInt8),
                                (e.readInt16LE = V.readInt16LE),
                                (e.readInt16BE = V.readInt16BE),
                                (e.readInt32LE = V.readInt32LE),
                                (e.readInt32BE = V.readInt32BE),
                                (e.readFloatLE = V.readFloatLE),
                                (e.readFloatBE = V.readFloatBE),
                                (e.readDoubleLE = V.readDoubleLE),
                                (e.readDoubleBE = V.readDoubleBE),
                                (e.writeUInt8 = V.writeUInt8),
                                (e.writeUInt16LE = V.writeUInt16LE),
                                (e.writeUInt16BE = V.writeUInt16BE),
                                (e.writeUInt32LE = V.writeUInt32LE),
                                (e.writeUInt32BE = V.writeUInt32BE),
                                (e.writeInt8 = V.writeInt8),
                                (e.writeInt16LE = V.writeInt16LE),
                                (e.writeInt16BE = V.writeInt16BE),
                                (e.writeInt32LE = V.writeInt32LE),
                                (e.writeInt32BE = V.writeInt32BE),
                                (e.writeFloatLE = V.writeFloatLE),
                                (e.writeFloatBE = V.writeFloatBE),
                                (e.writeDoubleLE = V.writeDoubleLE),
                                (e.writeDoubleBE = V.writeDoubleBE),
                                (e.fill = V.fill),
                                (e.inspect = V.inspect),
                                (e.toArrayBuffer = V.toArrayBuffer),
                                e
                        );
                    }
                    function D(e, r, t) {
                        return "number" != typeof e ? t : ((e = ~~e), e >= r ? r : e >= 0 ? e : ((e += r), e >= 0 ? e : 0));
                    }
                    function F(e) {
                        return (e = ~~Math.ceil(+e)), 0 > e ? 0 : e;
                    }
                    function N(e) {
                        return (
                            Array.isArray ||
                            function (e) {
                                return "[object Array]" === Object.prototype.toString.call(e);
                            }
                        )(e);
                    }
                    function R(e) {
                        return N(e) || o.isBuffer(e) || (e && "object" == typeof e && "number" == typeof e.length);
                    }
                    function C(e) {
                        return 16 > e ? "0" + e.toString(16) : e.toString(16);
                    }
                    function z(e) {
                        for (var r = [], t = 0; t < e.length; t++) {
                            var n = e.charCodeAt(t);
                            if (127 >= n) r.push(e.charCodeAt(t));
                            else {
                                var o = t;
                                n >= 55296 && 57343 >= n && t++;
                                for (
                                    var s = encodeURIComponent(e.slice(o, t + 1))
                                            .substr(1)
                                            .split("%"),
                                        i = 0;
                                    i < s.length;
                                    i++
                                )
                                    r.push(parseInt(s[i], 16));
                            }
                        }
                        return r;
                    }
                    function U(e) {
                        for (var r = [], t = 0; t < e.length; t++) r.push(255 & e.charCodeAt(t));
                        return r;
                    }
                    function x(e) {
                        for (var r, t, n, o = [], s = 0; s < e.length; s++) (r = e.charCodeAt(s)), (t = r >> 8), (n = r % 256), o.push(n), o.push(t);
                        return o;
                    }
                    function W(e) {
                        return X.toByteArray(e);
                    }
                    function O(e, r, t, n) {
                        for (var o = 0; n > o && !(o + t >= r.length || o >= e.length); o++) r[o + t] = e[o];
                        return o;
                    }
                    function Y(e) {
                        try {
                            return decodeURIComponent(e);
                        } catch (r) {
                            return String.fromCharCode(65533);
                        }
                    }
                    function k(e, r) {
                        G("number" == typeof e, "cannot write a non-number as a number"),
                            G(e >= 0, "specified a negative value for writing an unsigned value"),
                            G(r >= e, "value is larger than maximum value for type"),
                            G(Math.floor(e) === e, "value has a fractional component");
                    }
                    function P(e, r, t) {
                        G("number" == typeof e, "cannot write a non-number as a number"),
                            G(r >= e, "value larger than maximum allowed value"),
                            G(e >= t, "value smaller than minimum allowed value"),
                            G(Math.floor(e) === e, "value has a fractional component");
                    }
                    function J(e, r, t) {
                        G("number" == typeof e, "cannot write a non-number as a number"), G(r >= e, "value larger than maximum allowed value"), G(e >= t, "value smaller than minimum allowed value");
                    }
                    function G(e, r) {
                        if (!e) throw new Error(r || "Failed assertion");
                    }
                    var X = e("base64-js"),
                        q = e("ieee754");
                    (t.Buffer = o),
                        (t.SlowBuffer = o),
                        (t.INSPECT_MAX_BYTES = 50),
                        (o.poolSize = 8192),
                        (o._useTypedArrays = (function () {
                            if ("undefined" == typeof Uint8Array || "undefined" == typeof ArrayBuffer) return !1;
                            try {
                                var e = new Uint8Array(0);
                                return (
                                    (e.foo = function () {
                                        return 42;
                                    }),
                                    42 === e.foo() && "function" == typeof e.subarray
                                );
                            } catch (r) {
                                return !1;
                            }
                        })()),
                        (o.isEncoding = function (e) {
                            switch (String(e).toLowerCase()) {
                                case "hex":
                                case "utf8":
                                case "utf-8":
                                case "ascii":
                                case "binary":
                                case "base64":
                                case "raw":
                                case "ucs2":
                                case "ucs-2":
                                case "utf16le":
                                case "utf-16le":
                                    return !0;
                                default:
                                    return !1;
                            }
                        }),
                        (o.isBuffer = function (e) {
                            return !(null === e || void 0 === e || !e._isBuffer);
                        }),
                        (o.byteLength = function (e, r) {
                            var t;
                            switch (((e += ""), r || "utf8")) {
                                case "hex":
                                    t = e.length / 2;
                                    break;
                                case "utf8":
                                case "utf-8":
                                    t = z(e).length;
                                    break;
                                case "ascii":
                                case "binary":
                                case "raw":
                                    t = e.length;
                                    break;
                                case "base64":
                                    t = W(e).length;
                                    break;
                                case "ucs2":
                                case "ucs-2":
                                case "utf16le":
                                case "utf-16le":
                                    t = 2 * e.length;
                                    break;
                                default:
                                    throw new Error("Unknown encoding");
                            }
                            return t;
                        }),
                        (o.concat = function (e, r) {
                            if ((G(N(e), "Usage: Buffer.concat(list, [totalLength])\nlist should be an Array."), 0 === e.length)) return new o(0);
                            if (1 === e.length) return e[0];
                            var t;
                            if ("number" != typeof r) for (r = 0, t = 0; t < e.length; t++) r += e[t].length;
                            var n = new o(r),
                                s = 0;
                            for (t = 0; t < e.length; t++) {
                                var i = e[t];
                                i.copy(n, s), (s += i.length);
                            }
                            return n;
                        }),
                        (o.prototype.write = function (e, r, t, n) {
                            if (isFinite(r)) isFinite(t) || ((n = t), (t = void 0));
                            else {
                                var o = n;
                                (n = r), (r = t), (t = o);
                            }
                            r = Number(r) || 0;
                            var d = this.length - r;
                            t ? ((t = Number(t)), t > d && (t = d)) : (t = d), (n = String(n || "utf8").toLowerCase());
                            var c;
                            switch (n) {
                                case "hex":
                                    c = s(this, e, r, t);
                                    break;
                                case "utf8":
                                case "utf-8":
                                    c = i(this, e, r, t);
                                    break;
                                case "ascii":
                                    c = a(this, e, r, t);
                                    break;
                                case "binary":
                                    c = u(this, e, r, t);
                                    break;
                                case "base64":
                                    c = f(this, e, r, t);
                                    break;
                                case "ucs2":
                                case "ucs-2":
                                case "utf16le":
                                case "utf-16le":
                                    c = l(this, e, r, t);
                                    break;
                                default:
                                    throw new Error("Unknown encoding");
                            }
                            return c;
                        }),
                        (o.prototype.toString = function (e, r, t) {
                            var n = this;
                            if (((e = String(e || "utf8").toLowerCase()), (r = Number(r) || 0), (t = void 0 !== t ? Number(t) : (t = n.length)), t === r)) return "";
                            var o;
                            switch (e) {
                                case "hex":
                                    o = b(n, r, t);
                                    break;
                                case "utf8":
                                case "utf-8":
                                    o = c(n, r, t);
                                    break;
                                case "ascii":
                                    o = m(n, r, t);
                                    break;
                                case "binary":
                                    o = p(n, r, t);
                                    break;
                                case "base64":
                                    o = d(n, r, t);
                                    break;
                                case "ucs2":
                                case "ucs-2":
                                case "utf16le":
                                case "utf-16le":
                                    o = h(n, r, t);
                                    break;
                                default:
                                    throw new Error("Unknown encoding");
                            }
                            return o;
                        }),
                        (o.prototype.toJSON = function () {
                            return { type: "Buffer", data: Array.prototype.slice.call(this._arr || this, 0) };
                        }),
                        (o.prototype.copy = function (e, r, t, n) {
                            var o = this;
                            if ((t || (t = 0), n || 0 === n || (n = this.length), r || (r = 0), n !== t && 0 !== e.length && 0 !== o.length)) {
                                G(n >= t, "sourceEnd < sourceStart"),
                                    G(r >= 0 && r < e.length, "targetStart out of bounds"),
                                    G(t >= 0 && t < o.length, "sourceStart out of bounds"),
                                    G(n >= 0 && n <= o.length, "sourceEnd out of bounds"),
                                n > this.length && (n = this.length),
                                e.length - r < n - t && (n = e.length - r + t);
                                for (var s = 0; n - t > s; s++) e[s + r] = this[s + t];
                            }
                        }),
                        (o.prototype.slice = function (e, r) {
                            var t = this.length;
                            if (((e = D(e, t, 0)), (r = D(r, t, t)), o._useTypedArrays)) return M(this.subarray(e, r));
                            for (var n = r - e, s = new o(n, void 0, !0), i = 0; n > i; i++) s[i] = this[i + e];
                            return s;
                        }),
                        (o.prototype.get = function (e) {
                            return console.log(".get() is deprecated. Access using array indexes instead."), this.readUInt8(e);
                        }),
                        (o.prototype.set = function (e, r) {
                            return console.log(".set() is deprecated. Access using array indexes instead."), this.writeUInt8(e, r);
                        }),
                        (o.prototype.readUInt8 = function (e, r) {
                            return r || (G(void 0 !== e && null !== e, "missing offset"), G(e < this.length, "Trying to read beyond buffer length")), e >= this.length ? void 0 : this[e];
                        }),
                        (o.prototype.readUInt16LE = function (e, r) {
                            return y(this, e, !0, r);
                        }),
                        (o.prototype.readUInt16BE = function (e, r) {
                            return y(this, e, !1, r);
                        }),
                        (o.prototype.readUInt32LE = function (e, r) {
                            return g(this, e, !0, r);
                        }),
                        (o.prototype.readUInt32BE = function (e, r) {
                            return g(this, e, !1, r);
                        }),
                        (o.prototype.readInt8 = function (e, r) {
                            if ((r || (G(void 0 !== e && null !== e, "missing offset"), G(e < this.length, "Trying to read beyond buffer length")), !(e >= this.length))) {
                                var t = 128 & this[e];
                                return t ? -1 * (255 - this[e] + 1) : this[e];
                            }
                        }),
                        (o.prototype.readInt16LE = function (e, r) {
                            return w(this, e, !0, r);
                        }),
                        (o.prototype.readInt16BE = function (e, r) {
                            return w(this, e, !1, r);
                        }),
                        (o.prototype.readInt32LE = function (e, r) {
                            return _(this, e, !0, r);
                        }),
                        (o.prototype.readInt32BE = function (e, r) {
                            return _(this, e, !1, r);
                        }),
                        (o.prototype.readFloatLE = function (e, r) {
                            return v(this, e, !0, r);
                        }),
                        (o.prototype.readFloatBE = function (e, r) {
                            return v(this, e, !1, r);
                        }),
                        (o.prototype.readDoubleLE = function (e, r) {
                            return j(this, e, !0, r);
                        }),
                        (o.prototype.readDoubleBE = function (e, r) {
                            return j(this, e, !1, r);
                        }),
                        (o.prototype.writeUInt8 = function (e, r, t) {
                            t || (G(void 0 !== e && null !== e, "missing value"), G(void 0 !== r && null !== r, "missing offset"), G(r < this.length, "trying to write beyond buffer length"), k(e, 255)), r >= this.length || (this[r] = e);
                        }),
                        (o.prototype.writeUInt16LE = function (e, r, t) {
                            E(this, e, r, !0, t);
                        }),
                        (o.prototype.writeUInt16BE = function (e, r, t) {
                            E(this, e, r, !1, t);
                        }),
                        (o.prototype.writeUInt32LE = function (e, r, t) {
                            I(this, e, r, !0, t);
                        }),
                        (o.prototype.writeUInt32BE = function (e, r, t) {
                            I(this, e, r, !1, t);
                        }),
                        (o.prototype.writeInt8 = function (e, r, t) {
                            t || (G(void 0 !== e && null !== e, "missing value"), G(void 0 !== r && null !== r, "missing offset"), G(r < this.length, "Trying to write beyond buffer length"), P(e, 127, -128)),
                            r >= this.length || (e >= 0 ? this.writeUInt8(e, r, t) : this.writeUInt8(255 + e + 1, r, t));
                        }),
                        (o.prototype.writeInt16LE = function (e, r, t) {
                            A(this, e, r, !0, t);
                        }),
                        (o.prototype.writeInt16BE = function (e, r, t) {
                            A(this, e, r, !1, t);
                        }),
                        (o.prototype.writeInt32LE = function (e, r, t) {
                            B(this, e, r, !0, t);
                        }),
                        (o.prototype.writeInt32BE = function (e, r, t) {
                            B(this, e, r, !1, t);
                        }),
                        (o.prototype.writeFloatLE = function (e, r, t) {
                            S(this, e, r, !0, t);
                        }),
                        (o.prototype.writeFloatBE = function (e, r, t) {
                            S(this, e, r, !1, t);
                        }),
                        (o.prototype.writeDoubleLE = function (e, r, t) {
                            T(this, e, r, !0, t);
                        }),
                        (o.prototype.writeDoubleBE = function (e, r, t) {
                            T(this, e, r, !1, t);
                        }),
                        (o.prototype.fill = function (e, r, t) {
                            if (
                                (e || (e = 0),
                                r || (r = 0),
                                t || (t = this.length),
                                "string" == typeof e && (e = e.charCodeAt(0)),
                                    G("number" == typeof e && !isNaN(e), "value is not a number"),
                                    G(t >= r, "end < start"),
                                t !== r && 0 !== this.length)
                            ) {
                                G(r >= 0 && r < this.length, "start out of bounds"), G(t >= 0 && t <= this.length, "end out of bounds");
                                for (var n = r; t > n; n++) this[n] = e;
                            }
                        }),
                        (o.prototype.inspect = function () {
                            for (var e = [], r = this.length, n = 0; r > n; n++)
                                if (((e[n] = C(this[n])), n === t.INSPECT_MAX_BYTES)) {
                                    e[n + 1] = "...";
                                    break;
                                }
                            return "<Buffer " + e.join(" ") + ">";
                        }),
                        (o.prototype.toArrayBuffer = function () {
                            if ("function" == typeof Uint8Array) {
                                if (o._useTypedArrays) return new o(this).buffer;
                                for (var e = new Uint8Array(this.length), r = 0, t = e.length; t > r; r += 1) e[r] = this[r];
                                return e.buffer;
                            }
                            throw new Error("Buffer.toArrayBuffer not supported in this browser");
                        });
                    var V = o.prototype;
                }.call(
                    this,
                    e("/Library/WebServer/Documents/projects/amf/js/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js"),
                    "undefined" != typeof self ? self : "undefined" != typeof window ? window : {},
                    e("buffer").Buffer,
                    arguments[3],
                    arguments[4],
                    arguments[5],
                    arguments[6],
                    "/node_modules/browserify/node_modules/buffer/index.js",
                    "/node_modules/browserify/node_modules/buffer"
                ));
            },
            { "/Library/WebServer/Documents/projects/amf/js/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js": 22, "base64-js": 20, buffer: 19, ieee754: 21 },
        ],
        20: [
            function (e, r) {
                (function () {
                    var e = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
                    !(function () {
                        "use strict";
                        function t(e) {
                            var r = e.charCodeAt(0);
                            return r === i ? 62 : r === a ? 63 : u > r ? -1 : u + 10 > r ? r - u + 26 + 26 : l + 26 > r ? r - l : f + 26 > r ? r - f + 26 : void 0;
                        }
                        function n(e) {
                            function r(e) {
                                f[d++] = e;
                            }
                            var n, o, i, a, u, f;
                            if (e.length % 4 > 0) throw new Error("Invalid string. Length must be a multiple of 4");
                            var l = e.length;
                            (u = "=" === e.charAt(l - 2) ? 2 : "=" === e.charAt(l - 1) ? 1 : 0), (f = new s((3 * e.length) / 4 - u)), (i = u > 0 ? e.length - 4 : e.length);
                            var d = 0;
                            for (n = 0, o = 0; i > n; n += 4, o += 3) (a = (t(e.charAt(n)) << 18) | (t(e.charAt(n + 1)) << 12) | (t(e.charAt(n + 2)) << 6) | t(e.charAt(n + 3))), r((16711680 & a) >> 16), r((65280 & a) >> 8), r(255 & a);
                            return (
                                2 === u
                                    ? ((a = (t(e.charAt(n)) << 2) | (t(e.charAt(n + 1)) >> 4)), r(255 & a))
                                    : 1 === u && ((a = (t(e.charAt(n)) << 10) | (t(e.charAt(n + 1)) << 4) | (t(e.charAt(n + 2)) >> 2)), r((a >> 8) & 255), r(255 & a)),
                                    f
                            );
                        }
                        function o(r) {
                            function t(r) {
                                return e.charAt(r);
                            }
                            function n(e) {
                                return t((e >> 18) & 63) + t((e >> 12) & 63) + t((e >> 6) & 63) + t(63 & e);
                            }
                            var o,
                                s,
                                i,
                                a = r.length % 3,
                                u = "";
                            for (o = 0, i = r.length - a; i > o; o += 3) (s = (r[o] << 16) + (r[o + 1] << 8) + r[o + 2]), (u += n(s));
                            switch (a) {
                                case 1:
                                    (s = r[r.length - 1]), (u += t(s >> 2)), (u += t((s << 4) & 63)), (u += "==");
                                    break;
                                case 2:
                                    (s = (r[r.length - 2] << 8) + r[r.length - 1]), (u += t(s >> 10)), (u += t((s >> 4) & 63)), (u += t((s << 2) & 63)), (u += "=");
                            }
                            return u;
                        }
                        var s = "undefined" != typeof Uint8Array ? Uint8Array : Array,
                            i = ("0".charCodeAt(0), "+".charCodeAt(0)),
                            a = "/".charCodeAt(0),
                            u = "0".charCodeAt(0),
                            f = "a".charCodeAt(0),
                            l = "A".charCodeAt(0);
                        (r.exports.toByteArray = n), (r.exports.fromByteArray = o);
                    })();
                }.call(
                    this,
                    e("/Library/WebServer/Documents/projects/amf/js/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js"),
                    "undefined" != typeof self ? self : "undefined" != typeof window ? window : {},
                    e("buffer").Buffer,
                    arguments[3],
                    arguments[4],
                    arguments[5],
                    arguments[6],
                    "/node_modules/browserify/node_modules/buffer/node_modules/base64-js/lib/b64.js",
                    "/node_modules/browserify/node_modules/buffer/node_modules/base64-js/lib"
                ));
            },
            { "/Library/WebServer/Documents/projects/amf/js/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js": 22, buffer: 19 },
        ],
        21: [
            function (e, r, t) {
                (function () {
                    (t.read = function (e, r, t, n, o) {
                        var s,
                            i,
                            a = 8 * o - n - 1,
                            u = (1 << a) - 1,
                            f = u >> 1,
                            l = -7,
                            d = t ? o - 1 : 0,
                            c = t ? -1 : 1,
                            m = e[r + d];
                        for (d += c, s = m & ((1 << -l) - 1), m >>= -l, l += a; l > 0; s = 256 * s + e[r + d], d += c, l -= 8);
                        for (i = s & ((1 << -l) - 1), s >>= -l, l += n; l > 0; i = 256 * i + e[r + d], d += c, l -= 8);
                        if (0 === s) s = 1 - f;
                        else {
                            if (s === u) return i ? 0 / 0 : (1 / 0) * (m ? -1 : 1);
                            (i += Math.pow(2, n)), (s -= f);
                        }
                        return (m ? -1 : 1) * i * Math.pow(2, s - n);
                    }),
                        (t.write = function (e, r, t, n, o, s) {
                            var i,
                                a,
                                u,
                                f = 8 * s - o - 1,
                                l = (1 << f) - 1,
                                d = l >> 1,
                                c = 23 === o ? Math.pow(2, -24) - Math.pow(2, -77) : 0,
                                m = n ? 0 : s - 1,
                                p = n ? 1 : -1,
                                b = 0 > r || (0 === r && 0 > 1 / r) ? 1 : 0;
                            for (
                                r = Math.abs(r),
                                    isNaN(r) || 1 / 0 === r
                                        ? ((a = isNaN(r) ? 1 : 0), (i = l))
                                        : ((i = Math.floor(Math.log(r) / Math.LN2)),
                                        r * (u = Math.pow(2, -i)) < 1 && (i--, (u *= 2)),
                                            (r += i + d >= 1 ? c / u : c * Math.pow(2, 1 - d)),
                                        r * u >= 2 && (i++, (u /= 2)),
                                            i + d >= l ? ((a = 0), (i = l)) : i + d >= 1 ? ((a = (r * u - 1) * Math.pow(2, o)), (i += d)) : ((a = r * Math.pow(2, d - 1) * Math.pow(2, o)), (i = 0)));
                                o >= 8;
                                e[t + m] = 255 & a, m += p, a /= 256, o -= 8
                            );
                            for (i = (i << o) | a, f += o; f > 0; e[t + m] = 255 & i, m += p, i /= 256, f -= 8);
                            e[t + m - p] |= 128 * b;
                        });
                }.call(
                    this,
                    e("/Library/WebServer/Documents/projects/amf/js/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js"),
                    "undefined" != typeof self ? self : "undefined" != typeof window ? window : {},
                    e("buffer").Buffer,
                    arguments[3],
                    arguments[4],
                    arguments[5],
                    arguments[6],
                    "/node_modules/browserify/node_modules/buffer/node_modules/ieee754/index.js",
                    "/node_modules/browserify/node_modules/buffer/node_modules/ieee754"
                ));
            },
            { "/Library/WebServer/Documents/projects/amf/js/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js": 22, buffer: 19 },
        ],
        22: [
            function (e, r) {
                (function (e) {
                    var e = (r.exports = {});
                    (e.nextTick = (function () {
                        var e = "undefined" != typeof window && window.setImmediate,
                            r = "undefined" != typeof window && window.postMessage && window.addEventListener;
                        if (e)
                            return function (e) {
                                return window.setImmediate(e);
                            };
                        if (r) {
                            var t = [];
                            return (
                                window.addEventListener(
                                    "message",
                                    function (e) {
                                        var r = e.source;
                                        if ((r === window || null === r) && "process-tick" === e.data && (e.stopPropagation(), t.length > 0)) {
                                            var n = t.shift();
                                            n();
                                        }
                                    },
                                    !0
                                ),
                                    function (e) {
                                        t.push(e), window.postMessage("process-tick", "*");
                                    }
                            );
                        }
                        return function (e) {
                            setTimeout(e, 0);
                        };
                    })()),
                        (e.title = "browser"),
                        (e.browser = !0),
                        (e.env = {}),
                        (e.argv = []),
                        (e.binding = function () {
                            throw new Error("process.binding is not supported");
                        }),
                        (e.cwd = function () {
                            return "/";
                        }),
                        (e.chdir = function () {
                            throw new Error("process.chdir is not supported");
                        });
                }.call(
                    this,
                    e("/Library/WebServer/Documents/projects/amf/js/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js"),
                    "undefined" != typeof self ? self : "undefined" != typeof window ? window : {},
                    e("buffer").Buffer,
                    arguments[3],
                    arguments[4],
                    arguments[5],
                    arguments[6],
                    "/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js",
                    "/node_modules/browserify/node_modules/insert-module-globals/node_modules/process"
                ));
            },
            { "/Library/WebServer/Documents/projects/amf/js/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js": 22, buffer: 19 },
        ],
        23: [
            function (e, r, t) {
                (function (e, n) {
                    !(function (e) {
                        function o(e) {
                            for (var r, t, n = [], o = 0, s = e.length; s > o; )
                                (r = e.charCodeAt(o++)), r >= 55296 && 56319 >= r && s > o ? ((t = e.charCodeAt(o++)), 56320 == (64512 & t) ? n.push(((1023 & r) << 10) + (1023 & t) + 65536) : (n.push(r), o--)) : n.push(r);
                            return n;
                        }
                        function s(e) {
                            for (var r, t = e.length, n = -1, o = ""; ++n < t; ) (r = e[n]), r > 65535 && ((r -= 65536), (o += g(((r >>> 10) & 1023) | 55296)), (r = 56320 | (1023 & r))), (o += g(r));
                            return o;
                        }
                        function i(e, r) {
                            return g(((e >> r) & 63) | 128);
                        }
                        function a(e) {
                            if (0 == (4294967168 & e)) return g(e);
                            var r = "";
                            return (
                                0 == (4294965248 & e)
                                    ? (r = g(((e >> 6) & 31) | 192))
                                    : 0 == (4294901760 & e)
                                    ? ((r = g(((e >> 12) & 15) | 224)), (r += i(e, 6)))
                                    : 0 == (4292870144 & e) && ((r = g(((e >> 18) & 7) | 240)), (r += i(e, 12)), (r += i(e, 6))),
                                    (r += g((63 & e) | 128))
                            );
                        }
                        function u(e) {
                            for (var r, t = o(e), n = t.length, s = -1, i = ""; ++s < n; ) (r = t[s]), (i += a(r));
                            return i;
                        }
                        function f() {
                            if (y >= h) throw Error("Invalid byte index");
                            var e = 255 & b[y];
                            if ((y++, 128 == (192 & e))) return 63 & e;
                            throw Error("Invalid continuation byte");
                        }
                        function l() {
                            var e, r, t, n, o;
                            if (y > h) throw Error("Invalid byte index");
                            if (y == h) return !1;
                            if (((e = 255 & b[y]), y++, 0 == (128 & e))) return e;
                            if (192 == (224 & e)) {
                                var r = f();
                                if (((o = ((31 & e) << 6) | r), o >= 128)) return o;
                                throw Error("Invalid continuation byte");
                            }
                            if (224 == (240 & e)) {
                                if (((r = f()), (t = f()), (o = ((15 & e) << 12) | (r << 6) | t), o >= 2048)) return o;
                                throw Error("Invalid continuation byte");
                            }
                            if (240 == (248 & e) && ((r = f()), (t = f()), (n = f()), (o = ((15 & e) << 18) | (r << 12) | (t << 6) | n), o >= 65536 && 1114111 >= o)) return o;
                            throw Error("Invalid UTF-8 detected");
                        }
                        function d(e) {
                            (b = o(e)), (h = b.length), (y = 0);
                            for (var r, t = []; (r = l()) !== !1; ) t.push(r);
                            return s(t);
                        }
                        var c = "object" == typeof t && t,
                            m = "object" == typeof r && r && r.exports == c && r,
                            p = "object" == typeof n && n;
                        (p.global === p || p.window === p) && (e = p);
                        var b,
                            h,
                            y,
                            g = String.fromCharCode,
                            w = { version: "2.0.0", encode: u, decode: d };
                        if ("function" == typeof define && "object" == typeof define.amd && define.amd)
                            define(function () {
                                return w;
                            });
                        else if (c && !c.nodeType)
                            if (m) m.exports = w;
                            else {
                                var _ = {},
                                    v = _.hasOwnProperty;
                                for (var j in w) v.call(w, j) && (c[j] = w[j]);
                            }
                        else e.utf8 = w;
                    })(this);
                }.call(
                    this,
                    e("/Library/WebServer/Documents/projects/amf/js/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js"),
                    "undefined" != typeof self ? self : "undefined" != typeof window ? window : {},
                    e("buffer").Buffer,
                    arguments[3],
                    arguments[4],
                    arguments[5],
                    arguments[6],
                    "/node_modules/utf8/utf8.js",
                    "/node_modules/utf8"
                ));
            },
            { "/Library/WebServer/Documents/projects/amf/js/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js": 22, buffer: 19 },
        ],
    },
    {},
    [1]
);
var canvas = {
    animation: {},
    utils: {},
    ui: {},
    px: {
        Loader: PIXI.loader,
        Container: PIXI.Container,
        Sprite: PIXI.Sprite,
        Ticker: PIXI.ticker.Ticker,
        Application: PIXI.Application,
        ColorMatrixFilter: PIXI.filters.ColorMatrixFilter,
        TextureEmpty: PIXI.Texture.EMPTY,
        SlicedSprite: PIXI.mesh.NineSlicePlane,
        Graphics: PIXI.Graphics,
        Text: PIXI.Text,
        BitmapText: PIXI.extras.BitmapText,
        Point: PIXI.Point,
        Rectangle: PIXI.Rectangle,
        Circle: PIXI.Circle,
        Ellipse: PIXI.Ellipse,
        BlendMode: PIXI.BLEND_MODES,
        ScaleMode: PIXI.SCALE_MODES,
        GlowFilter: PIXI.filters.GlowFilter,
        TiltShiftFilter: PIXI.filters.TiltShiftFilter,
        DropShadowFilter: PIXI.filters.DropShadowFilter,
        AlphaFilter: PIXI.filters.AlphaFilter,
        TilingSprite: PIXI.extras.TilingSprite,
        utils: PIXI.utils,
        Texture: PIXI.Texture,
        ResponseType: PIXI.loaders.Resource.XHR_RESPONSE_TYPE,
        LoadType: PIXI.loaders.Resource.LOAD_TYPE,
        Tween: TWEEN,
        inflate: pako.inflate,
        Howl: Howl,
        AMF: AMF,
    },
    data: { battle: {}, location: {}, manor: { throne: {} }, leftMenu: {}, cube: {}, clanWar: {} },
    app: {
        view: { window: {} },
        battle: { view: { elements: {} }, engine: {} },
        mem: { view: {} },
        location: { view: { elements: {}, popups: {}, fronts: {} } },
        world: { view: {}, engine: {}, manor: { popup: {} } },
        manor: { view: { controls: { elements: {}, camp: {}, throne: {} } } },
        hunt: { view: { elements: {} }, engine: {} },
        inst: { view: { combo: {} } },
        user: { view: {} },
        leftMenu: { view: {} },
        avatar: { view: {} },
        topMenu: { view: {} },
        rightMenu: { view: { menu: {} } },
        compass: { view: {} },
        magic: { view: { slots: {} } },
        birthday: { view: {} },
        cube: { view: {} },
        casino: { view: {} },
        diceGame: { view: {} },
        treasure: { view: {} },
        wheel: { view: {} },
        mirror: { view: {} },
        clanWar: { view: {} },
        clanCitadel: { view: { sanctuary: {} } },
        barber: {},
        firstBattle: { view: {} },
        puzzle: { view: {} },
    },
    modules: {},
    isSupported: function () {
        var result = /Chrome\/(\d+)/.exec(navigator.userAgent);
        if (result && result[1] && parseInt(result[1]) < 30) {
            return false;
        }
        return true;
    },
    isMobile: function () {
        return /iPhone|iPad|iPod|Android|BlackBerry|BB10|Silk|Mobi/i.test(navigator && navigator.userAgent);
    },
};
canvas.px.Container.prototype.startDrag = function (lockPoint, bounds, startPoint, dragScale) {
    this._dragScale = dragScale || 1;
    this._dragLockPoint = lockPoint || new canvas.px.Point();
    this._dragBounds = bounds;
    this._dragStartPosition = this.parent.toGlobal(new canvas.px.Point(this.x, this.y));
    this._dragStartViewPosition = new canvas.px.Point(this.x, this.y);
    canvas.EventManager.addEventListener(canvas.Event.STAGE_MOUSE_MOVE, null, this._dragMouseMoveHandler, this);
    if (startPoint) {
        this._dragMouseMoveHandler({ params: { x: startPoint.x, y: startPoint.y, mouseData: { offsetX: startPoint.x, offsetY: startPoint.y } } });
    }
};
canvas.px.Container.prototype.stopDrag = function () {
    canvas.EventManager.removeEventListener(canvas.Event.STAGE_MOUSE_MOVE, null, this._dragMouseMoveHandler, this);
};
canvas.px.Container.prototype._dragMouseMoveHandler = function (event) {
    var point = new canvas.px.Point(
        this._dragStartViewPosition.x + (event.params.mouseData.offsetX - this._dragStartPosition.x - this._dragLockPoint.x),
        this._dragStartViewPosition.y + (event.params.mouseData.offsetY - this._dragStartPosition.y - this._dragLockPoint.y)
    );
    if (this._dragBounds) {
        point.x = point.x < this._dragBounds.x ? this._dragBounds.x : point.x > this._dragBounds.x + this._dragBounds.width ? this._dragBounds.x + this._dragBounds.width : point.x;
        point.y = point.y < this._dragBounds.y ? this._dragBounds.y : point.y > this._dragBounds.y + this._dragBounds.height ? this._dragBounds.y + this._dragBounds.height : point.y;
    }
    this.position.set(point.x * this._dragScale, point.y * this._dragScale);
};
if (canvas.px.Container.prototype.numChildren == undefined) {
    Object.defineProperty(canvas.px.Container.prototype, "numChildren", {
        get: function () {
            return this.children ? this.children.length : 0;
        },
    });
}
canvas.px.Container.prototype.contains = function (child) {
    return child && child.parent == this;
};
canvas.px.Container.prototype.removeIfExist = function (child) {
    if (this.contains(child)) return this.removeChild(child);
    return null;
};
canvas.px.Rectangle.prototype.intersects = function (rect) {
    if (rect.x < this.x + this.width && this.x < rect.x + rect.width && rect.y < this.y + this.height) return this.y < rect.y + rect.height;
    else return false;
};
canvas.px.Rectangle.prototype.intersectsPoint = function (point) {
    return point.x <= this.x + this.width && point.x >= this.x && point.y <= this.y + this.height && point.y >= this.y;
};
canvas.px.SlicedSprite.prototype.setSize = function (w, h) {
    if (w > 0) this.width = w;
    if (h > 0) this.height = h;
};
canvas.px.Container.prototype.getObjectsUnderPoint = function (point) {
    var result = [],
        len = this.children.length,
        i,
        child;
    for (i = 0; i < len; i++) {
        child = this.children[i];
        if (child.getBounds().intersectsPoint(point)) {
            result.push(child);
            result = result.concat(child.getObjectsUnderPoint(new canvas.px.Point(point.x, point.y)));
        }
    }
    return result;
};
if (canvas.isMobile()) {
    canvas.px.Container.prototype.pointertap = function (event) {
        if (this.click) {
            this.click.call(this, event);
        }
    };
    canvas.px.Container.prototype.pointerdown = function (event) {
        if (this.mousedown) {
            this.mousedown.call(this, event);
        }
    };
    canvas.px.Container.prototype.pointerup = function (event) {
        if (this.mouseup) {
            this.mouseup.call(this, event);
        }
    };
    canvas.px.Container.prototype.pointermove = function (event) {
        if (this.mousemove) {
            this.mousemove.call(this, event);
        }
    };
    canvas.px.Container.prototype.pointerout = function (event) {
        if (this.mouseout) {
            this.mouseout.call(this, event);
        }
    };
    canvas.px.Container.prototype.pointerover = function (event) {
        if (this.mouseover) {
            this.mouseover.call(this, event);
        }
    };
}
canvas.Config = {
    init: function () {
        if (!this.domain && document.domain) {
            this.domain = "http" + (document.URL.substr(0, 5) == "https" ? "s" : "") + "://" + document.domain;
            if (this.domain.indexOf("localhost") >= 0 || this.domain.indexOf("127.0.0.1") >= 0) {
                this.isLocal = true;
                this.domain += ":8080";
            }
            this.wwwPath = this.domain + "/";
            this.dataPath = this.domain + (this.isLocal ? "/canvas/content/" : "/images/data/");
            this.imgPath = this.dataPath + (this.isLocal ? "" : "canvas/");
            this.soundsPath = this.imgPath + "sounds/";
            this.botsPath = this.imgPath + "bots/";
            this.petsPath = this.imgPath + "pets/";
            this.petsUiPath = this.imgPath + "pets_ui/";
            this.huntMapsPath = this.imgPath + "hunt_maps/";
            this.huntBotsPath = this.imgPath + "hunt_bots/";
            this.huntResPath = this.imgPath + "hunt_res/";
            this.spellsPath = this.imgPath + "spells/mci/";
            this.spellsAtlasPath = this.imgPath + "spells/";
            this.effectsAtlasPath = this.imgPath + "effects/";
            this.effectsPath = this.imgPath + "effects/mci/";
            this.flagsPath = this.imgPath + "flags/";
            this.skPath = this.imgPath + "sk/";
            this.packsPath = this.imgPath + "packs/";
            this.packsAnimsPath = this.imgPath + "packs_anims/";
            this.fontsPath = this.imgPath + "fonts/";
            this.areasPath = this.imgPath + "areas/";
            this.worldPath = this.imgPath + "world/";
            this.instPath = this.imgPath + "inst/";
            this.skyPath = this.imgPath + "sky/";
            this.userBackgroundsPath = this.imgPath + "user_backs/";
            this.userViewsPath = this.imgPath + "user_views/";
            this.mountsPath = this.imgPath + "mounts/";
            this.clanBuildingsPath = this.imgPath + "clan_buildings/";
            this.manorBuildingsPath = this.imgPath + "estate_buildings/";
            this.throneRoomPath = this.imgPath + "throne_room/";
            this.localePath = this.imgPath + "locale/";
            this.ui = this.imgPath + "ui/";
            this.effects = this.imgPath + "effects/effects.json";
            this.amfPath = this.dataPath + "locale/ru/amf/";
            this.artifactsPath = this.dataPath + "artifacts/";
            this.clansPath = this.dataPath + "clans/";
            this.uxPath = "images/data/canvas/ux.cfg?ux=1517916589";
            this.entryPoint = "entry_point.php";
            this.isMobile = canvas.isMobile();
            this.initLang("ru");
        }
    },
    initLang: function (lang) {
        this.lng = lang;
        this.amfPath = this.dataPath + "locale/" + this.lng + "/amf/";
        this.langPath = this.localePath + this.lng + "/";
        this.locale = this.langPath + "locale.json";
    },
};
canvas.Const = {
    FONT_ARIAL_9_BOLD_STROKE: "arial_9_bold_stroke",
    FONT_ARIAL_10_BOLD_STROKE: "arial_10_bold_stroke",
    FONT_ARIAL_11: "arial_11",
    FONT_ARIAL_11_BOLD: "arial_11_bold",
    FONT_ARIAL_11_BOLD_STROKE: "arial_11_bold_stroke",
    FONT_IFLASH: "iFlash502",
    FONT_CUPRUM_12_BOLD: "cuprum_12_bold",
    FONT_CUPRUM_16_BOLD: "cuprum_16_bold",
    FONT_CUPRUM_22_BOLD: "cuprum_22_bold",
    FONT_CUPRUM_22_BOLD_STROKE: "cuprum_22_bold_stroke",
    FONT_CUPRUM_34_BOLD_STROKE: "cuprum_34_bold_stroke",
    FONT_CUPRUM_24_BOLD_STROKE_BROWN: "cuprum_24_bold_stroke_brown",
    FONT_CUPRUM_40_BOLD: "cuprum_40_bold",
    FONT_AMERICAN_TEXT_40_SHADOW_GRADIENT: "american_text_40_shadow_gradient",
    FONT_TAHOMA_9: "tahoma_9",
    FONT_TAHOMA_9_STROKE: "tahoma_9_stroke",
    FONT_TAHOMA_9_BOLD: "tahoma_9_bold",
    FONT_TAHOMA_9_BOLD_STROKE: "tahoma_9_bold_stroke",
    FONT_TAHOMA_10: "tahoma_10",
    FONT_TAHOMA_10_STROKE: "tahoma_10_stroke",
    FONT_TAHOMA_10_BOLD: "tahoma_10_bold",
    FONT_TAHOMA_10_BOLD_STROKE: "tahoma_10_bold_stroke",
    FONT_TAHOMA_10_BOLD_SHARP: "tahoma_10_bold_sharp",
    FONT_TAHOMA_11: "tahoma_11",
    FONT_TAHOMA_11_BOLD: "tahoma_11_bold",
    FONT_TAHOMA_11_BOLD_STROKE: "tahoma_11_bold_stroke",
    FONT_TAHOMA_11_BOLD_STROKE_BEVEL_SHARP: "tahoma_11_bold_stroke_bevel_sharp",
    FONT_TAHOMA_12: "tahoma_12",
    FONT_TAHOMA_12_BOLD: "tahoma_12_bold",
    FONT_TAHOMA_12_BOLD_STROKE: "tahoma_12_bold_stroke",
    FONT_TAHOMA_12_BOLD_STROKE_RED_WHITE: "tahoma_12_bold_stroke_red_white",
    FONT_TAHOMA_13: "tahoma_13",
    FONT_TAHOMA_13_BOLD: "tahoma_13_bold",
    FONT_TAHOMA_13_BOLD_STROKE: "tahoma_13_bold_stroke",
    FONT_TAHOMA_14: "tahoma_14",
    FONT_TAHOMA_14_STROKE: "tahoma_14_stroke",
    FONT_TAHOMA_14_BOLD: "tahoma_14_bold",
    FONT_TAHOMA_14_BOLD_STROKE: "tahoma_14_bold_stroke",
    FONT_TAHOMA_14_NUMBERS_BOLD_STROKE_BEVEL: "tahoma_14_numbers_bold_stroke_bevel",
    FONT_TAHOMA_15: "tahoma_15",
    FONT_TAHOMA_15_STROKE: "tahoma_15_stroke",
    FONT_TAHOMA_15_BOLD: "tahoma_15_bold",
    FONT_TAHOMA_15_BOLD_STROKE: "tahoma_15_bold_stroke",
    FONT_TAHOMA_16: "tahoma_16",
    FONT_TAHOMA_16_STROKE: "tahoma_16_stroke",
    FONT_TAHOMA_16_BOLD: "tahoma_16_bold",
    FONT_TAHOMA_16_BOLD_STROKE: "tahoma_16_bold_stroke",
    FONT_TAHOMA_16_BOLD_GLOW_NUMBERS: "tahoma_16_bold_glow_numbers",
    FONT_TAHOMA_18: "tahoma_18",
    FONT_TAHOMA_18_BOLD_STROKE: "tahoma_18_bold_stroke",
    FONT_TAHOMA_20_BOLD_STROKE: "tahoma_20_bold_stroke",
    FONT_TAHOMA_S_15_BOLD: "tahoma_s_15_bold",
    FONT_RADA_18: "rada_18",
    FONT_MYRIAD_PRO_15_BOLD_STROKE: "myriad_pro_15_bold_stroke",
    LANG_RU: "ru",
    LANG_EN: "en",
    SK_SLOT_NAMES: ["HEAD", "HELM", "BODY", "TRUS", "HAND11", "HAND12", "HAND13", "HAND21", "HAND22", "HAND23", "FOOT11", "FOOT12", "FOOT13", "FOOT21", "FOOT22", "FOOT23", "SWORD", "SHIELD", "SWORD2", "BANNER", "BOW"],
    SK_WPN_SLOT_NAMES: ["SWORD", "SHIELD", "SWORD2", "BANNER", "BOW"],
    UI_SLOT_NAMES: ["HEAD", "HELM", "BODY", "TRUS", "HAND11", "HAND12", "HAND13", "HAND21", "HAND22", "HAND23", "FOOT11", "FOOT12", "FOOT13", "FOOT21", "FOOT22", "FOOT23", "SWORD", "SHIELD", "SWORD2"],
    AVATAR_SLOT_NAMES: ["HEAD", "HELM", "BODY", "HAND11", "HAND21"],
    UI_EXCLUDE_ANIM_SLOTS: ["TRUS", "FOOT21", "FOOT22", "FOOT23", "HAND21", "HAND22", "HAND23", "HAND13"],
    UI_TROPHY_SLOT_NAMES: ["HEAD"],
    UI_SLOT_POS: {
        HAND13: [8, 7],
        SWORD: [1],
        SWORD2: [1],
        HAND12: [8],
        HAND11: [8],
        FOOT11: [1, 8],
        FOOT12: [1, 8],
        FOOT13: [1, 8],
        BODY: [8],
        TRUS: [8],
        HEAD: [8],
        HELM: [8],
        FOOT21: [2, 4],
        FOOT22: [2, 3],
        FOOT23: [2, 3],
        HAND22: [2, 3],
        HAND23: [2, 3],
        HAND21: [2, 3],
        SHIELD: [1],
    },
    SK_COLOR_TRANSFORMS: {
        c1: { rr: -30, gg: -30, bb: -30 },
        c2: { rr: -80, gg: -80, bb: -80 },
        c3: { rr: 0, gg: -30, bb: -30 },
        c4: { rr: 20, gg: 20, bb: 0 },
        c5: { rr: 40, gg: 40, bb: 0 },
        c6: { rr: -60, gg: -40, bb: -215 },
        c7: { rr: -60, gg: 10, bb: 45 },
        c8: { rr: -75, gg: 20, bb: 10 },
        c9: { rr: 0, gg: 10, bb: 0, gm: 1.2, bm: 0.8 },
        c10: { rr: 0, gg: -30, bb: 0, rm: 0.8 },
        c11: { rr: -20, gg: -20, bb: -20 },
        c12: { rr: -90, gg: -90, bb: -90 },
        c13: { rr: -50, gg: -75, bb: -100 },
        c14: { rr: 75, gg: -25, bb: -150 },
        c15: { rr: 128, gg: 110, bb: 0 },
        c16: { rr: 100, gg: -50, bb: -50 },
        c17: { rr: -30, gg: -30, bb: -30 },
        c18: { rr: -100, gg: -100, bb: -100 },
        c19: { rr: 50, gg: 0, bb: -150 },
        c20: { rr: 0, gg: -180, bb: -180 },
    },
    SK_DIE_COLORS_HUMAN: [
        [0.875, 0.875, 0.875, 0, 26, 32],
        [0.75, 0.75, 0.75, 0, 51, 64],
        [0.625, 0.625, 0.625, 0, 77, 96],
        [0.5, 0.5, 0.5, 0, 102, 128],
        [0.375, 0.375, 0.375, 0, 128, 159],
        [0.25, 0.25, 0.25, 0, 153, 191],
        [0.125, 0.125, 0.125, 0, 179, 223],
    ],
    SK_DIE_COLORS_MAGMAR: [
        [0.875, 0.875, 0.875, 0, 26, 32],
        [0.75, 0.75, 0.75, 0, 51, 64],
        [0.625, 0.625, 0.625, 0, 77, 96],
        [0.5, 0.5, 0.5, 0, 102, 128],
        [0.375, 0.375, 0.375, 0, 128, 159],
        [0.25, 0.25, 0.25, 0, 153, 191],
        [0.125, 0.125, 0.125, 0, 179, 223],
    ],
    KEYS: {
        A: 65,
        B: 66,
        C: 67,
        D: 68,
        E: 69,
        F: 70,
        G: 71,
        H: 72,
        I: 73,
        J: 74,
        K: 75,
        L: 76,
        M: 77,
        N: 78,
        O: 79,
        P: 80,
        Q: 81,
        R: 82,
        S: 83,
        T: 84,
        U: 85,
        V: 86,
        W: 87,
        X: 88,
        Y: 89,
        Z: 90,
        LEFT_ARROW: 37,
        UP_ARROW: 38,
        RIGHT_ARROW: 39,
        DOWN_ARROW: 40,
        KEY_0: 48,
        KEY_1: 49,
        KEY_2: 50,
        KEY_3: 51,
        KEY_4: 52,
        KEY_5: 53,
        KEY_6: 54,
        KEY_7: 55,
        KEY_8: 56,
        KEY_9: 57,
        NUM_0: 96,
        NUM_1: 97,
        NUM_2: 98,
        NUM_3: 99,
        NUM_4: 100,
        NUM_5: 101,
        NUM_6: 102,
        NUM_7: 103,
        NUM_8: 104,
        NUM_9: 105,
        MINUS: 189,
        EQUAL: 187,
        RIGHT_SQUARE_BRACKET: 221,
        LEFT_SQUARE_BRACKET: 219,
        SPACEBAR: 32,
        ESC: 27,
        TAB: 9,
        POINT: 190,
    },
    CODE_TO_KEYS: {
        KeyA: "A",
        KeyB: "B",
        KeyC: "C",
        KeyD: "D",
        KeyE: "E",
        KeyF: "F",
        KeyG: "G",
        KeyH: "H",
        KeyI: "I",
        KeyJ: "J",
        KeyK: "K",
        KeyL: "L",
        KeyM: "M",
        KeyN: "N",
        KeyO: "O",
        KeyP: "P",
        KeyQ: "Q",
        KeyR: "R",
        KeyS: "S",
        KeyT: "T",
        KeyU: "U",
        KeyV: "V",
        KeyW: "W",
        KeyX: "X",
        KeyY: "Y",
        KeyZ: "Z",
        ArrowLeft: "LEFT_ARROW",
        ArrowUp: "UP_ARROW",
        ArrowRight: "RIGHT_ARROW",
        ArrowDown: "DOWN_ARROW",
        Digit0: "KEY_0",
        Digit1: "KEY_1",
        Digit2: "KEY_2",
        Digit3: "KEY_3",
        Digit4: "KEY_4",
        Digit5: "KEY_5",
        Digit6: "KEY_6",
        Digit7: "KEY_7",
        Digit8: "KEY_8",
        Digit9: "KEY_9",
        Numpad0: "NUM_0",
        Numpad1: "NUM_1",
        Numpad2: "NUM_2",
        Numpad3: "NUM_3",
        Numpad4: "NUM_4",
        Numpad5: "NUM_5",
        Numpad6: "NUM_6",
        Numpad7: "NUM_7",
        Numpad8: "NUM_8",
        Numpad9: "NUM_9",
        Minus: "MINUS",
        Equal: "EQUAL",
        BracketRight: "RIGHT_SQUARE_BRACKET",
        BracketLeft: "LEFT_SQUARE_BRACKET",
        Space: "SPACEBAR",
        Escape: "ESC",
        Tab: "TAB",
        Period: "POINT",
    },
    KEYBOARD_BUTTONS: {
        113: "й",
        119: "ц",
        101: "у",
        114: "к",
        116: "е",
        121: "н",
        117: "г",
        105: "ш",
        111: "щ",
        112: "з",
        91: "х",
        93: "ъ",
        97: "ф",
        115: "ы",
        100: "в",
        102: "а",
        103: "п",
        104: "р",
        106: "о",
        107: "л",
        108: "д",
        59: "ж",
        39: "э",
        122: "я",
        120: "ч",
        99: "с",
        118: "м",
        98: "и",
        110: "т",
        109: "ь",
        44: "б",
        46: "ю",
        96: "ё",
    },
    GENDER: { MALE: "M", FEMALE: "F" },
    KIND: { HUM: 1, MAG: 2 },
};
canvas.EventManager = {
    events: {},
    addEventListener: function (eventName, target, handler, context) {
        if (this.hasEventListener(eventName, target, handler, context)) return;
        if (!this.events[eventName]) this.events[eventName] = new Array();
        this.events[eventName].push({ target: target, handler: handler, context: context });
    },
    removeEventListener: function (eventName, target, handler, context) {
        if (this.events[eventName] && this.events[eventName].length > 0) {
            var a = this.events[eventName];
            for (var i = a.length - 1; i >= 0; i--) {
                if (a[i].target == target && a[i].handler == handler && (typeof context == "undefined" || a[i].context == context)) {
                    a.splice(i, 1);
                }
            }
        }
    },
    hasEventListener: function (eventName, target, handler, context) {
        if (this.events[eventName] && this.events[eventName].length > 0) {
            var a = this.events[eventName];
            for (var i = a.length - 1; i >= 0; i--) {
                if ((!target || a[i].target == target) && (!handler || a[i].handler == handler) && (!context || a[i].context == context)) {
                    return true;
                }
            }
        }
        return false;
    },
    removeAllListeners: function (eventName, target, handler, context) {
        var a = this.events[eventName];
        if (a && a.length > 0) {
            for (var i = a.length - 1; i >= 0; i--) {
                if ((!target || a[i].target == target) && (!handler || a[i].handler == handler) && (!context || a[i].context == context)) {
                    a.splice(i, 1);
                }
            }
        }
    },
    dispatchEvent: function (eventName, target, params) {
        for (var key in this.events) {
            if (key == eventName && this.events[eventName] && this.events[eventName].length > 0) {
                var events = this.events[eventName].slice(0);
                for (var i = 0; i < events.length; i++) {
                    var e = events[i];
                    if (e.handler && (e.target == null || e.target == target)) {
                        e.handler.apply(e.context, [{ target: target, params: params, name: eventName }]);
                    }
                }
                break;
            }
        }
    },
    destroy: function () {
        for (var key in this.events) {
            delete this.events[key];
        }
    },
};
canvas.Functions = {
    colorMatrixCache: {},
    setNumberLen: function (s, len) {
        if (len == undefined) len = 2;
        s = s.toString();
        while (s.length < len) s = "0" + s;
        return s;
    },
    getColorMatrixFilter: function () {
        var hash = canvas.Functions.getColorMatrixHash.apply(this, arguments);
        if (canvas.Functions.colorMatrixCache[hash]) return canvas.Functions.colorMatrixCache[hash];
        var colorMatrixFilter = new canvas.px.ColorMatrixFilter();
        colorMatrixFilter.matrix = [arguments[0], 0, 0, 0, arguments[4] / 255, 0, arguments[1], 0, 0, arguments[5] / 255, 0, 0, arguments[2], 0, arguments[6] / 255, 0, 0, 0, arguments[3], 0];
        canvas.Functions.colorMatrixCache[hash] = colorMatrixFilter;
        return colorMatrixFilter;
    },
    getColorMatrixHash: function () {
        return arguments[0].toString().concat("_", arguments[1], "_", arguments[2], "_", arguments[3], "_", arguments[4], "_", arguments[5], "_", arguments[6]);
    },
    formatDate: function (time, defaultText, type, fullString, showSeconds, showFirstZero) {
        if (defaultText == undefined) defaultText = "00";
        if (showSeconds == undefined) showSeconds = true;
        if (showFirstZero == undefined) showFirstZero = true;
        if (time == 0) return "";
        var seconds = Math.round(time * 0.001);
        var minutes = showSeconds ? Math.floor(seconds / 60) : Math.ceil(seconds / 60);
        var days;
        var hours;
        var str = defaultText;
        if (seconds > 0) {
            str = "";
            days = Math.floor(minutes / 1440);
            if (days > 0) {
                str += showFirstZero ? this.setNumberLen(days, 2) : days;
                switch (type) {
                    case 1:
                        str += canvas.Translator.getText(2e3) + " ";
                        break;
                    case 2:
                        str += canvas.Translator.getText(2e3) + " ";
                        break;
                    case 3:
                        str += " " + canvas.Translator.getText(2e3) + ". ";
                        break;
                    default:
                        str += ":";
                }
                hours = Math.floor((minutes - days * 1440) / 60);
                str += showFirstZero ? this.setNumberLen(hours, 2) : hours;
                switch (type) {
                    case 1:
                        str += canvas.Translator.getText(2001);
                        break;
                    case 2:
                        str += canvas.Translator.getText(2001);
                        break;
                    case 3:
                        str += " " + canvas.Translator.getText(2001) + ".";
                        break;
                    default:
                        str += "";
                }
            } else {
                hours = Math.floor(minutes / 60);
                if (hours > 0) {
                    str += showFirstZero ? this.setNumberLen(hours, 2) : hours;
                    switch (type) {
                        case 1:
                            str += canvas.Translator.getText(2001) + " ";
                            break;
                        case 2:
                            str += canvas.Translator.getText(2001) + " ";
                            break;
                        case 3:
                            str += " " + canvas.Translator.getText(2001) + ". ";
                            break;
                        default:
                            str += ":";
                    }
                    minutes = minutes - hours * 60;
                    str += showFirstZero ? this.setNumberLen(minutes, 2) : minutes;
                    switch (type) {
                        case 1:
                            str += canvas.Translator.getText(2002);
                            break;
                        case 2:
                            str += canvas.Translator.getText(2016);
                            break;
                        case 3:
                            str += " " + canvas.Translator.getText(2016) + ".";
                            break;
                        default:
                            str += "";
                    }
                } else {
                    if (minutes > 0) {
                        str += showFirstZero ? this.setNumberLen(minutes, 2) : minutes;
                        switch (type) {
                            case 1:
                                str += canvas.Translator.getText(2002) + " ";
                                break;
                            case 2:
                                str += canvas.Translator.getText(2016) + " ";
                                break;
                            case 3:
                                str += " " + canvas.Translator.getText(2016) + ". ";
                                break;
                            default:
                                str += ":";
                        }
                    } else {
                        if (fullString) str += "00:";
                    }
                    if (showSeconds) {
                        seconds = seconds - minutes * 60;
                        str += showFirstZero ? this.setNumberLen(seconds, 2) : seconds;
                        switch (type) {
                            case 1:
                                str += canvas.Translator.getText(2003);
                                break;
                            case 2:
                                str += canvas.Translator.getText(2017);
                                break;
                            case 3:
                                str += " " + canvas.Translator.getText(2017) + ".";
                                break;
                            default:
                                str += "";
                        }
                    } else {
                        str = str.substr(0, str.length - 1);
                    }
                }
            }
        }
        return str;
    },
    degToRad: function (deg) {
        return deg * (Math.PI / 180);
    },
    radToDeg: function (rad) {
        return rad * (180 / Math.PI);
    },
    navigateToURL: function (url, target) {
        window.open(url, target);
    },
    clearChildren: function (container) {
        while (container.children.length > 0) {
            var child = container.removeChildAt(0);
        }
    },
    destroyChildren: function (container) {
        while (container.children.length > 0) {
            var child = container.removeChildAt(0);
            child.destroy({ children: true });
        }
    },
    decodeUrlParams: function (str) {
        var a = str.split("&");
        var len = a.length;
        var result = {};
        var b;
        for (var i = 0; i < len; i++) {
            b = a[i].split("=");
            result[b[0]] = decodeURIComponent(b[1]);
        }
        return result;
    },
    testFlag: function (flags, flag) {
        return (flags & flag) == flag;
    },
    testStatus: function (obj) {
        if (obj && obj.hasOwnProperty("status") && obj.status != 100 && obj.error != undefined) return false;
        return true;
    },
    greyScaleCache: {},
    getGreyScale: function (value) {
        if (value == undefined) value = 0.5;
        if (canvas.Functions.greyScaleCache[value]) return canvas.Functions.greyScaleCache[value];
        var f = new canvas.px.ColorMatrixFilter();
        f.greyscale(value);
        canvas.Functions.greyScaleCache[value] = f;
        return f;
    },
    brightnessCache: {},
    getBrightness: function (value) {
        if (value == undefined) value = 1.2;
        if (canvas.Functions.brightnessCache[value]) return canvas.Functions.brightnessCache[value];
        var f = new canvas.px.ColorMatrixFilter();
        f.brightness(value);
        canvas.Functions.brightnessCache[value] = f;
        return f;
    },
    saturationCache: {},
    getSaturation: function (value) {
        if (value == undefined) value = 0.2;
        if (canvas.Functions.saturationCache[value]) return canvas.Functions.saturationCache[value];
        var f = new canvas.px.ColorMatrixFilter();
        f.saturate(value);
        canvas.Functions.saturationCache[value] = f;
        return f;
    },
    blurCache: {},
    getBlur: function (value) {
        if (value == undefined) value = 1;
        if (canvas.Functions.blurCache[value]) return canvas.Functions.blurCache[value];
        var f = new canvas.px.TiltShiftFilter(value, 0);
        canvas.Functions.blurCache[value] = f;
        return f;
    },
    dropShadowCache: {},
    getDropShadow: function (rotation, distance, blur, color, alpha) {
        if (rotation == undefined) rotation = 45;
        if (distance == undefined) distance = 5;
        if (blur == undefined) blur = 2;
        if (color == undefined) color = 0;
        if (alpha == undefined) alpha = 0.5;
        var hash = rotation.toString().concat("_" + distance + "_" + blur + "_" + color + "_" + alpha);
        if (canvas.Functions.dropShadowCache[hash]) return canvas.Functions.dropShadowCache[hash];
        var f = new canvas.px.DropShadowFilter({ rotation: rotation, distance: distance, blur: blur, color: color, alpha: alpha });
        canvas.Functions.dropShadowCache[hash] = f;
        return f;
    },
    blackAndWhiteCache: null,
    getBlackAndWhite: function () {
        if (canvas.Functions.blackAndWhiteCache) return canvas.Functions.blackAndWhiteCache;
        var f = new canvas.px.ColorMatrixFilter();
        f.blackAndWhite();
        canvas.Functions.blackAndWhiteCache = f;
        return f;
    },
    glowCache: {},
    getGlow: function (distance, outerStrength, innerStrength, color, quality) {
        if (distance == undefined) distance = 10;
        if (outerStrength == undefined) outerStrength = 4;
        if (innerStrength == undefined) innerStrength = 0;
        if (color == undefined) color = 16777215;
        if (quality == undefined) quality = 0.1;
        var hash = distance.toString().concat("_" + outerStrength + "_" + innerStrength + "_" + color + "_" + quality);
        if (canvas.Functions.glowCache[hash]) return canvas.Functions.glowCache[hash];
        var f = new canvas.px.GlowFilter(distance, outerStrength, innerStrength, color, quality);
        canvas.Functions.glowCache[hash] = f;
        return f;
    },
    alphaCache: {},
    getAlpha: function (value) {
        if (value == undefined) value = 1;
        if (canvas.Functions.alphaCache[value]) return canvas.Functions.alphaCache[value];
        var f = new canvas.px.AlphaFilter();
        f.alpha = value;
        canvas.Functions.alphaCache[value] = f;
        return f;
    },
    findParent: function (target, source) {
        while (source) {
            if (source == target) return true;
            source = source.parent;
        }
        return false;
    },
    findParentByName: function (name, source) {
        var len = name.length;
        while (source) {
            if (source.name && source.name.substr(0, len) == name) return source;
            source = source.parent;
        }
        return null;
    },
    cloneSimpleObject: function (object) {
        var result = {};
        for (var key in object) {
            result[key] = object[key];
        }
        return result;
    },
    parseUx: function () {
        if (canvas.ResourceLoader.ux) return;
        canvas.ResourceLoader.ux = {};
        var i = 0;
        var j;
        var data;
        var a;
        var b;
        var c;
        var folders;
        var len;
        var res;
        while ((data = canvas.ResourceLoader.get("ux" + i++))) {
            folders = [];
            a = data.data.split("\n");
            b = a[0].split(",");
            len = b.length;
            for (j = 0; j < len; j++) {
                res = b[j].match(/{(\d+)}:(.+)/i);
                folders[parseInt(res[1])] = canvas.Config.wwwPath + res[2];
            }
            len = a.length;
            for (j = 1; j < len; j++) {
                if (a[j]) {
                    res = a[j].match(/{(\d+)}(.+)\?ux=(.+)/i);
                    canvas.ResourceLoader.ux[folders[parseInt(res[1])] + res[2]] = res[3];
                }
            }
        }
        canvas.ResourceLoader.uxReady = true;
        canvas.EventManager.dispatchEvent(canvas.Event.UX_READY);
    },
    extractSwfName: function (path) {
        if (!path) return "";
        var a = path.split(".")[0].split("/");
        return a[a.length - 1];
    },
    random: function (size) {
        if (!size) return 0;
        var result = Math.floor(Math.random() * size);
        return result >= size ? size - 1 : result;
    },
    randomArray: function (array) {
        var len = array.length,
            i,
            j,
            temp;
        for (i = len - 1; i > 0; i--) {
            j = Math.floor(Math.random() * (i + 1));
            temp = array[i];
            array[i] = array[j];
            array[j] = temp;
        }
    },
    pointInRect: function (point, rect) {
        return point.x > rect.x && point.x < rect.x + rect.width && point.y > rect.y && point.y < rect.y + rect.height;
    },
    now: function () {
        return Math.round(Date.now() * 0.001);
    },
    getCyrillicInput: function (str) {
        var result = str || "";
        return result.replace(/[a-z\[\]\;\'\,\.\`]/gi, function (char, key) {
            var res = canvas.Const.KEYBOARD_BUTTONS[char.toLowerCase().charCodeAt(0)];
            return res || char;
        });
    },
    getMoney: function (floatValue) {
        return Math.floor(floatValue * 100);
    },
    getMoneyGold: function (floatValue) {
        return Math.floor(floatValue * 0.01);
    },
    getGems: function (floatValue) {
        return Math.round(floatValue * 100) / 100;
    },
    getSessTarget: function () {
        var result = { target: "", autoPenalty: -1 };
        try {
            var target = getCookie("sess_target");
        } catch (e) {}
        if (target && target != "null") {
            var a = target.split("_");
            result.target = a[0];
            result.autoPenalty = a.length > 1 ? parseInt(a[1]) : -1;
            result.manor = a.length > 2 ? parseInt(a[2]) == 1 : false;
        }
        return result;
    },
    deleteSessTarget: function () {
        deleteCookie("sess_target");
        deleteCookie("sess_navigate_memory");
        deleteCookie("sess_navigate_array");
    },
    getAttribute: function (node, name) {
        return node.attributes[name] ? node.attributes[name].value : undefined;
    },
    getChildNodeByName: function (node, name) {
        var len = node.children.length;
        var result = null;
        for (var i = 0; i < len; i++) {
            if (node.children[i].nodeName == name) {
                if (!result) result = new Array();
                result.push(node.children[i]);
            }
        }
        return result;
    },
    getChildValueByName: function (node, name) {
        var len = node.children.length;
        for (var i = 0; i < len; i++) {
            if (node.children[i].nodeName == name) {
                return node.children[i].innerHTML;
            }
        }
        return "";
    },
    getMoneyForText: function (value) {
        var result = {};
        result.icon = "money_silver";
        result.value = value;
        if (value >= 100) {
            result.value = value * 0.01;
            result.icon = "money_gold";
        } else if (value < 1) {
            result.value = value * 100;
            result.icon = "money_bronze";
        }
        return result;
    },
    getNumberName: function (num, name1, name2, name3) {
        var i = num % 100;
        var result;
        if (i >= 5 && i <= 20) {
            result = num + " " + name3;
        } else {
            i = i % 10;
            if (i == 1) {
                result = num + " " + name1;
            } else if (i >= 2 && i <= 4) {
                result = num + " " + name2;
            } else {
                result = num + " " + name3;
            }
        }
        return result;
    },
    hasChildNode: function (node, name) {
        return node && node.getElementsByTagName(name).length > 0;
    },
    destroy: function () {
        var a = [this.colorMatrixCache, this.greyScaleCache, this.brightnessCache, this.saturationCache, this.blurCache, this.dropShadowCache, this.glowCache, this.alphaCache];
        var i,
            obj,
            str,
            len = a.length;
        for (i = 0; i < len; i++) {
            obj = a[i];
            for (str in obj) {
                delete obj[str];
            }
        }
    },
};
canvas.ResourceLoader = {
    EVENT_COMPLETE: "ResourceLoader.COMPLETE",
    EVENT_PROGRESS: "ResourceLoader.PROGRESS",
    stack: [],
    aliases: {},
    inProgress: false,
    inited: false,
    ux: null,
    uxReady: false,
    init: function () {
        if (!this.inited) {
            canvas.px.Loader.on("progress", this.progress);
            canvas.px.Loader.on("error", function () {});
            canvas.px.Loader.on("add", {});
            canvas.px.Loader.on("complete", this.complete);
            this.inited = true;
        }
    },
    add: function (files) {
        var i, len;
        if (this.inProgress) {
            this.stack = this.stack.concat(files);
        } else {
            var tmpObj = {};
            for (i = files.length - 1; i >= 0; i--) {
                if (typeof files[i] == "object") {
                    files[i][1] = this.applyUx(files[i][1]);
                    if (files[i][0]) {
                        this.aliases[files[i][0]] = files[i][1];
                    }
                    if (files[i][2] != undefined) {
                        files[i][2].url = files[i][1];
                        files[i] = files[i][2];
                    } else {
                        files[i] = files[i][1];
                    }
                } else {
                    files[i] = this.applyUx(files[i]);
                }
                if (this.getResource(files[i]) || tmpObj[files[i]]) {
                    files.splice(i, 1);
                } else {
                    tmpObj[files[i]] = true;
                }
            }
            if (files.length > 0) {
                this.inProgress = true;
                try {
                    canvas.px.Loader.add(files).load();
                } catch (e) {
                    console.log("ResourceLoader.load: " + e);
                }
            } else {
                this.complete();
            }
        }
    },
    remove: function (url) {
        url = this.applyUx(url);
        this.deleteResource(this.aliases[url] || url);
    },
    complete: function () {
        var thisObj = canvas.ResourceLoader;
        thisObj.inProgress = false;
        if (thisObj.stack.length > 0) {
            var a = thisObj.stack;
            thisObj.stack = [];
            thisObj.add(a);
        } else {
            canvas.EventManager.dispatchEvent(thisObj.EVENT_COMPLETE, thisObj);
        }
    },
    progress: function () {
        var thisObj = canvas.ResourceLoader;
        canvas.EventManager.dispatchEvent(thisObj.EVENT_PROGRESS, thisObj, { progress: canvas.px.Loader.progress > 100 ? canvas.px.Loader.progress - 100 : canvas.px.Loader.progress });
    },
    get: function (url) {
        url = this.applyUx(url);
        var res = this.getResource(this.aliases[url] || url);
        var result = null;
        if (res) {
            switch (res.extension) {
                case "mci":
                    if (!result && res.data) {
                        if (!res.unpacked && typeof res.data == "string" && res.data.charAt(0) != "{") {
                            try {
                                res.data = this.unpackBinary(res.data);
                            } catch (e) {
                                return null;
                            }
                        }
                        res.unpacked = true;
                        if (typeof res.data == "string") res.data = JSON.parse(res.data);
                        result = res;
                    }
                    break;
                case "xml":
                case "fnt":
                    result = res.data ? res : null;
                    break;
                case "json":
                    result = res.textures ? res : null;
                    break;
                case "amf":
                    if (res.unpacked) {
                        result = res.data;
                    } else {
                        result = res.data = this.unpackAmf(res.data);
                        res.unpacked = true;
                    }
                    break;
                default:
                    result = res.data ? res : null;
            }
        }
        return result;
    },
    getTexture: function (url) {
        return this.get(url) ? (this.get(url).texture ? this.get(url).texture : canvas.px.TextureEmpty) : canvas.px.TextureEmpty;
    },
    getImage: function (url, name) {
        var res = this.get(url);
        if (res && !res.textures[name + ".png"]) {
            console.log("Warning! Texture '" + name + "' not found in atlas '" + url + "'.");
        }
        return res ? (res.textures[name + ".png"] ? res.textures[name + ".png"] : canvas.px.TextureEmpty) : canvas.px.TextureEmpty;
    },
    unpackBinary: function (data) {
        var strData = atob(data);
        var i,
            charData = [],
            len = strData.length;
        for (i = 0; i < len; i++) {
            charData.push(strData.charCodeAt(i));
        }
        var data = canvas.px.inflate(charData);
        return this.arrayBufferToString(data);
    },
    arrayBufferToString: function (buffer) {
        var bufView = new Uint16Array(buffer);
        var length = bufView.length;
        var result = "";
        var addition = Math.pow(2, 16) - 1;
        for (var i = 0; i < length; i += addition) {
            if (i + addition > length) {
                addition = length - i;
            }
            result += String.fromCharCode.apply(null, bufView.subarray(i, i + addition));
        }
        return result;
    },
    unpackAmf: function (buffer) {
        var arr = new Uint8Array(buffer);
        var str = "";
        var len = arr.length;
        for (var i = 0; i < len; i++) {
            str += String.fromCharCode(arr[i]);
        }
        return canvas.px.AMF.parse(str);
    },
    applyUx: function (str) {
        if (this.ux && this.ux[str]) return str + "?ux=" + this.ux[str];
        else return str;
    },
    testUx: function (str) {
        return !this.ux || this.ux[str] ? true : false;
    },
    addSubAlias: function (name, alias) {
        if (this.aliases[name]) {
            this.aliases[alias] = this.aliases[name];
        }
    },
    getResource: function (url) {
        return canvas.px.Loader.resources[url];
    },
    deleteResource: function (url) {
        delete canvas.px.Loader.resources[url];
    },
    destroy: function () {
        delete this.ux;
    },
};
canvas.Log = {
    debug: false,
    ALL: "ALL",
    BATTLE: "BATTLE",
    MEM: "MEM",
    LOCATION: "LOCATION",
    WORLD: "WORLD",
    MANOR: "MANOR",
    HUNT: "HUNT",
    INST: "INST",
    USER: "USER",
    LEFT_MENU: "LEFT_MENU",
    AVATAR: "AVATAR",
    TOP_MENU: "TOP_MENU",
    RIGHT_MENU: "RIGHT_MENU",
    COMPASS: "COMPASS",
    MAGIC: "MAGIC",
    PETS: "PETS",
    BIRTHDAY: "BIRTHDAY",
    CUBE: "CUBE",
    CASINO: "CASINO",
    DICE_GAME: "DICE_GAME",
    TREASURE: "TREASURE",
    WHEEL: "WHEEL",
    MIRROR: "MIRROR",
    CLAN_CITADEL: "CLAN_CITADEL",
    CLAN_WAR: "CLAN_WAR",
    BARBER: "BARBER",
    FIRST_BATTLE: "FIRST_BATTLE",
    PUZZLE: "PUZZLE",
    ALL_NAMES: [
        this.BATTLE,
        this.MEM,
        this.LOCATION,
        this.WORLD,
        this.MANOR,
        this.HUNT,
        this.INST,
        this.USER,
        this.LEFT_MENU,
        this.AVATAR,
        this.TOP_MENU,
        this.RIGHT_MENU,
        this.COMPASS,
        this.MAGIC,
        this.PETS,
        this.BIRTHDAY,
        this.CUBE,
        this.CASINO,
        this.DICE_GAME,
        this.TREASURE,
        this.WHEEL,
        this.MIRROR,
        this.CLAN_WAR,
        this.CLAN_CITADEL,
        this.BARBER,
        this.FIRST_BATTLE,
        this.PUZZLE,
    ],
    maxLen: 2e3,
    log: {},
    internal: "",
    title: "",
    add: function (name, message, color) {
        if (name == this.ALL) {
            for (var i = 0; i < this.ALL_NAMES.length; i++) {
                this.add(this.ALL_NAMES[i], "GLOBAL LOG >> " + message, color);
            }
            return;
        }
        if (!this.log[name]) this.log[name] = [];
        var str = "";
        if (color) {
            str += '<font color="' + color + '">';
        }
        str += Date.now() + ": " + message;
        if (color) {
            str += "</font>";
        }
        this.log[name].push(str);
        if (this.log[name].length > this.maxLen) {
            this.log[name].shift();
        }
        if (this.debug) {
            console.log(Date.now() + " " + name + ": " + message);
        }
    },
    addInternal: function (message, color) {
        if (color) {
            this.internal += '<font color="' + color + '">';
        }
        this.internal += Date.now() + ": " + message;
        if (color) {
            this.internal += "</font>";
        }
        this.internal += "<br/>";
    },
    show: function (name) {
        var str = "<h1>DWAR LOG</h1>" + (this.title ? "<span style='color: blue;'>" + this.title + "</span><br/><br/>" : "");
        for (var name in this.log) {
            var len = this.log[name].length;
            for (var i = 0; i < len; i++) {
                str += this.log[name][i] + "<br/>";
            }
        }
        this.log[name] = [];
        try {
            var w = window.open();
            w.document.open();
            w.document.write(str);
            w.document.close();
        } catch (e) {}
    },
    showInternal: function (target, w, h) {
        this.field = new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_12, canvas.Const.FONT_TAHOMA_12_BOLD, 0, w, h, "left", "top", 16777215, 1);
        target.addChild(this.field);
        this.field.text = this.internal;
        canvas.EventManager.addEventListener(canvas.Event.STAGE_WHEEL, null, this.mouseWheelHandler, this);
    },
    mouseWheelHandler: function (e) {
        if (e.params.wheelDelta > 0) {
            this.field.container.y += 40;
        } else {
            this.field.container.y -= 40;
        }
    },
};
canvas.InputManager = {
    inited: false,
    lastExternalKey: "",
    lastExternalKeyTime: 0,
    init: function () {
        if (!this.inited) {
            document.addEventListener("keydown", this.onKeyDown.bind(this));
            document.addEventListener("keyup", this.onKeyUp.bind(this));
            this.inited = true;
        }
    },
    onKeyDown: function (key) {
        canvas.EventManager.dispatchEvent(canvas.Event.STAGE_KEY_DOWN, null, this.processKey(key));
    },
    onKeyUp: function (key) {
        canvas.EventManager.dispatchEvent(canvas.Event.STAGE_KEY_UP, null, this.processKey(key));
    },
    processKey: function (key) {
        if (key.code) {
            key.globalKeyCode = canvas.Const.KEYS[canvas.Const.CODE_TO_KEYS[key.code]];
        } else {
            key.globalKeyCode = key.keyCode;
        }
        return key;
    },
    externalKey: function (e) {
        var str = e.altKey + "," + e.code + "," + e.ctrlKey + "," + e.globalKeyCode + "," + e.keyCode + "," + e.shiftKey;
        if (str != this.lastExternalKey || Date.now() > this.lastExternalKeyTime + 100) {
            this.onKeyDown(e);
            this.lastExternalKey = str;
            this.lastExternalKeyTime = Date.now();
        }
    },
};
canvas.Translator = {
    lang: "ru",
    dictionary: {
        text0: "ЖДИТЕ",
        text1: "БОЙ ОКОНЧЕН",
        text2: "выход",
        text3: "Невозможно авторизироваться",
        text4: "ОШИБКА",
        text5: "соединение с сервером" + "\n" + "прервано",
        text6: "Бой уже закончен",
        text7: "восстановить",
        text8: "Запрос",
        text9: "согласен",
        text10: "отклоняю",
        text11: "отменить",
        text12: "Отправлен запрос на применение",
        text13: "Ожидание ответа ...",
        text14: "Игрок",
        text15: "запрашивает использование на Вас",
        text16: "УВОРОТ",
        text17: "ПОГЛОЩЕНО",
        text18: "ОТРАЖЕНО",
        text19: "Невозможно применить эту магию",
        text20: "Невозможно использовать на себя",
        text21: "Невозможно использовать на дружественную цель",
        text22: "Невозможно использовать на текущего оппонента",
        text23: "Невозможно использовать на оппонентов",
        text24: "Не хватает маны",
        text25: "На цель уже наложено подобное заклинание",
        text26: 'На вас наложено "Молчание"',
        text27: "Недостаточно стрел",
        text28: "Недостаточно ярости",
        text29: "Воскрешение",
        text30: "нанесённый урон",
        text31: "БЛОК",
        text32: "Закрыть",
        text33: "атака в голову",
        text34: "атака в корпус",
        text35: "атака в ноги",
        text36: "оборонительный режим",
        text37: "обновить",
        text38: "позвать на помощь",
        text39: "покинуть бой?",
        text40: "Внимание! Покинув этот бой, вы не сможете в него вернуться.",
        text41: "данный игрок вышел из боя",
        text42: "Следующее использование через ",
        text43: "осталось",
        text44: "осталcя",
        text46: "ИММУНИТЕТ",
        text47: "ПРОМАХ",
        text48: "далее",
        text49: "мана",
        text50: "ходa",
        text51: "ход",
        text52: "ходов",
        text53: ", но не более",
        text54: "не более",
        text55: "д.",
        text56: "ч.",
        text57: "м.",
        text58: "с.",
        text59: "бой был прерван",
        text60: "Q/UP",
        text61: "W/RIGHT",
        text62: "E/DOWN",
        text63: "R/LEFT",
        text64: "Tab",
        text65: "пропустить ход",
        text66: "Призвать в бой тень?",
        text67: "ПОДТВЕРЖДЕНИЕ",
        text68: "призвать",
        text69: "отмена",
        text70: "На цель не наложено необходимое заклинание",
        text71: "Всего (Игроков) / Убитых",
        text72: "Неподходящая цель",
        text100: "Охрана",
        text101: "Ячейки в мире Фэо",
        text102: "Рюкзак",
        text103: "Хранилище",
        text104: "Войти",
        text105: "Найм рабочих",
        text106: "Здание",
        text107: "Энергия",
        text108: "по цене",
        text109: "Купить риолит",
        text110: "Разместить",
        text111: "Изменить",
        text112: "Ожидаемое время выкупа заявки",
        text113: "Здание построено до максимального уровня",
        text114: "Улучшение",
        text115: "Использовать",
        text116: "Продукты",
        text117: "нет данных",
        text118: "более 1 дня",
        text121: "Цена",
        text122: "Активные предложения",
        text123: "Продавец",
        text124: "Продать",
        text126: "Продать участок",
        text127: "Область",
        text128: "Локация",
        text129: "Накопленный опыт",
        text130: "Прибавлять",
        text131: "Вычитать",
        text132: "Вы накапливаете опыт когда находитесь в поместье. Количество накапливаемого опыта зависит от уровня здания.",
        text133: "Накапливать",
        text134: "Вы уверены, что хотите перейти в режим накапливания опыта?",
        text135: "Вы уверены, что хотите перейти в режим использования накопленного опыта? Стоимость составит",
        text136: "Накопленная доблесть",
        text137: "Вы накапливаете доблесть, когда находитесь в поместье. Количество накапливаемой доблести зависит от уровня здания.",
        text138: "Вы уверены, что хотите перейти в режим накапливания доблести?",
        text139: "Вы уверены, что хотите перейти в режим использования накопленной доблести? Стоимость составит",
        text140: "часов",
        text141: "Корм",
        text142: "Опыт",
        text143: "Тренировать",
        text144: "Требуется",
        text145: "Изготовление займет",
        text146: "Изготовить",
        text147: "Выберите рецепт",
        text148: "Поместье",
        text149: "энергия",
        text150: "Выход",
        text151: "Работать",
        text152: "В локацию",
        text153: "Выбрать",
        text154: "Заказчик",
        text155: "Цена за ед.",
        text156: "Обновить",
        text157: "Биржа энергии",
        text158: "Все заявки",
        text159: "Мои заявки",
        text160: "У вас есть",
        text161: "единиц энергии",
        text162: "Выполн./Объем",
        text163: "Создать заявку",
        text164: "Удалить заявку?",
        text165: "Прогноз: работы будут выполнены через",
        text166: "рекоммендуется повысить цену работ",
        text167: "Купить",
        text168: "Купить участок за",
        text169: "Риолит",
        text170: "У вас денег",
        text171: "Вы потратите",
        text172: "уровень",
        text173: "Поместья",
        text174: "Покупка",
        text175: "Продажа",
        text176: "требует энергии",
        text177: "Нанять рабочих",
        text178: "Построить",
        text179: "Построен на",
        text180: "Благо антитравматизма",
        text181: "Получить",
        text182: "Потратить",
        text183: "Вы получите",
        text184: "Работать на",
        text186: "Количество",
        text187: "Все",
        text188: "Скрыть меню",
        text189: "Показать меню",
        text190: "Ваши вещи со сроком жизни",
        text191: "Список задач",
        text192: "Забрать",
        text193: "Отменить",
        text194: "хватает",
        text195: "не хватает",
        text196: "из",
        text199: "Цена изменилась. Купить участок за",
        text200: "купить",
        text201: "нет предложений",
        text202: "снять с продажи",
        text203: "продать",
        text204: "Снять участок с продажи?",
        text205: "У вас энергии",
        text206: "или",
        text207: "Текущее местоположение",
        text208: "Переход между",
        text209: "Переход в область",
        text210: "Загрузка",
        text211: "Флаг",
        text212: "Ваше текущее местоположение",
        text213: "Выделенная область",
        text214: "Выделенная локация",
        text215: "Список локаций",
        text216: "Ваше местоназначение",
        text217: "Цель",
        text218: "Ваше поместье",
        text219: "Купить у государства",
        text220: "Купить у игроков",
        text221: "Режим карты",
        text222: "Режим недвижимости",
        text224: "Ваш участок",
        text225: "Переезд на новый участок обойдётся вам в",
        text226: "Поговорить",
        text227: "Искать рецепт",
        text228: "Разрушить",
        text229: "Разрушить здание",
        text230: "Выбор здания для постройки",
        text231: "Для постройки требуется",
        text232: "Вернуться",
        text233: "Если вы еще не использовали ресурсы для строительства данного здания, можно изменить  выбор, вернувшись к списку доступных для возведения зданий.",
        text234: "Добыча",
        text235: "Добыть за",
        text236: "Произвести за",
        text237: "Произвести",
        text238: "Не хватает ресурсов для производства",
        text239: "До окончания поиска клада осталось",
        text240: "Котлован",
        text242: "добавить",
        text243: "информация",
        text244: "Все рецепты",
        text245: "Избранные рецепты",
        text246: "Ваши вещи для хранения на складе",
        text247: "Ваши вещи для «заморозки» на складе",
        text248: "Доступно при постройке Хранилища",
        text249: "уровня",
        text250: "В Поместье все здания построены до максимального уровня.",
        text251: "Доступные фронты",
        text252: "В тронный зал",
        text253: "Склад",
        text254: "Тронный зал",
        text255: "Необходимо активировать портал",
        text256: "Доступно при постройке портала",
        text258: "После открытия портала вы сможете выбрать локацию, на которую он будет вести.",
        text259: "Искать локацию",
        text260: "Перенастройка станет доступна через",
        text261: "Активировать",
        text262: "Перенастроить",
        text263: "Сбросить",
        text264: "Запрашивать подтверждение при перемещении в локации",
        text265: "Переход за",
        text266: "Купить камень",
        text267: "Не ждать",
        text268: "Выберите локацию",
        text269: "Переместиться в локацию",
        text270: "Переход",
        text271: "Стоимость составит",
        text272: "Сортировка по названию",
        text273: "Сортировка по цвету",
        text274: "Сортировка по типу",
        text275: "Сортировка по времени жизни",
        text276: "Введите название предмета",
        text277: "Поиск по названию",
        text278: "Сортировка предметов",
        text279: "Сбросить фильтр",
        text280: "Сортировка по умолчанию",
        text281: "Введите имя питомца",
        text282: "Сортировка по готовности",
        text283: "Сортировка по имени",
        text284: "Сортировка по уровню",
        text285: "Сортировка",
        text286: "Гарантированные трофеи",
        text287: "Осталось нажатий",
        text288: "Убить сразу 10 монстров",
        text289: "Выберите монстра для охоты",
        text290: "Охота за",
        text291: "Большая охота за",
        text292: "Егерский лагерь",
        text293: "Добыча ресурсов",
        text294: "Поиск артефактов",
        text295: "Экипировка",
        text296: "Тип ресурса",
        text297: "Вид ресурса",
        text298: "Награда",
        text299: "Фрагменты в наличии",
        text300: "Выйти",
        text301: "Гильдийский пул",
        text302: "Серый остров",
        text303: "Зеленый остров",
        text304: "Золотой остров",
        text305: "Красный остров",
        text306: "Синий остров",
        text307: "Бойцы",
        text308: "Выпустить резерв",
        text309: "Готов",
        text310: "закрыть",
        text311: "лог боя",
        text312: "команда",
        text313: "Ok",
        text314: "До начала",
        text315: "Резерв",
        text316: "Воеводы",
        text317: "Левая башня",
        text318: "Правая башня",
        text319: "Ворота",
        text320: "Вы уверены, что хотите покинуть клановую битву до ее завершения?",
        text321: "Расставить",
        text322: "Воевода",
        text323: "Внимание! Не все участники распределены по островам.<br>Вы уверены, что хотите вступить в бой?",
        text324: "Создать случайный талисман",
        text325: "Создать талисман выбранного уровня",
        text326: "Разрушить предметы",
        text327: "Выбор питомца",
        text328: "Трава",
        text329: "Камни",
        text330: "Рыба",
        text331: "Поиск талисманов",
        text332: "Поиск ценностей",
        text333: "Поиск снаряжения",
        text334: "Вы уверены, что хотите разрушить вещь?",
        text335: "Добыча травы",
        text336: "Добыча камней",
        text337: "Добыча рыбы",
        text338: "Выберите питомца",
        text339: "Добыча ресурсов в Егерском лагере доступна со 2 уровня здания.",
        text340: "План",
        text400: "Не определено",
        text402: "Добыча прошла успешно",
        text403: "Добыча не удалась",
        text405: "мирный",
        text406: "пассивный",
        text407: "спокойный",
        text408: "раздраженный",
        text409: "агрессивный",
        text410: "частый",
        text411: "обычный",
        text412: "редкий",
        text413: "единичный",
        text414: "раритетный",
        text417: "Выберите объект действия",
        text418: "Информация об объекте",
        text419: "добыть",
        text420: "собрать",
        text421: "ловить",
        text422: "атаковать",
        text424: "Недостаточно даных",
        text425: "Неверные даные",
        text426: "Неизвестная ошибка",
        text429: "Вами",
        text430: "Всего",
        text431: "Проверка мастерства",
        text432: "Соберите изображение за отведенное время и нажмите кнопку “готово”",
        text433: "Оставшееся время",
        text434: "сек.",
        text435: "Готово",
        text436: "Вы начали добывать ресурс первым.",
        text437: "Вы начали добывать ресурс не первым.",
        text438: "Перетащите, чтобы найти клад",
        text440: "использовать",
        text441: "Выполняется действие",
        text442: "Действие выполнено успешно",
        text443: "Действие завершилось неудачей",
        text444: "далеко",
        text445: "близко",
        text446: "рядом!",
        text447: "Отображать ресурс этого цвета",
        text500: "Премиум-аккаунт",
        text505: "статуя",
        text506: "обелиск",
        text507: "Осталось убийств монстров на сегодня",
        text600: "Дар небес",
        text601: "Испытайте судьбу и заберите награду",
        text602: "Каждый бросок приближает к четырем кубикам!",
        text603: "Кости",
        text604: "Призы",
        text605:
            'Каждый день вы можете испытать удачу до 5 раз подряд. Первые две попытки бросается 1 кубик, следующие две попытки - 2 кубика, пятая попытка - 3 кубика. Сумма очков, выпавших на кубиках, укажет на ваш приз! Кроме того, каждый бросок кубиков приближает вас к супер-игре, которая позволит вам бросить сразу 4 кубика и даст шанс выиграть самые ценные призы! <a href="event:infoLink" target="_blank">Подробнее...</a>',
        text606: "Бросить бесплатно",
        text607: "Бросить за",
        text608: "Завершить игру на сегодня",
        text609: "/info/library/index.php?obj=cat&id=157",
        text700: "Нажмите, чтобы получить Дар Небес!",
        text702: "Локация под контролем древних",
        text703: "Локация под контролем людей",
        text704: "Локация свободна",
        text706: "Бой доступен через",
        text707: "Начать бой",
        text708: "Бой доступен",
        text709: "Подготовка к бою еще",
        text710: "Идет бой",
        text711: "Время для боя еще не пришло",
        text712: "Вступить",
        text713: "Бой уже идет. Вы не можете вмешаться.",
        text714: "Вмешаться в бой",
        text715: "Вы уверены, что хотите вмешаться в бой за локацию",
        text716: "Действие доступно до",
        text718: "Ошибка",
        text720: "Вы уверены, что хотите начать бой за локацию",
        text721: "/info/library/index.php?obj=cat&id=161",
        text723: "Время",
        text724: "Владения людей",
        text725: "Владения древних",
        text726: "Нейтральные владения",
        text727: "Ожидание начала боя",
        text728: "Подготовка к бою",
        text731: "Воскреснуть за",
        text732: "Волшебное зеркало",
        text733: "Активности",
        text734: "Однорукий бандит",
        text735: "Бриллиантовый бандит",
        text800: "Название",
        text802: "Снять",
        text803: "Снять эффект",
        text805: "Да",
        text806: "Нет",
        text809: "Количество слотов зависит от браслета",
        text810: "Скрыть",
        text811: "Осталось скрытий",
        text812: "Скрыть все",
        text813: "Отменить скрытие",
        text814: "Открыть все",
        text900: "Взломать",
        text901: "Открыть",
        text902: "Оставшиеся ходы",
        text903: "Замок заклинило!",
        text905: "Вы уверены?",
        text1000: "убрать",
        text1100: "/info/forum/",
        text1200: "Бриллиант",
        text1201: "назад",
        text1202: "Цитадель",
        text1203: "Чертеж",
        text1250: "Обратиться",
        text1252: "Нужен уровень",
        text1253: "Алтарь доступен",
        text1254: "Персонаж доступен",
        text1255: "Персонажи",
        text1299: "строить",
        text1300: "ПОКАЗАТЬ УБИТЫХ",
        text1301: "СКРЫТЬ УБИТЫХ",
        text1302: "Показать жизнь/ману",
        text1303: "Скрыть жизнь/ману",
        text1304: "1я Команда",
        text1305: "2я Команда",
        text1306: "Введите ник цели",
        text1400: "Магия Зеркал",
        text1401: "Вы можете выиграть один из этих призов",
        text1402: "ваш результат",
        text1403: "Играть за",
        text1404: "Выберите любые три зеркала,<br/>сумма очков укажет ваш приз!",
        text1405: "Шкала удачи",
        text1406: "Гарантированные призы",
        text1407: "/info/library/index.php?obj=cat&id=189",
        text1408: "Каждая игра накапливает энергию удачи. При достижении максимума Вы сможете сыграть на более ценные призы!",
        text1409: "Каждая игра приближает вас к очередному гарантированному призу. Счетчик игр сбрасывается по окончании события!",
        text1500: "Режим просмотра",
        text1501: "Выберите объект в зале, который хотите купить. Вы увидите список доступных вариантов.",
        text1502: "Магазин",
        text1506: "поставить",
        text1507: "Купить предмет",
        text1508: "примерить",
        text1509: "Сегодня день рождения у <b>#0#</b> ваших друзей!<br/>Вы можете подарить им подарки.",
        text1510: "Поздравить",
        text1511: "Подарки в рюкзаке",
        text1512: "Купить подарок",
        text1513: "У вас нет ни одного подарка.",
        text1514: "",
        text1515: "Сегодня день рождения у <b>1</b> вашего друга!<br/>Вы можете подарить ему подарок.",
        text1516: "Ваш текущий бонус",
        text1517: "Получить бонус",
        text1518: "Играть еще раз",
        text1519: "Начав следующую игру, вы получите возможность накопить новый бонус вместо текущего.<br/>Хотите сыграть еще раз?",
        text1520: "Бесплатная попытка через",
        text1521: "Игра окончена",
        text1522: "Жми!",
        text1523: "Начать",
        text1524: "Завершить",
        text1525: "Недостаточно средств!",
        text1526: "Чтобы получить бонус, обменяйте бриллианты на золото.",
        text1527: "Максимальный выигрыш на сервере",
        text1528: "Ваш наибольший выигрыш за сегодня",
        text1600: "ДЖЕКПОТ",
        text1601: "Беспл.игр",
        text1700: "Описание",
        text1701: "Выберите пол персонажа и вступите в бой со своим первым противником. Чтобы победить врага, используйте не только обычные удары, но и заклинания.",
        text1702: "Выбор пола",
        text1703: "МУЖСКОЙ",
        text1704: "ЖЕНСКИЙ",
        text1705: "выбрать",
        text1706: "магия огня",
        text1707: "магия воздуха",
        text1708: "магия света",
        text1709: "магия земли",
        text1710: "магия тьмы",
        text1711: "переход в режим магии",
        text1712: "переход в режим атаки",
        text1713: "Инферно, длительность #0# сек",
        text1714: "используйте книгу заклинаний",
        text1715: 'Сражения - лишь часть великих свершений и приключений, ожидающих вас в игре "Легенда: Наследие драконов".',
        text1716:
            "Вы только начали путь славного воина, но уже одолели искусного мага мертвой магии и невероятно могущественного монстра! Мы восхищаемся вашей силой и бесстрашием, и прочим вам судьбу великого воителя. А теперь зарегистируйтесь в игре и продолжайте свой легендарный путь в мире Фэо!",
        text1717: "Для того чтобы проверить свои силы в бою, выберите один из типов ударов, наведя курсор мыши на любой из мечей, расположенных по кругу.",
        text1718: "Освоить режим магии очень просто: наведите курсор мыши на меч на синем поле и используйте силы огня, воздуха или тьмы.",
        text1800: "Выход в",
        text1801: "Вход в",
        text1802: "Игроки",
        text2000: "д",
        text2001: "ч",
        text2002: "мин",
        text2003: "сек",
        text2004: "Января",
        text2005: "Февраля",
        text2006: "Марта",
        text2007: "Апреля",
        text2008: "Мая",
        text2009: "Июня",
        text2010: "Июля",
        text2011: "Августа",
        text2012: "Сентября",
        text2013: "Октября",
        text2014: "Ноября",
        text2015: "Декабря",
        text2016: "м",
        text2017: "с",
        text2018: "Ок",
        text2019: "Отмена",
        text2020: "Подтверждение",
        text2021: "За",
        text2022: "шт",
        text2023: "час",
        text2024: "часа",
        text2025: "ур.",
        text2026: "Больше не спрашивать",
        text2027: "Сбрасывается при выходе из локации",
        text2028: "C",
        text2029: "до",
        text2030: "Время до окончания",
        text2031: "Время до начала",
        text2032: "В процессе",
        text2033: "Отправить",
        text2034: "Создать",
        text3000: "великие битвы",
        text3001: "невидимость",
        text3002: "доблесть",
        text3003: "жизнь",
        text3004: "почта",
        text3005: "квесты",
        text3006: "животное",
        text3007: "компас",
        text3008: "профессии",
        text3009: "друзья",
        text3010: "Проложите кратчайший путь к любой точке ФЭО",
        text3011: "Локации",
        text3012: "Ресурсы",
        text3013: "Монстры",
        text3014: "Инстансы",
        text3015: "Путь займет",
        text3016: "переходов",
        text3017: "Искомый объект можно найти в нескольких локациях:",
        text3018: "Ничего не найдено",
        text3019: "Маршрут не найден",
        text3020: "переход",
        text3021: "перехода",
        text3022: "Проложить маршрут",
        text3023: "Объект находится в текущей локации",
        text3024: "Проложить",
        text3025: "Недостаточно средств.",
        text3026: "Случайный вид",
        text3027: "Смена образа",
        text3028: "Персонализация",
        text3029: "Выбор народа",
        text3030: "Создания мира Фэо,  обладающие разумом, волей и человеческой речью, обитают на материке Огрий, приручили тигров, владеют магией света, воздуха, воды.",
        text3031: "Создания мира Фэо, в их жилах течет раскаленная лава, обладают огромной физической силой, укротили зорбов, поклоняются богине Верциде, владеют магией теней, огня, земли.",
        text3032: "Дойти",
        text3033: "Соединение",
        text3034: "Регистрация открыта",
        text3035: "Регистрация закрыта",
        text3036: "Хорошее",
        text3037: "Население",
        text3038: "Выбрать сервер",
        text3039: "Выбор сервера",
        text3040: "Введите название объекта",
        text3041: "или выберите из списка",
    },
    isInited: false,
    init: function (xml) {
        this.isInited = true;
        for (key in this.dictionary) {
            this.dictionary[key] = this.dictionary[key].replace("И", String.fromCharCode(1048));
        }
        var str;
        var hash = {};
        for (key in this.dictionary) {
            if (hash[this.dictionary[str]]) canvas.Log.add(canvas.Log.ALL, "Same word in Dictionary! ID: " + str + " VALUE: " + this.dictionary[str] + " REPLACE_ID: " + hash[this.dictionary[str]], 16711680);
            else hash[this.dictionary[str]] = str;
        }
        if (xml && xml.firstChild && xml.firstChild.childNodes) {
            var len = xml.firstChild.childNodes.length;
            for (var i = 0; i < len; i++) {
                var element = xml.firstChild.childNodes[i];
                if (!element.firstChild) continue;
                this.dictionary[element.nodeName] = element.textContent;
            }
        }
    },
    getText: function (id, params) {
        var result = this.dictionary ? this.dictionary["text" + id.toString()] : "Translator not initialized!";
        var r;
        var a;
        var b;
        var str;
        var str2;
        var key;
        if (params) {
            r = /#\d+[^#]*#/gi;
            a = result.match(r);
            for (key in a) {
                str = a[key];
                if (typeof str != "string") continue;
                b = str.substr(1, str.length - 2).split(",");
                str2 = params[parseInt(b[0])];
                if (str2) {
                    result = result.replace(str, str2);
                }
            }
        }
        return result;
    },
    getLang: function () {
        return this.lang;
    },
    toUpperCaseFirstChar: function (value) {
        if (!value || value == "") return "";
        return value.charAt(0).toUpperCase() + value.substr(1).toLowerCase();
    },
};
canvas.SoundManager = {
    volume: 1,
    cache: {},
    play: function (path) {
        var a = path.split(".");
        var ext = a[a.length - 1];
        if (ext.length > 4) {
            path = path + ".ogg";
        } else {
            path = path.substr(0, path.length - ext.length) + "ogg";
        }
        this.lastPath = path;
        if (!canvas.ResourceLoader.testUx(path)) {
            console.log("Warning! Sound not found: " + path);
            return;
        }
        path = canvas.ResourceLoader.applyUx(path);
        var sound = this.cache[path];
        if (sound) {
            sound.volume(this.volume);
            sound.play();
        } else {
            sound = new canvas.px.Howl({ src: [path], autoplay: true, loop: false, volume: this.volume, onloaderror: this.onError.bind(this) });
            this.cache[path] = sound;
        }
    },
    onError: function () {
        canvas.app.battle.log("Error load sound: " + this.lastPath, 16777215);
    },
};
canvas.Event = {
    STAGE_MOUSE_UP: "STAGE_MOUSE_UP",
    STAGE_MOUSE_MOVE: "STAGE_MOUSE_MOVE",
    STAGE_MOUSE_OUT: "STAGE_MOUSE_OUT",
    STAGE_WHEEL: "STAGE_WHEEL",
    STAGE_KEY_DOWN: "STAGE_KEY_DONW",
    STAGE_KEY_UP: "STAGE_KEY_UP",
    UX_READY: "UX_READY",
    ARTIKULS_LOADED: "ARTIKULS_LOADED",
};
canvas.px.MovieClipEvent = { EVENT_UPDATE: "MovieClip.UPDATE", EVENT_COMPLETE: "MovieClip.COMPLETE", EVENT_READY: "MovieClip.READY" };
canvas.px.MovieClipProps = { colorTransform: "ct", alpha: "al", masking: "mg", mask: "mk", matrix: "mx", actions: "as", children: "ch", label: "lb" };
canvas.px.MovieClip = function (url, basePath, smoothing) {
    this._frameEvent = "";
    Object.defineProperty(this, "frameEvent", {
        get: function () {
            return this._frameEvent;
        },
        set: function (value) {
            if (this._frameEvent) {
                canvas.EventManager.removeEventListener(this._frameEvent, null, this._render, this);
            }
            this._frameEvent = value;
            if (this._frameEvent) {
                canvas.EventManager.addEventListener(this._frameEvent, null, this._render, this);
            }
            this.updateFrameEvent();
        },
    });
    this._currentFrame = 1;
    Object.defineProperty(this, "currentFrame", {
        get: function () {
            return this._currentFrame;
        },
        set: function (value) {
            if (value > this.totalFrames) {
                if (!this.loop) {
                    this.stop();
                    canvas.EventManager.dispatchEvent(canvas.px.MovieClipEvent.EVENT_COMPLETE, this);
                    if (this.autoDestroy) {
                        this.destroy({ children: true });
                    }
                    return;
                }
            }
            this._currentFrame = value > this.totalFrames ? 1 : value < 1 ? this.totalFrames : value;
        },
    });
    this._locked = false;
    Object.defineProperty(this, "locked", {
        get: function () {
            return this._locked;
        },
        set: function (value) {
            if (this._locked == value) return;
            this._locked = value;
        },
    });
    this.url = url;
    this.container = new canvas.px.Container();
    this.spriteHash = {};
    this.stopped = false;
    this.labels = {};
    this.currentLabel = "";
    this.basePath = basePath;
    this.autoDestroy = false;
    this.loop = false;
    this.ready = false;
    this.skipMasks = false;
    this.mcChildsCache = {};
    this.smoothing = smoothing == undefined ? true : smoothing;
    canvas.px.Container.call(this);
    this.addChild(this.container);
    if (!this.data && !canvas.ResourceLoader.get(this.url + ".mci")) {
        canvas.EventManager.addEventListener(canvas.ResourceLoader.EVENT_COMPLETE, null, this._init, this);
        canvas.ResourceLoader.add([this.url + ".mci"]);
    } else {
        this._init();
    }
    return this;
};
canvas.px.MovieClip.prototype = Object.create(canvas.px.Container.prototype);
canvas.px.MovieClip.prototype._init = function () {
    canvas.EventManager.removeEventListener(canvas.ResourceLoader.EVENT_COMPLETE, null, this._init, this);
    if (!this.data) {
        if (!canvas.ResourceLoader.get(this.url + ".mci")) {
            return;
        }
        this.data = canvas.ResourceLoader.get(this.url + ".mci").data;
    }
    this.maxTotalFrames = this.totalFrames = this.data.frames.length;
    if (!this.mcChilds) this.mcChilds = this.data.mc;
    if (this.mcChilds) {
        for (var str in this.mcChilds) {
            var len = this.mcChilds[str].frames.length;
            if (len > this.maxTotalFrames) this.maxTotalFrames = len;
        }
    }
    for (var str in this.data.frames) {
        if (this.data.frames[str][canvas.px.MovieClipProps.label]) {
            this.labels[this.data.frames[str][canvas.px.MovieClipProps.label].name] = this.data.frames[str][canvas.px.MovieClipProps.label].frame;
        }
    }
    if (!this.framePath) this.framePath = this.data.name ? this.data.name + "/" : "";
    if (!this.atlas) {
        var atlasUrl = "";
        if (this.data.noAtlas) {
            atlasUrl = "";
        } else if (this.data.atlas) {
            atlasUrl = (this.basePath ? this.basePath : canvas.Config.imgPath) + this.data.atlas;
        } else {
            atlasUrl = this.url;
        }
        this.atlasUrl = atlasUrl;
        if (atlasUrl && !canvas.ResourceLoader.get(atlasUrl + ".json")) {
            canvas.ResourceLoader.add([atlasUrl + ".json"]);
            canvas.EventManager.addEventListener(canvas.ResourceLoader.EVENT_COMPLETE, null, this._ready, this);
        } else {
            this._ready();
        }
    } else {
        this._ready();
    }
};
canvas.px.MovieClip.prototype._ready = function () {
    canvas.EventManager.removeEventListener(canvas.ResourceLoader.EVENT_COMPLETE, null, this._ready, this);
    if (!this.atlas && this.atlasUrl) {
        this.atlas = canvas.ResourceLoader.get(this.atlasUrl + ".json").textures;
    }
    this.ready = true;
    this.render();
    this.currentFrame = 1;
    canvas.EventManager.dispatchEvent(canvas.px.MovieClipEvent.EVENT_READY, this);
};
canvas.px.MovieClip.prototype._render = function () {
    if (!this.stopped) this.render();
};
canvas.px.MovieClip.prototype.render = function () {
    if (this.locked) return;
    if (canvas.px.MovieClip.debugEnable) {
        if (Date.now() - canvas.px.MovieClip.debugTime >= 1e3) {
            console.log("Renders per second: " + canvas.px.MovieClip.debugRenderCount);
            canvas.px.MovieClip.debugRenderCount = 0;
            canvas.px.MovieClip.debugTime = Date.now();
        }
        canvas.px.MovieClip.debugRenderCount++;
    }
    if (!this.ready) return;
    if (this.data.frames[this.currentFrame - 1][canvas.px.MovieClipProps.label]) {
        this.currentLabel = this.data.frames[this.currentFrame - 1][canvas.px.MovieClipProps.label].name;
    }
    var actions = this.data.frames[this.currentFrame - 1][canvas.px.MovieClipProps.actions];
    if (actions) {
        for (var key in actions) {
            var action = actions[key];
            if (this[action.name]) {
                switch (action.name) {
                    case "gotoAndPlay":
                        this.gotoAndPlay(parseInt(action.params[0]) + 1);
                        break;
                    default:
                        this[action.name].apply(this, action.params ? action.params : null);
                }
            }
        }
    }
    this.container.removeChildren();
    var key;
    for (key in this.mcChildsCache) {
        this.mcChildsCache[key].wasActive = false;
    }
    var cacheIndexes = {};
    var colorTransform;
    var matrix;
    for (key in this.data.frames[this.currentFrame - 1][canvas.px.MovieClipProps.children]) {
        var child = this.data.frames[this.currentFrame - 1][canvas.px.MovieClipProps.children][key];
        if (child[canvas.px.MovieClipProps.masking]) {
            continue;
        }
        if (!child.name && !child.mc) continue;
        var sprite;
        if (child.mc) {
            if (this.mcChildsCache[child.mc]) {
                sprite = this.mcChildsCache[child.mc];
                sprite.gotoAndStop(sprite.currentFrame);
            } else {
                sprite = new canvas.px.MovieClipChild(this.mcChilds[child.mc], this.atlas, this.framePath, this.mcChilds, this.smoothing);
                this.mcChildsCache[child.mc] = sprite;
            }
            sprite.name = child.mc;
            sprite.wasActive = true;
        } else {
            sprite = this.getImage(child.name, cacheIndexes);
            sprite.name = child.name;
        }
        this.clearImage(sprite);
        matrix = child[canvas.px.MovieClipProps.matrix];
        if (!matrix.set) {
            child[canvas.px.MovieClipProps.matrix] = matrix = new canvas.px.Matrix(matrix.a, matrix.b, matrix.c, matrix.d, matrix.tx, matrix.ty);
        }
        sprite.transform.localTransform = matrix;
        sprite.alpha = child[canvas.px.MovieClipProps.alpha] == undefined ? 1 : child[canvas.px.MovieClipProps.alpha];
        colorTransform = child[canvas.px.MovieClipProps.colorTransform];
        if (colorTransform) {
            if (typeof colorTransform == "string") {
                sprite.filters = [canvas.Functions.colorMatrixCache[colorTransform]];
            } else {
                child[canvas.px.MovieClipProps.colorTransform] = canvas.Functions.getColorMatrixHash.apply(this, colorTransform);
                sprite.filters = [canvas.Functions.getColorMatrixFilter.apply(this, colorTransform)];
            }
        }
        this.container.addChild(sprite);
        if (!this.skipMasks && child[canvas.px.MovieClipProps.mask]) {
            var mskData = child[canvas.px.MovieClipProps.mask];
            var msk = this.getImage(mskData.name, cacheIndexes);
            this.clearImage(msk);
            matrix = mskData[canvas.px.MovieClipProps.matrix];
            if (!matrix.set) {
                mskData[canvas.px.MovieClipProps.matrix] = matrix = new canvas.px.Matrix(matrix.a, matrix.b, matrix.c, matrix.d, matrix.tx, matrix.ty);
            }
            msk.transform.localTransform = matrix;
            this.container.addChild(msk);
            sprite.mask = msk;
        }
    }
    for (key in this.mcChildsCache) {
        var tempMc = this.mcChildsCache[key];
        if (!tempMc.wasActive) tempMc.currentFrame = tempMc.totalFrames;
    }
    canvas.EventManager.dispatchEvent(canvas.px.MovieClipEvent.EVENT_UPDATE, this);
    this.currentFrame++;
};
canvas.px.MovieClip.prototype.getImage = function (name, cacheIndexes) {
    if (cacheIndexes[name] == undefined) cacheIndexes[name] = 0;
    else cacheIndexes[name]++;
    var sprite;
    var indexedName = name + "__" + cacheIndexes[name];
    var t;
    if (this.spriteHash[indexedName]) {
        sprite = this.spriteHash[indexedName];
    } else {
        t = this.atlas ? this.atlas[this.framePath + name + ".png"] : canvas.px.TextureEmpty;
        if (!this.smoothing && t) t.baseTexture.scaleMode = canvas.px.ScaleMode.NEAREST;
        sprite = new canvas.px.Sprite(t);
        this.spriteHash[indexedName] = sprite;
    }
    return sprite;
};
canvas.px.MovieClip.prototype.clearImage = function (sprite) {
    sprite.mask = null;
    sprite.filters = null;
};
canvas.px.MovieClip.prototype.gotoAndPlay = function (frame) {
    this.currentFrame = typeof frame == "string" ? this.labels[frame] || 1 : frame;
    this.stopped = false;
};
canvas.px.MovieClip.prototype.gotoAndStop = function (frame) {
    this.currentFrame = typeof frame == "string" ? this.labels[frame] || 1 : frame;
    this.stopped = true;
    this.render();
};
canvas.px.MovieClip.prototype.stop = function () {
    this.stopped = true;
};
canvas.px.MovieClip.prototype.play = function () {
    this.stopped = false;
};
canvas.px.MovieClip.prototype.stopChildren = function () {
    if (this.mcChildsCache) {
        for (var str in this.mcChildsCache) {
            this.mcChildsCache[str].frameEvent = this.frameEvent;
            this.mcChildsCache[str].stop();
        }
    }
};
canvas.px.MovieClip.prototype.playChildren = function () {
    if (this.mcChildsCache) {
        for (var str in this.mcChildsCache) {
            this.mcChildsCache[str].frameEvent = this.frameEvent;
            this.mcChildsCache[str].play();
        }
    }
};
canvas.px.MovieClip.prototype.updateFrameEvent = function () {};
canvas.px.MovieClip.prototype.destroy = function () {
    this.stop();
    this.frameEvent = null;
    if (this.parent) this.parent.removeChild(this);
    canvas.px.Container.prototype.destroy.call(this, { children: true });
    var key;
    for (key in this.spriteHash) {
        this.spriteHash[key].destroy();
    }
    for (key in this.mcChildsCache) {
        this.mcChildsCache[key].destroy();
    }
};
canvas.px.MovieClip.debugEnable = false;
canvas.px.MovieClip.debugTime = Date.now();
canvas.px.MovieClip.debugRenderCount = 0;
canvas.px.MovieClipChild = function (data, atlas, framePath, mcChilds, smoothing) {
    this.data = data;
    this.atlas = atlas;
    this.framePath = framePath;
    this.mcChilds = mcChilds;
    canvas.px.MovieClip.call(this, null, null, smoothing);
    this.loop = true;
    this.gotoAndStop(1);
};
canvas.px.MovieClipChild.prototype = Object.create(canvas.px.MovieClip.prototype);
canvas.px.WindowEvent = { EVENT_OPEN: "WindowEvent.EVENT_OPEN", EVENT_CLOSE: "WindowEvent.EVENT_CLOSE", EVENT_DRAG: "WindowEvent.EVENT_DRAG", EVENT_DRAG_FINISH: "WindowEvent.EVENT_DRAG_FINISH" };
canvas.px.Window = function () {
    canvas.px.Container.call(this);
    this.closeButton = null;
    this.header = null;
    this.added = this.addedHandler.bind(this);
    this.removed = this.removedHandler.bind(this);
    this.click = this.clickHandler.bind(this);
    this.mousedown = this.downHandler.bind(this);
    this.interactive = true;
    this.dragAvailable = true;
};
canvas.px.Window.prototype = Object.create(canvas.px.Container.prototype);
canvas.px.Window.prototype.clickHandler = function (mouseData) {
    if (canvas.Functions.findParent(this.closeButton, mouseData.target)) {
        canvas.EventManager.dispatchEvent(canvas.px.WindowEvent.EVENT_CLOSE, this);
    }
};
canvas.px.Window.prototype.downHandler = function (mouseData) {
    if (canvas.Functions.findParent(this.header, mouseData.target)) {
        canvas.EventManager.dispatchEvent(canvas.px.WindowEvent.EVENT_DRAG, this, mouseData);
    }
};
canvas.px.Window.prototype.addedHandler = function (e) {};
canvas.px.Window.prototype.removedHandler = function (e) {};
canvas.px.Window.prototype.resize = function (r) {};
canvas.px.Window.prototype.startDrag = function (rect, point) {
    if (!this.dragAvailable) return;
    this.dragRect = rect;
    this.startDragMousePoint = new canvas.px.Point(point.x - this.x, point.y - this.y);
    canvas.EventManager.addEventListener(canvas.Event.STAGE_MOUSE_MOVE, null, this.dragHandler, this);
};
canvas.px.Window.prototype.dragHandler = function (event) {
    var targetX = event.params.mouseData.offsetX - this.startDragMousePoint.x;
    var targetY = event.params.mouseData.offsetY - this.startDragMousePoint.y;
    targetX = targetX < this.dragRect.x ? this.dragRect.x : targetX > this.dragRect.x + this.dragRect.width ? this.dragRect.x + this.dragRect.width : targetX;
    targetY = targetY < this.dragRect.y ? this.dragRect.y : targetY > this.dragRect.y + this.dragRect.height ? this.dragRect.y + this.dragRect.height : targetY;
    this.position.set(Math.max(0, Math.round(targetX)), Math.max(0, Math.round(targetY)));
};
canvas.px.Window.prototype.stopDrag = function () {
    canvas.EventManager.removeEventListener(canvas.Event.STAGE_MOUSE_MOVE, null, this.dragHandler, this);
    canvas.EventManager.dispatchEvent(canvas.px.WindowEvent.EVENT_DRAG_FINISH, this);
};
canvas.px.Window.prototype.destroy = function () {
    canvas.px.Container.prototype.destroy.apply(this, [{ children: true }]);
};
canvas.px.Mask = function (w, h, color, alpha) {
    this._active = true;
    Object.defineProperty(this, "active", {
        get: function () {
            return this._active;
        },
        set: function (value) {
            this._active = value;
            this.update();
        },
    });
    canvas.px.Graphics.call(this);
    if (w == undefined) w = 100;
    if (h == undefined) h = 100;
    this.color = color == undefined ? 0 : color;
    this.alpha = alpha == undefined ? 0 : alpha;
    this.setSize(w, h);
};
canvas.px.Mask.prototype = Object.create(canvas.px.Graphics.prototype);
canvas.px.Mask.prototype.setSize = function (w, h) {
    if (w == undefined) w = -1;
    if (h == undefined) h = -1;
    if (w >= 0) this._width = w;
    if (h >= 0) this._height = h;
    this.update();
};
canvas.px.Mask.prototype.update = function () {
    this.clear();
    if (this.active) {
        this.beginFill(this.color, this.alpha);
        this.drawRect(0, 0, this._width, this._height);
        this.endFill();
    }
};
canvas.px.RoundRect = function (color, alpha, w, h, ellipseWidth, ellipseHeight, centered, fill, borderColor, borderAlpha) {
    this._myColor = 0;
    Object.defineProperty(this, "myColor", {
        get: function () {
            return this._myColor;
        },
        set: function (value) {
            this._myColor = value;
            this.update();
        },
    });
    this._myAlpha = 1;
    Object.defineProperty(this, "myAlpha", {
        get: function () {
            return this._myAlpha;
        },
        set: function (value) {
            this._myAlpha = value;
            this.update();
        },
    });
    this._borderColor = 0;
    Object.defineProperty(this, "borderColor", {
        get: function () {
            return this._borderColor;
        },
        set: function (value) {
            this._borderColor = value;
            this.update();
        },
    });
    this._borderAlpha = 1;
    Object.defineProperty(this, "borderAlpha", {
        get: function () {
            return this._borderAlpha;
        },
        set: function (value) {
            this._borderAlpha = value;
            this.update();
        },
    });
    this._w = 0;
    Object.defineProperty(this, "w", {
        get: function () {
            return this._w;
        },
        set: function (value) {
            if (value == this._w) return;
            this._w = value;
            this.update();
        },
    });
    this._h = 0;
    Object.defineProperty(this, "h", {
        get: function () {
            return this._h;
        },
        set: function (value) {
            if (value == this._h) return;
            this._h = value;
            this.update();
        },
    });
    this._ellipseWidth = 0;
    Object.defineProperty(this, "ellipseWidth", {
        get: function () {
            return this._ellipseWidth;
        },
        set: function (value) {
            if (value == this._ellipseWidth) return;
            this._ellipseWidth = value;
            this.update();
        },
    });
    canvas.px.Graphics.call(this);
    if (color == undefined) color = 0;
    if (alpha == undefined) alpha = 1;
    if (w == undefined) w = 100;
    if (h == undefined) h = 100;
    if (ellipseWidth == undefined) ellipseWidth = 30;
    if (centered == undefined) centered = false;
    if (fill == undefined) fill = true;
    if (borderColor == undefined) borderColor = 0;
    if (borderAlpha == undefined) borderAlpha = 0;
    this._myColor = color;
    this._myAlpha = alpha;
    this._fill = fill;
    this._borderAlpha = borderAlpha;
    this._borderColor = borderColor;
    this._w = w;
    this._h = h;
    this._ellipseWidth = ellipseWidth;
    this._centered = centered;
    this.update();
};
canvas.px.RoundRect.prototype = Object.create(canvas.px.Graphics.prototype);
canvas.px.RoundRect.prototype.update = function () {
    this.clear();
    this.lineStyle(1, this._borderColor, this._borderAlpha);
    if (this._fill) {
        this.beginFill(this._myColor, this._myAlpha);
    }
    this.drawRoundedRect(this._centered ? -this._w / 2 : 0, this._centered ? -this._h / 2 : 0, this._w, this._h, this._ellipseWidth);
    this.endFill();
};
canvas.px.RoundRect.prototype.setSize = function (ww, hh) {
    this._w = ww;
    this._h = hh;
    this.update();
};
canvas.px.Polygon = function (data, color, alpha) {
    canvas.px.Graphics.call(this);
    if (color == undefined) color = 0;
    if (alpha == undefined) alpha = 0;
    if (!data) return;
    this.beginFill(color, alpha);
    var len = data.length;
    for (var j = 0; j < len; j += 4) {
        this.drawRect(data[j], data[j + 1], 1, data[j + 3] - data[j + 1]);
    }
    this.endFill();
};
canvas.px.Polygon.prototype = Object.create(canvas.px.Graphics.prototype);
canvas.px.PolygonData = function (data) {
    var a = [];
    var len = data.length;
    for (var j = 0; j < len; j += 2) {
        a.push(data[j], data[j + 1]);
    }
    PIXI.Polygon.call(this, a);
};
canvas.px.PolygonData.prototype = Object.create(PIXI.Polygon.prototype);
canvas.px.Matrix = function (a, b, c, d, tx, ty) {
    return new PIXI.Matrix(a == undefined ? 1 : a, b == undefined ? 0 : b, c == undefined ? 0 : c, d == undefined ? 1 : d, tx, ty);
};
canvas.px.RoundProgress = function (radius, color, alpha) {
    this._progress = 0;
    Object.defineProperty(this, "progress", {
        get: function () {
            return this._progress;
        },
        set: function (value) {
            this._progress = value < 0 ? 0 : value > 1 ? 1 : value;
            this.update();
        },
    });
    canvas.px.Container.call(this);
    this.color = color;
    this.alpha = alpha;
    this.radius = radius;
    this.r1 = new canvas.px.Graphics();
    this.r2 = new canvas.px.Graphics();
    this.addChild(this.r1);
    this.addChild(this.r2);
    var msk = new canvas.px.Mask(this.radius, this.radius * 2);
    this.addChild(msk);
    msk.position.set(0, -this.radius);
    this.r1.mask = msk;
    msk = new canvas.px.Mask(this.radius, this.radius * 2);
    this.addChild(msk);
    msk.position.set(-this.radius, -this.radius);
    this.r2.mask = msk;
    this.r1.clear();
    this.r1.beginFill(this.color, this.alpha);
    this.r1.arc(0, 0, this.radius, canvas.Functions.degToRad(0), canvas.Functions.degToRad(180));
    this.r1.endFill();
    this.r2.clear();
    this.r2.beginFill(this.color, this.alpha);
    this.r2.arc(0, 0, this.radius, canvas.Functions.degToRad(0), canvas.Functions.degToRad(180));
    this.r2.endFill();
};
canvas.px.RoundProgress.prototype = Object.create(canvas.px.Container.prototype);
canvas.px.RoundProgress.prototype.update = function () {
    this.r1.rotation = canvas.Functions.degToRad(90 + (this.progress >= 0.5 ? 180 : Math.round(360 * this.progress)));
    this.r2.rotation = canvas.Functions.degToRad(-90 + (this.progress <= 0.5 ? 0 : Math.round(360 * (this.progress - 0.5))));
};
canvas.utils.LocalStorage = function (name) {
    this.name = name;
    if (typeof Storage !== "undefined") {
        this.isSupported = true;
    }
};
canvas.utils.LocalStorage.prototype.get = function (key) {
    if (this.isSupported) {
        return localStorage.getItem(this.name + "_" + key);
    } else {
        return undefined;
    }
};
canvas.utils.LocalStorage.prototype.set = function (key, value) {
    if (this.isSupported) {
        localStorage.setItem(this.name + "_" + key, value);
    }
};
canvas.utils.URLRequestEvent = { EVENT_COMPLETE: "URLRequestEvent.EVENT_COMPLETE", EVENT_ERROR: "URLRequestEvent.EVENT_ERROR" };
canvas.utils.URLRequest = function (url, method, params, responseType) {
    this.stack = [];
    this.request = new XMLHttpRequest();
    this.request.onreadystatechange = this.onLoad.bind(this);
    this.url = url || "";
    this.method = method || "GET";
    this.params = params || {};
    this.responseType = responseType || "text";
    this.request.responseType = this.responseType;
    return this;
};
canvas.utils.URLRequest.prototype.load = function (url, par, info) {
    if (this.busy) {
        this.stack.push(arguments);
        return;
    }
    this.busy = true;
    this.info = info;
    if (typeof url != "undefined" && url) this.url = url;
    if (typeof par != "undefined" && par) this.params = par;
    this.request.open(this.method, this.url, true);
    if (this.method == "POST") {
        this.request.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
        var params = this.params;
        if (typeof params == "object") {
            params = "";
            for (var key in this.params) {
                if (params) params += "&";
                params += key + "=" + this.params[key];
            }
        }
        this.request.send(params);
    } else {
        this.request.send();
    }
};
canvas.utils.URLRequest.prototype.onLoad = function () {
    if (this.request.readyState == 4) {
        if (this.request.status == 200) {
            canvas.EventManager.dispatchEvent(canvas.utils.URLRequestEvent.EVENT_COMPLETE, this);
        } else {
            canvas.Log.add(canvas.Log.ALL, "URL not found <b>" + this.url + "</b>", "#FF0000");
            canvas.EventManager.dispatchEvent(canvas.utils.URLRequestEvent.EVENT_ERROR, this);
        }
        this.busy = false;
        if (this.stack.length) {
            this.load.apply(this, this.stack.shift());
        }
    }
};
canvas.utils.URLRequest.prototype.abort = function () {
    if (this.request) {
        this.request.abort();
    }
};
canvas.utils.HintParams = function (view, light, pos) {
    this.view = view;
    this.light = light || false;
    this.pos = pos == undefined ? canvas.utils.HintPos.RIGHT_BOTTOM : pos;
};
canvas.utils.HintPos = { RIGHT_BOTTOM: "rb", RIGHT_TOP: "rt", LEFT_BOTTOM: "lb", LEFT_TOP: "lt" };
canvas.utils.HintManager = function () {
    canvas.utils.HintManager.instance = this;
};
canvas.utils.HintManager.prototype.init = function (view, w, h) {
    this.view = view;
    this.resize(w, h);
    if (this.interval == undefined) this.interval = setInterval(this.handlerTimer.bind(this), 200);
};
canvas.utils.HintManager.prototype.resize = function (w, h) {
    this.width = w;
    this.height = h;
};
canvas.utils.HintManager.prototype.add = function (target, params) {
    target.hintParams = params;
    target.mouseover = this.handlerOver.bind(this);
    target.mouseout = this.handlerOut.bind(this);
};
canvas.utils.HintManager.prototype.remove = function (target) {
    this.hide(target);
    target.mouseover = null;
    target.mouseout = null;
};
canvas.utils.HintManager.prototype.show = function (target) {
    if (!target) return;
    if (this.currentTarget != null) {
        this.hide(this.currentTarget);
    }
    var hintParams = target.hintParams;
    if (hintParams && hintParams.view) {
        this.view.addChild(hintParams.view);
        this.currentTarget = target;
        this.view.mousemove = this.handlerMove.bind(this);
        if (hintParams.light) {
            this.currentTarget.filters = [canvas.Functions.getBrightness()];
        }
    }
};
canvas.utils.HintManager.prototype.hideAndRemove = function (target) {
    if (target == undefined) target = this.currentTarget;
    this.remove(target);
    this.hide(target);
};
canvas.utils.HintManager.prototype.hide = function (target) {
    if (target == undefined) target = this.currentTarget;
    if (!target) return;
    if (this.currentTarget != target) return;
    var hintParams = target.hintParams;
    if (hintParams) {
        if (hintParams.light) {
            this.currentTarget.filters = [];
        }
        this.view.removeChildren();
        this.currentTarget = null;
        this.view.mousemove = null;
    }
};
canvas.utils.HintManager.prototype.handlerOver = function (mouseData) {
    this.show(mouseData.currentTarget);
    this.handlerMove(mouseData);
};
canvas.utils.HintManager.prototype.handlerOut = function (mouseData) {
    this.hide(mouseData.currentTarget);
};
canvas.utils.HintManager.prototype.handlerMove = function (mouseData) {
    if (!this.currentTarget.worldVisible) {
        this.hide(this.currentTarget);
        return;
    }
    if (this.currentTarget) {
        var targetX, targetY;
        switch (this.currentTarget.hintParams.pos) {
            case canvas.utils.HintPos.RIGHT_BOTTOM:
                targetX = 15 + mouseData.data.global.x;
                targetY = 20 + mouseData.data.global.y;
                break;
            case canvas.utils.HintPos.RIGHT_TOP:
                targetX = 15 + mouseData.data.global.x;
                targetY = mouseData.data.global.y - this.currentTarget.hintParams.view.height - 2;
                break;
            case canvas.utils.HintPos.LEFT_BOTTOM:
                targetX = mouseData.data.global.x - this.currentTarget.hintParams.view.width - 2;
                targetY = 20 + mouseData.data.global.y;
                break;
            case canvas.utils.HintPos.LEFT_TOP:
                targetX = mouseData.data.global.x - this.currentTarget.hintParams.view.width - 2;
                targetY = mouseData.data.global.y - this.currentTarget.hintParams.view.height - 2;
                break;
        }
        var diff = targetX + this.currentTarget.hintParams.view.width - this.width;
        if (diff > 0) {
            targetX -= diff;
        }
        diff = targetY + this.currentTarget.hintParams.view.height - this.height;
        if (diff > 0) {
            targetY -= diff;
        }
        if (targetX < 0) targetX = 0;
        if (targetY < 0) targetY = 0;
        this.currentTarget.hintParams.view.position.set(Math.round(targetX), Math.round(targetY));
    }
};
canvas.utils.HintManager.prototype.handlerTimer = function () {
    if (this.currentTarget && !this.currentTarget.worldVisible) {
        this.hide(this.currentTarget);
    }
};
canvas.utils.ServerTime = function (serverTime, timezoneOffset) {
    this._serverDiff = 0;
    this._timezoneOffset = 180;
    if (serverTime != undefined) this.init(serverTime, timezoneOffset);
};
canvas.utils.ServerTime.prototype.init = function (serverTime, timezoneOffset) {
    if (timezoneOffset == undefined) timezoneOffset = 180;
    this._serverDiff = Math.round(Date.now() * 0.001) - serverTime;
    this._timezoneOffset = timezoneOffset;
};
canvas.utils.ServerTime.prototype.getTime = function () {
    return Math.round(Date.now() * 0.001) - this._serverDiff;
};
canvas.utils.ServerTime.prototype.getDate = function () {
    var date = new Date();
    date.setTime(date.getTime() - this._serverDiff * 1e3 + (this._timezoneOffset + date.getTimezoneOffset()) * 6e4);
    return date;
};
canvas.utils.WindowsManager = function (wall) {
    Object.defineProperty(this, "haveActiveWindows", {
        get: function () {
            return this.activeWindows.length > 0;
        },
    });
    canvas.utils.WindowsManager.instance = this;
    this.activeWindows = [];
    this.container = null;
    this.dragingWindow = null;
    this.bottomContainer = null;
    this.w = 0;
    this.h = 0;
    this.dx = 0;
    this.dy = 0;
    this.currentWindow = null;
    if (wall) this.wall = wall;
    canvas.EventManager.addEventListener(canvas.px.WindowEvent.EVENT_CLOSE, null, this.closeHandler, this);
    canvas.EventManager.addEventListener(canvas.px.WindowEvent.EVENT_DRAG, null, this.dragHandler, this);
};
canvas.utils.WindowsManager.prototype.init = function (container, w, h, bottomContainer) {
    this.bottomContainer = bottomContainer;
    this.container = container;
    this.w = w;
    this.h = h;
    this.resizeWindows();
};
canvas.utils.WindowsManager.prototype.openWindow = function (window, applyFilter, blockBack, centered, applyWall) {
    if (applyFilter == undefined) applyFilter = true;
    if (blockBack == undefined) blockBack = true;
    if (centered == undefined) centered = true;
    if (applyWall == undefined) applyWall = false;
    window.__centered = centered;
    if (this.activeWindows.indexOf(window) < 0) {
        this.activeWindows.push(window);
    }
    if (window.parent != this.container) {
        this.container.addChild(window);
        this.resizeWindow(window);
    }
    if (this.bottomContainer != null) {
        if (blockBack) {
            this.bottomContainer.interactive = false;
            this.bottomContainer.interactiveChildren = false;
        }
        if (applyFilter) {
            if (this.wall) {
                this.wall.active = true;
            } else {
                this.bottomContainer.filters = [canvas.Functions.getGreyScale(0.3)];
            }
        }
        if (applyWall) {
            window.__wall = new canvas.px.Mask(this.bottomContainer.width, this.bottomContainer.height, 0, 0.7);
            this.bottomContainer.addChild(window.__wall);
        }
        canvas.EventManager.dispatchEvent(canvas.px.WindowEvent.EVENT_OPEN, this, window);
    }
};
canvas.utils.WindowsManager.prototype.resizeWindows = function () {
    var window;
    var len = this.activeWindows.length;
    for (var i = 0; i < len; i++) {
        window = this.activeWindows[i];
        this.resizeWindow(window);
    }
};
canvas.utils.WindowsManager.prototype.resizeWindow = function (window) {
    if (window.__centered) {
        window.x = Math.max(0, Math.round((this.w - window.width) * 0.5));
        window.y = Math.max(0, Math.round((this.h - window.height) * 0.5));
    }
};
canvas.utils.WindowsManager.prototype.closeWindow = function (window) {
    var i = this.activeWindows.indexOf(window);
    if (i >= 0) {
        this.activeWindows.splice(i, 1);
    } else {
        return;
    }
    if (window.parent == this.container) this.container.removeChild(window);
    if (window.__wall && this.bottomContainer) {
        if (window.__wall.parent == this.bottomContainer) {
            this.bottomContainer.removeChild(window.__wall);
        }
        window.__wall.destroy();
        window.__wall = null;
    }
    if (this.bottomContainer != null && this.activeWindows.length == 0) {
        this.bottomContainer.interactive = true;
        this.bottomContainer.interactiveChildren = true;
        this.bottomContainer.filters = [];
        if (this.wall) this.wall.active = false;
    }
    canvas.EventManager.dispatchEvent(canvas.px.WindowEvent.EVENT_CLOSE, this, window);
};
canvas.utils.WindowsManager.prototype.windowIsActive = function (window) {
    return this.activeWindows.indexOf(window) >= 0;
};
canvas.utils.WindowsManager.prototype.closeAllWindows = function () {
    var window;
    var a = [];
    var len = this.activeWindows.length;
    var i;
    for (i = 0; i < len; i++) {
        window = this.activeWindows[i];
        a.push(window);
    }
    len = a.length;
    for (i = 0; i < len; i++) {
        window = a[i];
        this.closeWindow(window);
    }
};
canvas.utils.WindowsManager.prototype.closeHandler = function (e) {
    if (this.windowIsActive(e.target)) {
        this.currentWindow = e.target;
        this.closeWindow(e.target);
    }
};
canvas.utils.WindowsManager.prototype.dragHandler = function (e) {
    this.dragingWindow = e.target;
    if (this.dragingWindow != null && this.windowIsActive(this.dragingWindow)) {
        this.container.setChildIndex(this.dragingWindow, this.container.numChildren - 1);
        this.dragingWindow.startDrag(new canvas.px.Rectangle(0, 0, this.w - this.dragingWindow.width, this.h - this.dragingWindow.height), new canvas.px.Point(e.params.data.global.x + this.dx, e.params.data.global.y + this.dy));
        canvas.EventManager.addEventListener(canvas.Event.STAGE_MOUSE_UP, null, this.upHandler, this);
    }
};
canvas.utils.WindowsManager.prototype.upHandler = function (e) {
    if (this.container != null && this.dragingWindow != null) {
        canvas.EventManager.removeEventListener(canvas.Event.STAGE_MOUSE_UP, null, this.upHandler, this);
        this.dragingWindow.stopDrag();
        this.dragingWindow = null;
    }
};
canvas.utils.ABCAbout = { VERSION: 1, REQUEST_URL_DWAR: "entry_point.php?object=common&action=action&json_mode_on=1" };
canvas.utils.ABCEvent = {};
canvas.utils.ABCPointTypes = {
    END: 0,
    MOVE: 1,
    CLICK: 2,
    LEAVE: 3,
    TAB: 4,
    SPACE: 5,
    KEY: 6,
    MOUSE_DOWN: 7,
    MOUSE_UP: 8,
    toString: function (status) {
        switch (status) {
            case this.START:
                return "start";
            case this.END:
                return "end";
            case this.MOVE:
                return "move";
            case this.CLICK:
                return "click";
            case this.LEAVE:
                return "leave";
            case this.TAB:
                return "tab";
            case this.SPACE:
                return "space";
            case this.KEY:
                return "key";
            case this.MOUSE_DOWN:
                return "down";
            case this.MOUSE_UP:
                return "up";
        }
        return "unknow#" + status;
    },
};
canvas.utils.ABCMouseEventTypes = {
    DOWN: 1,
    UP: 2,
    CLICK: 3,
    DCLICK: 4,
    toString: function (event) {
        switch (event) {
            case this.DOWN:
                return "down";
            case this.UP:
                return "up";
            case this.CLICK:
                return "click";
            case this.DCLICK:
                return "double-click";
        }
        return "none";
    },
};
canvas.utils.ABCKeyboardEventTypes = { DOWN: 1, UP: 2 };
canvas.utils.ABCPointData = function (parent, status, x, y, time) {
    this.x = x;
    this.y = y;
    this.frame = 0;
    this.endType = -1;
    this.parent = parent;
    this.status = status;
    this.time = time;
    this.uxIndex = canvas.utils.ABCPointData.uxIndexCount++;
};
canvas.utils.ABCPointData.prototype.toObject = function () {
    if (this.object) return this.object;
    var object = {};
    object["s"] = this.status;
    object["x"] = Math.round(this.x * 1e3) / 1e3;
    object["y"] = Math.round(this.y * 1e3) / 1e3;
    object["t"] = this.time;
    if (this.endType != -1) {
        object["e"] = this.endType;
    }
    if (this.keyInfo) {
        object["k"] = this.keyInfo.toObject();
    }
    if (this.sendInfo) {
        object["i"] = this.sendInfo;
    }
    this.object = object;
    return object;
};
canvas.utils.ABCPointData.uxIndexCount = 1;
canvas.utils.ABCMouseData = function (event, time, x, y) {
    this.event = event;
    this.time = time;
    this.x = x;
    this.y = y;
};
canvas.utils.ABCMouseData.prototype.toObject = function () {
    if (this.object) return this.object;
    var object = new Object();
    object["e"] = this.event;
    object["t"] = this.time;
    object["x"] = this.x;
    object["y"] = this.y;
    this.object = object;
    return object;
};
canvas.utils.ABCKeyboardData = function (event, code, time) {
    this.event = event;
    this.code = code;
    this.time = time;
};
canvas.utils.ABCKeyboardData.prototype.toObject = function () {
    if (this.object) return this.object;
    var object = new Object();
    object["e"] = this.event;
    object["c"] = this.code;
    object["t"] = this.time;
    this.object = object;
    return object;
};
canvas.utils.ABCKeyInfo = function (keyCode, deltaTime) {
    this.keyCode = keyCode;
    this.deltaTime = deltaTime;
};
canvas.utils.ABCKeyInfo.prototype.toObject = function () {
    var object = {};
    object["c"] = this.keyCode;
    object["t"] = this.deltaTime;
    return object;
};
canvas.utils.ABCParameters = function (parameters) {
    this.userId = parameters["user_id"];
    if (parameters["abc_cfcs"]) {
        this.countForClearSession = parseInt(parameters["abc_cfcs"]);
    } else {
        this.countForClearSession = 20;
    }
    this.keyboardLog = parameters["abc_keyboard"] == "1";
    this.mouseLog = parameters["abc_mouse"] == "1";
    this.maxPointsCount = parameters["abc_max_points"] ? parseInt(parameters["abc_max_points"]) : 0;
};
canvas.utils.ABController = {
    init: function (app, fromType) {
        this.pointTime = 0;
        Object.defineProperty(this, "diffPointTime", {
            get: function () {
                if (this.pointTime != 0) {
                    var diff = Date.now() - this.pointTime;
                    this.pointTime = Date.now();
                    return diff;
                }
                this.pointTime = Date.now();
                return 0;
            },
        });
        this.keyboardTime = 0;
        Object.defineProperty(this, "diffKeyboardTime", {
            get: function () {
                if (this.keyboardTime != 0) {
                    var diff = Date.now() - this.keyboardTime;
                    this.keyboardTime = Date.now();
                    return diff;
                }
                this.keyboardTime = Date.now();
                return 0;
            },
        });
        this.mouseTime = 0;
        Object.defineProperty(this, "diffMouseTime", {
            get: function () {
                if (this.mouseTime != 0) {
                    var diff = Date.now() - this.mouseTime;
                    this.mouseTime = Date.now();
                    return diff;
                }
                this.mouseTime = Date.now();
                return 0;
            },
        });
        this.stage = app.stage;
        this.fromType = fromType;
        this.fromData = null;
        this.alc = null;
        this.tstjs = -1;
        this.tstcl = -1;
        this.app = app;
        this.isStageMove = false;
        this.stageMoveIsListening = false;
        this.clickTime = Date.now();
        this.leaveTime = Date.now();
        this.keyDowns = {};
        this._parameters = new canvas.utils.ABCParameters(app.par);
        this.reset(true);
        var res = is_touch_device();
        this.tstjs = parseInt(res) ? 1 : 0;
        this.stage.tstcl = this.tstclCallback.bind(this);
        this.stage.mousemove = this.moveHandler.bind(this);
        this.stage.click = this.clickHandler.bind(this);
        this.stage.mousedown = this.downHandler.bind(this);
        this.stage.mouseup = this.upHandler.bind(this);
        document.addEventListener("keydown", this.keyDownHandler.bind(this));
        document.addEventListener("keyup", this.keyUpHandler.bind(this));
        document.addEventListener("mouseout", this.leaveHandler.bind(this));
    },
    tstclCallback: function (tst) {
        this.tstcl = tst ? 1 : 0;
    },
    reset: function (isStart) {
        this.focusedObject = null;
        if (isStart || this._points.length > this._parameters.countForClearSession) {
            this.resetIndex = 0;
            this._points = new Array();
            this._keyboardEventsList = new Array();
            this._mouseEventsList = new Array();
            this.pointTime = 0;
            this.keyboardTime = 0;
            this.mouseTime = 0;
        } else {
            this.resetIndex = this._points.length;
        }
    },
    addPoint: function (point) {
        this._points.push(point);
        if (this._parameters.maxPointsCount > 0 && this._points.length > this._parameters.maxPointsCount) {
            this._points.shift();
        }
    },
    addKey: function (key) {
        this._keyboardEventsList.push(key);
    },
    addMouse: function (mouse) {
        this._mouseEventsList.push(mouse);
    },
    getMousePosition: function () {
        return this.app.app.renderer.plugins.interaction.mouse.global;
    },
    moveHandler: function (e) {
        var pos = this.getMousePosition();
        this.addPoint(new canvas.utils.ABCPointData(null, canvas.utils.ABCPointTypes.MOVE, pos.x, pos.y, this.diffPointTime));
        if (this.stageMoveIsListening) {
            this.isStageMove = true;
        }
    },
    clickHandler: function (e) {
        if (this.isStageMove) return;
        if (this._parameters.mouseLog) {
            var pos = this.getMousePosition();
            this.addMouse(new canvas.utils.ABCMouseData(canvas.utils.ABCMouseEventTypes.CLICK, this.diffMouseTime, pos.x, pos.y));
        }
        if (Date.now() - this.clickTime < 500) {
            this.doubleClickHandler();
        }
        this.clickTime = Date.now();
    },
    downHandler: function (e) {
        var pos = this.getMousePosition();
        this.addPoint(new canvas.utils.ABCPointData(null, canvas.utils.ABCPointTypes.MOUSE_DOWN, pos.x, pos.y, this.diffPointTime));
        this.stageMoveIsListening = true;
        this.isStageMove = false;
        if (this._parameters.mouseLog) {
            this.addMouse(new canvas.utils.ABCMouseData(canvas.utils.ABCMouseEventTypes.DOWN, this.diffMouseTime, pos.x, pos.y));
        }
    },
    upHandler: function (e) {
        if (this.isStageMove) return;
        var pos = this.getMousePosition();
        this.addPoint(new canvas.utils.ABCPointData(null, canvas.utils.ABCPointTypes.MOUSE_UP, pos.x, pos.y, this.diffPointTime));
        if (this._parameters.mouseLog) {
            this.addMouse(new canvas.utils.ABCMouseData(canvas.utils.ABCMouseEventTypes.UP, this.diffMouseTime, pos.x, pos.y));
        }
    },
    doubleClickHandler: function () {
        if (this._parameters.mouseLog) {
            var pos = this.getMousePosition();
            this.addMouse(new canvas.utils.ABCMouseData(canvas.utils.ABCMouseEventTypes.DCLICK, this.diffMouseTime, pos.x, pos.y));
        }
    },
    leaveHandler: function (e) {
        if (Date.now() - this.leaveTime < 500) return;
        var point = this._points[this._points.length - 1];
        if (point) {
            this.addPoint(new canvas.utils.ABCPointData(null, canvas.utils.ABCPointTypes.LEAVE, point.x, point.y, this.diffPointTime));
        }
        this.leaveTime = Date.now();
    },
    keyDownHandler: function (e) {
        this.keyDowns[e.code] = Date.now();
        if (this._parameters.keyboardLog) {
            this.addKey(new canvas.utils.ABCKeyboardData(canvas.utils.ABCKeyboardEventTypes.DOWN, e.code, this.diffKeyboardTime));
        }
    },
    keyUpHandler: function (e) {
        var downTime = this.keyDowns[e.code];
        var deltaTime = Date.now() - downTime;
        var keyInfo = new canvas.utils.ABCKeyInfo(e.code, deltaTime);
        var point = new canvas.utils.ABCPointData(null, canvas.utils.ABCPointTypes.KEY, 0, 0, this.diffPointTime);
        point.keyInfo = keyInfo;
        this.addPoint(point);
        if (this._parameters.keyboardLog) {
            this.addKey(new canvas.utils.ABCKeyboardData(canvas.utils.ABCKeyboardEventTypes.UP, e.code, this.diffKeyboardTime));
        }
    },
    toString: function (additionalInfo) {
        var pos = this.getMousePosition();
        var endPoint = new canvas.utils.ABCPointData(null, canvas.utils.ABCPointTypes.END, pos.x, pos.y, this.diffPointTime);
        endPoint.endType = additionalInfo && additionalInfo["et"] ? additionalInfo["et"] : -1;
        this._points.push(endPoint);
        var i;
        var sendPoints = [];
        var prev;
        var sum = 0;
        var len;
        var lenMin;
        var lenMax;
        var dx;
        var dy;
        var point;
        for (i = 0; i < this._points.length; i++) {
            point = this._points[i];
            sendPoints.push(point.toObject());
            if (i > this.resetIndex) {
                dx = prev.x - point.x;
                dy = prev.y - point.y;
                len = Math.sqrt(dx * dx + dy * dy);
                lenMin = lenMin != undefined ? Math.min(lenMin, len) : len;
                lenMax = lenMax != undefined ? Math.max(lenMax, len) : len;
                sum += len;
            }
            prev = point;
        }
        var sendKeyboards = [];
        var keyboard;
        for (i = 0; i < this._keyboardEventsList.length; i++) {
            keyboard = this._keyboardEventsList[i];
            sendKeyboards.push(keyboard.toObject());
        }
        var sendMouse = [];
        var mouse;
        for (i = 0; i < this._mouseEventsList.length; i++) {
            mouse = this._mouseEventsList[i];
            sendMouse.push(mouse.toObject());
        }
        var lengthInfo = {};
        lengthInfo["sum"] = sum;
        lengthInfo["count"] = sendPoints.length - 1 - this.resetIndex;
        lengthInfo["min"] = lenMin;
        lengthInfo["max"] = lenMax;
        var info = {};
        info["from"] = this.fromType;
        info["fromData"] = this.fromData;
        info["length"] = lengthInfo;
        info["width"] = this.app.width;
        info["height"] = this.app.height;
        if (window.get_client_width) info["ex_width"] = get_client_width();
        if (window.get_client_height) info["ex_height"] = get_client_height();
        info["ai"] = additionalInfo;
        info["cap"] = navigator.userAgent;
        info["tst"] = {};
        info["tst"]["js"] = this.tstjs;
        info["tst"]["cl"] = this.tstcl;
        info["st"] = this.resetIndex;
        info["id"] = this._parameters.userId;
        info["fps"] = 30;
        info["v"] = canvas.utils.ABCAbout.VERSION;
        var data = {};
        data["points"] = sendPoints;
        data["kb"] = sendKeyboards;
        data["ms"] = sendMouse;
        data["info"] = info;
        var string = JSON.stringify(data);
        string = btoa(string);
        this.reset(false);
        return string;
    },
    sendRequest: function (url, additionalInfo) {
        var par = {};
        par["m"] = this.toString(additionalInfo);
        var req = new canvas.utils.URLRequest(url, "POST", par);
        req.load();
        return req;
    },
};
canvas.utils.RGB = function (color) {
    if (color == undefined) color = 0;
    this.color = color;
    this.a = (color >>> 24) & 255;
    this.r = (color >>> 16) & 255;
    this.g = (color >>> 8) & 255;
    this.b = color & 255;
};
canvas.utils.RGB.prototype.toHex = function () {
    return (this.a << 24) | (this.r << 16) | (this.g << 8) | this.b;
};
canvas.utils.TimeLog = {
    start: Date.now(),
    last: Date.now(),
    log: function (comment) {
        if (comment == undefined) comment = "";
        console.log("TimeLog (" + comment + "): " + (Date.now() - this.last) + "/" + (Date.now() - this.start) + " ms.");
        this.last = Date.now();
    },
};
canvas.utils.ServerRandomizer = function () {
    this.LCG_A = 0;
    this.LCG_C = 0;
    this.LCG_M = 0;
};
canvas.utils.ServerRandomizer.prototype.init = function (seed, a, c, m) {
    this.seed = seed;
    this.LCG_A = a;
    this.LCG_C = c;
    this.LCG_M = m;
};
canvas.utils.ServerRandomizer.prototype.lcg = function (x, a, c, m) {
    return (a * x + c) % m;
};
canvas.utils.ServerRandomizer.prototype.lcgRand = function (min, max) {
    this.seed = this.lcg(this.seed, this.LCG_A, this.LCG_C, this.LCG_M);
    return Math.round((Math.abs(this.seed) / this.LCG_M) * (max - min) + min);
};
canvas.utils.ServerRandomizer.prototype.lcgShuffle = function (arr) {
    var result = new Array(),
        len;
    while ((len = arr.length) > 0) {
        result.push(arr.splice(this.lcgRand(0, len - 1), 1)[0]);
    }
    return result;
};
var WSProxy = function (options) {
    this.options = options || {};
    this.options.onConnect =
        this.options.onConnect ||
        function () {
            console.warn("onConnect event", arguments);
        };
    this.options.onMessage =
        this.options.onMessage ||
        function () {
            console.warn("onMessage event", arguments);
        };
    this.onOpenWs = this.onOpenWs.bind(this);
    this.onMessageWs = this.onMessageWs.bind(this);
    this.curPackSize = 0;
    this.curPack = "";
};
WSProxy.prototype.log = function () {
    if (this.options.logEnabled) {
        console.log.apply(console, arguments);
    }
};
WSProxy.prototype._connect = function () {
    var ws = (this.ws = new WebSocket("ws://" + this.connectOptions.ws.host));
    ws.onopen = this.onOpenWs;
    ws.onmessage = this.onMessageWs;
    var self = this;
    ws.onclose = function (event) {
        console.warn("WSProxy:onclose", event);
        self.reconnect();
    };
    ws.onerror = function (event) {
        console.error("WSProxy:onerror", event);
        self.reconnect();
    };
};
WSProxy.prototype._parseMessage = function (message) {
    if (this.storedMessage) {
        message = this.storedMessage + message;
        this.storedMessage = "";
    }
    var a = message.split("\0");
    var i,
        len = a.length;
    for (i = 0; i < len; i++) {
        if (a[i]) {
            if (a[i + 1] == undefined) {
                this.storedMessage = a[i];
            } else {
                this.options.onMessage(a[i]);
            }
        }
    }
};
WSProxy.prototype.onOpenWs = function () {
    this.log("WSProxy:onOpenWs");
    this.ws.send(JSON.stringify({ event: "connect", host: this.connectOptions.fs.host, port: this.connectOptions.fs.port }));
};
WSProxy.prototype.onMessageWs = function (event) {
    var message;
    try {
        message = JSON.parse(event.data);
    } catch (e) {
        console.error("parse json data", event.data, e);
        message = {};
    }
    switch (message.event) {
        case "connected":
            this.connected = true;
            this._tryCount = 0;
            this.sourcePool = "";
            this.options.onConnect();
            break;
        case "message":
            this._parseMessage(message.data);
            break;
    }
};
WSProxy.prototype.connect = function (options) {
    this.log("WSProxy:connect", options);
    this.connectOptions = options;
    if (this.ws) {
        console.error("Connection already exists. Call destroy method");
        return;
    }
    this._connect();
};
WSProxy.prototype.reconnect = function () {
    if (!this._tryCount) this._tryCount = 0;
    this._tryCount++;
    this.log("WSProxy:reconnectWs", this._tryCount);
    this.destroy();
    var self = this;
    this._reconnectTimeout = setTimeout(function () {
        self._connect();
    }, Math.pow(2, this._tryCount) * 1e3);
};
WSProxy.prototype.destroy = function () {
    this.log("WSProxy:destroy");
    this.connected = false;
    if (this.ws) {
        this.ws.onopen = null;
        this.ws.onmessage = null;
        this.ws.onclose = null;
        this.ws.onerror = null;
        this.ws.close();
        this.ws = null;
    }
    clearTimeout(this._reconnectTimeout);
};
WSProxy.prototype.send = function (data) {
    if (!this.connected) {
        console.error("WSProxy is not connected");
        return;
    }
    this.ws.send(JSON.stringify({ event: "message", data: data }));
};
canvas.animation.Bot = function (url, preloaderPos, preloaderContainer) {
    if (preloaderPos) {
        this.preloader = new canvas.px.MovieClip(canvas.Config.effectsPath + "hourglass");
        this.preloader.frameEvent = canvas.app.battle.Event.ENTER_FRAME;
        this.preloader.loop = true;
        this.preloader.position.set(preloaderPos.x, preloaderPos.y);
        if (preloaderContainer) {
            preloaderContainer.addChild(this.preloader);
        } else {
        }
    }
    this.kick_array_all = {
        kick_up: { a_up_1: { die: ["die_1"], dodge: ["dodge_1"], wound: ["wound_1"], crit: ["wound_1"], block: ["b_up_1"] }, a_up_2: { die: ["die_1"], dodge: ["dodge_1"], wound: ["wound_1"], crit: ["wound_1"], block: ["b_up_1"] } },
        kick_mid: {
            a_mid_1: { die: ["die_2"], dodge: ["dodge_1"], wound: ["wound_2"], crit: ["wound_2"], block: ["b_up_1", "b_mid_1"] },
            a_mid_2: { die: ["die_2"], dodge: ["dodge_1"], wound: ["wound_2"], crit: ["wound_2"], block: ["b_up_1", "b_mid_1"] },
        },
        kick_bot: { a_bot_1: { die: ["die_2"], dodge: ["dodge_1"], wound: ["wound_2"], crit: ["wound_2"], block: ["b_up_1"] }, a_bot_2: { die: ["die_2"], dodge: ["dodge_1"], wound: ["wound_2"], crit: ["wound_2"], block: ["b_mid_1"] } },
        combo: {
            combo_1: { die: ["die_1"], wound: ["wound_1"], crit: ["wound_1"] },
            combo_2: { die: ["die_1"], wound: ["wound_1"], crit: ["wound_1"] },
            combo_3: { die: ["die_1"], wound: ["wound_1"], crit: ["wound_1"] },
            combo_4: { die: ["die_1"], wound: ["wound_1"], crit: ["wound_1"] },
            combo_5: { die: ["die_1"], wound: ["wound_1"], crit: ["wound_1"] },
        },
    };
    this.action_array_all = { kick_up: ["a_up_1"], kick_mid: ["a_mid_1"], kick_bot: ["a_bot_1"], combo: ["combo_1", "combo_2", "combo_3", "combo_4", "combo_5"] };
    this.ActionConf = { a_up_1: 11, a_mid_1: 11, a_bot_1: 14, combo_1: 9, combo_2: 6, combo_3: 8, combo_4: 20 };
    this.ReactionConf = { b_up_1: 6, b_mid_1: 6, dodge_1: 8, wound_1: 2, wound_2: 2, die_1: 2, die_2: 2 };
    this.ActionSound = {
        a_up_1: { std: true },
        a_mid_1: { std: true },
        a_bot_1: { std: true },
        combo_1: { std: true },
        combo_2: { std: true },
        combo_3: { std: true },
        combo_4: { std: true },
        b_up_1: { std: true },
        b_mid_1: { std: true },
        dodge_1: { std: true },
        wound_1: { std: true },
        wound_2: { std: true },
        die_1: { std: true },
        die_2: { std: true },
    };
    canvas.px.MovieClip.call(this, url);
};
canvas.animation.Bot.prototype = Object.create(canvas.px.MovieClip.prototype);
canvas.animation.Bot.prototype._init = function () {
    canvas.px.MovieClip.prototype._init.call(this);
    if (!this.data) return;
    this.kick_array_all = this.data.properties.kick_array_all;
    this.action_array_all = this.data.properties.action_array_all;
    this.ActionConf = this.data.properties.ActionConf;
    this.ReactionConf = this.data.properties.ReactionConf;
    this.ActionSound = this.data.properties.ActionSound;
};
canvas.animation.Bot.prototype._ready = function () {
    canvas.px.MovieClip.prototype._ready.call(this);
    if (this.preloader) {
        this.preloader.destroy();
    }
};
canvas.animation.Bot.prototype.render = function () {
    canvas.px.MovieClip.prototype.render.call(this);
};
canvas.animation.Bot.prototype.getChildByName = function (name) {
    var len = this.container.children.length;
    for (var i = 0; i < len; i++) {
        if (this.container.children[i].shortName == name) {
            return this.container.children[i];
        }
    }
    return null;
};
canvas.animation.Bot.prototype.updateFrameEvent = function () {
    canvas.px.MovieClip.prototype.updateFrameEvent.call(this);
    if (this.preloader) {
        this.preloader.frameEvent = this.frameEvent;
    }
};
canvas.animation.Skeleton = function (url, preloaderPos, preloaderContainer) {
    this._skeletonData = null;
    Object.defineProperty(this, "skeletonData", {
        get: function () {
            return this._skeletonData;
        },
        set: function (value) {
            this._skeletonData = value;
            if (value) {
                for (var slotName in value.slots) {
                    var a = value.slots[slotName];
                    if (slotName == "BANNER") continue;
                    for (var i = 0; i < a.length; i++) {
                        var layerData = a[i];
                        if (layerData.url) {
                            canvas.ResourceLoader.add([layerData.url]);
                        }
                    }
                }
            }
        },
    });
    canvas.animation.Bot.call(this, url, preloaderPos, preloaderContainer);
    this.animations = {};
    this.renderSlots = null;
};
canvas.animation.Skeleton.prototype = Object.create(canvas.animation.Bot.prototype);
canvas.animation.Skeleton.prototype.render = function () {
    canvas.animation.Bot.prototype.render.call(this);
    if (this.skeletonData != null) {
        var leftPart,
            rightPart,
            a,
            child,
            leaf,
            prefix,
            fullName,
            name,
            len = this.container.children.length;
        for (var i = 0; i < len; i++) {
            child = this.container.children[i];
            fullName = child.name;
            leftPart = fullName.substr(0, 4);
            rightPart = fullName.substr(5);
            if (!child.shortName || !child.prefix) {
                a = fullName.split("_");
                child.prefix = a[1];
                name = child.shortName = a[0];
            } else {
                name = child.shortName;
            }
            if (this.skeletonData.slots[name] && (!this.renderSlots || this.renderSlots.indexOf(name) >= 0)) {
                for (var j = 0; j < this.skeletonData.slots[name].length; j++) {
                    leaf = child.children[j];
                    if (leaf) {
                        leaf.texture = canvas.px.TextureEmpty;
                        leaf.filters = null;
                    }
                    var layerData = this.skeletonData.slots[name][j];
                    if (layerData.url) {
                        var atlas = canvas.ResourceLoader.get(layerData.url);
                        if (atlas && atlas.textures) {
                            var textureName = fullName;
                            if (leftPart == "FOOT" || leftPart == "HAND") {
                                textureName = leftPart + rightPart;
                            }
                            var texture = atlas.textures[textureName + ".png"];
                            if (!leaf) {
                                leaf = child.addChild(new canvas.px.Sprite(texture ? texture : canvas.px.TextureEmpty));
                            } else {
                                if (texture) {
                                    leaf.texture = texture;
                                }
                            }
                            if (layerData.colors[1] && leaf) {
                                leaf.filters = [canvas.Functions.getGlow(10, 2, 0, parseInt(layerData.colors[1], 16), 0.1)];
                            }
                            if (layerData.animation && leaf) {
                                if (!this.animations[layerData.animation]) {
                                    var animation = new canvas.px.MovieClip(canvas.Config.packsAnimsPath + layerData.animation + "/" + layerData.animation);
                                    animation.frameEvent = this.frameEvent;
                                    animation.loop = true;
                                    animation.name = layerData.animation;
                                    this.animations[layerData.animation] = animation;
                                }
                                this.destroyAnimations(leaf, layerData.animation);
                                animation = leaf.addChild(this.animations[layerData.animation]);
                                if (!animation.customFlag && animation.ready && animation.totalFrames == 1) {
                                    var index = 1;
                                    while (true) {
                                        if (animation.mcChildsCache["mc" + index]) {
                                            animation.customFlag = true;
                                            animation.mcChildsCache["mc" + index].loop = true;
                                            animation.mcChildsCache["mc" + index].play();
                                            if (!animation.mcChildsCache["mc" + index].frameEvent) {
                                                animation.mcChildsCache["mc" + index].frameEvent = this.frameEvent;
                                            }
                                            index++;
                                        } else {
                                            break;
                                        }
                                    }
                                }
                            } else {
                                this.destroyAnimations(leaf);
                            }
                        }
                    }
                }
            }
        }
    }
};
canvas.animation.Skeleton.prototype.destroyAnimations = function (container, beside) {
    if (container && container.numChildren > 0) {
        while (container.children.length > 0) {
            var child = container.removeChildAt(0);
            if (beside && child.name == beside) continue;
            if (this.animations[child.name]) {
                this.animations[child.name] = null;
            }
            child.destroy({ children: true });
        }
    }
};
canvas.animation.SkeletonInfo = function (url, preloaderPos, preloaderContainer, mount) {
    this.mount = 0;
    if (mount != undefined && mount) {
        this.mount = parseInt(mount);
        if (this.mount > 0) {
            var strBot = "mount_" + canvas.Functions.setNumberLen(this.mount, 2) + "_bot";
            var strTop = "mount_" + canvas.Functions.setNumberLen(this.mount, 2) + "_top";
            this.mountBottom = new canvas.px.MovieClip(canvas.Config.mountsPath + strBot + "/" + strBot, null, true);
            this.mountTop = new canvas.px.MovieClip(canvas.Config.mountsPath + strTop + "/" + strTop, null, true);
            this.mountTop.loop = true;
            this.mountBottom.loop = true;
        }
    }
    canvas.animation.Skeleton.call(this, url, preloaderPos, preloaderContainer);
    if (this.mount > 0) {
        this.mountTop.position.set(-65, -85);
        this.mountBottom.position.set(-65, -85);
        this.container.position.set(-65, -85);
        this.addChildAt(this.mountBottom, 0);
        this.addChild(this.mountTop);
    }
};
canvas.animation.SkeletonInfo.prototype = Object.create(canvas.animation.Skeleton.prototype);
canvas.animation.SkeletonInfo.prototype.render = function () {
    canvas.animation.Skeleton.prototype.render.call(this);
    if (this.mount > 0) {
        if (this.mountBottom.stopped) {
        }
        if (this.mountTop.stopped) {
        }
        var ratio = this.currentFrame / this.totalFrames;
        if (this.mountTop.mcChildsCache["mc1"]) {
            this.mountTop.mcChildsCache["mc1"].gotoAndStop(Math.round(this.mountTop.mcChildsCache["mc1"].totalFrames * ratio));
        }
        if (this.mountBottom.mcChildsCache["mc1"]) {
            this.mountBottom.mcChildsCache["mc1"].gotoAndStop(Math.round(this.mountBottom.mcChildsCache["mc1"].totalFrames * ratio));
        }
    }
};
canvas.animation.SkeletonInfo.prototype.updateFrameEvent = function () {
    canvas.animation.Skeleton.prototype.updateFrameEvent.call(this);
    if (this.mountTop) {
        this.mountTop.frameEvent = this.frameEvent;
    }
    if (this.mountBottom) {
        this.mountBottom.frameEvent = this.frameEvent;
    }
};
canvas.animation.SkeletonAvatar = function (gender, parts) {
    this.gender = gender == undefined ? "M" : gender;
    canvas.animation.SkeletonInfo.call(this, canvas.Config.skPath + this.gender + "/sk01_UI");
    this.loop = true;
    this.container.x = this.gender == "M" ? 0 : -5;
    this.renderSlots = canvas.Const.AVATAR_SLOT_NAMES;
    if (parts != undefined) {
        this.skeletonData = new canvas.data.battle.SkeletonData(parts, this.gender);
    }
};
canvas.animation.SkeletonAvatar.prototype = Object.create(canvas.animation.SkeletonInfo.prototype);
canvas.animation.Pet = function (params, frameEvent) {
    canvas.px.Container.call(this);
    this.frameEvent = frameEvent;
    this.main = this.addChild(new canvas.px.Container());
    this.back = new canvas.ui.Image("images/pets_back.gif");
    this.back.visible = false;
    this.back.x = 2;
    this.main.addChild(this.back);
    var msk = new canvas.px.Graphics();
    msk.beginFill(16777215, 1);
    msk.drawCircle(94, 88, 80);
    msk.endFill();
    this.addChild(msk);
    this.main.mask = msk;
    this.petSrc = "";
    this.waiting = false;
    if (params) this.update(params);
    canvas.EventManager.addEventListener(this.frameEvent, null, this.frameHandler, this);
};
canvas.animation.Pet.prototype = Object.create(canvas.px.Container.prototype);
canvas.animation.Pet.prototype.update = function (params) {
    if (!this.main) return;
    if (params == undefined || !params.src) {
        if (this.pet) {
            this.pet.destroy();
        }
        this.petSrc = "";
        return;
    }
    params.src = canvas.Functions.extractSwfName(params.src);
    if (this.petSrc != params.src) {
        this.petSrc = params.src;
        if (this.pet) {
            this.pet.destroy();
        }
        this.pet = new canvas.animation.Bot(canvas.Config.petsPath + this.petSrc + "/" + this.petSrc);
        this.main.addChild(this.pet);
        this.pet.frameEvent = this.frameEvent;
        this.waiting = true;
    }
};
canvas.animation.Pet.prototype.frameHandler = function () {
    if (this.waiting && this.pet.ready) {
        var bounds = this.pet.getLocalBounds();
        var isAir;
        if (parseInt(this.pet.data.properties.type) == 0) {
            isAir = bounds.y < 100;
        } else {
            isAir = parseInt(this.pet.data.properties.type) == 2;
        }
        if (isAir) {
            this.back.y = 0;
            this.pet.position.set(30, -10);
        } else {
            this.back.y = -100;
            this.pet.position.set(-60, -205);
        }
        if (this.pet.data.properties.xCorrection) {
            this.pet.x += parseInt(this.pet.data.properties.xCorrection);
        }
        if (this.pet.data.properties.yCorrection) {
            this.pet.y += parseInt(this.pet.data.properties.yCorrection);
        }
        if (this.pet.data.properties.xAdd) {
            this.pet.x += parseInt(this.pet.data.properties.xAdd);
        }
        if (this.pet.data.properties.yAdd) {
            this.pet.y += parseInt(this.pet.data.properties.yAdd);
        }
        this.back.visible = true;
        this.waiting = false;
    }
};
canvas.ui.Event = { EVENT_CHANGE: "canvas.ui.Event.CHANGE" };
canvas.ui.Component = function () {
    this._enabled = true;
    this.interactive = true;
    canvas.px.Container.call(this);
};
canvas.ui.Component.prototype = Object.create(canvas.px.Container.prototype);
canvas.ui.Component.prototype.setSize = function (width, height) {
    if (width > 0) this._width = width;
    if (height > 0) this._height = height;
    this.update();
};
canvas.ui.Component.prototype.update = function () {};
canvas.ui.Component.prototype.destroy = function () {
    canvas.px.Container.prototype.destroy.apply(this, [{ children: true }]);
};
canvas.ui.ButtonEvent = { EVENT_CLICK: "ButtonEvent.CLICK", EVENT_SELECT: "ButtonEvent.SELECT", EVENT_DOWN: "ButtonEvent.DOWN", EVENT_OVER: "ButtonEvent.OVER", EVENT_OUT: "ButtonEvent.OUT" };
canvas.ui.Button = function (baseTexture, overTexture, downTexture, disabledTexture, sliceArray, checkSprite, radioArray) {
    canvas.ui.Component.call(this);
    Object.defineProperty(this, "enabled", {
        get: function () {
            return this._enabled;
        },
        set: function (value) {
            this._enabled = value;
            if (this.disabledTexture) {
                this.sprite.texture = value ? this.baseTexture : this.disabledTexture;
            } else {
                if (value) {
                    this.filters = null;
                } else {
                    this.filters = [canvas.Functions.getBlackAndWhite()];
                }
            }
            this.buttonMode = this.sprite.interactive = value;
            this.update();
        },
        configurable: true,
    });
    Object.defineProperty(this, "checked", {
        get: function () {
            return this._checked;
        },
        set: function (value) {
            this._checked = value;
            if (this.checkSprite) {
                if (this._checked) {
                    if (this.checkSprite.parent != this) this.addChild(this.checkSprite);
                } else {
                    if (this.checkSprite.parent == this) this.removeChild(this.checkSprite);
                }
            }
        },
    });
    canvas.ui.Component.call(this);
    this.baseTexture = baseTexture;
    this.overTexture = overTexture;
    this.downTexture = downTexture;
    this.disabledTexture = disabledTexture;
    this.checkSprite = checkSprite;
    this.radioArray = radioArray;
    if (sliceArray) {
        this.sprite = new canvas.px.SlicedSprite(baseTexture, sliceArray[0], sliceArray[1], sliceArray[2], sliceArray[3]);
    } else {
        this.sprite = new canvas.px.Sprite(this.baseTexture);
    }
    this.sprite.interactive = true;
    this.buttonMode = true;
    this.addChild(this.sprite);
    this.sprite.mouseover = this.handlerOver.bind(this);
    this.sprite.mouseout = this.handlerOut.bind(this);
    this.sprite.mousedown = this.handlerDown.bind(this);
    this.sprite.click = this.handlerUp.bind(this);
};
canvas.ui.Button.prototype = Object.create(canvas.ui.Component.prototype);
canvas.ui.Button.prototype.setSize = function (width, height) {
    canvas.ui.Component.prototype.setSize.apply(this, [width, height]);
    if (width > 0) this.sprite.width = width;
    if (height > 0) this.sprite.height = height;
};
canvas.ui.Button.prototype.handlerOver = function (mouseData) {
    if (this.overTexture) this.sprite.texture = this.overTexture;
    canvas.EventManager.dispatchEvent(canvas.ui.ButtonEvent.EVENT_OVER, this, mouseData);
};
canvas.ui.Button.prototype.handlerOut = function (mouseData) {
    if (this.baseTexture) this.sprite.texture = this.baseTexture;
    canvas.EventManager.dispatchEvent(canvas.ui.ButtonEvent.EVENT_OUT, this, mouseData);
};
canvas.ui.Button.prototype.handlerDown = function (mouseData) {
    if (this.downTexture) this.sprite.texture = this.downTexture;
    canvas.EventManager.dispatchEvent(canvas.ui.ButtonEvent.EVENT_DOWN, this, mouseData);
};
canvas.ui.Button.prototype.handlerUp = function (mouseData) {
    if (!canvas.Config.isMobile && this.overTexture) {
        this.sprite.texture = this.overTexture;
    } else {
        this.sprite.texture = this.baseTexture;
    }
    if (this.checkSprite) {
        if (this.radioArray) {
            this.select();
        } else {
            this.checked = !this.checked;
        }
    }
    canvas.EventManager.dispatchEvent(canvas.ui.ButtonEvent.EVENT_CLICK, this, mouseData);
};
canvas.ui.Button.prototype.select = function () {
    if (this.radioArray) {
        var len = this.radioArray.length;
        for (var i = 0; i < len; i++) {
            this.radioArray[i].checked = this.radioArray[i] == this;
        }
        canvas.EventManager.dispatchEvent(canvas.ui.ButtonEvent.EVENT_SELECT, this);
    }
};
canvas.ui.SimpleButton = function (texture, sliceArray, checkSprite, radioArray) {
    canvas.ui.Button.call(this, texture, null, null, null, sliceArray, checkSprite, radioArray);
    Object.defineProperty(this, "enabled", {
        get: function () {
            return this._enabled;
        },
        set: function (value) {
            this._enabled = value;
            this.buttonMode = this.sprite.interactive = value;
            if (value) {
                this.filters = null;
            } else {
                this.filters = [canvas.Functions.getBlackAndWhite()];
            }
        },
        configurable: true,
    });
};
canvas.ui.SimpleButton.prototype = Object.create(canvas.ui.Button.prototype);
canvas.ui.SimpleButton.prototype.handlerOver = function (mouseData) {
    this.filters = [canvas.Functions.getBrightness(1.2)];
    canvas.ui.Button.prototype.handlerOver.apply(this, mouseData);
};
canvas.ui.SimpleButton.prototype.handlerOut = function (mouseData) {
    this.filters = null;
    canvas.ui.Button.prototype.handlerOut.apply(this, mouseData);
};
canvas.ui.SimpleButton.prototype.handlerDown = function (mouseData) {
    this.filters = [canvas.Functions.getSaturation(-0.2)];
    canvas.ui.Button.prototype.handlerDown.apply(this, mouseData);
};
canvas.ui.SimpleButton.prototype.handlerUp = function (mouseData) {
    if (canvas.Config.isMobile) {
        this.filters = null;
    } else {
        this.filters = [canvas.Functions.getBrightness(1.2)];
    }
    canvas.ui.Button.prototype.handlerUp.apply(this, mouseData);
};
canvas.ui.Text = function (font, color, width, height, hAlign, vAlign, backColor, backAlpha, masking) {
    this._color = 0;
    Object.defineProperty(this, "color", {
        get: function () {
            return this._color;
        },
        set: function (value) {
            this._color = value;
            this.field.tint = this._color;
        },
    });
    this._font = "";
    Object.defineProperty(this, "font", {
        get: function () {
            return this._font;
        },
        set: function (value) {
            if (this._font === value) return;
            this._font = value;
            this.field.font = this._font;
        },
    });
    this._hAlign = "left";
    Object.defineProperty(this, "hAlign", {
        get: function () {
            return this._hAlign;
        },
        set: function (value) {
            this._hAlign = value;
            this.field.align = this._hAlign;
            this.update();
        },
    });
    this._vAlign = "top";
    Object.defineProperty(this, "vAlign", {
        get: function () {
            return this._vAlign;
        },
        set: function (value) {
            this._vAlign = value;
            this.update();
        },
    });
    this._text = "";
    Object.defineProperty(this, "text", {
        get: function () {
            return this._text;
        },
        set: function (value) {
            this._text = value;
            this.field.text = this._text;
            this.update();
        },
    });
    this._border = false;
    Object.defineProperty(this, "border", {
        get: function () {
            return this._border;
        },
        set: function (value) {
            this._border = value;
            if (this._border && !this.borderImage) {
                this.borderImage = new canvas.px.Graphics();
                this.addChild(this.borderImage);
            }
            this.update();
        },
    });
    this._backColor = 0;
    Object.defineProperty(this, "backColor", {
        get: function () {
            return this._backColor;
        },
        set: function (value) {
            this._backColor = value;
            if (!this.back) {
                this.createBack();
            }
            this.update();
        },
    });
    this._backAlpha = 0;
    Object.defineProperty(this, "backAlpha", {
        get: function () {
            return this._backAlpha;
        },
        set: function (value) {
            this._backAlpha = value;
            if (!this.back) {
                this.createBack();
            }
            this.update();
        },
    });
    Object.defineProperty(this, "textWidth", {
        get: function () {
            return Math.round(this.field.textWidth);
        },
        set: function (value) {},
    });
    Object.defineProperty(this, "textHeight", {
        get: function () {
            return Math.round(this.field.textHeight);
        },
        set: function (value) {},
    });
    canvas.ui.Component.call(this);
    this._font = font;
    if (color != undefined) this._color = color;
    if (width != undefined) this._width = width;
    else this._width = 100;
    if (height != undefined) this._height = height;
    else this._height = 100;
    if (vAlign != undefined) this._vAlign = vAlign;
    if (hAlign != undefined) this._hAlign = hAlign;
    if (backColor != undefined) {
        this.createBack();
        this._backColor = backColor;
    }
    if (backAlpha) this._backAlpha = backAlpha;
    if (masking != undefined && masking) {
        this.createMask();
    }
    this.field = new canvas.px.BitmapText("", { font: font, align: this._hAlign });
    if (color >= 0) this.field.tint = color;
    this.addChild(this.field);
    this.interactive = false;
};
canvas.ui.Text.prototype = Object.create(canvas.ui.Component.prototype);
canvas.ui.Text.prototype.update = function () {
    this.field.maxWidth = this._width;
    var textHeight = this.field.textHeight;
    if (this._height < textHeight) textHeight = this._height;
    switch (this.hAlign) {
        case "left":
            this.field.x = 0;
            break;
        case "center":
            this.field.x = Math.round((this._width - this.field.textWidth) * 0.5);
            break;
        case "right":
            this.field.x = Math.round(this._width - this.field.textWidth);
            break;
    }
    switch (this.vAlign) {
        case "top":
            this.field.y = 0;
            break;
        case "middle":
            this.field.y = Math.round((this._height - textHeight) * 0.5);
            break;
        case "bottom":
            this.field.y = Math.round(this._height - textHeight);
            break;
    }
    if (this.border) {
        this.borderImage.clear();
        this.borderImage.beginFill(0, 0);
        this.borderImage.lineStyle(2, 16711680, 1);
        this.borderImage.drawRect(0, 0, this._width, this._height);
        this.borderImage.endFill();
    }
    if (this.back) {
        this.back.clear();
        this.back.beginFill(this.backColor, this.backAlpha);
        this.back.drawRect(0, 0, this._width, this._height);
        this.back.endFill();
    }
    if (this.msk) {
        this.msk.clear();
        this.msk.beginFill(0, 1);
        this.msk.drawRect(0, 0, this._width, this._height);
        this.msk.endFill();
    }
};
canvas.ui.Text.prototype.createBack = function () {
    this.back = new canvas.px.Graphics();
    this.addChildAt(this.back, 0);
};
canvas.ui.Text.prototype.createMask = function () {
    this.msk = new canvas.px.Graphics();
    this.addChildAt(this.msk, 0);
    this.mask = this.msk;
};
canvas.ui.Text.prototype.clone = function () {
    return new canvas.ui.Text(this._font, this._color, this._width, this._height, this._hAlign, this._vAlign, this._backColor, this._backAlpha);
};
canvas.ui.ProgressEvent = { EVENT_PROGRESS: "ProgressEvent.EVENT_PROGRESS" };
canvas.ui.ProgressType = { HORIZONTAL: "h", VERTICAL: "v" };
canvas.ui.Progress = function (texture, sliceArray, type) {
    this._selectable = false;
    Object.defineProperty(this, "selectable", {
        get: function () {
            return this._selectable;
        },
        set: function (value) {
            this._selectable = value;
            if (value) {
                if (!this.back) {
                    this.back = new canvas.px.Graphics();
                    this.addChildAt(this.back);
                    this.back.interactive = true;
                    this.back.mousedown = this.handlerBackDown.bind(this);
                }
                this.back.interactive = true;
            } else {
                if (this.back) this.back.interactive = false;
            }
            this.update();
        },
    });
    this._progress = 1;
    Object.defineProperty(this, "progress", {
        get: function () {
            return this._progress;
        },
        set: function (value) {
            this._progress = value > 1 ? 1 : value < 0 ? 0 : value;
            this.update();
        },
    });
    canvas.ui.Component.call(this);
    if (type == undefined) type = canvas.ui.ProgressType.HORIZONTAL;
    this.type = type;
    if (texture) {
        if (sliceArray) {
            this.backImage = this.addChild(new canvas.px.SlicedSprite(texture, sliceArray[0], sliceArray[1], sliceArray[2], sliceArray[3]));
        } else {
            this.backImage = this.addChild(new canvas.px.Sprite(texture));
        }
        this.sprite = new canvas.px.Mask(this.backImage.width, this.backImage.height);
        this.addChild(this.sprite);
        this.backImage.mask = this.sprite;
        this.setSize(this.backImage.width, this.backImage.height);
    } else {
        this.sprite = new canvas.px.Graphics();
        this.sprite.beginFill(0, 1);
        this.sprite.lineStyle(0, 0, 0);
        this.sprite.drawRect(0, 0, 1, 1);
        this.sprite.endFill();
    }
    this.addChild(this.sprite);
};
canvas.ui.Progress.prototype = Object.create(canvas.ui.Component.prototype);
canvas.ui.Progress.prototype.update = function () {
    if (this.back) {
        this.back.clear();
        this.back.beginFill(0, 0);
        this.back.lineStyle(0, 0, 0);
        this.back.drawRect(0, 0, this._width, this._height);
        this.back.endFill();
    }
    if (this.type == canvas.ui.ProgressType.HORIZONTAL) {
        if (this.backImage) {
            this.backImage.width = this._width;
            this.sprite.setSize(this._width * this.progress, this._height);
        } else {
            this.sprite.width = this._width * this.progress;
            if (this._height) this.sprite.height = this._height;
        }
    } else {
        if (this.backImage) {
            this.backImage.height = this._height;
            this.sprite.setSize(this._width, this._height * this.progress);
        } else {
            this.sprite.height = this._height * this.progress;
            if (this._width) this.sprite.width = this._width;
        }
    }
};
canvas.ui.Progress.prototype.handlerBackDown = function (mouseData) {
    this.back.mousemove = this.handlerBackMove.bind(this);
    canvas.EventManager.addEventListener(canvas.Event.STAGE_MOUSE_UP, null, this.handlerStageMouseUp, this);
    this.handlerBackMove(mouseData);
};
canvas.ui.Progress.prototype.handlerBackMove = function (mouseData) {
    var point = this.back.toLocal(new canvas.px.Point(mouseData.data.global.x, mouseData.data.global.y));
    if (this.type == canvas.ui.ProgressType.HORIZONTAL) {
        this.progress = point.x / this._width;
    } else {
        this.progress = point.y / this._height;
    }
    canvas.EventManager.dispatchEvent(canvas.ui.ProgressEvent.EVENT_PROGRESS, this);
};
canvas.ui.Progress.prototype.handlerStageMouseUp = function (event) {
    if (this.back) this.back.mousemove = null;
    canvas.EventManager.removeEventListener(canvas.Event.STAGE_MOUSE_UP, null, this.handlerStageMouseUp, this);
};
canvas.ui.Progress.prototype.destroy = function () {
    if (this.back) this.back.mousedown = null;
    this.handlerStageMouseUp();
    canvas.ui.Component.prototype.destroy.apply(this, [{ children: true }]);
};
canvas.ui.ImageEvent = { EVENT_LOADED: "ImageEvent.LOADED" };
canvas.ui.Image = function (url, w, h, smoothing) {
    canvas.ui.Component.call(this);
    this.smoothing = smoothing == undefined ? true : smoothing;
    this.ready = false;
    if (w && h) {
        this.wall = new canvas.px.Mask(w, h, 0, 0);
        this.addChild(this.wall);
    }
    if (url) this.setImage(url);
};
canvas.ui.Image.prototype = Object.create(canvas.ui.Component.prototype);
canvas.ui.Image.prototype.setImage = function (url) {
    if (this.url === url) return;
    this.url = url;
    var texture = canvas.ResourceLoader.getTexture(url);
    if (!this.sprite) {
        this.sprite = new canvas.px.Sprite();
        this.addChild(this.sprite);
    }
    if (texture == canvas.px.TextureEmpty) {
        canvas.EventManager.addEventListener(canvas.ResourceLoader.EVENT_COMPLETE, null, this.handlerLoaded, this);
        canvas.ResourceLoader.add([url]);
    } else {
        this.setTexture(texture);
        this._ready();
    }
};
canvas.ui.Image.prototype.setTexture = function (texture) {
    if (!this.smoothing) texture.baseTexture.scaleMode = canvas.px.ScaleMode.NEAREST;
    this.sprite.texture = texture;
};
canvas.ui.Image.prototype.clear = function () {
    this.url = "";
    if (this.sprite) {
        this.sprite.texture = canvas.px.TextureEmpty;
    }
};
canvas.ui.Image.prototype.handlerLoaded = function () {
    canvas.EventManager.removeEventListener(canvas.ResourceLoader.EVENT_COMPLETE, null, this.handlerLoaded, this);
    this.setTexture(canvas.ResourceLoader.getTexture(this.url));
    this._ready();
};
canvas.ui.Image.prototype._ready = function () {
    this.ready = true;
    canvas.EventManager.dispatchEvent(canvas.ui.ImageEvent.EVENT_LOADED, this);
    if (this.wall) {
        this.removeChild(this.wall);
        if (this.wall.graphicsData) this.wall.destroy({ children: true });
        delete this.wall;
    }
};
canvas.ui.ScrollEvent = { EVENT_SCROLL: "ScrollEvent.EVENT_SCROLL" };
canvas.ui.ScrollType = { HORIZONTAL: "h", VERTICAL: "v" };
canvas.ui.Scroll = function (type, minus, plus, back, drag, wheelTarget, useDrag, useWheel, stopOnStageOut, hidePlusMinus, dragTarget) {
    this._min = 0;
    Object.defineProperty(this, "min", {
        get: function () {
            return this._min;
        },
        set: function (value) {
            if (!value) value = 0;
            this._min = value > this.max ? this.max : value;
            this.current = this.current;
        },
    });
    this._max = 100;
    Object.defineProperty(this, "max", {
        get: function () {
            return this._max;
        },
        set: function (value) {
            if (!value) value = 0;
            this._max = value < this.min ? this.min : value;
            this.current = this.current;
        },
    });
    this._step = 1;
    Object.defineProperty(this, "step", {
        get: function () {
            return this._step;
        },
        set: function (value) {
            this._step = value;
        },
    });
    this._current = 0;
    Object.defineProperty(this, "current", {
        get: function () {
            return this._current;
        },
        set: function (value) {
            if (!value) value = 0;
            this._current = value < this.min ? this.min : value > this.max ? this.max : value;
            this.update();
        },
    });
    this._backPadding = 0;
    Object.defineProperty(this, "backPadding", {
        get: function () {
            return this._backPadding;
        },
        set: function (value) {
            this._backPadding = value;
            this.update();
        },
    });
    this._padding = 0;
    Object.defineProperty(this, "padding", {
        get: function () {
            return this._padding;
        },
        set: function (value) {
            this._padding = value;
            this.update();
        },
    });
    canvas.ui.Component.call(this);
    if (useDrag == undefined) useDrag = false;
    if (useWheel == undefined) useWheel = true;
    if (stopOnStageOut == undefined) stopOnStageOut = true;
    this.type = type;
    this.useDrag = useDrag;
    this.useWheel = useWheel;
    this.minusView = minus;
    this.plusView = plus;
    this.backView = back;
    this.dragView = drag;
    this.wheelTarget = wheelTarget;
    this.dragTarget = dragTarget || this.wheelTarget;
    this.hidePlusMinus = hidePlusMinus ? hidePlusMinus : false;
    if (this.backView) {
        this.addChild(this.backView);
        this.backView.interactive = true;
    }
    this.dragDirection = true;
    this.wasDragged = false;
    this.shape = new canvas.px.Graphics();
    this.addChild(this.shape);
    this.shape.interactive = this.backView ? true : false;
    this.shape.click = this.shapeClickHandler.bind(this);
    if (this.dragView) {
        this.addChild(this.dragView);
        this.dragView.interactive = true;
        this.dragView.buttonMode = true;
        this.dragView.mousedown = this.handlerDragDown.bind(this);
    }
    if (this.minusView) {
        this.addChild(this.minusView);
        this.minusView.interactive = true;
        this.minusView.buttonMode = true;
        this.minusView.click = this.minusClickHandler.bind(this);
    }
    if (this.plusView) {
        this.addChild(this.plusView);
        this.plusView.interactive = true;
        this.plusView.buttonMode = true;
        this.plusView.click = this.plusClickHandler.bind(this);
    }
    if (this.wheelTarget) {
        this.wheelTarget.interactive = true;
        this.wheelTarget.mouseover = this.handlerWheelTargetOver.bind(this);
        this.wheelTarget.mouseout = this.handlerWheelTargetOut.bind(this);
        if (useDrag) {
            this.dragTarget.interactive = true;
            this.dragTarget.mousedown = this.handlerDragDown.bind(this);
        }
    }
    if (stopOnStageOut) {
        canvas.EventManager.addEventListener(canvas.Event.STAGE_MOUSE_OUT, null, this.stageOutHandler, this);
    }
};
canvas.ui.Scroll.prototype = Object.create(canvas.ui.Component.prototype);
canvas.ui.Scroll.prototype.update = function () {
    if (this.type == canvas.ui.ScrollType.VERTICAL) {
        if (this.backView) {
            this.backView.width = this._width;
            this.backView.height = this._height - this._backPadding * 2;
            this.backView.y = this._backPadding;
        }
        this.shape.clear();
        this.shape.beginFill(0, 0);
        this.shape.lineStyle(0, 0, 0);
        this.shape.drawRect(0, 0, this._width, this._height - this._padding * 2);
        this.shape.endFill();
        this.shape.y = this._padding;
        if (this.minusView) {
            this.minusView.x = Math.round((this._width - this.minusView.width) * 0.5);
        }
        if (this.plusView) {
            this.plusView.x = Math.round((this._width - this.plusView.width) * 0.5);
            this.plusView.y = this._height - this.plusView.height;
        }
        if (this.dragView) {
            this.dragView.position.set(Math.round((this._width - this.dragView.width) * 0.5), this._padding + Math.round((this.shape.height - this.dragView.height) * ((this.current - this.min) / (this.max - this.min))));
        }
    } else {
        if (this.backView) {
            this.backView.height = this._height;
            this.backView.width = this._width - this._backPadding * 2;
            this.backView.x = this._backPadding;
        }
        this.shape.clear();
        this.shape.beginFill(0, 0);
        this.shape.lineStyle(0, 0, 0);
        this.shape.drawRect(0, 0, this._width - this._padding * 2, this._height);
        this.shape.endFill();
        this.shape.x = this._padding;
        if (this.minusView) {
            this.minusView.y = Math.round((this._height - this.minusView.height) * 0.5);
        }
        if (this.plusView) {
            this.plusView.y = Math.round((this._height - this.plusView.height) * 0.5);
            this.plusView.x = this._width - this.plusView.width;
        }
        if (this.dragView) {
            this.dragView.position.set(this._padding + Math.round((this.shape.width - this.dragView.width) * ((this.current - this.min) / (this.max - this.min))), Math.round((this._height - this.dragView.height) * 0.5));
        }
    }
    if (this.minusView) {
        if (this.hidePlusMinus == 2) {
            this.minusView.enabled = !this.hidePlusMinus || this.current != this.min;
        } else {
            this.minusView.visible = !this.hidePlusMinus || this.current != this.min;
        }
    }
    if (this.plusView) {
        if (this.hidePlusMinus == 2) {
            this.plusView.enabled = !this.hidePlusMinus || this.current != this.max;
        } else {
            this.plusView.visible = !this.hidePlusMinus || this.current != this.max;
        }
    }
    if (this.dragView) {
        this.dragView.visible = !this.isDisabled();
        this.dragView.__height = this.dragView.height;
        this.dragView.__width = this.dragView.width;
    }
};
canvas.ui.Scroll.prototype.minusClickHandler = function () {
    this.current -= this.step;
    canvas.EventManager.dispatchEvent(canvas.ui.ScrollEvent.EVENT_SCROLL, this);
};
canvas.ui.Scroll.prototype.plusClickHandler = function () {
    this.current += this.step;
    canvas.EventManager.dispatchEvent(canvas.ui.ScrollEvent.EVENT_SCROLL, this);
};
canvas.ui.Scroll.prototype.shapeClickHandler = function (mouseData) {
    var point = this.shape.toLocal(new canvas.px.Point(mouseData.data.global.x, mouseData.data.global.y));
    if (this.type == canvas.ui.ScrollType.VERTICAL) {
        this.current = this.min + Math.round((point.y / this.shape.height) * (this.max - this.min));
    } else {
        this.current = this.min + Math.round((point.x / this.shape.width) * (this.max - this.min));
    }
    canvas.EventManager.dispatchEvent(canvas.ui.ScrollEvent.EVENT_SCROLL, this);
};
canvas.ui.Scroll.prototype.handlerDragDown = function (mouseData) {
    this.isDraggingContent = mouseData.currentTarget != this.dragView;
    this.dragDirection = mouseData.currentTarget == this.dragView;
    if (this.type == canvas.ui.ScrollType.VERTICAL) {
        this.startDragPosition = mouseData.data.global.y;
        this.startDragViewPosition = this.dragView.y;
    } else {
        this.startDragPosition = mouseData.data.global.x;
        this.startDragViewPosition = this.dragView.x;
    }
    this.startCurrent = this.current;
    this.shape.mousemove = this.handlerDragMove.bind(this);
    canvas.EventManager.addEventListener(canvas.Event.STAGE_MOUSE_UP, null, this.handlerStageMouseUp, this);
    this.wasDragged = false;
};
canvas.ui.Scroll.prototype.handlerDragMove = function (mouseData) {
    var newPos;
    var tmp, target;
    if (this.type == canvas.ui.ScrollType.VERTICAL) {
        tmp = this.startDragPosition - mouseData.data.global.y;
        if (this.dragDirection) {
            newPos = this.startDragViewPosition - tmp;
        } else {
            newPos = this.startDragViewPosition + tmp;
        }
        target = this.isDraggingContent ? this.startCurrent + tmp : Math.round(((newPos - this.padding) / (this.shape.height - this.dragView.__height)) * (this.max - this.min));
    } else {
        tmp = this.startDragPosition - mouseData.data.global.x;
        if (this.dragDirection) {
            newPos = this.startDragViewPosition - tmp;
        } else {
            newPos = this.startDragViewPosition + tmp;
        }
        target = this.isDraggingContent ? this.startCurrent + tmp : Math.round(((newPos - this.padding) / (this.shape.width - this.dragView.__width)) * (this.max - this.min));
    }
    if (!this.wasDragged && Math.abs(newPos - this.startDragViewPosition) > 2) this.wasDragged = true;
    if (this.current != target) {
        this.current = target;
        canvas.EventManager.dispatchEvent(canvas.ui.ScrollEvent.EVENT_SCROLL, this);
    }
};
canvas.ui.Scroll.prototype.handlerStageMouseUp = function (event) {
    this.isDraggingContent = false;
    this.shape.mousemove = null;
    canvas.EventManager.removeEventListener(canvas.Event.STAGE_MOUSE_UP, null, this.handlerStageMouseUp, this);
    this.wasDragged = false;
};
canvas.ui.Scroll.prototype.handlerWheelTargetOver = function () {
    if (this.useWheel) {
        canvas.EventManager.addEventListener(canvas.Event.STAGE_WHEEL, null, this.mouseWheelHandler, this);
    }
};
canvas.ui.Scroll.prototype.handlerWheelTargetOut = function () {
    if (this.useWheel) {
        canvas.EventManager.removeEventListener(canvas.Event.STAGE_WHEEL, null, this.mouseWheelHandler, this);
    }
};
canvas.ui.Scroll.prototype.mouseWheelHandler = function (e) {
    if (!this.wheelTarget.parent) return;
    if (e.params.wheelDelta > 0) {
        this.minusClickHandler();
    } else {
        this.plusClickHandler();
    }
};
canvas.ui.Scroll.prototype.stageOutHandler = function (e) {
    this.handlerStageMouseUp();
};
canvas.ui.Scroll.prototype.isDisabled = function () {
    return this.min == this.max;
};
canvas.ui.Scroll.prototype.destroy = function () {
    if (this.minusView) {
        this.minusView.click = null;
    }
    if (this.plusView) {
        this.plusView.click = null;
    }
    if (this.dragView) {
        this.dragView.mousedown = null;
    }
    if (this.wheelTarget) {
        this.wheelTarget.mouseover = null;
        this.wheelTarget.mouseout = null;
        canvas.EventManager.removeEventListener(canvas.Event.STAGE_WHEEL, null, this.mouseWheelHandler, this);
    }
    if (this.dragTarget) {
        this.dragTarget.mousedown = null;
    }
    this.shape.click = null;
    this.shape.mousemove = null;
    this.handlerStageMouseUp();
    canvas.EventManager.removeEventListener(canvas.Event.STAGE_MOUSE_OUT, null, this.stageOutHandler, this);
    canvas.ui.Component.prototype.destroy.apply(this, [{ children: true }]);
};
canvas.ui.HtmlTextEvent = { EVENT_LINK: "HtmlTextEvent.EVENT_LINK" };
canvas.ui.HtmlText = function (font, boldFont, color, width, height, hAlign, vAlign, backColor, backAlpha, masking) {
    this._hAlign = "left";
    Object.defineProperty(this, "hAlign", {
        get: function () {
            return this._hAlign;
        },
        set: function (value) {
            this._hAlign = value;
            this.update();
        },
    });
    this._vAlign = "top";
    Object.defineProperty(this, "vAlign", {
        get: function () {
            return this._vAlign;
        },
        set: function (value) {
            this._vAlign = value;
            this.update();
        },
    });
    this._lineSpace = 2;
    Object.defineProperty(this, "lineSpace", {
        get: function () {
            return this._lineSpace;
        },
        set: function (value) {
            this._lineSpace = value;
            this.update();
        },
    });
    this._text = "";
    Object.defineProperty(this, "text", {
        get: function () {
            return this._text;
        },
        set: function (value) {
            this._text = value.replace(/<br>/gi, "<br/>");
            this.make();
        },
    });
    Object.defineProperty(this, "color", {
        get: function () {
            return this._color;
        },
        set: function (value) {
            this._color = value;
            this.make();
        },
    });
    this._border = false;
    Object.defineProperty(this, "border", {
        get: function () {
            return this._border;
        },
        set: function (value) {
            this._border = value;
            if (this._border && !this.borderImage) {
                this.borderImage = new canvas.px.Graphics();
                this.addChild(this.borderImage);
            }
            this.update();
        },
    });
    this._backColor = 0;
    Object.defineProperty(this, "backColor", {
        get: function () {
            return this._backColor;
        },
        set: function (value) {
            this._backColor = value;
            if (!this.back) {
                this.createBack();
            }
            this.update();
        },
    });
    this._backAlpha = 0;
    Object.defineProperty(this, "backAlpha", {
        get: function () {
            return this._backAlpha;
        },
        set: function (value) {
            this._backAlpha = value;
            if (!this.back) {
                this.createBack();
            }
            this.update();
        },
    });
    Object.defineProperty(this, "textWidth", {
        get: function () {
            return Math.round(this.container.width);
        },
        set: function (value) {},
    });
    Object.defineProperty(this, "textHeight", {
        get: function () {
            return Math.round(this.container.height);
        },
        set: function (value) {},
    });
    canvas.ui.Component.call(this);
    if (font == undefined) font = canvas.Const.FONT_TAHOMA_12;
    if (boldFont == undefined) boldFont = font + "_BOLD";
    if (color == undefined) color = 16777215;
    this.font = font;
    this.boldFont = boldFont;
    this._color = color;
    if (width != undefined) this._width = width;
    else this._width = 100;
    if (height != undefined) this._height = height;
    else this._height = 100;
    if (vAlign != undefined) this._vAlign = vAlign;
    if (hAlign != undefined) this._hAlign = hAlign;
    if (backColor != undefined) {
        this.createBack();
        this._backColor = backColor;
    }
    if (backAlpha) this._backAlpha = backAlpha;
    if (masking != undefined && masking) {
        this.createMask();
    }
    this.lineHeight = canvas.px.BitmapText.fonts[this.font].lineHeight;
    this.container = new canvas.px.Container();
    this.addChild(this.container);
    this.click = this.clickHandler.bind(this);
};
canvas.ui.HtmlText.prototype = Object.create(canvas.ui.Component.prototype);
canvas.ui.HtmlText.prototype.make = function () {
    canvas.Functions.destroyChildren(this.container);
    this.style = {};
    this.style.font = this.font;
    this.style.color = this.color;
    var doc = new DOMParser().parseFromString("<root>" + this.text + "</root>", "text/xml");
    this.parseList(doc.children[0].childNodes, this.style);
    this.update();
};
canvas.ui.HtmlText.prototype.parseList = function (list, style) {
    var len = list.length;
    var len2;
    var node;
    var value;
    var sprite;
    var data;
    var charData;
    var charCode;
    var newStyle;
    var g;
    var prevCharCode;
    for (var i = 0; i < len; i++) {
        node = list[i];
        switch (node.nodeName) {
            case "font":
                newStyle = canvas.Functions.cloneSimpleObject(style);
                if (node.attributes.color) {
                    newStyle.color = parseInt(node.attributes.color.value.substr(1), 16);
                }
                if (node.attributes.face) {
                    newStyle.font = node.attributes.face.value;
                }
                this.parseList(node.childNodes, newStyle);
                break;
            case "b":
                newStyle = canvas.Functions.cloneSimpleObject(style);
                newStyle.font = this.boldFont;
                this.parseList(node.childNodes, newStyle);
                break;
            case "img":
                if (node.attributes.src) {
                    if (node.attributes.atlas) {
                        sprite = new canvas.px.Sprite(canvas.ResourceLoader.getImage(node.attributes.atlas.value, node.attributes.src.value));
                    } else {
                        sprite = new canvas.ui.Image(node.attributes.src.value, node.attributes.width ? parseInt(node.attributes.width.value) : 20, node.attributes.height ? parseInt(node.attributes.height.value) : 20);
                    }
                    sprite.image = true;
                    sprite.xOffset = node.attributes.xOffset ? parseInt(node.attributes.xOffset.value) : 0;
                    sprite.yOffset = node.attributes.yOffset ? parseInt(node.attributes.yOffset.value) : 0;
                    sprite.xyScale = node.attributes.scale ? parseFloat(node.attributes.scale.value) : 1;
                    if (style.href) {
                        sprite.href = style.href;
                        sprite.target = style.target;
                        sprite.interactive = true;
                        sprite.buttonMode = true;
                    } else {
                        sprite.interactive = false;
                    }
                    this.container.addChild(sprite);
                }
                break;
            case "a":
                newStyle = canvas.Functions.cloneSimpleObject(style);
                newStyle.normal = node.attributes.normal && parseInt(node.attributes.normal.value);
                if (node.attributes.href) {
                    newStyle.href = node.attributes.href.value;
                } else {
                    newStyle.href = "#";
                }
                if (node.attributes.target) {
                    newStyle.target = node.attributes.target.value;
                }
                this.parseList(node.childNodes, newStyle);
                break;
            case "br":
                sprite = new canvas.px.Sprite(canvas.px.TextureEmpty);
                sprite.br = true;
                sprite.charCode = 32;
                this.container.addChild(sprite);
                break;
        }
        if (node.nodeValue) {
            value = node.nodeValue;
            len2 = value.length;
            data = canvas.px.BitmapText.fonts[style.font];
            for (var j = 0; j < len2; j++) {
                charCode = value.charCodeAt(j);
                charData = data.chars[charCode];
                if (!charData) continue;
                sprite = new canvas.px.Sprite(charData.texture);
                sprite.xOffset = charData.xOffset;
                sprite.yOffset = charData.yOffset;
                sprite.xAdvance = charData.xAdvance;
                sprite.tint = style.color;
                sprite.charCode = charCode;
                prevCharCode = charCode;
                if (style.href) {
                    sprite.href = style.href;
                    sprite.target = style.target;
                    if (!style.normal) {
                        g = new canvas.px.Graphics();
                        g.lineStyle(1, style.color, 1);
                        g.beginFill();
                        g.moveTo(0, data.lineHeight - sprite.yOffset);
                        g.lineTo(this.getWidth(sprite) + 1, data.lineHeight - sprite.yOffset);
                        g.endFill();
                        sprite.addChildAt(g, 0);
                    }
                    if (style.href != "#") {
                        sprite.interactive = true;
                        sprite.buttonMode = true;
                    }
                }
                this.container.addChild(sprite);
            }
        }
    }
    sprite = this.container.addChild(new canvas.px.Sprite(canvas.px.TextureEmpty));
    sprite.charCode = 32;
};
canvas.ui.HtmlText.prototype.update = function () {
    var len = this.container.children.length;
    var len2;
    var curW = 0;
    var curH = 0;
    var tmpX = 0;
    var tmpY = 0;
    var sprite;
    var lines = [];
    var line = [];
    var word = [];
    var wordLen = 0;
    var fontMaxH = 0;
    var i;
    var j;
    var dx;
    var dy;
    lines.push(line);
    for (i = 0; i < len; i++) {
        sprite = this.container.children[i];
        sprite.visible = true;
        if (sprite.charCode == 32) {
            if (tmpX >= this._width) {
                lines[lines.length - 1] = line;
                line = [];
                lines.push(line);
                tmpX = wordLen;
            }
            line = line.concat(word);
            word = [];
            wordLen = 0;
        }
        if (sprite.br) {
            line = line.concat(word);
            word = [];
            wordLen = 0;
            lines[lines.length - 1] = line;
            line = [];
            lines.push(line);
            tmpX = wordLen;
        }
        word.push(sprite);
        tmpX += this.getWidth(sprite);
        wordLen += this.getWidth(sprite);
    }
    lines[lines.length - 1] = line.concat(word);
    len = lines.length;
    tmpX = 0;
    tmpY = 0;
    for (i = 0; i < len; i++) {
        line = lines[i];
        len2 = line.length;
        if (line.length == 1 && line[0].br) {
            tmpY += this.lineHeight;
        }
        for (j = 0; j < len2; j++) {
            sprite = line[j];
            if (j == 0 && sprite.charCode == 32) {
                sprite.visible = false;
                continue;
            }
            sprite.position.set(tmpX + sprite.xOffset, tmpY + sprite.yOffset);
            if (sprite.xyScale) sprite.scale.set(sprite.xyScale, sprite.xyScale);
            tmpX += this.getWidth(sprite);
            curH = Math.max(curH, sprite.height);
            if (!sprite.image) fontMaxH = Math.max(fontMaxH, sprite.height);
        }
        dy = Math.round((curH - fontMaxH) * 0.5);
        switch (this.hAlign) {
            case "center":
                dx = Math.round((this._width - tmpX) * 0.5);
                break;
            case "right":
                dx = Math.round(this._width - tmpX);
                break;
            default:
                dx = 0;
        }
        for (j = 0; j < len2; j++) {
            sprite = line[j];
            sprite.x += dx;
            if (sprite.image) {
                sprite.y += Math.round((curH - sprite.height) * 0.5);
            } else {
                sprite.y += dy;
            }
        }
        tmpX = 0;
        tmpY += curH + this.lineSpace;
        curH = 0;
        fontMaxH = 0;
    }
    switch (this.vAlign) {
        case "top":
            this.container.y = 0;
            break;
        case "middle":
            this.container.y = Math.round((this._height - this.container.height) * 0.5);
            break;
        case "bottom":
            this.container.y = Math.round(this._height - this.container.height);
            break;
    }
    if (this.border) {
        this.borderImage.clear();
        this.borderImage.beginFill(0, 0);
        this.borderImage.lineStyle(2, 16711680, 1);
        this.borderImage.drawRect(-2, -2, this._width + 4, this._height + 4);
        this.borderImage.endFill();
    }
    if (this.back) {
        this.back.clear();
        this.back.beginFill(this.backColor, this.backAlpha);
        this.back.drawRect(0, 0, this._width, this._height);
        this.back.endFill();
    }
    if (this.msk) {
        this.msk.clear();
        this.msk.beginFill(0, 1);
        this.msk.drawRect(0, 0, this._width, this._height);
        this.msk.endFill();
    }
};
canvas.ui.HtmlText.prototype.createBack = function () {
    this.back = new canvas.px.Graphics();
    this.addChildAt(this.back, 0);
};
canvas.ui.HtmlText.prototype.getWidth = function (sprite) {
    return Math.round(sprite.xAdvance ? sprite.xAdvance : sprite.width);
};
canvas.ui.HtmlText.prototype.clickHandler = function (mouseData) {
    if (mouseData.target.href) {
        if (mouseData.target.href.substr(0, 6) == "event:") {
            canvas.EventManager.dispatchEvent(canvas.ui.HtmlTextEvent.EVENT_LINK, this, mouseData.target.href.substr(6));
        } else {
            canvas.Functions.navigateToURL(mouseData.target.href, mouseData.target.target ? mouseData.target.target : "_blank");
        }
    }
};
canvas.ui.HtmlText.prototype.createMask = function () {
    this.msk = new canvas.px.Graphics();
    this.addChildAt(this.msk, 0);
    this.mask = this.msk;
};
canvas.ui.PagerEvent = { EVENT_CHANGE: "PagerEvent.CHANGE" };
canvas.ui.Pager = function (homeView, endView, minusView, plusView, fieldTemplate, showCount) {
    Object.defineProperty(this, "startIndex", {
        get: function () {
            return this.currentPage * this.onPage;
        },
    });
    Object.defineProperty(this, "endIndex", {
        get: function () {
            return this.currentPage * this.onPage + this.onPage;
        },
    });
    this._paddingNumbersLeft = 5;
    Object.defineProperty(this, "paddingNumbersLeft", {
        get: function () {
            return this._paddingNumbersLeft;
        },
        set: function (value) {
            this._paddingNumbersLeft = value;
            this.update();
        },
    });
    this._paddingNumbersRight = 5;
    Object.defineProperty(this, "paddingNumbersRight", {
        get: function () {
            return this._paddingNumbersRight;
        },
        set: function (value) {
            this._paddingNumbersRight = value;
            this.update();
        },
    });
    this._padding = 2;
    Object.defineProperty(this, "padding", {
        get: function () {
            return this._padding;
        },
        set: function (value) {
            this._padding = value;
            this.update();
        },
    });
    this._showCount = 5;
    Object.defineProperty(this, "showCount", {
        get: function () {
            return this._showCount;
        },
        set: function (value) {
            this._showCount = value;
            var len = this.numbersContainer.numChildren;
            var num = Math.max(this._showCount, len - 1);
            var sprite;
            for (var i = 0; i < num; i++) {
                if (i < this._showCount && i >= len) {
                    sprite = this.fieldTemplate.clone();
                    sprite.name = "field" + i;
                    sprite.interactive = true;
                    sprite.buttonMode = true;
                    sprite.text = "";
                    this.numbersContainer.addChild(sprite);
                }
                if (i >= this._showCount && i < len) {
                    sprite = this.numbersContainer.removeChildAt(i);
                    sprite.destroy();
                }
            }
            this.update();
        },
    });
    this._currentPage = 0;
    Object.defineProperty(this, "currentPage", {
        get: function () {
            return this._currentPage;
        },
        set: function (value) {
            this._currentPage = value < 0 ? 0 : value >= this.numPages ? this.numPages - 1 : value;
            this.update();
        },
    });
    canvas.ui.Component.call(this);
    this.fieldTemplate = fieldTemplate;
    this.container = new canvas.px.Container();
    this.addChild(this.container);
    this.buttonsContainer = new canvas.px.Container();
    this.container.addChild(this.buttonsContainer);
    this.buttonHome = new canvas.ui.SimpleButton(homeView);
    this.buttonEnd = new canvas.ui.SimpleButton(endView);
    this.buttonMinus = new canvas.ui.SimpleButton(minusView);
    this.buttonPlus = new canvas.ui.SimpleButton(plusView);
    this.buttonsContainer.addChild(this.buttonHome);
    this.buttonsContainer.addChild(this.buttonEnd);
    this.buttonsContainer.addChild(this.buttonMinus);
    this.buttonsContainer.addChild(this.buttonPlus);
    this.buttonsContainer.visible = false;
    this.numbersContainer = new canvas.px.Container();
    this.container.addChild(this.numbersContainer);
    this.showCount = showCount == undefined ? 5 : showCount;
    this.container.addChild(this.numbersContainer);
    this.click = this._clickHandler.bind(this);
};
canvas.ui.Pager.prototype = Object.create(canvas.ui.Component.prototype);
canvas.ui.Pager.prototype.init = function (count, onPage) {
    this.numPages = Math.ceil(count / onPage);
    this.currentPage = 0;
    this.onPage = onPage;
    this.update();
};
canvas.ui.Pager.prototype.update = function () {
    if (this._currentPage == 0) {
        this.buttonHome.interactive = false;
        this.buttonHome.alpha = 0.5;
        this.buttonMinus.interactive = false;
        this.buttonMinus.alpha = 0.5;
    } else {
        this.buttonHome.interactive = true;
        this.buttonHome.alpha = 1;
        this.buttonMinus.interactive = true;
        this.buttonMinus.alpha = 1;
    }
    if (this._currentPage == this.numPages - 1) {
        this.buttonEnd.interactive = false;
        this.buttonEnd.alpha = 0.5;
        this.buttonPlus.interactive = false;
        this.buttonPlus.alpha = 0.5;
    } else {
        this.buttonEnd.interactive = true;
        this.buttonEnd.alpha = 1;
        this.buttonPlus.interactive = true;
        this.buttonPlus.alpha = 1;
    }
    var startPage;
    var endPage;
    var i;
    var tmpX = 0;
    var t;
    var sprite;
    if (this.numPages > this._showCount) {
        this.buttonsContainer.visible = true;
        startPage = this._currentPage - Math.round((this._showCount - 1) * 0.5);
    } else {
        startPage = 0;
        endPage = this.numPages - 1;
        this.buttonsContainer.visible = false;
    }
    if (startPage < 0) startPage = 0;
    endPage = startPage + this._showCount;
    for (i = 0; i < this._showCount; i++) {
        sprite = this.numbersContainer.getChildAt(i);
        sprite.visible = false;
        if (startPage + i >= this.numPages) {
            continue;
        }
        sprite.visible = true;
        sprite.text = (startPage + i + 1).toString();
        sprite.x = tmpX;
        tmpX += sprite.width + this._padding;
        if (startPage + i == this._currentPage) {
            sprite.color = 7026733;
            sprite.interactive = false;
        } else {
            sprite.color = 12713984;
            sprite.interactive = true;
        }
    }
    this.buttonMinus.x = this.buttonHome.width + this._padding;
    this.numbersContainer.x = Math.round(this.buttonMinus.x + this.buttonMinus.width + this.paddingNumbersLeft);
    this.buttonPlus.x = this.numbersContainer.x + this.numbersContainer.width + this.paddingNumbersRight;
    this.buttonEnd.x = this.buttonPlus.x + this.buttonPlus.width + this._padding;
    this.numbersContainer.y = Math.round((Math.max(this.buttonsContainer.height, this.numbersContainer.height) - this.numbersContainer.height) * 0.5);
    this.container.x = -Math.round(this.buttonsContainer.width * 0.5);
};
canvas.ui.Pager.prototype._clickHandler = function (event) {
    if (this.buttonHome.interactive && canvas.Functions.findParent(this.buttonHome, event.target)) {
        this.currentPage = 0;
        canvas.EventManager.dispatchEvent(canvas.ui.PagerEvent.EVENT_CHANGE, this, this.currentPage);
    } else if (this.buttonMinus.interactive && canvas.Functions.findParent(this.buttonMinus, event.target)) {
        this.currentPage--;
        canvas.EventManager.dispatchEvent(canvas.ui.PagerEvent.EVENT_CHANGE, this, this.currentPage);
    } else if (this.buttonEnd.interactive && canvas.Functions.findParent(this.buttonEnd, event.target)) {
        this.currentPage = this.numPages - 1;
        canvas.EventManager.dispatchEvent(canvas.ui.PagerEvent.EVENT_CHANGE, this, this.currentPage);
    } else if (this.buttonPlus.interactive && canvas.Functions.findParent(this.buttonPlus, event.target)) {
        this.currentPage++;
        canvas.EventManager.dispatchEvent(canvas.ui.PagerEvent.EVENT_CHANGE, this, this.currentPage);
    } else if (event.target.name && event.target.name.substr(0, 5) == "field") {
        var startPage = this._currentPage - Math.round((this._showCount - 1) * 0.5);
        if (startPage < 0) startPage = 0;
        this.currentPage = parseInt(event.target.name.substr(5)) + startPage;
        canvas.EventManager.dispatchEvent(canvas.ui.PagerEvent.EVENT_CHANGE, this, this.currentPage);
    }
};
canvas.ui.Pager.prototype.destroy = function () {
    this.click = null;
    canvas.ui.Component.prototype.destroy.call(this);
};
canvas.ui.InputEvent = { EVENT_CHANGE: "InputEvent.CHANGE" };
canvas.ui.Input = function (par, align, w, dx, dy) {
    this._color = 5191459;
    Object.defineProperty(this, "color", {
        get: function () {
            return this._color;
        },
        set: function (value) {
            this._color = value;
            this.input.style.color = value;
        },
    });
    this._parent = null;
    Object.defineProperty(this, "parent", {
        get: function () {
            return this._parent;
        },
        set: function (value) {
            this._parent = value;
            if (this._parent) {
                this.interval = setInterval(this.handlerEnterFrame.bind(this), 10);
                this.input.style.display = "block";
                this.handlerEnterFrame();
                this.lastPoint.x = undefined;
                this.lastPoint.y = undefined;
            } else {
                if (this.interval) clearInterval(this.interval);
                this.input.style.display = "none";
            }
        },
    });
    Object.defineProperty(this, "text", {
        get: function () {
            return this.input.value;
        },
        set: function (value) {
            this.input.value = value;
        },
    });
    Object.defineProperty(this, "align", {
        get: function () {
            return this.input.style["text-align"];
        },
        set: function (value) {
            this.input.style["text-align"] = value;
        },
    });
    this._width = 0;
    Object.defineProperty(this, "width", {
        get: function () {
            return this._width;
        },
        set: function (value) {
            this._width = value;
            this.input.style.width = this._width * this.scale;
        },
    });
    Object.defineProperty(this, "bold", {
        set: function (value) {
            this.input.style["font-weight"] = value ? "bold" : "normal";
        },
    });
    this._scale = 1;
    Object.defineProperty(this, "scale", {
        get: function () {
            return this._scale;
        },
        set: function (value) {
            this._scale = value;
            this.lastPoint.x = undefined;
            this.lastPoint.y = undefined;
            if (this.input) {
                this.width = this.width;
                this.input.style.fontSize = Math.floor(12 * this.scale);
            }
        },
    });
    if (align == undefined) align = "left";
    if (w == undefined) w = 100;
    this.x = 0;
    this.y = 0;
    this.dx = dx || 0;
    this.dy = dy || 0;
    this.input = document.createElement("input");
    this.input.type = "text";
    this.input.style = "border: none;background-color: transparent; height:14px; position:absolute;font-size: 12px;font-family: Tahoma;color:#ffffff;text-align: " + align + ";outline: none;overflow: hidden;";
    this.width = w;
    this.input.value = "";
    this.input.oninput = this.changeHandler.bind(this);
    par.appendChild(this.input);
    this.lastPoint = new canvas.px.Point(-1e3, -1e3);
};
canvas.ui.Input.prototype.changeHandler = function () {
    canvas.EventManager.dispatchEvent(canvas.ui.InputEvent.EVENT_CHANGE, this, this.input.value);
};
canvas.ui.Input.prototype.handlerEnterFrame = function (force) {
    if (!this.parent) return;
    var p = this.parent.toGlobal(new canvas.px.Point(0, 0));
    if (this.lastPoint.x != p.x || this.lastPoint.y != p.y || force) {
        this.lastPoint.x = p.x;
        this.lastPoint.y = p.y;
        this.input.style.left = p.x + this.x * this.scale + this.dx;
        if (this.stageHeight) this.input.style.bottom = this.stageHeight - p.y - this.y * this.scale + this.dy;
    }
};
canvas.ui.ListEvent = { EVENT_SELECT: "ListEvent.SELECT" };
canvas.ui.ListType = { VERTICAL: "ListType.VERTICAL", HORIZONTAL: "ListType.HORIZONTAL" };
canvas.ui.List = function (type, cellsCount) {
    this._scrollMaxAdd = 0;
    Object.defineProperty(this, "scrollMaxAdd", {
        get: function () {
            return this._scrollMaxAdd;
        },
        set: function (value) {
            this._scrollMaxAdd = value;
            this.update();
        },
    });
    this._paddingV = 5;
    Object.defineProperty(this, "paddingV", {
        get: function () {
            return this._paddingV;
        },
        set: function (value) {
            this._paddingV = value;
            this.update();
        },
    });
    this._paddingH = 5;
    Object.defineProperty(this, "paddingH", {
        get: function () {
            return this._paddingH;
        },
        set: function (value) {
            this._paddingH = value;
            this.update();
        },
    });
    this._scrollPadding = 0;
    Object.defineProperty(this, "scrollPadding", {
        get: function () {
            return this._scrollPadding;
        },
        set: function (value) {
            this._scrollPadding = value;
            this.update();
        },
    });
    this._cellsCount = 2;
    Object.defineProperty(this, "cellsCount", {
        get: function () {
            return this._cellsCount;
        },
        set: function (value) {
            this._cellsCount = value;
            this.update();
        },
    });
    this._scroll = null;
    Object.defineProperty(this, "scroll", {
        get: function () {
            return this._scroll;
        },
        set: function (value) {
            if (this._scroll) {
                canvas.EventManager.removeEventListener(canvas.ui.ScrollEvent.EVENT_SCROLL, this._scroll, this.scrollHandler, this);
            }
            this._scroll = value;
            if (this._scroll) {
                canvas.EventManager.addEventListener(canvas.ui.ScrollEvent.EVENT_SCROLL, this._scroll, this.scrollHandler, this);
            }
        },
    });
    canvas.ui.Component.call(this);
    this._cellsCount = cellsCount ? cellsCount : 2;
    this.type = type ? type : canvas.ui.ListType.VERTICAL;
    this.multiSelect = false;
    this.virtual = true;
    this.reverseLayers = false;
    this.autoDestroy = true;
    this.items = [];
    this.mainContainer = new canvas.px.Container();
    this.wall = new canvas.px.Mask();
    this.mainContainer.addChild(this.wall);
    this.container = new canvas.px.Container();
    this.mainContainer.addChild(this.container);
    this.msk = new canvas.px.Mask();
    this.mainContainer.addChild(this.msk);
    this.mainContainer.mask = this.msk;
    this.addChild(this.mainContainer);
};
canvas.ui.List.prototype = Object.create(canvas.ui.Component.prototype);
canvas.ui.List.prototype.add = function (item, forceUpdate) {
    if (forceUpdate == undefined) forceUpdate = true;
    this.items.push(item);
    if (forceUpdate) this.update();
};
canvas.ui.List.prototype.remove = function (item, forceUpdate) {
    if (forceUpdate == undefined) forceUpdate = true;
    var index = this.items.indexOf(item);
    if (index >= 0) this.items.splice(index, 1);
    if (forceUpdate) this.update();
    if (autoDestroy) item.destroy();
};
canvas.ui.List.prototype.addAt = function (index, item, forceUpdate) {
    if (forceUpdate == undefined) forceUpdate = true;
    this.items[index] = item;
    if (forceUpdate) this.update();
};
canvas.ui.List.prototype.removeAt = function (index, forceUpdate) {
    if (forceUpdate == undefined) forceUpdate = true;
    var item = this.items[index];
    this.items.splice(index, 1);
    if (forceUpdate) this.update();
    if (autoDestroy) item.destroy();
};
canvas.ui.List.prototype.clear = function (forceUpdate) {
    if (forceUpdate == undefined) forceUpdate = true;
    if (this.autoDestroy) {
        var len = this.items.length;
        for (var i = 0; i < len; i++) {
            this.items[i].destroy();
        }
    }
    this.items = [];
    if (forceUpdate) this.update();
};
canvas.ui.List.prototype.update = function () {
    this.wall.setSize(this._width, this._height);
    this.msk.setSize(this._width, this._height);
    var len = this.items.length;
    this.container.removeChildren();
    var renderer;
    var j = 0;
    var k = 0;
    var tmp = 0;
    var max = 0;
    for (var i = 0; i < len; i++) {
        if (j == this.cellsCount) {
            j = 0;
            tmp += max;
            max = 0;
            k++;
        }
        renderer = this.items[i];
        if (this.reverseLayers) {
            this.container.addChildAt(renderer, 0);
        } else {
            this.container.addChild(renderer);
        }
        if (this.type == canvas.ui.ListType.VERTICAL) {
            renderer.position.set(j * (renderer._width + this.paddingH), tmp);
            max = Math.max(max, renderer._height + this.paddingV);
        } else {
            renderer.position.set(tmp, j * (renderer._height + this.paddingV));
            max = Math.max(max, renderer._width + this.paddingH);
        }
        j++;
    }
    if (this._scroll) {
        if (this.type == canvas.ui.ListType.VERTICAL) {
            if (this.container.height > this._height) {
                this.addChild(this.scroll);
                this.scroll.setSize(0, this._height);
                this.scroll.position.set(this._width - this.scroll._width + this.scrollPadding, 0);
                this.scroll.max = this.container.height - this._height + this.scrollMaxAdd;
                this.scroll.dragView.setSize(0, Math.max(16, Math.round((this._height - 32) * (this._height / this.container.height))));
                this.scroll.current = this.scroll.current;
            } else {
                this.scroll.max = 0;
                if (this.contains(this.scroll)) this.removeChild(this.scroll);
            }
        } else {
            if (this.container.width > this._width) {
                this.addChild(this.scroll);
                this.scroll.setSize(this._width, 0);
                this.scroll.position.set(0, this._height - this.scroll._height + this.scrollPadding);
                this.scroll.max = this.container.width - this._width + this.scrollMaxAdd;
                this.scroll.dragView.setSize(Math.max(16, Math.round((this._width - 32) * (this._width / this.container.width))), 0);
                this.scroll.current = this.scroll.current;
            } else {
                this.scroll.max = 0;
                if (this.contains(this.scroll)) this.removeChild(this.scroll);
            }
        }
        this.scrollHandler();
    }
};
canvas.ui.List.prototype.scrollHandler = function (event) {
    if (this.type == canvas.ui.ListType.VERTICAL) {
        this.container.y = -this.scroll.current;
    } else {
        this.container.x = -this.scroll.current;
    }
    var len = this.items.length;
    var item;
    for (var i = 0; i < len; i++) {
        item = this.items[i];
        if (this.type == canvas.ui.ListType.VERTICAL) {
            if (item.y >= this.scroll.current - item._height && item.y <= this.scroll.current + this._height) {
                if (this.reverseLayers) {
                    this.container.addChildAt(item, 0);
                } else {
                    this.container.addChild(item);
                }
            } else {
                if (this.container.contains(item)) this.container.removeChild(item);
            }
        } else {
            if (item.x >= this.scroll.current - item._width && item.x <= this.scroll.current + this._width) {
                if (this.reverseLayers) {
                    this.container.addChildAt(item, 0);
                } else {
                    this.container.addChild(item);
                }
            } else {
                if (this.container.contains(item)) this.container.removeChild(item);
            }
        }
    }
};
canvas.ui.List.prototype.select = function (target) {
    if (this.scroll && this.scroll.wasDragged) return;
    if (this.multiSelect) {
        target.selected = !target.selected;
    } else {
        var len = this.items.length;
        for (var i = 0; i < len; i++) {
            this.items[i].selected = this.items[i] === target;
        }
    }
    canvas.EventManager.dispatchEvent(canvas.ui.ListEvent.EVENT_SELECT, this, target);
};
canvas.ui.List.prototype.getSelectedItems = function () {
    var result = [];
    var len = this.items.length;
    for (var i = 0; i < len; i++) {
        if (this.items[i].selected) {
            result.push(this.items[i]);
        }
    }
    return result;
};
canvas.ui.List.prototype.destroy = function () {
    this.scroll = null;
    this.container.click = null;
    this.autoDestroy = true;
    this.clear();
    canvas.ui.Component.prototype.destroy.apply(this);
};
canvas.ui.ListRenderer = function (data, w, h) {
    this.oldData = null;
    this._data = null;
    Object.defineProperty(this, "data", {
        get: function () {
            return this._data;
        },
        set: function (value) {
            this.oldData = this._data;
            this._data = value;
            this.update();
        },
    });
    this._selected = false;
    Object.defineProperty(this, "selected", {
        get: function () {
            return this._selected;
        },
        set: function (value) {
            this._selected = value;
            this.updateSelection();
        },
    });
    canvas.ui.Component.call(this);
    this.click = this.clickHandler.bind(this);
    this.mouseover = this.overHandler.bind(this);
    this.mouseout = this.outHandler.bind(this);
    if (w != undefined) this._width = w;
    if (h != undefined) this._height = h;
    if (data != undefined) this.data = data;
};
canvas.ui.ListRenderer.prototype = Object.create(canvas.ui.Component.prototype);
canvas.ui.ListRenderer.prototype.updateSelection = function () {};
canvas.ui.ListRenderer.prototype.clickHandler = function () {
    if (this.parent && this.parent.parent.parent && this.parent.parent.parent.select) {
        this.parent.parent.parent.select(this);
    }
};
canvas.ui.ListRenderer.prototype.overHandler = function () {};
canvas.ui.ListRenderer.prototype.outHandler = function () {};
canvas.ui.ListRenderer.prototype.destroy = function () {
    this.click = null;
    this.mouseover = null;
    this.mouseout = null;
    canvas.ui.Component.prototype.destroy.apply(this);
};
canvas.ui.ComboBoxEvent = { EVENT_SELECT: "ComboBoxEvent.SELECT", EVENT_OPEN: "ComboBoxEvent.OPEN", EVENT_CLOSE: "ComboBoxEvent.CLOSE" };
canvas.ui.ComboBoxType = { UP: "UP", DOWN: "DOWN" };
canvas.ui.ComboBox = function (headerBack, headerRenderer, listBack, listRenderer, type) {
    Object.defineProperty(this, "enabled", {
        get: function () {
            return this._enabled;
        },
        set: function (value) {
            this._enabled = value;
            if (value) {
                this.filters = null;
            } else {
                this.filters = [canvas.Functions.getBlackAndWhite()];
            }
            this.interactive = this.interactiveChildren = value;
            this.close();
        },
        configurable: true,
    });
    this._selectedIndex = 0;
    Object.defineProperty(this, "selectedIndex", {
        get: function () {
            return this._selectedIndex;
        },
        set: function (value) {
            this._selectedIndex = value;
            this.selectedItem = this.list.items[this._selectedIndex].data;
            this.update();
        },
    });
    canvas.ui.Component.call(this);
    if (type == undefined) type = canvas.ui.ComboBoxType.DOWN;
    this.type = type;
    this.headerBack = headerBack;
    this.listBack = listBack;
    this.listRenderer = listRenderer;
    this.headerRenderer = headerRenderer;
    this.addChild(this.headerBack);
    this.addChild(this.headerRenderer);
    this.list = new canvas.ui.List(canvas.ui.ListType.VERTICAL, 1);
    this.listBack.addChild(this.list);
    this.headerBack.click = this.headerClickHandler.bind(this);
    canvas.EventManager.addEventListener(canvas.ui.ListEvent.EVENT_SELECT, this.list, this.listSelectHandler, this);
    this.interactive = true;
    this.mouseover = this.overHandler.bind(this);
    this.mouseout = this.outHandler.bind(this);
};
canvas.ui.ComboBox.prototype = Object.create(canvas.ui.Component.prototype);
canvas.ui.ComboBox.prototype.init = function (items) {
    this.list.clear();
    var len = items.length;
    if (len > 0) {
        for (var i = 0; i < len; i++) {
            this.list.add(new this.listRenderer(items[i]), false);
        }
    }
    this.setSize(this._width, this._height);
    this.selectedIndex = 0;
};
canvas.ui.ComboBox.prototype.update = function () {
    this.headerRenderer.data = this.selectedItem;
};
canvas.ui.ComboBox.prototype.setSize = function (width, height) {
    canvas.ui.Component.prototype.setSize.apply(this, [width, height]);
    if (width > 0) {
        this.headerBack.setSize(width, 0);
        this.headerRenderer.setSize(width, 0);
    }
    if (height > 0) {
    }
    this.list.setSize(width, height - this.headerBack.height);
    var len = this.list.items.length;
    for (var i = 0; i < len; i++) {
        this.list.items[i].setSize(this._width, 0);
    }
    this.listBack.setSize(width, Math.min(this.list.container.height + this.list.paddingV + 4, height - this.headerBack.height));
    if (this.type == canvas.ui.ComboBoxType.UP) {
        this.listBack.y = -this.listBack._height;
    } else {
        this.listBack.y = this.headerBack.height;
    }
};
canvas.ui.ComboBox.prototype.headerClickHandler = function (e) {
    if (this.listBack.parent) {
        this.close();
    } else {
        this.open();
    }
};
canvas.ui.ComboBox.prototype.open = function () {
    this.addChild(this.listBack);
    this.setSize(this._width, this._height);
    canvas.EventManager.addEventListener(canvas.Event.STAGE_MOUSE_UP, null, this.stageMouseUpHandler, this);
    canvas.EventManager.dispatchEvent(canvas.ui.ComboBoxEvent.EVENT_OPEN, this);
};
canvas.ui.ComboBox.prototype.isOpened = function () {
    return this.listBack.parent != null;
};
canvas.ui.ComboBox.prototype.stageMouseUpHandler = function (e) {
    if (this.isOver) return;
    this.close();
};
canvas.ui.ComboBox.prototype.close = function (e) {
    if (this.listBack.parent) {
        this.removeChild(this.listBack);
    }
    canvas.EventManager.removeEventListener(canvas.Event.STAGE_MOUSE_UP, null, this.stageMouseUpHandler, this);
    canvas.EventManager.dispatchEvent(canvas.ui.ComboBoxEvent.EVENT_CLOSE, this);
};
canvas.ui.ComboBox.prototype.listSelectHandler = function (e) {
    if (e.params) {
        this.selectedIndex = this.list.items.indexOf(e.params);
        canvas.EventManager.dispatchEvent(canvas.ui.ComboBoxEvent.EVENT_SELECT, this, this.selectedItem);
        this.close();
    }
};
canvas.ui.ComboBox.prototype.outHandler = function (e) {
    this.isOver = false;
};
canvas.ui.ComboBox.prototype.overHandler = function (e) {
    this.isOver = true;
};
canvas.ui.ComboBox.prototype.setSelectedItem = function (key, value) {
    var i,
        len = this.list.items.length;
    for (i = 0; i < len; i++) {
        if (value != undefined) {
            if (this.list.items[i].data[key] === value) {
                this.selectedIndex = i;
                return;
            }
        } else {
            if (this.list.items[i].data === key) {
                this.selectedIndex = i;
                return;
            }
        }
    }
};
canvas.ui.ComboBox.prototype.destroy = function () {
    this.headerBack.click = null;
    this.mouseover = null;
    this.mouseout = null;
    canvas.EventManager.removeEventListener(canvas.Event.STAGE_MOUSE_UP, null, this.stageMouseUpHandler, this);
    canvas.EventManager.removeEventListener(canvas.ui.ListEvent.EVENT_SELECT, this.list, this.listSelectHandler, this);
    canvas.ui.Component.prototype.destroy.apply(this, [{ children: true }]);
};
canvas.data.Artikuls = {
    loadingCount: 0,
    get: function (ids) {
        if (get_art_alt == undefined) {
            console.log("Warning! get_art_alt is not defined, can't get artikul info.");
            return false;
        }
        var simpleResult = false;
        if (typeof ids != "object") {
            ids = [ids];
            simpleResult = true;
        }
        var len = ids.length;
        var result = {};
        var obj;
        for (var i = 0; i < len; i++) {
            obj = get_art_alt("AA_" + ids[i]);
            if (!obj) {
                this.loadingCount++;
                loadArtifactArtikulsData(ids, this.complete.bind(this));
                return false;
            } else {
                result[ids[i]] = obj;
            }
        }
        return simpleResult ? result[ids[0]] : result;
    },
    complete: function () {
        this.loadingCount--;
        if (this.loadingCount < 1) {
            canvas.EventManager.dispatchEvent(canvas.Event.ARTIKULS_LOADED);
        }
    },
};
canvas.data.ItemPrototypeData = {
    EVENT_COMPLETE: "ItemPrototypeData.EVENT_COMPLETE",
    QUALITY_GREY: 0,
    QUALITY_GREEN: 1,
    QUALITY_BLUE: 2,
    QUALITY_VIOLET: 3,
    QUALITY_RED: 4,
    QUALITY_TURQUOISE: 5,
    prototypes: {},
    unParsedData: {},
    loadPrototype: function (id) {
        var str = (Math.floor(parseInt(id) * 0.01) * 100).toString();
        while (str.length < 5) str = "0" + str;
        if (this.unParsedData[str]) return;
        var url = canvas.Config.amfPath + "artifact_artikul_" + str + ".amf";
        this.unParsedData[url] = true;
        canvas.ResourceLoader.add([url]);
        canvas.EventManager.addEventListener(canvas.ResourceLoader.EVENT_COMPLETE, null, this.completeHandler, this);
    },
    completeHandler: function () {
        canvas.EventManager.removeEventListener(canvas.ResourceLoader.EVENT_COMPLETE, null, this.completeHandler, this);
        for (var str in this.unParsedData) {
            this.parse(canvas.ResourceLoader.get(str));
        }
        this.unParsedData = new Object();
        canvas.EventManager.dispatchEvent(this.EVENT_COMPLETE);
    },
    parse: function (data) {
        var obj, prototypeData;
        for (var i in data) {
            obj = data[i];
            prototypeData = new Object();
            prototypeData.id = obj.id;
            prototypeData.title = obj.title;
            prototypeData.description = obj.description;
            prototypeData.quality = obj.quality;
            prototypeData.picture = obj.picture;
            this.prototypes[prototypeData.id] = prototypeData;
        }
    },
    getItemPrototype: function (id) {
        var result = this.prototypes[id];
        if (!result) {
            this.loadPrototype(id);
        }
        return result;
    },
    getColorByQuality: function (quality) {
        switch (parseInt(quality)) {
            case this.QUALITY_GREY:
                return 6710886;
            case this.QUALITY_GREEN:
                return 3381504;
            case this.QUALITY_BLUE:
                return 3342591;
            case this.QUALITY_VIOLET:
                return 10027161;
            case this.QUALITY_RED:
                return 16711680;
            case this.QUALITY_TURQUOISE:
                return 93809;
            default:
                return 0;
        }
    },
};
canvas.data.battle.AuraData = function (id, title, image) {
    this.id = id;
    this.title = title;
    this.image = image;
};
canvas.data.battle.ComboData = function (id, description, level, seq, title) {
    this.id = id;
    this.description = description;
    this.level = level;
    this.seq = seq;
    this.title = title;
    this.size = this.seq.length;
};
canvas.data.battle.EffectData = function (type, image, ids) {
    this.type = type;
    this.image = image;
    this.ids = ids;
};
canvas.data.battle.EffectInfoData = function (id, image, count, title, finishTime, turnsLeft) {
    this.id = id;
    this.image = image;
    this.count = count;
    this.title = title;
    this.finishTime = finishTime;
    this.turnsLeft = turnsLeft;
};
canvas.data.battle.EffectInfoData.prototype.equals = function (effect) {
    return this.id == effect.id && this.image == effect.image && this.count == effect.count && this.title == effect.title && this.finishTime == effect.finishTime && this.turnsLeft == effect.turnsLeft;
};
canvas.data.battle.EffectInfoData.prototype.add = function (effect) {
    this.count += effect.count;
    if (effect.finishTime > this.finishTime) this.finishTime = effect.finishTime;
    if (effect.turnsLeft > this.turnsLeft) this.turnsLeft = effect.turnsLeft;
};
canvas.data.battle.EffectInfoData.prototype.toString = function () {
    return (
        "id=" + this.id + ", image=" + this.image + ", count=" + this.count + ", title=" + this.title + ", timeLeft=" + Math.floor(this.finishTime - Date.now() / 1e3 - canvas.app.mem.model.effectsDeltaTime) + ", turnsLeft=" + this.turnsLeft
    );
};
canvas.data.battle.PersData = function () {
    this.wasChanged = true;
    this._id = 0;
    Object.defineProperty(this, "id", {
        get: function () {
            return this._id;
        },
        set: function (value) {
            if (this._id != value) {
                this._id = value;
                this.wasChanged = true;
            }
        },
    });
    this._nick = "";
    Object.defineProperty(this, "nick", {
        get: function () {
            return this._nick;
        },
        set: function (value) {
            if (this._nick != value) {
                this._nick = value;
                this.wasChanged = true;
            }
        },
    });
    this._level = 0;
    Object.defineProperty(this, "level", {
        get: function () {
            return this._level;
        },
        set: function (value) {
            if (this._level != value) {
                this._level = value;
                this.wasChanged = true;
            }
        },
    });
    this._team = 0;
    Object.defineProperty(this, "team", {
        get: function () {
            return this._team;
        },
        set: function (value) {
            if (this._team != value) {
                this._team = value;
                this.wasChanged = true;
            }
        },
    });
    this._status = -1;
    Object.defineProperty(this, "status", {
        get: function () {
            return this._status;
        },
        set: function (value) {
            if (this._status != value) {
                this._status = value;
                this.wasChanged = true;
            }
        },
    });
    this._hpRatio = 1;
    Object.defineProperty(this, "hpRatio", {
        get: function () {
            return this._hpRatio;
        },
        set: function (value) {
            if (this._hpRatio != value) {
                this._hpRatio = value;
                this.wasChanged = true;
            }
        },
    });
    this._mpRatio = 0;
    Object.defineProperty(this, "mpRatio", {
        get: function () {
            return this._mpRatio;
        },
        set: function (value) {
            if (this._mpRatio != value) {
                this._mpRatio = value;
                this.wasChanged = true;
            }
        },
    });
    this._clanImage = "";
    Object.defineProperty(this, "clanImage", {
        get: function () {
            return this._clanImage;
        },
        set: function (value) {
            if (this._clanImage != value) {
                this._clanImage = value;
                this.wasChanged = true;
            }
        },
    });
    this._isBot = false;
    Object.defineProperty(this, "isBot", {
        get: function () {
            return this._isBot;
        },
        set: function (value) {
            if (this._isBot != value) {
                this._isBot = value;
                this.wasChanged = true;
            }
        },
    });
    this._isShadow = false;
    Object.defineProperty(this, "isShadow", {
        get: function () {
            return this._isShadow;
        },
        set: function (value) {
            if (this._isShadow != value) {
                this._isShadow = value;
                this.wasChanged = true;
            }
        },
    });
    this._flags = 0;
    Object.defineProperty(this, "flags", {
        get: function () {
            return this._flags;
        },
        set: function (value) {
            if (this._flags != value) {
                this._flags = value;
                this.wasChanged = true;
            }
        },
    });
    this._fightId = 0;
    Object.defineProperty(this, "fightId", {
        get: function () {
            return this._fightId;
        },
        set: function (value) {
            if (this._fightId != value) {
                this._fightId = value;
                this.wasChanged = true;
            }
        },
    });
};
canvas.data.battle.PersData.prototype.setRatios = function (hp, hpMax, mp, mpMax) {
    this.hpRatio = hpMax ? Math.max(0, Math.min(1, hp / hpMax)) : 0;
    this.mpRatio = mpMax ? Math.max(0, Math.min(1, mp / mpMax)) : 0;
};
canvas.data.battle.SkeletonData = function (source, gender) {
    this.source = source;
    this.slots = {};
    var a = source.split(",");
    var len = a.length;
    var j = 0;
    var k = 0;
    for (var i = 0; i < len; i++) {
        var slotName = canvas.Const.SK_SLOT_NAMES[k];
        if (!this.slots[slotName]) {
            this.slots[slotName] = [];
        }
        this.slots[slotName].push(new canvas.data.battle.SkeletonLayerData(a[i], canvas.Const.SK_WPN_SLOT_NAMES.indexOf(slotName) < 0 ? gender : "WPN"));
        j++;
        if (j >= 3) {
            j = 0;
            k++;
        }
    }
};
canvas.data.battle.SkeletonLayerData = function (source, gender) {
    var a = source.split(";");
    var id = a[0] & 65535;
    this.colors = [0, a[1], a[2]];
    this.animation = a[3] ? canvas.Functions.extractSwfName(a[3]) : "";
    if (id == 0) {
        this.url = "";
    } else {
        this.colors[0] = a[0] >> 16;
        var packName = "p" + canvas.Functions.setNumberLen(id, 4) + (this.colors[0] > 0 ? "_" + this.colors[0] : "");
        this.url = canvas.Config.packsPath + gender + "/" + packName + "/" + packName + ".json";
    }
};
canvas.data.clanWar.UserData = function (login, ready, online, id, hp, mp, voivoda, room, delayed) {
    this.login = login;
    this.ready = ready == undefined ? true : ready;
    this.online = online == undefined ? true : online;
    this.id = id == undefined ? "0" : id;
    this.hp = hp == undefined ? -1 : hp;
    this.mp = mp == undefined ? -1 : mp;
    this.voivoda = voivoda == undefined ? false : voivoda;
    this.room = room == undefined ? 0 : room;
    this.delayed = delayed == undefined ? false : delayed;
};
canvas.data.cube.ItemData = function (id, image, title, count) {
    if (count == undefined) count = 1;
    this.id = id;
    this.image = canvas.Config.artifactsPath + image;
    this.title = title;
    this.count = parseInt(count);
};
canvas.data.leftMenu.ItemData = function (source) {
    if (source != undefined) {
        this.slot = parseInt(source[0]);
        this.id = source[1];
        this.count = parseInt(source[2]);
        this.image = source[3];
        this.variant = false;
        this.disable = false;
        if (source.length > 4) {
            source[8] = source[8] == "0" ? "1" : source[8];
            this.cdTime = Math.max(parseInt(source[4]), canvas.app.leftMenu.Const.MIN_COOLDOWN);
            this.cdGroupId = parseInt(source[5]);
            this.cdLeft = parseInt(source[6]);
            this.disable = String(source[7]) == "1";
            this.cdType = parseInt(source[9]);
            this.variant = parseInt(source[8]) != 1;
            this.variantNum = parseInt(source[8]);
        }
    }
};
canvas.data.location.DCampaign = function () {
    this.title = "";
    this.picture = "";
    this.finishTime = 0;
};
canvas.data.location.DEvent = function () {
    this.title = "";
    this.url = "";
    this.picture = "";
    this.description = "";
    this.finishTime = 0;
};
canvas.data.location.DFronts = function () {
    this.frontsEnabled = false;
    this.frontsPanelEnabled = false;
    this.humLocs = 0;
    this.magLocs = 0;
    this.frontTitle = "";
    this.locationsData = [];
    this.currentLocationData = new canvas.data.location.DFrontsLoc();
    this.availableLocationData = null;
};
canvas.data.location.DFrontsLoc = function () {
    this.id = "0";
    this.title = "Location";
    this.image = "images/data/areas/zg_ruin_plosh.jpg";
    this.owner = 0;
    this.status = 2;
    this.description = "Description";
    this.cooldown = 0;
    this.cooldownStart = 0;
    this.fightAvail = true;
    this.fightID = "";
    this.weight = 0;
};
canvas.data.location.DResurrect = function () {
    this.id = 0;
    this.title = "";
    this.enabled = false;
    this.error = "";
    this.picture = "";
};
canvas.data.manor.DBuilding = function () {
    this.type = 0;
    this.level = 0;
    this.name = "";
    this.title = "";
    this.desc = "";
    this.image = "";
    this.picture = "";
    this.cost = 0;
    this.enabled = true;
    this.destroyEnabled = true;
    this.ownDichIndex = 0;
    this.dx = 0;
    this.dy = 0;
};
canvas.data.manor.DBuilding.TYPE_MAIN = 1;
canvas.data.manor.DBuilding.TYPE_EXP = 2;
canvas.data.manor.DBuilding.TYPE_OBELISK = 3;
canvas.data.manor.DBuilding.TYPE_PETS = 4;
canvas.data.manor.DBuilding.TYPE_STORAGE = 5;
canvas.data.manor.DBuilding.TYPE_WORKSHOP = 6;
canvas.data.manor.DBuilding.TYPE_MAIL = 7;
canvas.data.manor.DBuilding.TYPE_HOSPITAL = 8;
canvas.data.manor.DBuilding.TYPE_MARKET = 9;
canvas.data.manor.DBuilding.TYPE_WALL = 10;
canvas.data.manor.DBuilding.TYPE_TREE = 11;
canvas.data.manor.DBuilding.TYPE_MINE1 = 12;
canvas.data.manor.DBuilding.TYPE_MINE2 = 13;
canvas.data.manor.DBuilding.TYPE_MINE3 = 14;
canvas.data.manor.DBuilding.TYPE_MAKE1 = 15;
canvas.data.manor.DBuilding.TYPE_MAKE2 = 16;
canvas.data.manor.DBuilding.TYPE_MAKE3 = 17;
canvas.data.manor.DBuilding.TYPE_PORTAL = 18;
canvas.data.manor.DBuilding.TYPE_HALLOWEEN = 19;
canvas.data.manor.DBuilding.typeIsMultiBuild = function (type) {
    return canvas.app.manor.model.multiBuildingTypes.indexOf(type) >= 0;
};
canvas.data.manor.DCampActiveMission = function () {
    this.id = 0;
    this.missionId = 0;
    this.type = 0;
    this.objectId = 0;
    this.pet1 = 0;
    this.pet2 = 0;
    this.pet3 = 0;
    this.stime = 0;
    this.dtime = 0;
};
canvas.data.manor.DCampActiveMission.prototype.isResource = function () {
    return this.type >= 1 && this.type <= 3;
};
canvas.data.manor.DCampActiveMission.prototype.isArtifact = function () {
    return this.type >= 4 && this.type <= 6;
};
canvas.data.manor.DCampData = function () {
    this.missions;
    this.pets;
    this.resourceSlots = 1;
    this.artifactSlots = 1;
    this.selectedSlot = 1;
    this.selectedType = 0;
    this.artifacts;
    this.forgeItems;
    this.forgeLevels;
    this.fragmentItem;
    this.currentDestructItemAid = "";
    this.currentForgeLevel = 0;
    this.currentActiveMission;
    this.activeMissions;
    this.waitChangeCountArtifacts;
};
canvas.data.manor.DCampData.TYPE_COUNT = 6;
canvas.data.manor.DCampData.ARTIFACT_TYPE_COUNT = 3;
canvas.data.manor.DCampData.ARTIFACT_PETS_MAX = 3;
canvas.data.manor.DCampData.PET_A_DISCIPLINE = "PET_A_DISCIPLINE";
canvas.data.manor.DCampData.PET_S_GEMS = "PET_S_GEMS";
canvas.data.manor.DCampData.PET_S_FISH = "PET_S_FISH";
canvas.data.manor.DCampData.PET_S_GRASS = "PET_S_GRASS";
canvas.data.manor.DCampData.PET_S_ITEMS = "PET_S_ITEMS";
canvas.data.manor.DCampData.PET_S_TALISMANS = "PET_S_TALISMANS";
canvas.data.manor.DCampData.PET_S_VALUE = "PET_S_VALUE";
canvas.data.manor.DCampData.PET_A_STEALTH = "PET_A_STEALTH";
canvas.data.manor.DCampData.prototype.parse = function (data) {
    var dCampMission;
    var str;
    var str2;
    var dat;
    var obj;
    var dItem;
    var len;
    var i;
    var dCampReward;
    if (data.settings) {
        this.resourceSlots = parseInt(data.settings.FARM_SLOTS);
        this.artifactSlots = parseInt(data.settings.SEARCH_SLOTS);
    }
    if (data.artifacts) {
        if (!this.artifacts) this.artifacts = new Object();
        for (str in data.artifacts) {
            obj = data.artifacts[str];
            dItem = new canvas.data.manor.DItem();
            dItem.canBeZeroCount = true;
            dItem.aid = dItem.id = obj.id;
            dItem.image = obj.image;
            dItem.count = obj.count;
            dItem.title = obj.title;
            this.applyAlt(obj.alt);
            this.artifacts[dItem.aid] = dItem;
        }
    }
    if (data.missions) {
        if (!this.missions) this.missions = new Object();
        for (str in data.missions) {
            dat = data.missions[str];
            dCampMission = new canvas.data.manor.DCampMission();
            dCampMission.bonusDifficulty = dat.bonus_difficulty;
            dCampMission.bonusId = dat.bonus_id;
            dCampMission.duration = dat.duration;
            dCampMission.exp = dat.exp;
            dCampMission.id = dat.id;
            dCampMission.injury = dat.injury;
            dCampMission.price1Amount = dat.price1_amount;
            dCampMission.price1Id = dat.price1_id;
            dCampMission.price2Amount = dat.price2_amount;
            dCampMission.price2Id = dat.price2_id;
            dCampMission.type = parseInt(dat.type);
            dCampMission.title = dat.title;
            if (dat.rewards) {
                dCampMission.rewards = new Array();
                len = dat.rewards.length;
                for (i = 0; i < len; i++) {
                    dCampReward = new canvas.data.manor.DCampReward();
                    dCampReward.bonusDifficulty = dat.rewards[i].difficulty;
                    dCampReward.skillValue = dat.rewards[i].skill_value;
                    dCampReward.item = this.artifacts[dat.rewards[i].reward];
                    dCampMission.rewards.push(dCampReward);
                }
            }
            dCampMission.objects = dat["objects"];
            this.missions[dCampMission.type] = dCampMission;
        }
    }
    if (data.pets) this.parsePets(data.pets);
    if (data.forge) {
        var forge = data.forge;
        this.forgeItems = [];
        len = forge.items.length;
        for (str in forge.items) {
            obj = forge.items[str];
            if (typeof obj == "function") continue;
            this.addForgeItem(obj);
        }
        this.forgeLevels = [];
        len = forge.builds.length;
        for (i = 0; i < len; i++) {
            this.forgeLevels.push(parseInt(forge.builds[i]));
        }
        this.fragmentItem = this.artifacts[forge.fragment];
    }
    if (data.missions_active) this.parseActiveMissions(data.missions_active);
};
canvas.data.manor.DCampData.prototype.addForgeItem = function (obj, testStack) {
    var dItem;
    if (testStack) {
        var i,
            len = this.forgeItems.length;
        for (i = 0; i < len; i++) {
            dItem = this.forgeItems[i];
            if (dItem.id == obj.id) {
                dItem.count++;
                return;
            }
        }
    }
    dItem = new canvas.data.manor.DItem();
    dItem.canBeZeroCount = true;
    dItem.aid = dItem.id = obj.id;
    dItem.image = obj.image;
    dItem.title = obj.title;
    dItem.count = obj.count;
    this.applyAlt(obj.alt);
    this.forgeItems.push(dItem);
};
canvas.data.manor.DCampData.prototype.parseActiveMissions = function (data) {
    if (!this.activeMissions) this.activeMissions = new Array();
    var obj;
    var dActiveMission;
    var i,
        len = data.length;
    for (i = 0; i < len; i++) {
        obj = data[i];
        dActiveMission = new canvas.data.manor.DCampActiveMission();
        dActiveMission.id = parseInt(obj.id);
        dActiveMission.missionId = parseInt(obj.mission_id);
        dActiveMission.type = parseInt(obj.mission_type);
        dActiveMission.objectId = parseInt(obj.farm_id);
        dActiveMission.pet1 = parseInt(obj.pet1);
        dActiveMission.pet2 = parseInt(obj.pet2);
        dActiveMission.pet3 = parseInt(obj.pet3);
        dActiveMission.stime = parseInt(obj.stime);
        dActiveMission.dtime = parseInt(obj.dtime);
        this.removeActiveMission(dActiveMission);
        this.addActiveMission(dActiveMission);
    }
};
canvas.data.manor.DCampData.prototype.applyMissionToPets = function (mission) {
    if (mission.pet1 > 0 && this.pets[mission.pet1]) this.pets[mission.pet1].mission = mission;
    if (mission.pet2 > 0 && this.pets[mission.pet2]) this.pets[mission.pet2].mission = mission;
    if (mission.pet3 > 0 && this.pets[mission.pet3]) this.pets[mission.pet3].mission = mission;
};
canvas.data.manor.DCampData.prototype.freeMissionPets = function (mission) {
    if (mission.pet1 > 0 && this.pets[mission.pet1]) this.pets[mission.pet1].mission = null;
    if (mission.pet2 > 0 && this.pets[mission.pet2]) this.pets[mission.pet2].mission = null;
    if (mission.pet3 > 0 && this.pets[mission.pet3]) this.pets[mission.pet3].mission = null;
};
canvas.data.manor.DCampData.prototype.addActiveMission = function (mission) {
    this.activeMissions.push(mission);
    this.applyMissionToPets(mission);
};
canvas.data.manor.DCampData.prototype.removeActiveMission = function (mission) {
    var activeMission;
    var i,
        len = this.activeMissions.length;
    for (i = 0; i < len; i++) {
        activeMission = this.activeMissions[i];
        if (activeMission.id == mission.id) {
            this.activeMissions.splice(i, 1);
            this.freeMissionPets(activeMission);
            break;
        }
    }
};
canvas.data.manor.DCampData.prototype.parsePets = function (data) {
    var dCampPet;
    var dItem;
    var str;
    var str2;
    var dat;
    var obj;
    var a;
    if (!this.pets) this.pets = new Object();
    for (str in data) {
        dat = data[str];
        dCampPet = new canvas.data.manor.DCampPet();
        dCampPet.id = dat.id;
        dCampPet.title = dat.title;
        dCampPet.image = canvas.Config.dataPath + "pets/" + dat.image;
        dCampPet.skills = dat.skills;
        dCampPet.mission = dat.mission_id > 0 ? this.missions[dat.mission_id] : null;
        dCampPet.canQuest = dat.can_quest;
        dCampPet.item = new canvas.data.manor.DItem();
        dCampPet.item.title = dCampPet.title;
        dCampPet.item.image = dCampPet.image;
        a = [];
        if (dat.abilities.family) a.push(dat.abilities.family);
        if (dat.abilities.ability1) a.push(dat.abilities.ability1);
        if (dat.abilities.ability2) a.push(dat.abilities.ability2);
        if (dat.abilities.ability3) a.push(dat.abilities.ability3);
        var j,
            len2 = a.length;
        for (j = 0; j < len2; j++) {
            str2 = a[j];
            obj = dat.artifacts[str2];
            dItem = new canvas.data.manor.DItem();
            dItem.aid = dItem.id = obj.id;
            dItem.title = obj.title;
            dItem.image = obj.image;
            dCampPet.artifacts.push(dItem);
            this.applyAlt(obj.alt);
        }
        if (this.pets[dCampPet.id]) {
            dCampPet.mission = this.pets[dCampPet.id].mission;
        }
        this.pets[dCampPet.id] = dCampPet;
    }
};
canvas.data.manor.DCampData.prototype.getTypeByIndex = function (index) {
    switch (index) {
        case 1:
            return canvas.data.manor.DCampData.PET_S_GRASS;
        case 2:
            return canvas.data.manor.DCampData.PET_S_GEMS;
        case 3:
            return canvas.data.manor.DCampData.PET_S_FISH;
        case 4:
            return canvas.data.manor.DCampData.PET_S_ITEMS;
        case 5:
            return canvas.data.manor.DCampData.PET_S_TALISMANS;
        case 6:
            return canvas.data.manor.DCampData.PET_S_VALUE;
    }
    return "";
};
canvas.data.manor.DCampData.prototype.getTitleByIndex = function (index) {
    switch (index) {
        case 1:
            return canvas.Translator.getText(335);
        case 2:
            return canvas.Translator.getText(336);
        case 3:
            return canvas.Translator.getText(337);
        case 4:
            return canvas.Translator.getText(333);
        case 5:
            return canvas.Translator.getText(331);
        case 6:
            return canvas.Translator.getText(332);
    }
    return "";
};
canvas.data.manor.DCampData.prototype.parseDestructResult = function (data) {
    var len = this.forgeItems.length;
    var i;
    var item;
    for (i = 0; i < len; i++) {
        item = this.forgeItems[i];
        if (item.aid == this.currentDestructItemAid) {
            if (item.count == 1) {
                this.forgeItems.splice(i, 1);
            }
            item.count--;
            break;
        }
    }
    this.fragmentItem.count += data.talisman_amount;
};
canvas.data.manor.DCampData.prototype.deltaFragment = function (level) {
    if (level == undefined) level = 0;
    this.fragmentItem.count -= this.forgeLevels[level];
};
canvas.data.manor.DCampData.prototype.getActiveMissionsByTypes = function (types) {
    var result = [];
    var dActiveMission;
    var i,
        len = this.activeMissions.length;
    for (i = 0; i < len; i++) {
        dActiveMission = this.activeMissions[i];
        if (types.indexOf(dActiveMission.type) >= 0) {
            result.push(dActiveMission);
        }
    }
    return result;
};
canvas.data.manor.DCampData.prototype.applyAlt = function (alt) {
    if (alt) {
        var str = alt.replace('<script type="text/javascript">', "");
        str = str.replace("</script>", "");
        eval(str);
    }
};
canvas.data.manor.DCampData.prototype.changeArtifactsCount = function () {
    var str;
    if (this.waitChangeCountArtifacts) {
        for (str in this.waitChangeCountArtifacts) {
            if (this.artifacts[str]) {
                this.artifacts[str].count -= this.waitChangeCountArtifacts[str];
            }
        }
        this.waitChangeCountArtifacts = null;
    }
};
canvas.data.manor.DCampData.prototype.haveResourceMission = function () {
    if (!this.missions) return false;
    var m;
    for (var str in this.missions) {
        m = this.missions[str];
        if (m.isResource()) return true;
    }
    return false;
};
canvas.data.manor.DCampData.prototype.haveArtifactMission = function () {
    if (!this.missions) return false;
    var m;
    for (var str in this.missions) {
        m = this.missions[str];
        if (m.isArtifact()) return true;
    }
    return false;
};
canvas.data.manor.DCampMission = function () {
    this.id = 1;
    this.type = 1;
    this.title = "";
    this.bonusDifficulty = 3e3;
    this.bonusId = 3;
    this.duration = 1800;
    this.exp = 50;
    this.injury = 100;
    this.price1Amount = 3;
    this.price1Id = 1;
    this.price2Amount = 3;
    this.price2Id = 1;
    this.item;
    this.rewards;
    this.objects;
};
canvas.data.manor.DCampMission.prototype.isResource = function () {
    return this.type >= 1 && this.type <= 3;
};
canvas.data.manor.DCampMission.prototype.isArtifact = function () {
    return this.type >= 4 && this.type <= 6;
};
canvas.data.manor.DCampMission.prototype.getRewardBySkill = function (value) {
    var reward;
    var result = this.rewards ? this.rewards[0] : null;
    var i,
        len = this.rewards.length;
    for (i = 0; i < len; i++) {
        reward = this.rewards[i];
        if (value >= reward.skillValue && (!result || result.skillValue < reward.skillValue)) {
            result = reward;
        }
    }
    return result;
};
canvas.data.manor.DCampPet = function () {
    this.id = 0;
    this.title = "";
    this.image = "";
    this.skills = {};
    this.artifacts = [];
    this.mission;
    this.item;
    this.canQuest = true;
};
canvas.data.manor.DCampPet.prototype.getSkill = function (name) {
    return this.skills[name] ? this.skills[name] : 0;
};
canvas.data.manor.DCampPet.prototype.getSkillByIndex = function (index) {
    return this.getSkill(canvas.app.manor.model.campData.getTypeByIndex(index));
};
canvas.data.manor.DCampPet.prototype.missionIsComplete = function () {
    return canvas.app.manor.model.serverTime.getTime() >= this.mission.dtime;
};
canvas.data.manor.DCampReward = function () {
    this.bonusDifficulty = 3e3;
    this.item;
    this.skillValue = 0;
};
canvas.data.manor.DCraftData = function () {
    this.queueSizeMax = 0;
    this.price = 0;
    this.requests;
    this.requestsCompleted;
    this.item;
    this.item2;
    this.materialCount = 0;
};
canvas.data.manor.DCraftRequest = function () {
    this.id = "";
    this.recipe = "";
    this.count = 1;
    this.duration = 0;
    this.durationMax = 0;
    this.item;
};
canvas.data.manor.DItem = function (source) {
    this._count = 1;
    Object.defineProperty(this, "count", {
        get: function () {
            return this._count;
        },
        set: function (value) {
            this.stackable = value > 0;
            if (this.canBeZeroCount) {
                this._count = value < 0 ? 0 : value;
            } else {
                this._count = value < 1 ? 1 : value;
            }
        },
    });
    this._count2 = 1;
    Object.defineProperty(this, "count2", {
        get: function () {
            return this._count2;
        },
        set: function (value) {
            this._count2 = value;
        },
    });
    this.id = "";
    this.aid = "";
    this.image = "";
    this.title = "None";
    this.time = 0;
    this.timeFull = 0;
    this.stackable = false;
    this.area = "";
    this.flags = new Object();
    this.enchantQuality = 0;
    this.enchantParam = 0;
    this.enchant2 = 0;
    this.enchant3 = 0;
    this.type = 0;
    this.color = 0;
    this.itemFlags = 0;
    this.canBeZeroCount = false;
    if (source) {
        this.id = source.id;
        this.image = source.picture;
        this.title = source.title;
        this.count = parseInt(source.cnt);
        this.aid = source.artikul_id;
        this.flags.cell = source.cell == "1";
        this.flags.storage = source.storage == "1";
        this.itemFlags = source.flags || 0;
        this.time = source.time_expire ? parseInt(source.time_expire) : 0;
        this.type = parseInt(source.type_id);
        this.color = parseInt(source.quality);
        if (source.enchant_quality) this.enchantQuality = parseInt(source.enchant_quality);
        if (source.enchant_param) this.enchantParam = parseInt(source.enchant_param);
        if (source.enchant2) this.enchant2 = source.enchant2;
        if (source.enchant3) this.enchant3 = source.enchant3;
    }
};
canvas.data.manor.DItem.prototype.clone = function () {
    var result = new canvas.data.manor.DItem();
    result.area = this.area;
    result.count = this.count;
    result.id = this.id;
    result.aid = this.aid;
    result.image = this.image;
    result.time = this.time;
    result.timeFull = this.timeFull;
    result.title = this.title;
    return result;
};
canvas.data.manor.DItem.prototype.equals = function (target) {
    return this.aid == target.aid && this.isNonTransferable() == target.isNonTransferable() && this.stackable == target.stackable;
};
canvas.data.manor.DItem.prototype.isNonTransferable = function () {
    var FLAG_NON_TRANSFERABLE = 32;
    return canvas.Functions.testFlag(this.itemFlags, FLAG_NON_TRANSFERABLE);
};
canvas.data.manor.DItemCell = function () {
    this.area = "";
    this.title = "";
    this.size = 0;
    this.items = new Array();
};
canvas.data.manor.DKennel = function () {
    this.canKill = 0;
    this.canKillTotal = 0;
    this.killPriceExt = 0;
    this.killColldown = 0;
    this.killBigCooldown = 0;
    this.killTime = 0;
    this.killBigTime = 0;
    this.bots;
};
canvas.data.manor.DKennel.prototype.getBotById = function (id) {
    var bot,
        i,
        len = this.bots.length;
    for (i = 0; i < len; i++) {
        bot = this.bots[i];
        if (bot.id == id) return bot;
    }
    return null;
};
canvas.data.manor.DKennel.prototype.getStartTime = function () {
    return Math.max(this.killTime, this.killBigTime);
};
canvas.data.manor.DKennel.prototype.getFinishTime = function () {
    return this.getStartTime() + this.getCoolDown();
};
canvas.data.manor.DKennel.prototype.getCoolDown = function () {
    return this.killTime > this.killBigTime ? this.killColldown : this.killBigCooldown;
};
canvas.data.manor.DKennelBot = function () {
    this.id = 0;
    this.nick = "";
    this.picture = "";
    this.moneyMin = 0;
    this.moneyMax = 0;
    this.price = 0;
    this.exp = 0;
};
canvas.data.manor.DLabourRequest = function () {
    this.user;
    this.labour = 0;
    this.price = 0;
    this.id = "";
};
canvas.data.manor.DLocation = function () {
    this.id = 0;
    this.areaID = 0;
    this.picture = "";
    this.title = "";
    this.error = "";
};
canvas.data.manor.DPet = function () {
    this.id = "";
    this.title = "";
    this.image = "";
    this.swf = "";
    this.exp = 0;
    this.expUp = 0;
    this.time = 0;
    this.timeFull = 0;
    this.level = 0;
    this.error = "";
    this.color = 0;
};
canvas.data.manor.DPetTrainingType = function () {
    this.id = "";
    this.duration = 0;
    this.feedCost = 0;
    this.exp = 0;
};
canvas.data.manor.DPortal = function () {
    this.level = 0;
    this.status = 0;
    this.locationID = 0;
};
canvas.data.manor.DRecipe = function () {
    this.id = "";
    this.title = "";
    this.duration = 0;
    this.items;
    this.image = "";
    this.resultCount = 1;
    this.resultAid = "";
    this.favorite = false;
};
canvas.data.manor.DSellRequest = function () {
    this.user;
    this.price = 0;
    this.id = "";
};
canvas.data.manor.DSortData = function (type, title, sortDirection) {
    this.type = type;
    this.title = title;
};
canvas.data.manor.DSortData.TYPE_DEFAULT = "typeDefault";
canvas.data.manor.DSortData.TYPE_TYPE = "typeType";
canvas.data.manor.DSortData.TYPE_TITLE = "typeTitle";
canvas.data.manor.DSortData.TYPE_COLOR = "typeColor";
canvas.data.manor.DSortData.TYPE_TIME = "typeTime";
canvas.data.manor.DSortData.TYPE_LEVEL = "typeLevel";
canvas.data.manor.DThroneRoomData = function (par) {
    this._currentType = 0;
    Object.defineProperty(this, "currentType", {
        get: function () {
            return this._currentType;
        },
        set: function (value) {
            this._currentType = value;
            this.userData.redressItemID = 0;
        },
    });
    this.typesPath = par.typesPath != undefined ? par.typesPath : "images/data/locale/ru/amf/throne_room_types.amf";
    this.itemsPath = par.itemsPath != undefined ? par.itemsPath : "images/data/locale/ru/amf/throne_room_items.amf";
    this.watchMode = this.guestMode = par.Guest != undefined ? par.Guest == "1" : false;
    canvas.data.manor.throne.Prototypes.init();
    this.userData = new canvas.data.manor.throne.UserData();
    var itemData;
    var i;
    if (this.guestMode && par.ThroneRoomItems) {
        if (par.throne_room_background) this.userData.throneRoomBack = par.throne_room_background;
        if (par.throne_picture) this.userData.throneRoomFront = par.throne_picture;
        if (par.throne_room_throne_layer) this.userData.throneRoomFrontLayerIndex = par.throne_room_throne_layer;
        this.shopItems = new Array();
        this.userData.items = new Array();
        var a = JSON.parse(par.ThroneRoomItems);
        a.push(canvas.data.manor.throne.Prototypes.THRONE_ITEM_ID);
        if (a && a.length) {
            var i,
                id,
                len = a.length;
            for (i = 0; i < len; i++) {
                id = a[i];
                itemData = new canvas.data.manor.throne.ItemData(id);
                itemData.isActive = true;
                itemData.mode = canvas.data.manor.throne.ItemData.MODE_MY;
                this.userData.items.push(itemData);
            }
        }
    }
};
canvas.data.manor.DThroneRoomData.prototype.init = function () {
    canvas.data.manor.throne.Prototypes.storeTypePrototypes(canvas.ResourceLoader.get("throne_room_types"));
    canvas.data.manor.throne.Prototypes.storeItemPrototypes(canvas.ResourceLoader.get("throne_room_items"));
};
canvas.data.manor.DThroneRoomData.prototype.parseShopItems = function (data) {
    canvas.data.manor.throne.Prototypes.storeArtifactPrototypes(data.artikul_hash);
    canvas.data.manor.throne.Prototypes.storeArtifactPrototypes(data.badges_artikuls);
    this.shopItems = new Array();
    var obj, str;
    for (str in data.artikul_hash) {
        obj = data.artikul_hash[str];
        if (obj) this.shopItems.push(canvas.data.manor.throne.Serializer.deserializeShopItem(obj));
    }
    this.updateActiveShopItems();
};
canvas.data.manor.DThroneRoomData.prototype.parseConf = function (data) {
    this.userData.throneRoomBack = data.throne_room_background;
    canvas.data.manor.throne.Prototypes.getItemPrototype(canvas.data.manor.throne.Prototypes.THRONE_ITEM_ID).picture = canvas.data.manor.throne.Prototypes.getTypePrototype(canvas.data.manor.throne.Prototypes.THRONE_TYPE_ID).imageURL =
        data.throne_picture;
    canvas.data.manor.throne.Prototypes.getTypePrototype(canvas.data.manor.throne.Prototypes.THRONE_TYPE_ID).layerIndex = data.throne_room_throne_layer;
    this.userData.items = new Array();
    var obj;
    var itemData;
    var i,
        len = data.items.length;
    for (i = 0; i < len; i++) {
        obj = data.items[i];
        itemData = canvas.data.manor.throne.Serializer.deserializeItem(obj);
        if (!itemData.isExpired()) this.userData.items.push(itemData);
    }
    itemData = new canvas.data.manor.throne.ItemData(canvas.data.manor.throne.Prototypes.THRONE_ITEM_ID);
    itemData.isActive = true;
    itemData.id = 0;
    itemData.mode = canvas.data.manor.throne.ItemData.MODE_MY;
    this.userData.items.push(itemData);
    this.updateActiveShopItems();
};
canvas.data.manor.DThroneRoomData.prototype.mergeItems = function (data) {
    var obj;
    var itemData;
    var i,
        j,
        k,
        len = data.length,
        len2;
    for (j = 0; j < len; j++) {
        obj = data[j];
        i = 0;
        len2 = this.userData.items.length;
        for (k = 0; k < len2; k++) {
            itemData = this.userData.items[k];
            if (parseInt(itemData.id) == parseInt(obj.id)) {
                this.userData.items[k] = canvas.data.manor.throne.Serializer.deserializeItem(obj);
                i = -1;
                break;
            }
            i++;
        }
        if (i >= 0) {
            this.userData.items.push(canvas.data.manor.throne.Serializer.deserializeItem(obj));
        }
    }
    this.updateActiveShopItems();
};
canvas.data.manor.DThroneRoomData.prototype.updateActiveShopItems = function () {
    if (!this.shopItems) return;
    var itemData;
    var artikuls = new Array();
    var i,
        len = this.userData.items.length;
    for (i = 0; i < len; i++) {
        itemData = this.userData.items[i];
        if (itemData.artifact) artikuls.push(itemData.artifact.id);
    }
    len = this.shopItems.length;
    for (i = 0; i < len; i++) {
        itemData = this.shopItems[i];
        if (itemData.artifact) itemData.isActive = artikuls.indexOf(itemData.artifact.id) >= 0;
    }
};
canvas.data.manor.DThroneRoomData.prototype.parseState = function (data) {
    if (data) {
        canvas.app.manor.model.serverTime.init(data["server_time"]);
    }
};
canvas.data.manor.DThroneRoomData.prototype.testExpiredItems = function (data) {
    var itemData;
    var result = false;
    var a = new Array();
    if (!this.userData.items) return;
    var i,
        len = this.userData.items.length;
    for (i = 0; i < len; i++) {
        itemData = this.userData.items[i];
        if (itemData.isExpired()) a.push(itemData);
    }
    len = a.length;
    if (len > 0) {
        for (i = 0; i < len; i++) {
            itemData = a[i];
            this.userData.items.splice(this.userData.items.indexOf(itemData), 1);
        }
        this.updateActiveShopItems();
        return true;
    } else {
        return false;
    }
};
canvas.data.manor.DThroneRoomData.prototype.filterActiveItems = function (itemData) {
    return itemData.isActive;
};
canvas.data.manor.DThroneRoomData.prototype.filterTypeItems = function (itemData) {
    return itemData.proto.type == this.currentType;
};
canvas.data.manor.DThroneRoomData.prototype.loadHints = function () {
    var artikuls = new Array();
    var artifactPrototypeData;
    for (var str in canvas.data.manor.throne.Prototypes.artifactPrototypes) {
        artikuls.push(canvas.data.manor.throne.Prototypes.artifactPrototypes[str].id);
    }
    loadArtifactArtikulsData(artikuls);
};
canvas.data.manor.DThroneRoomData.prototype.compareItemDataIndex = function (itemData1, itemData2) {
    var type1;
    var type2;
    if (itemData1.artikulID > 0) type1 = canvas.data.manor.throne.Prototypes.getTypePrototype(itemData1.proto.type);
    else type1 = canvas.data.manor.throne.Prototypes.getTypePrototype(itemData1.id);
    if (itemData2.artikulID > 0) type2 = canvas.data.manor.throne.Prototypes.getTypePrototype(itemData2.proto.type);
    else type2 = canvas.data.manor.throne.Prototypes.getTypePrototype(itemData2.id);
    if (!type1 || !type2) return 0;
    return type1.layerIndex < type2.layerIndex ? -1 : type1.layerIndex > type2.layerIndex ? 1 : 0;
};
canvas.data.manor.DUser = function () {
    this.race = 0;
    this.labour = 0;
    this.labourMax = 0;
    this.cement = 0;
    this.buildings = new Object();
    this.buildingsById = new Object();
    this.buildingsByIndex = new Array();
    this.requests;
    this.money = 0;
    this.ghost = false;
    this.workRefreshTime = 0;
};
canvas.data.manor.DUser.prototype.getRequestById = function (rid) {
    var len = this.requests.length;
    var request;
    for (var i = 0; i < len; i++) {
        request = this.requests[i];
        if (request.id == rid) return request;
    }
    return null;
};
canvas.data.manor.DUserBuilding = function () {
    this.id = 0;
    this.type = 1;
    this.level = 0;
    this.name = "main";
    this.labour = 0;
    this.hirePrice = 0;
    this.hireTimeLeft = 0;
    this.params = "";
    this.dichIndex = 0;
};
canvas.data.manor.DUserBuilding.prototype.getLevel = function () {
    return this.level == 0 ? 1 : this.level;
};
canvas.data.manor.DUserBuilding.prototype.getLevelMin = function () {
    return this.level == 0 && this.labour > 0 ? 1 : this.level;
};
canvas.data.manor.DUserBuilding.prototype.isUnknownDich = function () {
    return this.level == 0 && canvas.data.manor.DBuilding.typeIsMultiBuild(this.type) && this.labour == 0;
};
canvas.data.manor.DUserGame = function () {
    this.id = "";
    this.login = "";
    this.level = 0;
};
canvas.data.manor.DWorkRequest = function () {
    this.id = "";
    this.building = "";
    this.price = 0;
    this.labour = 0;
};
canvas.data.manor.throne.ItemData = function (artikulID) {
    this.id;
    this.artikulID = artikulID;
    this.expiry;
    this.isActive;
    this.mode;
    this.money;
    Object.defineProperty(this, "proto", {
        get: function () {
            return canvas.data.manor.throne.Prototypes.itemPrototypes[this.artikulID] || canvas.data.manor.throne.Prototypes.defaultItemPrototypeData;
        },
    });
    Object.defineProperty(this, "artifact", {
        get: function () {
            return canvas.data.manor.throne.Prototypes.artifactPrototypes[this.proto.artifactArtikul];
        },
    });
};
canvas.data.manor.throne.ItemData.MODE_MY = 0;
canvas.data.manor.throne.ItemData.MODE_SHOP = 1;
canvas.data.manor.throne.ItemData.prototype.isExpired = function () {
    return this.expiry && this.expiry <= canvas.app.manor.model.serverTime.getTime();
};
canvas.data.manor.throne.MoneyData = function () {
    this.price;
    this.priceType;
    this.bages;
};
canvas.data.manor.throne.ItemData.TYPE_MONEY = 1;
canvas.data.manor.throne.ItemData.TYPE_GEMS = 2;
canvas.data.manor.throne.ItemData.TYPE_DIAMONDS = 3;
canvas.data.manor.throne.MoneyData.prototype.getMoney = function () {
    return this.priceType == canvas.data.manor.throne.ItemData.TYPE_MONEY ? price : 0;
};
canvas.data.manor.throne.MoneyData.prototype.getDiamonds = function () {
    return this.priceType == canvas.data.manor.throne.ItemData.TYPE_DIAMONDS ? price : 0;
};
canvas.data.manor.throne.MoneyData.prototype.getBageArtikul = function () {
    var obj;
    var i,
        len = this.bages.length;
    for (i = 0; i < len; i++) {
        obj = this.bages[i];
        if (obj.type == "artifact") return obj.artikul_id;
    }
    return 0;
};
canvas.data.manor.throne.MoneyData.prototype.getBageCount = function () {
    var obj;
    var i,
        len = this.bages.length;
    for (i = 0; i < len; i++) {
        obj = this.bages[i];
        if (obj.type == "artifact") return obj.cnt;
    }
    return 0;
};
canvas.data.manor.throne.Prototypes = {
    THRONE_TYPE_ID: 1e3,
    THRONE_ITEM_ID: 1e4,
    artifactPrototypes: {},
    itemPrototypes: {},
    typePrototypes: {},
    defaultItemPrototypeData: {},
    init: function () {
        this.defaultItemPrototypeData.id = 0;
        this.defaultItemPrototypeData.picture = "images/table.jpg";
    },
    storeTypePrototypes: function (data) {
        var obj;
        var typePrototypeData;
        var i,
            len = data.length;
        for (i = 0; i < len; i++) {
            obj = data[i];
            typePrototypeData = new Object();
            typePrototypeData.id = parseInt(obj.id);
            typePrototypeData.title = obj.title;
            typePrototypeData.posX = parseInt(obj.position_x);
            typePrototypeData.posY = parseInt(obj.position_y);
            typePrototypeData.layerIndex = obj.layer_index;
            typePrototypeData.imageURL = obj.default_picture;
            typePrototypeData.disabled = (parseInt(obj.flags) & 1) != 0;
            this.typePrototypes[typePrototypeData.id] = typePrototypeData;
        }
        typePrototypeData = new Object();
        typePrototypeData.id = this.THRONE_TYPE_ID;
        typePrototypeData.title = "Throne";
        typePrototypeData.posX = 0;
        typePrototypeData.posY = 0;
        typePrototypeData.layerIndex = canvas.app.manor.model.throneRoomData.userData.throneRoomFrontLayerIndex;
        typePrototypeData.imageURL = canvas.app.manor.model.throneRoomData.userData.throneRoomFront;
        typePrototypeData.disabled = true;
        this.typePrototypes[typePrototypeData.id] = typePrototypeData;
    },
    storeItemPrototypes: function (data) {
        var obj;
        var itemPrototypeData;
        var i,
            len = data.length;
        for (i = 0; i < len; i++) {
            obj = data[i];
            itemPrototypeData = new Object();
            itemPrototypeData.id = parseInt(obj.id);
            itemPrototypeData.type = parseInt(obj.type_id);
            itemPrototypeData.picture = obj.picture;
            itemPrototypeData.artifactArtikul = obj.artifact_artikul_id || 11764;
            this.itemPrototypes[itemPrototypeData.id] = itemPrototypeData;
        }
        itemPrototypeData = new Object();
        itemPrototypeData.id = this.THRONE_ITEM_ID;
        itemPrototypeData.type = this.THRONE_TYPE_ID;
        itemPrototypeData.picture = canvas.app.manor.model.throneRoomData.userData.throneRoomFront;
        this.itemPrototypes[itemPrototypeData.id] = itemPrototypeData;
    },
    storeArtifactPrototypes: function (data) {
        var obj;
        var artifactPrototypeData;
        var str;
        for (str in data) {
            if (typeof data[str] == "function") continue;
            obj = data[str];
            artifactPrototypeData = new Object();
            artifactPrototypeData.id = parseInt(obj.id);
            artifactPrototypeData.title = obj.title;
            artifactPrototypeData.picture = obj.picture;
            this.artifactPrototypes[artifactPrototypeData.id] = artifactPrototypeData;
        }
    },
    getTypePrototype: function (id) {
        return this.typePrototypes[id];
    },
    getItemPrototype: function (id) {
        return this.itemPrototypes[id];
    },
    getArtifactPrototype: function (id) {
        return this.artifactPrototypes[id];
    },
};
canvas.data.manor.throne.Serializer = {
    deserializeItem: function (obj) {
        var result = new canvas.data.manor.throne.ItemData(parseInt(obj.artikul_id));
        result.isActive = parseInt(obj.is_installed) == 1;
        result.id = parseInt(obj.id);
        result.mode = canvas.data.manor.throne.ItemData.MODE_MY;
        result.expiry = parseInt(obj.expire_time);
        return result;
    },
    deserializeShopItem: function (obj) {
        var artifactID = parseInt(obj.id);
        var itemPrototypeData;
        for (str in canvas.data.manor.throne.Prototypes.itemPrototypes) {
            itemPrototypeData = canvas.data.manor.throne.Prototypes.itemPrototypes[str];
            if (itemPrototypeData.artifactArtikul == artifactID) break;
        }
        var result = new canvas.data.manor.throne.ItemData(itemPrototypeData ? itemPrototypeData.id : 1);
        result.id = parseInt(obj.store_artikul_id);
        result.mode = canvas.data.manor.throne.ItemData.MODE_SHOP;
        result.money = new canvas.data.manor.throne.MoneyData();
        result.money.price = parseFloat(obj.price);
        result.money.priceType = parseInt(obj.price_type);
        result.expiry = parseInt(obj.validity);
        result.money.bages = new Array();
        var obj2;
        if (obj.badge_data) {
            var i,
                len = obj.badge_data.badges.length;
            for (i = 0; i < len; i++) {
                obj2 = obj.badge_data.badges[i];
                result.money.bages.push(obj2);
            }
        }
        return result;
    },
};
canvas.data.manor.throne.UserData = function () {
    this.throneRoomBack;
    this.throneRoomFront;
    this.throneRoomFrontLayerIndex;
    this.items;
    this.restrictions;
    this.redressItemID;
};
canvas.app.CanvasApp = function (par, parent, showPreloader, widthOffset, heightOffset, hideCanvas, topWindow, antialias) {
    if (showPreloader == undefined) showPreloader = true;
    if (hideCanvas == undefined) hideCanvas = false;
    this.topWindow = topWindow == undefined ? window : topWindow;
    this._fpsInterval;
    this._fps = 0;
    Object.defineProperty(this, "fps", {
        get: function () {
            return this._fps;
        },
        set: function (value) {
            this._fps = value;
            clearInterval(this._fpsInterval);
            if (this._fps > 0) {
                this._fpsInterval = setInterval(this.handlerEnterFrame.bind(this), 1e3 / this._fps);
            }
        },
    });
    this.par = typeof par == "string" ? canvas.Functions.decodeUrlParams(par.replace(/\+/g, "%20")) : par;
    this.par.width = parseInt(this.par.width) || this.defaultWidth;
    this.par.height = parseInt(this.par.height) || this.defaultHeight;
    this.par.parent = parent ? parent : { style: {}, setAttribute: function () {}, addEventListener: function () {} };
    this.par.parent.style.userSelect = "none";
    canvas.px.utils.skipHello();
    if (!hideCanvas) {
        this.app = new canvas.px.Application(this.par.width || 100, this.par.height || 100, { transparent: true, antialias: antialias == undefined ? false : antialias });
        this.par.parent.appendChild(this.app.view);
        if (topWindow != undefined) {
            this.app.renderer.plugins.interaction.removeEvents();
            this.app.renderer.plugins.interaction.topWindow = topWindow;
            this.app.renderer.plugins.interaction.interactionDOMElement = this.app.view;
            this.app.renderer.plugins.interaction.addEvents();
        }
    }
    this.par.parent.setAttribute("tabindex", 0);
    this.par.parent.style.outline = "none";
    this.width = this.par.width;
    this.height = this.par.height;
    this.widthOffset = widthOffset || 0;
    this.heightOffset = heightOffset || 0;
    this.stage = this.app ? this.app.stage : new canvas.px.Container();
    this.root = new canvas.px.Container();
    this.stage.addChild(this.root);
    var isMobile = canvas.isMobile();
    this.topWindow.document.addEventListener(isMobile ? "pointermove" : "mousemove", this.handlerStageMouseMove);
    this.topWindow.addEventListener(isMobile ? "pointerup" : "mouseup", this.handlerStageMouseUp);
    this.topWindow.document.addEventListener("mousewheel", this.handlerWheelHandler);
    this.destroy = this.destroy.bind(this);
    window.addEventListener("unload", this.destroy);
    this.stage.interactive = true;
    canvas.ResourceLoader.init();
    canvas.Config.init();
    if (showPreloader) {
        this.preloader = new canvas.px.MovieClip(canvas.Config.effectsPath + "preloader");
        this.preloader.gotoAndStop(1);
        if (this.preloader.ready) {
            this.preloaderReady();
        } else {
            canvas.EventManager.addEventListener(canvas.px.MovieClipEvent.EVENT_READY, this.preloader, this.preloaderReady, this);
        }
    } else {
        this.preInit();
    }
    this.handlerMouseDownBinded = this.handlerMouseDown.bind(this);
    this.handlerMouseOutBinded = this.handlerMouseOut.bind(this);
    this.handlerDragStartBinded = this.handlerDragStart.bind(this);
    this.resizeBinded = this.resize.bind(this);
    this.par.parent.addEventListener(isMobile ? "pointerdown" : "mousedown", this.handlerMouseDownBinded);
    this.par.parent.addEventListener(isMobile ? "pointerout" : "mouseout", this.handlerMouseOutBinded);
    this.par.parent.addEventListener("dragstart", this.handlerDragStartBinded);
    this.topWindow.addEventListener("resize", this.resizeBinded);
    this.render = this.render.bind(this);
    this.resize();
};
canvas.app.CanvasApp.prototype.preloaderReady = function () {
    canvas.EventManager.removeEventListener(canvas.px.MovieClipEvent.EVENT_READY, this.preloader, this.preloaderReady, this);
    canvas.EventManager.addEventListener(canvas.ResourceLoader.EVENT_PROGRESS, null, this.handlerProgress, this);
    this.stage.addChild(this.preloader);
    this.preInit();
};
canvas.app.CanvasApp.prototype.preInit = function () {
    if (this.par.ux_conf) {
        var a = this.par.ux_conf.split(",");
        var resources = [];
        for (var i = 0; i < a.length; i++) resources.push(["ux" + i, canvas.Config.wwwPath + a[i]]);
        canvas.EventManager.addEventListener(canvas.ResourceLoader.EVENT_COMPLETE, null, this.preInitReady, this);
        canvas.ResourceLoader.add(resources);
    } else {
        this.init();
    }
};
canvas.app.CanvasApp.prototype.preInitReady = function () {
    canvas.EventManager.removeEventListener(canvas.ResourceLoader.EVENT_COMPLETE, null, this.preInitReady, this);
    if (canvas.ResourceLoader.uxReady) {
        this.uxReady();
    } else if (canvas.ResourceLoader.ux) {
        canvas.EventManager.addEventListener(canvas.Event.UX_READY, null, this.uxReady, this);
    } else {
        canvas.Functions.parseUx();
        this.uxReady();
    }
};
canvas.app.CanvasApp.prototype.uxReady = function () {
    canvas.EventManager.removeEventListener(canvas.Event.UX_READY, null, this.uxReady, this);
    this.init();
};
canvas.app.CanvasApp.prototype.init = function (resources) {
    if (resources == undefined) resources = [];
    if (!canvas.Translator.isInited && this.par.locale_file) {
        canvas.Translator.lang = this.par.locale_file.match(/locale\/([a-z]{2})\//i)[1];
        resources.push(["translate", canvas.Config.wwwPath + this.par.locale_file]);
    }
    canvas.Config.initLang(canvas.Translator.lang);
    for (var i = 0; i < resources.length; i++) {
        for (var j = 0; j < resources[i].length; j++) {
            resources[i][j] = resources[i][j].replace("{canvas.Config.langPath}", canvas.Config.langPath);
        }
    }
    canvas.EventManager.addEventListener(canvas.ResourceLoader.EVENT_COMPLETE, null, this.ready, this);
    canvas.ResourceLoader.add(resources);
};
canvas.app.CanvasApp.prototype.ready = function (resources) {
    canvas.EventManager.removeEventListener(canvas.ResourceLoader.EVENT_COMPLETE, null, this.ready, this);
    canvas.EventManager.removeEventListener(canvas.ResourceLoader.EVENT_PROGRESS, null, this.handlerProgress, this);
    var xml = canvas.ResourceLoader.get("translate");
    if (!canvas.Translator.isInited) {
        canvas.Translator.init(xml && xml.data ? xml.data : null);
    }
    if (this.preloader) {
        this.preloader.destroy();
        delete this.preloader;
    }
    if (this.app) this.app.ticker.stop();
};
canvas.app.CanvasApp.prototype.handlerProgress = function (e) {
    this.preloader.gotoAndStop(Math.round(e.params.progress));
};
canvas.app.CanvasApp.prototype.handlerStageMouseMove = function (mouseData) {
    canvas.EventManager.dispatchEvent(canvas.Event.STAGE_MOUSE_MOVE, null, { x: mouseData.clientX, y: mouseData.clientY, mouseData: mouseData });
};
canvas.app.CanvasApp.prototype.handlerStageMouseUp = function (mouseData) {
    canvas.EventManager.dispatchEvent(canvas.Event.STAGE_MOUSE_UP, null, { x: mouseData.clientX, y: mouseData.clientY, mouseData: mouseData });
};
canvas.app.CanvasApp.prototype.handlerWheelHandler = function (mouseData) {
    canvas.EventManager.dispatchEvent(canvas.Event.STAGE_WHEEL, null, { wheelDelta: mouseData.wheelDelta });
};
canvas.app.CanvasApp.prototype.handlerEnterFrame = function () {
    if (this.app && !this.animationRequested) {
        this.animationRequested = true;
        requestAnimationFrame(this.render);
    }
};
canvas.app.CanvasApp.prototype.render = function () {
    if (this.app) this.app.render();
    this.animationRequested = false;
};
canvas.app.CanvasApp.prototype.handlerMouseDown = function (e) {};
canvas.app.CanvasApp.prototype.handlerMouseOut = function (e) {
    canvas.EventManager.dispatchEvent(canvas.Event.STAGE_MOUSE_OUT);
};
canvas.app.CanvasApp.prototype.handlerDragStart = function (e) {
    e.preventDefault();
    e.stopPropagation();
};
canvas.app.CanvasApp.prototype.focus = function () {
    this.par.parent.focus();
};
canvas.app.CanvasApp.prototype.externalKey = function (e) {
    canvas.InputManager.externalKey(e);
};
canvas.app.CanvasApp.prototype.resize = function () {
    if (this.app) this.app.renderer.resize(0, 0);
    this.width = (this.par.width ? this.par.width : this.par.parent.clientWidth) + this.widthOffset;
    this.height = (this.par.height ? this.par.height : this.par.parent.clientHeight) + this.heightOffset;
    if (this.preloader) {
        this.preloader.position.set(Math.round(this.width * 0.5), Math.round(this.height * 0.5));
    }
    if (this.app) this.app.renderer.resize(this.width, this.height);
};
canvas.app.CanvasApp.prototype.destroy = function (destroyResources, destroyEvents) {
    if (destroyResources == undefined) destroyResources = true;
    if (destroyEvents == undefined) destroyEvents = true;
    this.fps = 0;
    this.topWindow.document.removeEventListener("mousemove", this.handlerStageMouseMove);
    this.topWindow.removeEventListener("mouseup", this.handlerStageMouseUp);
    this.topWindow.document.removeEventListener("mousewheel", this.handlerWheelHandler);
    if (this.par.parent && this.par.parent.removeEventListener) {
        this.par.parent.removeEventListener("mousedown", this.handlerMouseDownBinded);
        this.par.parent.removeEventListener("mouseout", this.handlerMouseOutBinded);
        this.par.parent.removeEventListener("dragstart", this.handlerDragStartBinded);
    }
    this.topWindow.removeEventListener("resize", this.resizeBinded);
    window.removeEventListener("unload", this.destroy);
    if (destroyResources) this.destroyResources();
    if (this.app) {
        if (this.par.parent) this.par.parent.removeChild(this.app.view);
        var app = this.app;
        this.app = null;
        app.destroy(true, true);
    }
    delete this.par.parent;
    delete this.par;
    if (destroyEvents) canvas.EventManager.destroy();
    canvas.Functions.destroy();
    canvas.px.Container.prototype.destroy.apply(this.stage, [true]);
};
canvas.app.CanvasApp.prototype.destroyResources = function () {
    canvas.px.Loader.destroy();
    canvas.ResourceLoader.destroy();
    canvas.px.utils.destroyTextureCache();
};
canvas.app.CanvasAvatar = function (par, parent) {
    canvas.app.CanvasApp.call(this, par, parent, false, 0, 0);
};
canvas.app.CanvasAvatar.prototype = Object.create(canvas.app.CanvasApp.prototype);
canvas.app.CanvasAvatar.prototype.init = function () {
    this.model = new canvas.app.avatar.Model(this.par);
    canvas.app.avatar.model = this.model;
    this.model.width = this.par.width;
    this.model.height = this.par.height;
    var fonts = [canvas.Const.FONT_IFLASH, canvas.Const.FONT_TAHOMA_11_BOLD_STROKE_BEVEL_SHARP, canvas.Const.FONT_TAHOMA_10_STROKE, canvas.Const.FONT_TAHOMA_10_BOLD_SHARP];
    var resources = [["ui", canvas.Config.ui + "main.json"]];
    for (var i = 0; i < fonts.length; i++) resources.push(canvas.Config.fontsPath + fonts[i] + ".fnt");
    canvas.app.CanvasApp.prototype.init.call(this, resources);
};
canvas.app.CanvasAvatar.prototype.ready = function () {
    canvas.app.CanvasApp.prototype.ready.call(this);
    this.hintManager = new canvas.utils.HintManager();
    this.main = new canvas.app.avatar.Main(this.model, this.hintManager);
    this.model.main = this.main;
    this.root.addChild(this.main);
    this.fps = 20;
};
canvas.app.CanvasAvatar.prototype.handlerEnterFrame = function () {
    canvas.EventManager.dispatchEvent(canvas.app.avatar.Event.ENTER_FRAME);
    canvas.app.CanvasApp.prototype.handlerEnterFrame.call(this);
};
canvas.app.CanvasAvatar.prototype.resize = function () {
    canvas.app.CanvasApp.prototype.resize.call(this);
};
canvas.app.CanvasAvatar.prototype.swfObject = function (data) {
    if (this.main) {
        this.main.swfObject(data);
    }
};
canvas.app.CanvasAvatar.prototype.swfData = function (name, data) {
    if (this.main) {
        this.main.swfData(data);
    }
};
canvas.app.avatar.log = function (message, color) {
    canvas.Log.add(canvas.Log.AVATAR, message, color);
};
canvas.app.CanvasBalance = function (par, parent) {
    canvas.app.CanvasApp.call(this, par, parent, false, 0, 0);
};
canvas.app.CanvasBalance.prototype = Object.create(canvas.app.CanvasApp.prototype);
canvas.app.CanvasBalance.prototype.init = function () {
    var resources = [["ui", canvas.Config.ui + "balance.json"], canvas.Config.fontsPath + canvas.Const.FONT_IFLASH + ".fnt", canvas.Config.fontsPath + canvas.Const.FONT_TAHOMA_10_STROKE + ".fnt"];
    canvas.app.CanvasApp.prototype.init.call(this, resources);
};
canvas.app.CanvasBalance.prototype.ready = function () {
    canvas.app.CanvasApp.prototype.ready.call(this);
    this.useTahoma = canvas.Translator.getLang() != canvas.Const.LANG_RU;
    this.main = new canvas.px.Container();
    this.root.addChild(this.main);
    this.start();
};
canvas.app.CanvasBalance.prototype.start = function () {
    var container = new canvas.px.Container();
    var scale = this.par.scale > 0;
    this.main.addChild(container);
    container.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", scale ? "bar_empty" : "bar_full")));
    var labels = this.par.labels.split("|");
    var val = parseInt(this.par.val) / 100;
    var originalVal = parseInt(this.par.val);
    var diff = parseInt(this.par.diff);
    var percent = Math.max(0, Math.min(1, val));
    var progress = new canvas.ui.Progress();
    progress.setSize(200, 40);
    progress.position.set(14, 0);
    var front = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", scale ? "bar_full" : "bar_empty"));
    container.addChild(front);
    container.addChild(progress);
    front.mask = progress.sprite;
    progress.progress = percent;
    if (percent > 0 && percent < 1) {
        var center = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "center"));
        center.position.set(progress.sprite.width + 7, 7);
        container.addChild(center);
    }
    this.hintContainer = new canvas.px.Container();
    var tmpY = this.useTahoma ? 13 : 15;
    var leftField = this.hintContainer.addChild(new canvas.ui.Text(this.useTahoma ? canvas.Const.FONT_TAHOMA_10_STROKE : canvas.Const.FONT_IFLASH, 16777215, 100, 12, "left"));
    leftField.text = scale ? labels[1] : labels[0];
    leftField.position.set(20, tmpY);
    var rightField = this.hintContainer.addChild(new canvas.ui.Text(this.useTahoma ? canvas.Const.FONT_TAHOMA_10_STROKE : canvas.Const.FONT_IFLASH, 16777215, 100, 12, "right"));
    rightField.text = scale ? labels[0] : labels[1];
    rightField.position.set(this.width - 120, tmpY);
    var centerField = this.hintContainer.addChild(new canvas.ui.Text(this.useTahoma ? canvas.Const.FONT_TAHOMA_10_STROKE : canvas.Const.FONT_IFLASH, 16777215, 100, 12, "center"));
    centerField.text = diff > 0 ? "+" + diff : diff;
    centerField.position.set(Math.round((this.width - 100) * 0.5), tmpY);
    container.interactive = true;
    container.mouseover = this.overHandler.bind(this);
    container.mouseout = this.outHandler.bind(this);
    canvas.app.CanvasApp.prototype.handlerEnterFrame.call(this);
};
canvas.app.CanvasBalance.prototype.overHandler = function () {
    this.main.addChild(this.hintContainer);
    canvas.app.CanvasApp.prototype.handlerEnterFrame.call(this);
};
canvas.app.CanvasBalance.prototype.outHandler = function () {
    this.main.removeIfExist(this.hintContainer);
    canvas.app.CanvasApp.prototype.handlerEnterFrame.call(this);
};
canvas.app.CanvasBarber = function (par, parent) {
    canvas.app.CanvasApp.call(this, par, parent, false, 0, 0);
};
canvas.app.CanvasBarber.prototype = Object.create(canvas.app.CanvasApp.prototype);
canvas.app.CanvasBarber.prototype.init = function () {
    var resources = [["ui", "{canvas.Config.langPath}barber/barber.json"], canvas.Config.fontsPath + canvas.Const.FONT_TAHOMA_11_BOLD + ".fnt"];
    canvas.app.CanvasApp.prototype.init.call(this, resources);
};
canvas.app.CanvasBarber.prototype.ready = function () {
    canvas.app.CanvasApp.prototype.ready.call(this);
    this.main = new canvas.px.Container();
    this.root.addChild(this.main);
    this.start();
    this.fps = 30;
};
canvas.app.CanvasBarber.prototype.handlerEnterFrame = function () {
    canvas.EventManager.dispatchEvent(canvas.app.barber.Event.ENTER_FRAME);
    canvas.app.CanvasApp.prototype.handlerEnterFrame.call(this);
};
canvas.app.CanvasBarber.prototype.start = function () {
    this.main.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "back")));
    this.barber = this.main.addChild(new canvas.app.barber.Barber(this.par, this));
    this.barber.y = 54;
    this.title = this.main.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD, 16769465, 130, 16, "center"));
    this.title.text = canvas.Translator.getText(3027);
    this.title.position.set(180, 26);
};
canvas.app.CanvasBattle = function (par, parent) {
    canvas.app.CanvasApp.call(this, par, parent, true, 0, 0);
    this.createLogTitle();
};
canvas.app.CanvasBattle.prototype = Object.create(canvas.app.CanvasApp.prototype);
canvas.app.CanvasBattle.prototype.init = function () {
    this.model = new canvas.app.battle.Model(this.par);
    canvas.app.battle.model = this.model;
    var fonts = [
        canvas.Const.FONT_IFLASH,
        canvas.Const.FONT_TAHOMA_9_STROKE,
        canvas.Const.FONT_TAHOMA_9,
        canvas.Const.FONT_TAHOMA_9_BOLD,
        canvas.Const.FONT_TAHOMA_10,
        canvas.Const.FONT_TAHOMA_10_BOLD,
        canvas.Const.FONT_TAHOMA_11,
        canvas.Const.FONT_TAHOMA_11_BOLD,
        canvas.Const.FONT_ARIAL_11,
        canvas.Const.FONT_ARIAL_11_BOLD,
        canvas.Const.FONT_TAHOMA_14_NUMBERS_BOLD_STROKE_BEVEL,
        canvas.Const.FONT_TAHOMA_12_BOLD_STROKE_RED_WHITE,
        canvas.Const.FONT_TAHOMA_20_BOLD_STROKE,
    ];
    var resources = [
        ["locale", "{canvas.Config.langPath}locale.json"],
        ["ui", canvas.Config.ui + "battle.json"],
        ["bg", this.model.bgLink],
        ["eff_conf", this.model.effConfLink],
        canvas.Config.effects,
        canvas.Config.effectsPath + "hourglass.mci",
    ];
    for (var i = 0; i < fonts.length; i++) resources.push(canvas.Config.fontsPath + fonts[i] + ".fnt");
    canvas.app.CanvasApp.prototype.init.call(this, resources);
};
canvas.app.CanvasBattle.prototype.ready = function () {
    canvas.app.CanvasApp.prototype.ready.call(this);
    var effConf = canvas.ResourceLoader.get("eff_conf");
    this.model.parseEffectsConf(effConf ? effConf.data : "");
    this.hintManager = new canvas.utils.HintManager();
    this.main = new canvas.app.battle.Main(this.model, this.hintManager);
    this.root.addChild(this.main);
    this.main.resize(this.width, this.height);
    this.fps = this.model.fps;
};
canvas.app.CanvasBattle.prototype.swfData = function (name, data) {
    this.main.swfData(name, data);
};
canvas.app.CanvasBattle.prototype.handlerEnterFrame = function () {
    canvas.EventManager.dispatchEvent(canvas.app.battle.Event.ENTER_FRAME);
    canvas.app.CanvasApp.prototype.handlerEnterFrame.call(this);
};
canvas.app.CanvasBattle.prototype.handlerMouseDown = function () {
    canvas.app.CanvasApp.prototype.handlerMouseDown.call(this);
    this.focus();
};
canvas.app.CanvasBattle.prototype.focus = function () {
    canvas.app.CanvasApp.prototype.focus.call(this);
};
canvas.app.CanvasBattle.prototype.resize = function () {
    canvas.app.CanvasApp.prototype.resize.call(this);
};
canvas.app.CanvasBattle.prototype.createLogTitle = function () {
    var gl = this.app.view.getContext("webgl") || this.app.view.getContext("experimental-webgl");
    if (gl) {
        var debugInfo = gl.getExtension("WEBGL_debug_renderer_info");
        canvas.Log.title += gl.getParameter(debugInfo.UNMASKED_RENDERER_WEBGL);
    } else {
        canvas.Log.title += "WEBGL not available";
    }
};
canvas.app.battle.log = function (message, color) {
    canvas.Log.add(canvas.Log.BATTLE, message, color);
};
canvas.app.CanvasBirthday = function (par, parent) {
    canvas.app.CanvasApp.call(this, par, parent, true, 0, 0, false, _top().window);
};
canvas.app.CanvasBirthday.prototype = Object.create(canvas.app.CanvasApp.prototype);
canvas.app.CanvasBirthday.prototype.preInit = function () {
    if (this.par.ux_conf == undefined) this.par.ux_conf = canvas.Config.uxPath;
    canvas.app.CanvasApp.prototype.preInit.call(this);
};
canvas.app.CanvasBirthday.prototype.init = function () {
    this.model = new canvas.app.birthday.Model(this.par);
    this.model.width = this.par.width;
    this.model.height = this.par.height;
    canvas.app.birthday.model = this.model;
    var fonts = [
        canvas.Const.FONT_TAHOMA_9,
        canvas.Const.FONT_TAHOMA_11_BOLD,
        canvas.Const.FONT_TAHOMA_12,
        canvas.Const.FONT_TAHOMA_12_BOLD,
        canvas.Const.FONT_TAHOMA_14_BOLD,
        canvas.Const.FONT_TAHOMA_15_BOLD,
        canvas.Const.FONT_TAHOMA_S_15_BOLD,
    ];
    var resources = [
        ["locale", "{canvas.Config.langPath}locale.json"],
        ["birthday", canvas.Config.ui + "birthday.json"],
        ["birthday_conf", canvas.app.birthday.Const.configUrl],
    ];
    for (var i = 0; i < fonts.length; i++) resources.push(canvas.Config.fontsPath + fonts[i] + ".fnt");
    canvas.app.CanvasApp.prototype.init.call(this, resources);
};
canvas.app.CanvasBirthday.prototype.ready = function () {
    canvas.app.CanvasApp.prototype.ready.call(this);
    if (!canvas.ResourceLoader.get("ui")) canvas.ResourceLoader.addSubAlias("birthday", "ui");
    this.main = new canvas.app.birthday.Main(this.model);
    this.root.addChild(this.main);
    this.fps = 20;
};
canvas.app.CanvasBirthday.prototype.handlerEnterFrame = function () {
    canvas.EventManager.dispatchEvent(canvas.app.birthday.Event.ENTER_FRAME);
    canvas.app.CanvasApp.prototype.handlerEnterFrame.call(this);
};
canvas.app.CanvasBirthday.prototype.resize = function () {
    canvas.app.CanvasApp.prototype.resize.call(this);
};
canvas.app.birthday.log = function (message, color) {
    canvas.Log.add(canvas.Log.BIRTHDAY, message, color);
};
canvas.app.CanvasCasino = function (par, parent) {
    canvas.app.CanvasApp.call(this, par, parent);
};
canvas.app.CanvasCasino.prototype = Object.create(canvas.app.CanvasApp.prototype);
canvas.app.CanvasCasino.prototype.init = function () {
    this.model = new canvas.app.casino.Model(this.par);
    canvas.app.casino.model = this.model;
    this.model.width = this.par.width;
    this.model.height = this.par.height;
    var fonts = [
        canvas.Const.FONT_MYRIAD_PRO_15_BOLD_STROKE,
        canvas.Const.FONT_TAHOMA_11_BOLD,
        canvas.Const.FONT_ARIAL_11,
        canvas.Const.FONT_TAHOMA_12,
        canvas.Const.FONT_TAHOMA_13,
        canvas.Const.FONT_TAHOMA_13_BOLD,
        canvas.Const.FONT_TAHOMA_15_BOLD,
        canvas.Const.FONT_TAHOMA_S_15_BOLD,
    ];
    var resources = [
        ["ui", canvas.Config.ui + "casino/casino.json"],
        ["title_jackpot", "{canvas.Config.langPath}casino/title_jackpot.png"],
        ["title_prize", "{canvas.Config.langPath}casino/title_prize.png"],
        ["locale", "{canvas.Config.langPath}casino/casino.json"],
        ["front_mask", canvas.Config.ui + "casino/front_mask.png"],
        ["dragon_mask", canvas.Config.ui + "casino/dragon_mask.png"],
        ["play_button_mask", canvas.Config.ui + "casino/play_button_mask.png"],
        canvas.Config.effects,
    ];
    for (var i = 0; i < fonts.length; i++) resources.push(canvas.Config.fontsPath + fonts[i] + ".fnt");
    canvas.app.CanvasApp.prototype.init.call(this, resources);
};
canvas.app.CanvasCasino.prototype.ready = function () {
    canvas.app.CanvasApp.prototype.ready.call(this);
    this.main = new canvas.app.casino.Main(this.model);
    this.model.main = this.main;
    this.root.addChild(this.main);
    this.fps = 30;
};
canvas.app.CanvasCasino.prototype.handlerEnterFrame = function () {
    canvas.EventManager.dispatchEvent(canvas.app.casino.Event.ENTER_FRAME);
    canvas.app.CanvasApp.prototype.handlerEnterFrame.call(this);
};
canvas.app.CanvasCasino.prototype.resize = function () {
    canvas.app.CanvasApp.prototype.resize.call(this);
};
canvas.app.CanvasCasino.prototype.swfObject = function (data) {
    if (this.main) {
        this.main.swfObject(data);
    }
};
canvas.app.casino.log = function (message, color) {
    canvas.Log.add(canvas.Log.CASINO, message, color);
};
canvas.app.CanvasClanCitadel = function (par, parent) {
    canvas.app.CanvasApp.call(this, par, parent, true, -4, -4);
};
canvas.app.CanvasClanCitadel.prototype = Object.create(canvas.app.CanvasApp.prototype);
canvas.app.CanvasClanCitadel.prototype.init = function () {
    this.model = new canvas.app.clanCitadel.Model(this.par);
    canvas.app.clanCitadel.model = this.model;
    var fonts = [
        canvas.Const.FONT_TAHOMA_11,
        canvas.Const.FONT_TAHOMA_11_BOLD,
        canvas.Const.FONT_TAHOMA_11_BOLD_STROKE,
        canvas.Const.FONT_TAHOMA_12,
        canvas.Const.FONT_TAHOMA_12_BOLD,
        canvas.Const.FONT_TAHOMA_12_BOLD_STROKE,
        canvas.Const.FONT_TAHOMA_13,
        canvas.Const.FONT_TAHOMA_13_BOLD,
        canvas.Const.FONT_TAHOMA_15_BOLD,
        canvas.Const.FONT_TAHOMA_S_15_BOLD,
    ];
    var resources = [
        ["ui", canvas.Config.ui + "clan_citadel.json"],
        ["buildings", this.model.clanBuildingsAmf],
        ["resources", this.model.clanResourcesAmf],
        ["sanctuary", this.model.sanctuaryAmf],
        ["config", this.model.configUrl],
        ["configSanctuary", this.model.configSanctuaryUrl],
        canvas.Config.effectsAtlasPath + "citadel_back.json",
        canvas.Config.effectsPath + "citadel_back.mci",
    ];
    for (var i = 0; i < fonts.length; i++) resources.push(canvas.Config.fontsPath + fonts[i] + ".fnt");
    canvas.app.CanvasApp.prototype.init.call(this, resources);
};
canvas.app.CanvasClanCitadel.prototype.ready = function () {
    canvas.app.CanvasApp.prototype.ready.call(this);
    this.model.init();
    this.main = new canvas.app.clanCitadel.Main(this.model);
    this.root.addChild(this.main);
    this.fps = 30;
    this.resize();
};
canvas.app.CanvasClanCitadel.prototype.handlerEnterFrame = function () {
    canvas.EventManager.dispatchEvent(this.model.paused ? canvas.app.clanCitadel.Event.ENTER_FRAME_WIN : canvas.app.clanCitadel.Event.ENTER_FRAME);
    canvas.app.CanvasApp.prototype.handlerEnterFrame.call(this);
};
canvas.app.CanvasClanCitadel.prototype.resize = function () {
    canvas.app.CanvasApp.prototype.resize.call(this);
    if (this.model) {
        this.model.width = this.width > canvas.app.clanCitadel.Const.MAP_WIDTH ? canvas.app.clanCitadel.Const.MAP_WIDTH : this.width;
        this.model.height = this.height > canvas.app.clanCitadel.Const.MAP_HEIGHT ? canvas.app.clanCitadel.Const.MAP_HEIGHT : this.height;
        if (this.main) this.main.resize(this.width, this.height);
    }
};
canvas.app.clanCitadel.log = function (message, color) {
    canvas.Log.add(canvas.Log.CLAN_CITADEL, message, color);
};
canvas.app.CanvasClanWar = function (par, parent) {
    canvas.app.CanvasApp.call(this, par, parent, true, -2);
    canvas.app.CanvasClanWar.App = this.app;
};
canvas.app.CanvasClanWar.prototype = Object.create(canvas.app.CanvasApp.prototype);
canvas.app.CanvasClanWar.prototype.init = function () {
    this.model = new canvas.app.clanWar.Model(this.par);
    canvas.app.clanWar.model = this.model;
    this.model.width = this.par.width;
    this.model.height = this.par.height;
    var fonts = [
        canvas.Const.FONT_TAHOMA_11,
        canvas.Const.FONT_TAHOMA_11_BOLD,
        canvas.Const.FONT_TAHOMA_11_BOLD_STROKE,
        canvas.Const.FONT_TAHOMA_12,
        canvas.Const.FONT_TAHOMA_12_BOLD,
        canvas.Const.FONT_TAHOMA_15_BOLD,
        canvas.Const.FONT_TAHOMA_S_15_BOLD,
    ];
    var resources = [["ui", canvas.Config.ui + "clan_war.json"]];
    for (var i = 0; i < fonts.length; i++) resources.push(canvas.Config.fontsPath + fonts[i] + ".fnt");
    canvas.app.CanvasApp.prototype.init.call(this, resources);
};
canvas.app.CanvasClanWar.prototype.ready = function () {
    canvas.app.CanvasApp.prototype.ready.call(this);
    this.main = new canvas.app.clanWar.Main(this.model);
    this.model.main = this.main;
    this.root.addChild(this.main);
    this.fps = 30;
    this.resize();
};
canvas.app.CanvasClanWar.prototype.handlerEnterFrame = function () {
    canvas.EventManager.dispatchEvent(canvas.app.clanWar.Event.ENTER_FRAME);
    canvas.app.CanvasApp.prototype.handlerEnterFrame.call(this);
};
canvas.app.CanvasClanWar.prototype.resize = function () {
    canvas.app.CanvasApp.prototype.resize.call(this);
    if (this.model) {
        this.model.w = this.model.width = this.width < canvas.app.clanWar.Const.WIDTH ? canvas.app.clanWar.Const.WIDTH : this.width;
        this.model.h = this.model.height = this.height < canvas.app.clanWar.Const.HEIGHT ? canvas.app.clanWar.Const.HEIGHT : this.height;
        this.main.resize();
    }
};
canvas.app.CanvasClanWar.prototype.swfObject = function (data) {
    if (this.main) {
        this.main.swfObject(data);
    }
};
canvas.app.clanWar.log = function (message, color) {
    canvas.Log.add(canvas.Log.CLAN_WAR, message, color);
};
canvas.app.CanvasCompass = function (par, parent, onlyModel) {
    canvas.app.CanvasApp.call(this, par, parent, false, 0, 0, true);
    document.onkeydown = null;
    document.onkeyup = null;
    this.onlyModel = onlyModel == undefined ? false : onlyModel;
};
canvas.app.CanvasCompass.prototype = Object.create(canvas.app.CanvasApp.prototype);
canvas.app.CanvasCompass.prototype.init = function () {
    this.model = new canvas.app.compass.Model(this.par);
    canvas.app.compass.model = canvas.app.world.model = this.model;
    var resources = [
        ["config", this.model.CfgLink],
        ["config_world", this.model.CfgWorldLink],
    ];
    canvas.EventManager.addEventListener(canvas.ResourceLoader.EVENT_COMPLETE, null, this.preReady, this);
    canvas.ResourceLoader.add(resources);
};
canvas.app.CanvasCompass.prototype.preReady = function () {
    canvas.EventManager.removeEventListener(canvas.ResourceLoader.EVENT_COMPLETE, null, this.preReady, this);
    this.model.parse_world_confing(canvas.ResourceLoader.get("config_world").data);
    canvas.app.CanvasApp.prototype.init.call(this, this.model.areas_xml);
};
canvas.app.CanvasCompass.prototype.ready = function () {
    canvas.app.CanvasApp.prototype.ready.call(this);
    this.model.initConfig();
    this.model.parse_areas();
    if (!this.onlyModel) this.main = new canvas.app.compass.Main(this.model, this.par.parent);
    this.fps = 0;
    canvas.EventManager.dispatchEvent(canvas.app.compass.Event.READY);
};
canvas.app.CanvasCompass.prototype.handlerEnterFrame = function () {
    canvas.EventManager.dispatchEvent(canvas.app.compass.Event.ENTER_FRAME);
    canvas.app.CanvasApp.prototype.handlerEnterFrame.call(this);
};
canvas.app.CanvasCompass.prototype.resize = function () {
    canvas.app.CanvasApp.prototype.resize.call(this);
    if (this.model) {
        this.model.saveWindowSize(window.outerWidth, window.outerHeight);
    }
};
canvas.app.compass.log = function (message, color) {
    canvas.Log.add(canvas.Log.COMPASS, message, color);
};
canvas.app.CanvasCube = function (par, parent) {
    canvas.app.CanvasApp.call(this, par, parent, true);
};
canvas.app.CanvasCube.prototype = Object.create(canvas.app.CanvasApp.prototype);
canvas.app.CanvasCube.prototype.init = function () {
    this.model = new canvas.app.cube.Model(this.par);
    canvas.app.cube.model = this.model;
    this.model.width = this.par.width;
    this.model.height = this.par.height;
    var fonts = [canvas.Const.FONT_TAHOMA_10, canvas.Const.FONT_TAHOMA_11_BOLD, canvas.Const.FONT_TAHOMA_12];
    var resources = [["locale", "{canvas.Config.langPath}locale.json"], ["ui", canvas.Config.ui + "cube.json"], canvas.Config.effectsPath + "cube.mci", canvas.Config.effectsAtlasPath + "cube.json"];
    for (var i = 0; i < fonts.length; i++) resources.push(canvas.Config.fontsPath + fonts[i] + ".fnt");
    canvas.app.CanvasApp.prototype.init.call(this, resources);
};
canvas.app.CanvasCube.prototype.ready = function () {
    canvas.app.CanvasApp.prototype.ready.call(this);
    this.main = new canvas.app.cube.Main(this.model);
    this.model.main = this.main;
    this.root.addChild(this.main);
    this.fps = 30;
};
canvas.app.CanvasCube.prototype.handlerEnterFrame = function () {
    canvas.EventManager.dispatchEvent(canvas.app.cube.Event.ENTER_FRAME);
    canvas.app.CanvasApp.prototype.handlerEnterFrame.call(this);
};
canvas.app.CanvasCube.prototype.resize = function () {
    canvas.app.CanvasApp.prototype.resize.call(this);
};
canvas.app.CanvasCube.prototype.swfObject = function (data) {
    if (this.main) {
        this.main.swfObject(data);
    }
};
canvas.app.cube.log = function (message, color) {
    canvas.Log.add(canvas.Log.CUBE, message, color);
};
canvas.app.CanvasDiceGame = function (par, parent) {
    canvas.app.CanvasApp.call(this, par, parent, true, 0, 0, false, _top().window);
};
canvas.app.CanvasDiceGame.prototype = Object.create(canvas.app.CanvasApp.prototype);
canvas.app.CanvasDiceGame.prototype.preInit = function () {
    if (this.par.ux_conf == undefined) this.par.ux_conf = canvas.Config.uxPath;
    canvas.app.CanvasApp.prototype.preInit.call(this);
};
canvas.app.CanvasDiceGame.prototype.init = function () {
    this.model = new canvas.app.diceGame.Model(this.par);
    this.model.width = this.par.width;
    this.model.height = this.par.height;
    canvas.app.diceGame.model = this.model;
    var fonts = [canvas.Const.FONT_TAHOMA_9, canvas.Const.FONT_TAHOMA_11, canvas.Const.FONT_TAHOMA_11_BOLD, canvas.Const.FONT_TAHOMA_12_BOLD_STROKE, canvas.Const.FONT_TAHOMA_13, canvas.Const.FONT_TAHOMA_15_BOLD_STROKE];
    var resources = [
        ["diceGame", canvas.Config.ui + "dice_game.json"],
        ["conf", this.model.entryPoint + "?object=" + canvas.app.diceGame.Const.REQUEST_OBJECT + "&action=" + canvas.app.diceGame.Const.REQUEST_INIT + "&json_mode_on=1"],
        canvas.Config.effectsPath + "dice1.mci",
        canvas.Config.effectsPath + "dice2.mci",
        canvas.Config.effectsPath + "dice3.mci",
        canvas.Config.effectsPath + "dice4.mci",
        canvas.Config.effectsPath + "dice5.mci",
        canvas.Config.effectsPath + "dice6.mci",
    ];
    for (var i = 0; i < fonts.length; i++) resources.push(canvas.Config.fontsPath + fonts[i] + ".fnt");
    canvas.app.CanvasApp.prototype.init.call(this, resources);
};
canvas.app.CanvasDiceGame.prototype.ready = function () {
    canvas.app.CanvasApp.prototype.ready.call(this);
    if (!canvas.ResourceLoader.get("ui")) canvas.ResourceLoader.addSubAlias("diceGame", "ui");
    this.model.parse(JSON.parse(canvas.ResourceLoader.get("conf").data)[canvas.app.diceGame.Const.REQUEST_OBJECT + "|" + canvas.app.diceGame.Const.REQUEST_INIT]);
    this.main = new canvas.app.diceGame.Main(this.model);
    this.root.addChild(this.main);
    this.fps = 30;
};
canvas.app.CanvasDiceGame.prototype.handlerEnterFrame = function () {
    canvas.EventManager.dispatchEvent(canvas.app.diceGame.Event.ENTER_FRAME);
    canvas.app.CanvasApp.prototype.handlerEnterFrame.call(this);
    if (this.par.parent.offsetParent === null) this.fps = 0;
};
canvas.app.CanvasDiceGame.prototype.destroy = function () {
    canvas.app.CanvasApp.prototype.destroy.call(this, false, false);
};
canvas.app.CanvasDiceGame.prototype.resize = function () {
    canvas.app.CanvasApp.prototype.resize.call(this);
};
canvas.app.diceGame.log = function (message, color) {
    canvas.Log.add(canvas.Log.DICE_GAME, message, color);
};
canvas.app.CanvasEventProgress = function (par, parent) {
    canvas.app.CanvasApp.call(this, par, parent, false, 0, 0);
};
canvas.app.CanvasEventProgress.prototype = Object.create(canvas.app.CanvasApp.prototype);
canvas.app.CanvasEventProgress.prototype.init = function () {
    this.smallSize = this.height < 32;
    var resources = [["ui", canvas.Config.ui + "event_progress.json"], canvas.Config.fontsPath + canvas.Const.FONT_TAHOMA_11_BOLD + ".fnt"];
    canvas.app.CanvasApp.prototype.init.call(this, resources);
};
canvas.app.CanvasEventProgress.prototype.ready = function () {
    canvas.app.CanvasApp.prototype.ready.call(this);
    this.main = new canvas.px.Container();
    this.root.addChild(this.main);
    setTimeout(this.start.bind(this), 10);
};
canvas.app.CanvasEventProgress.prototype.start = function () {
    var container = new canvas.px.Container();
    this.main.addChild(container);
    container.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "back")));
    var headerField = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD, 16771494, 213, 17, "center");
    container.addChild(headerField);
    headerField.position.set(112, 3);
    var title1Field = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD, 0, 396, 17, "center");
    container.addChild(title1Field);
    title1Field.position.set(20, 22);
    var title2Field = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD, 0, 396, 17, "center");
    container.addChild(title2Field);
    title2Field.position.set(20, 75);
    var type1 = parseInt(this.par.type1);
    var type2 = parseInt(this.par.type2);
    var a, header, title1, title2;
    if (this.par.labels != undefined) {
        a = this.par.labels.split("|");
        header = a[0];
        title1 = a[1];
        title2 = a[2];
    }
    headerField.text = header;
    title1Field.text = type1 > 0 ? title1 : "";
    title2Field.text = type2 > 0 ? title2 : "";
    var tmpY = title1Field.y + (title1Field.text == "" ? 15 : title1Field.textHeight + 2);
    var line1 = container.addChild(this.createLine(type1));
    line1.position.set(38, tmpY);
    line1.setProgress(this.par.cur_val1, this.par.max_val1);
    tmpY += line1.getHeight() + 5;
    title2Field.y = tmpY + 2;
    tmpY += title2Field.textHeight + 4;
    var line2 = container.addChild(this.createLine(type2));
    line2.position.set(38, tmpY);
    line2.setProgress(this.par.cur_val2, this.par.max_val2);
    if (type1 <= 0) {
        container.removeIfExist(line1);
        container.removeIfExist(title1Field);
    }
    if (type2 <= 0) {
        container.removeIfExist(line2);
        container.removeIfExist(title2Field);
    }
    if (type2 == 0 && type1 > 0) {
        line1.y = 60;
        title1Field.y = 42;
    }
    canvas.app.CanvasApp.prototype.handlerEnterFrame.call(this);
};
canvas.app.CanvasEventProgress.prototype.createLine = function (type) {
    switch (type) {
        case 1:
            return this.createLine1();
        case 2:
            return this.createLine2();
        case 3:
            return this.createLine3();
        default:
            return this.createLine0();
    }
};
canvas.app.CanvasEventProgress.prototype.createLine0 = function () {
    var result = new canvas.px.Container();
    result.setProgress = function (value1, value2) {};
    result.getHeight = function () {
        return 0;
    };
    return result;
};
canvas.app.CanvasEventProgress.prototype.createLine1 = function () {
    var result = new canvas.px.Container();
    var sprite = result.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "left_white")));
    sprite.position.set(1, 30);
    sprite = result.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "right_red")));
    sprite.position.set(285, 30);
    result.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "line1")));
    sprite = result.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "line1_mask")));
    result.msk = result.addChild(new canvas.px.Mask(348, 28));
    result.msk.position.set(6, 1);
    sprite.mask = result.msk;
    result.currentField = result.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD, 11468800, 57, 17, "center"));
    result.currentField.position.set(6, 30);
    result.maxField = result.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD, 16771494, 57, 17, "center"));
    result.maxField.position.set(296, 30);
    result.cursor = result.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "pointer")));
    result.cursor.position.set(12, 0);
    result.setProgress = function (value1, value2) {
        this.currentField.text = value1;
        this.maxField.text = value2;
        this.msk.scale.x = value1 / value2;
        this.cursor.x = this.msk.x + this.msk.width - 5;
    };
    result.getHeight = function () {
        return this.msk._height + 3;
    };
    return result;
};
canvas.app.CanvasEventProgress.prototype.createLine2 = function () {
    var result = new canvas.px.Container();
    var sprite = result.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "left_white")));
    sprite.position.set(1, 30);
    sprite = result.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "left_white")));
    sprite.scale.set(-1, 1);
    sprite.position.set(360, 30);
    result.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "line2")));
    sprite = result.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "line2_mask")));
    result.msk = result.addChild(new canvas.px.Mask(348, 28));
    result.msk.position.set(6, 1);
    sprite.mask = result.msk;
    result.currentField = result.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD, 15716, 57, 17, "center"));
    result.currentField.position.set(6, 30);
    result.maxField = result.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD, 11468800, 57, 17, "center"));
    result.maxField.position.set(296, 30);
    result.cursor = result.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "pointer")));
    result.cursor.position.set(12, 0);
    sprite = result.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "hum_icon")));
    sprite.position.set(5, 6);
    sprite = result.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "mag_icon")));
    sprite.position.set(336, 6);
    result.setProgress = function (value1, value2) {
        this.currentField.text = value1 + "%";
        this.maxField.text = (100 - value1).toString() + "%";
        this.msk.scale.x = value1 / 100;
        this.cursor.x = this.msk.x + this.msk.width - 5;
    };
    result.getHeight = function () {
        return this.msk._height + 3;
    };
    return result;
};
canvas.app.CanvasEventProgress.prototype.createLine3 = function () {
    var result = new canvas.px.Container();
    var sprite = result.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "line3")));
    sprite.position.set(-7, 0);
    sprite = result.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "line3_mask")));
    sprite.position.set(-7, 0);
    result.msk_hum = result.addChild(new canvas.px.Mask(358, 19));
    result.msk_hum.position.set(-1, 1);
    sprite.mask = result.msk_hum;
    sprite = result.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "line3_mask")));
    sprite.position.set(-7, 0);
    result.msk_mag = result.addChild(new canvas.px.Mask(358, 19));
    result.msk_mag.position.set(-1, 21);
    sprite.mask = result.msk_mag;
    result.cursor_hum = result.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "hum_icon")));
    result.cursor_hum.position.set(78, 1);
    result.cursor_mag = result.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "mag_icon")));
    result.cursor_mag.position.set(219, 20);
    result.setProgress = function (value1, value2) {
        this.msk_hum.scale.x = value1 / 100;
        this.msk_mag.scale.x = value2 / 100;
        this.cursor_hum.x = this.msk_hum.x + this.msk_hum.width - 5;
        this.cursor_mag.x = this.msk_mag.x + this.msk_mag.width - 5;
    };
    result.getHeight = function () {
        return this.msk_hum._height + this.msk_mag._height - 5;
    };
    return result;
};
canvas.app.CanvasFirstBattle = function (par, parent) {
    canvas.app.CanvasApp.call(this, par, parent, true, 0, 0);
};
canvas.app.CanvasFirstBattle.prototype = Object.create(canvas.app.CanvasApp.prototype);
canvas.app.CanvasFirstBattle.prototype.init = function () {
    this.model = new canvas.app.firstBattle.Model(this.par);
    canvas.app.firstBattle.model = this.model;
    this.model.width = this.par.width;
    this.model.height = this.par.height;
    var fonts = [
        canvas.Const.FONT_IFLASH,
        canvas.Const.FONT_TAHOMA_9_STROKE,
        canvas.Const.FONT_TAHOMA_9,
        canvas.Const.FONT_TAHOMA_9_BOLD,
        canvas.Const.FONT_TAHOMA_11,
        canvas.Const.FONT_TAHOMA_11_BOLD,
        canvas.Const.FONT_TAHOMA_12_BOLD,
        canvas.Const.FONT_TAHOMA_12,
        canvas.Const.FONT_TAHOMA_12_BOLD_STROKE_RED_WHITE,
        canvas.Const.FONT_TAHOMA_20_BOLD_STROKE,
    ];
    var resources = [
        ["locale", "{canvas.Config.langPath}locale.json"],
        ["ui", canvas.Config.ui + "first_battle.json"],
        canvas.Config.spellsPath + "_SP1.mci",
        canvas.Config.spellsPath + "_SP2.mci",
        canvas.Config.spellsPath + "_SP4.mci",
        canvas.Config.spellsPath + "_SP5.mci",
        canvas.Config.spellsPath + "_SP6.mci",
        canvas.Config.spellsAtlasPath + "spells2.json",
        canvas.Config.spellsAtlasPath + "spells4.json",
        canvas.Config.spellsAtlasPath + "spells7.json",
        canvas.Config.botsPath + "img" + this.model.enemyParams.sk + "/img" + this.model.enemyParams.sk + ".mci",
        canvas.Config.botsPath + "img" + this.model.enemyParams.sk + "/img" + this.model.enemyParams.sk + ".json",
        canvas.Config.skPath + "sk.json",
    ];
    for (var i = 0; i < fonts.length; i++) resources.push(canvas.Config.fontsPath + fonts[i] + ".fnt");
    canvas.app.CanvasApp.prototype.init.call(this, resources);
};
canvas.app.CanvasFirstBattle.prototype.ready = function () {
    canvas.app.CanvasApp.prototype.ready.call(this);
    this.hintManager = new canvas.utils.HintManager();
    this.main = new canvas.app.firstBattle.Main(this.model, this.hintManager);
    this.model.main = this.main;
    this.root.addChild(this.main);
    this.fps = 20;
};
canvas.app.CanvasFirstBattle.prototype.handlerEnterFrame = function () {
    canvas.EventManager.dispatchEvent(canvas.app.firstBattle.Event.ENTER_FRAME);
    canvas.app.CanvasApp.prototype.handlerEnterFrame.call(this);
};
canvas.app.CanvasFirstBattle.prototype.resize = function () {
    canvas.app.CanvasApp.prototype.resize.call(this);
};
canvas.app.firstBattle.log = function (message, color) {
    canvas.Log.add(canvas.Log.FIRST_BATTLE, message, color);
};
canvas.app.CanvasHunt = function (par, parent) {
    canvas.app.CanvasApp.call(this, par, parent, true, 0, 0, undefined, undefined, true);
    canvas.app.CanvasHunt.App = this.app;
    document.body.style.overflow = "hidden";
};
canvas.app.CanvasHunt.prototype = Object.create(canvas.app.CanvasApp.prototype);
canvas.app.CanvasHunt.prototype.init = function () {
    this.model = new canvas.app.hunt.Model(this.par);
    canvas.app.hunt.model = canvas.app.location.model = this.model;
    var fonts = [
        canvas.Const.FONT_TAHOMA_9,
        canvas.Const.FONT_TAHOMA_10,
        canvas.Const.FONT_TAHOMA_10_BOLD,
        canvas.Const.FONT_TAHOMA_10_BOLD_STROKE,
        canvas.Const.FONT_TAHOMA_11,
        canvas.Const.FONT_TAHOMA_11_BOLD,
        canvas.Const.FONT_TAHOMA_11_BOLD_STROKE,
        canvas.Const.FONT_TAHOMA_12,
        canvas.Const.FONT_TAHOMA_12_BOLD,
        canvas.Const.FONT_TAHOMA_S_15_BOLD,
    ];
    var resources = [["ui", canvas.Config.ui + "hunt.json"]];
    for (var i = 0; i < fonts.length; i++) resources.push(canvas.Config.fontsPath + fonts[i] + ".fnt");
    if (this.model.mapFile) {
        var str = this.model.mapFile.split(".swf")[0];
        resources.push(["map_bot", str + "_mask.dat"]);
        resources.push(["map_plant", str + "_mask_farm01.dat"]);
        resources.push(["map_stone", str + "_mask_farm02.dat"]);
        resources.push(["map_fish", str + "_mask_farm04.dat"]);
        resources.push(["map_mci", canvas.Config.huntMapsPath + this.model.mapName + "/" + this.model.mapName + ".mci"]);
        resources.push(["map", canvas.Config.huntMapsPath + this.model.mapName + "/" + this.model.mapName + ".json"]);
        resources.push(["first_data", this.model.reqConfURL]);
    }
    canvas.app.CanvasApp.prototype.init.call(this, resources);
};
canvas.app.CanvasHunt.prototype.ready = function () {
    canvas.app.CanvasApp.prototype.ready.call(this);
    canvas.InputManager.init();
    this.model.prep_language();
    this.hintManager = new canvas.utils.HintManager();
    this.windowsManager = new canvas.utils.WindowsManager();
    this.main = new canvas.app.hunt.Main(this.model, this.hintManager, this.windowsManager);
    this.model.init(this.main);
    this.root.addChild(this.main);
    this.main.view.init();
    this.fps = 30;
    this.resize();
    canvas.utils.ABController.init(this, "hunt");
};
canvas.app.CanvasHunt.prototype.handlerEnterFrame = function () {
    canvas.EventManager.dispatchEvent(canvas.app.hunt.Event.ENTER_FRAME);
    canvas.app.CanvasApp.prototype.handlerEnterFrame.call(this);
};
canvas.app.CanvasHunt.prototype.resize = function () {
    canvas.app.CanvasApp.prototype.resize.call(this);
    if (this.main) this.main.resize(this.width, this.height);
};
canvas.app.CanvasHunt.prototype.handlerMouseDown = function () {
    canvas.app.CanvasApp.prototype.handlerMouseDown.call(this);
    this.focus();
};
canvas.app.CanvasHunt.prototype.focus = function () {
    canvas.app.CanvasApp.prototype.focus.call(this);
};
canvas.app.CanvasHunt.prototype.swfObject = function (data) {
    if (this.main) {
        this.main.swfObject(data);
    }
};
canvas.app.hunt.log = function (message, color) {
    canvas.Log.add(canvas.Log.HUNT, message, color);
};
canvas.app.CanvasInst = function (par, parent) {
    canvas.app.CanvasApp.call(this, par, parent, true, 0, 0);
};
canvas.app.CanvasInst.prototype = Object.create(canvas.app.CanvasApp.prototype);
canvas.app.CanvasInst.prototype.init = function () {
    this.model = new canvas.app.inst.Model(this.par);
    canvas.app.inst.model = this.model;
    canvas.app.world.model = canvas.app.inst.model;
    canvas.Config.worldPath = canvas.Config.instPath;
    canvas.app.world.Event.ENTER_FRAME = canvas.app.inst.Event.ENTER_FRAME;
    var fonts = [canvas.Const.FONT_TAHOMA_11_BOLD_STROKE, canvas.Const.FONT_TAHOMA_10_BOLD, canvas.Const.FONT_TAHOMA_12_BOLD, canvas.Const.FONT_TAHOMA_11_BOLD];
    var resources = [
        ["ui", canvas.Config.ui + "inst.json"],
        ["config", this.model.ListLink],
    ];
    for (var i = 0; i < fonts.length; i++) resources.push(canvas.Config.fontsPath + fonts[i] + ".fnt");
    document.body.style.overflow = "hidden";
    canvas.EventManager.addEventListener(canvas.ResourceLoader.EVENT_COMPLETE, null, this.preReady, this);
    canvas.ResourceLoader.add(resources);
};
canvas.app.CanvasInst.prototype.preReady = function () {
    canvas.EventManager.removeEventListener(canvas.ResourceLoader.EVENT_COMPLETE, null, this.preReady, this);
    this.model.initConfig();
    var conf = canvas.app.inst.model;
    var cur_ins = conf.INS_LIST[conf.ActiveIns];
    if (cur_ins) {
        canvas.app.CanvasApp.prototype.init.call(this, [["map" + cur_ins.id, conf.LOCALE + "/ins_" + cur_ins.id + ".xml"]]);
    }
};
canvas.app.CanvasInst.prototype.ready = function () {
    canvas.app.CanvasApp.prototype.ready.call(this);
    canvas.ResourceLoader.addSubAlias("ui", "world");
    this.model.init();
    canvas.InputManager.init();
    this.hintManager = new canvas.utils.HintManager();
    this.main = new canvas.app.inst.Main(this.model, this.hintManager);
    this.model.main = this.main;
    this.root.addChild(this.main);
    this.fps = 30;
    this.resize();
};
canvas.app.CanvasInst.prototype.handlerEnterFrame = function () {
    canvas.EventManager.dispatchEvent(canvas.app.inst.Event.ENTER_FRAME);
    canvas.app.CanvasApp.prototype.handlerEnterFrame.call(this);
};
canvas.app.CanvasInst.prototype.resize = function () {
    canvas.app.CanvasApp.prototype.resize.call(this);
    if (this.main) this.main.resize(this.width, this.height);
};
canvas.app.CanvasInst.prototype.swfObject = function (data) {
    if (this.main) {
        this.main.swfObject(data);
    }
};
canvas.app.inst.log = function (message, color) {
    canvas.Log.add(canvas.Log.INST, message, color);
};
canvas.app.CanvasLeftMenu = function (par, parent) {
    var obj = typeof par == "string" ? canvas.Functions.decodeUrlParams(par.replace(/\+/g, "%20")) : par;
    canvas.app.leftMenu.Const.ON_PAGE = parseInt(obj.slotsOnPage) || canvas.app.leftMenu.Const.ON_PAGE;
    if (canvas.app.leftMenu.Const.ON_PAGE < canvas.app.leftMenu.Const.ON_PAGE_MIN || canvas.app.leftMenu.Const.ON_PAGE > canvas.app.leftMenu.Const.ON_PAGE_MAX) {
        this.autoSlots = true;
        this.defaultHeight = 565;
    } else {
        this.defaultHeight = canvas.app.leftMenu.Const.ON_PAGE * canvas.app.leftMenu.Const.SLOT_HEIGHT + 25;
    }
    canvas.app.CanvasApp.call(this, par, parent, false, 0, 0);
    parent.style.overflow = "hidden";
};
canvas.app.CanvasLeftMenu.prototype = Object.create(canvas.app.CanvasApp.prototype);
canvas.app.CanvasLeftMenu.prototype.init = function () {
    this.model = new canvas.app.leftMenu.Model(this.par);
    canvas.app.leftMenu.model = this.model;
    this.resize();
    var fonts = [canvas.Const.FONT_TAHOMA_9_STROKE, canvas.Const.FONT_TAHOMA_9_BOLD_STROKE, canvas.Const.FONT_TAHOMA_11_BOLD];
    var resources = [["ui", canvas.Config.ui + "main.json"]];
    for (var i = 0; i < fonts.length; i++) resources.push(canvas.Config.fontsPath + fonts[i] + ".fnt");
    canvas.app.CanvasApp.prototype.init.call(this, resources);
};
canvas.app.CanvasLeftMenu.prototype.ready = function () {
    canvas.app.CanvasApp.prototype.ready.call(this);
    this.main = new canvas.app.leftMenu.Main(this.model);
    this.model.main = this.main;
    this.root.addChild(this.main);
    this.fps = 20;
};
canvas.app.CanvasLeftMenu.prototype.handlerEnterFrame = function () {
    canvas.EventManager.dispatchEvent(canvas.app.leftMenu.Event.ENTER_FRAME);
    canvas.app.CanvasApp.prototype.handlerEnterFrame.call(this);
};
canvas.app.CanvasLeftMenu.prototype.resize = function () {
    canvas.app.CanvasApp.prototype.resize.call(this);
    if (this.autoSlots && this.model) {
        canvas.app.leftMenu.Const.ON_PAGE = Math.min(
            canvas.app.leftMenu.Const.ON_PAGE_MAX,
            Math.max(canvas.app.leftMenu.Const.ON_PAGE_MIN, Math.floor(($(document).height() - 115) / canvas.app.leftMenu.Const.SLOT_HEIGHT)),
            this.model && this.model.slotsCount ? this.model.slotsCount : canvas.app.leftMenu.Const.ON_PAGE_MAX
        );
        if (this.main && this.main.view) {
            if (this.model.lastOnPageCount != canvas.app.leftMenu.Const.ON_PAGE) {
                this.model.lastOnPageCount = canvas.app.leftMenu.Const.ON_PAGE;
                this.main.view.initList();
                this.main.view.update();
            }
        }
    }
};
canvas.app.CanvasLeftMenu.prototype.swfObject = function (data) {
    if (this.main) {
        var slotsCount = this.model.slotsCount;
        this.main.swfObject(data);
        if (this.model.slotsCount != slotsCount) {
            this.resize();
        }
    }
};
canvas.app.CanvasLeftMenu.prototype.swfData = function (name, data) {
    if (this.main) {
        this.main.swfData(data);
    }
};
canvas.app.leftMenu.log = function (message, color) {
    canvas.Log.add(canvas.Log.LEFT_MENU, message, color);
};
canvas.app.CanvasLocation = function (par, parent) {
    canvas.app.CanvasApp.call(this, par, parent, true, -2, -17);
};
canvas.app.CanvasLocation.prototype = Object.create(canvas.app.CanvasApp.prototype);
canvas.app.CanvasLocation.prototype.init = function () {
    this.model = new canvas.app.location.Model(this.par);
    canvas.app.location.model = this.model;
    var fonts = [
        canvas.Const.FONT_TAHOMA_9,
        canvas.Const.FONT_TAHOMA_10_BOLD,
        canvas.Const.FONT_TAHOMA_10,
        canvas.Const.FONT_TAHOMA_11_BOLD,
        canvas.Const.FONT_TAHOMA_11,
        canvas.Const.FONT_TAHOMA_12_BOLD,
        canvas.Const.FONT_TAHOMA_12,
        canvas.Const.FONT_TAHOMA_16_BOLD_STROKE,
    ];
    var resources = [
        ["ui", canvas.Config.ui + "location.json"],
        ["navigate", canvas.Config.wwwPath + this.model.CfgNav],
    ];
    for (var i = 0; i < fonts.length; i++) resources.push(canvas.Config.fontsPath + fonts[i] + ".fnt");
    canvas.app.CanvasApp.prototype.init.call(this, resources);
};
canvas.app.CanvasLocation.prototype.ready = function () {
    canvas.app.CanvasApp.prototype.ready.call(this);
    canvas.InputManager.init();
    this.hintManager = new canvas.utils.HintManager();
    this.windowsManager = new canvas.utils.WindowsManager();
    this.main = new canvas.app.location.Main(this.model, this.hintManager, this.windowsManager);
    this.blinkButton = this.main.view.blinkButton;
    this.root.addChild(this.main);
    this.fps = 30;
    this.resize();
};
canvas.app.CanvasLocation.prototype.swfObject = function (data) {
    this.main.swfObject(data);
};
canvas.app.CanvasLocation.prototype.handlerEnterFrame = function () {
    canvas.EventManager.dispatchEvent(canvas.app.location.Event.ENTER_FRAME);
    canvas.px.Tween.update();
    canvas.app.CanvasApp.prototype.handlerEnterFrame.call(this);
};
canvas.app.CanvasLocation.prototype.resize = function () {
    canvas.app.CanvasApp.prototype.resize.call(this);
    if (this.main) this.main.resize(this.width, this.height);
};
canvas.app.location.log = function (message, color) {
    canvas.Log.add(canvas.Log.LOCATION, message, color);
};
canvas.app.CanvasMagic = function (par, parent, type) {
    canvas.app.CanvasApp.call(this, par, parent, false, 0, 0);
    this.type = type;
};
canvas.app.CanvasMagic.prototype = Object.create(canvas.app.CanvasApp.prototype);
canvas.app.CanvasMagic.prototype.init = function () {
    this.model = new canvas.app.magic.Model(this.par);
    this.model.width = this.par.width;
    this.model.height = this.par.height;
    this.model.type = this.type;
    canvas.app.magic.model = this.model;
    switch (this.model.type) {
        case canvas.app.magic.Const.TYPE_AURA:
            canvas.app.magic.modelAura = this.model;
            break;
        case canvas.app.magic.Const.TYPE_SHADOW:
            canvas.app.magic.modelShadow = this.model;
            break;
        default:
            canvas.app.magic.modelMagic = this.model;
    }
    var fonts = [canvas.Const.FONT_IFLASH, canvas.Const.FONT_TAHOMA_9_STROKE];
    var resources = [["ui", canvas.Config.ui + "magic.json"]];
    for (var i = 0; i < fonts.length; i++) resources.push(canvas.Config.fontsPath + fonts[i] + ".fnt");
    canvas.app.CanvasApp.prototype.init.call(this, resources);
};
canvas.app.CanvasMagic.prototype.ready = function () {
    canvas.app.CanvasApp.prototype.ready.call(this);
    this.hintManager = new canvas.utils.HintManager();
    this.main = new canvas.app.magic.Main(this.model, this.hintManager);
    this.root.addChild(this.main);
    this.fps = 20;
};
canvas.app.CanvasMagic.prototype.handlerEnterFrame = function () {
    canvas.EventManager.dispatchEvent(canvas.app.magic.Event.ENTER_FRAME);
    canvas.app.CanvasApp.prototype.handlerEnterFrame.call(this);
};
canvas.app.CanvasMagic.prototype.resize = function () {
    canvas.app.CanvasApp.prototype.resize.call(this);
};
canvas.app.magic.log = function (message, color) {
    canvas.Log.add(canvas.Log.MAGIC, message, color);
};
canvas.app.CanvasManor = function (par, parent) {
    canvas.app.CanvasApp.call(this, par, parent, true, -4, -4);
    if (this.par.Guest == "1") {
        this.widthOffset = 0;
        this.heightOffset = 0;
    }
    canvas.app.CanvasManor.App = this.app;
};
canvas.app.CanvasManor.prototype = Object.create(canvas.app.CanvasApp.prototype);
canvas.app.CanvasManor.prototype.init = function () {
    this.model = new canvas.app.manor.Model(this.par);
    canvas.app.manor.model = this.model;
    var fonts = [
        canvas.Const.FONT_TAHOMA_9,
        canvas.Const.FONT_TAHOMA_9_BOLD,
        canvas.Const.FONT_TAHOMA_10,
        canvas.Const.FONT_TAHOMA_10_BOLD,
        canvas.Const.FONT_TAHOMA_11,
        canvas.Const.FONT_TAHOMA_11_BOLD,
        canvas.Const.FONT_TAHOMA_11_BOLD_STROKE,
        canvas.Const.FONT_TAHOMA_12,
        canvas.Const.FONT_TAHOMA_12_BOLD,
        canvas.Const.FONT_TAHOMA_12_BOLD_STROKE,
        canvas.Const.FONT_TAHOMA_13,
        canvas.Const.FONT_TAHOMA_13_BOLD,
        canvas.Const.FONT_TAHOMA_13_BOLD_STROKE,
        canvas.Const.FONT_TAHOMA_14_BOLD,
        canvas.Const.FONT_TAHOMA_S_15_BOLD,
        canvas.Const.FONT_TAHOMA_16_BOLD,
    ];
    var resources = [
        ["ui", canvas.Config.ui + "manor.json"],
        ["dic", this.model.dicURL],
        canvas.Config.effectsAtlasPath + this.model.backImage + ".json",
        canvas.Config.effectsPath + this.model.backImage + ".mci",
        ["throne_room_items", this.model.throneRoomData.itemsPath],
        ["throne_room_types", this.model.throneRoomData.typesPath],
        canvas.Config.effectsPath + "hourglass.mci",
    ];
    if (!this.model.guestMode) {
        resources.push(["conf", canvas.Config.entryPoint + "?object=estate&json_mode_on=1&action=conf"]);
    }
    for (var i = 0; i < fonts.length; i++) resources.push(canvas.Config.fontsPath + fonts[i] + ".fnt");
    canvas.app.CanvasApp.prototype.init.call(this, resources);
};
canvas.app.CanvasManor.prototype.ready = function () {
    canvas.app.CanvasApp.prototype.ready.call(this);
    this.model.parseDic();
    this.model.throneRoomData.init();
    this.main = new canvas.app.manor.Main(this.model);
    var index;
    this.inputCount = 12;
    for (var i = 0; i < this.inputCount; i++) {
        index = "input" + (i ? i : "");
        canvas.app.manor.view[index] = new canvas.ui.Input(this.par.parent);
        canvas.app.manor.view[index].parent = null;
    }
    this.root.addChild(this.main);
    this.fps = 30;
    this.__resize();
};
canvas.app.CanvasManor.prototype.handlerEnterFrame = function () {
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.ENTER_FRAME);
    if (!this.model.paused) canvas.EventManager.dispatchEvent(canvas.app.manor.Event.ENTER_FRAME_ANIM);
    canvas.app.CanvasApp.prototype.handlerEnterFrame.call(this);
    canvas.px.Tween.update();
};
canvas.app.CanvasManor.prototype.resize = function () {
    if (this.model && this.model.guestMode) {
        setTimeout(this.__resize.bind(this), 50);
    } else {
        this.__resize();
    }
};
canvas.app.CanvasManor.prototype.__resize = function () {
    canvas.app.CanvasApp.prototype.resize.call(this);
    if (this.model) {
        this.model.width = Math.max(Math.min(this.width, canvas.app.manor.Const.WIDTH_MAX), canvas.app.manor.Const.WIDTH_MIN);
        this.model.height = Math.min(this.height, canvas.app.manor.Const.HEIGHT_MAX);
        if (this.model.guestMode) {
            this.model.width += 50;
            this.model.height += 60;
        }
        if (this.main) this.main.resize(this.width, this.height);
        var index;
        for (var i = 0; i < this.inputCount; i++) {
            index = "input" + (i ? i : "");
            if (canvas.app.manor.view[index]) {
                canvas.app.manor.view[index].stageHeight = this.model.height;
                canvas.app.manor.view[index].scale = this.model.winScale;
                canvas.app.manor.view[index].handlerEnterFrame(true);
            }
        }
    }
};
canvas.app.CanvasManor.prototype.updateCurrentBuilding = function () {
    if (this.main) this.main.controller.updateCurrentBuilding();
};
canvas.app.CanvasManor.prototype.ScrollMove = function (direction, pressed) {
    this.main.view.manor.scrollMove(direction, pressed);
};
canvas.app.manor.log = function (message, color) {
    canvas.Log.add(canvas.Log.MANOR, message, color);
};
canvas.app.CanvasMem = function (par, parent) {
    canvas.app.CanvasApp.call(this, par, parent, true, 0, -20, true);
    document.onkeydown = null;
    document.onkeyup = null;
};
canvas.app.CanvasMem.prototype = Object.create(canvas.app.CanvasApp.prototype);
canvas.app.CanvasMem.prototype.init = function () {
    this.model = new canvas.app.mem.Model(this.par);
    canvas.app.mem.model = this.model;
    canvas.app.CanvasApp.prototype.init.call(this);
};
canvas.app.CanvasMem.prototype.ready = function () {
    canvas.app.CanvasApp.prototype.ready.call(this);
    this.main = new canvas.app.mem.Main(this.model, this.par.parent);
    this.fps = 0;
};
canvas.app.CanvasMem.prototype.resize = function () {
    canvas.app.CanvasApp.prototype.resize.call(this);
    if (this.main) this.main.resize();
};
canvas.app.CanvasMem.prototype.swfData = function (name, data) {
    this.main.swfData(name, data);
};
canvas.app.mem.log = function (message, color) {
    canvas.Log.add(canvas.Log.MEM, message, color);
};
canvas.app.CanvasMirror = function (par, parent) {
    if (canvas.app.mirror.instance && this.par) {
        canvas.app.mirror.instance.destroy();
    }
    canvas.app.mirror.instance = this;
    canvas.app.CanvasApp.call(this, par, parent, true, 0, 0, false, _top().window);
};
canvas.app.CanvasMirror.prototype = Object.create(canvas.app.CanvasApp.prototype);
canvas.app.CanvasMirror.prototype.preInit = function () {
    if (this.par.ux_conf == undefined) this.par.ux_conf = canvas.Config.uxPath;
    canvas.app.CanvasApp.prototype.preInit.call(this);
};
canvas.app.CanvasMirror.prototype.init = function () {
    this.model = new canvas.app.mirror.Model(this.par);
    this.model.width = this.par.width;
    this.model.height = this.par.height;
    canvas.app.mirror.model = this.model;
    var fonts = [
        canvas.Const.FONT_TAHOMA_9,
        canvas.Const.FONT_TAHOMA_10,
        canvas.Const.FONT_TAHOMA_11,
        canvas.Const.FONT_TAHOMA_11_BOLD,
        canvas.Const.FONT_TAHOMA_12,
        canvas.Const.FONT_TAHOMA_13,
        canvas.Const.FONT_TAHOMA_14_BOLD_STROKE,
        canvas.Const.FONT_TAHOMA_15_BOLD,
        canvas.Const.FONT_TAHOMA_S_15_BOLD,
        canvas.Const.FONT_TAHOMA_15_BOLD_STROKE,
        canvas.Const.FONT_TAHOMA_16_BOLD_STROKE,
        canvas.Const.FONT_TAHOMA_18,
        canvas.Const.FONT_AMERICAN_TEXT_40_SHADOW_GRADIENT,
    ];
    var resources = [["mirror", canvas.Config.ui + "mirror.json"]];
    for (var i = 0; i < fonts.length; i++) resources.push(canvas.Config.fontsPath + fonts[i] + ".fnt");
    canvas.app.CanvasApp.prototype.init.call(this, resources);
};
canvas.app.CanvasMirror.prototype.ready = function () {
    canvas.app.CanvasApp.prototype.ready.call(this);
    if (!canvas.ResourceLoader.get("ui")) canvas.ResourceLoader.addSubAlias("mirror", "ui");
    this.main = new canvas.app.mirror.Main(this.model);
    this.root.addChild(this.main);
    this.fps = 30;
};
canvas.app.CanvasMirror.prototype.handlerEnterFrame = function () {
    canvas.EventManager.dispatchEvent(canvas.app.mirror.Event.ENTER_FRAME);
    canvas.app.CanvasApp.prototype.handlerEnterFrame.call(this);
    if (this.par.parent.offsetParent === null) this.destroy();
};
canvas.app.CanvasMirror.prototype.resize = function () {
    canvas.app.CanvasApp.prototype.resize.call(this);
};
canvas.app.CanvasMirror.prototype.destroy = function () {
    this.main.destroy();
    canvas.app.CanvasApp.prototype.destroy.call(this, false, false);
};
canvas.app.mirror.log = function (message, color) {
    canvas.Log.add(canvas.Log.MIRROR, message, color);
};
canvas.app.CanvasPets = function (par, parent) {
    canvas.app.CanvasApp.call(this, par, parent, false, 0, 0);
    this.ENTER_FRAME = "Pets.ENTER_FRAME";
};
canvas.app.CanvasPets.prototype = Object.create(canvas.app.CanvasApp.prototype);
canvas.app.CanvasPets.prototype.init = function () {
    var resources = [];
    canvas.app.CanvasApp.prototype.init.call(this, resources);
};
canvas.app.CanvasPets.prototype.ready = function () {
    canvas.app.CanvasApp.prototype.ready.call(this);
    this.fps = 20;
    this.pet = this.root.addChild(new canvas.animation.Pet(this.par, this.ENTER_FRAME));
};
canvas.app.CanvasPets.prototype.handlerEnterFrame = function () {
    canvas.EventManager.dispatchEvent(this.ENTER_FRAME);
    canvas.app.CanvasApp.prototype.handlerEnterFrame.call(this);
};
canvas.app.CanvasPets.prototype.updatePet = function (params) {
    if (this.pet) {
        this.pet.update(params);
    }
};
canvas.app.CanvasProgress = function (par, parent) {
    canvas.app.CanvasApp.call(this, par, parent, false, 0, 0);
};
canvas.app.CanvasProgress.prototype = Object.create(canvas.app.CanvasApp.prototype);
canvas.app.CanvasProgress.prototype.init = function () {
    this.smallSize = this.height < 32;
    var resources = [["ui", canvas.Config.ui + "progress.json"], canvas.Config.fontsPath + (this.smallSize ? canvas.Const.FONT_TAHOMA_11_BOLD_STROKE : canvas.Const.FONT_TAHOMA_16_BOLD_GLOW_NUMBERS) + ".fnt"];
    canvas.app.CanvasApp.prototype.init.call(this, resources);
};
canvas.app.CanvasProgress.prototype.ready = function () {
    canvas.app.CanvasApp.prototype.ready.call(this);
    this.main = new canvas.px.Container();
    this.root.addChild(this.main);
    this.start();
};
canvas.app.CanvasProgress.prototype.start = function () {
    var container = new canvas.px.Container();
    this.main.addChild(container);
    container.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "bar_full")));
    var current = this.par.current != undefined ? parseFloat(this.par.current) : 123.36;
    var total = this.par.total != undefined ? parseFloat(this.par.total) : 1234.51;
    var moneyFormat = this.par.moneyFormat != undefined ? parseInt(this.par.moneyFormat) : 0;
    var percent = current / total;
    var progress = new canvas.ui.Progress();
    progress.setSize(466, 47);
    progress.position.set(5, -9);
    var front = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "bar_empty"));
    container.addChild(front);
    container.addChild(progress);
    front.mask = progress.sprite;
    progress.progress = percent;
    if (percent > 0 && percent < 1) {
        var center = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "center"));
        center.position.set(progress.sprite.width, -1);
        container.addChild(center);
    }
    var text = new canvas.ui.Text(this.smallSize ? canvas.Const.FONT_TAHOMA_11_BOLD_STROKE : canvas.Const.FONT_TAHOMA_16_BOLD_GLOW_NUMBERS, 16771494, this.smallSize ? this.width : 459, 23, "center");
    this.main.addChild(text);
    if (this.smallSize) {
        text.position.set(0, 1);
    } else {
        text.position.set(7, 6);
    }
    text.text = current + " / " + total;
    if (this.height < this.main.height) {
        container.scale.set(this.width / this.main.width, this.height / this.main.height);
    }
    canvas.app.CanvasApp.prototype.handlerEnterFrame.call(this);
};
canvas.app.CanvasPuzzle = function (par, parent) {
    canvas.app.CanvasApp.call(this, par, parent, true, 0, 0, false, _top().window);
};
canvas.app.CanvasPuzzle.prototype = Object.create(canvas.app.CanvasApp.prototype);
canvas.app.CanvasPuzzle.prototype.preInit = function () {
    if (this.par.ux_conf == undefined) this.par.ux_conf = canvas.Config.uxPath;
    canvas.app.CanvasApp.prototype.preInit.call(this);
};
canvas.app.CanvasPuzzle.prototype.init = function () {
    this.model = new canvas.app.puzzle.Model(this.par);
    canvas.app.puzzle.model = this.model;
    this.model.width = this.par.width;
    this.model.height = this.par.height;
    var fonts = [canvas.Const.FONT_TAHOMA_S_15_BOLD, canvas.Const.FONT_TAHOMA_11_BOLD];
    var resources = [
        ["puzzle", canvas.Config.ui + "puzzle.json"],
        ["puzzleImage", this.model.pictureUrl],
    ];
    for (var i = 0; i < fonts.length; i++) resources.push(canvas.Config.fontsPath + fonts[i] + ".fnt");
    canvas.app.CanvasApp.prototype.init.call(this, resources);
};
canvas.app.CanvasPuzzle.prototype.ready = function () {
    canvas.app.CanvasApp.prototype.ready.call(this);
    if (!canvas.ResourceLoader.get("ui")) canvas.ResourceLoader.addSubAlias("puzzle", "ui");
    this.main = new canvas.app.puzzle.Main(this.model);
    this.model.main = this.main;
    this.root.addChild(this.main);
    this.fps = 30;
};
canvas.app.CanvasPuzzle.prototype.handlerEnterFrame = function () {
    canvas.EventManager.dispatchEvent(canvas.app.puzzle.Event.ENTER_FRAME);
    canvas.px.Tween.update();
    canvas.app.CanvasApp.prototype.handlerEnterFrame.call(this);
    if (this.par.parent.offsetParent === null) this.fps = 0;
};
canvas.app.CanvasPuzzle.prototype.resize = function () {
    canvas.app.CanvasApp.prototype.resize.call(this);
};
canvas.app.CanvasPuzzle.prototype.destroy = function () {
    this.main.destroy();
    canvas.app.CanvasApp.prototype.destroy.call(this, false, false);
};
canvas.app.puzzle.log = function (message, color) {
    canvas.Log.add(canvas.Log.puzzle, message, color);
};
canvas.app.CanvasReg = function (par, parent) {
    canvas.app.CanvasApp.call(this, par, parent, false, 0, 0);
};
canvas.app.CanvasReg.prototype = Object.create(canvas.app.CanvasApp.prototype);
canvas.app.CanvasReg.prototype.init = function () {
    var resources = [["ui", "{canvas.Config.langPath}reg/reg.json"], canvas.Config.fontsPath + canvas.Const.FONT_TAHOMA_12 + ".fnt", canvas.Config.fontsPath + canvas.Const.FONT_TAHOMA_11_BOLD + ".fnt"];
    canvas.app.CanvasApp.prototype.init.call(this, resources);
};
canvas.app.CanvasReg.prototype.ready = function () {
    canvas.app.CanvasApp.prototype.ready.call(this);
    this.main = new canvas.px.Container();
    this.root.addChild(this.main);
    this.start();
    this.fps = 30;
};
canvas.app.CanvasReg.prototype.handlerEnterFrame = function () {
    canvas.EventManager.dispatchEvent(canvas.app.barber.Event.ENTER_FRAME);
    canvas.app.CanvasApp.prototype.handlerEnterFrame.call(this);
};
canvas.app.CanvasReg.prototype.start = function () {
    this.main.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "back")));
    this.barber = this.main.addChild(new canvas.app.barber.Barber(this.par, this));
    this.barber.y = 232;
    var t = this.main.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD, 16769465, 130, 16, "center"));
    t.text = canvas.Translator.getText(3028);
    t.position.set(180, 201);
    t = this.main.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD, 16769465, 130, 16, "center"));
    t.text = canvas.Translator.getText(3029);
    t.position.set(180, 53);
    this.genderImage = this.main.addChild(new canvas.px.Sprite(canvas.px.TextureEmpty));
    this.genderImage.position.set(295, 229);
    this.humImage = this.main.addChild(new canvas.px.Sprite(canvas.px.TextureEmpty));
    this.humImage.position.set(5, 20);
    this.magImage = this.main.addChild(new canvas.px.Sprite(canvas.px.TextureEmpty));
    this.magImage.position.set(242, 24);
    this.humButton = this.main.addChild(new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "button_hum")));
    this.humButton.position.set(56, 153);
    this.humButton.sprite.hitArea = new canvas.px.Rectangle(-40, -120, 230, 160);
    this.magButton = this.main.addChild(new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "button_mag")));
    this.magButton.position.set(261, 153);
    this.magButton.sprite.hitArea = new canvas.px.Rectangle(-20, -120, 230, 160);
    if (this.par.kind_bonus) {
        this.bonus = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "bonus"));
        this.bonus.position.set(0, -28);
        if (this.par.kind_bonus == "1") {
            this.humButton.sprite.addChild(this.bonus);
        } else {
            this.magButton.sprite.addChild(this.bonus);
        }
    }
    this.descriptionField = this.main.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_12, 6500627, 196, 96, "left"));
    this.descriptionField.position.set(255, 394);
    this.setGenderImage(this.barber.model.mySexVal);
    this.setRaceImage(this.barber.model.myRaceVal);
    canvas.EventManager.addEventListener(canvas.app.barber.Event.GENDER_CHANGE, null, this.genderChangeHandler, this);
    canvas.EventManager.addEventListener(canvas.app.barber.Event.RACE_CHANGE, null, this.raceChangeHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.humButton, this.barber.bb11Action, this.barber);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.magButton, this.barber.bb12Action, this.barber);
};
canvas.app.CanvasReg.prototype.genderChangeHandler = function (event) {
    this.setGenderImage(event.params);
};
canvas.app.CanvasReg.prototype.raceChangeHandler = function (event) {
    this.setRaceImage(event.params);
};
canvas.app.CanvasReg.prototype.setGenderImage = function (value) {
    this.genderImage.texture = canvas.ResourceLoader.getImage("ui", value == "1" ? "gender_m" : "gender_f");
};
canvas.app.CanvasReg.prototype.setRaceImage = function (value) {
    this.humImage.texture = canvas.ResourceLoader.getImage("ui", value == "1" ? "race_hum" : "race_hum_grey");
    this.magImage.texture = canvas.ResourceLoader.getImage("ui", value != "1" ? "race_mag" : "race_mag_grey");
    this.humButton.sprite.interactive = this.humButton.buttonMode = value != "1";
    this.magButton.sprite.interactive = this.magButton.buttonMode = value == "1";
    this.humButton.handlerOut();
    this.magButton.handlerOut();
    this.descriptionField.text = canvas.Translator.getText(value == "1" ? 3030 : 3031);
};
canvas.app.CanvasRightMenu = function (par, parent) {
    canvas.app.CanvasApp.call(this, par, parent, false, 0, 0);
    parent.style.overflow = "hidden";
};
canvas.app.CanvasRightMenu.prototype = Object.create(canvas.app.CanvasApp.prototype);
canvas.app.CanvasRightMenu.prototype.init = function () {
    this.model = new canvas.app.rightMenu.Model(this.par);
    canvas.app.rightMenu.model = this.model;
    var fonts = [canvas.Const.FONT_ARIAL_9_BOLD_STROKE, canvas.Const.FONT_TAHOMA_9_STROKE];
    var resources = [["ui", canvas.Config.ui + "main.json"]];
    for (var i = 0; i < fonts.length; i++) resources.push(canvas.Config.fontsPath + fonts[i] + ".fnt");
    canvas.app.CanvasApp.prototype.init.call(this, resources);
};
canvas.app.CanvasRightMenu.prototype.ready = function () {
    canvas.app.CanvasApp.prototype.ready.call(this);
    this.main = new canvas.app.rightMenu.Main(this.model);
    this.model.main = this.main;
    this.root.addChild(this.main);
    this.fps = 20;
    this.resize();
};
canvas.app.CanvasRightMenu.prototype.handlerEnterFrame = function () {
    canvas.EventManager.dispatchEvent(canvas.app.rightMenu.Event.ENTER_FRAME);
    canvas.app.CanvasApp.prototype.handlerEnterFrame.call(this);
};
canvas.app.CanvasRightMenu.prototype.resize = function () {
    canvas.app.CanvasApp.prototype.resize.call(this);
};
canvas.app.CanvasRightMenu.prototype.swfObject = function (data) {
    if (this.main) {
        this.main.swfObject(data);
    }
};
canvas.app.CanvasRightMenu.prototype.swfData = function (data) {};
canvas.app.CanvasRightMenu.prototype.blinkButton = function (id, status) {
    if (this.main) {
        this.main.blinkButton(id, status);
    }
};
canvas.app.rightMenu.log = function (message, color) {
    canvas.Log.add(canvas.Log.RIGHT_MENU, message, color);
};
canvas.app.CanvasTest = function (par, parent) {
    canvas.app.CanvasApp.call(this, par, parent);
};
canvas.app.CanvasTest.prototype = Object.create(canvas.app.CanvasApp.prototype);
canvas.app.CanvasTest.prototype.init = function () {
    var resources = [["ui", canvas.Config.ui], canvas.Config.imgPath + "spells/spells.json", canvas.Config.imgPath + "spells/spells2.json"];
    canvas.app.CanvasApp.prototype.init.call(this, resources);
};
canvas.app.CanvasTest.prototype.ready = function () {
    canvas.app.CanvasApp.prototype.ready.call(this);
    this.fps = 30;
    var mc = new canvas.px.MovieClip(canvas.Config.spellsPath + "_SP1164");
    mc.frameEvent = "ENTER_FRAME_TEST";
    this.root.addChild(mc);
    mc.position.set(100, 100);
    canvas.EventManager.addEventListener(null, canvas.ResourceLoader.EVENT_PROGRESS, function (e) {});
};
canvas.app.CanvasTest.prototype.handlerEnterFrame = function () {
    canvas.EventManager.dispatchEvent("ENTER_FRAME_TEST");
    canvas.app.CanvasApp.prototype.handlerEnterFrame.call(this);
};
canvas.app.CanvasTest.prototype.completeHandler = function () {
    this.goFrame(2);
};
canvas.app.CanvasTest.prototype.SND = function (name) {
    canvas.SoundManager.play(canvas.Config.soundsPath + "bots/" + this.mcName + "/" + arguments[1]);
};
canvas.app.CanvasTest.prototype.goFrame = function (num) {
    this.mc.gotoAndStop(num);
    if (this.mc.mcChildsCache["mc" + num]) {
        this.mc.mcChildsCache["mc" + num].loop = true;
        this.mc.mcChildsCache["mc" + num].play();
        if (!this.mc.mcChildsCache["mc" + num].frameEvent) {
            this.mc.mcChildsCache["mc" + num].frameEvent = "ENTER_FRAME_TEST";
        }
    }
};
canvas.app.CanvasTopMenu = function (par, parent) {
    canvas.app.CanvasApp.call(this, par, parent, false, 0, 0);
    this.app.view.id = "top_mnu";
};
canvas.app.CanvasTopMenu.prototype = Object.create(canvas.app.CanvasApp.prototype);
canvas.app.CanvasTopMenu.prototype.init = function () {
    this.model = new canvas.app.topMenu.Model(this.par);
    canvas.app.topMenu.model = this.model;
    var fonts = [canvas.Const.FONT_TAHOMA_11_BOLD_STROKE];
    var resources = [["ui", canvas.Config.ui + "main.json"]];
    for (var i = 0; i < fonts.length; i++) resources.push(canvas.Config.fontsPath + fonts[i] + ".fnt");
    if (this.par.configXml) resources.push(["configMenu", this.par.configXml]);
    canvas.app.CanvasApp.prototype.init.call(this, resources);
};
canvas.app.CanvasTopMenu.prototype.ready = function () {
    canvas.app.CanvasApp.prototype.ready.call(this);
    this.model.parseConfig(canvas.ResourceLoader.get("configMenu"));
    this.main = new canvas.app.topMenu.Main(this.model);
    this.model.main = this.main;
    this.root.addChild(this.main);
    this.fps = 20;
    this.resize();
};
canvas.app.CanvasTopMenu.prototype.handlerEnterFrame = function () {
    canvas.EventManager.dispatchEvent(canvas.app.topMenu.Event.ENTER_FRAME);
    canvas.app.CanvasApp.prototype.handlerEnterFrame.call(this);
};
canvas.app.CanvasTopMenu.prototype.resize = function () {
    canvas.app.CanvasApp.prototype.resize.call(this);
};
canvas.app.CanvasTopMenu.prototype.swfObject = function (data) {
    if (this.main) {
        this.main.swfObject(data);
    }
};
canvas.app.CanvasTopMenu.prototype.blinkButton = function (id, status) {
    if (this.main) {
        this.main.blinkButton(parseInt(id), status);
    }
};
canvas.app.CanvasTopMenu.prototype.executeMenuId = function (id) {
    this.main.executeMenuId(id);
};
canvas.app.topMenu.log = function (message, color) {
    canvas.Log.add(canvas.Log.TOP_MENU, message, color);
};
canvas.app.CanvasTreasure = function (par, parent) {
    canvas.app.CanvasApp.call(this, par, parent, true, 0, 0, false, _top().window);
};
canvas.app.CanvasTreasure.prototype = Object.create(canvas.app.CanvasApp.prototype);
canvas.app.CanvasTreasure.prototype.preInit = function () {
    if (this.par.ux_conf == undefined) this.par.ux_conf = canvas.Config.uxPath;
    canvas.app.CanvasApp.prototype.preInit.call(this);
};
canvas.app.CanvasTreasure.prototype.init = function () {
    this.model = new canvas.app.treasure.Model(this.par);
    this.model.width = this.par.width;
    this.model.height = this.par.height;
    canvas.app.treasure.model = this.model;
    var fonts = [
        canvas.Const.FONT_TAHOMA_11_BOLD,
        canvas.Const.FONT_TAHOMA_12,
        canvas.Const.FONT_TAHOMA_12_BOLD,
        canvas.Const.FONT_TAHOMA_14_STROKE,
        canvas.Const.FONT_TAHOMA_14_BOLD_STROKE,
        canvas.Const.FONT_TAHOMA_15_BOLD,
        canvas.Const.FONT_TAHOMA_S_15_BOLD,
    ];
    var resources = [["treasure", canvas.Config.ui + "treasure.json"]];
    for (var i = 0; i < fonts.length; i++) resources.push(canvas.Config.fontsPath + fonts[i] + ".fnt");
    canvas.app.CanvasApp.prototype.init.call(this, resources);
};
canvas.app.CanvasTreasure.prototype.ready = function () {
    canvas.app.CanvasApp.prototype.ready.call(this);
    if (!canvas.ResourceLoader.get("ui")) canvas.ResourceLoader.addSubAlias("treasure", "ui");
    this.main = new canvas.app.treasure.Main(this.model);
    this.root.addChild(this.main);
    this.fps = 30;
};
canvas.app.CanvasTreasure.prototype.handlerEnterFrame = function () {
    canvas.EventManager.dispatchEvent(canvas.app.treasure.Event.ENTER_FRAME);
    canvas.app.CanvasApp.prototype.handlerEnterFrame.call(this);
    if (this.par.parent.offsetParent === null) this.fps = 0;
};
canvas.app.CanvasTreasure.prototype.resize = function () {
    canvas.app.CanvasApp.prototype.resize.call(this);
};
canvas.app.CanvasTreasure.prototype.destroy = function () {
    this.main.destroy();
    canvas.app.CanvasApp.prototype.destroy.call(this, false, false);
};
canvas.app.treasure.log = function (message, color) {
    canvas.Log.add(canvas.Log.TREASURE, message, color);
};
canvas.app.CanvasUser = function (par, parent, top, left) {
    canvas.app.CanvasApp.call(this, par, parent, true, 0, 0);
    canvas.app.user.Const.TOP = top || 0;
    canvas.app.user.Const.LEFT = left || 0;
};
canvas.app.CanvasUser.prototype = Object.create(canvas.app.CanvasApp.prototype);
canvas.app.CanvasUser.prototype.init = function () {
    this.model = new canvas.app.user.Model(this.par);
    canvas.app.user.model = this.model;
    var fonts = [
        canvas.Const.FONT_TAHOMA_9,
        canvas.Const.FONT_TAHOMA_11,
        canvas.Const.FONT_TAHOMA_11_BOLD,
        canvas.Const.FONT_TAHOMA_12,
        canvas.Const.FONT_TAHOMA_12_BOLD,
        canvas.Const.FONT_TAHOMA_10_BOLD,
        canvas.Const.FONT_TAHOMA_14_BOLD_STROKE,
        canvas.Const.FONT_TAHOMA_S_15_BOLD,
        canvas.Const.FONT_TAHOMA_18_BOLD_STROKE,
        canvas.Const.FONT_RADA_18,
        canvas.Const.FONT_ARIAL_10_BOLD_STROKE,
        canvas.Const.FONT_ARIAL_11_BOLD_STROKE,
    ];
    var resources = [["ui", canvas.Config.ui + "user.json"], ["user_mask", canvas.Config.ui + "user_mask.png"], canvas.Config.effects, canvas.Config.effectsPath + "hourglass.mci"];
    for (var i = 0; i < fonts.length; i++) resources.push(canvas.Config.fontsPath + fonts[i] + ".fnt");
    canvas.app.CanvasApp.prototype.init.call(this, resources);
};
canvas.app.CanvasUser.prototype.ready = function () {
    canvas.app.CanvasApp.prototype.ready.call(this);
    canvas.InputManager.init();
    this.hintManager = new canvas.utils.HintManager();
    this.windowsManager = new canvas.utils.WindowsManager();
    this.main = new canvas.app.user.Main(this.model, this.hintManager, this.windowsManager);
    this.model.main = this.main;
    this.root.addChild(this.main);
    this.fps = 30;
    this.app.view.style.top = 34;
    this.createHtmlElements(this.par.parent);
    this.resize();
    try{
        if(ui_rendered !== undefined && typeof ui_rendered === "function") ui_rendered(this);
    }catch(e) {}
};
canvas.app.CanvasUser.prototype.handlerEnterFrame = function () {
    canvas.EventManager.dispatchEvent(canvas.app.user.Event.ENTER_FRAME);
    canvas.app.CanvasApp.prototype.handlerEnterFrame.call(this);
};
canvas.app.CanvasUser.prototype.createHtmlElements = function (parent) {
    var video = document.createElement("video");
    parent.style.minWidth = this.par.width;
    parent.style.height = this.par.height;
    this.app.view.style.position = "absolute";
    if (this.model.canputoff == "0") {
        this.app.view.style.left = 0 + canvas.app.user.Const.LEFT;
        this.app.view.style.top = 54 + canvas.app.user.Const.TOP;
    }
    video.style = "border: none;background-color: transparent; position:absolute;top:108;left:78;outline: none;overflow: hidden;";
    if (this.model.canputoff == "0") {
        video.style.left = 58 + canvas.app.user.Const.LEFT;
        video.style.top = 128 + canvas.app.user.Const.TOP;
    }
    video.autoplay = "1";
    video.loop = "1";
    parent.insertBefore(video, this.app.view);
    this.main.view.background.video = video;
    this.main.view.background.update();
    var img;
    for (var i = 0; i < this.model.SLOTS_COUNT; i++) {
        if (!this.main.view.slots[i]) continue;
        img = document.createElement("img");
        img.style = "border: none;background-color: transparent; position:absolute;outline: none;overflow: hidden;";
        parent.insertBefore(img, this.app.view);
        this.main.view.slots[i].img = img;
    }
};
canvas.app.CanvasUser.prototype.resize = function () {
    canvas.app.CanvasApp.prototype.resize.call(this);
    if (this.main) this.main.resize(this.width, this.height);
};
canvas.app.CanvasUser.prototype.swfObject = function (data) {
    if (this.main) {
        this.main.swfObject(data);
    }
};
canvas.app.CanvasUser.prototype.setBackground = function (url) {
    this.model.backImage = url;
    this.main.view.background.update();
};
canvas.app.user.log = function (message, color) {
    canvas.Log.add(canvas.Log.USER, message, color);
};
canvas.app.CanvasWheel = function (par, parent) {
    canvas.app.CanvasApp.call(this, par, parent);
};
canvas.app.CanvasWheel.prototype = Object.create(canvas.app.CanvasApp.prototype);
canvas.app.CanvasWheel.prototype.init = function () {
    this.model = new canvas.app.wheel.Model(this.par);
    this.model.width = this.par.width;
    this.model.height = this.par.height;
    canvas.app.wheel.model = this.model;
    var fonts = [
        canvas.Const.FONT_CUPRUM_12_BOLD,
        canvas.Const.FONT_CUPRUM_16_BOLD,
        canvas.Const.FONT_CUPRUM_22_BOLD,
        canvas.Const.FONT_CUPRUM_22_BOLD_STROKE,
        canvas.Const.FONT_CUPRUM_24_BOLD_STROKE_BROWN,
        canvas.Const.FONT_CUPRUM_34_BOLD_STROKE,
        canvas.Const.FONT_CUPRUM_40_BOLD,
        canvas.Const.FONT_TAHOMA_11_BOLD,
        canvas.Const.FONT_TAHOMA_12,
        canvas.Const.FONT_TAHOMA_15_BOLD,
        canvas.Const.FONT_TAHOMA_S_15_BOLD,
    ];
    var resources = [["wheel", canvas.Config.ui + "wheel.json"], canvas.Config.effectsPath + "wheel_bonus.mci"];
    for (var i = 0; i < fonts.length; i++) resources.push(canvas.Config.fontsPath + fonts[i] + ".fnt");
    canvas.app.CanvasApp.prototype.init.call(this, resources);
};
canvas.app.CanvasWheel.prototype.ready = function () {
    canvas.app.CanvasApp.prototype.ready.call(this);
    if (!canvas.ResourceLoader.get("ui")) canvas.ResourceLoader.addSubAlias("wheel", "ui");
    this.main = new canvas.app.wheel.Main(this.model);
    this.root.addChild(this.main);
    this.fps = 30;
    this.resize();
};
canvas.app.CanvasWheel.prototype.handlerEnterFrame = function () {
    canvas.EventManager.dispatchEvent(canvas.app.wheel.Event.ENTER_FRAME);
    canvas.app.CanvasApp.prototype.handlerEnterFrame.call(this);
};
canvas.app.CanvasWheel.prototype.swfObject = function (data) {
    if (this.main) {
        this.main.swfObject(data);
    }
};
canvas.app.CanvasWheel.prototype.resize = function () {
    canvas.app.CanvasApp.prototype.resize.call(this);
    if (this.model) {
        this.model.width = this.width;
        this.model.height = this.height;
        if (this.main) {
            this.main.resize();
        }
    }
};
canvas.app.wheel.log = function (message, color) {
    canvas.Log.add(canvas.Log.WHEEL, message, color);
};
canvas.app.CanvasWorld = function (par, parent, isModule) {
    if (isModule == undefined) isModule = false;
    this.isModule = isModule;
    if (isModule) {
        this.par = par;
        this.root = new canvas.px.Container();
        this.stage = parent;
        this.stage.addChild(this.root);
        this.preloader = new canvas.px.MovieClip(canvas.Config.effectsPath + "preloader");
        this.preloader.gotoAndStop(1);
        if (this.preloader.ready) {
            this.preloaderReady();
        } else {
            canvas.EventManager.addEventListener(canvas.px.MovieClipEvent.EVENT_READY, this.preloader, this.preloaderReady, this);
        }
        canvas.app.world.Event.ENTER_FRAME = canvas.app.location.Event.ENTER_FRAME;
    } else {
        canvas.app.CanvasApp.call(this, par, parent, true, 0, 0);
    }
};
canvas.app.CanvasWorld.prototype = Object.create(canvas.app.CanvasApp.prototype);
canvas.app.CanvasWorld.prototype.init = function () {
    this.model = new canvas.app.world.Model(this.par);
    this.model.initModule(this.isModule, this.stage);
    canvas.app.world.model = this.model;
    canvas.app.manor.model = new canvas.app.manor.Model({});
    canvas.app.manor.model.mapMode = true;
    var fonts = [
        canvas.Const.FONT_TAHOMA_10_BOLD_STROKE,
        canvas.Const.FONT_TAHOMA_10,
        canvas.Const.FONT_TAHOMA_10_BOLD,
        canvas.Const.FONT_TAHOMA_11,
        canvas.Const.FONT_TAHOMA_11_BOLD,
        canvas.Const.FONT_TAHOMA_11_BOLD_STROKE,
        canvas.Const.FONT_TAHOMA_12,
        canvas.Const.FONT_TAHOMA_12_BOLD,
        canvas.Const.FONT_TAHOMA_13,
        canvas.Const.FONT_TAHOMA_13_BOLD,
        canvas.Const.FONT_TAHOMA_15_BOLD,
        canvas.Const.FONT_TAHOMA_S_15_BOLD,
    ];
    var resources = [
        ["world", canvas.Config.ui + "world.json"],
        ["ways", canvas.Config.ui + "ways.json"],
        ["config", this.model.CfgLink],
        ["navigate", this.model.NavLink],
    ];
    for (var i = 0; i < fonts.length; i++) resources.push(canvas.Config.fontsPath + fonts[i] + ".fnt");
    canvas.EventManager.addEventListener(canvas.ResourceLoader.EVENT_COMPLETE, null, this.preReady, this);
    canvas.ResourceLoader.add(resources);
    if (!this.isModule) {
        document.body.style.overflow = "hidden";
        canvas.ResourceLoader.addSubAlias("world", "ui");
    }
};
canvas.app.CanvasWorld.prototype.preReady = function () {
    canvas.EventManager.removeEventListener(canvas.ResourceLoader.EVENT_COMPLETE, null, this.preReady, this);
    this.model.initConfig();
    canvas.app.CanvasApp.prototype.init.call(this, this.model.areas_xml);
};
canvas.app.CanvasWorld.prototype.ready = function () {
    canvas.app.CanvasApp.prototype.ready.call(this);
    this.model.initAreas();
    this.model.parse_compass_config(canvas.ResourceLoader.get("navigate").data);
    canvas.InputManager.init();
    this.hintManager = new canvas.utils.HintManager();
    this.windowsManager = this.isModule ? null : new canvas.utils.WindowsManager();
    if (!this.isModule) canvas.app.manor.view.input = new canvas.ui.Input(this.par.parent, null, null, 0, -3);
    this.main = new canvas.app.world.Main(this.model, this.hintManager, this.windowsManager);
    this.model.main = this.main;
    this.root.addChild(this.main);
    this.fps = 30;
    this.resize();
};
canvas.app.CanvasWorld.prototype.handlerEnterFrame = function () {
    if (!this.isModule) {
        canvas.EventManager.dispatchEvent(canvas.app.world.Event.ENTER_FRAME);
        canvas.app.CanvasApp.prototype.handlerEnterFrame.call(this);
    }
};
canvas.app.CanvasWorld.prototype.resize = function () {
    if (this.isModule) {
        this.width = canvas.app.location.model.MAP_WIDTH;
        this.height = canvas.app.location.model.hh;
        if (this.preloader) {
            this.preloader.position.set(Math.round(this.width * 0.5), Math.round(this.height * 0.5));
        }
        if (this.model) {
            this.model.width = this.width;
            this.model.height = this.height;
        }
    } else {
        canvas.app.CanvasApp.prototype.resize.call(this);
    }
    if (this.main) this.main.resize(this.width, this.height);
    if (this.model && canvas.app.manor.view.input) canvas.app.manor.view.input.stageHeight = this.model.height;
};
canvas.app.CanvasWorld.prototype.handlerMouseDown = function (e) {
    if (e.target != canvas.app.manor.view.input) {
        canvas.app.CanvasApp.prototype.handlerMouseDown.call(this, e);
    }
};
canvas.app.CanvasWorld.prototype.refreshFlag = function () {
    if (this.main) {
        this.main.view.refresh_my_flag();
    }
};
canvas.app.CanvasWorld.prototype.zoomIn = function () {
    if (this.main) {
        this.main.view.zoom.zoomMode(2);
    }
};
canvas.app.CanvasWorld.prototype.zoomOut = function () {
    if (this.main) {
        this.main.view.zoom.zoomMode(1);
    }
};
canvas.app.CanvasWorld.prototype.fastUpdateFlag = function () {
    if (this.main) {
        this.main.fastUpdateFlag();
    }
};
canvas.app.CanvasWorld.prototype.swfObject = function (data) {
    if (this.main) {
        this.main.swfObject(data);
    }
};
canvas.app.world.log = function (message, color) {
    canvas.Log.add(canvas.Log.WORLD, message, color);
};
canvas.app.view.MappingHint = function (title, color, isBold, isHtml, param) {
    canvas.px.Container.call(this);
    if (title == undefined) title = "No title";
    if (isBold == undefined) isBold = true;
    if (color == undefined) color = 6770493;
    if (isHtml == undefined) isHtml = false;
    this.color = color;
    if(param === undefined) param = {add_x: 0, add_y: 0};
    let add_x = (param['add_x'] !== undefined ? param['add_x'] : 0);
    let add_y = (param['add_y'] !== undefined ? param['add_y'] : 0);
    if (isHtml) {
        this.tf = new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_11, canvas.Const.FONT_TAHOMA_11_BOLD, color, 1e3, 16, "left", "middle");
        this.tf.position.set(16 + add_x, 8 + add_y);
    } else {
        this.tf = new canvas.ui.Text(isBold ? canvas.Const.FONT_TAHOMA_11_BOLD : canvas.Const.FONT_TAHOMA_11, color, 1e3, 16, "left");
        this.tf.position.set(16 + add_x, 11 + add_y);
    }
    this.bg = new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "alt"), 33, 0, 33, 0);
    this.addChild(this.bg);
    this.addChild(this.tf);
    this.update(title);
    this.interactiveChildren = false;
};
canvas.app.view.MappingHint.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.view.MappingHint.prototype.update = function (title, color) {
    if (color == undefined) color = this.color;
    this.tf.text = title;
    this.tf.color = color;
    this.bg.width = Math.max(77, this.tf.textWidth + 35);
    this.tf.x = Math.round((this.bg.width - this.tf.textWidth) * 0.5);
};
canvas.app.view.PxHint = function (title) {
    this._text = "";
    Object.defineProperty(this, "text", {
        get: function () {
            return this._text;
        },
        set: function (value) {
            this._text = value;
            this.visible = this._text != "";
            this.title.text = this._text;
            this.back.clear();
            this.back.beginFill(3237463432);
            this.back.lineStyle(1, 4289953873, 1);
            this.back.drawRect(0, 0, this.title.width + 2, this.title.height > 15 ? this.title.height + 2 : 12);
            this.back.endFill();
        },
    });
    canvas.px.Container.call(this);
    if (title == undefined) title = "";
    var iFlash = canvas.Translator.getLang() == canvas.Const.LANG_RU;
    this.title = new canvas.ui.Text(iFlash ? canvas.Const.FONT_IFLASH : canvas.Const.FONT_TAHOMA_9_STROKE);
    this.title.setSize(300, 20);
    this.title.position.set(2, iFlash ? 2 : 0);
    this.back = new canvas.px.Graphics();
    this.addChild(this.back);
    this.addChild(this.title);
    this.text = title;
};
canvas.app.view.PxHint.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.view.MainButton = function (textColor, base, over, down, disabled, html) {
    var base = canvas.ResourceLoader.getImage("ui", base == undefined ? "main_button" : base);
    var over = canvas.ResourceLoader.getImage("ui", over == undefined ? "main_button_over" : over);
    var down = canvas.ResourceLoader.getImage("ui", down == undefined ? "main_button_down" : down);
    var disabled = canvas.ResourceLoader.getImage("ui", disabled == undefined ? "main_button_disabled" : disabled);
    canvas.ui.Button.call(this, base, over, down, disabled, [33, 0, 33, 0]);
    if (html != undefined && html) {
        this.field = new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_11_BOLD, canvas.Const.FONT_TAHOMA_11_BOLD, textColor == undefined ? 16375713 : textColor, 100, 20, "center");
    } else {
        this.field = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD, textColor == undefined ? 16375713 : textColor, 100, 20, "center");
    }
    this.field.interactive = false;
    this.field.position.set(25, 10);
    this.addChild(this.field);
    this.setSize(150, 35);
};
canvas.app.view.MainButton.prototype = Object.create(canvas.ui.Button.prototype);
canvas.app.view.MainButton.prototype.setSize = function (w, h) {
    canvas.ui.Button.prototype.setSize.apply(this, [w, h]);
    this.field.setSize(w - 50);
    this.sprite.hitArea = new canvas.px.Rectangle(25, 6, w - 50, this._height - 12);
};
canvas.app.view.MainButton.prototype.setTitle = function (text) {
    this.field.text = text;
};
canvas.app.view.MainButtonWhite = function (textColor) {
    canvas.app.view.MainButton.call(this, textColor == undefined ? 8278832 : textColor, "main_button_white", "main_button_white_over", "main_button_white", "main_button_white_disabled");
};
canvas.app.view.MainButtonWhite.prototype = Object.create(canvas.app.view.MainButton.prototype);
canvas.app.view.BigHint = function (title, text) {
    canvas.px.Container.call(this);
    if (title == undefined) title = "";
    if (text == undefined) text = "";
    this.back = new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "alt2"), 14, 24, 14, 4);
    this.addChild(this.back);
    this.back.width = 289;
    this.back.height = 80;
    this.headerField = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD, 4010799, this.back.width, 20, "center");
    this.headerField.position.set(0, 5);
    this.addChild(this.headerField);
    this.headerField.text = title;
    this.infoField = new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_12, canvas.Const.FONT_TAHOMA_12, 4010799, this.back.width - 45, 1e3, "left");
    this.infoField.position.set(22, 32);
    this.addChild(this.infoField);
    this.update(text);
};
canvas.app.view.BigHint.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.view.BigHint.prototype.update = function (text, title) {
    this.infoField.text = text;
    this.back.height = this.infoField.textHeight + 45;
    if (title != undefined) {
        this.headerField.text = title;
    }
};
canvas.app.view.BigHint2 = function (w, text) {
    canvas.px.Container.call(this);
    if (text == undefined) text = "";
    this.back = this.addChild(new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "alt3"), 12, 12, 12, 12));
    this.back.width = w || 200;
    this.back.height = 80;
    this.infoField = this.addChild(new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_11, canvas.Const.FONT_TAHOMA_11_BOLD, 6770493, this.back.width - 45, 1e3, "left"));
    this.infoField.position.set(22, 8);
    this.update(text);
};
canvas.app.view.BigHint2.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.view.BigHint2.prototype.update = function (text) {
    this.infoField.text = text ? text : "";
    this.back.height = this.infoField.textHeight + 20;
};
canvas.app.view.OldButton = function (textColor) {
    if (textColor == undefined) textColor = 12124160;
    canvas.ui.SimpleButton.call(this, canvas.ResourceLoader.getImage("ui", "old_button"), [42, 0, 42, 0]);
    this.field = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD, textColor, 100, 20, "center");
    this.field.position.set(25, 6);
    this.addChild(this.field);
    this.setSize(171, 25);
};
canvas.app.view.OldButton.prototype = Object.create(canvas.ui.SimpleButton.prototype);
canvas.app.view.OldButton.prototype.setSize = function (w, h) {
    canvas.ui.Button.prototype.setSize.apply(this, [w, h]);
    this.field.setSize(w - 50, 20);
    this.sprite.hitArea = new canvas.px.Rectangle(25, 5, w - 50, h ? h - 10 : 15);
};
canvas.app.view.OldButton.prototype.setTitle = function (text) {
    this.field.text = text;
};
canvas.app.view.Money = function (color, font, multiColors, w, h, hAlign, vAlign, iconSide, backColor, backAlpha, masking) {
    this.multiColors = multiColors == undefined ? false : multiColors;
    this.iconSide = iconSide == undefined ? true : iconSide;
    this.displayGold = true;
    this.displaySilver = true;
    this.displayBronze = true;
    this.showIfZero = false;
    this._money = 0;
    Object.defineProperty(this, "money", {
        get: function () {
            return this._money;
        },
        set: function (value) {
            this._money = value;
            this.update();
        },
    });
    Object.defineProperty(this, "gold", {
        get: function () {
            return Math.floor(this._money * 1e-4);
        },
        set: function (value) {
            this.money = value * 1e4;
        },
    });
    this._gems = 0;
    Object.defineProperty(this, "gems", {
        get: function () {
            return this._gems;
        },
        set: function (value) {
            this._gems = canvas.Functions.getGems(value);
            this.update();
        },
    });
    this._rubins = 0;
    Object.defineProperty(this, "rubins", {
        get: function () {
            return this._rubins;
        },
        set: function (value) {
            this._rubins = canvas.Functions.getGems(value);
            this.update();
        },
    });
    this._color = 0;
    Object.defineProperty(this, "color", {
        get: function () {
            return this._color;
        },
        set: function (value) {
            this._color = value;
            this.field.color = this._color;
            this.update();
        },
    });
    this._image = "";
    Object.defineProperty(this, "image", {
        get: function () {
            return this._image;
        },
        set: function (value) {
            this._image = value;
            this.update();
        },
    });
    this._imageCount = 0;
    Object.defineProperty(this, "imageCount", {
        get: function () {
            return this._imageCount;
        },
        set: function (value) {
            this._imageCount = value;
            this.update();
        },
    });
    canvas.px.Container.call(this);
    if (color == undefined) color = 7026733;
    this.field = new canvas.ui.HtmlText(
        font == undefined ? canvas.Const.FONT_TAHOMA_11 : font,
        font == undefined ? canvas.Const.FONT_TAHOMA_11_BOLD : font,
        color,
        w == undefined ? 300 : w,
        h == undefined ? 20 : h,
        hAlign == undefined ? "left" : hAlign,
        vAlign == undefined ? "top" : vAlign,
        backColor,
        backAlpha,
        masking
    );
    this.addChild(this.field);
};
canvas.app.view.Money.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.view.Money.prototype.update = function () {
    var str = "";
    var num;
    var value = this.money;
    var bronze = Math.floor(value % 100);
    value = Math.floor(value * 0.01);
    var silver = Math.floor(value % 100);
    value = Math.floor(value * 0.01);
    var gold = Math.floor(value);
    if (gold != 0 && this.displayGold) {
        if (this.iconSide) {
            str += (str == "" ? "" : " ") + "<img src='money_gold' yOffset='2' atlas='ui'/> " + (this.multiColors ? "<font color='#fed200'>" + gold + "</font>" : gold);
        } else {
            str += (str == "" ? "" : " ") + (this.multiColors ? "<font color='#fed200'>" + gold + "</font>" : gold) + " <img src='money_gold' yOffset='2' atlas='ui'/>";
        }
    }
    if ((silver != 0 || (this.showIfZero && Math.abs(gold) > 0)) && this.displaySilver) {
        if (this.iconSide) {
            str += (str == "" ? "" : " ") + "<img src='money_silver' yOffset='2' atlas='ui'/> " + (this.multiColors ? "<font color='#dadada'>" + silver + "</font>" : silver);
        } else {
            str += (str == "" ? "" : " ") + (this.multiColors ? "<font color='#dadada'>" + silver + "</font>" : silver) + " <img src='money_silver' yOffset='2' atlas='ui'/>";
        }
    }
    if ((bronze != 0 || (this.showIfZero && Math.abs(this.money) >= 100)) && this.displayBronze) {
        if (this.iconSide) {
            str += (str == "" ? "" : " ") + "<img src='money_bronze' yOffset='2' atlas='ui'/> " + (this.multiColors ? "<font color='#f29f72'>" + bronze + "</font>" : bronze);
        } else {
            str += (str == "" ? "" : " ") + (this.multiColors ? "<font color='#f29f72'>" + bronze + "</font>" : bronze) + " <img src='money_bronze' yOffset='2' atlas='ui'/>";
        }
    }
    if (this.gems != 0) {
        value = this.showIfZero ? this.gems.toFixed(2) : this.gems;
        if (this.iconSide) {
            str += (str == "" ? "" : " ") + "<img src='money_crystal' yOffset='2' atlas='ui'/> " + (this.multiColors ? "<font color='#72bdf2'>" + value + "</font>" : value);
        } else {
            str += (str == "" ? "" : " ") + (this.multiColors ? "<font color='#72bdf2'>" + value + "</font>" : value) + " <img src='money_crystal' yOffset='2' atlas='ui'/>";
        }
    }
    if (this.rubins != 0) {
        value = this.showIfZero ? this.rubins.toFixed(2) : this.rubins;
        if (this.iconSide) {
            str += (str == "" ? "" : " ") + "<img src='money_rubin' yOffset='2' atlas='ui'/> " + (this.multiColors ? "<font color='#ef5b5b'>" + value + "</font>" : value);
        } else {
            str += (str == "" ? "" : " ") + (this.multiColors ? "<font color='#ef5b5b'>" + value + "</font>" : value) + " <img src='money_rubin' yOffset='2' atlas='ui'/>";
        }
    }
    if (this.image) {
        value = this.imageCount;
        if (this.iconSide) {
            str += (str == "" ? "" : " ") + "<img src='" + this.image + "' width='60' height='60' yOffset='1' scale='0.33'/> " + (this.multiColors ? "<font color='#ef5b5b'>" + value + "</font>" : value);
        } else {
            str += (str == "" ? "" : " ") + (this.multiColors ? "<font color='#ef5b5b'>" + value + "</font>" : value) + " <img src='" + this.image + "' width='60' height='60' yOffset='1' scale='0.33'/>";
        }
    }
    this.field.text = str;
};
canvas.app.view.Money.prototype.animateToValue = function (money, gems, rubins, steps) {
    if (steps == undefined) steps = 10;
    if (this.timer) clearInterval(this.timer);
    this.targetMoney = money == undefined ? this.money : money;
    this.targetGems = gems == undefined ? this.gems : canvas.Functions.getGems(gems);
    this.targetRubins = rubins == undefined ? this.rubins : canvas.Functions.getGems(rubins);
    this.stepMoney = Math.max(Math.ceil(Math.abs(this.money - this.targetMoney) / steps), 0.01);
    this.stepGems = Math.max(Math.abs(this.gems - this.targetGems) / steps, 0.01);
    this.stepRubins = Math.max(Math.abs(this.rubins - this.targetRubins) / steps, 0.01);
    this.timer = setInterval(this.timerHandler.bind(this), 50);
};
canvas.app.view.Money.prototype.timerHandler = function () {
    var target;
    if (this.targetMoney > this.money) {
        target = this.money + this.stepMoney;
        if (target >= this.targetMoney) {
            this.showIfZero = false;
            this.money = target = this.targetMoney;
        } else {
            this.showIfZero = true;
            this.money = target;
        }
        this._money = target;
    } else if (this.targetMoney < this.money) {
        target = this.money - this.stepMoney;
        if (target <= this.targetMoney) {
            this.showIfZero = false;
            this.money = target = this.targetMoney;
        } else {
            this.showIfZero = true;
            this.money = target;
        }
        this._money = target;
    } else if (this.targetGems > this.gems) {
        target = this.gems + this.stepGems;
        if (target >= this.targetGems) {
            this.showIfZero = false;
            this.gems = this.targetGems;
        } else {
            this.showIfZero = true;
            this.gems = target;
        }
    } else if (this.targetGems < this.gems) {
        target = this.gems - this.stepGems;
        if (target <= this.targetGems) {
            this.showIfZero = false;
            this.gems = this.targetGems;
        } else {
            this.showIfZero = true;
            this.gems = target;
        }
    } else if (this.targetRubins > this.rubins) {
        target = this.rubins + this.stepRubins;
        if (target >= this.targetRubins) {
            this.showIfZero = false;
            this.rubins = this.targetRubins;
        } else {
            this.showIfZero = true;
            this.rubins = target;
        }
    } else if (this.targetRubins < this.rubins) {
        target = this.rubins - this.stepRubins;
        if (target <= this.targetRubins) {
            this.showIfZero = false;
            this.rubins = this.targetRubins;
        } else {
            this.showIfZero = true;
            this.rubins = target;
        }
    } else {
        clearInterval(this.timer);
    }
};
canvas.app.view.Money.prototype.makeOneCoin = function (moneyValue) {
    if (moneyValue < 100) {
        return moneyValue;
    } else if (moneyValue < 1e4) {
        return Math.floor(moneyValue * 0.01) * 100;
    } else {
        return Math.floor(moneyValue * 1e-4) * 1e4;
    }
};
canvas.app.view.Money.prototype.reset = function () {
    this.money = this.gems = this.rubins = 0;
    this.image = "";
};
canvas.app.view.SmallButton = function (textColor, html) {
    var base = canvas.ResourceLoader.getImage("ui", "small_button");
    var over = canvas.ResourceLoader.getImage("ui", "small_button_over");
    var down = canvas.ResourceLoader.getImage("ui", "small_button_down");
    var disabled = canvas.ResourceLoader.getImage("ui", "small_button_disabled");
    canvas.ui.Button.call(this, base, over, down, disabled, [8, 0, 8, 0]);
    if (html != undefined && html) {
        this.field = new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_10_BOLD, canvas.Const.FONT_TAHOMA_10_BOLD, textColor == undefined ? 2954752 : textColor, 100, 20, "center");
    } else {
        this.field = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_10_BOLD, textColor == undefined ? 2954752 : textColor, 100, 20, "center");
    }
    this.field.interactive = false;
    this.field.position.set(8, 1);
    this.addChild(this.field);
    this.setSize(60, 15);
};
canvas.app.view.SmallButton.prototype = Object.create(canvas.ui.Button.prototype);
canvas.app.view.SmallButton.prototype.setSize = function (w, h) {
    canvas.ui.Button.prototype.setSize.apply(this, [w, h]);
    this.field.setSize(w - 16);
};
canvas.app.view.SmallButton.prototype.setTitle = function (text) {
    this.field.text = text;
};
canvas.app.view.MacroHtmlText = function () {
    this.M_ARTIFACT = "ARTIFACT";
    canvas.ui.HtmlText.apply(this, arguments);
};
canvas.app.view.MacroHtmlText.prototype = Object.create(canvas.ui.HtmlText.prototype);
canvas.app.view.MacroHtmlText.prototype.make = function () {
    this.applyMacro();
    canvas.ui.HtmlText.prototype.make.call(this);
};
canvas.app.view.MacroHtmlText.prototype.applyMacro = function () {
    var text = this._text;
    var r = new RegExp(/#[A-Z_]+\[[^#\]]+\]#/gi);
    var b;
    var str;
    var macros;
    var params;
    var loading = false;
    var itemPrototype;
    var result = "";
    var obj = r.exec(text);
    while (obj != null) {
        b = obj[0].split("[");
        macros = b[0].substr(1);
        params = b[1].substr(0, b[1].length - 2);
        switch (macros) {
            case this.M_ARTIFACT:
                b = params.split(",");
                itemPrototype = canvas.data.ItemPrototypeData.getItemPrototype(b[0]);
                if (!itemPrototype) loading = true;
                if (!loading) {
                    str =
                        "<b><font color='#" +
                        canvas.data.ItemPrototypeData.getColorByQuality(itemPrototype.quality).toString(16) +
                        "'><a href='artifact_info.php?artikul_id=" +
                        itemPrototype.id +
                        "' target='_blank'>" +
                        (b[1] ? b[1] : itemPrototype.title) +
                        "</a></font>" +
                        (b[2] ? " <font color='#ba0000'>" + b[2] + " " + canvas.Translator.getText(2022) + "</font>" : "") +
                        "</b>";
                    r.lastIndex = obj.index + str.length;
                    text = text.substr(0, obj.index) + str + text.substr(obj.index + obj[0].length);
                }
                break;
        }
        obj = r.exec(text);
    }
    if (loading) {
        canvas.EventManager.addEventListener(canvas.data.ItemPrototypeData.EVENT_COMPLETE, null, this.completeProtoHandler, this);
    } else {
        this._text = text;
    }
};
canvas.app.view.MacroHtmlText.prototype.completeProtoHandler = function () {
    canvas.EventManager.removeEventListener(canvas.data.ItemPrototypeData.EVENT_COMPLETE, null, this.completeProtoHandler, this);
    this.make();
};
canvas.app.view.window.ConfirmWindowOld = function () {
    canvas.px.Window.call(this);
    this.back = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "confirm_back")));
    this.header = new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "header"), 31, 0, 31, 0);
    this.header.y = -10;
    this.addChild(this.header);
    this.header.interactive = true;
    this.headerField = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD, 16577975, this.back.width, 20, "center", "top", 0, 0);
    this.headerField.y = -7;
    this.addChild(this.headerField);
    this.infoField = new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_12, canvas.Const.FONT_TAHOMA_12_BOLD, 5324857, this.back.width - 40, 85, "center", "middle");
    this.addChild(this.infoField);
    this.infoField.position.set(18, 20);
    this.yesButton = new canvas.app.view.MainButton();
    this.yesButton.setSize(190, 0);
    this.addChild(this.yesButton);
    this.yesButton.setTitle(canvas.Translator.getText(805));
    this.yesButton.position.set(Math.round((this.back.width - this.yesButton.width) * 0.5), this.back.height - 95);
    this.noButton = new canvas.app.view.MainButton();
    this.noButton.setSize(190, 0);
    this.addChild(this.noButton);
    this.noButton.setTitle(canvas.Translator.getText(806));
    this.noButton.position.set(this.yesButton.x, this.back.height - 60);
    this.closeButton = this.noButton;
};
canvas.app.view.window.ConfirmWindowOld.prototype = Object.create(canvas.px.Window.prototype);
canvas.app.view.window.ConfirmWindowOld.prototype.update = function (headerText, text, yesTitle, noTitle, actionFunc, actionFuncParams, context) {
    this.headerField.text = headerText;
    this.header.width = this.headerField.textWidth + 80;
    this.header.x = Math.round((this.back.width - this.header.width) * 0.5);
    if (yesTitle != undefined) this.yesButton.setTitle(yesTitle);
    if (noTitle != undefined) this.noButton.setTitle(noTitle);
    this.infoField.text = text;
    this.yesButton.visible = yesTitle != "";
    this.actionFunc = actionFunc;
    this.actionFuncParams = actionFuncParams;
    this.context = context;
};
canvas.app.view.window.ConfirmWindowOld.prototype.clickHandler = function (mouseData) {
    canvas.px.Window.prototype.clickHandler.call(this, mouseData);
    if (canvas.Functions.findParent(this.yesButton, mouseData.target)) {
        if (this.actionFunc != null) this.actionFunc.apply(this.context, this.actionFuncParams);
        canvas.EventManager.dispatchEvent(canvas.px.WindowEvent.EVENT_CLOSE, this);
    }
};
canvas.app.battle.Main = function (model, hintManager) {
    canvas.px.Container.call(this);
    this.model = model;
    canvas.app.battle.log("frameRate = " + this.model.fps);
    this.hintManager = hintManager;
    canvas.EventManager.addEventListener(canvas.app.battle.Event.HINT_ADD, null, this.handlerHintAdd, this);
    canvas.EventManager.addEventListener(canvas.app.battle.Event.HINT_REMOVE, null, this.handlerHintRemove, this);
    this.view = new canvas.app.battle.View(this);
    this.view.x = 10;
    this.hintContainer = new canvas.px.Container();
    this.hintContainer.interactive = true;
    this.addChild(this.view);
    this.addChild(this.hintContainer);
    this.view.soundView.init(this.model.soundMute, this.model.soundVolume);
    this.players = {};
    this.playersQueue = [];
    this.skeletons = {};
	this.scale.set(1, 1);
    this.mFunc = new canvas.app.battle.engine.MFunc(this);
    this.mEve = new canvas.app.battle.engine.MEve(this);
    this.mCmd = new canvas.app.battle.engine.MCmd(this);
    this.conn = new canvas.app.battle.engine.Connection(this);
    canvas.EventManager.addEventListener(canvas.Event.STAGE_KEY_DOWN, null, this.handlerKey, this);
    canvas.EventManager.addEventListener(canvas.app.battle.Event.OPP_ID_CHANGE, null, this.handlerOppChange, this);
    canvas.EventManager.addEventListener(canvas.app.battle.Event.SKIP_TURN, null, this.handlerSkipTurn, this);
    canvas.EventManager.addEventListener(canvas.app.battle.Event.CENTER_VISIBLE, null, this.handlerCenterVisible, this);
    canvas.EventManager.addEventListener(canvas.app.battle.Event.SOUND_VOLUME_CHANGE, null, this.handlerVolumeChange, this);
    canvas.EventManager.addEventListener(canvas.app.battle.Event.SOUND_MUTE_CHANGE, null, this.handlerMuteChange, this);
    canvas.EventManager.addEventListener(canvas.app.battle.Event.EFFECT_AFTER_SPELL, null, this.handlerEffectAfterSpell, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.view.flagButton, this.handlerFlagClick, this);
    canvas.EventManager.addEventListener(canvas.app.battle.Event.ATTACK, null, this.handlerAttack, this);
    canvas.EventManager.addEventListener(canvas.app.battle.Event.BLOCK_SWITCH, null, this.handlerBlockSwitch, this);
    canvas.EventManager.addEventListener(canvas.app.battle.Event.CENTER_CHANGE_MODE, null, this.handlerChangeCenterMode, this);
    canvas.EventManager.addEventListener(canvas.app.battle.Event.RESET, null, this.handlerReset, this);
    canvas.EventManager.addEventListener(canvas.app.battle.Event.TRY_RECONNECT, null, this.handlerTryReconnect, this);
    canvas.EventManager.addEventListener(canvas.app.battle.Event.REPAIR, null, this.handlerRepair, this);
    canvas.EventManager.addEventListener(canvas.app.battle.Event.OPEN_COMBO_LIST, null, this.handlerOpenComboList, this);
    canvas.EventManager.addEventListener(canvas.app.battle.Event.CHOOSE_COMBO, null, this.handlerChooseCombo, this);
    canvas.EventManager.addEventListener(canvas.app.battle.Event.SHOW_BOW_PANEL, null, this.handlerShowBowPanel, this);
    canvas.EventManager.addEventListener(canvas.app.battle.Event.USE_EFFECT, null, this.handlerUseEffect, this);
    canvas.EventManager.addEventListener(canvas.app.battle.Event.SHOW_ERROR, null, this.handlerShowError, this);
    canvas.EventManager.addEventListener(canvas.app.battle.Event.SHOW_MESSAGE, null, this.handlerShowMessage, this);
    canvas.EventManager.addEventListener(canvas.app.battle.Event.CLEAR_SYNC_TIMEOUT, null, this.clearSyncTimeout, this);
    canvas.EventManager.addEventListener(canvas.app.battle.Event.ADD_EVENT, null, this.handlerAddEvent, this);
    canvas.EventManager.addEventListener(canvas.app.battle.Event.ADD_COMMAND, null, this.handlerAddCommand, this);
    canvas.EventManager.addEventListener(canvas.app.battle.Event.UPDATE_PERS_HP_LVL, null, this.updPersHPLvl, this);
    canvas.EventManager.addEventListener(canvas.app.battle.Event.UPDATE_PERS_MP_LVL, null, this.updPersMPLvl, this);
    canvas.EventManager.addEventListener(canvas.app.battle.Event.EVENT_EVE, null, this.handlerEvent, this);
    canvas.EventManager.addEventListener(canvas.app.battle.Event.EVENT_CMD, null, this.handlerCmd, this);
    canvas.EventManager.addEventListener(canvas.app.battle.Event.EVENT_CMD_ERROR, null, this.handlerCmdError, this);
    canvas.EventManager.addEventListener(canvas.app.battle.Event.EVENT_MY_FUNC, null, this.handlerMyFunc, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.view.persLevel.button, this.handlerPersLevelClick, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.view.oppLevel.button, this.handlerOppLevelClick, this);
    this.centerVisible(false);
    if (!canvas.Config.isLocal) {
        new canvas.utils.URLRequest(canvas.Config.domain + "/fight.php?sig=" + md5(canvas.app.battle.Const.MAX_ANIMATION_SIZE) + "&check=1").load();
    }
    setInterval(this.handlerTimer.bind(this), 1e3);
    this.handlerTimer();
    if (!canvas.Config.isLocal) this.conn.tryConnect();

    try{ if(typeof fight_final_init == "function") fight_final_init(); }catch(e){}
};
canvas.app.battle.Main.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.battle.Main.prototype.resize = function (w, h) {
    this.hintManager.init(this.hintContainer, w, h);
    this.model.width = w;
    this.model.height = h;
};
canvas.app.battle.Main.prototype.handlerHintAdd = function (params) {
    this.hintManager.add(params.params.target, params.params.params);
};
canvas.app.battle.Main.prototype.handlerHintRemove = function (params) {
    this.hintManager.remove(params.params.target);
};
canvas.app.battle.Main.prototype.handlerPersLevelClick = function (event) {
    this.sendData("mem", "pers_focus@" + this.model.persId);
};
canvas.app.battle.Main.prototype.handlerOppLevelClick = function (event) {
    this.sendData("mem", "pers_focus@" + this.model.oppId);
};
canvas.app.battle.Main.prototype.handlerResetFocus = function (event) {
    this.sendData("mem", "pers_focus@0");
};
canvas.app.battle.Main.prototype.handlerKey = function (event) {
    if (document.activeElement && document.activeElement.constructor.name == "HTMLInputElement") return;
    var keyCode = event.params.globalKeyCode;
    var altKey = event.params.altKey;
    var ctrlKey = event.params.ctrlKey;
    var shiftKey = event.params.shiftKey;
    if (!this.model.isUseHotkeys && keyCode != canvas.Const.KEYS.L) return;
    switch (keyCode) {
        case canvas.Const.KEYS.L:
            if (shiftKey) {
                canvas.Log.show(canvas.Log.BATTLE);
            }
            break;
        case canvas.Const.KEYS.Q:
            if (this.view.centerView.visible) {
                if (this.isInAttackMode()) {
                    this.handlerAttack({ params: canvas.app.battle.Const.TOP_ATTACK_ID });
                } else if (this.model.hasSpells) {
                    var slot = this.view.centerView.cSpells.slots[1];
                    if (slot) slot.handlerClick();
                }
            }
            break;
        case canvas.Const.KEYS.W:
            if (this.view.centerView.visible) {
                if (this.isInAttackMode()) {
                    this.handlerAttack({ params: canvas.app.battle.Const.MIDDLE_ATTACK_ID });
                } else if (this.model.hasSpells) {
                    var slot = this.view.centerView.cSpells.slots[2];
                    if (slot) slot.handlerClick();
                }
            }
            break;
        case canvas.Const.KEYS.E:
            if (this.view.centerView.visible) {
                if (this.isInAttackMode()) {
                    this.handlerAttack({ params: canvas.app.battle.Const.BOTTOM_ATTACK_ID });
                } else if (this.model.hasSpells) {
                    var slot = this.view.centerView.cSpells.slots[3];
                    if (slot) slot.handlerClick();
                }
            }
            break;
        case canvas.Const.KEYS.R:
            if (this.view.centerView.visible) {
                if (this.isInAttackMode()) {
                    this.handlerBlockSwitch();
                } else if (this.model.hasSpells) {
                    var slot = this.view.centerView.cSpells.slots[4];
                    if (slot) slot.handlerClick();
                }
            }
            break;
        case canvas.Const.KEYS.A:
            if (this.view.centerView.visible && !this.isInAttackMode() && this.model.hasSpells) {
                var slot = this.view.centerView.cSpells.slots[6];
                if (slot) slot.handlerClick();
            }
            break;
        case canvas.Const.KEYS.S:
            if (this.view.centerView.visible && !this.isInAttackMode() && this.model.hasSpells) {
                var slot = this.view.centerView.cSpells.slots[7];
                if (slot) slot.handlerClick();
            }
            break;
        case canvas.Const.KEYS.D:
            if (this.view.centerView.visible && !this.isInAttackMode() && this.model.hasSpells) {
                var slot = this.view.centerView.cSpells.slots[8];
                if (slot) slot.handlerClick();
            }
            break;
        case canvas.Const.KEYS.F:
            if (this.view.centerView.visible && !this.isInAttackMode() && this.model.hasSpells) {
                var slot = this.view.centerView.cSpells.slots[9];
                if (slot) slot.handlerClick();
            }
            break;
        case canvas.Const.KEYS.G:
            if (this.view.centerView.visible && !this.isInAttackMode() && this.model.hasSpells) {
                var slot = this.view.centerView.cSpells.slots[10];
                if (slot) slot.handlerClick();
            }
            break;
        case canvas.Const.KEYS.UP_ARROW:
            if (this.view.centerView.visible && this.isInAttackMode()) this.handlerAttack({ params: canvas.app.battle.Const.TOP_ATTACK_ID });
            break;
        case canvas.Const.KEYS.RIGHT_ARROW:
            if (this.view.centerView.visible && this.isInAttackMode()) this.handlerAttack({ params: canvas.app.battle.Const.MIDDLE_ATTACK_ID });
            break;
        case canvas.Const.KEYS.DOWN_ARROW:
            if (this.view.centerView.visible && this.isInAttackMode()) this.handlerAttack({ params: canvas.app.battle.Const.BOTTOM_ATTACK_ID });
            break;
        case canvas.Const.KEYS.LEFT_ARROW:
            if (this.view.centerView.visible && this.isInAttackMode()) this.handlerBlockSwitch();
            break;
        case canvas.Const.KEYS.KEY_1:
        case canvas.Const.KEYS.NUM_1:
            if (!shiftKey && this.mCmd.myEffectsGetted) this.sendData("items", "HotKey@1");
            break;
        case canvas.Const.KEYS.KEY_2:
        case canvas.Const.KEYS.NUM_2:
            if (!shiftKey && this.mCmd.myEffectsGetted) this.sendData("items", "HotKey@2");
            break;
        case canvas.Const.KEYS.KEY_3:
        case canvas.Const.KEYS.NUM_3:
            if (!shiftKey && this.mCmd.myEffectsGetted) this.sendData("items", "HotKey@3");
            break;
        case canvas.Const.KEYS.KEY_4:
        case canvas.Const.KEYS.NUM_4:
            if (!shiftKey && this.mCmd.myEffectsGetted) this.sendData("items", "HotKey@4");
            break;
        case canvas.Const.KEYS.KEY_5:
        case canvas.Const.KEYS.NUM_5:
            if (!shiftKey && this.mCmd.myEffectsGetted) this.sendData("items", "HotKey@5");
            break;
        case canvas.Const.KEYS.KEY_6:
        case canvas.Const.KEYS.NUM_6:
            if (!shiftKey && this.mCmd.myEffectsGetted) this.sendData("items", "HotKey@6");
            break;
        case canvas.Const.KEYS.KEY_7:
        case canvas.Const.KEYS.NUM_7:
            if (!shiftKey && this.mCmd.myEffectsGetted) this.sendData("items", "HotKey@7");
            break;
        case canvas.Const.KEYS.KEY_8:
        case canvas.Const.KEYS.NUM_8:
            if (!shiftKey && this.mCmd.myEffectsGetted) this.sendData("items", "HotKey@8");
            break;
        case canvas.Const.KEYS.KEY_9:
        case canvas.Const.KEYS.NUM_9:
            if (!shiftKey && this.mCmd.myEffectsGetted) this.sendData("items", "HotKey@9");
            break;
        case canvas.Const.KEYS.KEY_0:
        case canvas.Const.KEYS.NUM_0:
            if (!shiftKey && this.mCmd.myEffectsGetted) this.sendData("items", "HotKey@10");
            break;
        case canvas.Const.KEYS.MINUS:
            if (!shiftKey && this.mCmd.myEffectsGetted) this.sendData("items", "HotKey@11");
            break;
        case canvas.Const.KEYS.EQUAL:
            if (!shiftKey && this.mCmd.myEffectsGetted) this.sendData("items", "HotKey@12");
            break;
        case canvas.Const.KEYS.RIGHT_SQUARE_BRACKET:
            this.sendData("items", "NextPage@ ");
            break;
        case canvas.Const.KEYS.LEFT_SQUARE_BRACKET:
            this.sendData("items", "PrevPage@ ");
            break;
        case canvas.Const.KEYS.B:
            this.sendData("items_right", "OpenBag@ ");
            break;
        case canvas.Const.KEYS.M:
            this.sendData("items_right", "OpenMount@ ");
            break;
        case canvas.Const.KEYS.T:
            if (this.view.centerView.visible && !this.isInAttackMode() && this.model.hasSpells) {
                var slot = this.view.centerView.cSpells.slots[5];
                if (slot) slot.handlerClick();
            } else {
                this.useAura(0);
            }
            break;
        case canvas.Const.KEYS.Y:
            this.useAura(1);
            break;
        case canvas.Const.KEYS.U:
            this.useAura(2);
            break;
        case canvas.Const.KEYS.I:
            this.useAura(3);
            break;
        case canvas.Const.KEYS.SPACEBAR:
            this.handlerSkipTurn();
            break;
        case canvas.Const.KEYS.Z:
            this.sendData("mem", "pers_focus@" + this.model.persId);
            break;
        case canvas.Const.KEYS.X:
            this.sendData("mem", "pers_focus@" + this.model.oppId);
            break;
        case canvas.Const.KEYS.ESC:
            this.sendData("mem", "pers_focus@0");
            this.persFocus(0);
            break;
        case canvas.Const.KEYS.POINT:
            this.handlerFlagClick();
            break;
        case canvas.Const.KEYS.TAB:
            event.params.preventDefault();
            if (this.view.centerView.cDot.btIsOn && this.model.hasSpells) {
                this.view.centerView.cDot.handlerBtnClick();
            }
            break;
    }
};
canvas.app.battle.Main.prototype.handlerMyFunc = function (e) {
    var par = e.params;
    var type = par.shift();
    switch (type) {
        case canvas.app.battle.Const.MY_FUNC_CHANGE_MODE:
            this.mFunc.changeMode.apply(this.mFunc, par);
            break;
        case canvas.app.battle.Const.MY_FUNC_USE_EFFECT:
            this.mFunc.useEffect.apply(this.mFunc, par);
            break;
        case canvas.app.battle.Const.MY_FUNC_UNSET_AURA:
            this.mFunc.unsetAura.apply(this.mFunc, par);
            break;
        case canvas.app.battle.Const.MY_FUNC_SEND_MESSAGE:
            this.mFunc.sendMsg.apply(this.mFunc, par);
            break;
        default:
            canvas.app.battle.log("handlerMyFunc error: unknown cmd type", 16711680);
    }
};
canvas.app.battle.Main.prototype.handlerTimer = function () {
    this.view.flagHint.text = this.model.flagTime > 0 ? canvas.Functions.formatDate(this.model.flagTime * 1e3, "00", 1, false, true) : "";
    if (this.model.flagTime > 0 && this.model.flagTimeCd != 0) {
        this.model.flagTime--;
        this.view.drawFlagCd(this.model.flagTime / this.model.flagTimeCd);
    }
    if (this.model.skipTurnTime > 0 && !this.model.skipTurnIsCooldown() && canvas.app.battle.model.persStatus == canvas.app.battle.Const.STATUS_ACTIVE) {
        this.centerVisible(true);
        this.model.skipTurnTime = 0;
    }
};
canvas.app.battle.Main.prototype.handlerOppChange = function (event) {
    this.sendData("mem", "opp_id@" + this.model.oppId);
    this.view.updateFocus();
};
canvas.app.battle.Main.prototype.handlerMuteChange = function (event) {
    this.model.soundMute = event.params;
};
canvas.app.battle.Main.prototype.handlerVolumeChange = function (event) {
    this.model.soundVolume = event.params;
};
canvas.app.battle.Main.prototype.handlerSkipTurn = function (event) {
    if (this.view.centerView.skipButton.visible && this.view.centerView.visible) {
        this.mFunc.skipTurn();
    }
};
canvas.app.battle.Main.prototype.handlerAttack = function (event) {
    var blade_id = event.params;
    if (!this.checkIsCanAttack(blade_id)) {
        return;
    }
    this.mFunc.attack(blade_id);
    this.centerVisible(false);
    canvas.app.battle.model.attackTime = Date.now();
};
canvas.app.battle.Main.prototype.checkIsCanAttack = function (attackId) {
    var isCanAttack = true;
    var opp_mask = canvas.app.battle.model.oppMask;
    if (!this.isInAttackMode()) {
        isCanAttack = false;
    } else if (this.view.centerView.cAttack.isCooldown) {
        isCanAttack = false;
    } else {
        switch (attackId) {
            case canvas.app.battle.Const.TOP_ATTACK_ID:
                isCanAttack = (opp_mask & 1) == 1 ? true : false;
                break;
            case canvas.app.battle.Const.MIDDLE_ATTACK_ID:
                isCanAttack = (opp_mask & 2) >> 1 == 1 ? true : false;
                break;
            case canvas.app.battle.Const.BOTTOM_ATTACK_ID:
                isCanAttack = (opp_mask & 4) >> 2 == 1 ? true : false;
                break;
        }
    }
    return isCanAttack;
};
canvas.app.battle.Main.prototype.isInAttackMode = function () {
    return this.view.centerView.mode == canvas.app.battle.Const.MODE_ATTACK;
};
canvas.app.battle.Main.prototype.handlerBlockSwitch = function (event) {
    var conf = canvas.app.battle.model;
    if (!this.isInAttackMode()) {
        return;
    }
    var cur_time = Date.now();
    if (cur_time - conf.blockTime < 5e3) {
        return;
    }
    conf.blockTime = cur_time;
    var mMD = conf.memDat[conf.persId];
    var curPersFlg = mMD.persFlags;
    if (!conf.testFlag(curPersFlg, canvas.app.battle.Const.FS_PF_STUNNED)) {
        if (conf.testFlag(curPersFlg, canvas.app.battle.Const.FS_PF_DEFENDED)) {
            curPersFlg &= 4294967039;
            this.view.centerView.activeBlock(false);
        } else {
            curPersFlg |= canvas.app.battle.Const.FS_PF_DEFENDED;
            this.view.centerView.activeBlock(true);
        }
        this.mFunc.changeMode(conf.testFlag(curPersFlg, canvas.app.battle.Const.FS_PF_DEFENDED) ? 1 : 0, canvas.app.battle.Const.TO_FS_PF_DEFENDED);
    }
};
canvas.app.battle.Main.prototype.handlerChangeCenterMode = function (event) {
    this.model.centerMode = event.params;
};
canvas.app.battle.Main.prototype.handlerCenterVisible = function (event) {
    this.centerVisible(event.params);
};
canvas.app.battle.Main.prototype.handlerEffectAfterSpell = function (event) {
    this.model.animationLock = false;
    this.mCmd.paksReadyAndParse();
};
canvas.app.battle.Main.prototype.handlerEffectAfterDrink = function (par) {
    this.mCmd.paksReadyAndParse();
};
canvas.app.battle.Main.prototype.handlerFlagClick = function (event) {
    if (canvas.app.battle.model.flagTime <= 0) {
        this.mFunc.useEffect(canvas.app.battle.model.flagEffId);
        this.mCmd.paksReadyAndParse();
    }
};
canvas.app.battle.Main.prototype.handlerReset = function (event) {
    this.model.reset();
    this.view.topTimer.deactivate();
    this.centerVisible(false);
};
canvas.app.battle.Main.prototype.handlerTryReconnect = function (event) {
    this.conn.tryConnect();
};
canvas.app.battle.Main.prototype.handlerRepair = function (event) {
    this.view.mainPopup.deactivate();
    canvas.app.battle.model.repair();
    this.handlerTryReconnect();
};
canvas.app.battle.Main.prototype.handlerOpenComboList = function (event) {
    this.view.openComboList();
};
canvas.app.battle.Main.prototype.handlerChooseCombo = function (event) {
    this.view.comboView.chooseCombo(event.params);
};
canvas.app.battle.Main.prototype.handlerShowBowPanel = function (event) {
    this.view.showBowPanel(event.params);
};
canvas.app.battle.Main.prototype.handlerUseEffect = function (event) {
    this.view.centerView.useEffect(event.params);
};
canvas.app.battle.Main.prototype.handlerShowError = function (event) {
    this.view.showErrorPopup(event.params);
};
canvas.app.battle.Main.prototype.handlerShowMessage = function (event) {
    this.view.showMessagePopup(
        event.params.mode,
        event.params.headerLabel,
        event.params.bodyLabel,
        event.params.yesFunc,
        event.params.yesFuncParams,
        event.params.acceptLabel,
        event.params.banLabel,
        event.params.cancelLabel,
        event.params.num
    );
};
canvas.app.battle.Main.prototype.setSyncTimeout = function () {
    if (this.syncTimeout) {
        clearTimeout(this.syncTimeout);
    }
    this.syncTimeout = setTimeout(this.mFunc.persState.bind(this.mFunc), canvas.app.battle.Const.STATE_SYNC_INTERVAL, "SYNC");
};
canvas.app.battle.Main.prototype.clearSyncTimeout = function () {
    if (this.syncTimeout) {
        clearTimeout(this.syncTimeout);
        this.syncTimeout = 0;
    }
    if (this.mCmd.myEffectsListIV != 0) {
        clearTimeout(this.mCmd.myEffectsListIV);
        this.mCmd.myEffectsListIV = 0;
    }
    this.evMonClear();
    this.model.mlInterval = 1e3;
};
canvas.app.battle.Main.prototype.evMonInit = function () {
    this.evMonClear();
    this.evMonInterval = setInterval(this.evMonApply.bind(this), 3e3);
};
canvas.app.battle.Main.prototype.evMonClear = function () {
    if (this.evMonInterval) {
        clearInterval(this.evMonInterval);
    }
};
canvas.app.battle.Main.prototype.evMonApply = function () {
    this.model.evActivity = Math.floor(this.model.evActivityTmp / 3);
    this.model.evActivityTmp = 0;
    if (this.model.evActivity < 10) {
        this.model.mlInterval = 1e3;
    } else if (this.model.evActivity < 30) {
        this.model.mlInterval = 3e3;
    } else if (this.model.evActivity < 60) {
        this.model.mlInterval = 5e3;
    } else if (this.model.evActivity < 100) {
        this.model.mlInterval = 7e3;
    } else if (this.model.evActivity < 150) {
        this.model.mlInterval = 1e4;
    } else {
        this.model.mlInterval = 15e3;
    }
};
canvas.app.battle.Main.prototype.mlRepInit = function () {
    if (this.mlRepInterval) {
        clearTimeout(this.mlRepInterval);
    }
    setTimeout(this.mlSend.bind(this), canvas.app.battle.model.mlInterval);
};
canvas.app.battle.Main.prototype.mlSend = function () {
    var conf = canvas.app.battle.model;
    conf.mlBuffer = "";
    for (var i = 0; i < conf.mlBufferQueue.length; i++) {
        conf.mlBuffer += (conf.mlBuffer.length > 0 ? conf.ch2 : "") + conf.mlBufferHash[conf.mlBufferQueue[i]];
    }
    if (conf.mlBuffer.length > 0) {
        if (conf.memStreamBool) {
            if (conf.mlBuffer.length < 20 * 1024) {
                this.sendData("mem", "pak2@" + conf.mlBuffer);
            } else {
                var tmp1 = conf.mlBuffer;
                while (tmp1.length > 0) {
                    this.sendData("mem", "pak2s@" + tmp1.substr(0, 15 * 1024));
                    tmp1 = tmp1.substr(15 * 1024);
                }
                this.sendData("mem", "pak1s@done");
            }
        }
        conf.mlBuffer = "";
        conf.mlBufferHash = {};
        conf.mlBufferQueue = [];
    }
    this.mlRepInit();
};
canvas.app.battle.Main.prototype.handlerAddEvent = function (event) {
    canvas.app.battle.model.addEvent(event.params.params, event.params.code);
};
canvas.app.battle.Main.prototype.handlerAddCommand = function (event) {
    canvas.app.battle.model.addCommand(event.params.params, event.params.code);
};
canvas.app.battle.Main.prototype.handlerEvent = function (event) {
    try {
        var rid = event.params.rid;
        var code = event.params.code;
        var parser = this.model.serverParser;
        switch (code) {
            case parser.FS_PE_OPPWAIT:
                this.mEve.oppWait();
                break;
            case parser.FS_PE_OPPNEW:
                this.mEve.oppNew();
                break;
            case parser.FS_PE_FIGHTSTATE:
                this.mEve.fightState();
                break;
            case parser.FS_PE_NEWPERS:
                this.mEve.newPers();
                break;
            case parser.FS_PE_ATTACKWAIT:
                this.mEve.attackWait();
                break;
            case parser.FS_PE_ATTACKNOW:
                this.mEve.attackNow();
                break;
            case parser.FS_PE_ATTACK:
                this.mFunc.effectList(this.model.persId);
                this.mFunc.effectList(this.model.oppId);
                this.mEve.attack();
                break;
            case parser.FS_PE_FIGHTLOG:
                this.mEve.fightLog();
                break;
            case parser.FS_PE_ATTACKTIMEOUT:
                this.mEve.attackTimeout();
                break;
            case parser.FS_PE_FIGHTOVER:
                this.mEve.fightOver();
                break;
            case parser.FS_PE_SRVSHUTDOWN:
                this.mEve.srvShutdown();
                break;
            case parser.FS_PE_EFFECTAPPLY:
                this.mEve.effectApply(rid);
                break;
            case parser.FS_PE_EFFECTUSE:
                this.mEve.effectUse();
                break;
            case parser.FS_PE_DAMAGE:
                this.mEve.damage();
                break;
            case parser.FS_PE_DEATH:
                this.mEve.death();
                break;
            case parser.FS_PE_MYFIGHTRETURN:
                this.mEve.fightReturn();
                break;
            case parser.FS_PE_MSG:
                this.mEve.msg();
                break;
            case parser.FS_PE_MANNACONSUM:
                this.mEve.manaConsum();
                break;
            case parser.FS_PE_ENERGYCONSUM:
                this.mEve.energyConsum();
                break;
            case parser.FS_PE_ENERGYREGEN:
                this.mEve.energyRegen();
                break;
            case parser.FS_PE_ARROWCONSUM:
                this.mEve.arrowConsum();
                break;
            case parser.FS_PE_EFFUPDATE:
                this.mEve.updateItems();
                break;
            case parser.FS_PE_EFFSWAP:
                this.mEve.effectSwap();
                break;
            case parser.FS_PE_RESETCOMBO:
                this.mEve.resetCombo();
                break;
            case parser.FS_PE_DEADCNT:
                this.mEve.deadCnt();
                break;
            case parser.FS_PE_FIGHTLAUNCH:
                this.mEve.fightLaunch();
                break;
            case parser.FS_PE_CDDEC:
                this.mEve.cdDec();
                break;
            case -1:
                this.mEve.socOnClose();
                break;
            default:
                if (!parser.strEve[code]) {
                    canvas.app.battle.log("WARN: unknown event code=" + String(code), 16711680);
                } else {
                    canvas.app.battle.log("WARN: unhandled event " + parser.strEve[code] + " code=" + String(code), 16711680);
                }
                this.mCmd.paksReadyAndParse();
                break;
        }
    } catch (e) {
        canvas.app.battle.log("ERROR IN EVE EXECUTION: id=" + event.params.event[0] + ", params=" + JSON.stringify(event.params.event[1]) + ", rid=" + event.params.event[2], 16711680);
        canvas.app.battle.log(e.toString(), 16711680);
        this.mCmd.paksReadyAndParse();
    }
};
canvas.app.battle.Main.prototype.handlerCmd = function (event) {
    try {
        var code = event.params.code;
        var parser = this.model.serverParser;
        canvas.app.battle.log("handlerCmd " + parser.strCmd[code], 170);
        canvas.app.battle.log("   * code=" + code);
        canvas.app.battle.log("   * main_teration=" + this.model.mainStep);
        if (this.model.watchFight && this.model.wfCnt != this.model.wfGet && code != parser.FS_SCCL_WATCH_FIGHT) {
            canvas.app.battle.log("   * handle command was skipped, because  new_pers_id was changed", 16711680);
            this.mCmd.paksReadyAndParse();
            return;
        }
        switch (code) {
            case parser.FS_SCCL_INIT:
                this.conn.inited = true;
                this.model.mainStep = canvas.app.battle.Const.MAIN_STEP_STATE;
                this.model.paksReady = true;
                this.mainIteration();
                break;
            case parser.FS_SCCL_STATE:
                this.mCmd.state();
                break;
            case parser.FS_SCCL_PERS_INFO:
                if (this.mFunc.defferedEffects[parser.params[2].val]) {
                    var obj = this.mFunc.defferedEffects[parser.params[2].val];
                    delete this.mFunc.defferedEffects[parser.params[2].val];
                    this.mCmd.cmdAnyPersInfo();
                    this.mFunc.useEffect(obj.effId, obj.tarId, obj.tarTeam);
                    this.mCmd.paksReadyAndParse();
                } else {
                    this.mCmd.persInfo();
                }
                break;
            case parser.FS_SCCL_PERS_PARTS:
                this.mCmd.persParts();
                break;
            case parser.FS_SCCL_EFFECTS:
                this.mCmd.effects();
                this.mCmd.paksReadyAndParse();
                break;
            case parser.FS_SCCL_PERS_ACT_EFFECTS:
                this.mCmd.persActEffects();
                this.mCmd.paksReadyAndParse();
                break;
            case parser.FS_SCCL_ATTACK:
                this.mCmd.paksReadyAndParse();
                break;
            case parser.FS_SCCL_CHANGE_MODE:
                this.mCmd.changeMode();
                this.mCmd.paksReadyAndParse();
                break;
            case parser.FS_SCCL_FIGHT_STATE:
                this.mCmd.fightState();
                this.mCmd.paksReadyAndParse();
                break;
            case parser.FS_SCCL_PERS_SUBSCRIBE:
                this.mCmd.paksReadyAndParse();
                break;
            case parser.FS_SCCL_USE_EFFECT:
                this.mCmd.useEffect();
                this.mCmd.paksReadyAndParse();
                break;
            case parser.FS_SCCL_SEND_MSG:
                this.mCmd.paksReadyAndParse();
                break;
            case parser.FS_SCCL_WATCH_FIGHT:
                this.mCmd.watchFight();
                break;
            case parser.FS_SCCL_EFFECT_SWAP_SUBSLOT:
                this.mCmd.paksReadyAndParse();
                break;
            case parser.FS_SCCL_DROP_EFFECT:
                this.mCmd.unsetAura();
                this.mCmd.paksReadyAndParse();
                break;
            case parser.FS_SCCL_SKIP_TURN:
                this.mCmd.skipTurn();
                this.mCmd.paksReadyAndParse();
                break;
            default:
                canvas.app.battle.log("WARN: unknown cmd=" + String(code), 16711680);
        }
    } catch (e) {
        canvas.app.battle.log("ERROR IN CMD EXECUTION: id=" + event.params.command[0] + ", params=" + JSON.stringify(event.params.command[1]), 16711680);
        canvas.app.battle.log(e.toString(), 16711680);
        this.mCmd.paksReadyAndParse();
    }
};
canvas.app.battle.Main.prototype.handlerCmdError = function (event) {
    var code = event.params.code;
    var parser = this.model.serverParser;
    this.model.fightStateExecuting = false;
    switch (code) {
        case parser.FS_SCCL_INIT:
            canvas.app.battle.log("ERR: authorization failed", 16711680);
            if (parser.params[1].val == parser.FS_SS_WRONG_DATA) {
                this.view.showMainPopup(canvas.app.battle.Const.POP_ST_ERROR, canvas.app.battle.Const.POP_ER_AUTH_FAIL);
            } else {
                this.view.showMainPopup(canvas.app.battle.Const.POP_ST_ERROR, canvas.app.battle.Const.POP_ER_FIGHT_ENDED);
            }
            this.clearSyncTimeout();
            this.conn.stopTransfers();
            break;
        case parser.FS_SCCL_USE_EFFECT:
            canvas.app.battle.log("WARN: cant use effect", 10027008);
            this.view.showErrorPopup(canvas.Translator.getText(19));
            if (this.model.oppId != 0) {
                this.view.centerView.cDot.switchDot(true);
            }
            var usageStatus = parser.params.length > 4 ? parser.params[4].val : 0;
            canvas.app.battle.log("usageStatus=" + usageStatus, 10027008);
            switch (usageStatus) {
                case -10:
                    this.view.showErrorPopup(canvas.Translator.getText(21));
                    break;
                case -20:
                    this.view.showErrorPopup(canvas.Translator.getText(23));
                    break;
                case -30:
                    this.view.showErrorPopup(canvas.Translator.getText(25));
                    break;
                case -35:
                    this.view.showErrorPopup(canvas.Translator.getText(70));
                    break;
                case -40:
                    this.view.showErrorPopup(canvas.Translator.getText(24));
                    break;
                case -44:
                    this.view.showErrorPopup(canvas.Translator.getText(26));
                    break;
                case -46:
                    this.view.showErrorPopup(canvas.Translator.getText(27));
                    break;
                case -45:
                    this.view.showErrorPopup(canvas.Translator.getText(28));
                    break;
                default:
                    this.view.showErrorPopup(canvas.Translator.getText(19));
                    break;
            }
            this.view.centerView.spellsUnlockOnError(parser.params[2].val);
            if (this.model.persStatus == canvas.app.battle.Const.STATUS_ACTIVE) {
                if (!this.view.centerView.visible) {
                    this.centerVisible(true);
                }
            }
            if (this.model.oppId == 0) this.showSpellBookInWaitOpponent();
            this.mCmd.paksReadyAndParse();
            break;
        case parser.FS_SCCL_ATTACK:
            canvas.app.battle.log("WARN: cant attack", 10027008);
            this.centerVisible(true);
            this.mCmd.paksReadyAndParse();
            break;
        case parser.FS_SCCL_CHANGE_MODE:
            canvas.app.battle.log("WARN: cant change mode", 10027008);
            this.mCmd.paksReadyAndParse();
            break;
        case parser.FS_SCCL_PERS_ACT_EFFECTS:
            canvas.app.battle.log("WARN: cant get act effects", 10027008);
            this.mCmd.paksReadyAndParse();
            break;
        default:
            canvas.app.battle.log("FATAL ERROR code=" + String(code), 16711680);
            var errorStr = "Неизвестная ошибка\ncode=" + String(code) + " cmd=" + parser.strCmd[code];
            this.view.showMainPopup(canvas.app.battle.Const.POP_ST_UNKNOWN, canvas.app.battle.Const.POP_ER_NO_CODE, canvas.Translator.getText(4), errorStr);
            this.clearSyncTimeout();
            this.conn.stopTransfers();
            this.view.topTimer.deactivate();
            this.centerVisible(false);
    }
};
canvas.app.battle.Main.prototype.centerVisible = function (fl) {
    var conf = canvas.app.battle.model;
    if (conf.skipTurnIsCooldown()) return;
    if (fl && !conf.watchFight) {
        if (conf.testFlag(conf.memDat[conf.persId].persFlags, canvas.app.battle.Const.FS_PF_MAGIC)) {
            this.view.centerView.cDot.setIcon(canvas.app.battle.Const.MODE_SPELLS);
        }
        this.testCenterMode();
        this.view.centerView.setVisible(true);
        this.model.centerVisible = true;
        if (this.view.bowPanel) this.view.bowPanel.locked = false;
        this.view.centerView.cDot.switchDot(true);
        if (conf.testFlag(conf.memDat[conf.persId].persFlags, canvas.app.battle.Const.FS_PF_DEFENDED)) {
            this.view.centerView.activeBlock(true);
        }
    } else {
        this.view.centerView.setVisible(false);
        this.model.centerVisible = false;
        if (this.view.bowPanel) this.view.bowPanel.locked = true;
    }
};
canvas.app.battle.Main.prototype.testCenterMode = function () {
    var conf = canvas.app.battle.model;
    if (conf.watchFight) return;
    if (this.view.centerView.mode == canvas.app.battle.Const.MODE_SPELLS && !conf.testFlag(conf.memDat[conf.persId].persFlags, canvas.app.battle.Const.FS_PF_MAGIC)) {
        canvas.Functions.destroyChildren(this.players[conf.persId].magicStandBase);
        this.view.centerView.changeControlMode(true);
    } else if (this.view.centerView.mode == canvas.app.battle.Const.MODE_ATTACK && conf.testFlag(conf.memDat[conf.persId].persFlags, canvas.app.battle.Const.FS_PF_MAGIC)) {
        this.view.centerView.changeControlMode(true);
    }
};
canvas.app.battle.Main.prototype.swfData = function (name, data) {
    canvas.Log.add(canvas.Log.BATTLE, "swf_transfer:swfData " + name + " " + data);
    var a = data.split("@");
    if (a.length != 2) {
        canvas.Log.add(canvas.Log.BATTLE, "WARN: invalid data", 16711680);
        return;
    }
    switch (a[0]) {
        case "ping":
            break;
        case "useEffect":
            this.mFunc.useEffect(parseInt(a[1]));
            break;
        case "swapSubSlot":
            this.mFunc.swapSubSlot(parseInt(a[1]));
            break;
        case "FullReq":
            this.fullReq();
            break;
        case "persFocus":
            this.persFocus(parseInt(a[1]));
            break;
        case "showHPMP":
            this.showHpMp(a[1]);
            break;
        case "watchFightPID":
            this.watchFightStart(a[1]);
            break;
        case "persVisible":
            this.model.persVisible = a[1].split(",");
            break;
        default:
            canvas.app.battle.log('WARN: unhandled event "' + a[0] + '"', 16711680);
            break;
    }
};
canvas.app.battle.Main.prototype.sendData = function (tar, data) {
    canvas.Log.add(canvas.Log.BATTLE, "swf_transfer:sendData " + tar + " " + data);
    if (typeof swfTransfer != "undefined") return swfTransfer("game", tar, data);
};
canvas.app.battle.Main.prototype.setBowsInfo = function (arrows, bowEnergyValue, bowEnergyMax) {
    this.model.arrowsCount = arrows;
    this.model.bowEnergyValue = bowEnergyValue;
    this.model.bowEnergyMax = bowEnergyMax;
    this.view.bowPanel.setProgress(bowEnergyValue, bowEnergyMax);
};
canvas.app.battle.Main.prototype.updateAuras = function (persId) {
    this.view.centerView.cAttack.auraControl.visible = this.model.auras.length > 0;
    if (persId == this.model.persId) this.view.centerView.cAttack.auraControl.update();
    this.testAuraCircleAnim(persId);
};
canvas.app.battle.Main.prototype.testAuraCircleAnim = function (pers_id) {
    if (!this.players[pers_id]) return;
    var conf = canvas.app.battle.model;
    var memData = conf.memDat[pers_id];
    var flags = memData.persFlags;
    var currentAura = pers_id == conf.persId ? conf.currentAura != "" : conf.currentAuraOpp != "";
    canvas.Functions.destroyChildren(this.players[pers_id].magicStandBase);
    if (!conf.testFlag(flags, canvas.app.battle.Const.FS_PF_MAGIC) && currentAura && conf.memClsMage[pers_id].cls != 0) {
        var stand_base_name2 = "spell" + conf.memClsMage[pers_id].cls + "base_aura";
        var spl_mc2 = new canvas.px.MovieClip(canvas.Config.spellsPath + stand_base_name2);
        spl_mc2.frameEvent = canvas.app.battle.Event.ENTER_FRAME;
        spl_mc2.loop = true;
        this.players[pers_id].magicStandBase.addChild(new canvas.app.battle.view.AddSpell(this, 168, 475, true, spl_mc2, true));
    }
};
canvas.app.battle.Main.prototype.mainIteration = function () {
    if (!this.model.online) {
        return;
    }
    canvas.app.battle.log("mainIteration: " + this.model.mainStep);
    switch (this.model.mainStep) {
        case canvas.app.battle.Const.MAIN_STEP_INIT:
            this.mFunc.authorization();
            break;
        case canvas.app.battle.Const.MAIN_STEP_STATE:
            this.mFunc.persState();
            break;
        case canvas.app.battle.Const.MAIN_STEP_INFO:
            if (this.model.watchFight) this.mFunc.watchFight();
            this.mFunc.persInfo(this.model.newPersId);
            this.mFunc.persEffects();
            break;
        case canvas.app.battle.Const.MAIN_STEP_DONE:
            if (this.model.newPersId != this.model.persId) {
                this.mCmd.paksReadyAndParse();
                return;
            }
            if (this.model.watchFight) {
                this.setupWatchFightBts(true);
                this.centerVisible(false);
                this.view.mainPopup.deactivate();
                if (this.model.myPersId == this.model.newPersId) {
                    this.view.showMainPopup(canvas.app.battle.Const.POP_ST_WAIT_BT);
                }
                this.view.comboView.visible = false;
            }
            if (this.model.oppId != 0) {
                this.mFunc.persInfo(this.model.oppId);
            } else {
                this.showSpellBookInWaitOpponent();
                this.mCmd.paksReadyAndParse();
            }
            try {
                if (!canvas.Config.isLocal) {
                    new canvas.utils.URLRequest(canvas.Config.domain + "/fight.php?sig=" + md5(canvas.app.battle.Const.MAX_ANIMATION_SIZE) + "&check=1").load();
                }
            } catch (e) {
                canvas.app.battle.log("mainIteration: ERR: loading check 1", 16711680);
            }
            break;
        default:
            canvas.app.battle.log("mainIteration: WARN: unknown main_step = " + this.model.mainStep, 16711680);
    }
};
canvas.app.battle.Main.prototype.setupWatchFightBts = function (value, pid) {
    if (typeof value == "undefined") value = false;
    if (typeof pid == "undefined") pid = false;
    if (pid) {
        this.sendData("mem", "watchFightActive@" + value.toString() + this.model.ch1 + this.model.persTeam.toString() + this.model.ch1 + this.model.persId.toString());
    } else {
        this.sendData("mem", "watchFightActive@" + value.toString() + this.model.ch1 + this.model.persTeam.toString());
    }
};
canvas.app.battle.Main.prototype.showSpellBookInWaitOpponent = function () {
    var conf = canvas.app.battle.model;
    if (conf.watchFight) {
        canvas.app.battle.log("Main: showSpellBookInWaitOpponent: WATCH_FIGHT mode is true", 16711680);
        return;
    }
    this.view.mainPopup.deactivate();
    if (conf.hasSpells && conf.persStatus != canvas.app.battle.Const.STATUS_DEAD && conf.fightRunning) {
        canvas.app.battle.log("Main: showSpellBookInWaitOpponent: pers has spells && pers status != STATUS_DEAD, fight visible");
        this.view.centerView.setVisible(true);
        if (this.view.centerView.mode == canvas.app.battle.Const.MODE_ATTACK) {
            canvas.app.battle.log("Main: showSpellBookInWaitOpponent: Fight mode is attack, change control mode");
            var WITHOUT_SEND_TO_SERV = true;
            this.view.centerView.changeControlMode(WITHOUT_SEND_TO_SERV);
            if (conf.memClsMage[conf.persId].cls != 0) {
                var stand_base_name = "spell" + conf.memClsMage[conf.persId].cls + "base_stand";
                var spl_mc = new canvas.px.MovieClip(canvas.Config.spellsPath + stand_base_name);
                spl_mc.frameEvent = canvas.app.battle.Event.ENTER_FRAME;
                spl_mc.loop = true;
                if (this.players[conf.persId].magicStandBase.children.length == 0) {
                    this.players[conf.persId].magicStandBase.addChild(new canvas.app.battle.view.AddSpell(this, 168, 475, true, spl_mc, true));
                }
            }
        } else {
            this.view.centerView.cDot.setIcon(canvas.app.battle.Const.MODE_SPELLS, true);
        }
        var WITHOUT_NEED_TURN = true;
        this.view.centerView.addSpellCoolDown(1, WITHOUT_NEED_TURN);
        this.view.centerView.cDot.switchDot(false);
    } else if (conf.persStatus != canvas.app.battle.Const.STATUS_DEAD) {
        canvas.app.battle.log("Main: showSpellBookInWaitOpponent: pers !has_spells || pers status == STATUS_DEAD, fight unvisible, top_popup set POP_ST_WAIT");
        this.view.showMainPopup(canvas.app.battle.Const.POP_ST_WAIT);
        this.view.centerView.setVisible(false);
    } else if (conf.persStatus == canvas.app.battle.Const.STATUS_DEAD) {
        this.view.centerView.setVisible(false);
    }
    this.updateKeyCallbacks();
};
canvas.app.battle.Main.prototype.updateKeyCallbacks = function () {
    if (this.view.centerView.visible) {
        this.view.centerView.turnOnKeyCallbacks();
    } else {
        this.view.centerView.turnOffKeyCallbacks();
    }
};
canvas.app.battle.Main.prototype.updPersHPLvl = function () {
    if (this.model.watchFight) {
        return;
    }
    this.sendData("lvl", "updHP@" + this.model.persHp.toString() + "," + this.model.persHpMax.toString());
};
canvas.app.battle.Main.prototype.updPersMPLvl = function () {
    if (this.model.watchFight) {
        return;
    }
    this.sendData("lvl", "updMP@" + this.model.persMp.toString() + "," + this.model.persMpMax.toString());
};
canvas.app.battle.Main.prototype.checkPlayersQueue = function (new_pers_id) {
    this.playersQueue.push(new_pers_id);
    if (this.playersQueue.length > canvas.app.battle.Const.PLAYERS_QUEUE_MAXLEN) {
        var rem_pers_id = this.playersQueue.shift();
        this.view.player2.removeChild(this.players[rem_pers_id]);
        this.players[rem_pers_id].destroy();
        this.players[rem_pers_id] = null;
    }
};
canvas.app.battle.Main.prototype.loadPers = function (pers_id) {
    canvas.app.battle.log("Main:loadPers(" + pers_id + ")");
    var curSkLink;
    var curSkNum;
    var curGender;
    var cached = true;
    if (!this.players[pers_id]) {
        cached = false;
        this.players[pers_id] = new canvas.app.battle.view.Pers(this);
        if (pers_id != this.model.persId) {
            this.checkPlayersQueue(pers_id);
        }
    }
    if (pers_id == this.model.persId) {
        if (this.model.persSk < canvas.app.battle.Const.BOTID1) {
            curSkLink = canvas.Config.skPath + this.model.persGender + "/sk" + canvas.Functions.setNumberLen(String(this.model.persSk), 2);
        } else {
            curSkLink = canvas.Config.botsPath + "img" + canvas.Functions.setNumberLen(String(this.model.persSk), 4) + "/img" + canvas.Functions.setNumberLen(String(this.model.persSk), 4);
        }
        curSkNum = this.model.persSk;
        curGender = this.model.persGender;
        this.view.player1.addChild(this.players[pers_id]);
    } else {
        if (this.model.oppSk < canvas.app.battle.Const.BOTID1) {
            curSkLink = canvas.Config.skPath + this.model.oppGender + "/sk" + canvas.Functions.setNumberLen(String(this.model.oppSk), 2);
        } else {
            curSkLink = canvas.Config.botsPath + "img" + canvas.Functions.setNumberLen(String(this.model.oppSk), 4) + "/img" + canvas.Functions.setNumberLen(String(this.model.oppSk), 4);
        }
        curSkNum = this.model.oppSk;
        curGender = this.model.oppGender;
        this.view.player2.addChild(this.players[pers_id]);
    }
    if (curSkNum < canvas.app.battle.Const.BOTID1 || curSkNum >= canvas.app.battle.Const.BOTID2) {
        this.players[pers_id].scale.set(0.8, 0.8);
    }
    this.players[pers_id].addFuncShow = this.loadPersDone.bind(this);
    var memData = this.model.memDat[pers_id];
    var flags = memData.persFlags;
    var petFlag = this.model.testFlag(flags, canvas.app.battle.Const.FS_PF_PET);
    if (this.players[pers_id].pet && ((pers_id == this.model.persId && this.model.persStatus == canvas.app.battle.Const.STATUS_DEAD) || (pers_id == this.model.oppId && this.model.oppStatus == canvas.app.battle.Const.STATUS_DEAD))) {
        this.players[pers_id].pet.dieFlag = true;
    }
    this.players[pers_id].showPet(petFlag, memData["petSrc"]);
    this.players[pers_id].config({ pers_id: pers_id, pers_sk: curSkNum, pers_sk_link: curSkLink, pers_gender: curGender });
    this.players[pers_id].loadBegin();
};
canvas.app.battle.Main.prototype.showLoadedPers = function () {
    this.loadPersDone({ pers_id: this.model.persId });
};
canvas.app.battle.Main.prototype.eveOppNewNoSh = function () {
    if (this.model.persStatus == canvas.app.battle.Const.STATUS_ACTIVE) {
        this.view.topTimer.activate();
        this.centerVisible(true);
    }
    this.mCmd.paksReadyAndParse();
};
canvas.app.battle.Main.prototype.loadPersDone = function (par) {
    var pers_id = par.pers_id;
    if (pers_id == this.model.persId) {
        this.model.mainStep = canvas.app.battle.Const.MAIN_STEP_DONE;
        this.model.paksReady = true;
        this.mainIteration();
    } else {
        if (this.model.persStatus == canvas.app.battle.Const.STATUS_ACTIVE) {
            this.view.topTimer.activate();
            this.centerVisible(true);
        }
        this.mCmd.paksReadyAndParse();
    }
};
canvas.app.battle.Main.prototype.chekStatusForResurection = function () {
    var conf = canvas.app.battle.model;
    if (conf.persStatus == canvas.app.battle.Const.STATUS_DEAD) {
        conf.persDown = false;
        this.players[conf.persId].gotoAndPlay(this.getPostLabel(conf.persId));
        this.view.mainPopup.deactivate();
    }
};
canvas.app.battle.Main.prototype.flagLoadPers = function (name) {
    if (!name || name == "0") {
        canvas.Functions.destroyChildren(this.view.flagPers);
        return;
    }
    var mc = new canvas.px.MovieClip(canvas.Config.flagsPath + "f" + name + "/f" + name);
    mc.frameEvent = canvas.app.battle.Event.ENTER_FRAME;
    mc.loop = true;
    this.view.flagPers.addChild(mc);
    this.view.flagButton.visible = true;
    this.model.flagTime = this.model.flagTimeLeft;
    this.view.flagPers.visible = true;
};
canvas.app.battle.Main.prototype.flagLoadOpp = function (name) {
    if (!name || name == "0") {
        return;
    }
    var mc = new canvas.px.MovieClip(canvas.Config.flagsPath + "f" + name + "/f" + name);
    mc.frameEvent = canvas.app.battle.Event.ENTER_FRAME;
    mc.loop = true;
    this.view.flagOpp.addChild(mc);
    this.view.flagOpp.visible = true;
};
canvas.app.battle.Main.prototype.getPostLabel = function (pers_id) {
    var conf = this.model;
    var memData = conf.memDat[pers_id];
    var flags = memData.persFlags;
    var retLabel = canvas.app.battle.Const.FS_PF_IDLE_STR;
    if (conf.persStatus == canvas.app.battle.Const.STATUS_WAIT && conf.hasSpells && this.view.centerView.mode == canvas.app.battle.Const.MODE_SPELLS && !conf.testFlag(flags, canvas.app.battle.Const.FS_PF_MAGIC)) {
        if (conf.memClsMage[pers_id].cls != 0) {
            var stand_base_name0 = "spell" + conf.memClsMage[pers_id].cls + "base_stand";
            var spl_mc0 = new canvas.px.MovieClip(canvas.Config.spellsPath + stand_base_name0);
            spl_mc0.frameEvent = canvas.app.battle.Event.ENTER_FRAME;
            spl_mc0.loop = true;
            if (this.players[pers_id].magicStandBase.children.length == 0) {
                this.players[pers_id].magicStandBase.addChild(new canvas.app.battle.view.AddSpell(this, 168, 475, true, spl_mc0, true));
            }
        }
        if (conf.testFlag(flags, canvas.app.battle.Const.FS_PF_DEFENDED)) {
            return canvas.app.battle.Const.FS_PF_DEFENDED_STR;
        }
    } else {
        this.testAuraCircleAnim(pers_id);
        if (conf.testFlag(flags, canvas.app.battle.Const.FS_PF_STUNNED)) {
            retLabel = canvas.app.battle.Const.FS_PF_STUNNED_STR;
        } else if (conf.testFlag(flags, canvas.app.battle.Const.FS_PF_DEFENDED)) {
            retLabel = canvas.app.battle.Const.FS_PF_DEFENDED_STR;
        } else if (conf.testFlag(flags, canvas.app.battle.Const.FS_PF_MAGIC)) {
            if (conf.memClsMage[pers_id].cls != 0) {
                var stand_base_name1 = "spell" + conf.memClsMage[pers_id].cls + "base_stand";
                var spl_mc1 = new canvas.px.MovieClip(canvas.Config.spellsPath + stand_base_name1);
                spl_mc1.frameEvent = canvas.app.battle.Event.ENTER_FRAME;
                spl_mc1.loop = true;
                if (this.players[pers_id].magicStandBase.children.length == 0) {
                    this.players[pers_id].magicStandBase.addChild(new canvas.app.battle.view.AddSpell(this, 168, 475, true, spl_mc1, true));
                }
            }
        } else {
            return retLabel;
        }
    }
    if (!this.players[pers_id].allLabels[retLabel]) {
        return canvas.app.battle.Const.FS_PF_IDLE_STR;
    }
    return retLabel;
};
canvas.app.battle.Main.prototype.persesHide = function () {
    var conf = this.model;
    this.cntHided = 0;
    this.curCntHided = 0;
    var curPers = this.players[conf.persId];
    if (curPers && curPers.visible) {
        this.cntHided++;
        curPers.addFuncHide = this.handlerHideOver.bind(this);
        curPers.hideBody();
    }
    if (conf.oppId != 0) {
        var cur_opp = this.players[conf.oppId];
        if (cur_opp && cur_opp.visible) {
            this.cntHided++;
            cur_opp.addFuncHide = this.handlerHideOver.bind(this);
            cur_opp.hideBody();
        }
    }
    if (this.cntHided == 0) {
        canvas.EventManager.dispatchEvent(canvas.app.battle.Event.PERSES_HIDED);
    }
};
canvas.app.battle.Main.prototype.handlerHideOver = function (oo) {
    this.curCntHided++;
    if (this.curCntHided != this.cntHided) return;
    this.view.effectsP2.initEffects([]);
    this.view.oppNick.unshow();
    this.view.oppLevel.setLevel("");
    this.view.effectsP1.initEffects([]);
    this.view.persNick.unshow();
    this.view.persLevel.setLevel("");
    this.view.hpmp.setHpOpp(0, 0);
    this.view.hpmp.setMpOpp(0, 0);
    this.view.hpmp.setHpPers(0, 0);
    this.view.hpmp.setMpPers(0, 0);
    canvas.EventManager.dispatchEvent(canvas.app.battle.Event.PERSES_HIDED);
};
canvas.app.battle.Main.prototype.sndPlay = function (sndName) {
    canvas.SoundManager.play(canvas.Config.soundsPath + "default/" + sndName + ".mp3");
};
canvas.app.battle.Main.prototype.sndPlayInternal = function (sndName, sk) {
    canvas.SoundManager.play(canvas.Config.soundsPath + "bots/img" + canvas.Functions.setNumberLen(sk, 4) + "/" + sndName);
};
canvas.app.battle.Main.prototype.watchFightStart = function (v, from_eve_fight_return) {
    if (typeof from_eve_fight_return == "undefined") from_eve_fight_return = false;
    var conf = canvas.app.battle.model;
    if (conf.newPersId == v) return;
    while (conf.paksEveCache[0]) {
        if (conf.paksEveCache[0][1][1].val == conf.serverParser.FS_PE_MYFIGHTRETURN) {
            this.setupWatchFightBts(false);
            return;
        } else {
            conf.paksEveCache.shift();
        }
    }
    conf.newPersId = parseInt(v);
    conf.wfCnt++;
    conf.watchFight = true;
    this.view.comboView.visible = false;
    this.view.topTimer.deactivate();
    this.centerVisible(false);
    conf.mainStep = canvas.app.battle.Const.MAIN_STEP_INFO;
    this.mainIteration();
};
canvas.app.battle.Main.prototype.persFocus = function (pers_id) {
    var conf = canvas.app.battle.model;
    var now = Date.now();
    conf.persInFocus = pers_id;
    if (!conf.persBafsTimes[pers_id] || now - conf.persBafsTimes[pers_id] > conf.persBafsCooldown) {
        conf.persBafsFlag = true;
        conf.persBafsTimes[pers_id] = now;
        this.mFunc.effectList(pers_id);
    } else {
    }
    this.view.updateFocus();
};
canvas.app.battle.Main.prototype.fullReq = function () {
    if (canvas.app.battle.model.mainStep == canvas.app.battle.Const.MAIN_STEP_DONE) {
        this.mFunc.fightState(0, 0);
        this.mlRepInit();
        this.evMonInit();
        this.sendData("mem", "stopReq@null");
    }
    this.persStateInterval = setInterval(this.mFunc.persStateRequest.bind(this.mFunc), canvas.app.battle.Const.PERS_STATE_INTERVAL);
    this.mFunc.persStateRequest();
};
canvas.app.battle.Main.prototype.showHpMp = function (val) {
    this.mFunc.changeMode(parseInt(val), 2);
    canvas.app.battle.model.updateHpMp = val == "1";
};
canvas.app.battle.Main.prototype.afterWound = function (par) {
    if (!this.model.animationLock) {
        this.players[this.model.persId].inMotion = false;
        if (this.players[this.model.oppId]) {
            this.players[this.model.oppId].inMotion = false;
        }
        this.mCmd.paksReadyAndParse();
    }
};
canvas.app.battle.Main.prototype.persMotionDone = function (persId) {
    var conf = this.model;
    if (!(persId == conf.persId || persId == conf.oppId)) {
        canvas.app.battle.log("Main.persMotionDone WARN: this pers is not active", 16711680);
        return;
    }
    this.players[persId].inMotion = false;
    if (!this.players[conf.persId].inMotion && this.players[conf.oppId] && !this.players[conf.oppId].inMotion) {
        if (conf.oppHp == 0) {
            this.players[conf.oppId].addFuncDie = this.persMotionDoneOnDead.bind(this);
            this.players[conf.oppId].dieBody();
        } else {
            this.mCmd.paksReadyAndParse();
        }
    }
};
canvas.app.battle.Main.prototype.persMotionDoneOnDead = function () {
    this.view.effectsP2.initEffects([]);
    this.mCmd.paksReadyAndParse();
};
canvas.app.battle.Main.prototype.useAura = function (index) {
    if (!this.view.centerView.visible || this.view.centerView.mode != canvas.app.battle.Const.MODE_ATTACK) return;
    this.view.centerView.cAttack.auraControl.useAura(index);
};
canvas.app.battle.Model = function (par) {
    this.parser = new canvas.app.battle.Parser(this);
    this.serverParser = new canvas.app.battle.engine.ServerParser();
    this._soundVolume = 1;
    Object.defineProperty(this, "soundVolume", {
        get: function () {
            return this._soundVolume;
        },
        set: function (value) {
            this._soundVolume = value;
            this.localStorage.set("soundVolume", value);
            canvas.SoundManager.volume = this._soundMute ? 0 : this._soundVolume;
            this.updateSoundVolume();
        },
    });
    this._soundMute = false;
    Object.defineProperty(this, "soundMute", {
        get: function () {
            return this._soundMute;
        },
        set: function (value) {
            this._soundMute = value;
            this.localStorage.set("soundMute", value);
            this.updateSoundVolume();
        },
    });
    this._oppId = 0;
    Object.defineProperty(this, "oppId", {
        get: function () {
            return this._oppId;
        },
        set: function (value) {
            this._oppId = value;
            canvas.EventManager.dispatchEvent(canvas.app.battle.Event.OPP_ID_CHANGE);
        },
    });
    this._animationLockTimeout;
    this._animationLock = false;
    Object.defineProperty(this, "animationLock", {
        get: function () {
            return this._animationLock;
        },
        set: function (value) {
            this._animationLock = value;
            clearTimeout(this._animationLockTimeout);
            if (this._animationLock) {
                this._animationLockTimeout = setTimeout(this.handlerAnimationLockTimeout.bind(this), canvas.app.battle.Const.MAX_ANIMATION_LOCK_DELAY);
            }
        },
    });
    this._paksReady = true;
    Object.defineProperty(this, "paksReady", {
        get: function () {
            return this._paksReady;
        },
        set: function (value) {
            this._paksReady = value;
            canvas.app.battle.log("paksReady: " + this._paksReady);
        },
    });
    this._popupPos = null;
    Object.defineProperty(this, "popupPos", {
        get: function () {
            return this._popupPos;
        },
        set: function (value) {
            this._popupPos = value;
            this.localStorage.set("popupPos", value.x + "," + value.y);
        },
    });
    this.width = par.width ? par.width : 464;
    this.height = par.height ? par.height : 464;
    this.codePage = false;
    this.bgLink = par.bg ? canvas.Config.wwwPath + par.bg : canvas.Config.wwwPath + "canvas/img/odelvays_town.jpg";
    this.effConfLink = par.eff_conf ? par.eff_conf : canvas.Config.dataPath + "effect/cache.ui";
    this.isBold = par.nobold ? par.nobold != 1 : true;
    this.isNub = par.nub ? par.nub == 1 : false;
    this.islp3 = par.lp3 ? par.lp3 == "1" : false;
    this.showComboRender = par.showcombos ? parseInt(par.showcombos) != 0 && !this.islp3 : true;
    this.defaultSoundOn = par.soundOn ? par.soundOn == "1" : true;
    this.frameRateKoeff = par.speedx ? parseFloat(par.speedx) : 1;
    this.invisibleInfoUrl = par.invisible_info_url ? par.invisible_info_url : "";
    this.host = par.host ? par.host : "192.168.1.6";
    this.port = par.port ? par.port : "5432";
    this.wsHost = par.wsHost ? par.wsHost : "";
    this.proxyHost = par.proxyHost ? par.proxyHost : this.host + ":5433";
    this.sid = par.sid ? par.sid : "";
    this.proxy = par.wsHost ? (par.proxy ? par.proxy == "1" : false) : true;
    this.akey = par.akey ? parseInt(par.akey) : 0;
    this.urlFinish = par.url_finish ? par.url_finish : "finish.htm";
    this.urlFinish2 = par.url_finish2 ? par.url_finish2 : "";
    this.urlFinish2Text = par.url_finish2_text ? par.url_finish2_text : "";
    this.urlError = par.url_error ? par.url_error : "error.htm";
    this.fightId = par.fight_id ? parseInt(par.fight_id) : 9999;
    this.allowBowPanel = false;
    this.fightRunning = false;
    this.resurect = false;
    this.online = false;
    this.persIsBotFlag = false;
    this.persId = par.pers_id ? parseInt(par.pers_id) : 100;
    this.persNick = "";
    this.persRace = 0;
    this.persStatus = 0;
    this.myPersId = this.persId;
    this.newPersId = this.persId;
    this.tempDead = false;
    this.oppStatus = 0;
    this.newOppId = 0;
    this.persTeam = 0;
    this.persHp = 0;
    this.persHpMax = 0;
    this.persMp = 0;
    this.persMpMax = 0;
    this.persSk = 0;
    this.persSkTime = 0;
    this.persGender = "M";
    this.persDown = false;
    this.oppHp = 0;
    this.oppHpMax = 0;
    this.oppMp = 0;
    this.oppMpMax = 0;
    this.oppSk = 0;
    this.oppSkTime = 0;
    this.oppMask = 0;
    this.oppGender = "M";
    this.persInFocus = 0;
    this.auras = [];
    this.currentAura = "";
    this.currentAuraOpp = "";
    this.fightStateExecuting = false;
    this.persDmgCnt = 0;
    this.oppDmgCnt = 0;
    this.dmgEve = [];
    this.persAnimFlag = false;
    this.oppAnimFlag = false;
    this.attackTime = 0;
    this.abilityTemp = "";
    this.mainStep = "";
    this.roundTimeBase = 3e4;
    this.roundTime = 3e4;
    this.effectsMinCooldown = 3;
    this.myAllDataArray = {};
    this.memDat = {};
    this.memGenders = {};
    this.memClsMage = {};
    this.fullMlLoaded = false;
    this.mlInterval = 1e3;
    this.evActivity = 0;
    this.evActivityTmp = 0;
    this.serverTimestamp = 0;
    this.clientTimestamp = 0;
    this.flagEffId = 0;
    this.flagTimeCd = 0;
    this.flagTimeLeft = 0;
    this.flagTime = 0;
    this.fightServerId = par.fight_server_id ? par.fight_server_id : "";
    this.team1ServerUrl = par.team1_server_url ? par.team1_server_url : "";
    this.team2ServerUrl = par.team2_server_url ? par.team2_server_url : "";
    this.abils = {};
    this.hasSpells = false;
    this.spells = {};
    this.spellsBow = {};
    this.abilsFlags = {};
    this.updateHpMp = true;
    this.watchFight = false;
    this.wfCnt = 0;
    this.wfGet = 0;
    this.defaultCombo = 0;
    this.skipTurnTime = 0;
    this.clanFlag = par.clan_banner ? parseInt(par.clan_banner) : 0;
    this.arrowsCount = 0;
    this.bowEnergyValue = 0;
    this.bowEnergyMax = 0;
    this.persVisible = [];
    this.persVisiblePrev = [];
    this.persBafsFlag = false;
    this.persBafsTimes = {};
    this.persBafsCooldown = 0;
    this.isPvp = false;
    this.fightResult = 0;
    this.shadowSummonable = par.shadowSummonable ? par.shadowSummonable == "1" : false;
    this.shadowSummonUrl = par.shadowSummonUrl ? par.shadowSummonUrl : "";
    this.shadowAvailable = par.shadowAvailable ? par.shadowAvailable == "1" : false;
    this.fightFlags = par.fight_flags ? parseInt(par.fight_flags) : 0;
    this.fps = Math.round(canvas.app.battle.Const.BASE_FRAMERATE * this.frameRateKoeff);
    this.isUseHotkeys = par.use_hotkeys ? par.use_hotkeys == 1 : true;
    this.answersWait = 0;
    this.totalDamage = 0;
    this.waitingDamageCnt = -1;
    this.centerVisible = false;
    this.canLeaveFight = par.can_leave_fight == "1";
    this.blockTime = 0;
    this.ch1 = String.fromCharCode(1);
    this.ch2 = String.fromCharCode(2);
    this.paksEveCache = [];
    this.paksCmdCache = [];
    this.mlBufferHash = {};
    this.mlBufferQueue = [];
    this.mlBuffer = "";
    this.combos = [];
    this.relevantCmdId = 0;
    this.relevantCmdHash = {};
    this.memStreamBool = true;
    this.delayedAttackData = null;
    this.fullReqLoaded = false;
    this.persLastEffectsUpdateIndex = 0;
    this.oppLastEffectsUpdateIndex = 0;
    this.centerMode = canvas.app.battle.Const.MODE_ATTACK;
    if (par.combos) {
        var doc = new DOMParser().parseFromString("<root>" + par.combos + "</root>", "text/xml");
        var list = doc.getElementsByTagName("combo");
        for (var i = 0; i < list.length; i++) {
            this.combos.push(
                new canvas.data.battle.ComboData(parseInt(list[i].attributes.id.value), list[i].attributes.description.value, parseInt(list[i].attributes.level.value), list[i].attributes.seq.value, list[i].attributes.title.value)
            );
        }
        if (this.combos.length > 0) {
            this.defaultCombo = par.by_default ? parseInt(par.by_default) : this.combos[0].id;
            this.activeComboId = this.combos[0].id;
        }
    }
    this.localStorage = new canvas.utils.LocalStorage(canvas.Log.BATTLE);
    this._soundVolume = this.localStorage.get("soundVolume") ? parseFloat(this.localStorage.get("soundVolume")) : 1;
    this._soundMute = this.defaultSoundOn ? this.localStorage.get("soundMute") == "true" : true;
    this.updateSoundVolume();
    var a,
        str = this.localStorage.get("popupPos");
    if (str) {
        a = str.split(",");
        this._popupPos = new canvas.px.Point(parseInt(a[0]), parseInt(a[1]));
    }
    this.repair();
};
canvas.app.battle.Model.prototype.parseEffectsConf = function (data) {
    var a = data.split("\n");
    var i,
        b,
        len = a.length;
    this.effects = [];
    for (i = 0; i < len; i++) {
        if (!a[i]) continue;
        b = a[i].split(";");
        if (b.length < 3) continue;
        this.effects.push(new canvas.data.battle.EffectData(b[0], b[1], b[2].split(",")));
    }
};
canvas.app.battle.Model.prototype.getEffectLogImage = function (type, effId) {
    var i,
        effectData,
        len = this.effects.length;
    for (i = 0; i < len; i++) {
        effectData = this.effects[i];
        if (effectData.type == type && effectData.ids.indexOf(effId.toString()) >= 0) {
            return effectData.image;
        }
    }
};
canvas.app.battle.Model.prototype.repair = function () {
    this.paksEveId = 0;
    this.paksEveCache = [];
    this.paksEveTimes = {};
    this.paksCmdId = 0;
    this.paksCmdCache = [];
    this.answersWait = 0;
    this.paksReady = true;
    this.online = false;
    this.persStatus = canvas.app.battle.Const.STATUS_CREATED;
    this.oppId = 0;
    this.oppStatus = canvas.app.battle.Const.STATUS_CREATED;
    this.newOppId = 0;
    this.persTeam = 0;
    this.mainStep = canvas.app.battle.Const.MAIN_STEP_INIT;
};
canvas.app.battle.Model.prototype.reset = function () {
    this.paksReady = true;
    this.paksEveId = 0;
    this.paksEveCache = [];
    this.paksEveTimes = {};
    this.paksCmdId = 0;
    this.paksCmdCache = [];
    this.answersWait = 0;
    this.mainStep = canvas.app.battle.Const.MAIN_STEP_INIT;
};
canvas.app.battle.Model.prototype.testFlag = function (flags, flag) {
    return (flags & flag) == flag;
};
canvas.app.battle.Model.prototype.resetString = function (str) {
    var newString = "";
    var i;
    var code;
    for (i = 0; i < str.length; i++) {
        code = str.charCodeAt(i);
        if (code >= 192 && code <= 255) {
            code += 848;
        }
        if (code == 184) code = "е".charCodeAt(0);
        if (code == 168) code = "Е".charCodeAt(0);
        newString += String.fromCharCode(code);
    }
    return newString;
};
canvas.app.battle.Model.prototype.parsePersStatus = function (status, linkStatus) {
    var Const = canvas.app.battle.Const;
    switch (status) {
        case Const.STATUS_CREATED:
        case Const.STATUS_DEAD:
            return status;
        default:
            switch (linkStatus) {
                case Const.FS_PLS_ACTIVE:
                    return Const.STATUS_ACTIVE;
                case Const.FS_PLS_PASSIVE:
                    return Const.STATUS_PASSIVE;
                case Const.FS_PLS_PENDING:
                    return Const.STATUS_WAIT;
            }
    }
    return 0;
};
canvas.app.battle.Model.prototype.testPvpStatus = function (team, isBot) {
    if (this.isPvp) return;
    if (team != this.persTeam && !isBot) this.isPvp = true;
};
canvas.app.battle.Model.prototype.skipTurnIsCooldown = function () {
    return Date.now() < this.skipTurnTime;
};
canvas.app.battle.Model.prototype.handlerAnimationLockTimeout = function () {
    canvas.EventManager.dispatchEvent(canvas.app.battle.Event.EFFECT_AFTER_SPELL);
};
canvas.app.battle.Model.prototype.getHintTextWithHotkey = function (txt, hotkey) {
    if (this.isUseHotkeys && hotkey) {
        return txt + " (" + hotkey + ")";
    } else {
        return txt;
    }
};
canvas.app.battle.Model.prototype.clearEventsCache = function () {
    this.paksEveCache = [];
};
canvas.app.battle.Model.prototype.testCurrentAura = function (id, pers_id, remove) {
    if (typeof remove == "undefined") remove = false;
    var auraData;
    var currentAura = pers_id == this.persId ? this.currentAura : this.currentAuraOpp;
    var result = false;
    for (var i = 0; i < this.auras.length; i++) {
        auraData = this.auras[i];
        if (auraData.id == id.toString()) {
            currentAura = remove ? "" : auraData.id;
            result = true;
            break;
        }
    }
    if (pers_id == this.persId) {
        this.currentAura = currentAura;
    } else {
        this.currentAuraOpp = currentAura;
    }
    return result;
};
canvas.app.battle.Model.prototype.useFlag = function (id) {
    if (id == this.flagEffId) {
        this.flagTime = this.flagTimeCd;
    }
};
canvas.app.battle.Model.prototype.getLostTime = function () {
    var lost_time;
    if (this.paksEveTimes[this.currentEveId]) {
        lost_time = Date.now() - this.paksEveTimes[this.currentEveId];
    }
    return lost_time;
};
canvas.app.battle.Model.prototype.addEvent = function (params, code) {
    if (this.checkEffectEve(params)) {
        return;
    }
    this.paksEveId++;
    this.paksEveCache.push([this.paksEveId, params, this.relevantCmdId]);
    canvas.app.battle.log("+EVE (id=" + this.paksEveId + ") " + this.serverParser.strEve[code] + "(" + code + ")", 153);
    this.relevantCmdId++;
    if (this.serverParser.FS_PE_CAPTURE_REAL_TIME[code]) {
        this.paksEveTimes[this.paksEveId] = Date.now();
    }
    this.parser.paksParse();
};
canvas.app.battle.Model.prototype.checkEffectEve = function (params) {
    if (params.length < 4) {
        return false;
    }
    var code = params[1].val;
    if (code != canvas.app.battle.Const.FS_PE_EFFECTUSE) {
        return false;
    }
    var persId = params[2].val;
    var targetId = params[3].val;
    if (this.persId != persId && this.oppId != persId) {
        if ((this.persId == targetId && this.persAnimFlag) || (this.oppId == targetId && this.oppAnimFlag)) {
            canvas.app.battle.log("checkEffectEve: SKIP ANIMATIONS, pers_anim_flag = " + this.persAnimFlag + ", opp_anim_flag = " + this.oppAnimFlag);
            return true;
        }
    }
    return false;
};
canvas.app.battle.Model.prototype.addCommand = function (params, code) {
    this.paksCmdId++;
    this.paksCmdCache.push([this.paksCmdId, params]);
    canvas.app.battle.log("+CMD (id=" + this.paksCmdId + ") " + this.serverParser.strCmd[code] + "(" + code + ")", 153);
    this.relevantCmdHash[code] = this.relevantCmdId;
    this.relevantCmdId++;
    this.parser.paksParse();
};
canvas.app.battle.Model.prototype.updateSoundVolume = function () {
    canvas.SoundManager.volume = this.soundMute ? 0 : this.soundVolume;
};
canvas.app.battle.Const = {
    ERROR_INITALIZE: "101",
    ERROR_SOCKET_DATA_HANDLER: "104",
    ERROR_PROXY_DATA_HANDLER: "105",
    ERROR_PARSE_DATA: "106",
    ERROR_EFFECT_USE: "107",
    ERROR_PERS_LOAD: "108",
    ERROR_PERS_NOT_DEFINITION: "109",
    ERROR_PERS_LOAD_PARTS: "110",
    ERROR_PERS_BUILD: "111",
    ERROR_PERS_SOUND: "112",
    ERROR_PAK_LOAD: "113",
    ERROR_EFFECTS_PERS: "114",
    ERROR_EFFECTS_PERS_LOAD: "115",
    ERROR_PAK_DATA: "116",
    BASE_FRAMERATE: 20,
    SKIP_TURN_COOLDOWN: 2,
    MAIN_STEP_INIT: "init",
    MAIN_STEP_STATE: "state",
    MAIN_STEP_INFO: "info",
    MAIN_STEP_DONE: "done",
    BOTID1: 1e3,
    BOTID2: 2e3,
    STATUS_CREATED: 0,
    STATUS_FIGHTING: 1,
    STATUS_DEAD: 2,
    STATUS_WAIT: 3,
    STATUS_ACTIVE: 4,
    STATUS_PASSIVE: 5,
    FS_PLS_PENDING: 1,
    FS_PLS_ACTIVE: 2,
    FS_PLS_PASSIVE: 3,
    FS_PF_IDLE: 0,
    FS_PF_BOT: 64,
    FS_PF_STUNNED: 128,
    FS_PF_DEFENDED: 256,
    FS_PF_MAGIC: 1024,
    FS_PF_SKGHOST: 2048,
    FS_PF_PET: 16384,
    FS_PF_SILENT: 2097152,
    FS_PF_MOROC_LIGHT: 4194304,
    FS_PF_MOROC_DARK: 16777216,
    FS_PF_NO_AURAS: 268435456,
    FS_PF_NO_OPP_AUTO: 536870912,
    FS_PF_SHADOW: 1073741824,
    FS_PF_FLEE: 65536,
    FS_PF_INVISIBLE: 32768,
    FIGHT_FLAG_BLIND: 16,
    TO_FS_PF_DEFENDED: 0,
    TO_FS_PF_MAGIC: 1,
    FS_PF_IDLE_STR: "idle",
    FS_PF_STUNNED_STR: "stun",
    FS_PF_DEFENDED_STR: "protected",
    FS_PF_MAGIC_STR: "magic",
    PART_STR: ["combo", "kick_up", "kick_mid", "kick_bot"],
    KICK_STR: ["die", "dodge", "wound", "wound", "block"],
    STATE_SYNC_INTERVAL: 3e4,
    PERS_STATE_INTERVAL: 3e3,
    TIMEOUT_REFRESH_INTERVAL: 980,
    SK_LS_EMPTY: "empty",
    SK_LS_PROGRESS: "progress",
    SK_LS_READY: "ready",
    POP_ST_WAIT: 0,
    POP_ST_VISCORY: 1,
    POP_ST_DEFEAT: 2,
    POP_ST_KILLED: 3,
    POP_ST_ERROR: 4,
    POP_ST_UNKNOWN: 5,
    POP_ST_CONFIRM: 6,
    POP_ST_WAIT_BT: 7,
    POP_ST_WAIT_BT_CONFIRM: 8,
    POP_ER_NO_CODE: 0,
    POP_ER_SHUTDOWN: 1,
    POP_ER_SOC_CLOSE: 2,
    POP_ER_AUTH_FAIL: 3,
    POP_ER_FIGHT_ENDED: 4,
    DMG_KICK_DODGE: 1,
    DMG_KICK_CRIT: 2,
    DMG_KICK_WOUND: 3,
    DMG_KICK_BLOCK: 4,
    DMG_KICK_CURE: 5,
    DMG_KICK_ABSORB: 6,
    DMG_KICK_RESIST: 7,
    DMG_KICK_IMMUNITY: 8,
    DMG_KICK_NOCHANCE: 9,
    DMG_KICK_FULLRES: 10,
    DMG_KICK_MANA: 11,
    MSG_CONFIRM_SHOW: 0,
    MSG_CONFIRM_ANSW: 1,
    FS_PEF_WEAPONEFFECT: 4,
    FS_PEF_SPELL: 8,
    FS_PEF_PASSTURN: 16,
    FS_PEF_NEEDTURN: 32,
    FS_PEF_TARGETSELF: 64,
    FS_PEF_TARGETOPP: 128,
    FS_PEF_TEAMSELF: 256,
    FS_PEF_TEAMOPP: 512,
    FS_PEF_CONFIRM: 8192,
    FS_PEF_USEDEAD: 2048,
    FS_PF_RACESELF: 8388608,
    FS_PEF_BOW: 536870912,
    FS_PEF_AURA: 2147483648,
    FS_PEF_INFINITE: 16777216,
    FS_PEF_DISABLED: 268435456,
    DEFAULT_SPELLS_COOLDOWN: 5e3,
    AEFF_ABSORB: "ABSORB",
    AEFF_SPELL: "SPELL",
    AEFF_SPW: "SPW",
    AEFF_SPD: "SPD",
    AEFF_CH: "101",
    MAX_ANIMATION_LOCK_DELAY: "5000",
    TOP_ATTACK_ID: 1,
    MIDDLE_ATTACK_ID: 2,
    BOTTOM_ATTACK_ID: 3,
    TRANSFER_DATA_SEPARATOR: "@",
    PLAYERS_QUEUE_MAXLEN: 5,
    MODE_SPELLS: "spells",
    MODE_ATTACK: "attack",
    SPELLS_CONT_WIDTH: 154,
    SPELLS_CONT_HEIGHT: 160,
    SPELLS_AR: {
        ICO: [null, "ICON_DirectDamage", "ICON_PlusHP", "ICON_Poison"],
        IN: [null, "raysIN_air", "raysIN_death", "raysIN_earth", "raysIN_fire", "raysIN_life", "raysIN_water"],
        OUT: [null, "raysOUT_air", "raysOUT_death", "raysOUT_earth", "raysOUT_fire", "raysOUT_life", "raysOUT_water"],
    },
    HAND_EFFECT_POSITION: { M: [90, 164], F: [90, 161] },
    BOW_SLOTS_COUNT: 5,
    MAX_ANIMATION_SIZE: "41775e02da98ddb63c980dee",
    SND_FULL_LIST: [
        "block_weapon_1",
        "block_weapon_2",
        "block_weapon_3",
        "body_fall",
        "charge_energy",
        "charge_vampir",
        "crit_weapon",
        "dodge",
        "drink",
        "fightover_defeat",
        "fightover_victory",
        "magic_earth",
        "magic_evil",
        "magic_fire",
        "magic_life",
        "magic_water",
        "magic_wind",
        "wound_punch_1",
        "wound_punch_2",
        "wound_punch_3",
        "orb",
        "deadGod",
        "fertilityGod",
        "dragonGod",
        "_SP1",
        "_SP2",
        "_SP3",
        "_SP4",
        "_SP5",
        "_SP6",
        "_SP7",
        "_SP8",
        "_SP9",
        "_SP10",
        "_SP11",
        "_SP12",
        "_SP13",
        "_SP14",
        "_SP15",
        "_SP16",
        "_SP17",
        "_SP18",
        "_SP21",
        "_SP25",
        "_SP31",
        "_SP32",
        "_SP33",
        "idolWater",
        "idolAir",
        "idolZarlog",
        "idolMaurin",
    ],
    SND_GROUPS: { dodge: ["dodge"], crit: ["crit_weapon"], wound: ["wound_punch_1", "wound_punch_2", "wound_punch_3"], block: ["block_weapon_1", "block_weapon_2", "block_weapon_3"] },
    EFFECTS_LIST: [
        ["effect_pumpkin", "effect_frog", "effect_orb", "effect_orb_old", "effect_snowball", "effect_starlet", "effect_saw", "effect_bottle"],
        ["effect_fertilityGod"],
        ["effect_deadGod"],
        ["effect_dragonGod"],
        ["effect_idolWater"],
        ["effect_idolAir"],
        ["effect_idolZarlog"],
        ["effect_idolMaurin"],
    ],
    MY_FUNC_CHANGE_MODE: 1,
    MY_FUNC_USE_EFFECT: 2,
    MY_FUNC_UNSET_AURA: 3,
    MY_FUNC_SEND_MESSAGE: 4,
    EVE_FIGHT_OVER: 1,
    WAITING_BATTLE: 1,
    WAITING_OPPONENT: 2,
    CENTER_DOT_TIME_CD: 4e3,
    CENTER_SPELL_ITEMS_COUNT: 10,
    FIST_NONSCHOOL_EXTRA: 900,
    MV_PERS_SHOW: [-180, -137.8, -101.25, -70.3, -45, -25.3, -11.25, -2.8, 0],
    MV_PERS_HIDE: [0, -2.8, -11.25, -25.3, -60, -70.3, -101.25, -137.8, -180],
    PERS_POS_X: { pers: 92, opp: 352 },
    EFFECT_TYPE_OWNER: "fight_pic_owner",
    EFFECT_TYPE_OTHER: "fight_pic_other",
};
canvas.app.battle.Event = {
    HINT_ADD: "Battle.HINT_ADD",
    HINT_REMOVE: "Battle.HINT_REMOVE",
    OPP_ID_CHANGE: "Battle.OPP_ID_CHANGE",
    SOUND_VOLUME_CHANGE: "Battle.SOUND_VOLUME_CHANGE",
    SOUND_MUTE_CHANGE: "Battle.SOUND_MUTE_CHANGE",
    EFFECT_AFTER_SPELL: "Battle.EFFECT_AFTER_SPELL",
    SKIP_TURN: "Battle.SKIP_TURN",
    EVENT_MY_FUNC: "Battle.EVENT_MY_FUNC",
    EVENT_EVE: "Battle.EVENT_EVE",
    EVENT_CMD: "Battle.EVENT_CMD",
    EVENT_CMD_ERROR: "Battle.EVENT_CMD_ERROR",
    CENTER_VISIBLE: "Battle.CENTER_VISIBLE",
    ENTER_FRAME: "Battle.ENTER_FRAME",
    ATTACK: "Battle.ATTACK",
    BLOCK_SWITCH: "Battle.BLOCK_SWITCH",
    CENTER_CHANGE_MODE: "Battle.CENTER_CHANGE_MODE",
    START_AURA_COOLDOWN: "Battle.START_AURA_COOLDOWN",
    RESET: "Battle.RESET",
    TRY_RECONNECT: "Battle.TRY_RECONNECT",
    REPAIR: "Battle.REPAIR",
    OPEN_COMBO_LIST: "Battle.OPEN_COMBO_LIST",
    CHOOSE_COMBO: "Battle.CHOOSE_COMBO",
    SHOW_BOW_PANEL: "Battle.SHOW_BOW_PANEL",
    USE_EFFECT: "Battle.USE_EFFECT",
    SHOW_ERROR: "Battle.SHOW_ERROR",
    SHOW_MESSAGE: "Battle.SHOW_MESSAGE",
    CLEAR_SYNC_TIMEOUT: "Battle.CLEAR_SYNC_TIMEOUT",
    ADD_EVENT: "Battle.ADD_EVENT",
    ADD_COMMAND: "Battle.ADD_COMMAND",
    PERSES_HIDED: "Battle.PERSES_HIDED",
    UPDATE_PERS_HP_LVL: "Battle.UPDATE_PERS_HP_LVL",
    UPDATE_PERS_MP_LVL: "Battle.UPDATE_PERS_MP_LVL",
};
canvas.app.battle.View = function (base_lnk) {
    canvas.px.Container.call(this);
    var conf = canvas.app.battle.model;
	
    this.baseLnk = base_lnk;
    this.players = new canvas.px.Container();
    this.bgSpells = new canvas.px.Container();
    this.bgEffects = new canvas.px.Container();
    this.spells = new canvas.px.Container();
    this.effects = new canvas.px.Container();
    this.player1 = new canvas.px.Container();
    this.player2 = new canvas.px.Container();
    var bg = new canvas.px.Sprite(canvas.ResourceLoader.getTexture("bg"));
    this.addChild(bg);
    bg.position.set(1, 10);
	bg.scale.set(1.27, 1.27);
    this.flagButton = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "battle_flag"));
    this.flagButton.position.set(0, 50);
    this.flagCdGraphics = new canvas.px.Graphics();
    this.flagButton.addChild(this.flagCdGraphics);
    this.flagHint = new canvas.app.view.PxHint("");
    canvas.EventManager.dispatchEvent(canvas.app.battle.Event.HINT_ADD, null, { target: this.flagButton, params: new canvas.utils.HintParams(this.flagHint) });
    this.flagPers = new canvas.px.Container();
    this.flagOpp = new canvas.px.Container();
    this.frontImage = new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "battle_contour"), 49, 49, 49, 49);
    this.frontImage.width = 577;
    this.frontImage.height = 447;
    this.frontImage2 = new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "battle_bow_contour"), 46, 46, 46, 121);
    this.frontImage2.width = 577;
    this.frontImage2.height = 547;
    this.frontImageElement = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_bow_contour_element"));
    this.frontImageElement.position.set(190, 447);
    this.bowPanelBack = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", ""));
    this.bowPanelBack.position.set(4, 350);
    this.topImage = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_top"));
	this.damageText = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_9, 16697738, 100, 16, "center");
    this.damageText.text = canvas.Translator.getText(30);
    this.soundView = new canvas.app.battle.view.SoundView();
    this.centerView = new canvas.app.battle.view.CenterView(this);
    this.effectsP1 = new canvas.app.battle.view.PersEffects(42, 69, true, this);
    this.effectsP2 = new canvas.app.battle.view.PersEffects(402, 69, false, this);
    this.hpmp = new canvas.app.battle.view.HpMpView();
    this.persNick = new canvas.app.battle.view.NickView();
    this.oppNick = new canvas.app.battle.view.NickView();
    this.persLevel = new canvas.app.battle.view.LevelView();
    this.oppLevel = new canvas.app.battle.view.LevelView();
    this.totalDamage = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_9, 16697738, 70, 17, "center");
    this.topTimer = new canvas.app.battle.view.TimerView();
    this.errorPopup = new canvas.app.battle.view.ErrorPopup();
    this.mainPopup = new canvas.app.battle.view.MainPopup(this.baseLnk);
    this.messagePopup = new canvas.app.battle.view.MessagePopup();
    this.comboView = new canvas.app.battle.view.ComboView();
    this.bowPanel = new canvas.app.battle.view.BowPanel();
	
	
	this.topImage.scale.set(1, 1);
	this.damageText.scale.set(1, 1);
	this.soundView.scale.set(1, 1);
	this.centerView.scale.set(1, 1);
	this.effectsP1.scale.set(1, 1);
	this.effectsP2.scale.set(1, 1);
	this.hpmp.scale.set(1, 1);
	this.persNick.scale.set(1, 1);
	this.oppNick.scale.set(1, 1);
	this.persLevel.scale.set(1, 1);
	this.oppLevel.scale.set(1, 1); //хуй
	this.totalDamage.scale.set(1, 1);
	this.errorPopup.scale.set(1, 1);
	this.mainPopup.scale.set(1, 1);
	this.comboView.scale.set(1, 1);
	this.frontImage.scale.set(1, 1);
	this.frontImage2.scale.set(1, 1);
	this.bowPanel.scale.set(1, 1);
	
	//Хаем качественно, а не мыльно
	
	this.players.scale.set(1.25, 1.25);
   // this.player2.scale.set(1.25, 1.25);
	
	
    this.addChild(this.bgEffects);
    this.addChild(this.flagPers);
    this.addChild(this.flagOpp);
    this.flagPers.position.set(160, 260);
    this.flagOpp.position.set(310, 260);
    this.players.addChild(this.bgSpells);
    this.players.addChild(this.player1);
    this.players.addChild(this.player2);
    this.players.addChild(this.spells);
    this.player1.position.set(-15, 40);
    this.player2.position.set(463, 40);
    this.player2.scale.set(-1, 1);
    this.addChild(this.players);
    this.addChild(this.effects);
    this.effects.position.set(-1, 0);
	this.effectsP1.position.set(105, 72);
	this.effectsP2.position.set(460, 72);
	
    this.addChild(this.flagButton);
    this.flagButton.visible = false;
    this.addChild(this.frontImage);
    this.addChild(this.frontImage2);
    this.frontImage.x = -13;
	this.frontImage.y = -2;
	
    this.frontImage2.x = -13;
	this.frontImage2.y = -2;
    this.frontImage2.visible = false;
    this.addChild(this.topImage);
    this.topImage.position.set(90, -4);
    this.addChild(this.damageText);
    this.damageText.position.set(243, 38);
	this.hpmp.position.set(71, 0);
	this.addChild(this.hpmp);
    this.addChild(this.soundView);
    this.soundView.position.set(8, 424);
    this.addChild(this.effectsP1);
    this.addChild(this.effectsP2);
    this.addChild(this.centerView);
    this.centerView.position.set(282, 256);
    this.addChild(this.persNick);
    this.persNick.position.set(205, 15);
    this.addChild(this.oppNick);
    this.oppNick.position.set(380, 15);
    this.addChild(this.persLevel);
    this.persLevel.position.set(105, 3);
    this.addChild(this.oppLevel);
    this.oppLevel.position.set(445, 3);
    this.addChild(this.totalDamage);
    this.totalDamage.position.set(257, 53);
    this.addChild(this.topTimer);
    this.topTimer.position.set(265, 75);
    this.errorPopup.position.set(0, 85);
    this.mainPopup.position.set(147, 110);
    this.messagePopup.position.set(conf.popupPos ? conf.popupPos.x : 82, conf.popupPos ? conf.popupPos.y : 110);
    if (canvas.app.battle.model.showComboRender) this.addChild(this.comboView);
    this.comboView.y = 408;
    this.bowPanel.position.set(70, 437);
    this.addChild(this.bowPanel);
    this.bowPanel.locked = true;
    this.showBowPanel(false);
    if (canvas.app.battle.model.shadowAvailable) {
        this.shadow = new canvas.app.battle.view.ShadowIcon();
        this.addChild(this.shadow);
        this.shadow.position.set(-3, 19);
    }
    this.updateTotalDamage();
    this.msk = new canvas.px.Mask(canvas.app.battle.model.width - 20, canvas.app.battle.model.height - 140);
    this.msk.y = 10;
    this.addChild(this.msk);
    this.players.mask = this.spells.mask = this.bgSpells.mask = this.effects.mask = this.bgEffects.mask = this.msk;
    this.mainPopupContainer = new canvas.px.Container();
    this.addChild(this.mainPopupContainer);
    this.messagePopup.mousedown = this.popupDownHandler.bind(this);
};
canvas.app.battle.View.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.battle.View.prototype.popupDownHandler = function (mouseData) {
    var conf = canvas.app.battle.model;
    if (canvas.Functions.findParent(this.messagePopup.headLabel, mouseData.target)) {
        canvas.EventManager.addEventListener(canvas.Event.STAGE_MOUSE_UP, null, this.popupUpHandler, this);
        canvas.EventManager.addEventListener(canvas.Event.STAGE_MOUSE_OUT, null, this.popupUpHandler, this);
        this.messagePopup.startDrag(
            new canvas.px.Point(mouseData.data.originalEvent.x - this.messagePopup.x - 10, mouseData.data.originalEvent.y - this.messagePopup.y),
            new canvas.px.Rectangle(0, 0, conf.width - 300, conf.height - 200),
            new canvas.px.Point(mouseData.data.originalEvent.clientX, mouseData.data.originalEvent.clientY)
        );
    }
};
canvas.app.battle.View.prototype.popupUpHandler = function (e) {
    canvas.EventManager.removeEventListener(canvas.Event.STAGE_MOUSE_UP, null, this.popupUpHandler, this);
    canvas.EventManager.removeEventListener(canvas.Event.STAGE_MOUSE_OUT, null, this.popupUpHandler, this);
    var conf = canvas.app.battle.model;
    this.messagePopup.stopDrag();
    conf.popupPos = new canvas.px.Point(this.messagePopup.x, this.messagePopup.y);
};
canvas.app.battle.View.prototype.updateFocus = function () {
    var conf = canvas.app.battle.model;
    this.persLevel.checked = conf.persId == conf.persInFocus;
    this.oppLevel.checked = conf.oppId == conf.persInFocus;
};
canvas.app.battle.View.prototype.updateTotalDamage = function () {
    this.totalDamage.text = canvas.app.battle.model.totalDamage;
};
canvas.app.battle.View.prototype.showErrorPopup = function (text) {
    this.addChild(this.errorPopup);
    this.errorPopup.activate(text);
};
canvas.app.battle.View.prototype.showMainPopup = function (state, error_code, str_head, str_body) {
    this.mainPopupContainer.addChild(this.mainPopup);
    this.mainPopup.activate(state, error_code, str_head, str_body);
};
canvas.app.battle.View.prototype.showMessagePopup = function (mode, headerLabel, bodyLabel, yesFunc, yesFuncParams, acceptLabel, banLabel, cancelLabel, num) {
    this.addChild(this.messagePopup);
    this.messagePopup.activate(mode, yesFunc, yesFuncParams);
    this.messagePopup.setHeader(headerLabel);
    this.messagePopup.setBody(bodyLabel);
    if (typeof num != "undefined") this.messagePopup.num = num;
    if (typeof acceptLabel != "undefined") this.messagePopup.buttonAccept.setLabel(acceptLabel);
    if (typeof banLabel != "undefined") this.messagePopup.buttonBan.setLabel(banLabel);
    if (typeof cancelLabel != "undefined") this.messagePopup.buttonCancel.setLabel(cancelLabel);
};
canvas.app.battle.View.prototype.openComboList = function () {
    if (!this.comboList) {
        this.comboList = new canvas.app.battle.view.ComboList();
    }
    if (this.comboList.parent != this) {
        this.addChild(this.comboList);
    }
};
canvas.app.battle.View.prototype.showBowPanel = function (b) {
    canvas.app.battle.model.allowBowPanel = b;
    if (b) {
        this.frontImage.visible = false;
        this.frontImage2.visible = true;
        if (!this.frontImageElement.parent) this.addChildAt(this.frontImageElement, 1);
        if (!this.bowPanelBack.parent) this.addChildAt(this.bowPanelBack, 0);
        this.bowPanel.hide();
    } else {
        this.frontImage.visible = true;
        this.frontImage2.visible = false;
        if (this.frontImageElement.parent == this) this.removeChild(this.frontImageElement);
        if (this.bowPanelBack.parent == this) this.removeChild(this.bowPanelBack);
        this.bowPanel.show();
    }
};
canvas.app.battle.View.prototype.playComboHit = function () {
    var comboHint = new canvas.app.battle.view.ComboHint();
    this.addChild(comboHint);
    comboHint.position.set(222, 110);
};
canvas.app.battle.View.prototype.showMP = function (par) {
    for (var i = 0; i < par.length; i++) {
        this.addChild(new canvas.app.battle.view.DmgFly(par[i], i));
    }
};
canvas.app.battle.View.prototype.showDmg = function (par) {
    var conf = canvas.app.battle.model;
    for (var i = 0; i < par.length; i++) {
        if ((par[i].tar == "pers" && conf.persDmgCnt < 30) || (par[i].tar == "opp" && conf.oppDmgCnt < 30) || par[i].kick != canvas.app.battle.Const.DMG_KICK_WOUND) {
            this.addChild(new canvas.app.battle.view.DmgFly(par[i], i));
        } else {
            canvas.app.battle.log("showDmg: temp skip dmg_fly");
        }
        if (par[i].new_tar_HP != null) {
            switch (par[i].tar) {
                case "pers":
                    this.hpmp.setHpPers(conf.persHp, conf.persHpMax);
                    canvas.EventManager.dispatchEvent(canvas.app.battle.Event.UPDATE_PERS_HP_LVL);
                    break;
                case "opp":
                    this.hpmp.setHpOpp(conf.oppHp, conf.oppHpMax);
                    if (par[i].my_dmg) {
                        if (par[i].kick != canvas.app.battle.Const.DMG_KICK_RESIST) {
                            if (!conf.watchFight && !par[i].dont_inc_totDMG) {
                                conf.totalDamage -= par[i].val;
                            }
                            canvas.app.battle.log("showDmg: <b>*** damage " + String(-par[i].val) + "  totDMG " + String(conf.totalDamage) + "</b>");
                            this.updateTotalDamage();
                        }
                    }
                    break;
                default:
                    canvas.app.battle.log("showDmg: WARN: unknown tar = " + String(par[i].tar), 16711680);
            }
        }
    }
};
canvas.app.battle.View.prototype.addEffect = function (type, xx, yy, scale, bg) {
    if (typeof bg == "undefined") bg = false;
    var mc = new canvas.px.MovieClip(canvas.Config.spellsPath + type);
    mc.frameEvent = canvas.app.battle.Event.ENTER_FRAME;
    mc.SND = this.baseLnk.sndPlay;
    mc.position.set(xx, yy);
    mc.scale.x = scale;
    mc.autoDestroy = true;
    if (bg) {
        this.bgEffects.addChild(mc);
    } else {
        this.effects.addChild(mc);
    }
};
canvas.app.battle.View.prototype.addSpellAnim = function (xx, id) {
    var tmp_spell;
    while (this.spells.children.length >= 3) {
        tmp_spell = this.spells.getChildAt(0);
        tmp_spell.destroy();
    }
    var mc = new canvas.px.MovieClip(canvas.Config.spellsPath + id);
    mc.frameEvent = canvas.app.battle.Event.ENTER_FRAME;
    mc.SND = this.baseLnk.sndPlay;
    mc.position.set(xx, 155);
    mc.autoDestroy = true;
    this.spells.addChild(mc);
};
canvas.app.battle.View.prototype.drawFlagCd = function (t) {
    var i = 0;
    this.flagCdGraphics.clear();
    this.flagCdGraphics.beginFill(5579281, 0.5);
    this.flagCdGraphics.moveTo(27, 23);
    this.flagCdGraphics.lineTo(27, 0);
    t = t * (9.42 - 3.14);
    for (i = 3.14; i < t + 3.14; i = i + 0.01) {
        this.flagCdGraphics.lineTo(Math.sin(i) * 12 + 27, Math.cos(i) * 12 + 23);
    }
    this.flagCdGraphics.endFill();
};
canvas.app.battle.Parser = function (model) {
    this.model = model;
};
canvas.app.battle.Parser.prototype.paksParse = function () {
    canvas.app.battle.log("parsePaks: paksEveCache.length=" + this.model.paksEveCache.length + ", oppId=" + this.model.oppId);
    if (this.model.paksReady == false) {
        canvas.app.battle.log("paksParse root skip", "#666666");
        return;
    }
    if (this.model.paksCmdCache.length == 0) {
        if (this.model.answersWait > 0) {
            canvas.app.battle.log("paksParse event skip (by waiting cmd answ) " + this.model.answersWait, "#666666");
            return;
        }
        if (this.model.paksEveCache.length == 0) {
            canvas.app.battle.log("events cache empty", "#666666");
            return;
        }
        this.model.paksReady = false;
        this.parseEvePaks();
    } else {
        this.model.paksReady = false;
        this.parseCmdPaks();
    }
};
canvas.app.battle.Parser.prototype.parseEvePaks = function () {
    canvas.app.battle.log("parseEvePaks");
    var pid = this.model.paksEveCache[0][0];
    var params = this.model.paksEveCache[0][1];
    var rid = this.model.paksEveCache[0][2];
    var parser = this.model.serverParser;
    this.model.currentEveId = parseInt(pid);
    parser.params = [].concat(params);
    var element = this.model.paksEveCache.shift();
    if (parser.params.length > 0) {
        var code = parser.params[1].val;
        canvas.app.battle.log("=EVE (id=" + String(pid) + ") " + parser.strEve[code] + "(" + String(code) + ")", 39168);
        canvas.EventManager.dispatchEvent(canvas.app.battle.Event.EVENT_EVE, null, { rid: rid, code: code, event: element });
    } else {
        canvas.EventManager.dispatchEvent(canvas.app.battle.Event.EVENT_EVE, null, { rid: 0, code: -1, event: element });
    }
};
canvas.app.battle.Parser.prototype.parseCmdPaks = function () {
    canvas.app.battle.log("parseCmdPaks");
    var pid = this.model.paksCmdCache[0][0];
    var params = this.model.paksCmdCache[0][1];
    var parser = this.model.serverParser;
    parser.params = [].concat(params);
    var element = this.model.paksCmdCache.shift();
    this.model.answersWait--;
    var code = parser.params[0].val;
    canvas.app.battle.log("=CMD (id=" + pid + ") " + parser.strCmd[code] + "(" + code + ")", 39168);
    var curRet = parser.params[1].val;
    if (curRet != 0 && code != parser.FS_SCCL_EFFECT_SWAP_SUBSLOT) {
        canvas.app.battle.log("<b>Err: " + parser.strRet[curRet] + "(" + curRet + ") Cmd=" + code + "</b>", 16711680);
        canvas.EventManager.dispatchEvent(canvas.app.battle.Event.EVENT_CMD_ERROR, null, { code: code, command: element });
    } else {
        canvas.EventManager.dispatchEvent(canvas.app.battle.Event.EVENT_CMD, null, { code: code, command: element });
    }
};
canvas.app.battle.Parser.prototype.parseAdditionalEffectsData = function (eff_type, eff_data) {
    var conf = canvas.app.battle.Const;
    var a1 = eff_data.split("&");
    var eff_name;
    var out = [];
    for (var i0 = 0; i0 < a1.length; i0++) {
        var pair = a1[i0].split("=");
        if (pair.length != 2) {
            canvas.app.battle.log('parseAdditionalEffectsData ERR: invalid data format "' + a1[i0] + '"', 16711680);
            return [];
        }
        eff_name = pair[0];
        if (eff_type == eff_name) {
            switch (eff_name) {
                case conf.AEFF_ABSORB:
                    var nums = pair[1].split(",");
                    for (var i = 0; i < nums.length; i++) {
                        out.push("ABSORB_" + nums[i].toString());
                    }
                    break;
                case conf.AEFF_SPELL:
                case conf.AEFF_SPW:
                case conf.AEFF_SPD:
                case conf.AEFF_CH:
                    out.push(pair[1]);
                    break;
                default:
                    canvas.app.battle.log('parseAdditionalEffectsData ERR: nuhandled eff_type "' + eff_type + '"', 16711680);
                    return [];
                    break;
            }
        }
    }
    return out;
};
canvas.app.battle.engine.Connection = function (base_lnk) {
    this.baseLnk = base_lnk;
    this.inited = false;
    this.socPacketSize = 0;
    if (canvas.app.battle.model.proxy) {
        this.initProxy();
    }
};
canvas.app.battle.engine.Connection.prototype.tryConnect = function () {
    if (!canvas.app.battle.model.proxy) {
        this.ws = new WSProxy({ onConnect: this.wsConnectHandler.bind(this), onMessage: this.wsMessageHandler.bind(this) });
        this.ws.connect({ logEnabled: false, ws: { host: canvas.app.battle.model.wsHost }, fs: { host: canvas.app.battle.model.host, port: canvas.app.battle.model.port } });
    } else {
        this.proxyReady = true;
        canvas.app.battle.model.online = true;
        this.startProxy();
        this.baseLnk.mainIteration();
    }
};
canvas.app.battle.engine.Connection.prototype.initProxy = function () {
    this.proxyAddr = "http://" + canvas.app.battle.model.proxyHost + "/";
    this.proxyLoader = new canvas.utils.URLRequest();
    canvas.EventManager.addEventListener(canvas.utils.URLRequestEvent.EVENT_COMPLETE, this.proxyLoader, this.proxyCompleteHandler, this);
    canvas.EventManager.addEventListener(canvas.utils.URLRequestEvent.EVENT_ERROR, this.proxyLoader, this.proxyErrorHandler, this);
    this.proxyReady = true;
    this.proxyQueue = [];
    this.startProxy();
};
canvas.app.battle.engine.Connection.prototype.startProxy = function () {
    this.stopProxy();
    this.proxyInterval = setInterval(this.proxySend.bind(this), 1e3);
    this.proxySend();
};
canvas.app.battle.engine.Connection.prototype.stopProxy = function () {
    if (this.proxyInterval) {
        clearInterval(this.proxyInterval);
    }
};
canvas.app.battle.engine.Connection.prototype.proxySend = function () {
    if (this.proxyReady) {
        this.proxyReady = false;
        if (this.proxyQueue.length > 0) {
            this.lastProxyPack = this.proxyQueue.shift();
        } else {
            this.lastProxyPack = this.proxyAddr + "req" + Math.round(Math.random() * 9e4).toString() + "?" + canvas.app.battle.model.sid + "_" + canvas.app.battle.model.fightId;
        }
        this.proxyLoader.load(this.lastProxyPack);
    }
};
canvas.app.battle.engine.Connection.prototype.proxyCompleteHandler = function () {
    this.proxyReady = true;
    var t = this.proxyLoader.request.responseText.split("|", 3);
    var vars = t[1];
    canvas.app.battle.log("proxyCompleteHandler data(len=" + vars.length + ")[" + vars + "]");
    if (vars.length > 0) {
        var ar = vars.split(":");
        for (var i = 0; i < ar.length; i++) {
            this.recvData(ar[i]);
        }
        this.proxySend();
    } else if (!this.inited) {
        this.proxySend();
    }
};
canvas.app.battle.engine.Connection.prototype.recvData = function (dat) {
    var parser = canvas.app.battle.model.serverParser;
    var success = parser.unpack(dat);
    var logString = "";
    for (var i = 0; i < parser.params.length; i++) {
        logString += "|" + parser.params[i].val;
    }
    canvas.app.battle.log("conn:recvData (" + logString + ")");
    if (success) {
        var curCmd = parser.params[0].val;
        if (curCmd == parser.FS_SC_NONE) {
            var curEvent = parser.params[1].val;
            canvas.EventManager.dispatchEvent(canvas.app.battle.Event.ADD_EVENT, null, { params: parser.params, code: curEvent });
        } else {
            canvas.EventManager.dispatchEvent(canvas.app.battle.Event.ADD_COMMAND, null, { params: parser.params, code: curCmd });
        }
    } else {
        canvas.app.battle.log("BAD PAKET (" + dat + ")", 16711680);
    }
};
canvas.app.battle.engine.Connection.prototype.sendPak = function (dat) {
    canvas.app.battle.log("conn: send [" + dat + "]");
    canvas.app.battle.model.answersWait++;
    if (!this.proxyAddr) {
        if (canvas.app.battle.model.online) {
            this.ws.send(dat);
        } else {
            this.baseLnk.answersWait--;
        }
    } else {
        var addr = this.proxyAddr + "req" + Math.round(Math.random() * 1e4).toString() + "?" + canvas.app.battle.model.sid + "_" + canvas.app.battle.model.fightId + "&" + dat;
        this.proxyQueue.push(addr);
        this.proxySend();
    }
};
canvas.app.battle.engine.Connection.prototype.proxyErrorHandler = function () {
    canvas.app.battle.log("conn:proxyErrorHandler: url=" + this.lastProxyPack, 16711680);
    this.closing();
};
canvas.app.battle.engine.Connection.prototype.closing = function () {
    canvas.app.battle.model.online = false;
    this.stopTransfers();
    canvas.EventManager.dispatchEvent(canvas.app.battle.Event.CLEAR_SYNC_TIMEOUT);
    canvas.EventManager.dispatchEvent(canvas.app.battle.Event.ADD_EVENT, null, { params: [], code: 0 });
};
canvas.app.battle.engine.Connection.prototype.stopTransfers = function () {
    canvas.app.battle.model.online = false;
    if (this.proxyAddr) {
        this.stopProxy();
    } else {
        this.ws.destroy();
    }
    canvas.app.battle.model.answersWait = 0;
};
canvas.app.battle.engine.Connection.prototype.wsConnectHandler = function () {
    canvas.app.battle.model.online = true;
    this.baseLnk.mainIteration();
};
canvas.app.battle.engine.Connection.prototype.wsMessageHandler = function (data) {
    if (!canvas.app.battle.model.online) return;
    this.recvData(data);
};
canvas.app.battle.engine.ServerParser = function () {
    this.PT_INVALID = 0;
    this.PT_INT = 1;
    this.PT_FIXED = 2;
    this.PT_STRING = 3;
    this.PT_RAW = 4;
    this.PT_NINT = 5;
    this.PT_NFIXED = 6;
    this.PT_SHORTINT = 7;
    this.PT_NSHORTINT = 8;
    this.PT_BIGINT = 9;
    this.PT_NBIGINT = 10;
    this.FS_SC_NONE = 0;
    this.FS_SC_SYNC_TIME = 1;
    this.FS_SCCL_INIT = 101;
    this.FS_SCCL_STATE = 102;
    this.FS_SCCL_PERS_INFO = 103;
    this.FS_SCCL_PERS_PARTS = 104;
    this.FS_SCCL_ATTACK = 105;
    this.FS_SCCL_FIGHT_STATE = 106;
    this.FS_SCCL_EFFECTS = 107;
    this.FS_SCCL_USE_EFFECT = 108;
    this.FS_SCCL_CHANGE_MODE = 109;
    this.FS_SCCL_PERS_ACT_EFFECTS = 110;
    this.FS_SCCL_WATCH_FIGHT = 111;
    this.FS_SCCL_EFFECT_SWAP_SUBSLOT = 112;
    this.FS_SCCL_DROP_EFFECT = 113;
    this.FS_SCCL_SKIP_TURN = 114;
    this.FS_SCCL_SEND_MSG = 201;
    this.FS_SCCL_PERS_SUBSCRIBE = 202;
    this.FS_SS_OK = 0;
    this.FS_SS_WRONG_CMD = -1;
    this.FS_SS_WRONG_ARGS = -2;
    this.FS_SS_WRONG_DATA = -3;
    this.FS_SS_WRONG_STATE = -4;
    this.FS_SS_NO_AUTH = -5;
    this.FS_SS_INT_ERROR = -6;
    this.FS_PE_SRVSHUTDOWN = 1;
    this.FS_PE_OPPWAIT = 101;
    this.FS_PE_OPPNEW = 102;
    this.FS_PE_ATTACKNOW = 103;
    this.FS_PE_ATTACKWAIT = 104;
    this.FS_PE_ATTACK = 105;
    this.FS_PE_ATTACKTIMEOUT = 106;
    this.FS_PE_FIGHTLOG = 107;
    this.FS_PE_FIGHTOVER = 108;
    this.FS_PE_FIGHTSTATE = 109;
    this.FS_PE_EFFECTUSE = 110;
    this.FS_PE_EFFECTAPPLY = 111;
    this.FS_PE_DAMAGE = 112;
    this.FS_PE_DEATH = 113;
    this.FS_PE_MANNACONSUM = 114;
    this.FS_PE_MYFIGHTRETURN = 115;
    this.FS_PE_EFFUPDATE = 116;
    this.FS_PE_ENERGYCONSUM = 117;
    this.FS_PE_ENERGYREGEN = 118;
    this.FS_PE_ARROWCONSUM = 119;
    this.FS_PE_EFFSWAP = 120;
    this.FS_PE_RESETCOMBO = 121;
    this.FS_PE_NEWPERS = 122;
    this.FS_PE_DEADCNT = 123;
    this.FS_PE_FIGHTLAUNCH = 124;
    this.FS_PE_MSG = 201;
    this.FS_PE_CDDEC = 202;
    this.FS_PE_CAPTURE_REAL_TIME = { 103: true, 104: true };
    this.strEve = [];
    this.strCmd = [];
    this.strRet = [];
    this.strEve[this.FS_PE_SRVSHUTDOWN] = "FS_PE_SRVSHUTDOWN";
    this.strEve[this.FS_PE_OPPWAIT] = "FS_PE_OPPWAIT";
    this.strEve[this.FS_PE_OPPNEW] = "FS_PE_OPPNEW";
    this.strEve[this.FS_PE_ATTACKNOW] = "FS_PE_ATTACKNOW";
    this.strEve[this.FS_PE_ATTACKWAIT] = "FS_PE_ATTACKWAIT";
    this.strEve[this.FS_PE_ATTACK] = "FS_PE_ATTACK";
    this.strEve[this.FS_PE_ATTACKTIMEOUT] = "FS_PE_ATTACKTIMEOUT";
    this.strEve[this.FS_PE_FIGHTLOG] = "FS_PE_FIGHTLOG";
    this.strEve[this.FS_PE_FIGHTOVER] = "FS_PE_FIGHTOVER";
    this.strEve[this.FS_PE_FIGHTSTATE] = "FS_PE_FIGHTSTATE";
    this.strEve[this.FS_PE_EFFECTUSE] = "FS_PE_EFFECTUSE";
    this.strEve[this.FS_PE_EFFECTAPPLY] = "FS_PE_EFFECTAPPLY";
    this.strEve[this.FS_PE_DAMAGE] = "FS_PE_DAMAGE";
    this.strEve[this.FS_PE_DEATH] = "FS_PE_DEATH";
    this.strEve[this.FS_PE_MANNACONSUM] = "FS_PE_MANNACONSUM";
    this.strCmd[this.FS_PE_MYFIGHTRETURN] = "FS_PE_MYFIGHTRETURN";
    this.strEve[this.FS_PE_EFFUPDATE] = "FS_PE_EFFUPDATE";
    this.strEve[this.FS_PE_ENERGYCONSUM] = "FS_PE_ENERGYCONSUM";
    this.strEve[this.FS_PE_ENERGYREGEN] = "FS_PE_ENERGYREGEN";
    this.strEve[this.FS_PE_ARROWCONSUM] = "FS_PE_ARROWCONSUM";
    this.strEve[this.FS_PE_EFFSWAP] = "FS_PE_EFFSWAP";
    this.strEve[this.FS_PE_RESETCOMBO] = "FS_PE_RESETCOMBO";
    this.strEve[this.FS_PE_NEWPERS] = "FS_PE_NEWPERS";
    this.strEve[this.FS_PE_DEADCNT] = "FS_PE_DEADCNT";
    this.strEve[this.FS_PE_MSG] = "FS_PE_MSG";
    this.strEve[this.FS_PE_CDDEC] = "FS_PE_CDDEC";
    this.strCmd[this.FS_SCCL_INIT] = "FS_SCCL_INIT";
    this.strCmd[this.FS_SCCL_STATE] = "FS_SCCL_STATE";
    this.strCmd[this.FS_SCCL_PERS_INFO] = "FS_SCCL_PERS_INFO";
    this.strCmd[this.FS_SCCL_PERS_PARTS] = "FS_SCCL_PERS_PARTS";
    this.strCmd[this.FS_SC_SYNC_TIME] = "FS_SC_SYNC_TIME";
    this.strCmd[this.FS_SCCL_ATTACK] = "FS_SCCL_ATTACK";
    this.strCmd[this.FS_SCCL_FIGHT_STATE] = "FS_SCCL_FIGHT_STATE";
    this.strCmd[this.FS_SCCL_EFFECTS] = "FS_SCCL_EFFECTS";
    this.strCmd[this.FS_SCCL_USE_EFFECT] = "FS_SCCL_USE_EFFECT";
    this.strCmd[this.FS_SCCL_CHANGE_MODE] = "FS_SCCL_CHANGE_MODE";
    this.strCmd[this.FS_SCCL_PERS_ACT_EFFECTS] = "FS_SCCL_PERS_ACT_EFFECTS";
    this.strCmd[this.FS_SCCL_SEND_MSG] = "FS_SCCL_SEND_MSG";
    this.strCmd[this.FS_SCCL_WATCH_FIGHT] = "FS_SCCL_WATCH_FIGHT";
    this.strCmd[this.FS_SCCL_EFFECT_SWAP_SUBSLOT] = "FS_SCCL_EFFECT_SWAP_SUBSLOT";
    this.strCmd[this.FS_SCCL_DROP_EFFECT] = "FS_SCCL_DROP_EFFECT";
    this.strCmd[this.FS_SCCL_SKIP_TURN] = "FS_SCCL_SKIP_TURN";
    this.strCmd[this.FS_PE_MYFIGHTRETURN] = "FS_PE_MYFIGHTRETURN";
    this.strCmd[this.FS_SCCL_PERS_SUBSCRIBE] = "FS_SCCL_PERS_SUBSCRIBE";
    this.strRet[this.FS_SS_OK] = "FS_SS_OK";
    this.strRet[this.FS_SS_WRONG_CMD] = "FS_SS_WRONG_CMD";
    this.strRet[this.FS_SS_WRONG_ARGS] = "FS_SS_WRONG_ARGS";
    this.strRet[this.FS_SS_WRONG_DATA] = "FS_SS_WRONG_DATA";
    this.strRet[this.FS_SS_WRONG_STATE] = "FS_SS_WRONG_STATE";
    this.strRet[this.FS_SS_NO_AUTH] = "FS_SS_NO_AUTH";
    this.strRet[this.FS_SS_INT_ERROR] = "FS_SS_INT_ERROR";
    this.sprintfArr = [
        "",
        "",
        "",
        "",
        "0000",
        "000",
        "00",
        "0",
        "",
        "0000000",
        "000000",
        "00000",
        "0000",
        "000",
        "00",
        "0",
        "",
        "000000000000000",
        "00000000000000",
        "0000000000000",
        "000000000000",
        "00000000000",
        "0000000000",
        "000000000",
        "00000000",
        "0000000",
        "000000",
        "00000",
        "0000",
        "000",
        "00",
        "0",
        "",
    ];
};
canvas.app.battle.engine.ServerParser.prototype.sprintf = function (len, val) {
    if (len == 4 || len == 8 || len == 16) {
        var myHex = val.toString(16);
        return this.sprintfArr[myHex.length + len] + myHex;
    }
    return null;
};
canvas.app.battle.engine.ServerParser.prototype.pack = function (myParams) {
    this.buf = "";
    for (var g = 0; g < myParams.length; g++) {
        var myParam = myParams[g];
        if (myParam.type == this.PT_INT && myParam.val < 0) myParam.type = this.PT_NINT;
        if (myParam.type == this.PT_BIGINT && myParam.val < 0) myParam.type = this.PT_NBIGINT;
        if (myParam.type == this.PT_FIXED && myParam.val < 0) myParam.type = this.PT_NFIXED;
        this.buf += this.sprintf(4, (myParam.id << 8) + (myParam.type & 255));
        switch (myParam.type) {
            case this.PT_INT:
            case this.PT_NINT:
                this.buf += this.sprintf(8, myParam.type == this.PT_NINT ? -myParam.val : myParam.val);
                break;
            case this.PT_BIGINT:
            case this.PT_NBIGINT:
                this.buf += this.sprintf(16, myParam.type == this.PT_NBIGINT ? -myParam.val : myParam.val);
                break;
            case this.PT_FIXED:
            case this.PT_NFIXED:
                this.buf += this.sprintf(8, (myParam.type == this.PT_NFIXED ? -myParam.val : myParam.val) * 1e4);
                break;
            case this.PT_STRING:
            case this.PT_RAW:
                this.buf += this.sprintf(4, myParam.val.length) + myParam.val;
                break;
            default:
                canvas.app.battle.log("serverParser::pack Invalid param type: " + myParam.type, 16711680);
                return false;
        }
    }
    this.buf = this.sprintf(4, this.buf.length) + this.buf;
    return true;
};
canvas.app.battle.engine.ServerParser.prototype.unpack = function (myData) {
    this.params = [];
    myData = myData.substr(4);
    var myId;
    var myType;
    var myLen;
    var myVal;
    var mySize = canvas.app.battle.model.codePage ? myData.length : this.byteLenght(myData);
    var myPos = 0;
    var i;
    while (mySize > 0) {
        i = parseInt(myData.substr(myPos, 4), 16);
        myId = i >> 8;
        myType = i & 255;
        myPos += 4;
        mySize -= 4;
        switch (myType) {
            case this.PT_INT:
            case this.PT_NINT:
                myVal = parseInt(myData.substr(myPos, 8), 16);
                if (myType == this.PT_NINT) myVal = -myVal;
                myPos += 8;
                mySize -= 8;
                break;
            case this.PT_BIGINT:
            case this.PT_NBIGINT:
                myVal = parseInt(myData.substr(myPos, 16), 16);
                if (myType == this.PT_NBIGINT) myVal = -myVal;
                myPos += 16;
                mySize -= 16;
                break;
            case this.PT_SHORTINT:
            case this.PT_NSHORTINT:
                myVal = parseInt(myData.substr(myPos, 4), 16);
                if (myType == this.PT_NSHORTINT) myVal = -myVal;
                myPos += 4;
                mySize -= 4;
                break;
            case this.PT_FIXED:
            case this.PT_NFIXED:
                myVal = parseInt(myData.substr(myPos, 8), 16) / 1e4;
                if (myType == this.PT_NFIXED) myVal = -myVal;
                myPos += 8;
                mySize -= 8;
                break;
            case this.PT_STRING:
            case this.PT_RAW:
                myLen = parseInt(myData.substr(myPos, 4), 16);
                myPos += 4;
                mySize -= 4;
                myVal = "";
                if (canvas.app.battle.model.codePage) {
                    myVal = myData.substr(myPos, myLen);
                    myPos += myLen;
                    mySize -= myLen;
                } else {
                    while (myLen > 0) {
                        var st = myData.substr(myPos, 1);
                        var bytesLen = this.byteLenght(st);
                        myLen -= bytesLen;
                        myPos += 1;
                        mySize -= bytesLen;
                        myVal += st;
                    }
                }
                myVal = canvas.app.battle.model.codePage ? canvas.app.battle.model.resetString(myVal) : myVal;
                break;
            default:
                canvas.app.battle.log("serverParser: unpack Invalid param type: " + myType + " (offset: " + (myPos - 4) + ", data: " + myData + ")", 16711680);
                return false;
        }
        this.params.push({ id: myId, type: myType, val: myVal });
    }
    return true;
};
canvas.app.battle.engine.ServerParser.prototype.byteLenght = function (data) {
    var s = data.length;
    for (var i = data.length - 1; i >= 0; i--) {
        var code = data.charCodeAt(i);
        if (code > 127 && code <= 2047) s++;
        else if (code > 2047 && code <= 65535) s += 2;
        if (code >= 56320 && code <= 57343) i--;
    }
    return s;
};
canvas.app.battle.engine.MFunc = function (baseLnk) {
    this.baseLnk = baseLnk;
    this.full_g2m_answ_str = "";
    this.full_g2m_srt_buff = 0;
    this.defferedEffects = {};
};
canvas.app.battle.engine.MFunc.prototype.authorization = function () {
    var parser = canvas.app.battle.model.serverParser;
    var conn = this.baseLnk.conn;
    var conf = canvas.app.battle.model;
    canvas.app.battle.log("mFunc authorization: persId=" + conf.persId + ", fightId = " + conf.fightId, 10027008);
    parser.pack([
        { id: 0, type: parser.PT_INT, val: parser.FS_SCCL_INIT },
        { id: 0, type: parser.PT_INT, val: conf.persId },
        { id: 0, type: parser.PT_BIGINT, val: conf.fightId },
        { id: 0, type: parser.PT_INT, val: conf.akey },
    ]);
    conn.sendPak(parser.buf);
};
canvas.app.battle.engine.MFunc.prototype.persState = function (par, pid) {
    var parser = canvas.app.battle.model.serverParser;
    var conn = this.baseLnk.conn;
    var conf = canvas.app.battle.model;
    canvas.app.battle.log("mFunc persState: persId=" + pid + ", par=" + par, 10027008);
    if (!pid) {
        parser.pack([{ id: 0, type: parser.PT_INT, val: parser.FS_SCCL_STATE }]);
    } else {
        parser.pack([
            { id: 0, type: parser.PT_INT, val: parser.FS_SCCL_STATE },
            { id: 0, type: parser.PT_INT, val: pid },
        ]);
    }
    conn.sendPak(parser.buf);
};
canvas.app.battle.engine.MFunc.prototype.persInfo = function (reqId) {
    var parser = canvas.app.battle.model.serverParser;
    var conn = this.baseLnk.conn;
    var conf = canvas.app.battle.model;
    canvas.app.battle.log("mFunc persInfo: persId=" + conf.persId + ", reqId=" + reqId, 10027008);
    parser.pack([
        { id: 0, type: parser.PT_INT, val: parser.FS_SCCL_PERS_INFO },
        { id: 0, type: parser.PT_INT, val: reqId },
    ]);
    conn.sendPak(parser.buf);
};
canvas.app.battle.engine.MFunc.prototype.persEffects = function () {
    var parser = canvas.app.battle.model.serverParser;
    var conn = this.baseLnk.conn;
    var conf = canvas.app.battle.model;
    canvas.app.battle.log("mFunc persEffects: ", 10027008);
    parser.pack([{ id: 0, type: parser.PT_INT, val: parser.FS_SCCL_EFFECTS }]);
    conn.sendPak(parser.buf);
};
canvas.app.battle.engine.MFunc.prototype.effectList = function (persId) {
    var parser = canvas.app.battle.model.serverParser;
    var conn = this.baseLnk.conn;
    var conf = canvas.app.battle.model;
    canvas.app.battle.log("mFunc effectList: persId=" + persId, 10027008);
    parser.pack([
        { id: 0, type: parser.PT_INT, val: parser.FS_SCCL_PERS_ACT_EFFECTS },
        { id: 0, type: parser.PT_INT, val: persId },
    ]);
    conn.sendPak(parser.buf);
};
canvas.app.battle.engine.MFunc.prototype.persParts = function (reqId) {
    var parser = canvas.app.battle.model.serverParser;
    var conn = this.baseLnk.conn;
    var conf = canvas.app.battle.model;
    canvas.app.battle.log("mFunc persState: persId=" + conf.persId + ", reqId=" + reqId, 10027008);
    parser.pack([
        { id: 0, type: parser.PT_INT, val: parser.FS_SCCL_PERS_PARTS },
        { id: 0, type: parser.PT_INT, val: reqId },
    ]);
    conn.sendPak(parser.buf);
};
canvas.app.battle.engine.MFunc.prototype.attack = function (part) {
    var parser = canvas.app.battle.model.serverParser;
    var conn = this.baseLnk.conn;
    var conf = canvas.app.battle.model;
    canvas.app.battle.log("mFunc attack: part=" + part, 10027008);
    parser.pack([
        { id: 0, type: parser.PT_INT, val: parser.FS_SCCL_ATTACK },
        { id: 0, type: parser.PT_INT, val: part },
        { id: 0, type: parser.PT_INT, val: 0 },
    ]);
    conn.sendPak(parser.buf);
};
canvas.app.battle.engine.MFunc.prototype.fightState = function (persId, startIdx) {
    var parser = canvas.app.battle.model.serverParser;
    var conn = this.baseLnk.conn;
    var conf = canvas.app.battle.model;
    if (persId == 0 && startIdx == 0 && conf.fightStateExecuting) {
        canvas.app.battle.log("mFunc persState: already exetuting... exit");
        return;
    }
    canvas.app.battle.log("mFunc fightState: persId=" + persId + ", startIdx=" + startIdx, 10027008);
    if (startIdx == 0) {
        this.full_g2m_answ_str = "";
        this.full_g2m_srt_buff = 0;
    }
    parser.pack([
        { id: 0, type: parser.PT_INT, val: parser.FS_SCCL_FIGHT_STATE },
        { id: 0, type: parser.PT_INT, val: persId },
        { id: 0, type: parser.PT_INT, val: startIdx },
    ]);
    conn.sendPak(parser.buf);
    conf.fightStateExecuting = true;
};
canvas.app.battle.engine.MFunc.prototype.persStateRequest = function (startIndex) {
    if (typeof startIndex == "undefined") startIndex = 0;
    var parser = canvas.app.battle.model.serverParser;
    var conn = this.baseLnk.conn;
    var conf = canvas.app.battle.model;
    canvas.app.battle.log("mFunc persStateRequest: startIndex=" + startIndex + ", ids=" + conf.persVisible + ", idsPrev=" + conf.persVisiblePrev, 10027008);
    if (!conf.persVisible || (conf.persVisiblePrev && conf.persVisible.sort().join(",") == conf.persVisiblePrev.sort().join(","))) return;
    if (!conf.persVisible) return;
    conf.persVisiblePrev = conf.persVisible;
    if (startIndex == 0) {
        this.small_g2m_answ_str1 = "";
        this.small_g2m_answ_str2 = "";
        this.small_g2m_srt_buff = 0;
    }
    var a = [
        { id: 0, type: parser.PT_INT, val: parser.FS_SCCL_PERS_SUBSCRIBE },
        { id: 0, type: parser.PT_INT, val: 0 },
    ];
    parser.pack(a);
    conn.sendPak(parser.buf);
};
canvas.app.battle.engine.MFunc.prototype.useEffect = function (EffId, tId, tTeam) {
    var parser = canvas.app.battle.model.serverParser;
    var conn = this.baseLnk.conn;
    var conf = canvas.app.battle.model;
    if (typeof tId == "undefined") tId = -1;
    if (typeof tTeam == "undefined") tTeam = -1;
    var targetId;
    var targetTeam;
    var abil_flgs;
    if (conf.abilsFlags[EffId]) {
        abil_flgs = conf.abilsFlags[EffId];
        canvas.app.battle.log("mFunc useEffect: abil_flgs: " + abil_flgs.toString(16) + "(16) " + abil_flgs.toString(2) + "(2)", 10066329);
    } else {
        canvas.app.battle.log("mFunc useEffect: ERR: flags is null for this abil", 16711680);
        return;
    }
    if (tId != -1 && tTeam != -1) {
        targetId = tId;
        targetTeam = tTeam;
        if (conf.persRace != conf.memDat[targetId].kind) {
            canvas.EventManager.dispatchEvent(canvas.app.battle.Event.SHOW_ERROR, null, canvas.Translator.getText(23));
            return;
        }
    } else {
        if (conf.persInFocus != 0) {
            targetId = conf.persInFocus;
            if (conf.memDat[targetId] != null) {
                targetTeam = conf.memDat[targetId].team;
                if (conf.testFlag(abil_flgs, canvas.app.battle.Const.FS_PF_RACESELF)) {
                    if (conf.memDat[targetId].hasOwnProperty("kind")) {
                        if (conf.persRace != conf.memDat[targetId].kind) {
                            canvas.EventManager.dispatchEvent(canvas.app.battle.Event.SHOW_ERROR, null, canvas.Translator.getText(23));
                            return;
                        }
                    } else {
                        this.defferedEffects[targetId] = { tarId: targetId, tarTeam: targetTeam, effId: EffId };
                        this.persInfo(targetId);
                        return;
                    }
                }
            } else {
                canvas.app.battle.log("mFunc useEffect: ERR: have no data for targetId " + targetId, 16711680);
                return;
            }
        } else {
            targetId = conf.testFlag(abil_flgs, canvas.app.battle.Const.FS_PEF_BOW) ? conf.oppId : conf.persId;
            targetTeam = conf.persTeam;
        }
    }
    if (conf.memDat[targetId] && conf.testFlag(abil_flgs, canvas.app.battle.Const.FS_PEF_BOW) && conf.memDat[targetId].status == canvas.app.battle.Const.STATUS_DEAD) {
        canvas.EventManager.dispatchEvent(canvas.app.battle.Event.SHOW_ERROR, null, canvas.Translator.getText(72));
        return;
    }
    canvas.app.battle.log("mFunc useEffect: effId=" + EffId + ", persInFocus=" + conf.persInFocus, 10027008);
    if (conf.watchFight && conf.persId != conf.myPersId) {
        canvas.app.battle.log("mFunc useEffect: pers is under watch_fight mode.", 255);
        return;
    }
    if (!conf.testFlag(abil_flgs, canvas.app.battle.Const.FS_PEF_USEDEAD) && conf.persStatus == canvas.app.battle.Const.STATUS_DEAD) {
        canvas.app.battle.log("mFunc useEffect: pers dead command not be send.", 255);
        return;
    }
    var confirm_title;
    if (conf.testFlag(abil_flgs, canvas.app.battle.Const.FS_PEF_CONFIRM)) {
        if (conf.abils[EffId]) {
            confirm_title = conf.abils[EffId]["title"];
        } else if (conf.spells[EffId]) {
            confirm_title = conf.spells[EffId]["title"];
        }
    }
    if (confirm_title) {
        var f_self;
        var f_opp;
        var f_self_team = conf.testFlag(abil_flgs, canvas.app.battle.Const.FS_PEF_TEAMSELF);
        var f_opp_team = conf.testFlag(abil_flgs, canvas.app.battle.Const.FS_PEF_TEAMOPP);
        if (f_self_team) {
            f_self = true;
        } else {
            f_self = conf.testFlag(abil_flgs, canvas.app.battle.Const.FS_PEF_TARGETSELF);
        }
        if (f_opp_team) {
            f_opp = true;
        } else {
            f_opp = conf.testFlag(abil_flgs, canvas.app.battle.Const.FS_PEF_TARGETOPP);
        }
        canvas.app.battle.log("mFunc useEffect: self=" + f_self + " opp=" + f_opp + " self_team=" + f_self_team + " opp_team=" + f_opp_team, 10066329);
        var no_way;
        if (targetId == conf.persId) {
            if (!f_self) {
                canvas.EventManager.dispatchEvent(canvas.app.battle.Event.SHOW_ERROR, null, canvas.Translator.getText(20));
                no_way = true;
            }
        } else {
            if (targetTeam == conf.persTeam) {
                if (!f_self_team) {
                    canvas.EventManager.dispatchEvent(canvas.app.battle.Event.SHOW_ERROR, null, canvas.Translator.getText(21));
                    no_way = true;
                }
            } else {
                if (targetId == conf.oppId) {
                    if (!f_opp) {
                        canvas.EventManager.dispatchEvent(canvas.app.battle.Event.SHOW_ERROR, null, canvas.Translator.getText(22));
                        no_way = true;
                    }
                } else {
                    if (!f_opp_team) {
                        canvas.EventManager.dispatchEvent(canvas.app.battle.Event.SHOW_ERROR, null, canvas.Translator.getText(23));
                        no_way = true;
                    }
                }
            }
        }
        if (no_way) {
            this.baseLnk.view.centerView.spellsUnlockOnError(EffId);
            return;
        }
    }
    if (conf.testFlag(abil_flgs, canvas.app.battle.Const.FS_PEF_PASSTURN)) {
        canvas.app.battle.log("mFunc useEffect: PASSTURN");
        this.baseLnk.centerVisible(false);
        conf.attackTime = Date.now();
    }
    parser.pack([
        { id: 0, type: parser.PT_INT, val: parser.FS_SCCL_USE_EFFECT },
        { id: 0, type: parser.PT_BIGINT, val: EffId },
        { id: 0, type: parser.PT_INT, val: targetId },
    ]);
    var target_is_bot;
    if (conf.memDat[targetId]) {
        target_is_bot = conf.testFlag(conf.memDat[targetId].persFlags, canvas.app.battle.Const.FS_PF_BOT);
    } else {
        canvas.app.battle.log("mFunc useEffect: memDat for targetId is null", 10027008);
    }
    if (!confirm_title || targetId == conf.persId || target_is_bot) {
        conn.sendPak(parser.buf);
    } else {
        canvas.app.battle.log("mFunc useEffect: Request confirmation", 10027008);
        conf.abilityTemp = parser.buf;
        var num = conf.persId.toString() + "[]" + Date.now().toString();
        canvas.EventManager.dispatchEvent(canvas.app.battle.Event.SHOW_MESSAGE, null, { mode: 2, bodyLabel: canvas.Translator.getText(12) + ' "' + confirm_title.replace("__", " ") + '"\n' + canvas.Translator.getText(13), num: num });
        this.sendMsg(targetId, "1()" + num + "()" + conf.memDat[conf.persId].nick + "()" + confirm_title);
    }
};
canvas.app.battle.engine.MFunc.prototype.swapSubSlot = function (EffId) {
    var parser = canvas.app.battle.model.serverParser;
    var conn = this.baseLnk.conn;
    var conf = canvas.app.battle.model;
    canvas.app.battle.log("mFunc swapSubSlot: EffID=" + EffId, 10027008);
    parser.pack([
        { id: 0, type: parser.PT_INT, val: parser.FS_SCCL_EFFECT_SWAP_SUBSLOT },
        { id: 0, type: parser.PT_BIGINT, val: EffId },
    ]);
    conn.sendPak(parser.buf);
};
canvas.app.battle.engine.MFunc.prototype.changeMode = function (switcher, flag) {
    var parser = canvas.app.battle.model.serverParser;
    var conn = this.baseLnk.conn;
    var conf = canvas.app.battle.model;
    canvas.app.battle.log("mFunc changeMode: switcher=" + switcher + ", flag=0x" + flag.toString(16), 10027008);
    parser.pack([
        { id: 0, type: parser.PT_INT, val: parser.FS_SCCL_CHANGE_MODE },
        { id: 0, type: parser.PT_INT, val: flag },
        { id: 0, type: parser.PT_INT, val: switcher },
    ]);
    conn.sendPak(parser.buf);
};
canvas.app.battle.engine.MFunc.prototype.sendMsg = function (persId, txt) {
    var parser = canvas.app.battle.model.serverParser;
    var conn = this.baseLnk.conn;
    var conf = canvas.app.battle.model;
    canvas.app.battle.log("mFunc sendMsg: persId=" + persId + ", txt=" + txt, 10027008);
    txt = encodeURI(txt);
    parser.pack([
        { id: 0, type: parser.PT_INT, val: parser.FS_SCCL_SEND_MSG },
        { id: 0, type: parser.PT_INT, val: persId },
        { id: 0, type: parser.PT_INT, val: 1 },
        { id: 0, type: parser.PT_STRING, val: txt },
    ]);
    conn.sendPak(parser.buf);
};
canvas.app.battle.engine.MFunc.prototype.watchFight = function () {
    var parser = canvas.app.battle.model.serverParser;
    var conn = this.baseLnk.conn;
    var conf = canvas.app.battle.model;
    canvas.app.battle.log("mFunc watchFight: ", 10027008);
    parser.pack([
        { id: 0, type: parser.PT_INT, val: parser.FS_SCCL_WATCH_FIGHT },
        { id: 0, type: parser.PT_INT, val: conf.newPersId },
    ]);
    conn.sendPak(parser.buf);
};
canvas.app.battle.engine.MFunc.prototype.unsetAura = function (EffId) {
    var parser = canvas.app.battle.model.serverParser;
    var conn = this.baseLnk.conn;
    var conf = canvas.app.battle.model;
    canvas.app.battle.log("mFunc unsetAura: EffId=" + EffId, 10027008);
    parser.pack([
        { id: 0, type: parser.PT_INT, val: parser.FS_SCCL_DROP_EFFECT },
        { id: 0, type: parser.PT_BIGINT, val: EffId },
    ]);
    conn.sendPak(parser.buf);
};
canvas.app.battle.engine.MFunc.prototype.skipTurn = function () {
    var parser = canvas.app.battle.model.serverParser;
    var conn = this.baseLnk.conn;
    var conf = canvas.app.battle.model;
    canvas.app.battle.log("mFunc skipTurn: ", 10027008);
    parser.pack([{ id: 0, type: parser.PT_INT, val: parser.FS_SCCL_SKIP_TURN }]);
    conn.sendPak(parser.buf);
    this.baseLnk.centerVisible(false);
    conf.skipTurnTime = Date.now() + canvas.app.battle.Const.SKIP_TURN_COOLDOWN * 1500;
};
canvas.app.battle.engine.MCmd = function (baseLnk) {
    this.baseLnk = baseLnk;
    this.myEffectsList = "";
    this.myEffectsListIV;
    this.myEffectsListDelayBegin = 1e3;
    this.myEffectsListDelayDelta = 100;
    this.myEffectsListDelayCurrent = 1e3;
    this.myEffectsListDelayMax = 5e3;
    this.myEffectsGetted = false;
    this.oppIdFromWFCmd = 0;
};
canvas.app.battle.engine.MCmd.prototype.state = function () {
    var parser = canvas.app.battle.model.serverParser;
    var conf = canvas.app.battle.model;
    var baseLnk = this.baseLnk;
    canvas.app.battle.log("mCmd state: paramsCount= " + parser.params.length);
    if (conf.mainStep == canvas.app.battle.Const.MAIN_STEP_STATE) {
        conf.clearEventsCache();
        var timeToStart = parseInt(parser.params[2].val);
        var roundTime = parseInt(parser.params[3].val);
        var persId = parseInt(parser.params[4].val);
        var persStatus = conf.parsePersStatus(parseInt(parser.params[5].val), parseInt(parser.params[6].val));
        var persFlags = parseInt(parser.params[7].val);
        conf.fightRunning = timeToStart == 0;
        conf.roundTime = conf.roundTimeBase = roundTime * 1e3;
        if (timeToStart > 0) {
            conf.roundTime = timeToStart * 1e3;
            baseLnk.view.topTimer.activate();
        }
        if (!conf.memDat[persId]) {
            conf.memDat[persId] = {};
        }
        conf.memDat[persId].persFlags = persFlags;
        if (conf.testFlag(conf.memDat[conf.persId].persFlags, canvas.app.battle.Const.FS_PF_DEFENDED)) {
            baseLnk.view.centerView.activeBlock(true);
        }
        if (conf.testFlag(conf.memDat[conf.persId].persFlags, canvas.app.battle.Const.FS_PF_MAGIC)) {
            baseLnk.view.centerView.mode = canvas.app.battle.Const.MODE_SPELLS;
            baseLnk.view.centerView.cAttack.deactivate();
        }
        conf.totalDamage = parser.params[8].val;
        baseLnk.view.updateTotalDamage();
        baseLnk.setSyncTimeout();
        conf.persHp = parser.params[9].val;
        conf.persHpMax = parser.params[10].val;
        conf.persMp = parser.params[11].val;
        conf.persMpMax = parser.params[12].val;
        baseLnk.view.hpmp.setHpPers(conf.persHp, conf.persHpMax);
        baseLnk.view.hpmp.setMpPers(conf.persMp, conf.persMpMax);
        conf.persStatus = persStatus;
        conf.oppId = parser.params[13].val;
        conf.effectsMinCooldown = parser.params[14].val;
        if (conf.serverTimestamp == 0) {
            conf.serverTimestamp = parseInt(parser.params[15].val);
            conf.clientTimestamp = Math.floor(Date.now() / 1e3);
        }
        conf.mainStep = canvas.app.battle.Const.MAIN_STEP_INFO;
        conf.paksReady = true;
        if (parser.params[16] && parser.params[16].val > 0) {
            conf.wfCnt = 1;
            conf.newPersId = parseInt(parser.params[16].val);
            conf.watchFight = true;
        }
        baseLnk.setBowsInfo(parser.params[17] ? parseInt(parser.params[17].val) : 0, parser.params[18] ? parseInt(parser.params[18].val) : 0, parser.params[19] ? parseInt(parser.params[19].val) : 0);
        baseLnk.mainIteration();
        conf.currentAura = parser.params[20] ? (parser.params[20] > 0 ? parser.params[20].toString() : "") : "";
        baseLnk.updateAuras(conf.persId);
    } else {
        conf.totalDamage = parser.params[8].val;
        baseLnk.view.updateTotalDamage();
        baseLnk.setSyncTimeout();
        this.paksReadyAndParse();
    }
};
canvas.app.battle.engine.MCmd.prototype.anyPersInfo = function () {
    var parser = canvas.app.battle.model.serverParser;
    var conf = canvas.app.battle.model;
    var baseLnk = this.baseLnk;
    canvas.app.battle.log("mCmd anyPersInfo: paramsCount= " + parser.params.length);
    var ipersId = parser.params[2].val;
    var ibotArtikulId = parser.params[3].val;
    var ipersStatus = conf.parsePersStatus(parser.params[4].val, parser.params[5].val);
    var ipersFlags = parser.params[6].val;
    var ipersNick = parser.params[7].val;
    var ipersData = parser.params[8].val;
    var ipersLevel = parser.params[9].val;
    var ipersGender = parser.params[10].val;
    var ipersGenderS = ipersGender == 1 ? "M" : "F";
    var ipersKind = parser.params[11].val;
    var ipersClsMage = parser.params[12].val;
    var ipersSkel = parser.params[13].val;
    var ipersSkelTime = parser.params[14].val;
    var ipersMask = parser.params[15].val;
    var ipersTeamNum = parser.params[16].val;
    var ipersHP = parser.params[17].val;
    var ipersHPmax = parser.params[18].val;
    var ipersMP = parser.params[19].val;
    var ipersMPmax = parser.params[20].val;
    var ipersPetSrc = parser.params[21].val;
    conf.memDat[ipersId] = { maxHP: ipersHPmax, maxMP: ipersMPmax, nick: ipersNick, level: ipersLevel, persFlags: ipersFlags, sk: ipersSkel, team: ipersTeamNum, mem_flag: true, kind: ipersKind, status: ipersStatus };
};
canvas.app.battle.engine.MCmd.prototype.persInfo = function () {
    var parser = canvas.app.battle.model.serverParser;
    var conf = canvas.app.battle.model;
    var baseLnk = this.baseLnk;
    canvas.app.battle.log("mCmd persInfo: paramsCount= " + parser.params.length);
    var ipersId = parser.params[2].val;
    var ibotArtikulId = parser.params[3].val;
    var ipersStatus = conf.parsePersStatus(parser.params[4].val, parser.params[5].val);
    var ipersFlags = parser.params[6].val;
    var ipersNick = parser.params[7].val;
    var ipersData = parser.params[8].val;
    var ipersLevel = parser.params[9].val;
    var ipersGender = parser.params[10].val;
    var ipersGenderS = ipersGender == 1 ? "M" : "F";
    var ipersKind = parser.params[11].val;
    var ipersClsMage = parser.params[12].val;
    var ipersSkel = parser.params[13].val;
    var ipersSkelTime = parser.params[14].val;
    var ipersMask = parser.params[15].val;
    var ipersTeamNum = parser.params[16].val;
    var ipersHP = parser.params[17].val;
    var ipersHPmax = parser.params[18].val;
    var ipersMP = parser.params[19].val;
    var ipersMPmax = parser.params[20].val;
    var ipersPetSrc = parser.params[21].val;
    if (ipersId != conf.persId && ipersId != conf.oppId) {
        canvas.app.battle.log("mCmd persInfo: ipersId is not =persId or oppId", 16711680);
        this.paksReadyAndParse();
        return;
    }
    canvas.app.battle.log("\t* ipersId = " + ipersId);
    canvas.app.battle.log("\t* ipersFlags  = " + ipersFlags);
    canvas.app.battle.log("\t\tcheck = " + (ipersFlags & 16384));
    canvas.app.battle.log("\t* ipersPetSrc = " + ipersPetSrc);
    if (ipersId == 100) {
        ipersGender = 1;
        ipersGenderS = ipersGender == 1 ? "M" : "F";
        ipersSkel = 3;
    }
    canvas.app.battle.log("\t* skeleton = " + ipersSkel + " time=" + ipersSkelTime, 170);
    canvas.app.battle.log("\t* gender   = " + ipersGenderS, 170);
    canvas.app.battle.log("\t* cls(hex) = " + ipersClsMage, 170);
    conf.memDat[ipersId] = {
        maxHP: ipersHPmax,
        maxMP: ipersMPmax,
        nick: ipersNick,
        level: ipersLevel,
        gender: ipersGender,
        persFlags: ipersFlags,
        sk: ipersSkel,
        kind: ipersKind,
        team: ipersTeamNum,
        mem_flag: true,
        petSrc: ipersPetSrc,
        status: ipersStatus,
    };
    if (ipersId == conf.persId) {
        baseLnk.setBowsInfo(parser.params[22] ? parseInt(parser.params[22].val) : 0, parser.params[23] ? parseInt(parser.params[23].val) : 0, parser.params[24] ? parseInt(parser.params[24].val) : 0);
        baseLnk.updateAuras(conf.persId);
    }
    conf.memGenders[ipersId] = { genders: ipersGenderS };
    ipersClsMage = ipersClsMage & 1 ? 1 : ipersClsMage & 2 ? 3 : ipersClsMage & 4 ? 5 : ipersClsMage & 8 ? 2 : ipersClsMage & 16 ? 4 : ipersClsMage & 32 ? 6 : 0;
    conf.memClsMage[ipersId] = { cls: ipersClsMage };
    canvas.app.battle.log("\t* cls(dec) = " + ipersClsMage, 170);
    if (ipersId == conf.persId) {
        canvas.app.battle.log("\t* PERS_INFO (MY_PERS)");
        canvas.app.battle.log("\t* status=" + String(ipersStatus));
        baseLnk.view.persNick.update(ipersNick, ipersId);
        conf.persNick = ipersNick;
        conf.persRace = ipersKind;
        if (conf.tempDead) {
            conf.persStatus = canvas.app.battle.Const.STATUS_DEAD;
            conf.tempDead = false;
        } else {
            conf.persStatus = ipersStatus;
        }
        conf.persHp = ipersHP;
        conf.persHpMax = ipersHPmax;
        conf.persMp = ipersMP;
        conf.persMpMax = ipersMPmax;
        baseLnk.view.hpmp.setHpPers(ipersHP, ipersHPmax);
        baseLnk.view.hpmp.setMpPers(ipersMP, ipersMPmax);
        baseLnk.updPersHPLvl();
        baseLnk.updPersMPLvl();
        baseLnk.view.persLevel.setLevel(ipersLevel);
        conf.persSk = ipersSkel;
        conf.persSkTime = ipersSkelTime;
        conf.persGender = ipersGenderS;
        conf.persTeam = ipersTeamNum;
        if (!baseLnk.players[conf.persId]) {
            if (ipersSkel < canvas.app.battle.Const.BOTID1) {
                conf.persIsBotFlag = false;
                baseLnk.mFunc.persParts(ipersId);
                conf.paksReady = true;
            } else {
                baseLnk.loadPers(ipersId);
                conf.persIsBotFlag = true;
                baseLnk.mFunc.persParts(ipersId);
                this.paksReadyAndParse();
            }
        } else {
            var cur_pers = baseLnk.players[conf.persId];
            cur_pers.addFuncShow = baseLnk.showLoadedPers.bind(baseLnk);
            cur_pers.showBody();
        }
        conf.mainStep = canvas.app.battle.Const.MAIN_STEP_DONE;
    } else {
        canvas.app.battle.log("\t* PERS_INFO (MY_OPP)");
        canvas.app.battle.log("\t*  status=" + String(ipersStatus));
        baseLnk.view.oppNick.update(ipersNick, ipersId);
        conf.oppStatus = ipersStatus;
        conf.oppHp = ipersHP;
        conf.oppHpMax = ipersHPmax;
        conf.oppMp = ipersMP;
        conf.oppMpMax = ipersMPmax;
        baseLnk.view.hpmp.setHpOpp(ipersHP, ipersHPmax);
        baseLnk.view.hpmp.setMpOpp(ipersMP, ipersMPmax);
        baseLnk.view.oppLevel.setLevel(ipersLevel);
        conf.oppSk = ipersSkel;
        conf.oppSkTime = ipersSkelTime;
        conf.oppMask = ipersMask;
        conf.oppGender = ipersGenderS;
        baseLnk.view.centerView.applyMask(conf.oppMask);
        if (!baseLnk.players[conf.oppId]) {
            if (ipersSkel < canvas.app.battle.Const.BOTID1) {
                conf.persIsBotFlag = false;
                baseLnk.mFunc.persParts(ipersId);
                conf.paksReady = true;
            } else {
                baseLnk.loadPers(ipersId);
                conf.persIsBotFlag = true;
                baseLnk.mFunc.persParts(ipersId);
                conf.paksReady = true;
            }
        } else {
            var cur_opp = baseLnk.players[conf.oppId];
            cur_opp.addFuncShow = baseLnk.eveOppNewNoSh.bind(baseLnk);
            cur_opp.showBody();
        }
    }
};
canvas.app.battle.engine.MCmd.prototype.persParts = function () {
    var parser = canvas.app.battle.model.serverParser;
    var conf = canvas.app.battle.model;
    var baseLnk = this.baseLnk;
    canvas.app.battle.log("mCmd persParts: paramsCount= " + parser.params.length);
    var pers_id = parser.params[2].val;
    conf.myAllDataArray[pers_id] = parser.params[3].val;
    var arLnk = [];
    var i0;
    var i1;
    var v0;
    var har;
    var len;
    var num;
    har = parser.params[3].val.split(",");
    len = har.length;
    for (i0 = 0; i0 < har.length; i0++) {
        i1 = i0 * 5;
        v0 = har[i0].split(";");
        num = parseInt(v0[0]);
        arLnk.push(num & 65535, num >> 16, v0[1], v0[2], v0[3]);
    }
    len = 295;
    if (pers_id == conf.persId) {
        baseLnk.flagLoadPers(arLnk[len]);
    } else {
        baseLnk.flagLoadOpp(arLnk[len]);
    }
    if (conf.persIsBotFlag) {
        this.paksReadyAndParse();
        return;
    }
    baseLnk.loadPers(pers_id);
    baseLnk.players[pers_id].mFlagId = arLnk[len];
};
canvas.app.battle.engine.MCmd.prototype.sendEffectsList = function () {
    var baseLnk = this.baseLnk;
    if (!this.myEffectsGetted && this.myEffectsList != "") {
        this.myEffectsGetted = baseLnk.sendData("items", "EffList@" + this.myEffectsList);
    }
    if (this.myEffectsGetted) {
        return;
    }
    if (this.myEffectsListDelayCurrent < this.myEffectsListDelayMax) this.myEffectsListDelayCurrent += this.myEffectsListDelayDelta;
    this.myEffectsListIV = setTimeout(this.sendEffectsList.bind(this), this.myEffectsListDelayCurrent);
};
canvas.app.battle.engine.MCmd.prototype.effects = function () {
    var parser = canvas.app.battle.model.serverParser;
    var conf = canvas.app.battle.model;
    var baseLnk = this.baseLnk;
    canvas.app.battle.log("mCmd effects: paramsCount= " + parser.params.length);
    var curEffId;
    var curEffCnt;
    var curEffFlags;
    var curEffArtId;
    var curEffcdTime;
    var curEffcdType;
    var curEffcdGripId;
    var curEffTitle;
    var curEffPic;
    var curEffSlot;
    var curMP;
    var curEffcdLeft;
    var curSltName;
    var curEffSubSlot;
    var curEnergy;
    var bowIndex = 0;
    var confirm;
    this.myEffectsList = "";
    conf.abils = {};
    conf.auras = new Array();
    for (var g = 2; g < parser.params.length; g += 15) {
        curEffId = parser.params[g].val;
        curEffCnt = parser.params[g + 1].val;
        curEffFlags = parser.params[g + 2].val;
        curEffArtId = parser.params[g + 3].val;
        curEffcdTime = parser.params[g + 4].val;
        curEffcdType = parser.params[g + 5].val;
        curEffcdGripId = parser.params[g + 6].val;
        curEffTitle = parser.params[g + 7].val;
        curEffPic = parser.params[g + 8].val;
        curSltName = parser.params[g + 9].val;
        curEffSlot = parser.params[g + 10].val;
        curMP = parser.params[g + 11].val;
        curEffcdLeft = parser.params[g + 12].val;
        curEnergy = parser.params[g + 13].val;
        curEffSubSlot = parser.params[g + 14].val;
        canvas.app.battle.log(
            "     * effId=" +
            curEffId +
            " cnt=" +
            curEffCnt +
            " flags=0x" +
            curEffFlags.toString(16) +
            " cdTime=" +
            curEffcdTime +
            " cdType=" +
            curEffcdType +
            " ArtId=" +
            curEffArtId +
            " cdGripId=" +
            curEffcdGripId +
            " title=" +
            curEffTitle +
            " pic=" +
            curEffPic +
            " slot=" +
            curEffSlot +
            " mp=" +
            curMP +
            " cdLeft=" +
            curEffcdLeft +
            " energy=" +
            curEnergy +
            " curEffSubSlot=" +
            curEffSubSlot,
            6710886
        );
        conf.abilsFlags[curEffId] = curEffFlags;
        canvas.app.battle.log("     *  PASSTURN   " + conf.testFlag(curEffFlags, canvas.app.battle.Const.FS_PEF_PASSTURN), 10066329);
        canvas.app.battle.log("     *  TARGETSELF " + conf.testFlag(curEffFlags, canvas.app.battle.Const.FS_PEF_TARGETSELF), 10066329);
        canvas.app.battle.log("     *  TARGETOPP  " + conf.testFlag(curEffFlags, canvas.app.battle.Const.FS_PEF_TARGETOPP), 10066329);
        canvas.app.battle.log("     *  TEAMSELF   " + conf.testFlag(curEffFlags, canvas.app.battle.Const.FS_PEF_TEAMSELF), 10066329);
        canvas.app.battle.log("     *  TEAMOPP    " + conf.testFlag(curEffFlags, canvas.app.battle.Const.FS_PEF_TEAMOPP), 10066329);
        canvas.app.battle.log("     *  CONFIRM    " + conf.testFlag(curEffFlags, canvas.app.battle.Const.FS_PEF_CONFIRM), 10066329);
        canvas.app.battle.log("     *  SPELL    " + conf.testFlag(curEffFlags, canvas.app.battle.Const.FS_PEF_SPELL), 10066329);
        canvas.app.battle.log("     *  BOW    " + conf.testFlag(curEffFlags, canvas.app.battle.Const.FS_PEF_BOW), 10066329);
        canvas.app.battle.log("     *  WEAPONEFFECT    " + conf.testFlag(curEffFlags, canvas.app.battle.Const.FS_PEF_WEAPONEFFECT), 10066329);
        canvas.app.battle.log("     *  AURA    " + (curEffFlags & canvas.app.battle.Const.FS_PEF_AURA), 10066329);
        if (curSltName == "BANNER") {
            conf.flagEffId = curEffId;
            conf.flagTimeCd = curEffcdTime;
            conf.flagTimeLeft = curEffcdLeft;
        }
        if (conf.testFlag(curEffFlags, canvas.app.battle.Const.FS_PEF_WEAPONEFFECT)) {
        } else {
            if (curEffTitle.length > 0) {
                curEffTitle = curEffTitle.replace(/ /g, "__");
            }
            confirm = conf.testFlag(curEffFlags, canvas.app.battle.Const.FS_PEF_CONFIRM) ? curEffTitle : "0";
            if (conf.testFlag(curEffFlags, canvas.app.battle.Const.FS_PEF_SPELL)) {
                conf.spells[curEffSlot] = {
                    effId: curEffId,
                    cdTime: Math.max(Math.floor(canvas.app.battle.Const.DEFAULT_SPELLS_COOLDOWN / 1e3), curEffcdTime),
                    cdGripId: curEffcdGripId,
                    title: curEffTitle,
                    picture: curEffPic,
                    mp: curMP,
                    confirm: confirm,
                    cdLeft: curEffcdLeft,
                };
                conf.hasSpells = true;
            } else if (conf.testFlag(curEffFlags, canvas.app.battle.Const.FS_PEF_BOW)) {
                conf.spellsBow[curEffId] = {
                    effId: curEffId,
                    cdTime: Math.max(Math.floor(canvas.app.battle.Const.DEFAULT_SPELLS_COOLDOWN / 1e3), curEffcdTime),
                    cdGripId: curEffcdGripId,
                    title: curEffTitle,
                    picture: curEffPic,
                    mp: curMP,
                    confirm: confirm,
                    cdLeft: curEffcdLeft,
                    energy: curEnergy,
                    index: bowIndex++,
                };
            } else if (curEffFlags & canvas.app.battle.Const.FS_PEF_AURA) {
                conf.auras.push(new canvas.data.battle.AuraData(curEffId.toString(), curEffTitle, canvas.Config.artifactsPath + curEffPic));
            } else {
                var disabled = conf.testFlag(curEffFlags, canvas.app.battle.Const.FS_PEF_DISABLED) ? "1" : "0";
                if (curEffCnt > 0) {
                    this.myEffectsList +=
                        curEffSlot +
                        conf.ch1 +
                        curEffId +
                        conf.ch1 +
                        curEffCnt +
                        conf.ch1 +
                        curEffPic +
                        conf.ch1 +
                        curEffcdTime +
                        conf.ch1 +
                        curEffcdGripId +
                        conf.ch1 +
                        curEffcdLeft +
                        conf.ch1 +
                        disabled +
                        conf.ch1 +
                        curEffSubSlot +
                        conf.ch1 +
                        curEffcdType +
                        conf.ch2;
                }
                conf.abils[curEffId] = { title: curEffTitle };
                canvas.app.battle.log("     *  ABIL: effId=" + curEffId + " title=" + curEffTitle + " flags=" + curEffFlags.toString(2) + "(2)," + curEffFlags.toString(16) + "(16)", 10066329);
            }
        }
    }
    baseLnk.view.centerView.buildSpells();
    baseLnk.view.bowPanel.buildSpells();
    baseLnk.updateAuras(conf.persId);
    if (this.myEffectsList != "") {
        this.myEffectsList += "0";
        this.myEffectsListDelayCurrent = this.myEffectsListDelayBegin;
        this.sendEffectsList();
    }
};
canvas.app.battle.engine.MCmd.prototype.persActEffects = function () {
    var parser = canvas.app.battle.model.serverParser;
    var conf = canvas.app.battle.model;
    var baseLnk = this.baseLnk;
    canvas.app.battle.log("mCmd persActEffects: paramsCount= " + parser.params.length);
    var iPersId = parser.params[2].val;
    canvas.app.battle.log("     persId= " + iPersId);
    var cmdIndex = parser.params.pop().val;
    if (iPersId == conf.persId) {
        conf.persLastEffectsUpdateIndex = cmdIndex;
    } else if (iPersId == conf.oppId) {
        conf.oppLastEffectsUpdateIndex = cmdIndex;
    }
    var curArtId;
    var curPic;
    var curCnt;
    var curTitle;
    var curAnimData;
    var eetimeMax;
    var turnsLeft;
    var g;
    var increaser = 7;
    if (conf.persBafsFlag) {
        conf.persBafsFlag = false;
        var sp1 = "|";
        var sp2 = ";";
        var bafs_delta_time = conf.serverTimestamp - conf.clientTimestamp;
        var pers_bafs = iPersId.toString() + sp1 + bafs_delta_time.toString() + sp1;
        for (g = 3; g < parser.params.length; g += increaser) {
            curArtId = parser.params[g].val;
            curPic = canvas.Config.artifactsPath + parser.params[g + 3].val;
            curCnt = parser.params[g + 1].val;
            curTitle = parser.params[g + 2].val;
            eetimeMax = parser.params[g + 5].val;
            turnsLeft = parser.params[g + 6].val;
            canvas.app.battle.log(" // curArtId  " + curArtId, 10066329);
            canvas.app.battle.log(" // curPic    " + curPic, 10066329);
            canvas.app.battle.log(" // curCnt    " + curCnt, 10066329);
            canvas.app.battle.log(" // curTitle  " + curTitle, 10066329);
            canvas.app.battle.log(" // eetimeMax " + eetimeMax, 10066329);
            pers_bafs += curArtId.toString() + sp2 + curPic + sp2 + curCnt.toString() + sp2 + curTitle + sp2 + eetimeMax.toString() + sp2 + turnsLeft.toString() + sp1;
        }
        baseLnk.sendData("mem", "pers_bafs@" + pers_bafs.substr(0));
    }
    var curList = [];
    var curListHash = {};
    var auraUpdate = false;
    for (g = 3; g < parser.params.length; g += increaser) {
        curArtId = parser.params[g].val;
        curPic = canvas.Config.artifactsPath + parser.params[g + 3].val;
        curCnt = parser.params[g + 1].val;
        curTitle = parser.params[g + 2].val;
        curAnimData = parser.params[g + 4].val;
        eetimeMax = parser.params[g + 5].val;
        turnsLeft = parser.params[g + 6].val;
        if (!auraUpdate) auraUpdate = conf.testCurrentAura(curArtId, iPersId);
        canvas.app.battle.log("       id=" + curArtId + " title=" + curTitle + " pic=" + curPic + " cnt=" + curCnt.toString() + " animData=" + curAnimData + " eetimeMax=" + eetimeMax + " turnsLeft=" + turnsLeft, 10066329);
        if (curListHash[curPic] != undefined) {
            curList[curListHash[curPic]].cnt += curCnt;
        } else {
            var new_eff = {};
            new_eff.id = curArtId;
            new_eff.pic = curPic;
            new_eff.title = curTitle;
            new_eff.cnt = curCnt;
            new_eff.lnk = null;
            new_eff.animData = curAnimData;
            new_eff.eetimeMax = eetimeMax;
            new_eff.turnsLeft = turnsLeft;
            curListHash[curPic] = curList.push(new_eff) - 1;
        }
    }
    if (auraUpdate) {
        baseLnk.updateAuras(iPersId);
    }
    var cur_eff_list;
    if (iPersId == conf.persId) {
        cur_eff_list = baseLnk.view.effectsP1;
    } else if (iPersId == conf.oppId) {
        cur_eff_list = baseLnk.view.effectsP2;
    } else {
        canvas.app.battle.log("       WARN: pers_id=" + iPersId.toString() + " not active", 16711680);
    }
    if (cur_eff_list) {
        cur_eff_list.initEffects(curList);
        var curPers = baseLnk.players[iPersId];
        if (curPers) {
            curPers.clearAdditionalEffects();
            var ss;
            var additional_effect;
            for (var k = 0; k < curList.length; k++) {
                ss = curList[k].animData.split("/");
                if (ss.length > 2) {
                    if (ss[2] != "null") {
                        additional_effect = ss[2];
                        curPers.showAdditionalEffects(conf.parser.parseAdditionalEffectsData(canvas.app.battle.Const.AEFF_ABSORB, additional_effect));
                    }
                }
            }
        } else {
            canvas.app.battle.log("       WARN: pers iPersId=" + iPersId + " is null", 10027008);
        }
    }
};
canvas.app.battle.engine.MCmd.prototype.fightState = function () {
    var parser = canvas.app.battle.model.serverParser;
    var conf = canvas.app.battle.model;
    var baseLnk = this.baseLnk;
    canvas.app.battle.log("mCmd persActEffects: paramsCount= " + parser.params.length + ", listSize=" + parser.params[2].val.toString());
    var listSize = parser.params[2].val;
    if (parser.params.length < 12) {
        return;
    }
    var curId;
    var curStatus;
    var curPersFlags;
    var curNick;
    var curData;
    var curLevel;
    var curTeam;
    var curHP;
    var curMaxHP;
    var curMP;
    var curMaxMP;
    var isBot;
    var isShadow;
    var sk;
    for (var g = 3; g < parser.params.length; g += 12) {
        curId = parser.params[g + 0].val;
        curStatus = conf.parsePersStatus(parser.params[g + 1].val, parser.params[g + 2].val);
        curPersFlags = parser.params[g + 3].val;
        curNick = parser.params[g + 4].val;
        curData = parser.params[g + 5].val;
        curLevel = parser.params[g + 6].val;
        curTeam = parser.params[g + 7].val;
        curHP = parser.params[g + 8].val;
        curMaxHP = parser.params[g + 9].val;
        curMP = parser.params[g + 10].val;
        curMaxMP = parser.params[g + 11].val;
        isBot = conf.testFlag(curPersFlags, canvas.app.battle.Const.FS_PF_BOT);
        isShadow = conf.testFlag(curPersFlags, canvas.app.battle.Const.FS_PF_SHADOW);
        conf.testPvpStatus(curTeam, isBot);
        sk = 0;
        if (conf.memDat[curId]) {
            if (conf.memDat[curId].sk) {
                sk = conf.memDat[curId].sk;
            }
        }
        conf.memDat[curId] = { maxHP: curMaxHP, maxMP: curMaxMP, nick: curNick, level: curLevel, persFlags: curPersFlags, sk: sk, team: curTeam, mem_flag: true, status: curStatus };
        if (curId == conf.persId) {
            baseLnk.updateAuras(conf.persId);
        }
        baseLnk.mFunc.full_g2m_answ_str +=
            curId.toString() +
            conf.ch1 +
            curNick +
            conf.ch1 +
            curTeam.toString() +
            conf.ch1 +
            curStatus.toString() +
            conf.ch1 +
            curHP.toString() +
            conf.ch1 +
            curMaxHP.toString() +
            conf.ch1 +
            curMP.toString() +
            conf.ch1 +
            curMaxMP.toString() +
            conf.ch1 +
            curData +
            conf.ch1 +
            curLevel.toString() +
            conf.ch1 +
            isBot.toString() +
            conf.ch1 +
            curPersFlags.toString() +
            conf.ch1 +
            conf.fightId.toString() +
            conf.ch1 +
            isShadow.toString() +
            conf.ch2;
        baseLnk.mFunc.full_g2m_srt_buff++;
        canvas.app.battle.log("         ---------");
        canvas.app.battle.log("         isBot: " + isBot);
        canvas.app.battle.log("         curNick: " + curNick);
        canvas.app.battle.log("         curId: " + String(curId));
        canvas.app.battle.log("         curStatus: " + String(curStatus));
        canvas.app.battle.log("         curData: " + curData);
        canvas.app.battle.log("         persFlags: " + curPersFlags);
        canvas.app.battle.log("         --------");
    }
    if (listSize > baseLnk.mFunc.full_g2m_srt_buff && listSize != 0) {
        baseLnk.mFunc.fightState(0, baseLnk.mFunc.full_g2m_srt_buff);
    } else {
        baseLnk.mFunc.full_g2m_answ_str += String(conf.myPersId);
        canvas.app.battle.log("      ToMEM: send PAK1 (len=" + baseLnk.mFunc.full_g2m_answ_str.length + ") buff=" + baseLnk.mFunc.full_g2m_srt_buff, 153);
        canvas.app.battle.log("      ToMEM: send PAK1: " + baseLnk.mFunc.full_g2m_answ_str, 153);
        if (baseLnk.mFunc.full_g2m_answ_str.length < 20 * 1024) {
            baseLnk.sendData("mem", "pak1@" + baseLnk.mFunc.full_g2m_answ_str);
        } else {
            var tmp1 = baseLnk.mFunc.full_g2m_answ_str;
            while (tmp1.length > 0) {
                baseLnk.sendData("mem", "pak1s@" + tmp1.substr(0, 15 * 1024));
                tmp1 = tmp1.substr(15 * 1024);
            }
            baseLnk.sendData("mem", "pak1s@done");
        }
        if (conf.watchFight || conf.persStatus == canvas.app.battle.Const.STATUS_DEAD) {
            baseLnk.setupWatchFightBts(true, conf.persId);
            baseLnk.view.showMainPopup(canvas.app.battle.Const.POP_ST_WAIT_BT);
        }
        baseLnk.mFunc.full_g2m_answ_str = "";
        baseLnk.mFunc.full_g2m_srt_buff = 0;
        conf.fullMlLoaded = true;
        conf.fullReqLoaded = true;
        conf.fightStateExecuting = false;
    }
};
canvas.app.battle.engine.MCmd.prototype.useEffect = function () {
    var parser = canvas.app.battle.model.serverParser;
    var conf = canvas.app.battle.model;
    var baseLnk = this.baseLnk;
    canvas.app.battle.log("mCmd useEffect: paramsCount= " + parser.params.length);
    var effId = parser.params[2].val;
    var targetId = parser.params[3].val;
    var usageStatus = parser.params[4].val;
    canvas.app.battle.log("        effId=" + String(effId) + " targetId=" + String(targetId) + " usageStatus=" + String(usageStatus), 10066329);
    var g;
    var slot_id = null;
    for (g in conf.spells) {
        if (conf.spells[g]["effId"] == effId) {
            slot_id = g;
            break;
        }
    }
    if (!slot_id) {
        if (!conf.spellsBow[effId]) {
            canvas.app.battle.log("        send sig to items_left.swf", 10066329);
            baseLnk.sendData("items", "update_cnt@" + String(effId) + ",-1");
        } else {
            canvas.app.battle.log("        apply bow spells cooldown eff_id=" + effId, 10066329);
            baseLnk.view.bowPanel.confirmUseEffect(effId);
        }
    } else {
        canvas.app.battle.log("        apply spells cooldown slot_id=" + slot_id, 10066329);
        baseLnk.view.centerView.useSlotConfirmed(slot_id);
    }
    conf.useFlag(effId);
    baseLnk.updateAuras(conf.persId);
};
canvas.app.battle.engine.MCmd.prototype.changeMode = function () {
    var parser = canvas.app.battle.model.serverParser;
    var conf = canvas.app.battle.model;
    var baseLnk = this.baseLnk;
    canvas.app.battle.log("mCmd changeMode: paramsCount= " + parser.params.length);
    var iPersId = conf.persId;
    var iPersFlags = parser.params[2].val;
    var old_persFlags = conf.memDat[iPersId].persFlags;
    conf.memDat[iPersId].persFlags = iPersFlags;
    if (old_persFlags != iPersFlags) {
        var newPostLabel = baseLnk.getPostLabel(iPersId);
        canvas.app.battle.log("       post label = " + newPostLabel);
        baseLnk.players[iPersId].gotoAndPlay(newPostLabel);
    }
};
canvas.app.battle.engine.MCmd.prototype.skipTurn = function () {
    var parser = canvas.app.battle.model.serverParser;
    canvas.app.battle.log("mCmd skipTurn: paramsCount= " + parser.params.length);
};
canvas.app.battle.engine.MCmd.prototype.unsetAura = function () {
    var parser = canvas.app.battle.model.serverParser;
    canvas.app.battle.log("mCmd unsetAura: paramsCount= " + parser.params.length);
};
canvas.app.battle.engine.MCmd.prototype.watchFight = function () {
    var parser = canvas.app.battle.model.serverParser;
    var conf = canvas.app.battle.model;
    var baseLnk = this.baseLnk;
    canvas.app.battle.log("mCmd watchFight: paramsCount= " + parser.params.length);
    conf.wfGet++;
    this.oppIdFromWFCmd = parser.params[10].val;
    canvas.EventManager.addEventListener(canvas.app.battle.Event.PERSES_HIDED, null, this.handlerPersesHided, this);
    baseLnk.persesHide();
};
canvas.app.battle.engine.MCmd.prototype.handlerPersesHided = function () {
    var parser = canvas.app.battle.model.serverParser;
    var conf = canvas.app.battle.model;
    var baseLnk = this.baseLnk;
    canvas.EventManager.removeEventListener(canvas.app.battle.Event.PERSES_HIDED, null, this.handlerPersesHided, this);
    canvas.app.battle.log("mCmd handlerPersesHided: newPersId= " + conf.newPersId);
    if (conf.wfCnt != conf.wfGet) {
        canvas.app.battle.log("        - new_pers_id was changed, handle return", 16711680);
        this.paksReadyAndParse();
        return;
    }
    conf.oppId = this.oppIdFromWFCmd;
    conf.persId = conf.newPersId;
    this.paksReadyAndParse();
};
canvas.app.battle.engine.MCmd.prototype.paksReadyAndParse = function () {
    canvas.app.battle.model.paksReady = true;
    canvas.app.battle.model.parser.paksParse();
};
canvas.app.battle.engine.MEve = function (baseLnk) {
    this.baseLnk = baseLnk;
    this.effectsList = "";
    this.myEffectsListIV;
    this.myEffectsListDelayBegin = 1e3;
    this.myEffectsListDelayDelta = 100;
    this.myEffectsListDelayCurrent = 1e3;
    this.myEffectsListDelayMax = 5e3;
    this.myEffectsGetted = false;
};
canvas.app.battle.engine.MEve.prototype.oppWait = function () {
    var parser = canvas.app.battle.model.serverParser;
    var conf = canvas.app.battle.model;
    var baseLnk = this.baseLnk;
    canvas.app.battle.log("mEve oppWait: paramsCount= " + parser.params.length);
    baseLnk.view.topTimer.deactivate();
    baseLnk.centerVisible(false);
    if (conf.oppId == 0) {
        canvas.app.battle.log("         no opponent, ignore oppWait event");
        baseLnk.showSpellBookInWaitOpponent();
        this.paksReadyAndParse();
        return;
    } else {
        canvas.app.battle.log("         hide old opponent");
        var cur_opp = baseLnk.players[conf.oppId];
        if (cur_opp) {
            cur_opp.addFuncHide = this.oppWaitHided.bind(this);
            cur_opp.hideBody();
        } else {
            canvas.app.battle.log("         ERR: opp pers class is null (opp_id=" + String(conf.oppId) + ")", 16711680);
            return;
        }
    }
};
canvas.app.battle.engine.MEve.prototype.oppWaitHided = function (par) {
    var parser = canvas.app.battle.model.serverParser;
    var conf = canvas.app.battle.model;
    var baseLnk = this.baseLnk;
    canvas.app.battle.log("mEve oppWaitHided: persId=" + par.pers_id);
    conf.oppId = 0;
    baseLnk.view.effectsP2.initEffects([]);
    baseLnk.view.oppNick.unshow();
    baseLnk.view.oppLevel.setLevel("");
    baseLnk.view.hpmp.setHpOpp(0, 0);
    baseLnk.view.hpmp.setMpOpp(0, 0);
    baseLnk.showSpellBookInWaitOpponent();
    if (!conf.persDown && conf.persStatus == canvas.app.battle.Const.STATUS_DEAD) {
        var curPers = baseLnk.players[conf.persId];
        var die_reactions = curPers.sk.kick_array_all.kick_mid.a_mid_1.die;
        var rnd_reaction = die_reactions[Math.floor(die_reactions.length * Math.random())];
        conf.persDown = true;
        curPers.gotoAndPlay(rnd_reaction);
        curPers.magicStandBase.visible = false;
    }
    this.paksReadyAndParse();
};
canvas.app.battle.engine.MEve.prototype.oppNew = function () {
    var parser = canvas.app.battle.model.serverParser;
    var conf = canvas.app.battle.model;
    var baseLnk = this.baseLnk;
    canvas.app.battle.log("mEve oppNew: paramsCount= " + parser.params.length);
    baseLnk.view.topTimer.deactivate();
    conf.newOppId = parser.params[2].val;
    canvas.app.battle.log("         new opp_id=" + conf.newOppId);
    baseLnk.view.flagOpp.visible = false;
    var np = baseLnk.players[conf.newOppId];
    if (np) {
        if (np.mFlagId != 0) {
            baseLnk.view.flagOpp.visible = true;
        } else {
            baseLnk.view.flagOpp.visible = false;
        }
    }
    if (conf.oppId == conf.newOppId) {
        this.paksReadyAndParse();
        return;
    }
    if (conf.oppId != 0) {
        var cur_opp = baseLnk.players[conf.oppId];
        if (cur_opp) {
            cur_opp.addFuncHide = this.oppNewHided.bind(this);
            cur_opp.hideBody();
            baseLnk.view.flagOpp.visible = false;
            if (np && np.mFlagId != 0) {
                baseLnk.view.flagOpp.visible = true;
            } else {
                baseLnk.view.flagOpp.visible = false;
            }
        } else {
            canvas.app.battle.log("         Err01: opp pers class is null (opp_id=" + String(conf.oppId) + ")", 16711680);
            return;
        }
    } else {
        baseLnk.view.mainPopup.deactivate();
        conf.oppId = conf.newOppId;
        conf.paksReady = true;
        baseLnk.mFunc.persInfo(conf.oppId);
    }
    baseLnk.view.centerView.cSpells.restoreCooldowns();
};
canvas.app.battle.engine.MEve.prototype.oppNewHided = function (par) {
    var parser = canvas.app.battle.model.serverParser;
    var conf = canvas.app.battle.model;
    var baseLnk = this.baseLnk;
    canvas.app.battle.log("mEve oppNewHided: persId=" + par.pers_id);
    baseLnk.view.mainPopup.deactivate();
    baseLnk.view.effectsP2.initEffects([]);
    baseLnk.view.oppNick.unshow();
    baseLnk.view.oppLevel.setLevel("");
    baseLnk.view.hpmp.setHpOpp(0, 0);
    baseLnk.view.hpmp.setMpOpp(0, 0);
    conf.oppId = conf.newOppId;
    conf.paksReady = true;
    baseLnk.mFunc.persInfo(conf.oppId);
};
canvas.app.battle.engine.MEve.prototype.fightState = function () {
    var parser = canvas.app.battle.model.serverParser;
    var conf = canvas.app.battle.model;
    var baseLnk = this.baseLnk;
    canvas.app.battle.log("mEve fightState: paramsCount= " + parser.params.length);
    var iPersId = parser.params[2].val;
    var iPersStatus = conf.parsePersStatus(parser.params[3].val, parser.params[4].val);
    var iPersFlags = parser.params[5].val;
    var iPersHP = parser.params[6].val;
    var iPersHPmax = parser.params[7].val;
    var iPersMP = parser.params[8].val;
    var iPersMPmax = parser.params[9].val;
    var active_pers = iPersId == conf.persId || iPersId == conf.oppId ? true : false;
    canvas.app.battle.log("          pers_id=" + String(iPersId) + " status=" + String(iPersStatus) + " hp=" + String(iPersHP) + "/" + String(iPersHPmax) + " mp=" + String(iPersMP) + " flags=" + iPersFlags.toString(2));
    if (iPersId == conf.myPersId && iPersStatus != canvas.app.battle.Const.STATUS_DEAD) baseLnk.setupWatchFightBts(false);
    var next_pak_flg = true;
    if (conf.memDat[iPersId]) {
        conf.memDat[iPersId].maxHP = iPersHPmax;
        conf.memDat[iPersId].maxMP = iPersMPmax;
        conf.memDat[iPersId].status = iPersStatus;
        var outStr = iPersId + conf.ch1 + iPersStatus + conf.ch1 + String(iPersHP) + conf.ch1 + String(iPersHPmax) + conf.ch1 + String(iPersMP) + conf.ch1 + String(iPersMPmax) + conf.ch1 + iPersFlags;
        if (!conf.mlBufferHash[iPersId]) {
            conf.mlBufferQueue.push(iPersId);
        }
        conf.mlBufferHash[iPersId] = outStr;
        conf.evActivityTmp++;
        var old_persFlags = conf.memDat[iPersId].persFlags;
        conf.memDat[iPersId].persFlags = iPersFlags;
        if (active_pers) {
            var dHP;
            var dMP;
            if (iPersStatus == canvas.app.battle.Const.STATUS_DEAD) {
                if (baseLnk.players[iPersId]) {
                    baseLnk.players[iPersId].clearAdditionalEffects();
                    baseLnk.players[iPersId].magicStandBase.visible = false;
                }
                if (iPersId == conf.oppId) {
                    canvas.app.battle.log("        opp die (apply <b>dieBody</b>)");
                    conf.oppStatus = canvas.app.battle.Const.STATUS_DEAD;
                    next_pak_flg = false;
                    baseLnk.players[iPersId].addFuncDie = this.fightStateDead.bind(this);
                    baseLnk.players[iPersId].dieBody();
                } else {
                    canvas.app.battle.log("        pers die (apply <b>dieBody</b>)");
                    conf.persStatus = canvas.app.battle.Const.STATUS_DEAD;
                    conf.persHpMax = iPersHPmax;
                    conf.persMpMax = iPersMPmax;
                    dHP = iPersHP - conf.persHp;
                    if (dHP != 0) {
                        baseLnk.view.showDmg([{ tar: "pers", kick: dHP < 0 ? canvas.app.battle.Const.DMG_KICK_WOUND : canvas.app.battle.Const.DMG_KICK_CURE, val: dHP }]);
                    }
                    conf.persHp = iPersHP;
                    conf.persMp = iPersMP;
                    baseLnk.view.hpmp.setHpPers(conf.persHp, conf.persHpMax);
                    baseLnk.view.hpmp.setMpPers(conf.persMp, conf.persMpMax);
                    next_pak_flg = false;
                    this.fightStateDead({ pers_id: conf.persId });
                }
            } else {
                if (baseLnk.players[iPersId]) baseLnk.players[iPersId].magicStandBase.visible = true;
                if (iPersId == conf.persId) {
                    baseLnk.chekStatusForResurection();
                    conf.persStatus = iPersStatus;
                    conf.persHpMax = iPersHPmax;
                    conf.persMpMax = iPersMPmax;
                    dHP = iPersHP - conf.persHp;
                    if (dHP != 0) {
                        baseLnk.view.showDmg([{ tar: "pers", kick: dHP < 0 ? canvas.app.battle.Const.DMG_KICK_WOUND : canvas.app.battle.Const.DMG_KICK_CURE, val: dHP }]);
                    }
                    dMP = iPersMP - conf.persMp;
                    if (dMP != 0) {
                        baseLnk.view.showDmg([{ tar: "pers", kick: dMP < 0 ? canvas.app.battle.Const.DMG_KICK_WOUND : canvas.app.battle.Const.DMG_KICK_MANA, val: dMP }]);
                    }
                    conf.persHp = iPersHP;
                    conf.persMp = iPersMP;
                    baseLnk.view.hpmp.setHpPers(conf.persHp, conf.persHpMax);
                    baseLnk.view.hpmp.setMpPers(conf.persMp, conf.persMpMax);
                    baseLnk.updPersMPLvl();
                } else if (iPersId == conf.oppId) {
                    conf.oppStatus = iPersStatus;
                    conf.oppHpMax = iPersHPmax;
                    conf.oppMpMax = iPersMPmax;
                    conf.oppHp = iPersHP;
                    conf.oppMp = iPersMP;
                    baseLnk.view.hpmp.setHpOpp(conf.oppHp, conf.oppHpMax);
                    baseLnk.view.hpmp.setMpOpp(conf.oppMp, conf.oppMpMax);
                } else {
                    canvas.app.battle.log("          WARN: unknown iPersId=" + String(iPersId) + " in fightState", 16711680);
                }
                if (old_persFlags != iPersFlags) {
                    var newPostLabel = baseLnk.getPostLabel(iPersId);
                    baseLnk.players[iPersId].gotoAndPlay(newPostLabel);
                }
            }
        }
        if (iPersId == conf.myPersId && conf.oppId && baseLnk.view.centerView.cDot.btIsOn) baseLnk.testCenterMode();
        if (conf.memDat[iPersId].mem_flag != true) {
            conf.memDat[iPersId].mem_flag = true;
            baseLnk.mFunc.fightState(iPersId, 0);
        }
    } else {
        if (conf.fullMlLoaded) {
            baseLnk.mFunc.fightState(iPersId, 0);
        } else {
            canvas.app.battle.log("          full MemberList not loaded yet", 153);
        }
    }
    if (next_pak_flg) {
        this.paksReadyAndParse();
    }
};
canvas.app.battle.engine.MEve.prototype.fightStateDead = function (par) {
    var parser = canvas.app.battle.model.serverParser;
    var conf = canvas.app.battle.model;
    var baseLnk = this.baseLnk;
    canvas.app.battle.log("mEve fightStateDead: persId=" + par.pers_id);
    if (conf.oppId == 0) {
        this.paksReadyAndParse();
    } else {
        baseLnk.players[conf.oppId].addFuncHide = this.oppWaitHided.bind(this);
        baseLnk.players[conf.oppId].hideBody();
    }
    baseLnk.view.showMainPopup(canvas.app.battle.Const.POP_ST_WAIT_BT);
};
canvas.app.battle.engine.MEve.prototype.newPers = function () {
    var parser = canvas.app.battle.model.serverParser;
    var conf = canvas.app.battle.model;
    var baseLnk = this.baseLnk;
    canvas.app.battle.log("mEve newPers: paramsCount= " + parser.params.length);
    var curId = parser.params[2].val;
    var curStatus = conf.parsePersStatus(parser.params[3].val, parser.params[4].val);
    var curPersFlags = parser.params[5].val;
    var curNick = parser.params[6].val;
    var curData = parser.params[7].val;
    var curLevel = parser.params[8].val;
    var curTeam = parser.params[9].val;
    var curHP = parser.params[10].val;
    var curMaxHP = parser.params[11].val;
    var curMP = parser.params[12].val;
    var curMaxMP = parser.params[13].val;
    var isBot;
    var isShadow;
    var sk;
    isBot = conf.testFlag(curPersFlags, canvas.app.battle.Const.FS_PF_BOT);
    isShadow = conf.testFlag(curPersFlags, canvas.app.battle.Const.FS_PF_SHADOW);
    conf.testPvpStatus(curTeam, isBot);
    sk = 0;
    if (conf.memDat[curId]) {
        if (conf.memDat[curId].sk) {
            sk = conf.memDat[curId].sk;
        }
    }
    conf.memDat[curId] = { maxHP: curMaxHP, maxMP: curMaxMP, nick: curNick, level: curLevel, persFlags: curPersFlags, sk: sk, team: curTeam, mem_flag: true, status: curStatus };
    baseLnk.mFunc.full_g2m_answ_str +=
        String(curId) +
        conf.ch1 +
        curNick +
        conf.ch1 +
        String(curTeam) +
        conf.ch1 +
        String(curStatus) +
        conf.ch1 +
        String(curHP) +
        conf.ch1 +
        String(curMaxHP) +
        conf.ch1 +
        String(curMP) +
        conf.ch1 +
        String(curMaxMP) +
        conf.ch1 +
        curData +
        conf.ch1 +
        String(curLevel) +
        conf.ch1 +
        String(isBot) +
        conf.ch1 +
        String(curPersFlags) +
        conf.ch1 +
        String(conf.fightId) +
        conf.ch1 +
        String(isShadow) +
        conf.ch2;
    baseLnk.mFunc.full_g2m_srt_buff++;
    canvas.app.battle.log("           ---------");
    canvas.app.battle.log("           isBot: " + isBot);
    canvas.app.battle.log("           curNick: " + curNick);
    canvas.app.battle.log("           curId: " + String(curId));
    canvas.app.battle.log("           curStatus: " + String(curStatus));
    canvas.app.battle.log("           curData: " + curData);
    canvas.app.battle.log("           persFlags: " + curPersFlags);
    canvas.app.battle.log("           --------");
    baseLnk.mFunc.full_g2m_answ_str += String(conf.myPersId);
    if (conf.fullReqLoaded) {
        if (baseLnk.mFunc.full_g2m_answ_str.length < 20 * 1024) {
            baseLnk.sendData("mem", "pak1@" + baseLnk.mFunc.full_g2m_answ_str);
        } else {
            var tmp1 = baseLnk.mFunc.full_g2m_answ_str;
            while (tmp1.length > 0) {
                baseLnk.sendData("mem", "pak1s@" + tmp1.substr(0, 15 * 1024));
                tmp1 = tmp1.substr(15 * 1024);
            }
            baseLnk.sendData("mem", "pak1s@done");
        }
    }
    if (canvas.app.battle.Const.WATCH_FIGHT || conf.persStatus == canvas.app.battle.Const.STATUS_DEAD) {
        baseLnk.setupWatchFightBts(true, conf.persId);
        baseLnk.view.showMainPopup(canvas.app.battle.Const.POP_ST_WAIT_BT);
    }
    baseLnk.mFunc.full_g2m_answ_str = "";
    baseLnk.mFunc.full_g2m_srt_buff = 0;
    conf.fullMlLoaded = true;
    this.paksReadyAndParse();
};
canvas.app.battle.engine.MEve.prototype.attackWait = function () {
    var parser = canvas.app.battle.model.serverParser;
    var conf = canvas.app.battle.model;
    var baseLnk = this.baseLnk;
    canvas.app.battle.log("mEve attackWait: paramsCount= " + parser.params.length);
    baseLnk.chekStatusForResurection();
    conf.persStatus = canvas.app.battle.Const.STATUS_PASSIVE;
    baseLnk.centerVisible(false);
    baseLnk.view.topTimer.activate(conf.getLostTime());
    this.paksReadyAndParse();
};
canvas.app.battle.engine.MEve.prototype.attackNow = function () {
    var parser = canvas.app.battle.model.serverParser;
    var conf = canvas.app.battle.model;
    var baseLnk = this.baseLnk;
    canvas.app.battle.log("mEve attackNow: paramsCount= " + parser.params.length);
    var old_persFlags;
    baseLnk.chekStatusForResurection();
    conf.persStatus = canvas.app.battle.Const.STATUS_ACTIVE;
    baseLnk.centerVisible(true);
    baseLnk.view.centerView.checkSpells(parser.params[2].val);
    baseLnk.view.centerView.coolDownStart(parser.params[2].val);
    if (conf.memDat[conf.oppId]) {
        old_persFlags = conf.memDat[conf.oppId].persFlags;
        conf.memDat[conf.oppId].persFlags = parser.params[2].val;
        if (old_persFlags != conf.memDat[conf.oppId].persFlags) {
            var newPostLabel = baseLnk.getPostLabel(conf.oppId);
            baseLnk.players[conf.oppId].gotoAndPlay(newPostLabel);
        }
    }
    baseLnk.view.topTimer.activate(conf.getLostTime());
    this.paksReadyAndParse();
};
canvas.app.battle.engine.MEve.prototype.attack = function () {
    var parser = canvas.app.battle.model.serverParser;
    var conf = canvas.app.battle.model;
    var baseLnk = this.baseLnk;
    canvas.app.battle.log("mEve attack: paramsCount= " + parser.params.length + " pers_id=" + parser.params[2].val + "; opp_id=" + parser.params[3].val);
    if (conf.oppId == 0) {
        canvas.app.battle.log("                 WARN: no opponent, attack incorrect", 16711680);
        this.paksReadyAndParse();
        return;
    }
    conf.waitingDamageCnt = 2;
    conf.delayedAttackData = { persId: parser.params[2].val, oppId: parser.params[3].val, kick: parser.params[4].val, part: parser.params[5].val, rnd: parser.params[6].val, animData: parser.params[7].val };
    this.paksReadyAndParse();
};
canvas.app.battle.engine.MEve.prototype.applyAttack = function () {
    var parser = canvas.app.battle.model.serverParser;
    var conf = canvas.app.battle.model;
    var baseLnk = this.baseLnk;
    canvas.app.battle.log("mEve applyAttack: paramsCount= " + parser.params.length + " opp_id=" + conf.oppId);
    if (!conf.delayedAttackData) {
        canvas.app.battle.log("            ERR: delayed_attack_data is null", 16711680);
        return;
    }
    baseLnk.view.topTimer.deactivate();
    conf.blockTime = 0;
    var ApersId = conf.delayedAttackData.persId;
    var AoppId = conf.delayedAttackData.oppId;
    var curKick = conf.delayedAttackData.kick;
    var curPart = conf.delayedAttackData.part;
    var curRndX = conf.delayedAttackData.rnd;
    var curRnd1 = (curRndX & 255) / 255;
    var curRnd2 = (curRndX >> 8) / 255;
    var cmbAnim = conf.delayedAttackData.animData ? parseInt(conf.delayedAttackData.animData) : 0;
    var pers_data = conf.delayedAttackData["data_" + String(ApersId)];
    var opp_data = conf.delayedAttackData["data_" + String(AoppId)];
    if (!pers_data) {
        canvas.app.battle.log("            ERR: no data for pers_id=" + String(ApersId), 16711680);
        this.paksReadyAndParse();
        return;
    } else if (opp_data == null) {
        canvas.app.battle.log("            ERR: no data for opp_id=" + String(AoppId), 16711680);
        this.paksReadyAndParse();
        return;
    }
    var curKickN = curKick;
    var curPartStr = canvas.app.battle.Const.PART_STR[curPart];
    var curKickStr = canvas.app.battle.Const.KICK_STR[curKick];
    var curKickStrE = curKickStr;
    var curPers;
    var curOpp;
    var DMG_conf = [];
    if (ApersId == conf.persId) {
        conf.oppHp -= opp_data.dmg;
        conf.persHp -= pers_data.dmg;
        baseLnk.view.comboView.newHit(curPart.toString(), cmbAnim != 0);
        canvas.app.battle.log("            [PERSATTACK]  DMG[" + opp_data.dmg + "], PART[" + curPart + "/" + curPartStr + "] kick[" + curKick + "/" + curKickStr + "]", 170);
        if (conf.oppHp <= 0) {
            canvas.app.battle.log("            (!) opp DIE", 170);
            conf.oppStatus = canvas.app.battle.Const.STATUS_DEAD;
            curKick = 0;
            curKickStrE = canvas.app.battle.Const.KICK_STR[curKick];
            if (baseLnk.players[conf.oppId]) {
                baseLnk.players[conf.oppId].magicStandBase.visible = false;
            }
        }
        curPers = baseLnk.players[conf.persId];
        curOpp = baseLnk.players[conf.oppId];
        if (baseLnk.view.players.getChildIndex(baseLnk.view.player1) < baseLnk.view.players.getChildIndex(baseLnk.view.player2)) {
            baseLnk.view.players.swapChildren(baseLnk.view.player1, baseLnk.view.player2);
        }
        if (opp_data.absorb != 0) {
            DMG_conf.push({ tar: "opp", kick: canvas.app.battle.Const.DMG_KICK_ABSORB, val: opp_data.absorb });
        }
        if (opp_data.resist != 0) {
            DMG_conf.push({ tar: "opp", kick: canvas.app.battle.Const.DMG_KICK_RESIST, val: opp_data.resist });
        }
        if (opp_data.dmg != 0) {
            DMG_conf.push({ tar: "opp", kick: curKickN, crit: opp_data.crit, val: -opp_data.dmg, new_tar_HP: conf.oppHp, my_dmg: true });
        }
        if (DMG_conf.length == 0 && (curKickN == canvas.app.battle.Const.DMG_KICK_DODGE || curKickN == canvas.app.battle.Const.DMG_KICK_BLOCK)) {
            DMG_conf.push({ tar: "opp", kick: curKickN, crit: 0, val: 0 });
        }
        if (pers_data.dmg != 0) {
            DMG_conf.push({ tar: "pers", kick: pers_data.dmg < 0 ? canvas.app.battle.Const.DMG_KICK_CURE : canvas.app.battle.Const.DMG_KICK_WOUND, crit: 0, val: -pers_data.dmg, new_tar_HP: conf.persHp });
        }
        curPers.dmgConf = DMG_conf;
    } else {
        canvas.app.battle.log("            [OPPATTACK]  DMG[" + opp_data.dmg + "], PART[" + curPart + "/" + curPartStr + "] kick[" + curKick + "/" + curKickStr + "]", 170);
        conf.oppHp -= pers_data.dmg;
        conf.persHp -= opp_data.dmg;
        if (conf.persHp <= 0) {
            canvas.app.battle.log("            (!) pers DIE", 170);
            conf.persStatus = canvas.app.battle.Const.STATUS_DEAD;
            conf.persDown = true;
            curKick = 0;
            curKickStrE = canvas.app.battle.Const.KICK_STR[curKick];
            if (baseLnk.players[conf.persId]) {
                baseLnk.players[conf.persId].magicStandBase.visible = false;
            }
        }
        curPers = baseLnk.players[conf.oppId];
        curOpp = baseLnk.players[conf.persId];
        if (baseLnk.view.players.getChildIndex(baseLnk.view.player1) > baseLnk.view.players.getChildIndex(baseLnk.view.player2)) {
            baseLnk.view.players.swapChildren(baseLnk.view.player1, baseLnk.view.player2);
        }
        if (opp_data.absorb != 0) {
            DMG_conf.push({ tar: "pers", kick: canvas.app.battle.Const.DMG_KICK_ABSORB, val: opp_data.absorb });
        }
        if (opp_data.resist != 0) {
            DMG_conf.push({ tar: "pers", kick: canvas.app.battle.Const.DMG_KICK_RESIST, val: opp_data.resist });
        }
        if (opp_data.dmg != 0) {
            DMG_conf.push({ tar: "pers", kick: curKickN, crit: opp_data.crit, val: -opp_data.dmg, new_tar_HP: conf.oppHp });
        }
        if (DMG_conf.length == 0 && (curKickN == canvas.app.battle.Const.DMG_KICK_DODGE || curKickN == canvas.app.battle.Const.DMG_KICK_BLOCK)) {
            DMG_conf.push({ tar: "pers", kick: curKickN, crit: 0, val: 0 });
        }
        if (pers_data.dmg != 0) {
            DMG_conf.push({ tar: "opp", kick: pers_data.dmg < 0 ? canvas.app.battle.Const.DMG_KICK_CURE : canvas.app.battle.Const.DMG_KICK_WOUND, crit: 0, val: -pers_data.dmg, new_tar_HP: conf.persHp, my_dmg: true, dont_inc_totDMG: true });
        }
        curPers.dmgConf = DMG_conf;
    }
    var action_label;
    if (cmbAnim != 0) {
        if (ApersId == conf.persId) {
            baseLnk.view.comboView.comboComplete();
        }
        baseLnk.view.playComboHit();
        action_label = "combo_" + String(cmbAnim);
        canvas.app.battle.log("            COMBO label=" + action_label);
        if (curPers.allLabels[action_label]) {
            curPart = 0;
            curPartStr = canvas.app.battle.Const.PART_STR[curPart];
        } else {
            canvas.app.battle.log('            WARN: this pers have no label "' + action_label + '"', 10027008);
            action_label = null;
        }
    }
    if (!action_label) {
        var action_array_cur = curPers.sk.action_array_all[curPartStr];
        action_label = action_array_cur[Math.round(curRnd1 * (action_array_cur.length - 1))];
    }
    var kick_array_cur = curOpp.sk.kick_array_all[curPartStr];
    var kick_array_act = kick_array_cur[action_label];
    var kick_array_kick = kick_array_act[curKickStrE];
    var kick_label = kick_array_kick[Math.round(curRnd2 * (kick_array_kick.length - 1))];
    canvas.app.battle.log("            //action_label = " + action_label, 5570815);
    canvas.app.battle.log("            //sk = " + curPers, 5570815);
    canvas.app.battle.log("            //conf = " + curPers.sk.ActionConf[action_label], 5570815);
    canvas.app.battle.log("            //reaction_label = " + kick_label, 5570815);
    canvas.app.battle.log("            //sk = " + curOpp, 5570815);
    canvas.app.battle.log("            //conf = " + curOpp.sk.ReactionConf[kick_label], 5570815);
    canvas.app.battle.log("            attack point 1");
    var curSndConf;
    var curSndGroup;
    if (curKickStr == "wound") {
        curOpp.sndConf = null;
        curSndConf = curPers.sk.ActionSound[action_label];
        canvas.app.battle.log("            curSndConf=" + curSndConf);
        canvas.app.battle.log("            curSndConf.srd=" + curSndConf.std);
        if (curSndConf.std) {
            switch (curKick) {
                case 0:
                case 3:
                    curSndGroup = canvas.app.battle.Const.SND_GROUPS["wound"];
                    break;
                case 2:
                    curSndGroup = canvas.app.battle.Const.SND_GROUPS["crit"];
                    break;
                default:
                    curSndGroup = canvas.app.battle.Const.SND_GROUPS["wound"];
                    canvas.app.battle.log("            WARN: 01 unknown kick = " + String(curKick), 16711680);
            }
            curPers.sndConf = { std: true, snd_name: curSndGroup[Math.floor(Math.random() * curSndGroup.length)] };
            canvas.app.battle.log("            standart sound : " + curPers.sndConf.snd_name);
        } else if (!curSndConf.std && curSndConf.self) {
            curPers.sndConf = { std: false, snd_name: curSndConf.self };
            canvas.app.battle.log("            internal sound : " + curSndConf.self);
        } else {
            canvas.app.battle.log("            WARN: INCORRECT ActionSound", 16711680);
        }
    } else {
        curPers.sndConf = null;
        curSndConf = curOpp.sk.ActionSound[kick_label];
        if (curSndConf.std) {
            switch (curKick) {
                case 1:
                    curSndGroup = canvas.app.battle.Const.SND_GROUPS["dodge"];
                    break;
                case 4:
                    curSndGroup = canvas.app.battle.Const.SND_GROUPS["block"];
                    break;
                default:
                    curSndGroup = canvas.app.battle.Const.SND_GROUPS["block"];
                    canvas.app.battle.log("            WARN: 02 unknown kick = " + String(curKick), 16711680);
            }
            curOpp.sndConf = { std: true, snd_name: curSndGroup[Math.floor(Math.random() * curSndGroup.length)] };
            canvas.app.battle.log("            standart sound : " + curOpp.sndConf.snd_name);
        } else if (!curSndConf.std && curSndConf.self) {
            curOpp.sndConf = { std: false, snd_name: curSndConf.self };
            canvas.app.battle.log("            internal sound : " + curSndConf.self);
        } else {
            canvas.app.battle.log("            WARN: INCORRECT ActionSound", 16711680);
        }
    }
    canvas.app.battle.log("            attack point 2");
    curPers.inMotion = true;
    curPers.gotoAndPlay(action_label);
    curOpp.inMotion = true;
    curOpp.setReaction({ r_label: kick_label, r_delay: curPers.sk.ActionConf[action_label] - curOpp.sk.ReactionConf[kick_label] });
};
canvas.app.battle.engine.MEve.prototype.fightLog = function () {
    var parser = canvas.app.battle.model.serverParser;
    var conf = canvas.app.battle.model;
    var baseLnk = this.baseLnk;
    canvas.app.battle.log("mEve fightLog: paramsCount= " + parser.params.length);
    var xpers1 = conf.memDat[parser.params[3].val];
    var xpers2 = conf.memDat[parser.params[4].val];
    if (parser.params[4].val == 0) {
        xpers2 = { nick: "", level: 0 };
    }
    if (!xpers1 || !xpers2) {
        canvas.app.battle.log("           ERR: pers_id " + parser.params[3].val + " or " + parser.params[4].val + " is null in memDat (can not send fightlog)", 16711680);
    } else {
        if (!canvas.Config.isLocal) {
            if (parser.params[5].val == 4) {
                parser.params[8].val = conf.getEffectLogImage(parser.params[3].val == conf.persId ? canvas.app.battle.Const.EFFECT_TYPE_OWNER : canvas.app.battle.Const.EFFECT_TYPE_OTHER, parser.params[8].val);
            }
            fightUpdateLog(
                parser.params[2].val,
                parser.params[3].val,
                xpers1.nick,
                xpers1.level,
                parser.params[4].val,
                xpers2.nick,
                xpers2.level,
                parser.params[5].val,
                parser.params[6].val,
                parser.params[7].val,
                parser.params[8].val,
                parser.params[9].val
            );
        }
    }
    this.paksReadyAndParse();
};
canvas.app.battle.engine.MEve.prototype.attackTimeout = function () {
    var parser = canvas.app.battle.model.serverParser;
    var conf = canvas.app.battle.model;
    var baseLnk = this.baseLnk;
    canvas.app.battle.log("mEve attackTimeout: paramsCount= " + parser.params.length);
    baseLnk.centerVisible(false);
    this.paksReadyAndParse();
};
canvas.app.battle.engine.MEve.prototype.fightOver = function (showResult) {
    if (showResult == undefined) showResult = true;
    var parser = canvas.app.battle.model.serverParser;
    var conf = canvas.app.battle.model;
    var baseLnk = this.baseLnk;
    canvas.app.battle.log("mEve fightOver: paramsCount= " + parser.params.length + ", showResult=" + showResult);
    baseLnk.sendData("items", "Clean@");
    if (showResult) {
        canvas.app.battle.log("            winTeam=" + String(parser.params[2].val), 10027008);
        if (parser.params[2].val == conf.persTeam) {
            baseLnk.sndPlay("fightover_victory");
            baseLnk.view.showMainPopup(canvas.app.battle.Const.POP_ST_VISCORY);
        } else {
            baseLnk.sndPlay("fightover_defeat");
            baseLnk.view.showMainPopup(canvas.app.battle.Const.POP_ST_DEFEAT);
        }
        conf.fightResult = parser.params[2].val;
    }
    conf.fightResult = parser.params[2] ? parser.params[2].val : 0;
    baseLnk.view.messagePopup.deactivate();
    baseLnk.clearSyncTimeout();
    baseLnk.conn.stopTransfers();
    baseLnk.view.topTimer.deactivate();
    baseLnk.centerVisible(false);
};
canvas.app.battle.engine.MEve.prototype.srvShutdown = function () {
    var parser = canvas.app.battle.model.serverParser;
    var conf = canvas.app.battle.model;
    var baseLnk = this.baseLnk;
    canvas.app.battle.log("mEve srvShutdown: paramsCount= " + parser.params.length);
    baseLnk.view.showMainPopup(canvas.app.battle.Const.POP_ST_ERROR, canvas.app.battle.Const.POP_ER_SHUTDOWN);
};
canvas.app.battle.engine.MEve.prototype.effectApply = function (rid) {
    var parser = canvas.app.battle.model.serverParser;
    var conf = canvas.app.battle.model;
    var baseLnk = this.baseLnk;
    canvas.app.battle.log("mEve effectApply: paramsCount= " + parser.params.length + ", rid=" + rid);
    var cmdIndex = parser.params.pop().val;
    var iPersId = parser.params[2].val;
    var curArtId = parser.params[3].val;
    var curDelta = parser.params[4].val;
    var curTitle = parser.params[5].val;
    var curPic = parser.params[6].val;
    var curAnimData = parser.params[7].val;
    var cureetime = parser.params[8].val;
    var turnsLeft = parser.params[9].val;
    if (conf.testCurrentAura(curArtId, iPersId, curDelta < 0)) baseLnk.updateAuras(iPersId);
    if (iPersId == conf.persId || iPersId == conf.oppId) {
        var curPers_effects = iPersId == conf.persId ? baseLnk.view.effectsP1 : baseLnk.view.effectsP2;
        if ((iPersId == conf.persId && cmdIndex > conf.persLastEffectsUpdateIndex) || (iPersId == conf.oppId && cmdIndex > conf.oppLastEffectsUpdateIndex)) {
            curPers_effects.deltaItem(curArtId, curTitle, canvas.Config.artifactsPath + curPic, curDelta, curAnimData, cureetime, turnsLeft);
        }
        var curPers = baseLnk.players[iPersId];
        if (curPers) {
            var ss = curAnimData.split("/");
            canvas.app.battle.log("          animData = " + ss.join("|"));
            if (ss.length > 2) {
                if (ss[2] != "null") {
                    var i;
                    var parsed_effects_abs = conf.parser.parseAdditionalEffectsData(canvas.app.battle.Const.AEFF_ABSORB, ss[2]);
                    var cur_effect;
                    for (i = 0; i < parsed_effects_abs.length; i++) {
                        cur_effect = parsed_effects_abs[i];
                        if (curPers.additionalEffects[cur_effect]) {
                            if (!curPers_effects.haveAnimData(cur_effect)) {
                                curPers.removeAdditionalEffect(cur_effect);
                            }
                        } else {
                            if (curPers_effects.haveAnimData(cur_effect)) {
                                curPers.showAdditionalEffect(cur_effect);
                            }
                        }
                    }
                }
            }
        }
    } else {
        canvas.app.battle.log("          WARN: pers_id=" + String(iPersId) + " not active");
    }
    this.paksReadyAndParse();
};
canvas.app.battle.engine.MEve.prototype.updateItems = function () {
    var parser = canvas.app.battle.model.serverParser;
    var conf = canvas.app.battle.model;
    var baseLnk = this.baseLnk;
    canvas.app.battle.log("mEve updateItems: paramsCount= " + parser.params.length);
    this.effectsList = "";
    var curEffId;
    var curEffCnt;
    var curEffFlags;
    var curEffcdLeft;
    for (var g = 2; g < parser.params.length; g += 4) {
        curEffId = parser.params[g].val;
        curEffCnt = parser.params[g + 1].val;
        curEffFlags = parser.params[g + 2].val;
        curEffcdLeft = parser.params[g + 3].val;
    }
    canvas.app.battle.log("                 effId=" + curEffId + " cnt=" + curEffCnt + " flags=0x" + curEffFlags.toString(16) + " cdLeft=" + curEffcdLeft, 6710886);
    var disabled = conf.testFlag(curEffFlags, canvas.app.battle.Const.FS_PEF_DISABLED) ? "1" : "0";
    this.effectsList += curEffId.toString() + conf.ch1 + disabled + conf.ch2;
    this.myEffectsListDelayCurrent = this.myEffectsListDelayBegin;
    this.sendDisEffectsList();
};
canvas.app.battle.engine.MEve.prototype.sendDisEffectsList = function () {
    if (!this.myEffectsGetted && this.effectsList != "") {
        this.myEffectsGetted = baseLnk.sendData("items", "Disabled@" + this.effectsList);
    }
    if (this.myEffectsGetted) {
        this.myEffectsGetted = false;
        this.paksReadyAndParse();
        return;
    }
    if (this.myEffectsListDelayCurrent < this.myEffectsListDelayMax) this.myEffectsListDelayCurrent += this.myEffectsListDelayDelta;
    this.myEffectsListIV = setTimeout(this.sendDisEffectsList.bind(this), this.myEffectsListDelayCurrent);
};
canvas.app.battle.engine.MEve.prototype.manaConsum = function () {
    var parser = canvas.app.battle.model.serverParser;
    var conf = canvas.app.battle.model;
    var baseLnk = this.baseLnk;
    canvas.app.battle.log("mEve manaConsum: paramsCount= " + parser.params.length);
    var e_persId = parser.params[2].val;
    var e_mana = -parser.params[3].val;
    var mp_ar = [];
    if (e_persId == conf.persId) {
        if (e_mana != 0) {
            conf.persMp += e_mana;
            mp_ar.push({ tar: "pers", kick: canvas.app.battle.Const.DMG_KICK_MANA, val: e_mana });
            if (conf.persMp < 0) conf.persMp = 0;
            baseLnk.view.hpmp.setMpPers(conf.persMp, conf.persMpMax);
            baseLnk.updPersMPLvl();
        }
        if (mp_ar.length > 0 && (e_mana > 0 || (e_mana < 0 && conf.persStatus == canvas.app.battle.Const.STATUS_PASSIVE))) {
            baseLnk.view.showMP(mp_ar);
        }
    } else if (e_persId == conf.oppId) {
        if (e_mana != 0) {
            conf.oppMp += e_mana;
            mp_ar.push({ tar: "opp", kick: canvas.app.battle.Const.DMG_KICK_MANA, val: e_mana });
            if (conf.oppMp < 0) conf.oppMp = 0;
            baseLnk.view.hpmp.setMpOpp(conf.oppMp, conf.oppMpMax);
        }
        if (mp_ar.length > 0 && (e_mana > 0 || (e_mana < 0 && conf.oppStatus == canvas.app.battle.Const.STATUS_PASSIVE))) {
            baseLnk.view.showMP(mp_ar);
        }
    } else {
        canvas.app.battle.log("               WARN: pers_id=" + String(e_persId) + " not active", 16711680);
    }
    this.paksReadyAndParse();
};
canvas.app.battle.engine.MEve.prototype.energyConsum = function () {
    var parser = canvas.app.battle.model.serverParser;
    var conf = canvas.app.battle.model;
    var baseLnk = this.baseLnk;
    canvas.app.battle.log("mEve energyConsum: paramsCount= " + parser.params.length);
    var e_persId = parser.params[2].val;
    var e_energy = -parser.params[3].val;
    if (e_persId == conf.persId) {
        conf.bowEnergyValue += e_energy;
        baseLnk.view.bowPanel.setProgress(conf.bowEnergyValue, conf.bowEnergyMax);
    }
    this.paksReadyAndParse();
};
canvas.app.battle.engine.MEve.prototype.energyRegen = function () {
    var parser = canvas.app.battle.model.serverParser;
    var conf = canvas.app.battle.model;
    var baseLnk = this.baseLnk;
    canvas.app.battle.log("mEve energyRegen: paramsCount= " + parser.params.length);
    var e_persId = parser.params[2].val;
    var e_energy = parser.params[3].val;
    if (e_persId == conf.persId) {
        conf.bowEnergyValue += e_energy;
        baseLnk.view.bowPanel.setProgress(conf.bowEnergyValue, conf.bowEnergyMax);
    }
    this.paksReadyAndParse();
};
canvas.app.battle.engine.MEve.prototype.arrowConsum = function () {
    var parser = canvas.app.battle.model.serverParser;
    var conf = canvas.app.battle.model;
    var baseLnk = this.baseLnk;
    canvas.app.battle.log("mEve effectUse: arrowConsum= " + parser.params.length);
    var e_persId = parser.params[2].val;
    var e_arrows = -parser.params[3].val;
    if (e_persId == conf.persId) {
        baseLnk.setBowsInfo(conf.arrowsCount + e_arrows, conf.bowEnergyValue, conf.bowEnergyMax);
    }
    this.paksReadyAndParse();
};
canvas.app.battle.engine.MEve.prototype.damage = function () {
    var parser = canvas.app.battle.model.serverParser;
    var conf = canvas.app.battle.model;
    var baseLnk = this.baseLnk;
    canvas.app.battle.log("mEve damage: paramsCount= " + parser.params.length);
    var e_persId = parser.params[2].val;
    var e_dmg = parser.params[3].val;
    var e_dmgType = parser.params[4].val;
    var e_crit = parser.params[5].val;
    var e_absorb = parser.params[6].val;
    var e_aid = parser.params[7].val;
    var e_resist = parser.params[8].val;
    if (conf.waitingDamageCnt == -1) {
        canvas.app.battle.log("         <b>SIMPLE DAMAGE</b>");
        canvas.app.battle.log("         // e_persId  : " + String(e_persId), 6710886);
        canvas.app.battle.log("         // e_dmg     : " + String(e_dmg), 6710886);
        canvas.app.battle.log("         // e_dmgType : " + String(e_dmgType), 6710886);
        canvas.app.battle.log("         // e_crit    : " + String(e_crit), 6710886);
        canvas.app.battle.log("         // e_absorb  : " + String(e_absorb), 6710886);
        canvas.app.battle.log("         // e_aid     : " + String(e_aid), 6710886);
        canvas.app.battle.log("         // e_resist  : " + String(e_resist), 6710886);
        var dmg_ar = [];
        if (e_persId == conf.persId) {
            if (e_dmg != 0) {
                conf.persHp -= e_dmg;
                dmg_ar.push({
                    tar: "pers",
                    kick: e_crit == 1 ? canvas.app.battle.Const.DMG_KICK_CRIT : e_dmg > 0 ? canvas.app.battle.Const.DMG_KICK_WOUND : canvas.app.battle.Const.DMG_KICK_CURE,
                    val: -e_dmg,
                    new_tar_HP: conf.persHp,
                    my_dmg: false,
                });
            }
            if (e_absorb != 0) {
                dmg_ar.push({ tar: "pers", kick: canvas.app.battle.Const.DMG_KICK_ABSORB, val: e_absorb, new_tar_HP: conf.persHp, my_dmg: false });
            }
            if (e_resist != 0) {
                dmg_ar.push({ tar: "pers", kick: canvas.app.battle.Const.DMG_KICK_RESIST, val: e_resist, new_tar_HP: conf.persHp, my_dmg: false });
            }
            if (dmg_ar.length > 0) {
                baseLnk.view.showDmg(dmg_ar);
            }
            if (!conf.persDown && conf.persHp <= 0) {
                var curPers = baseLnk.players[conf.persId];
                var die_reactions = curPers.sk.kick_array_all.kick_mid.a_mid_1.die;
                var rnd_reaction = die_reactions[Math.floor(die_reactions.length * Math.random())];
                canvas.app.battle.log("         pers body down, label=" + rnd_reaction);
                conf.persStatus = canvas.app.battle.Const.STATUS_DEAD;
                conf.persDown = true;
                curPers.gotoAndPlay(rnd_reaction);
                curPers.magicStandBase.visible = false;
            }
        } else if (e_persId == conf.oppId) {
            if (e_dmg != 0) {
                conf.oppHp -= e_dmg;
                dmg_ar.push({
                    tar: "opp",
                    kick: e_crit == 1 ? canvas.app.battle.Const.DMG_KICK_CRIT : e_dmg > 0 ? canvas.app.battle.Const.DMG_KICK_WOUND : canvas.app.battle.Const.DMG_KICK_CURE,
                    val: -e_dmg,
                    new_tar_HP: conf.oppHp,
                    my_dmg: e_aid == conf.persId,
                });
            }
            if (e_absorb != 0) {
                dmg_ar.push({ tar: "opp", kick: canvas.app.battle.Const.DMG_KICK_ABSORB, val: e_absorb, new_tar_HP: conf.oppHp, my_dmg: e_aid == conf.persId });
            }
            if (e_resist != 0) {
                dmg_ar.push({ tar: "opp", kick: canvas.app.battle.Const.DMG_KICK_RESIST, val: e_resist, new_tar_HP: conf.oppHp, my_dmg: e_aid == conf.persId });
            }
            if (dmg_ar.length > 0) {
                baseLnk.view.showDmg(dmg_ar);
            }
        } else {
            canvas.app.battle.log("         WARN: pers_id=" + String(e_persId) + " not active", 16711680);
        }
        this.paksReadyAndParse();
        return;
    }
    if (conf.waitingDamageCnt > 0) {
        if (conf.delayedAttackData) {
            if (conf.delayedAttackData.persId == e_persId || conf.delayedAttackData.oppId == e_persId) {
                conf.delayedAttackData["data_" + e_persId] = { dmg: e_dmg, dmgType: e_dmgType, crit: e_crit, absorb: e_absorb, resist: e_resist };
            } else {
                canvas.app.battle.log("         ERR: not actual event, persId=" + String(e_persId) + ", waitingIds=" + String(conf.delayedAttackData.persId) + "," + String(conf.delayedAttackData.oppId), 16711680);
            }
        } else {
            canvas.app.battle.log("         ERR: delayed_attack_data is null", 16711680);
        }
        conf.waitingDamageCnt--;
        canvas.app.battle.log("         waiting_damage_cnt = " + String(conf.waitingDamageCnt));
        if (conf.waitingDamageCnt == 0) {
            conf.waitingDamageCnt = -1;
            this.applyAttack();
        } else {
            this.paksReadyAndParse();
        }
    } else {
        canvas.app.battle.log("         ERR: waiting_damage_cnt = " + String(conf.waitingDamageCnt), 16711680);
    }
};
canvas.app.battle.engine.MEve.prototype.death = function () {
    var parser = canvas.app.battle.model.serverParser;
    var conf = canvas.app.battle.model;
    var baseLnk = this.baseLnk;
    canvas.app.battle.log("mEve death: paramsCount= " + parser.params.length + ",  pers_id=" + parser.params[2].val + ", myPersId=" + conf.persId);
    var pers_id = parser.params[2].val;
    if (pers_id == conf.persId || pers_id == conf.oppId) {
        if (baseLnk.players[pers_id]) {
            canvas.app.battle.log("                 die (apply <b>dieBody</b>)");
            if (pers_id == conf.oppId) {
                if (conf.oppStatus != canvas.app.battle.Const.STATUS_DEAD) {
                    conf.oppStatus = canvas.app.battle.Const.STATUS_DEAD;
                } else {
                    canvas.app.battle.log("                 opp already dead");
                    this.paksReadyAndParse();
                    return;
                }
            }
            if (pers_id == conf.persId) {
                if (pers_id == conf.myPersId) {
                    baseLnk.setupWatchFightBts(true);
                } else {
                    baseLnk.setupWatchFightBts(true, conf.myPersId);
                    baseLnk.watchFightStart(conf.myPersId);
                }
                if (conf.persStatus != canvas.app.battle.Const.STATUS_DEAD) {
                    conf.persStatus = canvas.app.battle.Const.STATUS_DEAD;
                } else {
                    canvas.app.battle.log("                 pers already dead");
                    this.paksReadyAndParse();
                    return;
                }
            }
            if (conf.waitingDamageCnt == 2) {
                conf.waitingDamageCnt = 1;
            }
            if (pers_id == conf.oppId) {
                baseLnk.players[pers_id].addFuncTurn = this.afterDeath1.bind(this);
            }
            if (pers_id == conf.persId) {
                baseLnk.players[pers_id].addFuncTurn = this.afterDeath2.bind(this);
            }
            var curPers = baseLnk.players[pers_id];
            var die_reactions = curPers.sk.kick_array_all.kick_mid.a_mid_1.die;
            var rnd_reaction = die_reactions[Math.floor(die_reactions.length * Math.random())];
            canvas.app.battle.log("                 pers_id = " + pers_id + " body down, label=" + rnd_reaction);
            curPers.gotoAndPlay(rnd_reaction);
            curPers.magicStandBase.visible = false;
            return;
        } else {
            canvas.app.battle.log('                 WARN: pers for "' + String(pers_id) + '" is null', 10027008);
        }
    } else {
        canvas.app.battle.log("                 WARN: ignore event", 10027008);
    }
    this.paksReadyAndParse();
};
canvas.app.battle.engine.MEve.prototype.afterDeath1 = function (info) {
    var baseLnk = this.baseLnk;
    canvas.app.battle.log("mEve afterDeath1: pers_id=" + String(info.pers_id));
    baseLnk.players[info.pers_id].addFuncDie = this.afterDeath2.bind(this);
    baseLnk.players[info.pers_id].dieBody();
};
canvas.app.battle.engine.MEve.prototype.afterDeath2 = function (info) {
    canvas.app.battle.log("mEve afterDeath2: pers_id=" + String(info.pers_id));
    this.paksReadyAndParse();
};
canvas.app.battle.engine.MEve.prototype.fightReturn = function () {
    var parser = canvas.app.battle.model.serverParser;
    var conf = canvas.app.battle.model;
    var baseLnk = this.baseLnk;
    canvas.app.battle.log("mEve fightReturn: paramsCount= " + parser.params.length);
    if (conf.newPersId != conf.persId) {
        canvas.app.battle.log("             WARN! conf.new_pers_id!=conf.persId", 16711680);
    }
    conf.watchFight = false;
    baseLnk.setupWatchFightBts(false);
    baseLnk.view.comboView.visible = true;
    baseLnk.view.showMainPopup(canvas.app.battle.Const.POP_ST_WAIT);
    if (conf.newPersId != conf.myPersId) {
        canvas.EventManager.addEventListener(canvas.app.battle.Event.PERSES_HIDED, null, this.handlerPersesHided, this);
        baseLnk.persesHide();
    } else {
        this.paksReadyAndParse();
    }
};
canvas.app.battle.engine.MEve.prototype.handlerPersesHided = function () {
    canvas.app.battle.log("mEve handlerPersesHided");
    canvas.EventManager.removeEventListener(canvas.app.battle.Event.PERSES_HIDED, null, this.handlerPersesHided, this);
    conf.tempDead = true;
    conf.newPersId = conf.persId = conf.myPersId;
    conf.oppId = 0;
    conf.mainStep = canvas.app.battle.Const.MAIN_STEP_INFO;
    baseLnk.mainIteration();
    this.paksReadyAndParse();
};
canvas.app.battle.engine.MEve.prototype.msg = function () {
    var parser = canvas.app.battle.model.serverParser;
    var conf = canvas.app.battle.model;
    var baseLnk = this.baseLnk;
    canvas.app.battle.log("mEve msg: paramsCount= " + parser.params.length);
    var m_persId = parser.params[2].val;
    var m_code = parser.params[3].val;
    var m_txt = parser.params[4].val;
    m_txt = decodeURI(m_txt);
    canvas.app.battle.log("            persId=" + String(m_persId) + " code=" + String(m_code) + " txt=" + m_txt, 6710886);
    var dat = m_txt.split("()");
    var d_code = dat[0];
    var d_num = dat[1];
    if (d_code == "1") {
        if (dat.length == 4) {
            if (canvas.app.battle.Const.WATCH_FIGHT || conf.persStatus == canvas.app.battle.Const.STATUS_DEAD) {
                var d_user_name = dat[2];
                var d_inst_name = dat[3];
                baseLnk.view.messagePopup.targetPersId = m_persId;
                baseLnk.view.showMessagePopup(
                    1,
                    "",
                    canvas.Translator.getText(14) + ' "' + d_user_name + '" ' + canvas.Translator.getText(15) + ' "' + d_inst_name.replace(new RegExp("__", "g"), " ") + '"',
                    undefined,
                    undefined,
                    undefined,
                    undefined,
                    undefined,
                    d_num
                );
                var codeEffect = d_num.split("[]")[1];
            } else {
                canvas.app.battle.log("            WARN: can not resurrect alive", 10027008);
            }
        } else {
            canvas.app.battle.log("            WARN: wrong data format (len=" + String(dat.length) + ")", 10027008);
        }
    } else if (d_code == "2") {
        if (dat.length == 3) {
            if (baseLnk.view.messagePopup.num == d_num) {
                var d_answ = dat[2];
                if (d_answ == "1") {
                    canvas.app.battle.log("            Apply requested ability");
                    if (conf.abilityTemp) {
                        baseLnk.conn.sendPak(conf.abilityTemp);
                        conf.abilityTemp = null;
                    }
                }
                baseLnk.view.messagePopup.deactivate();
            } else {
                canvas.app.battle.log("            TIP: data num not relavant", 10027008);
            }
        } else {
            canvas.app.battle.log("            WARN: wrong data format (len=" + String(dat.length) + ")", 10027008);
        }
    } else {
        canvas.app.battle.log("            WARN: wrong data code [" + d_code + "]", 10027008);
    }
    this.paksReadyAndParse();
};
canvas.app.battle.engine.MEve.prototype.cdDec = function () {
    var parser = canvas.app.battle.model.serverParser;
    var conf = canvas.app.battle.model;
    var baseLnk = this.baseLnk;
    canvas.app.battle.log("mEve cdDec: paramsCount= " + parser.params.length + ", m_turns=" + parser.params[2].val);
    var m_turns = parser.params[2].val;
    baseLnk.sendData("items", "cd_dec@" + String(m_turns));
    this.paksReadyAndParse();
};
canvas.app.battle.engine.MEve.prototype.socOnClose = function () {
    var parser = canvas.app.battle.model.serverParser;
    var conf = canvas.app.battle.model;
    var baseLnk = this.baseLnk;
    canvas.app.battle.log("mEve socOnClose: paramsCount= " + parser.params.length);
    baseLnk.view.showMainPopup(canvas.app.battle.Const.POP_ST_ERROR, canvas.app.battle.Const.POP_ER_SOC_CLOSE);
    if (baseLnk.players[conf.persId]) {
        baseLnk.players[conf.persId].addFuncHide = null;
        baseLnk.players[conf.persId].hideBody();
    }
    if (baseLnk.players[conf.oppId]) {
        baseLnk.players[conf.oppId].addFuncHide = null;
        baseLnk.players[conf.oppId].hideBody();
    }
};
canvas.app.battle.engine.MEve.prototype.effectSwap = function () {
    var baseLnk = this.baseLnk;
    var parser = canvas.app.battle.model.serverParser;
    canvas.app.battle.log("mEve effectSwap: paramsCount= " + parser.params.length);
    baseLnk.sendData("items", "swap_slots@" + parser.params[2].val + "," + parser.params[3].val + "," + parser.params[4].val + "," + parser.params[5].val);
    this.paksReadyAndParse();
};
canvas.app.battle.engine.MEve.prototype.resetCombo = function () {
    var parser = canvas.app.battle.model.serverParser;
    var conf = canvas.app.battle.model;
    var baseLnk = this.baseLnk;
    canvas.app.battle.log("mEve resetCombo: paramsCount= " + parser.params.length);
    baseLnk.view.comboView.resetCombo();
    this.paksReadyAndParse();
};
canvas.app.battle.engine.MEve.prototype.deadCnt = function () {
    var parser = canvas.app.battle.model.serverParser;
    var conf = canvas.app.battle.model;
    var baseLnk = this.baseLnk;
    canvas.app.battle.log("mEve deadCnt: paramsCount= " + parser.params.length + ", team1=" + parser.params[2].val + "; team2=" + parser.params[3].val);
    baseLnk.sendData("mem", "dead_cnt@" + parser.params[2].val + "," + parser.params[3].val);
    this.paksReadyAndParse();
};
canvas.app.battle.engine.MEve.prototype.fightLaunch = function () {
    var parser = canvas.app.battle.model.serverParser;
    var conf = canvas.app.battle.model;
    var baseLnk = this.baseLnk;
    canvas.app.battle.log("mEve fightLaunch: paramsCount= " + parser.params.length);
    conf.fightRunning = true;
    conf.roundTime = conf.roundTimeBase;
    this.paksReadyAndParse();
};
canvas.app.battle.engine.MEve.prototype.effectUse = function () {
    var parser = canvas.app.battle.model.serverParser;
    var conf = canvas.app.battle.model;
    var baseLnk = this.baseLnk;
    canvas.app.battle.log("mEve effectUse: paramsCount= " + parser.params.length);
    var block_packs = false;
    try {
        var persId = parser.params[2].val;
        var targetId = parser.params[3].val;
        var animData = parser.params[4].val;
        var usageStatus = parser.params[5].val;
        var curPers;
        var curTarget;
        var SpellId;
        canvas.app.battle.log("            persId     " + String(persId));
        canvas.app.battle.log("            targetId   " + String(targetId));
        canvas.app.battle.log("            animData   " + parser.params[4].val);
        canvas.app.battle.log("            usageStatus " + String(usageStatus));
        canvas.app.battle.log("            // pers_id=" + String(conf.persId) + " opp_id=" + String(conf.oppId));
        var ss = animData.split("/");
        if (ss.length > 1) {
            if (ss[1] != "null") {
                canvas.app.battle.log("            <b>sound label = " + ss[1] + "</b>");
                baseLnk.sndPlay(ss[1]);
            }
        }
        var additional_effect;
        if (ss.length > 2) {
            if (ss[2] != "null") {
                additional_effect = ss[2];
            }
        }
        var bool_my_action = persId == conf.persId;
        var bool_opp_action = persId == conf.oppId;
        var bool_me_target = targetId == conf.persId;
        var bool_opp_target = targetId == conf.oppId;
        canvas.app.battle.log("            bool_my_action  " + bool_my_action, 10066329);
        canvas.app.battle.log("            bool_opp_action " + bool_opp_action, 10066329);
        canvas.app.battle.log("            bool_me_target  " + bool_me_target, 10066329);
        canvas.app.battle.log("            bool_opp_target " + bool_opp_target, 10066329);
        if (bool_my_action || bool_me_target || bool_opp_action || bool_opp_target) {
            if (bool_my_action || bool_opp_action) {
                curPers = baseLnk.players[persId];
            }
            if (bool_opp_target || bool_me_target) {
                curTarget = baseLnk.players[targetId];
            }
            if (
                (bool_my_action && baseLnk.view.players.getChildIndex(baseLnk.view.player1) < baseLnk.view.players.getChildIndex(baseLnk.view.player2)) ||
                (bool_opp_action && baseLnk.view.players.getChildIndex(baseLnk.view.player1) > baseLnk.view.players.getChildIndex(baseLnk.view.player2))
            ) {
                baseLnk.view.players.swapChildren(baseLnk.view.player1, baseLnk.view.player2);
            }
            canvas.app.battle.log("            curPers   " + curPers);
            canvas.app.battle.log("            curTarget " + curTarget);
            if (!curPers == null && !curTarget) {
                canvas.app.battle.log("            <b>WARN: pers & target clips == null</b>", 16711680);
            } else {
                var tdat1;
                var tdat2;
                tdat1 = animData.split("/")[0].split(";");
                canvas.app.battle.log("            // parts=" + tdat1.join("|"));
                var persAnim;
                var persSpellType;
                var persSpellIcon;
                var targetAnim;
                var targetSpellType;
                var targetSpellIcon;
                var spell_wound = false;
                var spell_wound_delay = 0;
                var one_spell_sound = true;
                if (curPers && tdat1[0]) {
                    canvas.app.battle.log("            0-10-20-30 ", 16711680);
                    canvas.app.battle.log("            usageStatus=" + String(usageStatus), 16711680);
                    var cur_tar = targetId == conf.persId ? "opp" : "pers";
                    canvas.app.battle.log("            cur_tar=" + cur_tar, 10027008);
                    switch (usageStatus) {
                        case 0:
                            break;
                        case 10:
                            canvas.app.battle.log("            case 10 showDMG," + "tar:" + cur_tar, 10027008);
                            conf.dmgEve.push({ tar: cur_tar, kick: canvas.app.battle.Const.DMG_KICK_IMMUNITY });
                            break;
                        case 20:
                            canvas.app.battle.log("            case 20 showDMG," + "tar:" + cur_tar, 10027008);
                            conf.dmgEve.push({ tar: cur_tar, kick: canvas.app.battle.Const.DMG_KICK_NOCHANCE });
                            break;
                        case 30:
                            canvas.app.battle.log("            case 30 showDMG," + "tar:" + cur_tar, 10027008);
                            conf.dmgEve.push({ tar: cur_tar, kick: canvas.app.battle.Const.DMG_KICK_FULLRES });
                            break;
                        default:
                            break;
                    }
                    tdat2 = tdat1[0].split(",");
                    persAnim = tdat2[0];
                    persSpellType = tdat2[1];
                    persSpellIcon = tdat2[2];
                    var persSpellX = persId == conf.persId ? canvas.app.battle.Const.PERS_POS_X.pers : canvas.app.battle.Const.PERS_POS_X.opp;
                    canvas.app.battle.log("            // persAnim      = " + persAnim, 39168);
                    canvas.app.battle.log("            // persSpellType = " + persSpellType, 39168);
                    canvas.app.battle.log("            // persSpellIcon = " + persSpellIcon, 39168);
                }
                var animForInOut = true;
                if (curTarget && tdat1[1]) {
                    tdat2 = tdat1[1].split(",");
                    targetAnim = tdat2[0];
                    targetSpellType = tdat2[1];
                    targetSpellIcon = tdat2[2];
                    var targetSpellX = targetId == conf.persId ? canvas.app.battle.Const.PERS_POS_X.pers : canvas.app.battle.Const.PERS_POS_X.opp;
                    canvas.app.battle.log("            // targetAnim      = " + targetAnim, 39168);
                    canvas.app.battle.log("            // targetSpellType = " + targetSpellType, 39168);
                    canvas.app.battle.log("            // targetSpellIcon = " + targetSpellIcon, 39168);
                    if (additional_effect) {
                        var casterOnScreen = persId == conf.persId || persId == conf.oppId;
                        curTarget.showAdditionalEffects(conf.parser.parseAdditionalEffectsData(canvas.app.battle.Const.AEFF_ABSORB, additional_effect));
                        animForInOut = false;
                        var parsed_effects_spl = conf.parser.parseAdditionalEffectsData(canvas.app.battle.Const.AEFF_SPELL, additional_effect);
                        var parsed_effects_ch = conf.parser.parseAdditionalEffectsData(canvas.app.battle.Const.AEFF_CH, additional_effect);
                        var spl_nm;
                        var spl_mc;
                        var asset_name;
                        var spell_delta_x;
                        var spell_tar_delta_x;
                        var spell_y = 0;
                        var third_level = false;
                        var whose_action;
                        var fromPoint;
                        var toPoint;
                        for (var q = 0; q < parsed_effects_spl.length; q++) {
                            spl_nm = parsed_effects_spl[q];
                            canvas.app.battle.log("            // spell anim num=" + spl_nm);
                            if (!casterOnScreen && parseInt(spl_nm) >= 1 && parseInt(spl_nm) <= 6) continue;
                            asset_name = "_SP" + spl_nm;
                            if (parseInt(spl_nm) < 1e3) {
                                spl_mc = new canvas.px.MovieClip(canvas.Config.spellsPath + asset_name);
                                spl_mc.frameEvent = canvas.app.battle.Event.ENTER_FRAME;
                            } else {
                                spl_mc = new canvas.px.MovieClip(canvas.Config.spellsPath + asset_name);
                                spl_mc.frameEvent = canvas.app.battle.Event.ENTER_FRAME;
                            }
                            spell_delta_x = 0;
                            spell_tar_delta_x = 0;
                            third_level = false;
                            if (spl_nm == "13" || spl_nm == "14" || spl_nm == "15" || spl_nm == "16" || spl_nm == "17" || spl_nm == "18" || spl_nm == "35") {
                                third_level = true;
                            }
                            if (persAnim == "4" && conf.memGenders[persId] && conf.memGenders[persId].genders == "M" && third_level) {
                                spell_delta_x = 50;
                            }
                            if (spl_nm == "7" || spl_nm == "8" || spl_nm == "9" || spl_nm == "10" || spl_nm == "11" || spl_nm == "12") {
                                spell_tar_delta_x = 45;
                            }
                            canvas.app.battle.log("            spell_delta_x = " + spell_delta_x, 16711680);
                            if (spl_mc) {
                                one_spell_sound = false;
                                baseLnk.sndPlay("_SP" + spl_nm);
                                var whose_anim_flag = "";
                                if (bool_me_target) {
                                    conf.persAnimFlag = true;
                                    whose_anim_flag = "pers";
                                    canvas.app.battle.log("            pers_anim_flag = true, because bool_my_action");
                                }
                                if (bool_opp_target) {
                                    conf.oppAnimFlag = true;
                                    whose_anim_flag = "opp";
                                    canvas.app.battle.log("            opp_anim_flag = true, because bool_opp_action");
                                }
                                if (spl_nm == "901" || spl_nm == "902") {
                                    spell_tar_delta_x = 120;
                                    spell_y = 340;
                                    if (bool_me_target) {
                                        if (baseLnk.players[conf.persId]) spell_y -= baseLnk.players[conf.persId].baseHeight * 0.6;
                                        fromPoint = new canvas.px.Point(spl_nm == "901" ? 222 + 70 : 222 + 0, spl_nm == "901" ? 160 : 0);
                                        toPoint = new canvas.px.Point(222 - 120, spell_y);
                                        baseLnk.view.spells.addChild(new canvas.app.battle.view.AddArrow(fromPoint, toPoint, spl_nm == "901" ? 0.5 : 1, -1, spl_nm == "901" ? 0 : 45));
                                    } else {
                                        if (baseLnk.players[conf.oppId]) spell_y -= baseLnk.players[conf.oppId].baseHeight * 0.6;
                                        fromPoint = new canvas.px.Point(spl_nm == "901" ? 222 - 70 : 222 + 0, spl_nm == "901" ? 160 : 0);
                                        toPoint = new canvas.px.Point(222 + 120, spell_y);
                                        baseLnk.view.spells.addChild(new canvas.app.battle.view.AddArrow(fromPoint, toPoint, spl_nm == "901" ? 0.5 : 1, 1, spl_nm == "901" ? 0 : 45));
                                    }
                                    canvas.app.battle.log("            arrow fromPoint = " + fromPoint + "; toPoint = " + toPoint);
                                }
                                whose_action = bool_my_action ? true : bool_opp_action && third_level ? false : third_level ? bool_me_target : bool_opp_target;
                                baseLnk.view.spells.addChild(
                                    new canvas.app.battle.view.AddSpell(
                                        baseLnk,
                                        222 + (whose_action ? spell_delta_x + spell_tar_delta_x : -spell_delta_x - spell_tar_delta_x),
                                        spell_y == 0 ? (conf.memDat[persId] && conf.memDat[persId].gender != 1 ? 203 : 203 - 20) : spell_y,
                                        whose_action,
                                        spl_mc,
                                        false,
                                        whose_anim_flag,
                                        spl_nm,
                                        parsed_effects_ch.length == 1 && parsed_effects_ch[0] == "1"
                                    )
                                );
                            } else {
                                canvas.app.battle.log('            ERR: no spell "' + asset_name + '" in spell pack', 16711680);
                            }
                        }
                        var parsed_effects_spw = conf.parser.parseAdditionalEffectsData(canvas.app.battle.Const.AEFF_SPW, additional_effect);
                        if (parsed_effects_spw.length == 1) {
                            if (parsed_effects_spw[0] == "1") {
                                spell_wound = true;
                                var parsed_effects_spd = conf.parser.parseAdditionalEffectsData(canvas.app.battle.Const.AEFF_SPD, additional_effect);
                                if (parsed_effects_spd.length == 1) {
                                    spell_wound_delay = Math.max(0, parseInt(parsed_effects_spd[0]));
                                }
                            }
                        }
                    }
                }
                var lbl;
                var curSndConf = {};
                var curSndGroup = [];
                var animationIsEffect = persAnim.indexOf("effect_") > -1;
                if (!animationIsEffect) {
                    animationIsEffect = true;
                    var oldEffectNum = persAnim;
                    switch (persAnim) {
                        case "16":
                            persAnim = "effect_frog#5";
                            break;
                        case "17":
                            persAnim = "effect_starlet#5";
                            break;
                        case "18":
                            persAnim = "effect_saw#5";
                            break;
                        case "19":
                            persAnim = "effect_orb_old#5";
                            break;
                        case "20":
                            persAnim = "effect_deadGod#4";
                            break;
                        case "21":
                            persAnim = "effect_fertilityGod#4";
                            break;
                        case "22":
                            persAnim = "effect_orb#4";
                            break;
                        case "23":
                            persAnim = "effect_dragonGod#4";
                            break;
                        case "33":
                            persAnim = "effect_idolWater#4";
                            break;
                        case "34":
                            persAnim = "effect_idolAir#5";
                            break;
                        case "35":
                            persAnim = "effect_bottle#5";
                            break;
                        case "36":
                            persAnim = "effect_idolZarlog#4";
                            break;
                        case "37":
                            persAnim = "effect_idolMaurin#4";
                            break;
                        default:
                            animationIsEffect = false;
                    }
                    if (animationIsEffect) {
                        canvas.app.battle.log("            Old effect " + oldEffectNum + " matched to " + persAnim, 13209);
                    }
                }
                if (animationIsEffect) {
                    var splitCharacterAnimation = persAnim.split("#");
                    var animationName = splitCharacterAnimation[0];
                    var characterAnimationNumber = splitCharacterAnimation[1];
                    var animationLabel = "spell_1";
                    if (animationName == "effect_orb") {
                        lbl = "spell_1";
                        if (curPers.allLabels[lbl]) {
                            block_packs = true;
                            if (!spell_wound) {
                                curPers.addFuncTurn = baseLnk.handlerEffectAfterSpell.bind(baseLnk);
                            } else {
                                if (curTarget != null) {
                                    curTarget.inMotion = true;
                                    curTarget.addWoundEffect({ delay: spell_wound_delay });
                                }
                            }
                            curPers.addFuncTurn = baseLnk.handlerEffectAfterSpell.bind(baseLnk);
                            curPers.gotoAndPlay(lbl);
                            if (bool_my_action || bool_opp_action) {
                                if (additional_effect) {
                                    if (bool_my_action && baseLnk.players[conf.persId]) {
                                        baseLnk.players[conf.persId].magicStandBase.visible = false;
                                    }
                                    if (bool_opp_action && baseLnk.players[conf.oppId]) {
                                        baseLnk.players[conf.oppId].magicStandBase.visible = false;
                                    }
                                    canvas.app.battle.log("            spell base in anim 4", 16711680);
                                    canvas.app.battle.log("            Gender = " + String(conf.memGenders[persId].genders), 16711680);
                                    var parsed_effects_spl1 = conf.parser.parseAdditionalEffectsData(canvas.app.battle.Const.AEFF_SPELL, additional_effect);
                                    for (var q1 = 0; q1 < parsed_effects_spl1.length; q1++) {
                                        if (parsed_effects_spl1[q1] < canvas.app.battle.Const.FIST_NONSCHOOL_EXTRA) {
                                            var spl_nm1 = parseInt(parsed_effects_spl1[q1] % 6) == 0 ? String(6) : String(parseInt(parsed_effects_spl1[q1] % 6));
                                            var spl_mc1;
                                            var asset_name1;
                                            var spell_delta_x1 = conf.memGenders[persId].genders == "M" ? 50 : 0;
                                            asset_name1 = "spell" + spl_nm1 + "base";
                                            spl_mc1 = new canvas.px.MovieClip(canvas.Config.spellsPath + asset_name1);
                                            spl_mc1.frameEvent = canvas.app.battle.Event.ENTER_FRAME;
                                            if (spl_mc1) {
                                                if (one_spell_sound) {
                                                    baseLnk.sndPlay("_SP" + spl_nm1);
                                                }
                                                baseLnk.view.bgSpells.addChild(new canvas.app.battle.view.AddSpell(baseLnk, bool_my_action ? 85 + spell_delta_x1 : 370 - spell_delta_x1, 330, bool_my_action, spl_mc1));
                                            } else {
                                                canvas.app.battle.log('            ERR: no spell "' + asset_name1 + '" in spell pack', 16711680);
                                            }
                                        }
                                    }
                                }
                            }
                        } else {
                            canvas.app.battle.log("            WARN: no `" + lbl + "` label in skel", 16711680);
                        }
                        curPers.addBgEffect({ delay: 10, type: animationName });
                    } else {
                        switch (characterAnimationNumber) {
                            case "4":
                                animationLabel = "spell_1";
                                if (spell_wound) {
                                    curTarget.addWoundEffect({ delay: spell_wound_delay });
                                    baseLnk.view.addEffect(animationName, bool_opp_target ? 7 : 445 - 7, 5, bool_opp_target ? 1 : -1);
                                } else {
                                    baseLnk.view.addEffect(animationName, !bool_opp_target ? 7 : 445 - 7, 5, !bool_opp_target ? 1 : -1);
                                    canvas.app.battle.log("            Without wound");
                                }
                                if (curPers.allLabels[animationLabel]) {
                                    block_packs = true;
                                    curPers.gotoAndPlay(animationLabel);
                                } else {
                                    canvas.app.battle.log("            WARN: no `" + animationLabel + "` label in character skeleton", 16711680);
                                }
                                break;
                            case "5":
                                animationLabel = "spell_2";
                                if (curPers.allLabels[animationLabel]) {
                                    block_packs = true;
                                    curPers.gotoAndPlay(animationLabel);
                                    curPers.addEffect({ delay: 10, type: animationName });
                                    curTarget.addWoundEffect({ delay: spell_wound_delay });
                                } else {
                                    canvas.app.battle.log("            WARN: no `" + animationLabel + "` label in character skeleton", 16711680);
                                }
                                break;
                            default:
                                canvas.app.battle.log("            ERROR: invalid character animation number received (" + characterAnimationNumber + "), only 4 and 5 are valid", 16711680);
                                break;
                        }
                    }
                } else {
                    switch (persAnim) {
                        case null:
                        case "0":
                            if (spell_wound) {
                                if (curTarget) {
                                    curTarget.inMotion = true;
                                    curTarget.addWoundEffect({ delay: spell_wound_delay });
                                }
                            }
                            if (bool_my_action || bool_opp_action) {
                                if (additional_effect) {
                                    if (bool_my_action && baseLnk.players[conf.persId]) {
                                        baseLnk.players[conf.persId].magicStandBase.visible = false;
                                    }
                                    if (bool_opp_action && baseLnk.players[conf.oppId]) {
                                        baseLnk.players[conf.oppId].magicStandBase.visible = false;
                                    }
                                    canvas.app.battle.log("            spell base in anim 0", 16711680);
                                    var parsed_effects_spl0 = conf.parser.parseAdditionalEffectsData(canvas.app.battle.Const.AEFF_SPELL, additional_effect);
                                    for (var q0 = 0; q0 < parsed_effects_spl0.length; q0++) {
                                        if (parsed_effects_spl0[q0] < canvas.app.battle.Const.FIST_NONSCHOOL_EXTRA) {
                                            var spl_nm0 = parseInt(parsed_effects_spl0[q0] % 6) == 0 ? String(6) : String(parseInt(parsed_effects_spl0[q0] % 6));
                                            var spl_mc0;
                                            var asset_name0;
                                            asset_name0 = "spell" + spl_nm0 + "base";
                                            spl_mc0 = new canvas.px.MovieClip(canvas.Config.spellsPath + asset_name0);
                                            spl_mc0.frameEvent = canvas.app.battle.Event.ENTER_FRAME;
                                            if (spl_mc0) {
                                                if (one_spell_sound) {
                                                    baseLnk.sndPlay("_SP" + spl_nm0);
                                                }
                                                baseLnk.view.bgSpells.addChild(new canvas.app.battle.view.AddSpell(baseLnk, bool_my_action ? 85 : 370, 330, bool_my_action, spl_mc0));
                                            } else {
                                                canvas.app.battle.log('            ERR: no spell "' + asset_name0 + '" in spell pack', 16711680);
                                            }
                                        }
                                    }
                                }
                            }
                            break;
                        case "1":
                            if (curPers.allLabels["drink"]) {
                                block_packs = true;
                                baseLnk.sndPlay("drink");
                                curPers.addFuncTurn = baseLnk.handlerEffectAfterDrink.bind(baseLnk);
                                curPers.gotoAndPlay("drink");
                            } else {
                                canvas.app.battle.log("            WARN: no `drink` label in skel", 16711680);
                            }
                            break;
                        case "2":
                            baseLnk.sndPlay("charge_energy");
                            curPers.addHandEffect("Eff_CHARGE");
                            break;
                        case "3":
                            baseLnk.sndPlay("charge_vampir");
                            curPers.addHandEffect("Eff_VAMPIRISM");
                            break;
                        case "4":
                        case "5":
                        case "24":
                        case "25":
                        case "26":
                        case "27":
                        case "28":
                        case "29":
                        case "30":
                            switch (persAnim) {
                                case "4":
                                    lbl = "spell_1";
                                    break;
                                case "5":
                                    lbl = "spell_2";
                                    break;
                                case "24":
                                    lbl = "a_bow_1";
                                    break;
                                case "25":
                                    lbl = "a_bow_2";
                                    break;
                                case "26":
                                    lbl = "dodge_1";
                                    break;
                                case "27":
                                    lbl = "combo_1";
                                    break;
                                case "28":
                                    lbl = "combo_2";
                                    break;
                                case "29":
                                    lbl = "combo_3";
                                    break;
                                case "30":
                                    lbl = "combo_4";
                                    break;
                            }
                            if (curPers.allLabels[lbl]) {
                                block_packs = true;
                                if (!spell_wound) {
                                    curPers.addFuncTurn = baseLnk.handlerEffectAfterSpell.bind(baseLnk);
                                } else {
                                    if (curTarget) {
                                        curTarget.inMotion = true;
                                        curTarget.addWoundEffect({ delay: spell_wound_delay });
                                    }
                                }
                                if (curTarget) {
                                    curTarget.sndConf = null;
                                }
                                curPers.inMotion = true;
                                curPers.gotoAndPlay(lbl);
                                if (bool_my_action || bool_opp_action) {
                                    if (additional_effect) {
                                        if (bool_my_action && baseLnk.players[conf.persId]) {
                                            baseLnk.players[conf.persId].magicStandBase.visible = false;
                                        }
                                        if (bool_opp_action && baseLnk.players[conf.oppId]) {
                                            baseLnk.players[conf.oppId].magicStandBase.visible = false;
                                        }
                                        canvas.app.battle.log("            spell base in anim 5", 16711680);
                                        var parsed_effects_spl2 = conf.parser.parseAdditionalEffectsData(canvas.app.battle.Const.AEFF_SPELL, additional_effect);
                                        for (var q2 = 0; q2 < parsed_effects_spl2.length; q2++) {
                                            if (parsed_effects_spl2[q2] < canvas.app.battle.Const.FIST_NONSCHOOL_EXTRA) {
                                                var spl_nm2 = parseInt(parsed_effects_spl2[q2] % 6) == 0 ? String(6) : String(parseInt(parsed_effects_spl2[q2] % 6));
                                                var spl_mc2;
                                                var asset_name2;
                                                asset_name2 = "spell" + spl_nm2 + "base";
                                                spl_mc2 = new canvas.px.MovieClip(canvas.Config.spellsPath + asset_name2);
                                                spl_mc2.frameEvent = canvas.app.battle.Event.ENTER_FRAME;
                                                if (spl_mc2) {
                                                    if (one_spell_sound) {
                                                        baseLnk.sndPlay("_SP" + spl_nm2);
                                                    }
                                                    baseLnk.view.bgSpells.addChild(new canvas.app.battle.view.AddSpell(baseLnk, bool_my_action ? 85 : 370, 330, bool_my_action, spl_mc2));
                                                } else {
                                                    canvas.app.battle.log('            ERR: no spell "' + asset_name2 + '" in spell pack', 16711680);
                                                }
                                            }
                                        }
                                    }
                                }
                            } else {
                                canvas.app.battle.log("            WARN: no `" + lbl + "` label in skel", 16711680);
                            }
                            break;
                        case "8":
                            baseLnk.sndPlay("charge_energy");
                            curPers.addHandEffect("Eff_CHARGE_2");
                            break;
                        case "9":
                        case "10":
                        case "11":
                            if (persAnim == "9") lbl = "a_bot_1";
                            if (persAnim == "10") lbl = "a_mid_1";
                            if (persAnim == "11") lbl = "a_up_1";
                            if (curPers.allLabels[lbl]) {
                                block_packs = true;
                                if (!spell_wound) {
                                    curPers.addFuncTurn = baseLnk.handlerEffectAfterSpell.bind(baseLnk);
                                } else {
                                    if (curTarget) {
                                        curTarget.inMotion = true;
                                        curTarget.addWoundEffect({ delay: spell_wound_delay });
                                    }
                                }
                                if (curTarget) {
                                    curTarget.sndConf = null;
                                }
                                curSndConf = curPers.sk.ActionSound[lbl];
                                if (curSndConf.std) {
                                    curSndGroup = canvas.app.battle.Const.SND_GROUPS["wound"];
                                    curPers.sndConf = { std: true, snd_name: curSndGroup[Math.floor(Math.random() * curSndGroup.length)] };
                                    canvas.app.battle.log("            standart sound : " + curPers.sndConf.snd_name);
                                } else if (!curSndConf.std && curSndConf.self) {
                                    curPers.sndConf = { std: false, snd_name: curSndConf.self };
                                    canvas.app.battle.log("            internal sound : " + curSndConf.self);
                                } else {
                                    canvas.app.battle.log("            WARN: INCORRECT ActionSound", 16711680);
                                }
                                curPers.inMotion = true;
                                curPers.gotoAndPlay(lbl);
                                if (bool_my_action || bool_opp_action) {
                                    if (additional_effect) {
                                        if (bool_my_action && baseLnk.players[conf.persId]) {
                                            baseLnk.players[conf.persId].magicStandBase.visible = false;
                                        }
                                        if (bool_opp_action && baseLnk.players[conf.oppId]) {
                                            baseLnk.players[conf.oppId].magicStandBase.visible = false;
                                        }
                                        canvas.app.battle.log("            spell base in anim " + persAnim, 16711680);
                                        var parsed_effects_spl3 = conf.parser.parseAdditionalEffectsData(canvas.app.battle.Const.AEFF_SPELL, additional_effect);
                                        for (var q3 = 0; q3 < parsed_effects_spl3.length; q3++) {
                                            if (parsed_effects_spl3[q3] < canvas.app.battle.Const.FIST_NONSCHOOL_EXTRA) {
                                                var spl_nm3 = parseInt(parsed_effects_spl3[q3] % 6) == 0 ? String(6) : String(parseInt(parsed_effects_spl3[q3] % 6));
                                                var spl_mc3;
                                                var asset_name3;
                                                asset_name3 = "spell" + spl_nm3 + "base";
                                                spl_mc3 = canvas.px.MovieClip(canvas.Config.spellsPath + asset_name3);
                                                if (spl_mc3) {
                                                    if (one_spell_sound) {
                                                        baseLnk.sndPlay("_SP" + spl_nm3);
                                                    }
                                                    baseLnk.view.bgSpells.addChild(new canvas.app.battle.view.AddSpell(baseLnk, bool_my_action ? 85 : 370, 330, bool_my_action, spl_mc3));
                                                } else {
                                                    canvas.app.battle.log('            ERR: no spell "' + asset_name3 + '" in spell pack', 16711680);
                                                }
                                            }
                                        }
                                    }
                                }
                            } else {
                                canvas.app.battle.log("            WARN: no `" + lbl + "` label in skel", 16711680);
                            }
                            break;
                        case "12":
                            if (spell_wound) {
                                if (curTarget) {
                                    curTarget.inMotion = true;
                                    curTarget.addWoundEffect({ delay: spell_wound_delay });
                                }
                            }
                            break;
                        case "13":
                        case "14":
                        case "15":
                        case "31":
                        case "32":
                            if (persAnim == "13") lbl = "baf_1";
                            if (persAnim == "14") lbl = "baf_2";
                            if (persAnim == "15") lbl = "baf_3";
                            if (persAnim == "31") lbl = "dodge";
                            if (persAnim == "32") lbl = "block";
                            if (curPers.allLabels[lbl]) {
                                block_packs = true;
                                if (!spell_wound) {
                                    conf.animationLock = true;
                                    curPers.addFuncTurn = baseLnk.handlerEffectAfterSpell.bind(baseLnk);
                                } else {
                                    if (curTarget) {
                                        curTarget.inMotion = true;
                                        curTarget.addWoundEffect({ delay: spell_wound_delay });
                                    }
                                }
                                curPers.inMotion = true;
                                curPers.gotoAndPlay(lbl);
                            } else {
                                canvas.app.battle.log("            WARN: no `" + lbl + "` label in skel", 16711680);
                            }
                            break;
                        case "100":
                        case "101":
                            var pet = curPers.pet;
                            var bafId;
                            if (persAnim == "100") bafId = 1;
                            else if (persAnim == "101") bafId = 2;
                            if (pet) {
                                block_packs = false;
                                if (!spell_wound) {
                                } else {
                                    if (curTarget) {
                                        curTarget.inMotion = true;
                                        curTarget.addWoundEffect({ delay: spell_wound_delay });
                                    }
                                }
                                pet.playBaff(bafId);
                            }
                            break;
                        default:
                            canvas.app.battle.log("            ERR: unknown persAnim = " + persAnim, 16711680);
                            break;
                    }
                }
                if (persSpellType) {
                    SpellId = canvas.app.battle.Const.SPELLS_AR.OUT[persSpellType];
                    canvas.app.battle.log("            SpellId OUT =" + SpellId, 16711680);
                    if (SpellId) {
                        baseLnk.view.addSpellAnim(persSpellX, SpellId);
                    } else {
                        canvas.app.battle.log("            WARN: SpellId is null for persSpellType " + persSpellType, 16711680);
                    }
                    SpellId = canvas.app.battle.Const.SPELLS_AR.ICO[persSpellIcon];
                    if (SpellId != "0") {
                        if (SpellId) {
                            baseLnk.view.addSpellAnim(persSpellX, SpellId);
                        } else {
                            canvas.app.battle.log("            WARN: SpellId is null for persSpellIcon " + persSpellIcon, 16711680);
                        }
                    }
                }
                if (targetId == conf.oppId || targetId == conf.persId) {
                    switch (targetAnim) {
                        case "0":
                        case null:
                            break;
                        case "7":
                            if (!spell_wound) {
                                curTarget.addWoundEffect({ delay: 10 });
                            }
                            break;
                        default:
                            canvas.app.battle.log("            ERR: unknown targetAnim = " + targetAnim, 16711680);
                    }
                    if (targetSpellType) {
                        SpellId = canvas.app.battle.Const.SPELLS_AR.IN[targetSpellType];
                        canvas.app.battle.log("            SpellId IN =" + SpellId, 16711680);
                        if (SpellId) {
                            baseLnk.view.addSpellAnim(targetSpellX, SpellId);
                        } else {
                            canvas.app.battle.log("            WARN: SpellId is null for targetSpellType " + targetSpellType, 16711680);
                        }
                        SpellId = canvas.app.battle.Const.SPELLS_AR.ICO[targetSpellIcon];
                        if (SpellId != "0") {
                            if (SpellId) {
                                baseLnk.view.addSpellAnim(targetSpellX, SpellId);
                            } else {
                                canvas.app.battle.log("            WARN: SpellId is null for targetSpellIcon " + targetSpellIcon, 16711680);
                            }
                        }
                    }
                }
            }
        }
    } catch (e) {
        canvas.app.battle.log("MEve effectuse Error: " + e, 16711680);
    }
    if (!block_packs) {
        this.paksReadyAndParse();
    }
};
canvas.app.battle.engine.MEve.prototype.paksReadyAndParse = function () {
    canvas.app.battle.model.paksReady = true;
    canvas.app.battle.model.parser.paksParse();
};
canvas.app.battle.view.SoundView = function () {
    canvas.px.Container.call(this);
    this.back = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_sound_bg"));
    this.addChild(this.back);
    this.back.interactive = true;
    this.back.buttonMode = true;
    this.back.hitArea = new canvas.px.Rectangle(0, 0, 20, 20);
    this.back.mouseup = this.handlerClick.bind(this);
    this.soundOff = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_sound_off"));
    this.soundOff.position.set(2, 1);
    this.addChild(this.soundOff);
    this.progress = new canvas.ui.Progress(canvas.ResourceLoader.getImage("ui", "battle_sound_fill"), [0, 0, 0, 0]);
    this.progress.position.set(22, 6);
    this.progress.setSize(48, 7);
    this.addChild(this.progress);
    this.progress.selectable = true;
    canvas.EventManager.addEventListener(canvas.ui.ProgressEvent.EVENT_PROGRESS, this.progress, this.handlerProgress, this);
};
canvas.app.battle.view.SoundView.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.battle.view.SoundView.prototype.init = function (mute, volume) {
    this.soundOff.visible = mute;
    this.progress.progress = volume;
};
canvas.app.battle.view.SoundView.prototype.handlerClick = function (mouseData) {
    this.soundOff.visible = !this.soundOff.visible;
    canvas.EventManager.dispatchEvent(canvas.app.battle.Event.SOUND_MUTE_CHANGE, null, this.soundOff.visible);
};
canvas.app.battle.view.SoundView.prototype.handlerProgress = function () {
    canvas.EventManager.dispatchEvent(canvas.app.battle.Event.SOUND_VOLUME_CHANGE, null, this.progress.progress);
};
canvas.app.battle.view.CenterView = function () {
    this._mode;
    Object.defineProperty(this, "mode", {
        get: function () {
            return this._mode;
        },
        set: function (value) {
            this._mode = value;
            canvas.EventManager.dispatchEvent(canvas.app.battle.Event.CENTER_CHANGE_MODE, null, value);
        },
    });
    canvas.px.Container.call(this);
    this.controls = new canvas.px.Container();
    this.addChild(this.controls);
    this.cDot = new canvas.app.battle.view.CenterDotView(this);
    this.addChild(this.cDot);
    this.cDot.setIcon(canvas.app.battle.Const.MODE_ATTACK);
    this.cAttack = new canvas.app.battle.view.CenterAttackView(this);
    this.cAttack.activate();
    this.hotkeyShowersCont = new canvas.px.Container();
    this.addChild(this.hotkeyShowersCont);
    this.hotkeyShowersCont.position.set(-Math.round(canvas.app.battle.Const.SPELLS_CONT_WIDTH / 2), -Math.round(canvas.app.battle.Const.SPELLS_CONT_HEIGHT / 2));
    this.hotkeyShowersCont.visible = false;
    this.cSpells = new canvas.app.battle.view.CenterSpellsView(this, this.hotkeyShowersCont);
    this.mode = canvas.app.battle.Const.MODE_ATTACK;
    this.skipButton = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "battle_btn_skip_turn"));
    this.addChild(this.skipButton);
    this.skipButton.visible = false;
    this.skipButton.position.set(-Math.round(this.skipButton.width * 0.5), -140);
    canvas.EventManager.dispatchEvent(canvas.app.battle.Event.HINT_ADD, null, { target: this.skipButton, params: new canvas.utils.HintParams(new canvas.app.view.PxHint(canvas.Translator.getText(65))) });
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.skipButton, this.handlerSkipButtonClick);
};
canvas.app.battle.view.CenterView.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.battle.view.CenterView.prototype.handlerSkipButtonClick = function (event) {
    canvas.EventManager.dispatchEvent(canvas.app.battle.Event.SKIP_TURN);
};
canvas.app.battle.view.CenterView.prototype.activeBlock = function (switchFlg) {
    canvas.app.battle.log("cCenter:active_block " + switchFlg);
    this.cAttack.activeBlock(switchFlg);
};
canvas.app.battle.view.CenterView.prototype.applyMask = function (msk) {
    this.cAttack.applyMask(msk);
};
canvas.app.battle.view.CenterView.prototype.changeControlMode = function (withoutSendToServ) {
    if (typeof withoutSendToServ == "undefined") withoutSendToServ = false;
    switch (this.mode) {
        case canvas.app.battle.Const.MODE_ATTACK:
            this.mode = canvas.app.battle.Const.MODE_SPELLS;
            this.activeBlock(false);
            if (!withoutSendToServ) {
                canvas.EventManager.dispatchEvent(canvas.app.battle.Event.EVENT_MY_FUNC, null, [canvas.app.battle.Const.MY_FUNC_CHANGE_MODE, 1, canvas.app.battle.Const.TO_FS_PF_MAGIC]);
            }
            this.cAttack.deactivate();
            break;
        case canvas.app.battle.Const.MODE_SPELLS:
            this.mode = canvas.app.battle.Const.MODE_ATTACK;
            if (!withoutSendToServ) {
                canvas.EventManager.dispatchEvent(canvas.app.battle.Event.EVENT_MY_FUNC, null, [canvas.app.battle.Const.MY_FUNC_CHANGE_MODE, 0, canvas.app.battle.Const.TO_FS_PF_MAGIC]);
                canvas.EventManager.dispatchEvent(canvas.app.battle.Event.EVENT_MY_FUNC, null, [canvas.app.battle.Const.MY_FUNC_CHANGE_MODE, 0, canvas.app.battle.Const.TO_FS_PF_DEFENDED]);
            }
            this.cSpells.deactivate();
            this.hotkeyShowersCont.visible = false;
            break;
        default:
            canvas.app.battle.log('ERR: unknown mode "' + this.mode + '"', 16711680);
            break;
    }
    this.cDot.setIcon(this.mode, withoutSendToServ);
};
canvas.app.battle.view.CenterView.prototype.controlDeactivated = function () {
    switch (this.mode) {
        case canvas.app.battle.Const.MODE_ATTACK:
            this.cAttack.activate();
            break;
        case canvas.app.battle.Const.MODE_SPELLS:
            this.cSpells.activate();
            this.hotkeyShowersCont.visible = true;
            break;
        default:
            canvas.app.battle.log('ERR: unknown mode "' + this.mode + '"', 16711680);
            break;
    }
};
canvas.app.battle.view.CenterView.prototype.addControl = function (controlSpr) {
    if (controlSpr.parent != this.controls) {
        this.controls.addChild(controlSpr);
    } else {
        canvas.app.battle.log('WARN: "' + controlSpr + '" already contains in controls', 10027008);
    }
};
canvas.app.battle.view.CenterView.prototype.removeControl = function (controlSpr) {
    if (controlSpr.parent == this.controls) {
        this.controls.removeChild(controlSpr);
    } else {
        canvas.app.battle.log('WARN: "' + controlSpr + '" not contains in controls', 10027008);
    }
};
canvas.app.battle.view.CenterView.prototype.buildSpells = function (controlSpr) {
    canvas.app.battle.log("cCenter:build_spells ** ");
    this.cDot.check();
    this.cSpells.buildSpells();
};
canvas.app.battle.view.CenterView.prototype.turnOnKeyCallbacks = function () {
    this.cDot.turnOnKeyCallbacks();
};
canvas.app.battle.view.CenterView.prototype.turnOffKeyCallbacks = function () {
    this.cDot.turnOffKeyCallbacks();
};
canvas.app.battle.view.CenterView.prototype.useEffect = function (effId) {
    canvas.EventManager.dispatchEvent(canvas.app.battle.Event.EVENT_MY_FUNC, null, [canvas.app.battle.Const.MY_FUNC_USE_EFFECT, effId]);
    var conf = canvas.app.battle.model;
    if (conf.memDat[conf.oppId] != null) {
        var mMD = conf.memDat[conf.oppId];
        var curPersFlg = mMD.persFlags;
        this.coolDownStart(curPersFlg);
    }
};
canvas.app.battle.view.CenterView.prototype.useSlotConfirmed = function (slotId) {
    this.cSpells.useSlotConfirmed(slotId);
};
canvas.app.battle.view.CenterView.prototype.setDefCooldown = function () {
    this.cSpells.setDefCooldown();
};
canvas.app.battle.view.CenterView.prototype.spellsUnlockOnError = function (effId) {
    this.cSpells.spellsUnlockOnError(effId);
    this.cAttack.auraControl.spellsUnlockOnError(effId);
};
canvas.app.battle.view.CenterView.prototype.coolDownStart = function (rid) {
    if (canvas.app.battle.model.testFlag(rid, canvas.app.battle.Const.FS_PF_STUNNED)) {
        this.cAttack.coolDownStart();
    }
};
canvas.app.battle.view.CenterView.prototype.checkSpells = function (rid) {
    this.cSpells.checkSpells(rid);
};
canvas.app.battle.view.CenterView.prototype.addSpellCoolDown = function (time, withoutNeedTurn) {
    if (typeof withoutNeedTurn == "undefined") withoutNeedTurn = false;
    this.cSpells.addSpellCoolDown(time, withoutNeedTurn);
};
canvas.app.battle.view.CenterView.prototype.turnBowPanel = function (b) {};
canvas.app.battle.view.CenterView.prototype.setVisible = function (value) {
    this.visible = value;
    if (!this.visible) {
        this.cDot.externalMouseOut();
    } else {
        this.updateSkipButton();
    }
};
canvas.app.battle.view.CenterView.prototype.updateSkipButton = function () {
    var conf = canvas.app.battle.model;
    if (this.cAttack.isCooldown) {
        this.skipButton.visible = false;
    } else {
        if (conf.isPvp && conf.memDat[conf.oppId] && conf.fightResult == 0) {
            var mMD = conf.memDat[conf.oppId];
            var curPersFlg = mMD.persFlags;
            this.skipButton.visible = !conf.testFlag(curPersFlg, canvas.app.battle.Const.FS_PF_NO_OPP_AUTO);
        } else {
            this.skipButton.visible = false;
        }
    }
};
canvas.app.battle.view.CenterView.prototype.attackFunc = function (id) {
    canvas.EventManager.dispatchEvent(canvas.app.battle.Event.ATTACK, null, id);
};
canvas.app.battle.view.CenterView.prototype.blockSwitch = function () {
    canvas.EventManager.dispatchEvent(canvas.app.battle.Event.BLOCK_SWITCH);
};
canvas.app.battle.view.CenterDotView = function (rtLink) {
    canvas.px.Container.call(this);
    this.rt = rtLink;
    this.bg = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_center_dot"));
    this.bg.position.set(-Math.round(this.bg.width / 2), -Math.round(this.bg.height / 2));
    this.bgTop = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_center_dot_top"));
    this.bgTop.position.set(-Math.round(this.bgTop.width / 2), -Math.round(this.bgTop.height / 2));
    this.icon = new canvas.px.Sprite(canvas.px.TextureEmpty);
    this.bt = new canvas.px.Graphics();
    this.bt.beginFill(0, 0);
    this.bt.drawCircle(0, 0, 34);
    this.bt.endFill();
    this.bt.interactive = true;
    this.bt.buttonMode = true;
    canvas.EventManager.dispatchEvent(canvas.app.battle.Event.HINT_ADD, null, {
        target: this.bt,
        params: new canvas.utils.HintParams(new canvas.app.view.PxHint(canvas.app.battle.model.getHintTextWithHotkey("", canvas.Translator.getText(64)))),
    });
    this.dotClickTime = 0;
    this.light = new canvas.px.Graphics();
    this.light.beginFill(16777215, 0.3);
    this.light.drawCircle(0, 0, 25);
    this.light.endFill();
    this.light.blendMode = canvas.px.BlendMode.OVERLAY;
    this.addChild(this.bg);
    this.addChild(this.icon);
    this.addChild(this.bt);
    this.rad = Math.round(this.bg.width / 2 - 6);
    this.msk = new canvas.px.Graphics();
    this.msk.beginFill(0, 1);
    this.msk.drawCircle(0, 0, this.rad - 1);
    this.msk.endFill();
    this.har = [
        [this.rad, -this.rad],
        [this.rad, this.rad],
        [-this.rad, this.rad],
        [-this.rad, -this.rad],
        [0, -this.rad],
    ];
    this.shp = new canvas.px.Graphics();
    this.shp.mask = this.msk;
    this.addChild(this.shp);
    this.addChild(this.msk);
    this.addChild(this.bgTop);
};
canvas.app.battle.view.CenterDotView.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.battle.view.CenterDotView.prototype.check = function () {
    canvas.app.battle.log("CenterDot: check, hasSpells=" + canvas.app.battle.model.hasSpells);
    if (canvas.app.battle.model.hasSpells) {
        if (!this.btActivated) {
            this.btActivated = true;
            this.bt.interactive = true;
            this.btIsOn = true;
            this.bt.mouseover = this.handlerBtnOver.bind(this);
            this.bt.mouseout = this.handlerBtnOut.bind(this);
            this.bt.mouseup = this.handlerBtnClick.bind(this);
        }
    } else {
        if (this.btActivated) {
            this.btActivated = false;
            this.bt.interactive = false;
            this.bt.mouseover = null;
            this.bt.mouseout = null;
            this.bt.mouseup = null;
        }
        if (canvas.app.battle.view.CenterView.filter1) {
            this.icon.filters = [canvas.app.battle.view.CenterView.filter1];
        } else {
            var f = new canvas.px.ColorMatrixFilter();
            f.matrix = [0.3086000084877014, 0.6093999743461609, 0.0820000022649765, 0, 0, 0.3086000084877014, 0.6093999743461609, 0.0820000022649765, 0, 0, 0.3086000084877014, 0.6093999743461609, 0.0820000022649765, 0, 0, 0, 0, 0, 1, 0];
            canvas.app.battle.view.CenterView.filter1 = f;
            this.icon.filters = [f];
        }
    }
};
canvas.app.battle.view.CenterDotView.prototype.checkDot = function () {
    var now = Date.now();
    return now >= this.dotClickTime + canvas.app.battle.Const.CENTER_DOT_TIME_CD && canvas.app.battle.model.oppId != 0;
};
canvas.app.battle.view.CenterDotView.prototype.switchDot = function (fl) {
    canvas.app.battle.log("CenterDot: switch, fl=" + fl);
    if (canvas.app.battle.model.hasSpells) {
        if (fl) {
            if (!this.btIsOn) {
                this.btIsOn = true;
                this.bt.interactive = true;
                this.bt.mouseover = this.handlerBtnOver.bind(this);
                this.bt.mouseout = this.handlerBtnOut.bind(this);
                this.bt.mouseup = this.handlerBtnClick.bind(this);
            }
        } else {
            if (this.btIsOn && !this.checkDot()) {
                this.btIsOn = false;
                this.bt.interactive = false;
                this.bt.mouseover = null;
                this.bt.mouseout = null;
                this.bt.mouseup = null;
            }
        }
    }
};
canvas.app.battle.view.CenterDotView.prototype.handlerBtnOver = function () {
    if (this.light.parent != this) {
        this.addChild(this.light);
    }
};
canvas.app.battle.view.CenterDotView.prototype.handlerBtnOut = function () {
    if (this.light.parent == this) {
        this.removeChild(this.light);
    }
};
canvas.app.battle.view.CenterDotView.prototype.handlerBtnClick = function () {
    this.handlerBtnOut();
    var curTime = Date.now();
    if (curTime - this.dotClickTime < canvas.app.battle.Const.CENTER_DOT_TIME_CD) {
        return;
    }
    this.dotClickTime = curTime;
    this.rt.changeControlMode();
    this.switchDot(false);
    canvas.EventManager.addEventListener(canvas.app.battle.Event.ENTER_FRAME, null, this.handlerFrame, this);
};
canvas.app.battle.view.CenterDotView.prototype.externalMouseOut = function () {
    this.handlerBtnOut();
};
canvas.app.battle.view.CenterDotView.prototype.handlerFrame = function () {
    var now = Date.now();
    if (now < this.dotClickTime + canvas.app.battle.Const.CENTER_DOT_TIME_CD) {
        var pc = ((now - this.dotClickTime) / canvas.app.battle.Const.CENTER_DOT_TIME_CD) * 100;
        this.shp.clear();
        this.shp.beginFill(0, 0.4);
        this.shp.moveTo(0, 0);
        var rr = pc * (360 / 100 / 57.2958) - 1.57;
        var xx = this.rad * Math.cos(rr);
        var yy = this.rad * Math.sin(rr);
        this.shp.lineTo(xx, yy);
        var i = Math.round((pc % 100) / 25);
        while (i < this.har.length) {
            this.shp.lineTo(this.har[i][0], this.har[i][1]);
            i++;
        }
        this.shp.endFill();
    } else {
        this.switchDot(true);
        this.shp.clear();
        canvas.EventManager.removeEventListener(canvas.app.battle.Event.ENTER_FRAME, null, this.handlerFrame, this);
    }
};
canvas.app.battle.view.CenterDotView.prototype.setIcon = function (mode, withoutSendToServ) {
    switch (mode) {
        case canvas.app.battle.Const.MODE_ATTACK:
        case canvas.app.battle.Const.MODE_SPELLS:
            this.icon.texture = canvas.ResourceLoader.getImage("ui", "battle_center_icon_" + (mode == canvas.app.battle.Const.MODE_ATTACK ? "1" : !withoutSendToServ ? "2" : "3"));
            this.icon.x = -Math.round(this.icon.width / 2);
            this.icon.y = -Math.round(this.icon.height / 2);
            break;
        default:
            canvas.app.battle.log('WARN: unknown mode "' + mode + '"', 10027008);
            break;
    }
};
canvas.app.battle.view.CenterDotView.prototype.turnOnKeyCallbacks = function () {
    this.initKeyCallbacks(true);
};
canvas.app.battle.view.CenterDotView.prototype.turnOffKeyCallbacks = function () {
    this.initKeyCallbacks(false);
};
canvas.app.battle.view.CenterDotView.prototype.initKeyCallbacks = function (isOn) {
    if (isOn && canvas.app.battle.model.hasSpells) {
        canvas.EventManager.addEventListener(canvas.Event.STAGE_KEY_DOWN, null, this.handlerKey, this);
    } else {
        canvas.EventManager.removeEventListener(canvas.Event.STAGE_KEY_DOWN, null, this.handlerKey, this);
    }
};
canvas.app.battle.view.CenterDotView.prototype.handlerKey = function (event) {
    if (event.params.globalKeyCode == canvas.Const.TAB && canvas.app.battle.model.centerVisible && canvas.app.battle.model.hasSpells) {
        this.handlerBtnClick();
    }
};
canvas.app.battle.view.CenterClsView = function () {
    canvas.px.Container.call(this);
    this.showVals = [0.47, 0.67, 1];
    this.hideVals = [0.67, 0.47, 0.4];
};
canvas.app.battle.view.CenterClsView.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.battle.view.CenterClsView.prototype.activate = function () {
    this.rt.addControl(this);
    this.scale.set(0.4, 0.4);
    this.frameIndex = 0;
    canvas.EventManager.addEventListener(canvas.app.battle.Event.ENTER_FRAME, null, this.handlerShow, this);
};
canvas.app.battle.view.CenterClsView.prototype.deactivate = function () {
    this.scale.set(1, 1);
    this.frameIndex = 0;
    canvas.EventManager.addEventListener(canvas.app.battle.Event.ENTER_FRAME, null, this.handlerHide, this);
};
canvas.app.battle.view.CenterClsView.prototype.handlerShow = function () {
    this.scale.set(this.showVals[this.frameIndex]);
    if (this.frameIndex < this.showVals.length - 1) {
        this.frameIndex++;
    } else {
        canvas.EventManager.removeEventListener(canvas.app.battle.Event.ENTER_FRAME, null, this.handlerShow, this);
    }
};
canvas.app.battle.view.CenterClsView.prototype.handlerHide = function () {
    this.scale.set(this.hideVals[this.frameIndex], this.hideVals[this.frameIndex]);
    if (this.frameIndex < this.showVals.length - 1) {
        this.frameIndex++;
    } else {
        canvas.EventManager.removeEventListener(canvas.app.battle.Event.ENTER_FRAME, null, this.handlerHide, this);
        this.rt.removeControl(this);
        this.rt.controlDeactivated();
    }
};
canvas.app.battle.view.CenterAttackView = function (rtLink) {
    canvas.app.battle.view.CenterClsView.call(this);
    this.isCooldown = false;
    this.rt = rtLink;
    this.rad1 = 25;
    this.rad2 = 105;
    this.bg = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_center"));
    this.bgGrey = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_center_grey"));
    this.bg.x = this.bgGrey.x = -Math.round(this.bg.width / 2);
    this.bg.y = this.bgGrey.y = -Math.round(this.bg.height / 2);
    this.bgMask = new canvas.px.Graphics();
    this.setBgMask(this.rad2);
    this.bg.mask = this.bgMask;
    this.bladeUp = new canvas.app.battle.view.CenterBladeView(this.rt, 9, -41, -55);
    this.bladeMid = new canvas.app.battle.view.CenterBladeView(this.rt, 39, -11, 0);
    this.bladeBot = new canvas.app.battle.view.CenterBladeView(this.rt, 31, 28, 55);
    this.sectorUp = new canvas.app.battle.view.CenterSectorView(0, 0, -60, canvas.app.battle.Const.TOP_ATTACK_ID, this.bladeUp, this.rt.attackFunc, canvas.Translator.getText(33), canvas.Translator.getText(60));
    this.sectorMid = new canvas.app.battle.view.CenterSectorView(0, 0, 0, canvas.app.battle.Const.MIDDLE_ATTACK_ID, this.bladeMid, this.rt.attackFunc, canvas.Translator.getText(34), canvas.Translator.getText(61));
    this.sectorBot = new canvas.app.battle.view.CenterSectorView(0, 0, 60, canvas.app.battle.Const.BOTTOM_ATTACK_ID, this.bladeBot, this.rt.attackFunc, canvas.Translator.getText(35), canvas.Translator.getText(62));
    this.blockOn = new canvas.px.Sprite(canvas.ResourceLoader.getImage("locale", "battle_center_block1"));
    this.blockOn.position.set(-62, -22);
    this.blockOn.visible = false;
    this.blockOff = new canvas.px.Sprite(canvas.ResourceLoader.getImage("locale", "battle_center_block2"));
    this.blockOff.position.set(-62, -22);
    this.blockBtn = new canvas.px.Graphics();
    this.blockBtn.position.set(-62, -22);
    this.blockBtn.beginFill(0, 0);
    this.blockBtn.drawRect(0, 0, 18, 44);
    this.blockBtn.endFill();
    this.blockBtn.interactive = true;
    this.blockBtn.buttonMode = true;
    canvas.EventManager.dispatchEvent(canvas.app.battle.Event.HINT_ADD, null, {
        target: this.blockBtn,
        params: new canvas.utils.HintParams(new canvas.app.view.PxHint(canvas.app.battle.model.getHintTextWithHotkey(canvas.Translator.getText(36), canvas.Translator.getText(63)))),
    });
    this.blockBtn.click = this.handlerBlockClick.bind(this);
    this.addChild(this.bgGrey);
    this.addChild(this.bg);
    this.addChild(this.bgMask);
    this.addChild(this.bladeUp);
    this.addChild(this.bladeMid);
    this.addChild(this.bladeBot);
    this.addChild(this.sectorUp);
    this.addChild(this.sectorMid);
    this.addChild(this.sectorBot);
    this.addChild(this.blockOn);
    this.addChild(this.blockOff);
    this.addChild(this.blockBtn);
    this.auraControl = new canvas.app.battle.view.AuraControlView(this.rt);
    this.addChild(this.auraControl);
    this.auraControl.visible = false;
};
canvas.app.battle.view.CenterAttackView.prototype = Object.create(canvas.app.battle.view.CenterClsView.prototype);
canvas.app.battle.view.CenterAttackView.prototype.handlerBlockClick = function () {
    this.rt.blockSwitch();
};
canvas.app.battle.view.CenterAttackView.prototype.activeBlock = function (switchFlg) {
    this.blockOn.visible = switchFlg;
    this.blockOff.visible = !switchFlg;
};
canvas.app.battle.view.CenterAttackView.prototype.applyMask = function (msk) {
    var bool_UP = (msk & 1) == 1;
    var bool_MID = (msk & 2) >> 1 == 1;
    var bool_BOT = (msk & 4) >> 2 == 1;
    this.sectorUp.visible = bool_UP;
    this.bladeUp.visible = bool_UP;
    this.sectorMid.visible = bool_MID;
    this.bladeMid.visible = bool_MID;
    this.sectorBot.visible = bool_BOT;
    this.bladeBot.visible = bool_BOT;
};
canvas.app.battle.view.CenterAttackView.prototype.setBgMask = function (rad) {
    this.bgMask.clear();
    this.bgMask.beginFill(255, 1);
    this.bgMask.drawCircle(0, 0, rad);
    this.bgMask.endFill();
};
canvas.app.battle.view.CenterAttackView.prototype.coolDownStart = function () {
    this.sTime = 2050 - (Date.now() - canvas.app.battle.model.attackTime);
    this.vTime = Date.now();
    this.setBgMask(this.rad1);
    if (this.sTime > 0) {
        this.mInterval = setInterval(this.refreshBgMask.bind(this), 100);
        this.setBgMask(this.rad2);
        this.sectorUp.visible = this.bladeUp.visible = false;
        this.sectorMid.visible = this.bladeMid.visible = false;
        this.sectorBot.visible = this.bladeBot.visible = false;
        this.rt.cDot.switchDot(false);
        this.setCooldown(true);
        this.rt.turnBowPanel(false);
    } else {
        this.setCooldown(false);
    }
};
canvas.app.battle.view.CenterAttackView.prototype.setCooldown = function (b) {
    this.isCooldown = b;
    this.rt.updateSkipButton();
};
canvas.app.battle.view.CenterAttackView.prototype.refreshBgMask = function () {
    if (Date.now() - canvas.app.battle.model.attackTime > 2050) {
        this.setBgMask(this.rad2);
        this.sectorUp.visible = this.bladeUp.visible = true;
        this.sectorMid.visible = this.bladeMid.visible = true;
        this.sectorBot.visible = this.bladeBot.visible = true;
        this.applyMask(canvas.app.battle.model.oppMask);
        if (this.rt.mode == canvas.app.battle.Const.MODE_ATTACK) {
            this.rt.cDot.switchDot(true);
        }
        if (this.mInterval) {
            clearInterval(this.mInterval);
            this.setCooldown(false);
        }
        this.rt.turnBowPanel(true);
    } else {
        var rad = this.rad1 + ((this.rad2 - this.rad1) * (Date.now() - this.vTime)) / this.sTime;
        this.setBgMask(rad);
    }
};
canvas.app.battle.view.CenterBladeView = function (rt, xx, yy, rr) {
    canvas.px.Container.call(this);
    this.mv = [0, 2.7, 4.8, 6.3, 7.2, 7.5, 7.2, 6.3, 4.8, 2.7];
    this.mvLen = 10;
    this.rt = rt;
    this.position.set(xx, yy);
    this.rotation = canvas.Functions.degToRad(rr);
    this.bmp = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_center_blade"));
    this.addChild(this.bmp);
};
canvas.app.battle.view.CenterBladeView.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.battle.view.CenterBladeView.prototype.handlerFrame = function () {
    this.mvIndex++;
    if (this.mvIndex == this.mvLen) {
        this.mvIndex = 0;
    }
    this.bmp.x = this.mv[this.mvIndex];
};
canvas.app.battle.view.CenterBladeView.prototype.over = function () {
    this.mvIndex = 0;
    canvas.EventManager.addEventListener(canvas.app.battle.Event.ENTER_FRAME, null, this.handlerFrame, this);
};
canvas.app.battle.view.CenterBladeView.prototype.out = function () {
    this.bmp.x = 0;
    canvas.EventManager.removeEventListener(canvas.app.battle.Event.ENTER_FRAME, null, this.handlerFrame, this);
};
canvas.app.battle.view.CenterSectorView = function (xx, yy, rr, id, bladeLnk, attackFunc, str, hotkey) {
    canvas.px.Graphics.call(this);
    this.position.set(xx, yy);
    this.rotation = canvas.Functions.degToRad(rr);
    this.r1 = 28;
    this.r2 = 76;
    this.ang = Math.PI / 3;
    this.shape = new canvas.px.Graphics();
    this.shape.interactive = true;
    this.addChild(this.shape);
    this.drawSector();
    this.bladeId = id;
    this.bladeLnk = bladeLnk;
    this.attackFunc = attackFunc;
    this.interactive = true;
    this.buttonMode = true;
    this.mouseover = this.handlerOver.bind(this);
    this.mouseup = this.handlerClick.bind(this);
    canvas.EventManager.dispatchEvent(canvas.app.battle.Event.HINT_ADD, null, { target: this.shape, params: new canvas.utils.HintParams(new canvas.app.view.PxHint(canvas.app.battle.model.getHintTextWithHotkey(str, hotkey))) });
};
canvas.app.battle.view.CenterSectorView.prototype = Object.create(canvas.px.Graphics.prototype);
canvas.app.battle.view.CenterSectorView.prototype.drawSector = function () {
    this.shape.moveTo(this.r1 * Math.sin(this.ang), this.r1 * Math.cos(this.ang));
    this.shape.beginFill(0, 0);
    this.shape.lineTo(this.r2 * Math.sin(this.ang), this.r2 * Math.cos(this.ang));
    this.shape.lineTo(this.r2 * Math.sin((this.ang * 3) / 2), this.r2 * Math.cos((this.ang * 3) / 2));
    this.shape.lineTo(this.r2 * Math.sin(this.ang * 2), this.r2 * Math.cos(this.ang * 2));
    this.shape.lineTo(this.r1 * Math.sin(this.ang * 2), this.r1 * Math.cos(this.ang * 2));
    this.shape.lineTo(this.r1 * Math.sin((this.ang * 3) / 2), this.r1 * Math.cos((this.ang * 3) / 2));
    this.endFill();
};
canvas.app.battle.view.CenterSectorView.prototype.handlerOver = function () {
    this.bladeLnk.over();
    this.mouseout = this.handlerOut.bind(this);
};
canvas.app.battle.view.CenterSectorView.prototype.handlerOut = function () {
    this.bladeLnk.out();
    this.mouseout = null;
};
canvas.app.battle.view.CenterSectorView.prototype.handlerClick = function () {
    if (this.attackFunc) {
        this.attackFunc(this.bladeId);
    }
};
canvas.app.battle.view.CenterSpellsView = function (rtLink, hotkeyShowersCont) {
    canvas.app.battle.view.CenterClsView.call(this);
    this.rt = rtLink;
    this.hotkeyShowersCont = hotkeyShowersCont;
    this.hotkeysPoints = [
        new canvas.px.Point(69, 38),
        new canvas.px.Point(91, 45),
        new canvas.px.Point(104, 62),
        new canvas.px.Point(104, 84),
        new canvas.px.Point(90, 101),
        new canvas.px.Point(69, 109),
        new canvas.px.Point(48, 102),
        new canvas.px.Point(35, 85),
        new canvas.px.Point(34, 62),
        new canvas.px.Point(47, 45),
    ];
    this.slotsPos = [
        [-18, -78],
        [17, -67],
        [38, -36],
        [39, 0],
        [17, 29],
        [-18, 41],
        [-53, 29],
        [-75, 0],
        [-75, -36],
        [-53, -66],
    ];
    this.spellsCont = new canvas.px.Container();
    this.tgBmp = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_center_spells"));
    this.tgBmp.position.set(-Math.round(canvas.app.battle.Const.SPELLS_CONT_WIDTH / 2), -Math.round(canvas.app.battle.Const.SPELLS_CONT_HEIGHT / 2));
    this.addChild(this.spellsCont);
    this.addChild(this.tgBmp);
    this.slots = {};
};
canvas.app.battle.view.CenterSpellsView.prototype = Object.create(canvas.app.battle.view.CenterClsView.prototype);
canvas.app.battle.view.CenterSpellsView.prototype.buildSpells = function () {
    canvas.Functions.destroyChildren(this.spellsCont);
    this.removeAllSpellHotkeyShowers();
    canvas.Functions.destroyChildren(this.tgBmp);
    var slot_id;
    var obj;
    var pos;
    for (slot_id in canvas.app.battle.model.spells) {
        obj = canvas.app.battle.model.spells[slot_id];
        pos = this.slotsPos[parseInt(slot_id) - 1];
        if (pos) {
            if (this.slots[slot_id]) {
                this.slots[slot_id].remove();
                delete this.slots[slot_id];
            }
            this.slots[slot_id] = new canvas.app.battle.view.CenterSpellItemRenderer(this, slot_id, pos, obj);
        } else {
            canvas.app.battle.log("ERR: positions for slotId=" + slot_id + " is null", 16711680);
        }
    }
    for (var spellIndex = 0; spellIndex < canvas.app.battle.Const.CENTER_SPELL_ITEMS_COUNT; spellIndex++) {
        if (!this.slots[spellIndex + 1]) {
            pos = this.slotsPos[spellIndex];
            var empty = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_center_spell_empty"));
            this.tgBmp.addChild(empty);
            empty.position.set(pos[0] + Math.round(canvas.app.battle.Const.SPELLS_CONT_WIDTH / 2) - 1, pos[1] + Math.round(canvas.app.battle.Const.SPELLS_CONT_HEIGHT / 2) - 1);
        }
    }
    this.createSpellHotkeyShowers();
};
canvas.app.battle.view.CenterSpellsView.prototype.useSpellItem = function (slot_id) {
    var obj = canvas.app.battle.model.spells[slot_id];
    if (!obj) {
        canvas.app.battle.log("ERR: spell for this slot is null", 16711680);
        return;
    }
    if (this.locked) {
        canvas.app.battle.log("TIP: spells blocked, witing answer for use spell", 153);
        return;
    }
    this.locked = true;
    this.rt.useEffect(canvas.app.battle.model.spells[slot_id]["effId"]);
};
canvas.app.battle.view.CenterSpellsView.prototype.useSlotConfirmed = function (slot_id) {
    var obj = canvas.app.battle.model.spells[slot_id];
    var now = Date.now();
    var ftime = canvas.app.battle.model.spells[slot_id]["cdTime"] * 1e3 + now;
    for (var g in this.slots) {
        if (canvas.app.battle.model.spells[g]["cdGripId"] == obj["cdGripId"]) {
            this.slots[g].cooldownStart(now, ftime);
        } else {
            this.slots[g].cooldownStart(now, now + canvas.app.battle.Const.DEFAULT_SPELLS_COOLDOWN);
        }
    }
    this.unlock();
};
canvas.app.battle.view.CenterSpellsView.prototype.setDefCooldown = function () {
    var now = Date.now();
    var ftime = now + canvas.app.battle.Const.DEFAULT_SPELLS_COOLDOWN;
    for (var g in this.slots) {
        this.slots[g].cooldownStart(now, ftime);
    }
};
canvas.app.battle.view.CenterSpellsView.prototype.spellsUnlockOnError = function (eff_id) {
    canvas.app.battle.log("CenterSpellsView: spellsUnlockOnError " + eff_id);
    for (var g in canvas.app.battle.model.spells) {
        if (canvas.app.battle.model.spells[g]["effId"] == eff_id) {
            canvas.app.battle.log("spells unlocked on error");
            this.unlock();
            break;
        }
    }
};
canvas.app.battle.view.CenterSpellsView.prototype.restoreCooldowns = function () {
    for (var g in this.slots) this.slots[g].restoreCooldown();
};
canvas.app.battle.view.CenterSpellsView.prototype.switchDot = function (fl) {
    this.rt.cDot.switchDot(fl);
};
canvas.app.battle.view.CenterSpellsView.prototype.checkSpells = function (rid) {
    for (var g1 in this.slots) {
        this.slots[g1].checkSpells(rid);
    }
};
canvas.app.battle.view.CenterSpellsView.prototype.addSpellCoolDown = function (time, without_need_turn) {
    if (typeof without_need_turn == "undefined") without_need_turn = false;
    for (var g1 in this.slots) {
        this.slots[g1].addSpellCoolDown(time, true, without_need_turn);
    }
};
canvas.app.battle.view.CenterSpellsView.prototype.unlock = function () {
    this.locked = false;
};
canvas.app.battle.view.CenterSpellsView.prototype.createSpellHotkeyShowers = function () {
    var shower;
    var showerPoint;
    var hotkeyText;
    var spellItem;
    for (var spellIndex = 0; spellIndex < canvas.app.battle.Const.CENTER_SPELL_ITEMS_COUNT; spellIndex++) {
        hotkeyText = "";
        spellItem = this.slots[spellIndex + 1];
        if (spellItem) {
            hotkeyText = spellItem.getHotkeyText();
        }
        showerPoint = this.hotkeysPoints[spellIndex];
        shower = new canvas.app.battle.view.CenterSpellHotkeyRenderer(hotkeyText);
        this.hotkeyShowersCont.addChild(shower);
        shower.x = showerPoint.x;
        shower.y = showerPoint.y;
    }
};
canvas.app.battle.view.CenterSpellsView.prototype.removeSpellHotkeyShower = function (shower) {
    var len = this.hotkeyShowersCont.children.length;
    for (var i = 0; i < len; i++) {
        if (this.hotkeyShowersCont.getChildAt(i) == shower) {
            this.hotkeyShowersCont.removeChildAt(i);
            break;
        }
    }
};
canvas.app.battle.view.CenterSpellsView.prototype.removeAllSpellHotkeyShowers = function () {
    canvas.Functions.destroyChildren(this.hotkeyShowersCont);
};
canvas.app.battle.view.CenterSpellHotkeyRenderer = function (hotkeyText) {
    canvas.px.Container.call(this);
    this.bg = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_center_dot"));
    this.bg.width = 16;
    this.bg.height = 16;
    this.addChild(this.bg);
    this.textTF = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_9, 16509576, this.bg.width, this.bg.height, "center");
    this.addChild(this.textTF);
    this.textTF.position.set(0, 2);
    this.textTF.text = hotkeyText;
};
canvas.app.battle.view.CenterSpellHotkeyRenderer.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.battle.view.CenterSpellItemRenderer = function (rt, slotId, pos, obj) {
    canvas.px.Container.call(this);
    this.spellsHotkeys = ["Q", "W", "E", "R", "T", "A", "S", "D", "F", "G"];
    this.spellsHotkeyCodes = [canvas.Const.KEYS.Q, canvas.Const.KEYS.W, canvas.Const.KEYS.E, canvas.Const.KEYS.R, canvas.Const.KEYS.T, canvas.Const.KEYS.A, canvas.Const.KEYS.S, canvas.Const.KEYS.D, canvas.Const.KEYS.F, canvas.Const.KEYS.G];
    this.rt = rt;
    this.slotId = slotId;
    this.obj = obj;
    this.position.set(pos[0] - 1, pos[1] - 1);
    var rad = 19;
    this.bmpMsk = new canvas.px.Graphics();
    this.bmpMsk.beginFill(0, 0);
    this.bmpMsk.drawCircle(rad, rad, rad);
    this.bmpMsk.endFill();
    this.bmp = new canvas.px.Sprite(canvas.px.TextureEmpty);
    this.bmp.mask = this.bmpMsk;
    this.bmp.scale.set(38 / 60, 38 / 60);
    this.light = new canvas.px.Graphics();
    this.light.beginFill(16777215, 0.3);
    this.light.drawCircle(rad, rad, rad);
    this.light.endFill();
    this.light.visible = false;
    this.light.blendMode = canvas.px.BlendMode.OVERLAY;
    this.btn = new canvas.px.Graphics();
    this.btn.beginFill(0, 0);
    this.btn.drawCircle(rad, rad, rad);
    this.btn.endFill();
    this.btn.buttonMode = true;
    this.btn.interactive = true;
    this.btn.mouseover = this.handlerOver.bind(this);
    this.btn.click = this.handlerClick.bind(this);
    this.cooldown = new canvas.app.battle.view.CenterSpellItemCdRenderer(this);
    this.addChild(this.bmp);
    this.addChild(this.bmpMsk);
    this.addChild(this.light);
    this.addChild(this.btn);
    this.rt.spellsCont.addChild(this);
    this.addChild(this.cooldown);
    if (obj["cdTime"] > 0) {
        if (obj["cdLeft"] > 0) {
            var now = Date.now();
            this.cooldown.activate(now - (obj["cdTime"] - obj["cdLeft"]), 1e3 * obj["cdLeft"] + now);
        }
    }
    this.initKeyCallbacks();
    canvas.EventManager.addEventListener(canvas.ResourceLoader.EVENT_COMPLETE, null, this.handlerLoaded, this);
    canvas.ResourceLoader.add([canvas.Config.artifactsPath + this.obj.picture]);
    canvas.EventManager.dispatchEvent(canvas.app.battle.Event.HINT_ADD, null, {
        target: this,
        params: new canvas.utils.HintParams(new canvas.app.view.PxHint(canvas.app.battle.model.getHintTextWithHotkey(this.obj["title"] + "\n" + canvas.Translator.getText(49) + " " + this.obj["mp"], this.getHotkeyText()))),
    });
    this.interactive = true;
};
canvas.app.battle.view.CenterSpellItemRenderer.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.battle.view.CenterSpellItemRenderer.prototype.handlerLoaded = function () {
    canvas.EventManager.removeEventListener(canvas.ResourceLoader.EVENT_COMPLETE, null, this.handlerLoaded, this);
    this.bmp.texture = canvas.ResourceLoader.getTexture(canvas.Config.artifactsPath + this.obj.picture);
};
canvas.app.battle.view.CenterSpellItemRenderer.prototype.handlerClick = function () {
    if (this.cooldown.active()) {
        return;
    }
    this.rt.useSpellItem(this.slotId);
    this.cooldown.showTxt();
};
canvas.app.battle.view.CenterSpellItemRenderer.prototype.handlerOver = function () {
    this.btn.mouseout = this.handlerOut.bind(this);
    this.light.visible = true;
    if (this.cooldown.active()) {
        this.cooldown.showTxt();
    }
};
canvas.app.battle.view.CenterSpellItemRenderer.prototype.handlerOut = function () {
    this.light.visible = false;
    this.btn.mouseout = null;
    if (this.cooldown.active()) {
        this.cooldown.hideTxt();
    }
};
canvas.app.battle.view.CenterSpellItemRenderer.prototype.cooldownStart = function (now, ftime) {
    if (this.cooldown.parent != this) {
        this.addChild(this.cooldown);
    }
    this.cooldown.activate(now, ftime);
};
canvas.app.battle.view.CenterSpellItemRenderer.prototype.restoreCooldown = function () {
    this.cooldown.restore();
};
canvas.app.battle.view.CenterSpellItemRenderer.prototype.cooldownCancel = function () {
    if (this.cooldown.parent == this) {
        this.removeChild(this.cooldown);
    }
    if (canvas.app.battle.model.oppId != 0) {
        this.rt.switchDot(true);
    }
};
canvas.app.battle.view.CenterSpellItemRenderer.prototype.remove = function () {
    if (this.parent == this.rt.spellsCont) {
        this.rt.spellsCont.removeChild(this);
    } else {
        canvas.app.battle.log("ERR: this slot is not contains", 16711680);
    }
    this.rt = null;
};
canvas.app.battle.view.CenterSpellItemRenderer.prototype.checkSpells = function (rid) {
    if (this.cooldown.forStep()) {
        this.cooldown.cooldownDone();
        if (canvas.app.battle.model.testFlag(rid, canvas.app.battle.Const.FS_PF_STUNNED)) {
            this.addSpellCoolDown(3050);
        }
    }
};
canvas.app.battle.view.CenterSpellItemRenderer.prototype.addSpellCoolDown = function (time, from_dot, without_need_turn) {
    if (typeof from_dot == "undefined") from_dot = false;
    if (typeof without_need_turn == "undefined") without_need_turn = false;
    var now = Date.now();
    if (!from_dot) {
        if (now - canvas.app.battle.model.attackTime < time) {
            this.cooldownStart(now, canvas.app.battle.model.attackTime + time);
        }
    } else {
        var abil_flgs = canvas.app.battle.model.abilsFlags[canvas.app.battle.model.spells[this.slotId].effId];
        if (without_need_turn && canvas.app.battle.model.testFlag(abil_flgs, canvas.app.battle.Const.FS_PEF_PASSTURN)) time = 12e5;
        this.cooldownStart(now, now + time);
    }
};
canvas.app.battle.view.CenterSpellItemRenderer.prototype.initKeyCallbacks = function () {
    canvas.EventManager.addEventListener(canvas.Event.STAGE_KEY_DOWN, null, this.handlerKey, this);
};
canvas.app.battle.view.CenterSpellItemRenderer.prototype.handlerKey = function (event) {
    if (canvas.app.battle.model.centerMode == canvas.app.battle.Const.MODE_ATTACK) return;
    if (event.params.globalKeyCode == this.getHotkeyCode()) {
        this.handlerClick();
    }
};
canvas.app.battle.view.CenterSpellItemRenderer.prototype.getHotkeyCode = function () {
    return this.spellsHotkeyCodes[this.slotId - 1];
};
canvas.app.battle.view.CenterSpellItemRenderer.prototype.getHotkeyText = function () {
    return this.spellsHotkeys[this.slotId - 1];
};
canvas.app.battle.view.CenterSpellItemCdRenderer = function (rt) {
    canvas.px.Container.call(this);
    this.rt = rt;
    this.realFT = -1;
    this.realST = -1;
    this.forStepFl = false;
    this.rad = 19;
    var rad = this.rad;
    this.har = [
        [rad, -rad],
        [rad, rad],
        [-rad, rad],
        [-rad, -rad],
        [0, -rad],
    ];
    this.shp = new canvas.px.Graphics();
    this.shp.position.set(rad, rad);
    this.msk = new canvas.px.Graphics();
    this.msk.position.set(rad, rad);
    this.msk.beginFill(0, 1);
    this.msk.drawCircle(0, 0, rad - 1);
    this.msk.endFill();
    this.tf = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_9_STROKE, 16777215, 24, 16, "center");
    this.tf.position.set(rad - 12, rad - 8);
    this.shp.mask = this.msk;
    this.addChild(this.shp);
    this.addChild(this.msk);
};
canvas.app.battle.view.CenterSpellItemCdRenderer.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.battle.view.CenterSpellItemCdRenderer.prototype.restore = function () {
    if (this.realFT > 0) {
        this.activate(0, 0);
    }
};
canvas.app.battle.view.CenterSpellItemCdRenderer.prototype.activate = function (now, ftime_new) {
    if (ftime_new - now >= 12e5) {
        this.realFT = this.ftime;
        this.realST = this.stime;
    } else if (this.realFT > 0) {
        now = this.realST;
        ftime_new = this.realFT;
        this.realFT = -1;
        this.activated = false;
    }
    if (this.activated) {
        var dtime = this.ftime - now;
        var dtime_new = ftime_new - now;
        if (dtime < dtime_new) {
            this.stime = now;
            this.ftime = ftime_new;
        }
    } else {
        this.forStepFl = ftime_new - now == canvas.app.battle.Const.DEFAULT_SPELLS_COOLDOWN || ftime_new - now > 1e6;
        this.activated = true;
        this.stime = now;
        this.ftime = ftime_new;
        canvas.EventManager.addEventListener(canvas.app.battle.Event.ENTER_FRAME, null, this.handlerFrame, this);
    }
};
canvas.app.battle.view.CenterSpellItemCdRenderer.prototype.handlerFrame = function () {
    try {
        var now = Date.now();
        if (this.har && now < this.ftime) {
            var pc;
            if (this.ftime - this.stime > 1e6) {
                pc = 100;
                this.ftime = now + 12e5;
                this.tf.text = "";
            } else {
                this.tf.text = Math.round((this.ftime - now) / 1e3);
                pc = ((now - this.stime) / (this.ftime - this.stime)) * 100;
            }
            this.shp.clear();
            this.shp.beginFill(0, 0.6);
            this.shp.moveTo(0, 0);
            var rr = pc * (360 / 100 / 57.2958) - 1.57;
            var xx = this.rad * Math.cos(rr);
            var yy = this.rad * Math.sin(rr);
            this.shp.lineTo(xx, yy);
            var i = Math.round((pc % 100) / 25);
            while (i < this.har.length) {
                this.shp.lineTo(this.har[i][0], this.har[i][1]);
                i++;
            }
            this.shp.endFill();
        } else {
            this.cooldownDone();
        }
    } catch (e) {}
};
canvas.app.battle.view.CenterSpellItemCdRenderer.prototype.cooldownDone = function () {
    this.activated = this.forStepFl = false;
    canvas.EventManager.removeEventListener(canvas.app.battle.Event.ENTER_FRAME, null, this.handlerFrame, this);
    this.hideTxt();
    this.rt.cooldownCancel();
};
canvas.app.battle.view.CenterSpellItemCdRenderer.prototype.showTxt = function () {
    if (this.tf.parent != this) {
        this.addChild(this.tf);
    }
};
canvas.app.battle.view.CenterSpellItemCdRenderer.prototype.hideTxt = function () {
    if (this.tf.parent == this) {
        this.removeChild(this.tf);
    }
};
canvas.app.battle.view.CenterSpellItemCdRenderer.prototype.active = function () {
    return this.activated;
};
canvas.app.battle.view.CenterSpellItemCdRenderer.prototype.setActive = function (b) {
    this.activated = b;
};
canvas.app.battle.view.CenterSpellItemCdRenderer.prototype.forStep = function () {
    return this.forStepFl;
};
canvas.app.battle.view.CenterSpellItemCdRenderer.prototype.setForStep = function (b) {
    this.forStepFl = b;
};
canvas.app.battle.view.AuraControlView = function (rt) {
    canvas.px.Container.call(this);
    this.items = [];
    var pos = [
        [-33, -68],
        [-55, -55],
        [-55, 23],
        [-33, 37],
    ];
    for (var i = 0; i < 4; i++) {
        var item = new canvas.app.battle.view.AuraItemView(canvas.app.battle.model.auras[i], rt);
        this.addChild(item);
        this.items.push(item);
        item.position.set(pos[i][0], pos[i][1]);
    }
    canvas.EventManager.addEventListener(canvas.app.battle.Event.START_AURA_COOLDOWN, null, this.cooldownHandler, this);
};
canvas.app.battle.view.AuraControlView.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.battle.view.AuraControlView.prototype.update = function () {
    for (var i = 0; i < 4; i++) {
        var auraData = canvas.app.battle.model.auras[i];
        this.items[i].data = auraData;
        this.items[i].selected = auraData && auraData.id == canvas.app.battle.model.currentAura;
    }
};
canvas.app.battle.view.AuraControlView.prototype.useAura = function (index) {
    var auraItem = this.items[index];
    if (this.interactiveChildren && auraItem) {
        auraItem.action();
    }
};
canvas.app.battle.view.AuraControlView.prototype.spellsUnlockOnError = function (effID) {
    for (var i = 0; i < 4; i++) {
        var auraData = canvas.app.battle.model.auras[i];
        if (auraData && parseInt(auraData.id) == effID) {
            this.timerComplete();
            return;
        }
    }
};
canvas.app.battle.view.AuraControlView.prototype.cooldownHandler = function () {
    this.interactiveChildren = false;
    if (this.timer) clearTimeout(this.timer);
    this.timer = setTimeout(this.timerComplete.bind(this), 3e3);
};
canvas.app.battle.view.AuraControlView.prototype.timerComplete = function () {
    this.interactiveChildren = true;
};
canvas.app.battle.view.AuraItemView = function (auraData, rt) {
    this._data = null;
    Object.defineProperty(this, "data", {
        get: function () {
            return this._data;
        },
        set: function (value) {
            if (value) {
                this.locked = false;
                if (value.image != "" && (this._data == null || this._data.image != value.image)) {
                    canvas.Functions.destroyChildren(this.imageContainer);
                    var loader = new canvas.ui.Image(value.image);
                    this.imageContainer.addChild(loader);
                    this.hint.text = value.title;
                    loader.scale.set(0.5, 0.5);
                }
                var pers = canvas.app.battle.model.memDat[canvas.app.battle.model.persId];
                if (pers && canvas.app.battle.model.testFlag(pers.persFlags, canvas.app.battle.Const.FS_PF_NO_AURAS)) this.locked = true;
            } else {
                this.locked = true;
            }
            this._data = value;
        },
    });
    this._locked = false;
    Object.defineProperty(this, "locked", {
        get: function () {
            return this._locked;
        },
        set: function (value) {
            this._locked = value;
            this.locker.visible = this._locked;
            this.buttonMode = !this._locked;
            if (this._locked) this.selected = false;
        },
    });
    this._selected = null;
    Object.defineProperty(this, "selected", {
        get: function () {
            return this._selected;
        },
        set: function (value) {
            this._selected = value;
            this.selector.visible = this._selected;
        },
    });
    canvas.px.Container.call(this);
    this.rt = rt;
    this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_aura_circle")));
    this.imageContainer = new canvas.px.Container();
    this.imageContainer.interactive = true;
    this.addChild(this.imageContainer);
    this.hint = new canvas.app.view.PxHint("title");
    canvas.EventManager.dispatchEvent(canvas.app.battle.Event.HINT_ADD, null, { target: this.imageContainer, params: new canvas.utils.HintParams(this.hint) });
    var shape = new canvas.px.Graphics();
    shape.beginFill(16711935, 1);
    shape.drawCircle(0, 0, 10);
    shape.endFill();
    this.addChild(shape);
    shape.position.set(15, 15);
    this.imageContainer.mask = shape;
    this.selector = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_aura_selector"));
    this.addChild(this.selector);
    this.locker = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_aura_lock"));
    this.addChild(this.locker);
    this.locker.position.set(8, 7);
    this.light = new canvas.px.Graphics();
    this.light.beginFill(16777215, 0.3);
    this.light.drawCircle(15, 15, 15);
    this.light.endFill();
    this.light.visible = false;
    this.light.blendMode = canvas.px.BlendMode.OVERLAY;
    this.addChild(this.light);
    this.buttonMode = true;
    this.interactive = true;
    this.locked = false;
    this.selected = false;
    this.data = auraData;
    this.hitArea = new canvas.px.Circle(15, 15, 12);
    this.mouseover = this.overHandler;
    this.mouseout = this.outHandler;
    this.mouseup = this.clickHandler;
};
canvas.app.battle.view.AuraItemView.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.battle.view.AuraItemView.prototype.clickHandler = function () {
    this.action();
};
canvas.app.battle.view.AuraItemView.prototype.outHandler = function () {
    this.light.visible = false;
};
canvas.app.battle.view.AuraItemView.prototype.overHandler = function () {
    if (this.data) {
        this.light.visible = true;
    }
};
canvas.app.battle.view.AuraItemView.prototype.action = function () {
    if (this.data) {
        if (this.data.id == canvas.app.battle.model.currentAura) {
            canvas.EventManager.dispatchEvent(canvas.app.battle.Event.EVENT_MY_FUNC, null, [canvas.app.battle.Const.MY_FUNC_UNSET_AURA, parseInt(this.data.id)]);
        } else {
            canvas.EventManager.dispatchEvent(canvas.app.battle.Event.EVENT_MY_FUNC, null, [canvas.app.battle.Const.MY_FUNC_USE_EFFECT, parseInt(this.data.id)]);
        }
        canvas.EventManager.dispatchEvent(canvas.app.battle.Event.START_AURA_COOLDOWN, this);
    }
};
canvas.app.battle.view.PersEffects = function (xx, yy, norm, base_lnk) {
    canvas.px.Container.call(this);
    this.position.set(xx, yy);
    this.baseLnk = base_lnk;
    this.effList = [];
    this.items = {};
    if (norm) {
        this.deltaX = 28;
        this.startX = 0;
    } else {
        this.deltaX = -28;
        this.startX = -28;
    }
};
canvas.app.battle.view.PersEffects.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.battle.view.PersEffects.prototype.initEffects = function (cur_list) {
    this.clearItems();
    this.effList = cur_list;
    this.updateItems(true);
};
canvas.app.battle.view.PersEffects.prototype.clearItems = function () {
    this.effList = [];
    this.removeChildren();
};
canvas.app.battle.view.PersEffects.prototype.updateItems = function (isNew) {
    if (isNew == undefined) isNew = false;
    if (isNew) {
        for (var key in this.items) {
            if (this.items[key] != null) this.items[key].destroy();
        }
        this.items = {};
    }
    var reposit = false;
    var cur_eff;
    var item;
    var i;
    for (i = 0; i < this.effList.length; i++) {
        cur_eff = this.effList[i];
        if (!cur_eff.lnk) {
            cur_eff.lnk = new canvas.app.battle.view.PersEffectItem(cur_eff, this.baseLnk);
            this.addChild(cur_eff.lnk);
            reposit = true;
        }
        item = cur_eff.lnk;
        if (cur_eff.cnt <= 0) {
            this.removeChild(item);
            this.effList.splice(i, 1);
            item.destroy();
            this.items[cur_eff.pic] = null;
            reposit = true;
        } else {
            item.setCount(cur_eff.cnt);
            this.items[cur_eff.pic] = item;
        }
    }
    if (reposit) {
        this.repositItems();
    }
};
canvas.app.battle.view.PersEffects.prototype.repositItems = function () {
    var item_cnt = 0;
    var xx = this.startX;
    var yy = 0;
    for (var i = 0; i < this.children.length; i++) {
        var item = this.getChildAt(i);
        item.position.set(xx, yy);
        item_cnt++;
        if (item_cnt <= 4) {
            xx += this.deltaX;
        } else {
            item_cnt = 0;
            xx = this.startX;
            yy += 18;
        }
    }
};
canvas.app.battle.view.PersEffects.prototype.deltaItem = function (art_id, curTitle, curPic, curDelta, animData, cureetime, turnsLeft) {
    var fnd = false;
    for (var i = 0; i < this.effList.length; i++) {
        var obj = this.effList[i];
        if (obj.pic == curPic) {
            fnd = true;
            obj.cnt += curDelta;
            obj.animData = animData;
            obj.eetimeMax = Math.max(cureetime, obj.eetimeMax);
            break;
        }
    }
    if (!fnd && curDelta > 0) {
        var new_eff = {};
        new_eff.id = art_id;
        new_eff.title = curTitle;
        new_eff.pic = curPic;
        new_eff.cnt = curDelta;
        new_eff.lnk = null;
        new_eff.animData = animData;
        new_eff.eetimeMax = cureetime;
        new_eff.turnsLeft = turnsLeft;
        this.effList.push(new_eff);
    }
    this.updateItems();
};
canvas.app.battle.view.PersEffects.prototype.haveAnimData = function (dat) {
    for (var i = 0; i < this.effList.length; i++) {
        var ss = this.effList[i].animData.split("/");
        if (ss.length > 2) {
            if (ss[2]) {
                var parsed_effects = canvas.app.battle.model.parser.parseAdditionalEffectsData(canvas.app.battle.Const.AEFF_ABSORB, ss[2]);
                for (var k = 0; k < parsed_effects.length; k++) {
                    if (parsed_effects[k] == dat) {
                        return true;
                    }
                }
            }
        }
    }
    return false;
};
canvas.app.battle.view.PersEffectItem = function (data, _base_lnk) {
    canvas.px.Container.call(this);
    this.baseLnk = _base_lnk;
    this.data = data;
    this.tf = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_9_STROKE, 16777215, 19, 19, "right");
    this.tf.position.set(-4, 1);
    this.bmp = new canvas.ui.Image(this.data.pic);
    this.bmp.position.set(16, 4);
    this.bmp.scale.set(0.25, 0.25);
    this.bmp.interactive = true;
    this.hint = new canvas.app.view.PxHint("");
    canvas.EventManager.dispatchEvent(canvas.app.battle.Event.HINT_ADD, null, { target: this.bmp, params: new canvas.utils.HintParams(this.hint) });
    this.updateHintText();
    this.interactive = true;
    this.buttonMode = true;
    this.click = this.clickHandler;
    this.mouseout = this.outHandler;
    this.mouseover = this.overHandler;
    this.addChild(this.tf);
    this.addChild(this.bmp);
};
canvas.app.battle.view.PersEffectItem.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.battle.view.PersEffectItem.prototype.setCount = function (cnt) {
    this.tf.text = Math.max(0, cnt);
};
canvas.app.battle.view.PersEffectItem.prototype.clickHandler = function () {
    showArtifactInfo(false, this.data.id);
};
canvas.app.battle.view.PersEffectItem.prototype.outHandler = function () {
    if (this.timer) clearInterval(this.timer);
};
canvas.app.battle.view.PersEffectItem.prototype.overHandler = function () {
    this.updateHintText();
};
canvas.app.battle.view.PersEffectItem.prototype.timerHandler = function () {
    this.updateHintText();
};
canvas.app.battle.view.PersEffectItem.prototype.updateHintText = function () {
    var DI = this.data;
    var time_flag = false;
    var txt = DI.title;
    var time = Math.floor(DI.eetimeMax - Date.now() / 1e3 - (canvas.app.battle.model.serverTimestamp - canvas.app.battle.model.clientTimestamp));
    var time_str = Math.max(0, 1 + time).toString();
    var tmpTimeStr = "";
    var tmpTimeStrEng = "";
    var br = "\n";
    if (time < 3600) {
        switch (canvas.Config.lng) {
            case "ru":
            case "turk":
            case "de":
            case "cn":
                if (DI.turnsLeft == 1) txt += br + canvas.Translator.getText(44) + " ";
                else txt += br + canvas.Translator.getText(43) + " ";
                tmpTimeStr += time_str + " " + canvas.Translator.getText(2003);
                time_flag = true;
                break;
            case "en":
                txt += br + " ";
                tmpTimeStrEng += canvas.Translator.getText(43);
                tmpTimeStr += time_str + " " + canvas.Translator.getText(2003);
                break;
            default:
                txt += br + time_str;
                time_flag = true;
                break;
        }
        if (this.timer) clearInterval(this.timer);
        this.timer = setInterval(this.timerHandler.bind(this), 1e3);
    }
    if (!time_flag) {
        if (DI.turnsLeft == 1) txt += br + canvas.Translator.getText(44) + " ";
        else txt += br + canvas.Translator.getText(43) + " ";
    }
    if (DI.turnsLeft > 0 && DI.turnsLeft < 3600) {
        var turns = 0;
        turns = DI.turnsLeft;
        if (turns >= 10) {
            turns = turns % 10;
        }
        if (turns == 1) {
            if (time_flag) {
                txt += DI.turnsLeft + this.getRightPhraseForTurns(DI.turnsLeft) + tmpTimeStrEng + canvas.Translator.getText(53) + " ";
            } else {
                txt += DI.turnsLeft + this.getRightPhraseForTurns(DI.turnsLeft);
            }
        }
        if (turns > 1 || turns == 0) {
            if (time_flag) {
                txt += DI.turnsLeft + this.getRightPhraseForTurns(DI.turnsLeft) + tmpTimeStrEng + canvas.Translator.getText(53) + " ";
            } else {
                txt += DI.turnsLeft + this.getRightPhraseForTurns(DI.turnsLeft);
            }
        }
    }
    if (!time_flag && (DI.turnsLeft <= 0 || DI.turnsLeft >= 3600)) {
        txt = DI.title;
    } else txt += tmpTimeStr;
    this.hint.text = txt;
};
canvas.app.battle.view.PersEffectItem.prototype.getRightPhraseForTurns = function (val) {
    if (this.isPhraseManyTurns(val)) return " " + canvas.Translator.getText(52);
    if (this.isPhraseTurn(val)) return " " + canvas.Translator.getText(50);
    if (this.isPhraseOneTurn(val)) return " " + canvas.Translator.getText(51);
    return "--:--";
};
canvas.app.battle.view.PersEffectItem.prototype.isPhraseManyTurns = function (val) {
    var modulo = val % 100;
    if (modulo >= 11 && modulo <= 20) return true;
    modulo = val % 10;
    if (modulo >= 5 && modulo <= 9) return true;
    if (modulo == 0) return true;
    return false;
};
canvas.app.battle.view.PersEffectItem.prototype.isPhraseTurn = function (val) {
    var modulo = val % 10;
    if (modulo >= 2 && modulo <= 4) return true;
    return false;
};
canvas.app.battle.view.PersEffectItem.prototype.isPhraseOneTurn = function (val) {
    var modulo = val % 10;
    if (modulo == 1) return true;
    return false;
};
canvas.app.battle.view.PersEffectItem.prototype.destroy = function () {
    canvas.EventManager.dispatchEvent(canvas.app.battle.Event.HINT_REMOVE, null, { target: this.bmp });
    this.baseLnk = null;
    this.data = null;
    this.tf = null;
    this.bmp = null;
    if (this.timer) {
        clearInterval(this.timer);
        this.timer = null;
    }
    this.hint = null;
    this.mouseup = null;
    this.mouseout = null;
    this.mouseover = null;
    canvas.ui.Component.prototype.destroy.apply(this, [{ children: true }]);
};
canvas.app.battle.view.HpMpView = function () {
    canvas.px.Container.call(this);
    this.hpPersFill = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_hp_fill"));
    this.hpPers = new canvas.px.Graphics();
    this.hpPers.beginFill(0, 1);
    this.hpPers.lineStyle(0, 0, 0);
    this.hpPers.drawRect(0, 0, this.hpPersFill.width, this.hpPersFill.height);
    this.hpPers.endFill();
    this.addChild(this.hpPersFill);
    this.addChild(this.hpPers);
    this.hpPersFill.mask = this.hpPers;
    this.hpPersFill.position.set(42, 38);
    this.hpPers.position.set(42, 38);
    this.hpOppFill = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_hp_fill"));
    this.hpOpp = new canvas.px.Graphics();
    this.hpOpp.beginFill(0, 1);
    this.hpOpp.lineStyle(0, 0, 0);
    this.hpOpp.drawRect(0, 0, this.hpOppFill.width, this.hpOppFill.height);
    this.hpOpp.endFill();
    this.addChild(this.hpOppFill);
    this.addChild(this.hpOpp);
    this.hpOppFill.mask = this.hpOpp;
    this.hpOppFill.scale.x = -1;
    this.hpOppFill.position.set(403, 38);
    this.hpOpp.position.set(403, 38);
    this.mpPersFill = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_mp_fill"));
    this.mpPers = new canvas.px.Graphics();
    this.mpPers.beginFill(0, 1);
    this.mpPers.lineStyle(0, 0, 0);
    this.mpPers.drawRect(0, 0, this.mpPersFill.width, this.mpPersFill.height);
    this.mpPers.endFill();
    this.addChild(this.mpPersFill);
    this.addChild(this.mpPers);
    this.mpPersFill.mask = this.mpPers;
    this.mpPersFill.position.set(42, 52);
    this.mpPers.position.set(42, 52);
    this.mpOppFill = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_mp_fill"));
    this.mpOpp = new canvas.px.Graphics();
    this.mpOpp.beginFill(0, 1);
    this.mpOpp.lineStyle(0, 0, 0);
    this.mpOpp.drawRect(0, 0, this.mpOppFill.width, this.mpOppFill.height);
    this.mpOpp.endFill();
    this.addChild(this.mpOppFill);
    this.addChild(this.mpOpp);
    this.mpOppFill.mask = this.mpOpp;
    this.mpOppFill.position.set(275, 52);
    this.mpOpp.position.set(403, 52);
    this.hpPersText = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_9, 16770533, 129, 16, "center");
    this.hpPersText.position.set(42, 38);
    this.addChild(this.hpPersText);
    this.mpPersText = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_9, 16770533, 129, 16, "center");
    this.mpPersText.position.set(42, 52);
    this.addChild(this.mpPersText);
    this.hpOppText = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_9, 16770533, 129, 16, "center");
    this.hpOppText.position.set(275, 38);
    this.addChild(this.hpOppText);
    this.mpOppText = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_9, 16770533, 129, 16, "center");
    this.mpOppText.position.set(275, 52);
    this.addChild(this.mpOppText);
    this.setHpPers(0, 0);
    this.setMpPers(0, 0);
    this.setHpOpp(0, 0);
    this.setMpOpp(0, 0);
};
canvas.app.battle.view.HpMpView.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.battle.view.HpMpView.prototype.setHpPers = function (valCur, valMax) {
    this.setValue(this.hpPersText, this.hpPers, valCur, valMax, 1);
};
canvas.app.battle.view.HpMpView.prototype.setMpPers = function (valCur, valMax) {
    this.setValue(this.mpPersText, this.mpPers, valCur, valMax, 1);
};
canvas.app.battle.view.HpMpView.prototype.setHpOpp = function (valCur, valMax) {
    this.setValue(this.hpOppText, this.hpOpp, valCur, valMax, -1);
};
canvas.app.battle.view.HpMpView.prototype.setMpOpp = function (valCur, valMax) {
    this.setValue(this.mpOppText, this.mpOpp, valCur, valMax, -1);
};
canvas.app.battle.view.HpMpView.prototype.setValue = function (textField, maskView, valCur, valMax, phase) {
    valMax = valMax < 0 ? 0 : valMax;
    valCur = valCur > valMax ? valMax : valCur < 0 ? 0 : valCur;
    if (valMax != 0) {
        textField.text = valCur + "/" + valMax;
        maskView.scale.x = (valCur / valMax) * phase;
    } else {
        textField.text = "0/0";
        maskView.scale.x = 0;
    }
};
canvas.app.battle.view.NickView = function () {
    canvas.px.Container.call(this);
    this.field = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_9_BOLD, 16697738, 120, 10, "left");
    this.addChild(this.field);
    this.field.y = 2;
    this.infoButton = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "battle_info_icon"));
    this.addChild(this.infoButton);
    this.visible = false;
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.infoButton, this.clickHandler, this);
};
canvas.app.battle.view.NickView.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.battle.view.NickView.prototype.clickHandler = function () {
    var conf = canvas.app.battle.model;
    var pers_id = this.id;
    if (conf.memDat[pers_id] == null) return;
    var persFlags = conf.memDat[pers_id].persFlags;
    var team = conf.memDat[pers_id].team;
    var isBot = (persFlags & canvas.app.battle.Const.FS_PF_BOT) == canvas.app.battle.Const.FS_PF_BOT;
    var isShadow = (persFlags & canvas.app.battle.Const.FS_PF_SHADOW) == canvas.app.battle.Const.FS_PF_SHADOW;
    var isInvisible = (persFlags & canvas.app.battle.Const.FS_PF_INVISIBLE) == canvas.app.battle.Const.FS_PF_INVISIBLE;
    if (((conf.fightFlags & canvas.app.battle.Const.FIGHT_FLAG_BLIND) == canvas.app.battle.Const.FIGHT_FLAG_BLIND || isInvisible) && conf.invisibleInfoUrl) canvas.Functions.navigateToURL(conf.invisibleInfoUrl, "_blank");
    else if (isShadow) showShadowInfo(false, pers_id.toString(), false, conf.fightId, conf.fightServerId ? conf.fightServerId : false);
    else if (isBot) showBotInfo(pers_id.toString(), "0", conf.fightId, conf.fightServerId ? conf.fightServerId : false);
    else showUserInfo(this.nick, conf["team" + team + "serverUrl"] ? conf["team" + team + "serverUrl"] : false);
};
canvas.app.battle.view.NickView.prototype.update = function (nick, id) {
    this.nick = nick;
    this.id = id;
    if (this.nick.length <= 14) {
        this.field.text = this.nick;
    } else {
        this.field.text = this.nick.substr(0, 12) + "...";
    }
    this.field.x = -Math.round(this.field.width / 2) - 5;
    this.infoButton.x = -this.field.x - 12;
    this.visible = true;
};
canvas.app.battle.view.NickView.prototype.unshow = function () {
    this.nick = "";
    this.id = 0;
    this.field.text = "";
    this.visible = false;
};
canvas.app.battle.view.LevelView = function () {
    this._checked = false;
    Object.defineProperty(this, "checked", {
        get: function () {
            return this._checked;
        },
        set: function (value) {
            this._checked = value;
            this.button.checked = this._checked;
            this.button.enabled = !this._checked;
        },
    });
    canvas.px.Container.call(this);
    this.button = new canvas.ui.Button(
        canvas.ResourceLoader.getImage("ui", "battle_button_lvl_base"),
        canvas.ResourceLoader.getImage("ui", "battle_button_lvl_over"),
        null,
        null,
        null,
        new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_button_lvl_down"))
    );
    this.addChild(this.button);
    this.field = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_9_BOLD, 3616041, 25, 18, "center");
    this.addChild(this.field);
    this.field.position.set(5, 13);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.button, this.clickHandler, this);
};
canvas.app.battle.view.LevelView.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.battle.view.LevelView.prototype.clickHandler = function () {
    this.checked = true;
};
canvas.app.battle.view.LevelView.prototype.setLevel = function (value) {
    this.field.text = value;
};
canvas.app.battle.view.TimerView = function () {
    canvas.px.Container.call(this);
    this.field = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_14_NUMBERS_BOLD_STROKE_BEVEL, 16777184, 55, 25, "center");
    this.addChild(this.field);
    this.field.text = "00:00";
    this.visible = false;
};
canvas.app.battle.view.TimerView.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.battle.view.TimerView.prototype.timerFunc = function () {
    var rest = this.timeEnd - Date.now();
    if (rest < 0) {
        this.deactivate();
    } else {
        rest = Math.round(rest / 1e3);
        var cMIN = Math.floor(rest / 60);
        var cSEC = rest - cMIN * 60;
        this.field.text = (cMIN < 10 ? "0" + cMIN.toString() : cMIN.toString()) + ":" + (cSEC < 10 ? "0" + cSEC.toString() : cSEC.toString());
    }
};
canvas.app.battle.view.TimerView.prototype.activate = function (lost_time) {
    if (typeof lost_time == "undefined") lost_time = 0;
    if (this.timerIv) {
        clearInterval(this.timerIv);
    }
    this.timeEnd = Date.now() + canvas.app.battle.model.roundTime - lost_time;
    this.timerIv = setInterval(this.timerFunc.bind(this), canvas.app.battle.Const.TIMEOUT_REFRESH_INTERVAL);
    this.timerFunc();
    this.visible = true;
};
canvas.app.battle.view.TimerView.prototype.deactivate = function () {
    if (this.timerIv) {
        clearInterval(this.timerIv);
        this.timerIv = 0;
    }
    this.visible = false;
};
canvas.app.battle.view.ErrorPopup = function () {
    canvas.px.Container.call(this);
    this.interactive = false;
    this.interactiveChildren = false;
    this.field = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_12_BOLD_STROKE_RED_WHITE, -1, 444, 20, "center");
    this.addChild(this.field);
};
canvas.app.battle.view.ErrorPopup.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.battle.view.ErrorPopup.prototype.activate = function (str) {
    this.field.text = str;
    this.alpha = 1;
    canvas.EventManager.addEventListener(canvas.app.battle.Event.ENTER_FRAME, null, this.frameHandler, this);
};
canvas.app.battle.view.ErrorPopup.prototype.frameHandler = function () {
    this.alpha -= 0.01;
    if (this.alpha <= 0) {
        if (this.parent) {
            this.parent.removeChild(this);
        }
        canvas.EventManager.removeEventListener(canvas.app.battle.Event.ENTER_FRAME, null, this.frameHandler, this);
    }
};
canvas.app.battle.view.MainPopup = function (baseLnk) {
    canvas.px.Container.call(this);
    this.baseLnk = baseLnk;
    this.bgBlank = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_popup_bg_blank"));
    this.bgVictory = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_popup_bg_victory"));
    this.bgDefeat = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_popup_bg_defeat"));
    this.midVictory = new canvas.px.Sprite(canvas.ResourceLoader.getImage("locale", "battle_popup_mid_victory"));
    this.midDefeat = new canvas.px.Sprite(canvas.ResourceLoader.getImage("locale", "battle_popup_mid_defeat"));
    this.midKilled = new canvas.px.Sprite(canvas.ResourceLoader.getImage("locale", "battle_popup_mid_killed"));
    this.borTop = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_popup_bor_top"));
    this.borBottom = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_popup_bor_bottom"));
    this.borLeft = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_popup_bor_left"));
    this.borRight = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_popup_bor_right"));
    this.addChild(this.bgBlank);
    this.addChild(this.bgVictory);
    this.addChild(this.bgDefeat);
    this.addChild(this.borTop);
    this.addChild(this.borBottom);
    this.addChild(this.borLeft);
    this.addChild(this.borRight);
    this.borBottom.y = 111;
    this.borLeft.y = 29;
    this.borLeft.height = 82;
    this.borRight.position.set(268, 29);
    this.borRight.height = 82;
    this.closeButton = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "battle_popup_btn"));
    this.addChild(this.closeButton);
    this.closeButton.position.set(83, 116);
    this.midVictory.position.set(43, 35);
    this.midDefeat.position.set(12, 42);
    this.midKilled.position.set(20, 47);
    this.addChild(this.midVictory);
    this.addChild(this.midDefeat);
    this.addChild(this.midKilled);
    this.headLabel = new canvas.ui.Text(canvas.app.battle.model.isBold ? canvas.Const.FONT_TAHOMA_11_BOLD : canvas.Const.FONT_TAHOMA_11, 16769466, 104, 23, "center");
    this.headLabel.position.set(86, 3);
    this.addChild(this.headLabel);
    this.middleLabel = new canvas.ui.Text(canvas.app.battle.model.isBold ? canvas.Const.FONT_ARIAL_11_BOLD : canvas.Const.FONT_ARIAL_11, 7693391, 230, 90, "center", "middle");
    this.middleLabel.position.set(23, 26);
    this.addChild(this.middleLabel);
    this.bottomLabel = new canvas.ui.Text(canvas.app.battle.model.isBold ? canvas.Const.FONT_TAHOMA_10_BOLD : canvas.Const.FONT_TAHOMA_10, 16769466, 73, 18, "center");
    this.bottomLabel.position.set(102, 117);
    this.addChild(this.bottomLabel);
    this.clearList = [this.bgBlank, this.bgVictory, this.bgDefeat, this.midVictory, this.midDefeat, this.midKilled, this.headLabel, this.middleLabel, this.bottomLabel, this.closeButton];
    this.waitingPopup = new canvas.app.battle.view.WaitingPopup();
    this.setClear();
    this.interactive = true;
};
canvas.app.battle.view.MainPopup.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.battle.view.MainPopup.prototype.deactivate = function () {
    if (this.parent) {
        this.parent.removeChild(this);
    }
};
canvas.app.battle.view.MainPopup.prototype.setClear = function () {
    for (var i = 0; i < this.clearList.length; i++) {
        this.clearList[i].visible = false;
    }
    if (this.waitingPopup.parent == this) {
        this.removeChild(this.waitingPopup);
        this.waitingPopup.removedHandler();
    }
    this.setBackVisible(true);
};
canvas.app.battle.view.MainPopup.prototype.setBackVisible = function (b) {
    this.borBottom.visible = b;
    this.borLeft.visible = b;
    this.borRight.visible = b;
    this.borTop.visible = b;
};
canvas.app.battle.view.MainPopup.prototype.showLabel = function (field, txt) {
    field.visible = true;
    field.text = txt;
};
canvas.app.battle.view.MainPopup.prototype.updateWait = function () {
    if (this.currentState == canvas.app.battle.Const.POP_ST_WAIT) {
        this.setBackVisible(false);
        this.waitingPopup.setState(canvas.app.battle.model.fightRunning ? canvas.app.battle.Const.WAITING_OPPONENT : canvas.app.battle.Const.WAITING_BATTLE);
        this.addChild(this.waitingPopup);
        this.waitingPopup.addedHandler();
    }
};
canvas.app.battle.view.MainPopup.prototype.finishClickHandlerBT = function () {
    canvas.EventManager.removeEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.closeButton, this.finishClickHandlerBT, this);
    this.baseLnk.mEve.fightOver(false);
    canvas.Functions.navigateToURL("fight.php?flee=1", "_self");
};
canvas.app.battle.view.MainPopup.prototype.finishClickHandler = function () {
    canvas.EventManager.removeEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.closeButton, this.finishClickHandler, this);
    canvas.Functions.navigateToURL(canvas.app.battle.model.urlFinish2 == "" ? canvas.app.battle.model.urlFinish : canvas.app.battle.model.urlFinish2, "_self");
};
canvas.app.battle.view.MainPopup.prototype.error1ClickHandler = function () {
    canvas.EventManager.removeEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.closeButton, this.error1ClickHandler, this);
    canvas.Functions.navigateToURL(canvas.app.battle.model.urlError, "_self");
};
canvas.app.battle.view.MainPopup.prototype.error2ClickHandler = function () {
    canvas.EventManager.removeEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.closeButton, this.error2ClickHandler, this);
    this.deactivate();
    canvas.EventManager.dispatchEvent(canvas.app.battle.Event.TRY_RECONNECT, this);
};
canvas.app.battle.view.MainPopup.prototype.error3ClickHandler = function () {
    canvas.EventManager.removeEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.closeButton, this.error3ClickHandler, this);
    canvas.Functions.navigateToURL(canvas.app.battle.model.urlFinish, "_self");
};
canvas.app.battle.view.MainPopup.prototype.unknownErrorClickHandler = function () {
    canvas.EventManager.removeEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.closeButton, this.unknownErrorClickHandler, this);
    canvas.EventManager.dispatchEvent(canvas.app.battle.Event.REPAIR, this);
};
canvas.app.battle.view.MainPopup.prototype.activate = function (state_id, error_code, str_head, str_body) {
    if (typeof error_code == "undefined") error_code = 0;
    if (typeof str_head == "undefined") str_head = "";
    if (typeof str_body == "undefined") str_body = "";
    var conf = canvas.app.battle.model;
    canvas.app.battle.log("MainPopup:setState " + state_id + " error_code " + error_code);
    this.currentState = state_id;
    this.setClear();
    switch (state_id) {
        case canvas.app.battle.Const.POP_ST_WAIT_BT:
            if ((!conf.watchFight || conf.persId == conf.myPersId) && conf.canLeaveFight) {
                this.bgBlank.visible = true;
                this.middleLabel.visible = true;
                this.middleLabel.text = canvas.Translator.getText(40);
                this.showLabel(this.headLabel, canvas.Translator.getText(39));
                this.closeButton.visible = true;
                this.showLabel(this.bottomLabel, canvas.Translator.getText(2));
                canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.closeButton, this.finishClickHandlerBT, this);
            } else {
                this.deactivate();
                return;
            }
            break;
        case canvas.app.battle.Const.POP_ST_WAIT:
            this.updateWait();
            break;
        case canvas.app.battle.Const.POP_ST_VISCORY:
            this.showLabel(this.headLabel, canvas.Translator.getText(1));
            this.closeButton.visible = true;
            canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.closeButton, this.finishClickHandler, this);
            if (conf.urlFinish2 != "") {
                this.bgBlank.visible = true;
                this.middleLabel.visible = true;
                this.middleLabel.text = conf.urlFinish2Text;
                this.showLabel(this.bottomLabel, canvas.Translator.getText(48));
            } else {
                this.bgVictory.visible = true;
                this.midVictory.visible = true;
                this.showLabel(this.bottomLabel, canvas.Translator.getText(2));
            }
            break;
        case canvas.app.battle.Const.POP_ST_DEFEAT:
            this.showLabel(this.headLabel, canvas.Translator.getText(1));
            this.closeButton.visible = true;
            canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.closeButton, this.finishClickHandler, this);
            if (conf.urlFinish2 != "") {
                this.bgBlank.visible = true;
                this.middleLabel.visible = true;
                this.middleLabel.text = conf.urlFinish2Text;
                this.showLabel(this.bottomLabel, canvas.Translator.getText(48));
            } else {
                this.bgDefeat.visible = true;
                this.midDefeat.visible = true;
                this.showLabel(this.bottomLabel, canvas.Translator.getText(2));
            }
            break;
        case canvas.app.battle.Const.POP_ST_KILLED:
            this.bgBlank.visible = true;
            this.midKilled.visible = true;
            this.showLabel(this.headLabel, canvas.Translator.getText(0));
            break;
        case canvas.app.battle.Const.POP_ST_ERROR:
            this.bgBlank.visible = true;
            this.showLabel(this.headLabel, canvas.Translator.getText(4));
            this.closeButton.visible = true;
            this.middleLabel.visible = true;
            switch (error_code) {
                case canvas.app.battle.Const.POP_ER_SHUTDOWN:
                    this.middleLabel.text = canvas.Translator.getText(59);
                    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.closeButton, this.error1ClickHandler, this);
                    this.showLabel(this.bottomLabel, canvas.Translator.getText(2));
                    break;
                case canvas.app.battle.Const.POP_ER_SOC_CLOSE:
                    canvas.EventManager.dispatchEvent(canvas.app.battle.Event.RESET, this);
                    this.middleLabel.text = canvas.Translator.getText(5);
                    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.closeButton, this.error2ClickHandler, this);
                    this.showLabel(this.bottomLabel, canvas.Translator.getText(37));
                    break;
                case canvas.app.battle.Const.POP_ER_AUTH_FAIL:
                    this.middleLabel.text = canvas.Translator.getText(3);
                    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.closeButton, this.error3ClickHandler, this);
                    this.showLabel(this.bottomLabel, canvas.Translator.getText(2));
                    break;
                case canvas.app.battle.Const.POP_ER_FIGHT_ENDED:
                    this.middleLabel.text = canvas.Translator.getText(6);
                    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.closeButton, this.error3ClickHandler, this);
                    this.showLabel(this.bottomLabel, canvas.Translator.getText(2));
                    break;
                default:
                    canvas.app.battle.log("MainPopup WARN: unknown error_code = " + error_code, 16711680);
            }
            break;
        case canvas.app.battle.Const.POP_ST_UNKNOWN:
            this.bgBlank.visible = true;
            this.showLabel(this.headLabel, str_head);
            this.middleLabel.visible = true;
            this.middleLabel.text = str_body;
            this.closeButton.visible = true;
            canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.closeButton, this.unknownErrorClickHandler, this);
            this.showLabel(this.bottomLabel, canvas.Translator.getText(7));
            break;
        default:
            canvas.app.battle.log("MainPopup ERR: unknown popup state_id = " + state_id, 16711680);
    }
};
canvas.app.battle.view.WaitingPopup = function () {
    canvas.px.Container.call(this);
    this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_waiting_popup_back")));
    this.waiter = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_waiter"));
    this.addChild(this.waiter);
    this.waiter.pivot = new canvas.px.Point(Math.round(this.waiter.width * 0.5), Math.round(this.waiter.height * 0.5));
    this.waiter.position.set(53, 63);
    this.container = new canvas.px.Sprite();
    this.addChild(this.container);
};
canvas.app.battle.view.WaitingPopup.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.battle.view.WaitingPopup.prototype.setState = function (state) {
    canvas.Functions.destroyChildren(this.container);
    var sprite;
    switch (state) {
        case canvas.app.battle.Const.WAITING_BATTLE:
            sprite = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_icon_wait_battle"));
            this.container.addChild(sprite);
            sprite.position.set(41, 51);
            sprite = new canvas.px.Sprite(canvas.ResourceLoader.getImage("locale", "battle_popup_mid_wait2"));
            this.container.addChild(sprite);
            sprite.position.set(87, 43);
            break;
        case canvas.app.battle.Const.WAITING_OPPONENT:
            sprite = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_icon_wait_opponent"));
            this.container.addChild(sprite);
            sprite.position.set(41, 47);
            sprite = new canvas.px.Sprite(canvas.ResourceLoader.getImage("locale", "battle_popup_mid_wait"));
            this.container.addChild(sprite);
            sprite.position.set(87, 43);
            break;
    }
};
canvas.app.battle.view.WaitingPopup.prototype.addedHandler = function () {
    canvas.EventManager.addEventListener(canvas.app.battle.Event.ENTER_FRAME, null, this.updateHandler, this);
};
canvas.app.battle.view.WaitingPopup.prototype.updateHandler = function () {
    this.waiter.rotation += 0.17;
};
canvas.app.battle.view.WaitingPopup.prototype.removedHandler = function () {
    canvas.EventManager.removeEventListener(canvas.app.battle.Event.ENTER_FRAME, null, this.updateHandler, this);
};
canvas.app.battle.view.MessagePopup = function () {
    canvas.px.Container.call(this);
    this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_popup_bg_blank")));
    var borTop = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_popup_bor_top"));
    var borBottom = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_popup_bor_bottom"));
    var borLeft = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_popup_bor_left"));
    var borRight = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_popup_bor_right"));
    this.addChild(borTop);
    this.addChild(borBottom);
    this.addChild(borLeft);
    this.addChild(borRight);
    this.interactive = true;
    borBottom.y = 111;
    borLeft.y = 29;
    borLeft.height = 82;
    borRight.position.set(268, 29);
    borRight.height = 82;
    this.headLabel = new canvas.ui.Text(canvas.app.battle.model.isBold ? canvas.Const.FONT_TAHOMA_11_BOLD : canvas.Const.FONT_TAHOMA_11, 16769466, 104, 23, "center");
    this.headLabel.position.set(86, 3);
    this.addChild(this.headLabel);
    this.headLabel.interactive = true;
    this.middleLabel = new canvas.ui.Text(canvas.Const.FONT_ARIAL_11, 7693391, 230, 60, "center", "middle");
    this.middleLabel.position.set(23, 28);
    this.addChild(this.middleLabel);
    this.buttonAccept = new canvas.app.battle.view.elements.PopupButton(canvas.Translator.getText(9));
    this.buttonBan = new canvas.app.battle.view.elements.PopupButton(canvas.Translator.getText(10));
    this.buttonCancel = new canvas.app.battle.view.elements.PopupButton(canvas.Translator.getText(11));
    this.buttonAccept.position.set(28, 94);
    this.buttonBan.position.set(139, 94);
    this.buttonCancel.position.set(82, 94);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.buttonAccept, this.acceptHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.buttonBan, this.banHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.buttonCancel, this.cancelHandler, this);
};
canvas.app.battle.view.MessagePopup.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.battle.view.MessagePopup.prototype.acceptHandler = function () {
    if (this.yesFunc) {
        this.yesFunc.apply(null, this.yesFuncParams);
    } else {
        this.sendAnswer("1");
    }
    this.deactivate();
};
canvas.app.battle.view.MessagePopup.prototype.banHandler = function () {
    if (!this.yesFunc) {
        this.sendAnswer("0");
    }
    this.deactivate();
};
canvas.app.battle.view.MessagePopup.prototype.cancelHandler = function () {
    this.deactivate();
};
canvas.app.battle.view.MessagePopup.prototype.setAcceptLabel = function (label) {
    this.acceptButton.setLabel(label);
};
canvas.app.battle.view.MessagePopup.prototype.setBanLabel = function (label) {
    this.banButton.setLabel(label);
};
canvas.app.battle.view.MessagePopup.prototype.setCancelLabel = function (label) {
    this.cancelButton.setLabel(label);
};
canvas.app.battle.view.MessagePopup.prototype.setHeader = function (label) {
    this.headLabel.text = label ? label : "";
};
canvas.app.battle.view.MessagePopup.prototype.setBody = function (label) {
    this.middleLabel.text = label;
};
canvas.app.battle.view.MessagePopup.prototype.activate = function (mode, yesFunc, yesFuncParams) {
    this.yesFunc = yesFunc;
    this.yesFuncParams = yesFuncParams;
    switch (mode) {
        case 1:
            if (this.buttonAccept.parent != this) this.addChild(this.buttonAccept);
            if (this.buttonBan.parent != this) this.addChild(this.buttonBan);
            if (this.buttonCancel.parent == this) this.removeChild(this.buttonCancel);
            break;
        case 2:
            if (this.buttonAccept.parent == this) this.removeChild(this.buttonAccept);
            if (this.buttonBan.parent == this) this.removeChild(this.buttonBan);
            if (this.buttonCancel.parent != this) this.addChild(this.buttonCancel);
            break;
    }
};
canvas.app.battle.view.MessagePopup.prototype.sendAnswer = function (val) {
    canvas.EventManager.dispatchEvent(canvas.app.battle.Event.EVENT_MY_FUNC, null, [canvas.app.battle.Const.MY_FUNC_SEND_MESSAGE, this.targetPersId, "2()" + this.num + "()" + val]);
};
canvas.app.battle.view.MessagePopup.prototype.deactivate = function () {
    this.yesFunc = null;
    this.yesFuncParams = null;
    this.num = null;
    this.targetPersId = 0;
    this.headLabel.text = canvas.Translator.getText(0);
    this.buttonAccept.setLabel(canvas.Translator.getText(9));
    this.buttonBan.setLabel(canvas.Translator.getText(10));
    this.buttonCancel.setLabel(canvas.Translator.getText(11));
    if (this.parent) {
        this.parent.removeChild(this);
    }
};
canvas.app.battle.view.ComboView = function () {
    canvas.px.Container.call(this);
    this.padding = 5;
    this.interactive = true;
    this.buttonMode = true;
    this.click = this.clickHandler;
    this.chooseDefaultCombo();
    this.align();
    canvas.EventManager.addEventListener(canvas.app.battle.Event.ENTER_FRAME, null, this.handlerFrame, this);
};
canvas.app.battle.view.ComboView.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.battle.view.ComboView.prototype.clickHandler = function () {
    canvas.EventManager.dispatchEvent(canvas.app.battle.Event.OPEN_COMBO_LIST);
};
canvas.app.battle.view.ComboView.prototype.resetCombo = function (comboStep) {
    if (typeof comboStep == "undefined") comboStep = 0;
    if (canvas.app.battle.model.combos.length == 0) return;
    this.setStep(comboStep);
};
canvas.app.battle.view.ComboView.prototype.newHit = function (type, comboFinished) {
    if (canvas.app.battle.model.combos.length == 0) return;
    var isLastStep = this.comboStep >= this.activeCombo.size - 1;
    var index;
    if (type != this.activeCombo.seq.charAt(this.comboStep)) {
        index = this.findSubComboIndex(this.activeCombo.seq.substr(0, this.comboStep).concat(type));
        if (index > 0) {
            this.setStep(index);
        } else {
            this.resetCombo();
        }
    } else {
        if (isLastStep) {
            if (!comboFinished) {
                index = this.findSubComboIndex(this.activeCombo.seq.substr(1, this.comboStep));
                if (index > 0) {
                    this.setStep(index);
                } else {
                    this.resetCombo();
                }
            } else {
                this.resetCombo();
            }
        } else {
            this.setStep(this.comboStep + 1);
        }
    }
};
canvas.app.battle.view.ComboView.prototype.findSubComboIndex = function (seq) {
    var len = seq.length;
    for (var i = 0; i < len; i++) {
        if (this.activeCombo.seq.substr(0, len - i) == seq.substr(i, len - i)) {
            return len - i;
        }
    }
    return 0;
};
canvas.app.battle.view.ComboView.prototype.setStep = function (step) {
    this.comboStep = step;
    this.drawCombo();
    canvas.app.battle.model.localStorage.set("comboStep", parseInt(this.comboStep));
};
canvas.app.battle.view.ComboView.prototype.comboComplete = function () {
    this.resetCombo();
};
canvas.app.battle.view.ComboView.prototype.drawCombo = function () {
    if (canvas.app.battle.model.combos.length == 0) return;
    canvas.Functions.destroyChildren(this);
    this.cursorIcon = null;
    for (var i = 0; i < canvas.app.battle.model.combos.length; i++) {
        if (this.activeComboId == canvas.app.battle.model.combos[i].id) {
            this.activeCombo = canvas.app.battle.model.combos[i];
            break;
        }
    }
    var sprite;
    for (var i = 0; i < this.activeCombo.size; i++) {
        var resName = this.chooseStrike(this.activeCombo.seq.charAt(i));
        sprite = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_" + resName + (this.activeCombo.level > 15 ? "_aura" : "")));
        this.iconSide = sprite.width;
        sprite.x = (sprite.width + this.padding) * i;
        var border;
        if (i < this.comboStep) {
            border = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_combo_border_green"));
        } else {
            border = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_combo_border_yellow"));
        }
        this.addChild(sprite);
        sprite.addChild(border);
        border.position.set(-1, -1);
    }
    if (!this.cursorIcon) {
        this.cursorIcon = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_combo_cursor"));
        this.cursorIcon.interactive = false;
    }
    this.cursorIcon.y = -this.cursorIcon.height;
    this.cursorDirection = true;
    this.cursorIcon.x = Math.round((this.iconSide + this.padding) * this.comboStep - this.cursorIcon.width / 2 + this.iconSide / 2);
    this.addChild(this.cursorIcon);
    this.align();
};
canvas.app.battle.view.ComboView.prototype.handlerFrame = function () {
    if (!this.cursorIcon) return;
    if (this.cursorDirection) {
        this.cursorIcon.y -= 1;
        if (this.cursorIcon.y <= -this.cursorIcon.height - 10) {
            this.cursorDirection = !this.cursorDirection;
        }
    } else {
        this.cursorIcon.y += 1;
        if (this.cursorIcon.y >= -this.cursorIcon.height) {
            this.cursorDirection = !this.cursorDirection;
        }
    }
};
canvas.app.battle.view.ComboView.prototype.chooseStrike = function (code) {
    var resName;
    switch (code) {
        case "2":
            resName = "combo_middle";
            break;
        case "3":
            resName = "combo_down";
            break;
        case "1":
            resName = "combo_up";
            break;
        case "0":
            resName = "combo_none";
    }
    return resName;
};
canvas.app.battle.view.ComboView.prototype.align = function () {
    //this.x = Math.round((canvas.app.battle.model.width - this.width) / 2);
    this.x = Math.round((canvas.app.battle.model.width - this.width) - 30);
    //document.game.main.view.comboView.x = Math.round((canvas.app.battle.model.width - document.game.main.view.comboView.width) - 30);
};
canvas.app.battle.view.ComboView.prototype.chooseCombo = function (val, comboStep) {
    if (typeof comboStep == "undefined") comboStep = 0;
    canvas.app.battle.model.localStorage.set("activeID", val);
    canvas.app.battle.model.localStorage.set("fightId", canvas.app.battle.model.fightId);
    this.activeComboId = canvas.app.battle.model.activeComboId = val;
    this.resetCombo(comboStep);
};
canvas.app.battle.view.ComboView.prototype.chooseDefaultCombo = function () {
    var id;
    var defaultCombo = -1;
    var activeID = canvas.app.battle.model.localStorage.get("activeID");
    var fightId = canvas.app.battle.model.localStorage.get("fightId");
    var comboStep = parseInt(canvas.app.battle.model.localStorage.get("comboStep"));
    if (activeID && fightId == canvas.app.battle.model.fightId) defaultCombo = activeID;
    else defaultCombo = canvas.app.battle.model.defaultCombo;
    if (defaultCombo && defaultCombo >= 0) {
        for (var i = 0; i < canvas.app.battle.model.combos.length; i++) {
            if (canvas.app.battle.model.combos[i].id == defaultCombo) {
                id = defaultCombo;
                break;
            }
        }
        if (comboStep && fightId == canvas.app.battle.model.fightId) this.comboStep = comboStep;
        if (i == canvas.app.battle.model.combos.length) id = this.getLongestCombo();
    } else id = this.getLongestCombo();
    if (id > 0) this.chooseCombo(id, this.comboStep);
};
canvas.app.battle.view.ComboView.prototype.getLongestCombo = function () {
    var conf = canvas.app.battle.model;
    if (!conf.combos || conf.combos.length < 1) return 0;
    var longestElt = 0;
    for (var i = 1; i < conf.combos.length; i++) if (conf.combos[i].size >= conf.combos[longestElt].size) longestElt = i;
    return conf.combos[longestElt].id;
};
canvas.app.battle.view.ComboList = function () {
    canvas.px.Container.call(this);
    this.curWidth = 320;
    this.curElevation = 1;
    this.padding = 5;
    this.container = new canvas.px.Container();
    this.drawCarcase();
    this.drawAllCombos();
    this.x = Math.round((canvas.app.battle.model.width - this.width) / 2);
    this.y = 360 - this.height;
};
canvas.app.battle.view.ComboList.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.battle.view.ComboList.prototype.drawCarcase = function () {
    this.back = new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "battle_combo_list_back"), 0, 9, 0, 11);
    this.back.interactive = true;
    this.back.height = 100;
    this.back.x = -3;
    this.back.y = -10;
    this.addChild(this.back);
    this.addChild(this.container);
    this.closeButton = new canvas.app.battle.view.elements.PopupButton(canvas.Translator.getText(32));
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.closeButton, this.handlerClose, this);
    this.closeButton.x = Math.round((this.curWidth - this.closeButton.width) / 2);
    this.closeButton.alpha = 0;
    this.addChild(this.closeButton);
    this.selectCursor = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_combo_select_cursor"));
    this.selectCursor.x = 2;
};
canvas.app.battle.view.ComboList.prototype.drawAllCombos = function () {
    for (var i = 0; i < canvas.app.battle.model.combos.length; i++) {
        this.drawCombo(canvas.app.battle.model.combos[i]);
    }
    if (this.curElevation + 20 > 280) {
        this.back.height = 280;
        var back = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_scroll_back"));
        var minus = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "battle_scroll_arrow"));
        var button = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "battle_scroll_arrow"));
        button.scale.y = -1;
        button.y = -button.height;
        var plus = new canvas.px.Container();
        plus.addChild(button);
        var drag = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "battle_scroll_drag"));
        this.scroll = new canvas.ui.Scroll(canvas.ui.ScrollType.VERTICAL, minus, plus, back, drag, this);
        this.addChild(this.scroll);
        this.scroll.padding = 10;
        this.scroll.setSize(17, 248);
        this.scroll.x = this.back.width - this.scroll.width - 8;
        this.scroll.step = 10;
        this.scrollMask = new canvas.px.Mask(320, 250);
        this.addChild(this.scrollMask);
        this.container.mask = this.scrollMask;
        this.scroll.max = this.container.height - this.scrollMask.height;
        canvas.EventManager.addEventListener(canvas.ui.ScrollEvent.EVENT_SCROLL, this.scroll, this.scrollHandler, this);
    } else {
        this.back.height = this.curElevation + 20;
    }
    this.closeButton.y = this.back.height - 20;
};
canvas.app.battle.view.ComboList.prototype.scrollHandler = function () {
    this.container.y = -this.scroll.current;
};
canvas.app.battle.view.ComboList.prototype.drawCombo = function (comboData) {
    var comboView = new canvas.px.Container();
    comboView.combo = comboData;
    comboView.buttonMode = true;
    comboView.interactive = true;
    canvas.EventManager.dispatchEvent(canvas.app.battle.Event.HINT_ADD, null, { target: comboView, params: new canvas.utils.HintParams(new canvas.app.view.PxHint(comboData.description)) });
    if (comboData.seq.charAt(0) != "0") {
        comboView.click = this.handlerClick.bind(this);
    }
    var resName;
    var bitmap;
    var label = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD, 3355443, 300, 20);
    label.text = comboData.title;
    label.x = 20;
    label.y = 2;
    comboView.addChild(label);
    var xPadd = this.curWidth - comboData.size * (16 + this.padding);
    for (var i = 0; i < comboData.size; i++) {
        resName = canvas.app.battle.view.ComboView.prototype.chooseStrike(comboData.seq.charAt(i));
        bitmap = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_" + resName + (comboData.level > 15 ? "_aura" : "")));
        bitmap.x = (bitmap.width + this.padding) * i + xPadd;
        comboView.addChild(bitmap);
    }
    comboView.y = this.curElevation;
    this.container.addChild(comboView);
    if (canvas.app.battle.model.activeComboId == comboData.id) this.placeSelectCursor(comboView);
    this.curElevation += comboView.height + this.padding;
};
canvas.app.battle.view.ComboList.prototype.placeSelectCursor = function (activeComboView) {
    if (this.selectCursor.parent != this.container) this.container.addChild(this.selectCursor);
    this.selectCursor.y = activeComboView.y + 3;
};
canvas.app.battle.view.ComboList.prototype.handlerClick = function (e) {
    canvas.EventManager.dispatchEvent(canvas.app.battle.Event.CHOOSE_COMBO, null, e.currentTarget.combo.id);
    this.placeSelectCursor(e.currentTarget);
    if (this.parent) {
        this.parent.removeChild(this);
    }
};
canvas.app.battle.view.ComboList.prototype.handlerClose = function () {
    if (this.parent) {
        this.parent.removeChild(this);
    }
};
canvas.app.battle.view.BowPanel = function () {
    this._locked = false;
    Object.defineProperty(this, "locked", {
        get: function () {
            return this._locked;
        },
        set: function (value) {
            this._locked = this.numSpells > 0 ? value : true;
            this.container.alpha = this._locked ? 0.5 : 1;
        },
    });
    canvas.px.Container.call(this);
    this.items = new Array();
    this.container = new canvas.px.Container();
    this.container.position.set(10, 2);
    this.addChild(this.container);
    this.container.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_bow_panel")));
    this.leftArrow = new canvas.ui.Button(canvas.ResourceLoader.getImage("ui", "battle_button_arrow"), canvas.ResourceLoader.getImage("ui", "battle_button_arrow_over"), canvas.ResourceLoader.getImage("ui", "battle_button_arrow_press"));
    this.rightArrow = new canvas.ui.Button(canvas.ResourceLoader.getImage("ui", "battle_button_arrow"), canvas.ResourceLoader.getImage("ui", "battle_button_arrow_over"), canvas.ResourceLoader.getImage("ui", "battle_button_arrow_press"));
    this.rightArrow.scale.x = -1;
    this.scroll = new canvas.ui.Scroll(canvas.ui.ScrollType.HORIZONTAL, this.leftArrow, this.rightArrow);
    this.scroll.setSize(400, 42);
    this.scroll.position.set(-16, 24);
    this.container.addChild(this.scroll);
    this.leftArrow.visible = false;
    this.rightArrow.visible = false;
    this.progress = new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "battle_bow_progress"), 18, 0, 18, 0);
    this.container.addChild(this.progress);
    this.progress.width = 157;
    this.progress.position.set(200, 74);
    this.progressMask = new canvas.px.Mask(154, 11);
    this.container.addChild(this.progressMask);
    this.progressMask.position.set(202, 75);
    this.progress.mask = this.progressMask;
    this.progressMask.scale.x = 0;
    this.progressField = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_10, 16770533, 154, 16, "center");
    this.container.addChild(this.progressField);
    this.progressField.position.set(201, 75);
    this.arrowsField = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_10, 16770533, 30, 16, "center");
    this.container.addChild(this.arrowsField);
    this.arrowsField.position.set(42, 75);
    this.itemsContainer = new canvas.px.Container();
    this.container.addChild(this.itemsContainer);
    this.itemsContainer.position.set(22, -1);
    this.itemsMask = new canvas.px.Mask(365, 100);
    this.itemsMask.position.set(32, -1);
    this.addChild(this.itemsMask);
    this.itemsContainer.mask = this.itemsMask;
    this.hideButton = new canvas.ui.Button(canvas.ResourceLoader.getImage("ui", "battle_button_arrow"), canvas.ResourceLoader.getImage("ui", "battle_button_arrow_over"), canvas.ResourceLoader.getImage("ui", "battle_button_arrow_press"));
    this.hide();
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.hideButton, this.handlerHideClick, this);
    canvas.EventManager.addEventListener(canvas.ui.ScrollEvent.EVENT_SCROLL, this.scroll, this.handlerScroll, this);
};
canvas.app.battle.view.BowPanel.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.battle.view.BowPanel.prototype.handlerHideClick = function () {
    canvas.EventManager.dispatchEvent(canvas.app.battle.Event.SHOW_BOW_PANEL, null, !this.container.parent);
};
canvas.app.battle.view.BowPanel.prototype.handlerScroll = function () {
    this.itemsContainer.x = 22 - 75 * this.scroll.current;
    this.leftArrow.visible = true;
    this.rightArrow.visible = true;
    if (this.scroll.current == 0) {
        this.leftArrow.visible = false;
    } else if (this.scroll.current == this.scroll.max) {
        this.rightArrow.visible = false;
    }
};
canvas.app.battle.view.BowPanel.prototype.setProgress = function (value, total) {
    if (total == 0) {
        this.progressMask.scale.x = 0;
        this.progressField.text = "";
    } else {
        this.progressField.text = value.toString() + "/" + total.toString();
        this.progressMask.scale.x = value / total;
    }
    this.arrowsField.text = canvas.app.battle.model.arrowsCount.toString();
};
canvas.app.battle.view.BowPanel.prototype.buildSpells = function () {
    var obj;
    var bowItem;
    var tmpX = 0;
    var a = new Array();
    for (var str in canvas.app.battle.model.spellsBow) a.push(canvas.app.battle.model.spellsBow[str]);
    a.sort(function (a, b) {
        return a.index - b.index;
    });
    for (var i = 0; i < a.length; i++) {
        obj = a[i];
        bowItem = new canvas.app.battle.view.elements.BowItem();
        this.itemsContainer.addChild(bowItem);
        bowItem.x = tmpX;
        bowItem.y = 10;
        tmpX += 75;
        this.items.push(bowItem);
        bowItem.effectID = parseInt(obj.effId);
        bowItem.image = canvas.Config.artifactsPath + obj.picture;
        bowItem.count = obj.energy;
        bowItem.coolDown = obj.cdTime;
        bowItem.coolDownLeft = obj.cdLeft;
        bowItem.title = obj.title;
    }
    this.numSpells = a.length;
    if (this.numSpells > canvas.app.battle.Const.BOW_SLOTS_COUNT) {
        this.scroll.max = this.numSpells - canvas.app.battle.Const.BOW_SLOTS_COUNT;
        this.handlerScroll();
    }
    if (this.numSpells > 0) {
        this.addChild(this.hideButton);
        canvas.EventManager.dispatchEvent(canvas.app.battle.Event.SHOW_BOW_PANEL, null, true);
    }
};
canvas.app.battle.view.BowPanel.prototype.confirmUseEffect = function (effectID) {
    for (var i = 0; i < this.items.length; i++) {
        var bowItem = this.items[i];
        if (bowItem.effectID == effectID) {
            bowItem.coolDownLeft = bowItem.coolDown;
            break;
        }
    }
};
canvas.app.battle.view.BowPanel.prototype.show = function () {
    this.hideButton.x = 191;
    this.hideButton.y = 38;
    this.hideButton.rotation = -canvas.Functions.degToRad(90);
    if (this.container.parent == this) this.removeChild(this.container);
};
canvas.app.battle.view.BowPanel.prototype.hide = function () {
    this.hideButton.y = 92;
    this.hideButton.rotation = canvas.Functions.degToRad(90);
    this.hideButton.x = 232;
    if (this.container.parent != this) this.addChild(this.container);
};
canvas.app.battle.view.ShadowIcon = function () {
    canvas.px.Container.call(this);
    this.shadowButton = new canvas.ui.Button(
        canvas.ResourceLoader.getImage("ui", "battle_button_shadow_nrm"),
        canvas.ResourceLoader.getImage("ui", "battle_button_shadow_over"),
        canvas.ResourceLoader.getImage("ui", "battle_button_shadow_down"),
        canvas.ResourceLoader.getImage("ui", "battle_button_shadow_disbld")
    );
    this.addChild(this.shadowButton);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.shadowButton, this.clickHandler, this);
    this.loader = new canvas.utils.URLRequest(canvas.app.battle.model.shadowSummonUrl + "&json_mode_on=1");
    canvas.EventManager.addEventListener(canvas.utils.URLRequestEvent.EVENT_COMPLETE, this.loader, this.completeHandler, this);
    this.update();
};
canvas.app.battle.view.ShadowIcon.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.battle.view.ShadowIcon.prototype.clickHandler = function () {
    canvas.EventManager.dispatchEvent(canvas.app.battle.Event.SHOW_MESSAGE, null, {
        mode: 1,
        headerLabel: canvas.Translator.getText(67),
        bodyLabel: canvas.Translator.getText(66),
        yesFunc: this.loadShadow.bind(this),
        acceptLabel: canvas.Translator.getText(68),
        banLabel: canvas.Translator.getText(69),
    });
};
canvas.app.battle.view.ShadowIcon.prototype.loadShadow = function () {
    this.loader.load();
};
canvas.app.battle.view.ShadowIcon.prototype.completeHandler = function () {
    canvas.EventManager.removeEventListener(canvas.utils.URLRequestEvent.EVENT_COMPLETE, this.loader, this.completeHandler, this);
    var obj = JSON.parse(this.loader.request.responseText);
    if (obj["common|action"].redirect_error) {
        canvas.EventManager.dispatchEvent(canvas.app.battle.Event.SHOW_ERROR, null, obj["common|action"].redirect_error);
    } else {
        canvas.app.battle.model.shadowSummonable = false;
        this.update();
    }
};
canvas.app.battle.view.ShadowIcon.prototype.update = function () {
    this.shadowButton.enabled = canvas.app.battle.model.shadowSummonable;
};
canvas.app.battle.view.Pers = function (base_lnk) {
    this._addFuncTurn = null;
    Object.defineProperty(this, "addFuncTurn", {
        get: function () {
            return this._addFuncTurn;
        },
        set: function (value) {
            this.isFuncTurn = value != null;
            this._addFuncTurn = value;
        },
    });
    canvas.px.Container.call(this);
    this.baseLnk = base_lnk;
    this.isFuncTurn = false;
    this.addFuncShow = null;
    this.addFuncDie = null;
    this.mFlagId = 0;
    this.magicStandBase = new canvas.px.Container();
    this.magicStandBaseAura = new canvas.px.Container();
    this.dmgConf = null;
    this.sndConf = null;
    this.pet = null;
    this.inMotion = false;
    this.baseHeight = 0;
    this.allLabels = {};
    this.deadFrame = 0;
    this.mvIndexShow = 0;
    this.deadFlag = false;
    this.inMV = false;
    this.additionalEffects = {};
    this.skContainer = new canvas.px.Container();
    this.petContainer = new canvas.px.Container();
    this.addEffCont = new canvas.px.Container();
    this.skContainer.y = -10;
    this.petContainer.y = 20;
    this.magicStandBase.scale.set(0.75, 0.75);
    this.magicStandBaseAura.scale.set(0.75, 0.75);
    this.visible = false;
    this.addChild(this.magicStandBase);
    this.addChild(this.magicStandBaseAura);
    this.addChild(this.skContainer);
    this.addChild(this.petContainer);
    this.addChild(this.addEffCont);
};
canvas.app.battle.view.Pers.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.battle.view.Pers.prototype.config = function (info) {
    var conf = canvas.app.battle.model;
    this.persId = info.pers_id;
    this.persSk = info.pers_sk;
    this.persSkLink = info.pers_sk_link;
    this.persGender = info.pers_gender;
    this.persKind = conf.memDat[this.persId].kind;
    if (this.persKind != 2) {
        this.dieColors = canvas.Const.SK_DIE_COLORS_HUMAN;
    } else {
        this.dieColors = canvas.Const.SK_DIE_COLORS_MAGMAR;
    }
    this.hePos = canvas.app.battle.Const.HAND_EFFECT_POSITION[this.persGender];
    if (!this.hePos) {
        this.hePos = conf.HAND_EFFECT_POSITION.M;
    }
};
canvas.app.battle.view.Pers.prototype.loadBegin = function () {
    if (this.persSk < canvas.app.battle.Const.BOTID1) {
        this.sk = new canvas.animation.Skeleton(this.persSkLink, new canvas.px.Point(70, 180), this.parent);
        this.sk.frameEvent = canvas.app.battle.Event.ENTER_FRAME;
        this.sk.skeletonData = new canvas.data.battle.SkeletonData(canvas.app.battle.model.myAllDataArray[this.persId], this.persGender);
    } else {
        this.sk = new canvas.animation.Bot(this.persSkLink, new canvas.px.Point(70, 180), this.parent);
        this.sk.frameEvent = canvas.app.battle.Event.ENTER_FRAME;
    }
    var flg = canvas.app.battle.model.memDat[this.persId].persFlags;
    if (canvas.app.battle.model.testFlag(flg, canvas.app.battle.Const.FS_PF_SKGHOST)) {
        this.sk.filters = [canvas.Functions.getGlow(10, 3, 0, 16777215, 0.1), canvas.Functions.getAlpha(0.4)];
    } else if (canvas.app.battle.model.testFlag(flg, canvas.app.battle.Const.FS_PF_MOROC_LIGHT)) {
        this.sk.filters = [canvas.Functions.getGlow(10, 1.54, 1.81, 6737100, 0.1)];
    } else if (canvas.app.battle.model.testFlag(flg, canvas.app.battle.Const.FS_PF_MOROC_DARK)) {
        this.sk.filters = [canvas.Functions.getGlow(10, 1.54, 1.81, 10066176, 0.1)];
    }
    this.skContainer.addChild(this.sk);
    this.sk.stop();
    if (this.sk.ready) {
        this.skReady();
    } else {
        canvas.EventManager.addEventListener(canvas.px.MovieClipEvent.EVENT_READY, this.sk, this.skReady, this);
    }
};
canvas.app.battle.view.Pers.prototype.skReady = function () {
    canvas.EventManager.removeEventListener(canvas.px.MovieClipEvent.EVENT_READY, this.sk, this.skReady, this);
    for (var key in this.sk.labels) {
        this.allLabels[key] = true;
    }
    this.sk.DMG = this.DMG.bind(this);
    this.sk.MV = this.MV.bind(this);
    this.sk.AFX = this.AFX.bind(this);
    this.sk.TURN = this.TURN.bind(this);
    this.sk.POST = this.POST.bind(this);
    this.sk.SND = this.SND.bind(this);
    this.updateSkelPost();
    this.showBody();
};
canvas.app.battle.view.Pers.prototype.showBody = function () {
    this.baseLnk.mFunc.effectList(this.persId);
    this.setChildIndex(this.addEffCont, this.children.length - 1);
    this.visible = true;
    this.sk.visible = true;
    this.baseHeight = this.height;
    this.mvIndexShow = 0;
    this.gotoAndPlay(this.baseLnk.getPostLabel(this.persId));
    canvas.EventManager.addEventListener(canvas.app.battle.Event.ENTER_FRAME, null, this.showBodyHandler, this);
    this.showBodyHandler();
    if (!this.sk.parent) this.skContainer.addChild(this.sk);
};
canvas.app.battle.view.Pers.prototype.updateSkelPost = function () {
    if (this.persId == canvas.app.battle.model.persId && canvas.app.battle.model.persStatus == canvas.app.battle.Const.STATUS_DEAD) {
        if (this.allLabels["dead"]) {
            this.sk.gotoAndStop("dead");
        } else if (this.deadFrame) {
            this.sk.gotoAndStop(this.deadFrame);
        } else {
            this._addFuncTurn = this.emptyFunction;
            this.sk.gotoAndPlay("die");
        }
    } else {
        this.gotoAndPlay(this.baseLnk.getPostLabel(this.persId));
    }
};
canvas.app.battle.view.Pers.prototype.gotoAndPlay = function (label) {
    this.sk.gotoAndPlay(label);
    if (label.indexOf("die") != -1) {
        if (this.pet) this.pet.die();
    }
    if (label.indexOf("idle") != -1) {
        if (this.pet) this.pet.idle();
    }
};
canvas.app.battle.view.Pers.prototype.emptyFunction = function () {};
canvas.app.battle.view.Pers.prototype.showBodyHandler = function () {
    this.mvIndexShow++;
    if (this.mvIndexShow < canvas.app.battle.Const.MV_PERS_SHOW.length) {
        this.sk.x = canvas.app.battle.Const.MV_PERS_SHOW[this.mvIndexShow];
    } else {
        canvas.EventManager.removeEventListener(canvas.app.battle.Event.ENTER_FRAME, null, this.showBodyHandler, this);
        if (this.addFuncShow) {
            this.addFuncShow({ pers_id: this.persId });
        }
    }
};
canvas.app.battle.view.Pers.prototype.clearAdditionalEffects = function () {
    for (var g in this.additionalEffects) {
        this.removeAdditionalEffect(this.additionalEffects[g]);
    }
};
canvas.app.battle.view.Pers.prototype.showAdditionalEffects = function (eff_arr) {
    for (var i = 0; i < eff_arr.length; i++) {
        this.showAdditionalEffect(eff_arr[i]);
    }
    if (canvas.app.battle.model.dmgEve.length > 0) {
        setTimeout(this.showDmgEve.bind(this), 1100);
    }
};
canvas.app.battle.view.Pers.prototype.showDmgEve = function () {
    this.baseLnk.view.showDmg(canvas.app.battle.model.dmgEve);
    canvas.app.battle.model.dmgEve = [];
};
canvas.app.battle.view.Pers.prototype.showAdditionalEffect = function (eff_name) {
    var eff_mc = this.additionalEffects[eff_name];
    if (!eff_mc) {
        eff_mc = new canvas.px.MovieClip(canvas.Config.spellsPath + eff_name);
        eff_mc.frameEvent = canvas.app.battle.Event.ENTER_FRAME;
        this.additionalEffects[eff_name] = eff_mc;
        eff_mc.position.set(120, 210);
        this.addEffCont.addChild(eff_mc);
    }
};
canvas.app.battle.view.Pers.prototype.removeAdditionalEffect = function (eff_name) {
    var cur_eff = this.additionalEffects[eff_name];
    if (cur_eff) {
        if (cur_eff.parent == this.addEffCont) {
            this.addEffCont.removeChild(cur_eff);
        }
        cur_eff.destroy({ children: true });
        delete this.additionalEffects[eff_name];
    }
};
canvas.app.battle.view.Pers.prototype.hideBody = function () {
    if (!this.deadFlag) {
        this.mvIndexHide = 0;
        canvas.EventManager.addEventListener(canvas.app.battle.Event.ENTER_FRAME, null, this.hideBodyHandler, this);
        this.hideBodyHandler();
    } else {
        this.comleteHiding();
    }
};
canvas.app.battle.view.Pers.prototype.hideBodyHandler = function () {
    this.mvIndexHide++;
    if (this.mvIndexHide < canvas.app.battle.Const.MV_PERS_HIDE.length) {
        if (this.sk) this.sk.x = canvas.app.battle.Const.MV_PERS_HIDE[this.mvIndexHide];
    } else {
        canvas.EventManager.removeEventListener(canvas.app.battle.Event.ENTER_FRAME, null, this.hideBodyHandler, this);
        this.comleteHiding();
    }
};
canvas.app.battle.view.Pers.prototype.comleteHiding = function () {
    this.visible = false;
    if (this.addFuncHide) {
        if (this.sk) {
            if (this.sk.parent == this.skContainer) {
                this.skContainer.removeChild(this.sk);
            }
            this.sk.gotoAndStop(1);
        }
        this.clearAdditionalEffects();
        this.addFuncHide({ pers_id: this.persId });
        this.addFuncHide = null;
    }
};
canvas.app.battle.view.Pers.prototype.dieBody = function () {
    this.deadFlag = true;
    if (this.persSk < canvas.app.battle.Const.BOTID1) {
        this.ctIndexDie = 0;
        canvas.EventManager.addEventListener(canvas.app.battle.Event.ENTER_FRAME, null, this.dieBodyHandler, this);
        this.dieBodyHandler();
    } else {
        if (this.sk["flags"]) {
            if (canvas.app.battle.model.testFlag(this.sk["flags"], 1)) {
                if (this.addFuncDie) {
                    this.addFuncDie({ pers_id: this.persId });
                    this.addFuncDie = null;
                }
                return;
            }
        }
        canvas.EventManager.addEventListener(canvas.app.battle.Event.ENTER_FRAME, null, this.dieAlphaBodyHandler, this);
        this.dieAlphaBodyHandler();
    }
};
canvas.app.battle.view.Pers.prototype.dieBodyHandler = function () {
    if (this.ctIndexDie < this.dieColors.length) {
        var cCTa = this.dieColors[this.ctIndexDie];
        this.sk.filters = [canvas.Functions.getColorMatrixFilter(cCTa[0], cCTa[1], cCTa[2], 1, cCTa[3], cCTa[4], cCTa[5], 0)];
    } else {
        canvas.EventManager.removeEventListener(canvas.app.battle.Event.ENTER_FRAME, null, this.dieBodyHandler, this);
        this.sk.filters = [];
        this.sk.visible = false;
        this.dieSoul();
    }
    this.ctIndexDie++;
};
canvas.app.battle.view.Pers.prototype.dieSoul = function () {
    if (this.persKind != 2) {
        this.dieAnim = new canvas.px.MovieClip(canvas.Config.spellsPath + "spirit_hum");
    } else {
        this.dieAnim = new canvas.px.MovieClip(canvas.Config.spellsPath + "spirit_mag");
    }
    this.dieAnim.frameEvent = canvas.app.battle.Event.ENTER_FRAME;
    this.dieAnim.autoDestroy = true;
    this.dieAnim.position.set(100, 280);
    this.addChild(this.dieAnim);
    canvas.EventManager.addEventListener(canvas.px.MovieClipEvent.EVENT_COMPLETE, this.dieAnim, this.dieAnimCheckHandler, this);
};
canvas.app.battle.view.Pers.prototype.dieAnimCheckHandler = function () {
    canvas.EventManager.removeEventListener(canvas.px.MovieClipEvent.EVENT_COMPLETE, this.dieAnim, this.dieAnimCheckHandler, this);
    if (this.addFuncDie) {
        this.addFuncDie({ pers_id: this.persId });
        this.addFuncDie = null;
    }
};
canvas.app.battle.view.Pers.prototype.dieAlphaBodyHandler = function () {
    this.sk.alpha -= 0.1;
    if (this.sk.alpha <= 0) {
        this.sk.visible = false;
        this.sk.alpha = 1;
        canvas.EventManager.removeEventListener(canvas.app.battle.Event.ENTER_FRAME, null, this.dieAlphaBodyHandler, this);
        if (this.addFuncDie != null) {
            this.addFuncDie({ pers_id: this.persId });
            this.addFuncDie = null;
        }
    }
};
canvas.app.battle.view.Pers.prototype.setReaction = function (par) {
    this.reactionLabel = par.r_label;
    this.reactionDelay = par.r_delay;
    canvas.EventManager.addEventListener(canvas.app.battle.Event.ENTER_FRAME, null, this.delayedReactionHandler, this);
};
canvas.app.battle.view.Pers.prototype.delayedReactionHandler = function () {
    this.reactionDelay--;
    if (this.reactionDelay <= 0) {
        this.gotoAndPlay(this.reactionLabel);
        canvas.EventManager.removeEventListener(canvas.app.battle.Event.ENTER_FRAME, null, this.delayedReactionHandler, this);
    }
};
canvas.app.battle.view.Pers.prototype.addWoundEffect = function (par) {
    this.woundFrameRest = par.delay;
    canvas.EventManager.addEventListener(canvas.app.battle.Event.ENTER_FRAME, null, this.woundFrameHandler, this);
};
canvas.app.battle.view.Pers.prototype.woundFrameHandler = function () {
    if (this.woundFrameRest > 0) {
        this.woundFrameRest--;
    } else {
        canvas.EventManager.removeEventListener(canvas.app.battle.Event.ENTER_FRAME, null, this.woundFrameHandler, this);
        this.woundBegin();
    }
};
canvas.app.battle.view.Pers.prototype.woundBegin = function () {
    var wound_reactions = this.sk.kick_array_all.kick_mid.a_mid_1.wound;
    var rnd_reaction = wound_reactions[Math.floor(wound_reactions.length * Math.random())];
    this.addFuncTurn = this.baseLnk.afterWound.bind(this.baseLnk);
    this.gotoAndPlay(rnd_reaction);
};
canvas.app.battle.view.Pers.prototype.addBgEffect = function (par) {
    this.bgEffect = true;
    this.addEffect(par);
};
canvas.app.battle.view.Pers.prototype.addEffect = function (par) {
    this.bgEffect = false;
    this.effectFrameRest = par.delay;
    this.effectType = par.type;
    canvas.EventManager.addEventListener(canvas.app.battle.Event.ENTER_FRAME, null, this.effectFramehandler, this);
};
canvas.app.battle.view.Pers.prototype.effectFramehandler = function () {
    if (this.effectFrameRest > 0) {
        this.effectFrameRest--;
    } else {
        canvas.EventManager.removeEventListener(canvas.app.battle.Event.ENTER_FRAME, null, this.effectFramehandler, this);
        var pt = new canvas.px.Point(this.hePos[0], this.hePos[1]);
        pt = this.sk.getChildByName("HAND13").toGlobal(pt);
        this.baseLnk.view.addEffect(this.effectType, pt.x, pt.y, this.parent.scale.x, this.bgEffect);
    }
};
canvas.app.battle.view.Pers.prototype.addHandEffect = function (anim_lnk) {
    this.handAnim = new canvas.px.MovieClip(canvas.Config.spellsPath + anim_lnk);
    this.handAnim.frameEvent = canvas.app.battle.Event.ENTER_FRAME;
    canvas.EventManager.addEventListener(canvas.app.battle.Event.ENTER_FRAME, null, this.handFrameHandler, this);
    canvas.EventManager.addEventListener(canvas.px.MovieClipEvent.EVENT_COMPLETE, this.handAnim, this.handCompleteHandler, this);
    this.addChild(this.handAnim);
    this.handAnim.autoDestroy = true;
};
canvas.app.battle.view.Pers.prototype.handFrameHandler = function () {
    var pt = new canvas.px.Point(this.hePos[0], this.hePos[1]);
    var child = this.sk.getChildByName("HAND13");
    if (child && this.handAnim) {
        pt = child.toGlobal(pt);
        pt = this.toLocal(pt);
        this.handAnim.position.set(pt.x, pt.y);
    }
};
canvas.app.battle.view.Pers.prototype.handCompleteHandler = function () {
    canvas.EventManager.removeEventListener(canvas.app.battle.Event.ENTER_FRAME, null, this.handFrameHandler, this);
    canvas.EventManager.removeEventListener(canvas.px.MovieClipEvent.EVENT_COMPLETE, this.handAnim, this.handCompleteHandler, this);
    this.handAnim = null;
};
canvas.app.battle.view.Pers.prototype.showPet = function (flag, petSrc) {
    if (!this.pet) this.pet = new canvas.app.battle.view.Pet();
    if (this.scale.x == 1) {
        this.pet.scale.x = this.pet.scale.y = 0.8;
    }
    if (petSrc) flag = true;
    if (!flag && this.pet.parent == this.petContainer) {
        this.petContainer.removeChild(this.pet);
    }
    if (flag) {
        this.petContainer.addChild(this.pet);
        this.pet.load(petSrc);
    }
};
canvas.app.battle.view.Pers.prototype.DMG = function () {
    if (this.dmgConf) {
        this.baseLnk.view.showDmg(this.dmgConf);
        this.dmgConf = null;
    }
};
canvas.app.battle.view.Pers.prototype.MV = function (iLen, iStep) {
    this.mvCurIter = iLen;
    this.mvCurDelta = iStep;
    if (this.inMV) {
        this.skMoveClear();
    }
    this.inMV = true;
    canvas.EventManager.addEventListener(canvas.app.battle.Event.ENTER_FRAME, null, this.skMoveHandler, this);
};
canvas.app.battle.view.Pers.prototype.skMoveHandler = function () {
    this.mvCurIter--;
    if (this.mvCurIter > 0) {
        this.sk.x += this.mvCurDelta;
    } else {
        this.skMoveClear();
    }
};
canvas.app.battle.view.Pers.prototype.skMoveClear = function () {
    this.inMV = false;
    canvas.EventManager.removeEventListener(canvas.app.battle.Event.ENTER_FRAME, null, this.skMoveHandler, this);
};
canvas.app.battle.view.Pers.prototype.AFX = function () {};
canvas.app.battle.view.Pers.prototype.TURN = function () {
    var conf = canvas.app.battle.model;
    if (this.sk.currentLabel == "die") {
        this.deadFrame = this.sk.currentFrame - 1;
    }
    if (!this.isFuncTurn) {
        this.baseLnk.persMotionDone(this.persId);
    } else {
        this.isFuncTurn = false;
        this._addFuncTurn({ pers_id: this.persId });
    }
    if (this.baseLnk.players[conf.persId]) {
        this.baseLnk.players[conf.persId].magicStandBase.visible = this.baseLnk.players[conf.persId].magicStandBaseAura.visible = true;
    }
    if (this.baseLnk.players[conf.oppId]) {
        this.baseLnk.players[conf.oppId].magicStandBase.visible = this.baseLnk.players[conf.oppId].magicStandBaseAura.visible = true;
    }
};
canvas.app.battle.view.Pers.prototype.POST = function () {
    this.sk.x = 0;
    this.gotoAndPlay(this.baseLnk.getPostLabel(this.persId));
};
canvas.app.battle.view.Pers.prototype.SND = function (normal, soundID, transparentInternal) {
    if (typeof normal == "undefined") normal = true;
    if (typeof soundID == "undefined") soundID = "";
    if (typeof transparentInternal == "undefined") transparentInternal = false;
    if (canvas.app.battle.model.islp3) return;
    if (arguments.length == 0) {
        var obj = this.sk.data.properties.ActionSound[this.sk.currentLabel];
        if (obj && !obj.std) {
            soundID = obj.self;
            this.baseLnk.sndPlayInternal(soundID, this.persSk);
            return;
        }
    }
    try {
        if (normal) {
            if (!this.sndConf) {
                return;
            }
            if (this.sndConf.std) {
                this.baseLnk.sndPlay(this.sndConf.snd_name);
            } else {
                this.baseLnk.sndPlayInternal(this.sndConf.snd_name, this.persSk);
            }
        } else {
            if (transparentInternal) {
                this.baseLnk.sndPlayInternal(soundID, this.persSk);
            } else {
                this.baseLnk.sndPlay(soundID);
            }
        }
    } catch (error) {
        canvas.app.battle.log("Pers.SND ERROR: " + error + "; url=" + this.persSkLink + ", soundID=" + soundID + ", normal=" + normal + ", internal=" + transparentInternal);
    }
};
canvas.app.battle.view.Pers.prototype.destroy = function () {
    this.sk.destroy({ children: true });
    this.clearAdditionalEffects();
    canvas.px.Container.prototype.destroy.apply(this, [{ children: true }]);
};
canvas.app.battle.view.AddArrow = function (fromPoint, toPoint, delay, scale, rotation) {
    canvas.px.Container.call(this);
    if (typeof delay == "undefined") delay = 0;
    if (typeof scale == "undefined") scale = 1;
    if (typeof rotation == "undefined") rotation = 0;
    this.fromPoint = fromPoint;
    this.toPoint = toPoint;
    this.speedX = Math.abs(fromPoint.x - toPoint.x) / 10;
    this.speedY = Math.abs(fromPoint.y - toPoint.y) / 10;
    this.arrow = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_arrow"));
    this.arrow.anchor.set(0.5, 0.5);
    this.arrow.scale.set(scale * 1.6, scale * 1.6);
    this.arrow.rotation = canvas.Functions.degToRad(rotation);
    if (delay > 0) {
        setTimeout(this.timerHandler.bind(this), delay * 1e3);
    } else {
        this.timerHandler();
    }
};
canvas.app.battle.view.AddArrow.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.battle.view.AddArrow.prototype.timerHandler = function () {
    this.arrow.position.set(this.fromPoint.x, this.fromPoint.y);
    this.addChild(this.arrow);
    canvas.EventManager.addEventListener(canvas.app.battle.Event.ENTER_FRAME, null, this.frameHandler, this);
};
canvas.app.battle.view.AddArrow.prototype.frameHandler = function () {
    if (this.arrow.x < this.toPoint.x) {
        this.arrow.x += this.speedX;
        if (this.arrow.x > this.toPoint.x) this.arrow.x = this.toPoint.x;
    } else if (this.arrow.x > this.toPoint.x) {
        this.arrow.x -= this.speedX;
        if (this.arrow.x < this.toPoint.x) this.arrow.x = this.toPoint.x;
    }
    if (this.arrow.y < this.toPoint.y) {
        this.arrow.y += this.speedY;
        if (this.arrow.y > this.toPoint.y) this.arrow.y = this.toPoint.y;
    } else if (this.arrow.y > this.toPoint.y) {
        this.arrow.y -= this.speedY;
        if (this.arrow.y < this.toPoint.y) this.arrow.y = this.toPoint.y;
    }
    if (this.arrow.x == this.toPoint.x && this.arrow.y == this.toPoint.y) {
        this.destroy();
    }
};
canvas.app.battle.view.AddArrow.prototype.destroy = function () {
    canvas.EventManager.removeEventListener(canvas.app.battle.Event.ENTER_FRAME, null, this.frameHandler, this);
    if (this.parent) this.parent.removeChild(this);
    canvas.px.Container.prototype.destroy.apply(this, [{ children: true }]);
};
canvas.app.battle.view.AddSpell = function (base_lnk, xx, yy, my_action_fl, _spl_mc, for_magic_stand, whose_anim_fl, spl_nm, center_hide) {
    canvas.px.Container.call(this);
    if (typeof for_magic_stand == "undefined") for_magic_stand = false;
    if (typeof whose_anim_fl == "undefined") whose_anim_fl = "";
    if (typeof spl_nm == "undefined") spl_nm = "";
    if (typeof center_hide == "undefined") center_hide = false;
    this.baseLnk = base_lnk;
    this.centerHide = this.baseLnk.view.centerView.visible ? center_hide : false;
    this.whoseAnimFlag = whose_anim_fl;
    this.position.set(xx, yy);
    if (!my_action_fl) {
        if (spl_nm == "31" || spl_nm == "32" || spl_nm == "33" || spl_nm == "34" || spl_nm == "35" || spl_nm == "36") {
        } else {
            this.scale.x = -1;
        }
    }
    this.splMc = _spl_mc;
    if (!for_magic_stand) {
        canvas.EventManager.addEventListener(canvas.px.MovieClipEvent.EVENT_COMPLETE, this.splMc, this.destroy, this);
    }
    if (this.centerHide) this.baseLnk.centerVisible(false);
    this.addChild(this.splMc);
};
canvas.app.battle.view.AddSpell.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.battle.view.AddSpell.prototype.destroy = function () {
    canvas.EventManager.removeEventListener(canvas.px.MovieClipEvent.EVENT_COMPLETE, this.splMc, this.destroy, this);
    if (this.parent) this.parent.removeChild(this);
    this.splMc.stop();
    this.removeChild(this.splMc);
    this.splMc = null;
    if (this.parent != this.baseLnk.view.bgSpells) {
        if (this.whoseAnimFlag == "pers") {
            canvas.app.battle.model.persAnimFlag = false;
        } else if (this.whoseAnimFlag == "opp") {
            canvas.app.battle.model.oppAnimFlag = false;
        }
    }
    if (this.parent) this.parent.removeChild(this);
    if (this.centerHide) this.baseLnk.centerVisible(true);
    canvas.px.Container.prototype.destroy.apply(this, [{ children: true }]);
};
canvas.app.battle.view.Pet = function () {
    canvas.px.Container.call(this);
    this.dieFlag = false;
    this.deadFrame = 0;
    this.persId = 0;
};
canvas.app.battle.view.Pet.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.battle.view.Pet.prototype.load = function (src) {
    this.srcPet = src;
    var a = this.srcPet.split("/");
    this.petName = a[a.length - 1].split(".")[0];
    this.srcPet = canvas.Config.petsPath + this.petName + "/" + this.petName;
    this.animation = new canvas.animation.Bot(this.srcPet);
    this.animation.frameEvent = canvas.app.battle.Event.ENTER_FRAME;
    if (this.animation.ready) {
        this.loadComplete();
    } else {
        canvas.EventManager.addEventListener(canvas.px.MovieClipEvent.EVENT_READY, this.animation, this.loadComplete, this);
    }
};
canvas.app.battle.view.Pet.prototype.loadComplete = function () {
    canvas.EventManager.removeEventListener(canvas.px.MovieClipEvent.EVENT_READY, this.animation, this.loadComplete, this);
    this.animation.x = 20;
    this.addChild(this.animation);
    this.animation.TURN = this.TURN.bind(this);
    this.animation.SND = this.SND.bind(this);
    if (this.dieFlag && this.deadFrame) {
        this.animation.gotoAndStop(this.deadFrame);
    } else if (this.dieFlag) {
        this.animation.gotoAndPlay("die");
    } else {
        this.animation.gotoAndPlay("idle");
    }
};
canvas.app.battle.view.Pet.prototype.TURN = function () {
    if (this.animation.currentLabel == "die") {
        this.deadFrame = this.animation.currentFrame;
    }
    if (!this.dieFlag) {
        this.animation.gotoAndPlay("idle");
    }
    this.intervalHandler();
};
canvas.app.battle.view.Pet.prototype.SND = function (soundName) {
    canvas.SoundManager.play(canvas.Config.soundsPath + "pets/" + this.petName + "/" + soundName + ".mp3");
};
canvas.app.battle.view.Pet.prototype.playBaff = function (bafId) {
    var animationName;
    if (!this.animation) return;
    switch (bafId) {
        case 1:
            animationName = "baf_1";
            break;
        case 2:
            animationName = "baf_2";
            break;
        default:
            break;
    }
    if (this.animation.labels[animationName]) {
        this.animation.gotoAndPlay(animationName);
    } else {
        if (this.idInterval) clearTimeout(this.idInterval);
        this.idInterval = setTimeout(this.intervalHandler.bind(this), 1e3);
    }
};
canvas.app.battle.view.Pet.prototype.intervalHandler = function () {
    if (this.addFuncTurn) this.addFuncTurn({ pers_id: this.persId });
};
canvas.app.battle.view.Pet.prototype.die = function () {
    if (this.dieFlag || !this.animation) {
        return;
    }
    this.dieFlag = true;
    this.animation.gotoAndPlay("die");
};
canvas.app.battle.view.Pet.prototype.idle = function () {
    if (!this.dieFlag) return;
    this.dieFlag = false;
    if (this.animation) {
        this.animation.gotoAndPlay("idle");
    }
};
canvas.app.battle.view.DmgFly = function (par, cnt) {
    canvas.px.Container.call(this);
    this.ARR_Y = [
        70,
        61.3,
        54.55,
        49.7,
        46.8,
        45.85,
        45.85,
        45.7,
        45.6,
        45.35,
        44.95,
        44.65,
        44.15,
        43.6,
        43,
        42.3,
        41.6,
        40.8,
        39.85,
        38.95,
        37.9,
        36.8,
        35.65,
        34.45,
        33.1,
        31.75,
        30.3,
        28.75,
        27.2,
        25.45,
        23.75,
        21.95,
        20.1,
        18.1,
        16.15,
        14.05,
        11.85,
        9.6,
        7.3,
        4.95,
        2.5,
        0,
    ];
    this.ARR_A = [
        0,
        0.36,
        0.64,
        0.84,
        0.96,
        1,
        1,
        1,
        0.99,
        0.99,
        0.98,
        0.97,
        0.96,
        0.95,
        0.94,
        0.92,
        0.91,
        0.89,
        0.87,
        0.85,
        0.83,
        0.8,
        0.78,
        0.75,
        0.72,
        0.69,
        0.66,
        0.63,
        0.59,
        0.55,
        0.52,
        0.48,
        0.44,
        0.39,
        0.35,
        0.3,
        0.26,
        0.21,
        0.16,
        0.11,
        0.05,
        0,
    ];
    var conf = canvas.app.battle.model;
    if (canvas.app.battle.Const.PERS_POS_X[par.tar]) {
        this.x = canvas.app.battle.Const.PERS_POS_X[par.tar];
        this.dX = this.x + Math.floor(Math.random() * 90 - 25) * (par.tar == "pers" ? (conf.persDmgCnt > 0 ? 1 : 0) : conf.oppDmgCnt > 0 ? -1 : 0);
        this.dX_mir = this.x + Math.floor(Math.random() * 40 + 25) * (par.tar == "pers" ? (conf.persDmgCnt > 0 ? -1 : 0) : conf.oppDmgCnt > 0 ? 1 : 0);
        this.whose_dmg = par.tar;
    } else {
        canvas.app.battle.log("DmgFly WARN: dmg_fly, unknown target = " + par.tar, 16711680);
        this.dX = this.x;
    }
    this.y = 20 * cnt + 60;
    this.yy = this.y;
    this.dV = Math.random() * 0.7 + 0.65;
    this.dVx = 0.065;
    if (this.whose_dmg == "pers") {
        conf.persDmgCnt++;
        if (conf.persDmgCnt > 8) {
            this.dV *= 1.6;
        }
    } else if (this.whose_dmg == "opp") {
        conf.oppDmgCnt++;
        if (conf.oppDmgCnt > 8) {
            this.dV *= 1.6;
        }
    }
    var dmg_col;
    var dmg_txt;
    if (par.crit == 1) {
        par.kick = canvas.app.battle.Const.DMG_KICK_CRIT;
    }
    switch (par.kick) {
        case canvas.app.battle.Const.DMG_KICK_DODGE:
            dmg_col = 39168;
            dmg_txt = canvas.Translator.getText(16);
            this.dX = this.x;
            break;
        case canvas.app.battle.Const.DMG_KICK_WOUND:
            dmg_col = 16777215;
            dmg_txt = this.val2str(par.val);
            break;
        case canvas.app.battle.Const.DMG_KICK_CRIT:
            dmg_col = 16711680;
            dmg_txt = this.val2str(par.val);
            break;
        case canvas.app.battle.Const.DMG_KICK_BLOCK:
            dmg_col = 170;
            dmg_txt = canvas.Translator.getText(31);
            this.dX = this.x;
            break;
        case canvas.app.battle.Const.DMG_KICK_CURE:
            dmg_col = 39168;
            dmg_txt = this.val2str(par.val);
            this.dX = this.dX_mir;
            break;
        case canvas.app.battle.Const.DMG_KICK_MANA:
            dmg_col = 4605695;
            dmg_txt = this.val2str(par.val);
            this.dX = this.dX_mir;
            break;
        case canvas.app.battle.Const.DMG_KICK_ABSORB:
            dmg_col = 16776960;
            dmg_txt = canvas.Translator.getText(17) + " " + String(par.val);
            this.dX = this.x;
            break;
        case canvas.app.battle.Const.DMG_KICK_RESIST:
            dmg_col = 16711935;
            dmg_txt = canvas.Translator.getText(18) + " " + String(par.val) + "%";
            this.dX = this.x;
            break;
        case canvas.app.battle.Const.DMG_KICK_IMMUNITY:
            dmg_col = 65535;
            dmg_txt = canvas.Translator.getText(46);
            this.dX = this.x;
            break;
        case canvas.app.battle.Const.DMG_KICK_NOCHANCE:
            dmg_col = 65535;
            dmg_txt = canvas.Translator.getText(47);
            this.dX = this.x;
            break;
        case canvas.app.battle.Const.DMG_KICK_FULLRES:
            dmg_col = 65535;
            dmg_txt = canvas.Translator.getText(18);
            this.dX = this.x;
            break;
        default:
            canvas.app.battle.log("DmgFly WARN: showDMG unknown kick = " + par.kick, 16711680);
    }
    var tf = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_20_BOLD_STROKE, dmg_col, 30, 20, "center");
    tf.text = dmg_txt;
    this.addChild(tf);
    this.dmg_fly_index = 0;
    this.updatePos();
    canvas.EventManager.addEventListener(canvas.app.battle.Event.ENTER_FRAME, null, this.frameHandler, this);
};
canvas.app.battle.view.DmgFly.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.battle.view.DmgFly.prototype.val2str = function (val) {
    if (val > 0) {
        return "+" + String(val);
    }
    return String(val);
};
canvas.app.battle.view.DmgFly.prototype.frameHandler = function () {
    var conf = canvas.app.battle.model;
    this.dmg_fly_index++;
    if (this.dmg_fly_index < this.ARR_A.length) {
        this.updatePos();
    } else {
        if (this.whose_dmg == "pers") {
            conf.persDmgCnt--;
            if (conf.persDmgCnt < 0) {
                conf.persDmgCnt = 0;
            }
        } else if (this.whose_dmg == "opp") {
            conf.oppDmgCnt--;
            if (conf.oppDmgCnt < 0) {
                conf.oppDmgCnt = 0;
            }
        }
        canvas.EventManager.removeEventListener(canvas.app.battle.Event.ENTER_FRAME, null, this.frameHandler, this);
        this.parent.removeChild(this);
        this.destroy({ children: true });
    }
};
canvas.app.battle.view.DmgFly.prototype.updatePos = function () {
    this.y = this.yy + this.ARR_Y[this.dmg_fly_index] * this.dV;
    this.alpha = this.ARR_A[this.dmg_fly_index] * this.dV;
    if (Math.abs(this.x - this.dX) > 1) {
        this.x -= (this.x - this.dX) * this.dVx;
    }
};
canvas.app.battle.view.ComboHint = function () {
    canvas.px.Container.call(this);
    this.image = new canvas.px.Sprite(canvas.ResourceLoader.getImage("locale", "battle_combo_hint"));
    this.image.scale.set(0, 0);
    this.image.anchor.set(0.5, 0.5);
    this.addChild(this.image);
    this.state = false;
    this.delayIndex = 0;
    canvas.EventManager.addEventListener(canvas.app.battle.Event.ENTER_FRAME, null, this.frameHandler, this);
};
canvas.app.battle.view.ComboHint.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.battle.view.ComboHint.prototype.frameHandler = function () {
    if (this.state) {
        if (this.delayIndex > 15) {
            if (this.image.alpha <= 0) {
                this.finish();
            } else {
                this.image.y += 4;
                this.image.alpha -= 0.15;
            }
        } else {
            this.delayIndex++;
        }
    } else {
        if (this.image.scale.x >= 1) {
            this.state = true;
            this.image.scale.set(1, 1);
        } else {
            var targetX = this.image.scale.x + 0.1;
            targetX = targetX > 1 ? 1 : targetX;
            this.image.scale.set(targetX, targetX);
        }
    }
};
canvas.app.battle.view.ComboHint.prototype.finish = function () {
    canvas.EventManager.removeEventListener(canvas.app.battle.Event.ENTER_FRAME, null, this.frameHandler, this);
    this.parent.removeChild(this);
    this.destroy({ children: true });
};
canvas.app.battle.view.elements.PopupButton = function (label) {
    canvas.ui.SimpleButton.call(this, canvas.ResourceLoader.getImage("ui", "battle_popup_btn"));
    this.field = new canvas.ui.Text(canvas.app.battle.model.isBold ? canvas.Const.FONT_TAHOMA_10_BOLD : canvas.Const.FONT_TAHOMA_10, 16769466, 73, 18, "center");
    this.addChild(this.field);
    this.field.position.set(18, 1);
    this.setLabel(label);
    this.sprite.hitArea = new canvas.px.Rectangle(14, 0, this.width - 28, 18);
};
canvas.app.battle.view.elements.PopupButton.prototype = Object.create(canvas.ui.SimpleButton.prototype);
canvas.app.battle.view.elements.PopupButton.prototype.setLabel = function (label) {
    this.field.text = label;
};
canvas.app.battle.view.elements.BowItem = function () {
    this._image = false;
    Object.defineProperty(this, "image", {
        get: function () {
            return this._image;
        },
        set: function (value) {
            this._image = value;
            if (this._image != "") {
                if (!this.imageView) {
                    this.imageView = new canvas.ui.Image(this._image);
                    this.container.addChildAt(this.imageView, 0);
                } else {
                    this.imageView.setImage(this._image);
                }
                this.count = this._count;
                this.buttonMode = true;
                this.gradient.visible = true;
                this.countBack.visible = true;
                this.countField.visible = true;
            } else {
                this.locked = false;
                this.selected = false;
                this.buttonMode = false;
                this.gradient.visible = false;
                this.countBack.visible = false;
                this.countField.visible = false;
            }
        },
    });
    this._locked = false;
    Object.defineProperty(this, "locked", {
        get: function () {
            return this._locked;
        },
        set: function (value) {
            this._locked = value;
            this.buttonMode = !this._locked;
            this.wallLock.visible = this._locked;
        },
    });
    this._selected = false;
    Object.defineProperty(this, "selected", {
        get: function () {
            return this._selected;
        },
        set: function (value) {
            this._selected = value;
            this.selection.visible = this._selected;
        },
    });
    this._count = false;
    Object.defineProperty(this, "count", {
        get: function () {
            return this._count;
        },
        set: function (value) {
            this._count = value;
            this.countField.text = this._count.toString();
        },
    });
    this._coolDownLeft = false;
    Object.defineProperty(this, "coolDownLeft", {
        get: function () {
            return this._coolDownLeft;
        },
        set: function (value) {
            this._coolDownLeft = value;
            if (this._coolDownLeft > 0) {
                this.timeout = setTimeout(this.timerHandler.bind(this), this._coolDownLeft * 1e3);
                this.locked = true;
            }
        },
    });
    canvas.px.Container.call(this);
    this.container = new canvas.px.Container();
    this.addChild(this.container);
    this.gradient = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_bow_item_gradient"));
    this.container.addChild(this.gradient);
    this.countBack = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_bow_item_count_back"));
    this.container.addChild(this.countBack);
    this.countBack.x = 36;
    this.countBack.y = 45;
    this.countField = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_10, 16770533, 25, 16, "center");
    this.countField.x = 35;
    this.countField.y = 45;
    this.container.addChild(this.countField);
    this.selection = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_bow_item_selector"));
    this.container.addChild(this.selection);
    this.selection.x = -1;
    this.selection.y = -1;
    this.wallLock = new canvas.px.Graphics();
    this.wallLock.beginFill(0, 0.6);
    this.wallLock.drawRect(0, 0, 60, 60);
    this.wallLock.endFill();
    this.container.addChild(this.wallLock);
    this.wallLock.x = -1;
    this.wallLock.y = -1;
    this.lock = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_bow_item_lock"));
    this.wallLock.addChild(this.lock);
    this.lock.x = 2;
    this.lock.y = 1;
    this.wallLock.visible = false;
    this.selection.visible = false;
    this.countField.visible = false;
    this.countBack.visible = false;
    this.gradient.visible = false;
    this.buttonMode = false;
    this.interactive = true;
    this.mouseover = this.overHandler.bind(this);
    this.mouseout = this.outHandler.bind(this);
    this.click = this.clickHandler.bind(this);
};
canvas.app.battle.view.elements.BowItem.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.battle.view.elements.BowItem.prototype.timerHandler = function () {
    this.locked = false;
};
canvas.app.battle.view.elements.BowItem.prototype.overHandler = function () {
    if (this.image && typeof artifactAltSimple != "undefined") {
        artifactAltSimple("aa" + this.effectID.toString(), 2);
    }
};
canvas.app.battle.view.elements.BowItem.prototype.outHandler = function () {
    if (typeof artifactAltSimple != "undefined") {
        artifactAltSimple("aa" + this.effectID.toString(), 0);
    }
};
canvas.app.battle.view.elements.BowItem.prototype.clickHandler = function () {
    if (this.buttonMode) {
        if (this._locked) return;
        canvas.EventManager.dispatchEvent(canvas.app.battle.Event.USE_EFFECT, null, this.effectID);
    }
};
canvas.app.location.Main = function (model, hintManager, windowsManager) {
    canvas.px.Container.call(this);
    this.model = model;
    this.model.init();
    this.hintManager = hintManager;
    this.windowsManager = windowsManager;
    canvas.EventManager.addEventListener(canvas.app.location.Event.HINT_ADD, null, this.handlerHintAdd, this);
    canvas.EventManager.addEventListener(canvas.app.location.Event.HINT_REMOVE, null, this.handlerHintRemove, this);
    canvas.EventManager.addEventListener(canvas.Event.STAGE_KEY_DOWN, null, this.handlerKey, this);
    canvas.EventManager.addEventListener(canvas.app.location.Event.RESIZE, null, this.resizeHandler, this);
    this.hintContainer = new canvas.px.Container();
    this.hintContainer.interactive = true;
    this.windowsContainer = new canvas.px.Container();
    this.view = new canvas.app.location.View(this);
    this.addChild(this.view);
    this.addChild(this.windowsContainer);
    this.addChild(this.hintContainer);
    canvas.EventManager.addEventListener(canvas.px.WindowEvent.EVENT_OPEN, this.windowsManager, this.windowOpenHandler, this);
    canvas.EventManager.addEventListener(canvas.px.WindowEvent.EVENT_CLOSE, this.windowsManager, this.windowCloseHandler, this);
    setInterval(this.timerHandler.bind(this), 1e3);
    setInterval(this.timer60Handler.bind(this), 6e4);
};
canvas.app.location.Main.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.location.Main.prototype.resizeHandler = function () {
    this.resize(this.model.width, this.model.height);
};
canvas.app.location.Main.prototype.resize = function (w, h) {
    var ww = w;
    var hh = h;
    this.hintManager.init(this.hintContainer, ww, hh);
    this.model.width = ww;
    this.model.height = hh;
    this.view.resize(ww, hh);
};
canvas.app.location.Main.prototype.handlerKey = function (event) {
    if (document.activeElement && document.activeElement.constructor.name == "HTMLInputElement") return;
    var keyCode = event.params.globalKeyCode;
    var altKey = event.params.altKey;
    var ctrlKey = event.params.ctrlKey;
    var shiftKey = event.params.shiftKey;
    switch (keyCode) {
        case canvas.Const.KEYS.L:
            if (shiftKey) {
                canvas.Log.show(canvas.Log.LOCATION);
            }
            break;
    }
};
canvas.app.location.Main.prototype.swfObject = function (data) {
    var str;
    var obj;
    if (data) {
        canvas.app.location.log("swfObjectHandler", 65280);
        for (str in data) {
            obj = data[str];
            canvas.app.location.log("DATA[" + str + "] :: " + data[str]);
            if (!canvas.Functions.testStatus(obj)) {
                continue;
            }
            switch (str) {
                case "common|area_conf":
                    if (!this.model.isInst) {
                        this.model.parser.unpackTownConfObject(obj["area_conf"]);
                        this.view.buildAll();
                    }
                    break;
                case "instance|conf":
                    if (this.model.isInst) {
                        this.model.parser.unpackTownConfObject(this.model.parser.instanceToLocation(obj, data.server_time));
                        this.view.buildAll();
                    }
                    break;
                case "common|event_conf":
                    this.model.parser.unpackEventConfObject(obj["event_conf"]);
                    this.view.buildEvent();
                    break;
                case "common|resurrection_modes":
                    this.model.parseResurrectData(obj["buttons"]);
                    this.view.buildResurect();
                    break;
                case "fight|count":
                    this.model.NUM_BIG_FIGHT = obj.fight_count;
                    this.view.buildFight();
                    break;
                case "front|conf":
                    this.model.parseFronts(data);
                    this.view.updateFronts();
                    break;
                case "front|locations":
                    this.view.mapSide.miniMap.swfObject(data);
                    break;
                case "user|view":
                    this.model.USER_GHOST = obj.dead;
                    break;
                case "magic_mirror|end_time":
                    this.model.magicMirrorEndTime = obj.magicMirrorEndTime;
                    this.view.updateMagicMirror();
                    break;
                case "common|action_complete":
                    this.model.inWaitingAnswer = false;
                    break;
            }
        }
    }
};
canvas.app.location.Main.prototype.sendData = function (tar, data) {
    canvas.app.location.log("swf_transfer:sendData " + tar + " " + data);
    if (typeof swfTransfer != "undefined") swfTransfer("game", tar, data);
};
canvas.app.location.Main.prototype.handlerHintAdd = function (e) {
    this.hintManager.add(e.params.target, e.params.params);
};
canvas.app.location.Main.prototype.handlerHintRemove = function (e) {
    this.hintManager.remove(e.params.target);
};
canvas.app.location.Main.prototype.windowOpenHandler = function (e) {
    this.view.locSide.location_cont.filters = [canvas.Functions.getGreyScale()];
};
canvas.app.location.Main.prototype.windowCloseHandler = function (e) {
    switch (this.windowsManager.currentWindow) {
        case this.view.resurrectWindow:
            this.view.resurrectWindow = null;
            break;
        default:
            if (!canvas.app.location.model.USER_GHOST) this.view.locSide.location_cont.filters = [];
    }
};
canvas.app.location.Main.prototype.timerHandler = function () {
    if (this.model.fronts.frontsPanelEnabled) {
        this.view.frontsPanel.updateTimer();
    }
    if (this.model.fronts.frontsEnabled) {
        this.view.frontsIcon.updateTimer();
    }
    if (this.view.campaignInfo && this.view.campaignInfo.data) {
        if (this.view.campaignInfo.data.finishTime > this.model.serverTime.getTime()) {
            this.view.campaignInfo.updateTime();
        } else {
            this.view.campaignInfo.destroy();
            this.view.campaignInfo = null;
        }
    }
    if (this.view.popupWheelFortune) {
        if (this.view.popupWheelFortune.parent) {
            this.view.popupWheelFortune.updateTime();
        } else {
            this.view.popupWheelFortune = null;
        }
    }
};
canvas.app.location.Main.prototype.timer60Handler = function () {
    this.loadFrontsData();
};
canvas.app.location.Main.prototype.loadFrontsData = function (action, locationID) {
    if (action == undefined) action = "conf";
    if (locationID == undefined) locationID = "";
    this.model.frontsAction = action;
    if (!this.model.fronts.frontsEnabled) {
        this.view.updateFronts();
        return;
    }
    switch (action) {
        case canvas.app.location.Const.ACTION_CONF:
            this.model.resetFrontsCooldown();
            front_conf();
            break;
        case canvas.app.location.Const.ACTION_FIGHT_JOIN:
            confirm_front(locationID);
            break;
        case canvas.app.location.Const.ACTION_FIGHT_START:
            front_fight_start();
            break;
    }
};
canvas.app.location.Main.prototype.joinFrontsBattle = function (locationID) {
    this.loadFrontsData(canvas.app.location.Const.ACTION_FIGHT_JOIN, locationID);
};
canvas.app.location.Main.prototype.startFrontsBattle = function (locationID) {
    this.loadFrontsData(canvas.app.location.Const.ACTION_FIGHT_START);
};
canvas.app.location.Model = function (par) {
    this.par = par;
    this.serverTime = new canvas.utils.ServerTime(parseInt(par["current_time"]));
    this.parser = new canvas.app.location.Parser();
    this.finder = new canvas.app.location.Finder();
    this.RACE_HUM = "hum";
    this.RACE_MAG = "mag";
    this.firstResize = true;
    this.CfgArea = par.area_conf_json != undefined ? JSON.parse(par.area_conf_json) : par.instance_conf != undefined ? this.parser.instanceToLocation(JSON.parse(par.instance_conf), par.server_time) : {};
    this.isInst = par.instance_conf != undefined;
    this.CfgEvent = par.event_conf_json != undefined ? JSON.parse(par.event_conf_json) : {};
    this.CfgFight = par.fight_count;
    this.CfgNav = par.CfgLink != undefined ? par.CfgLink : "images/locale/ru/compass_conf.xml";
    this.CasinoLink = par.casino_link != undefined ? par.casino_link : "";
    this.mRace = par.race != undefined ? (par.race == 1 ? this.RACE_HUM : this.RACE_MAG) : this.RACE_HUM;
    this.noUserValue = par["no_user_value"] == "1";
    this.FinishLocation = "";
    this.FinishType = "";
    this.FlagLocation = "";
    this.TRANSITION_POSSIBLE = false;
    this.WITH_MAP = true;
    this.IsBold = par.nobold != undefined ? (par.nobold == 1 ? false : true) : true;
    this.USER_NUB = par.nub != undefined ? (par.nub == 1 ? true : false) : false;
    this.USER_GHOST = par.ghost != undefined ? (par.ghost == 1 ? true : false) : false;
    this.OBJ_NUB_LOC_ITEMS = { "human-city.swf": 5, "nubi_village.swf": 2, "magm-city.swf": 7, "nubi_village_mag.swf": 4 };
    this.STRINGS_ARR = {};
    this.OBJ_WORLD = { locs: {}, conf: {} };
    this.OBJ_TOWN = {};
    this.OBJ_EVENT = { tasks: {} };
    this.OBJ_LOCVERGE = {};
    this.NUM_LOCATIONS = 0;
    this.ARR_LOCATIONS = [];
    this.NUM_BIG_FIGHT = 0;
    this.MapCfgLink = par.MapCfgLink != undefined ? par.MapCfgLink : "images/locale/ru/world_conf.xml";
    this.MapUpdLink = par.MapUpdLink != undefined ? par.MapUpdLink : "images/swf/dod_world/my_flag.xml";
    this.MapNavLink = this.CfgNav;
    this.World1_Path = par.World1_Path != undefined ? par.World1_Path : "images/swf/world_res/world1/";
    this.World2_Path = par.World2_Path != undefined ? par.World2_Path : "images/swf/world_res/world2/";
    this.Areas_Path = par.Areas_Path != undefined ? par.Areas_Path : "images/swf/world_res/areas/";
    this.AreasXML_Path = par.AreasXML_Path != undefined ? par.AreasXML_Path : "images/locale/ru/world_xml/";
    this.MORNING_TIME = new Date(null, null, null, 6, 30);
    this.EVENING_TIME = new Date(null, null, null, 20, 30);
    this.MAIN_HIDDEN = "main_hidden";
    this.WITHOUT_FARM = "$WithoutFarm";
    this.MODE_AREA = "mode_area";
    this.MODE_NPC = "mode_npc";
    this.MODE_HOUSE = "mode_house";
    this.TYPE_AREA = "type_area";
    this.TYPE_NPC = "type_npc";
    this.TYPE_BOT = "type_bot";
    this.TYPE_ACTION = "type_action";
    this.TYPE_INSTATNS = "type_instance";
    this.MIN_STAGE_WIDTH = 831;
    this.MIN_STAGE_HEIGHT = 290;
    this.MAX_STAGE_WIDTH = 10600;
    this.MAX_STAGE_HEIGHT = 660;
    this.MAP_WIDTH = 300;
    this.MAP_HEIGHT = 610;
    this.S_TIME_TRANSITION = "S_TIME_TRANSITION";
    this.S_TRANSITION_POSSIBLE = "S_TRANSITION_POSSIBLE";
    this.S_ARE_YOU_ASSURED = "S_ARE_YOU_ASSURED";
    this.S_YES = "S_YES";
    this.S_CANCEL = "S_CANCEL";
    this.S_CONFIRMATION = "S_CONFIRMATION";
    this.S_LOCATIONS = "S_LOCATIONS";
    this.S_OBJECTS = "S_OBJECTS";
    this.S_NPCs = "S_NPCs";
    this.S_OPEN_MAP = "S_OPEN_MAP";
    this.S_CLOSE_MAP = "S_CLOSE_MAP";
    this.S_OPEN_LIST = "S_OPEN_LIST";
    this.S_CLOSE_LIST = "S_CLOSE_LIST";
    this.S_MAP = "S_MAP";
    this.S_ACTION_IN_PROCESS = "S_ACTION_IN_PROCESS";
    this.S_OPEN_WORLD_MAP = "S_OPEN_WORLD_MAP";
    this.S_REFRESH_MAP = "S_REFRESH_MAP";
    this.S_ZOOM_IN = "S_ZOOM_IN";
    this.S_ZOOM_OUT = "S_ZOOM_OUT";
    this.S_SHOW_EVENT = "S_SHOW_EVENT";
    this.S_GREAT_FIGHT = "S_GREAT_FIGHT";
    this.S_TO_YOU = "S_TO_YOU";
    this.S_TO_ALL = "S_TO_ALL";
    this.S_RESURECT = "S_RESURECT";
    this.S_RESURECT_WILL = "S_RESURECT_WILL";
    this.S_TO_BATTLE = "S_TO_BATTLE";
    this.S_CASINO = "S_CASINO";
    this.S_RESURRECT_MONEY = "S_RESURRECT_MONEY";
    this.S_RESURRECT_CAPITAL = "S_RESURRECT_CAPITAL";
    this.S_DONT_RESURRECT = "S_DONT_RESURRECT";
    this.S_MONTH_JAN = "S_MONTH_JAN";
    this.S_MONTH_FEB = "S_MONTH_FEB";
    this.S_MONTH_MAR = "S_MONTH_MAR";
    this.S_MONTH_APR = "S_MONTH_APR";
    this.S_MONTH_MAY = "S_MONTH_MAY";
    this.S_MONTH_JUN = "S_MONTH_JUN";
    this.S_MONTH_JUL = "S_MONTH_JUL";
    this.S_MONTH_AUG = "S_MONTH_AUG";
    this.S_MONTH_SEP = "S_MONTH_SEP";
    this.S_MONTH_OCT = "S_MONTH_OCT";
    this.S_MONTH_NOV = "S_MONTH_NOV";
    this.S_MONTH_DEC = "S_MONTH_DEC";
    this.blinkIds = [];
    this.tech_works_start = parseInt(par["tech_works_start"]) * 1e3;
    this.tech_current_time = parseInt(par["current_time"]) * 1e3;
    this.tech_works_stop = parseInt(par["tech_works_stop"]) * 1e3;
    this.tech_works_name = par["tech_works_name"];
    this.tech_works_description = par["tech_works_description"];
    this.info_start = parseInt(par["info_start"]) * 1e3;
    this.info_current_time = parseInt(par["current_time"]) * 1e3;
    this.info_stop = parseInt(par["info_stop"]) * 1e3;
    this.info_name = par["info_name"];
    this.info_description = par["info_description"];
    this.serverTimeZoneOffset = par.time_zone == undefined ? 240 : parseInt(par.time_zone);
    this.NPCEvents = [];
    this.ww = 0;
    this.hh = 0;
    this.diceGameEnabled = par.dice_game_enabled;
    this.translatePath = "";
    this.frontsURL = par.frontsURL != undefined ? par.frontsURL : "";
    this.fronts = new canvas.data.location.DFronts();
    this.activityURL = par.activity_url;
    this.castPeriodFinish = 0;
    this.resurrectData = null;
    this.magicMirrorEndTime = par.magicMirrorEndTime == undefined ? 0 : parseInt(par.magicMirrorEndTime);
    this.actionConfirms = true;
    this.campaignData = null;
    this.transitionLnk = "";
    this.waitRefresh = false;
    this.inWaitingAnswer = false;
    this.reqTime = 0;
    this.m_awardUrl = par.bannerurl;
    this.award_msg = par.bannermsg;
    this.brilliant_msg = par.br_msg;
    this.brilliant_link = par.br_link;
    this.frontsAction = "";
    this.canvasMinigamesFlag = parseInt(par.canvasMinigamesFlag) > 0;
    this.manorAutoTurn = false;
    this.wfEnabled = par.wheel_fortune == "1";
    this.wfUrl = par.wf_url;
    this.wfMsg = par.wf_msg;
    this.wfExpireTime = par.wf_expire_time;
    var i;
    var a;
    var len;
    var str;
    var obj;
    if (par.blink != undefined) {
        a = par.blink.split("|");
        len = a.length;
        for (i = 0; i < len; i++) {
            str = parseInt(a[i]);
            if (this.blinkIds.indexOf(str) < 0) this.blinkIds.push(str);
        }
    }
    if (par.resurrect_buttons != undefined) this.parseResurrectData(JSON.parse(par.resurrect_buttons));
    if (this.ok(par.user_campaign)) {
        obj = JSON.parse(par.user_campaign);
        this.campaignData = new canvas.data.location.DCampaign();
        this.campaignData.title = obj.title;
        this.campaignData.picture = obj.picture;
        this.campaignData.finishTime = obj.time_expire;
        if (this.campaignData.finishTime <= this.serverTime.getTime()) this.campaignData = null;
    }
    var labels;
    if (par.labels != undefined) {
        labels = par.labels.split("|");
    } else {
        labels = [
            "время до перехода",
            "переход возможен",
            "Подтверждение",
            "Вы уверены?",
            "да",
            "отмена",
            "локации",
            "объекты",
            "персонажи",
            "Открыть миникарту",
            "Закрыть миникарту",
            "Карта",
            "Выполняется действие",
            "Карта мира",
            "Обновить",
            "Уменьшить",
            "Увеличить",
            "великие битвы",
            "Вами",
            "Всего",
            "Воскреснуть",
            "Желаете воскреснуть?",
            "В бой!",
            "Однорукий бандит",
            "Здесь за",
            "В столице",
            "Не воскрешаться",
            "Января",
            "Февраля",
            "Марта",
            "Апреля",
            "Мая",
            "Июня",
            "Июля",
            "Августа",
            "Сентября",
            "Октября",
            "Ноября",
            "Декабря",
        ];
    }
    this.STRINGS_ARR[this.S_TIME_TRANSITION] = labels[0];
    this.STRINGS_ARR[this.S_TRANSITION_POSSIBLE] = labels[1];
    this.STRINGS_ARR[this.S_CONFIRMATION] = labels[2];
    this.STRINGS_ARR[this.S_ARE_YOU_ASSURED] = labels[3];
    this.STRINGS_ARR[this.S_YES] = labels[4];
    this.STRINGS_ARR[this.S_CANCEL] = labels[5];
    this.STRINGS_ARR[this.S_LOCATIONS] = labels[6];
    this.STRINGS_ARR[this.S_OBJECTS] = labels[7];
    this.STRINGS_ARR[this.S_NPCs] = labels[8];
    this.STRINGS_ARR[this.S_OPEN_MAP] = labels[9];
    this.STRINGS_ARR[this.S_CLOSE_MAP] = labels[10];
    this.STRINGS_ARR[this.S_MAP] = labels[11];
    this.STRINGS_ARR[this.S_ACTION_IN_PROCESS] = labels[12];
    this.STRINGS_ARR[this.S_OPEN_WORLD_MAP] = labels[13];
    this.STRINGS_ARR[this.S_REFRESH_MAP] = labels[14];
    this.STRINGS_ARR[this.S_ZOOM_OUT] = labels[15];
    this.STRINGS_ARR[this.S_ZOOM_IN] = labels[16];
    this.STRINGS_ARR[this.S_GREAT_FIGHT] = labels[17];
    this.STRINGS_ARR[this.S_TO_YOU] = labels[18] != undefined ? labels[18] : "Вами";
    this.STRINGS_ARR[this.S_TO_ALL] = labels[19] != undefined ? labels[19] : "Всего";
    this.STRINGS_ARR[this.S_RESURECT] = labels[20] != undefined ? labels[20] : "Воскреснуть";
    this.STRINGS_ARR[this.S_RESURECT_WILL] = labels[21] != undefined ? labels[21] : "Желаете воскреснуть?";
    this.STRINGS_ARR[this.S_TO_BATTLE] = labels[22] != undefined ? labels[22] : "В бой!";
    this.STRINGS_ARR[this.S_CASINO] = labels[23] != undefined ? labels[23] : "Однорукий бандит";
    this.STRINGS_ARR[this.S_RESURRECT_MONEY] = labels[24] != undefined ? labels[24] : "Здесь за";
    this.STRINGS_ARR[this.S_RESURRECT_CAPITAL] = labels[25] != undefined ? labels[25] : "В столице";
    this.STRINGS_ARR[this.S_DONT_RESURRECT] = labels[26] != undefined ? labels[26] : "Не воскрешаться";
    this.STRINGS_ARR[this.S_MONTH_JAN] = labels[27] != undefined ? labels[27] : "Января";
    this.STRINGS_ARR[this.S_MONTH_FEB] = labels[28] != undefined ? labels[28] : "Февраля";
    this.STRINGS_ARR[this.S_MONTH_MAR] = labels[29] != undefined ? labels[29] : "Марта";
    this.STRINGS_ARR[this.S_MONTH_APR] = labels[30] != undefined ? labels[30] : "Апреля";
    this.STRINGS_ARR[this.S_MONTH_MAY] = labels[31] != undefined ? labels[31] : "Мая";
    this.STRINGS_ARR[this.S_MONTH_JUN] = labels[32] != undefined ? labels[32] : "Июня";
    this.STRINGS_ARR[this.S_MONTH_JUL] = labels[33] != undefined ? labels[33] : "Июля";
    this.STRINGS_ARR[this.S_MONTH_AUG] = labels[34] != undefined ? labels[34] : "Августа";
    this.STRINGS_ARR[this.S_MONTH_SEP] = labels[35] != undefined ? labels[35] : "Сентября";
    this.STRINGS_ARR[this.S_MONTH_OCT] = labels[36] != undefined ? labels[36] : "Октября";
    this.STRINGS_ARR[this.S_MONTH_NOV] = labels[37] != undefined ? labels[37] : "Ноября";
    this.STRINGS_ARR[this.S_MONTH_DEC] = labels[38] != undefined ? labels[38] : "Декабря";
    this.months = [
        this.STRINGS_ARR[this.S_MONTH_JAN],
        this.STRINGS_ARR[this.S_MONTH_FEB],
        this.STRINGS_ARR[this.S_MONTH_MAR],
        this.STRINGS_ARR[this.S_MONTH_APR],
        this.STRINGS_ARR[this.S_MONTH_MAY],
        this.STRINGS_ARR[this.S_MONTH_JUN],
        this.STRINGS_ARR[this.S_MONTH_JUL],
        this.STRINGS_ARR[this.S_MONTH_AUG],
        this.STRINGS_ARR[this.S_MONTH_SEP],
        this.STRINGS_ARR[this.S_MONTH_OCT],
        this.STRINGS_ARR[this.S_MONTH_NOV],
        this.STRINGS_ARR[this.S_MONTH_DEC],
    ];
    this.localStorage = new canvas.utils.LocalStorage(canvas.Log.LOCATION);
};
canvas.app.location.Model.prototype.init = function () {
    this.parser.unpackTownConfObject(this.CfgArea);
    this.parser.unpackEventConfObject(this.CfgEvent);
    this.NUM_BIG_FIGHT = parseInt(this.CfgFight);
    this.parser.unpackNavConf(canvas.ResourceLoader.get("navigate").data);
};
canvas.app.location.Model.prototype.getCoordinates = function () {
    var target = null;
    var sess = canvas.Functions.getSessTarget();
    target = sess.target;
    this.autoPenalty = sess.autoPenalty;
    if (target) {
        var array = target.split("|");
        this.FinishLocation = array[0];
        this.FinishType = array[1];
        if (this.FinishType == null) {
            this.FinishType = "location";
        }
    } else {
        this.FinishLocation = target;
        this.FinishType = null;
    }
    if (this.FlagLocation == this.FinishLocation && this.FinishType == "location") {
        if (sess.manor) {
            this.manorAutoEnter = true;
        } else {
            this.finishSessTarget();
        }
    }
};
canvas.app.location.Model.prototype.finishSessTarget = function () {
    canvas.Functions.deleteSessTarget();
    this.FinishLocation = null;
};
canvas.app.location.Model.prototype.parseFronts = function (data) {
    var date = new Date();
    var config;
    var state;
    var obj;
    var str;
    var frontLocData;
    if (!data) {
        this.fronts.currentLocationData = new canvas.data.location.DFrontsLoc();
        this.fronts.currentLocationData.owner = 1;
        this.fronts.currentLocationData.status = 2;
        this.fronts.currentLocationData.cooldown = date.getTime() + 36e5;
        this.fronts.currentLocationData.cooldownStart = date.getTime();
        this.fronts.frontsEnabled = true;
        this.fronts.frontsPanelEnabled = true;
        this.fronts.frontTitle = "Front title";
        this.fronts.humLocs = 10;
        this.fronts.locationsData = [new canvas.data.location.DFrontsLoc(), new canvas.data.location.DFrontsLoc(), new canvas.data.location.DFrontsLoc(), new canvas.data.location.DFrontsLoc(), new canvas.data.location.DFrontsLoc()];
        this.fronts.magLocs = 60;
    } else {
        config = data["front|conf"];
        state = data["state"];
        this.fronts.frontTitle = config.frontTitle;
        this.fronts.humLocs = config.humLocs;
        this.fronts.magLocs = config.magLocs;
        this.fronts.locationsData = new Array();
        for (str in config.locationsData) {
            obj = config.locationsData[str];
            frontLocData = new canvas.data.location.DFrontsLoc();
            frontLocData.id = str;
            if (obj.image != "") frontLocData.image = obj.image;
            frontLocData.title = obj.title;
            frontLocData.status = obj.status;
            frontLocData.owner = this.parseRace(obj.owner);
            frontLocData.description = obj.description;
            frontLocData.cooldown = date.getTime() + (obj.nextEvent <= 0 ? 10 : obj.nextEvent) * 1e3;
            frontLocData.cooldownStart = date.getTime();
            frontLocData.fightAvail = parseInt(obj.fightAvail) == 1;
            frontLocData.fightID = obj.fight_id;
            frontLocData.weight = obj.weight;
            this.fronts.locationsData.push(frontLocData);
            if (config.currentLocationId == str) this.fronts.currentLocationData = frontLocData;
            if (config.availableLocationId == str) this.fronts.availableLocationData = frontLocData;
        }
        this.fronts.locationsData.sort(function (a, b) {
            return a.weight - b.weight;
        });
    }
};
canvas.app.location.Model.prototype.resetFrontsCooldown = function () {
    var len = this.fronts.locationsData.length;
    var frontLocData;
    for (var i = 0; i < len; i++) {
        frontLocData = this.fronts.locationsData[i];
        frontLocData.cooldownStart = Date.now();
        frontLocData.cooldown = frontLocData.cooldownStart + 7e4;
    }
};
canvas.app.location.Model.prototype.parseRace = function (value) {
    return value > 1 ? -1 : value;
};
canvas.app.location.Model.prototype.parseResurrectData = function (obj) {
    this.resurrectData = null;
    var objItem;
    var resurrectDataItem;
    for (var key in obj) {
        objItem = obj[key];
        if (!objItem.id) continue;
        if (this.resurrectData == null) this.resurrectData = new Array();
        resurrectDataItem = new canvas.data.location.DResurrect();
        resurrectDataItem.id = parseInt(objItem.id);
        resurrectDataItem.title = objItem.title;
        resurrectDataItem.enabled = objItem.state;
        resurrectDataItem.error = objItem.error;
        resurrectDataItem.picture = objItem.picture;
        this.resurrectData.push(resurrectDataItem);
    }
};
canvas.app.location.Model.prototype.ok = function (obj) {
    return obj != undefined && obj != null && obj != "null" && obj != "undefined";
};
canvas.app.location.Const = {
    ACTION_CONF: "conf",
    ACTION_FIGHT_START: "fight_start",
    ACTION_FIGHT_JOIN: "fight_join",
    BRILLIANT_IMAGE_PATH: "images/m_dmd.gif",
    POPUP_ZERO_LEVEL: "POPUP_ZERO_LEVEL",
    POPUP_ACTIVITY: "POPUP_ACTIVITY",
    LOC_SMALL_WIDTH: 986,
    LOC_MID_WIDTH: 1986,
    LOC_SMALL_HEIGHT: 326,
    LOC_MID_HEIGHT: 600,
};
canvas.app.location.Event = {
    ENTER_FRAME: "Location.ENTER_FRAME",
    HINT_ADD: "Location.HINT_ADD",
    HINT_REMOVE: "Location.HINT_REMOVE",
    POPUP_WIN_CLICK_OK: "Location.POPUP_WIN_CLICK_OK",
    POPUP_WIN_CLICK_CANCEL: "Location.POPUP_WIN_CLICK_CANCEL",
    ITEM_OVER: "Location.ITEM_OVER",
    ITEM_OUT: "Location.ITEM_OUT",
    ITEM_CLICK: "Location.ITEM_CLICK",
    ANIM_OVER: "Location.ANIM_OVER",
    ANIM_OUT: "Location.ANIM_OUT",
    ANIM_CLICK: "Location.ANIM_CLICK",
    MOVE_TO_ANIM: "Location.MOVE_TO_ANIM",
    WAY_OVER: "Location.WAY_OVER",
    WAY_OUT: "Location.WAY_OUT",
    WAY_CLICK: "Location.WAY_CLICK",
    ZOOM_IN: "Location.ZOOM_IN",
    ZOOM_OUT: "Location.ZOOM_OUT",
    REFRESH_MAP: "Location.REFRESH_MAP",
    TIMER_DONE: "Location.TIMER_DONE",
    COMPLETE: "Location.COMPLETE",
    UPDATE_NPC_EVENTS: "UPDATE_NPC_EVENTS",
    RESIZE: "Location.RESIZE",
    SNOWBALL_KILL: "Location.SNOWBALL_KILL",
    SNOWBALL_DRAW: "Location.SNOWBALL_DRAW",
    PROGRESS_CANCEL: "Location.PROGRESS_CANCEL",
    PROGRESS_DONE: "Location.PROGRESS_DONE",
    LOCATION_READY: "Location.LOCATION_READY",
    AUTO_TURN: "Location.AUTO_TURN",
};
canvas.app.location.View = function (main) {
    this._enableContent = true;
    Object.defineProperty(this, "enableContent", {
        get: function () {
            return this._enableContent;
        },
        set: function (value) {
            this._enableContent = value;
            this.listSide.interactiveChildren = this.locSide.interactiveChildren = this.mapSide.interactiveChildren = value;
        },
    });
    canvas.px.Container.call(this);
    var Conf = canvas.app.location.model;
    this.main = main;
    this.windowsContainer = main.windowsContainer;
    this.locsToRemove = [];
    this.popupWin = null;
    this.progressWin = null;
    this.skyAll = {};
    this.snow = null;
    this.x_start = 200;
    this.y_start = 20;
    this.clocks = new canvas.app.location.view.elements.Clocks();
    this.clocks.y = 30;
    this.clocks.visible = false;
    this.popupsContainer = new canvas.app.location.view.popups.Popups(canvas.app.location.Event);
    this.popupsContainer.position.set(30, 20);
    this.frontsIcon = new canvas.app.location.view.fronts.FrontsIcon(this);
    this.frontsPanel = new canvas.app.location.view.fronts.FrontsPanel(this);
    this.m_brContainer = new canvas.px.Container();
    this.popupsExtContainer = new canvas.px.Container();
    this.resurrectWindow = new canvas.app.location.view.ResurrectWindow();
    this.buildAll();
    this.buildResurect();
    this.m_awardTf = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD, 16705718, 200, 20, "center");
    this.m_awardCnt = new canvas.px.Graphics();
    if (Conf.award_msg) {
        this.x_start = 200;
        this.m_awardTf.text = Conf.award_msg;
        this.x_start = (this.locSide._width - (this.m_awardTf.textWidth + 20)) / 2 + 16;
        this.m_awardTf.position.set(8, 2);
        this.m_awardCnt.beginFill(1118481, 0.5);
        this.m_awardCnt.drawRoundedRect(0, 0, this.m_awardTf.width + 20, this.m_awardTf.height + 2, 10);
        this.m_awardCnt.addChild(this.m_awardTf);
        this.m_awardCnt.endFill();
        this.m_awardCnt.buttonMode = true;
        this.m_awardCnt.interactive = true;
        this.locSide.addChild(this.m_awardCnt);
        this.m_awardCnt.click = this.awardClick.bind(this);
    }
    canvas.EventManager.addEventListener(canvas.app.location.Event.ENTER_FRAME, null, this.frame, this);
    this.m_timer = setInterval(this.timerHandler.bind(this), 1e3);
    this.blinkTimer = setInterval(this.blinkTimerHandler.bind(this), 2e3);
    this.m_brilliantTf = new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_11_BOLD, canvas.Const.FONT_TAHOMA_11_BOLD, 16705718, 300, 20, "left", "top");
    this.m_brilliantTf.interactive = false;
    if (Conf.brilliant_msg != null) {
        this.unlinkBtn = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "close_ico"));
        this.m_brilliantTf.text = Conf.brilliant_msg + " <img src='" + canvas.app.location.Const.BRILLIANT_IMAGE_PATH + "' yOffset='6'/>";
        this.x_start = (this.locSide._width - (this.m_brilliantTf.textWidth + 20)) / 2;
        this.m_brilliantTf.position.set(8, -3);
        this.unlinkBtn.position.set(this.m_brilliantTf.textWidth + 2, 3);
        this.m_brBg = new canvas.px.Graphics();
        this.m_brBg.beginFill(1118481, 0.5);
        this.m_brBg.drawRoundedRect(0, 0, this.m_brilliantTf.textWidth + 20, 18, 7);
        this.m_brContainer.addChildAt(this.m_brBg, 0);
        this.m_brBg.buttonMode = true;
        this.m_brBg.interactive = true;
        this.m_brContainer.addChild(this.m_brilliantTf);
        this.m_brContainer.addChild(this.unlinkBtn);
        this.m_brContainer.position.set(this.x_start, 19);
        canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.unlinkBtn, this.onCloseBrillContainer, this);
    }
    if (Conf.par.time_bonus_online != undefined) {
        this.popupsContainer.init(canvas.app.location.Const.POPUP_ZERO_LEVEL, Conf.par);
    }
    if (this.popupsContainer.children.length < 1 && Conf.activityURL) {
        this.popupsContainer.init(canvas.app.location.Const.POPUP_ACTIVITY, Conf.activityURL);
    }
    if (Conf.campaignData) {
        this.campaignInfo = new canvas.app.location.view.elements.CampaignInfo();
        this.campaignInfo.data = Conf.campaignData;
        this.addChild(this.campaignInfo);
        this.campaignInfo.y = 28;
    }
    if (Conf.wfEnabled) {
        this.popupWheelFortune = this.popupsExtContainer.addChild(new canvas.app.location.view.popups.PopupWheelFortune(Conf.wfMsg, Conf.wfExpireTime, Conf.wfUrl));
    }
    if (Conf.localStorage.get("MapSide") == "1" && Conf.WITH_MAP) {
        this.miniMapBtnDownHandler();
    }
    this.frontsPanel.y = Conf.brilliant_msg || this.award_msg ? 40 : 20;
    this.checkGreatBattleConfirm();
    this.addListeners();
};
canvas.app.location.View.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.location.View.prototype.resize = function () {
    if (this.resizeStarted) {
        return;
    }
    this.resizeStarted = true;
    var Conf = canvas.app.location.model;
    var tmpX;
    this.get_ww();
    this.get_hh();
    this.locSide._width = this.ww - this.listSide._width - (this.mapSide.visible ? this.mapSide._width - 25 : 0) + 25;
    this.locSide._height = this.hh;
    this.locSide.x = this.mapSide.visible ? this.mapSide.x + this.mapSide._width - 25 : 0;
    this.mapSide._height = this.hh;
    this.listSide._height = this.hh;
    tmpX = this.locSide.x + this.locSide._width;
    if (this.eventBtn) tmpX = this.eventBtn.x = Math.round(this.locSide.x + this.locSide._width - this.eventBtn.width - 7);
    if (this.eventPanel && this.eventPanel.parent) {
        tmpX = this.eventPanel.x = Math.round(this.locSide.x + this.locSide._width - this.eventPanel.width - 7);
    }
    if (this.clocks.visible) {
        tmpX = this.clocks.x = Math.round(this.locSide.x + this.locSide._width - this.clocks.width - 25);
    }
    if (this.campaignInfo) this.campaignInfo.x = Math.round(tmpX - this.campaignInfo.width - 20);
    this.listSide.x = this.locSide.x + this.locSide._width - 25;
    if (this.popupWin) this.popupWin.x = this.locSide.x + Math.round((this.locSide._width - this.popupWin.width) / 2);
    if (this.progressWin) this.progressWin.x = Math.round((this.locSide._width - this.progressWin.width) / 2);
    this.miniMapBtn.scale.x = this.mapSide.visible ? 1 : -1;
    this.miniMapBtn.position.set(this.mapSide.visible ? this.mapSide.width - 30 : 30, Math.round((this.hh - this.miniMapBtn.height) / 2));
    if (this.fightBtn) this.fightBtn.x = this.mapSide.visible ? this.mapSide._width - 16 : 8;
    this.x = Math.abs(Math.round((Conf.width - ((this.mapSide.visible ? this.mapSide._width - 25 : 0) + this.locSide._width + this.listSide._width - 25)) / 2));
    if (this.frontsIcon != null) {
        this.frontsIcon.position.set(this.locSide.x + 15 + (Conf.CasinoLink ? 90 : 0), this.locSide._height - 65);
    }
    if (this.frontsPanel) {
        this.frontsPanel.x = Math.round((this.locSide._width - this.frontsPanel.back.width) * 0.5) + (this.mapSide.visible ? this.mapSide._width : 0);
    }
    this.main.windowsManager.init(this.windowsContainer, this.ww - (this.mapSide.visible ? 480 : 210), this.hh, this);
    this.windowsContainer.x = this.x + this.locSide.x;
    this.main.windowsManager.resizeWindows();
    this.m_brContainer.x = this.locSide.x + Math.round((this.locSide._width - this.m_brContainer.width) * 0.5);
    this.popupsExtContainer.position.set(this.locSide.x + Math.round((this.locSide._width - this.popupsExtContainer.width) * 0.5), 19);
    if (this.m_awardCnt) this.m_awardCnt.position.set(Math.round((this.locSide._width - (this.m_awardTf.width + 20)) / 2), 15);
    this.resizeStarted = false;
};
canvas.app.location.View.prototype.get_ww = function () {
    var Conf = canvas.app.location.model;
    this.ww = Conf.width;
    var maxWidth = Conf.OBJ_TOWN.bg_mid == "" ? this.listSide._width + canvas.app.location.Const.LOC_SMALL_WIDTH : this.listSide._width + canvas.app.location.Const.LOC_MID_WIDTH;
    if (this.ww < Conf.MIN_STAGE_WIDTH) {
        this.ww = Conf.MIN_STAGE_WIDTH;
    } else if (this.ww > maxWidth) {
        this.ww = maxWidth;
    }
    Conf.ww = this.ww;
};
canvas.app.location.View.prototype.get_hh = function () {
    var Conf = canvas.app.location.model;
    var targetH;
    if (Conf.OBJ_TOWN.bg_mid != "" && this.ww - this.listSide._width + 25 > canvas.app.location.Const.LOC_SMALL_WIDTH) {
        targetH = canvas.app.location.Const.LOC_MID_HEIGHT;
    } else {
        targetH = canvas.app.location.Const.LOC_SMALL_HEIGHT;
    }
    if (targetH > Conf.height - 10) {
        targetH = Conf.height - 10;
    }
    this.hh = Conf.hh = targetH;
};
canvas.app.location.View.prototype.buildAll = function () {
    var Conf = canvas.app.location.model;
    if (this.popupWin) {
        if (this.popupWin.parent == this.windowsContainer) this.windowsContainer.removeChild(this.popupWin);
    }
    if (this.listSide) {
        if (this.listSide.parent) this.removeChild(this.listSide);
        this.listSide.destroy();
    }
    Conf.TRANSITION_POSSIBLE = false;
    Conf.FinishLocation = null;
    if (!this.mapSide) {
        this.mapSide = new canvas.app.location.view.MapSide();
        canvas.EventManager.addEventListener(canvas.app.location.Event.WAY_OVER, this.mapSide, this.wayOverHandler, this);
        canvas.EventManager.addEventListener(canvas.app.location.Event.WAY_OUT, this.mapSide, this.wayOutHandler, this);
        canvas.EventManager.addEventListener(canvas.app.location.Event.WAY_CLICK, this.mapSide, this.wayClickHandler, this);
        this.mapSide._width = Conf.MAP_WIDTH;
        this.mapSide.visible = false;
        this.mapSide.y = 6;
        this.addChild(this.mapSide);
    }
    this.listSide = new canvas.app.location.view.ListSide();
    canvas.EventManager.addEventListener(canvas.app.location.Event.ITEM_CLICK, null, this.pointClickHandler, this);
    canvas.EventManager.addEventListener(canvas.app.location.Event.ITEM_OVER, null, this.itemOverHandler, this);
    canvas.EventManager.addEventListener(canvas.app.location.Event.ITEM_OUT, null, this.itemOutHandler, this);
    canvas.EventManager.addEventListener(canvas.app.location.Event.TIMER_DONE, null, this.timerDoneHandler, this);
    this.listSide.timerStart();
    this.listSide.y = 6;
    this.addChild(this.listSide);
    if (this.locSide) {
        if (this.locSide.areaID != Conf.OBJ_TOWN.area_id) {
            this.locsToRemove.push(this.locSide);
            this.interactiveChildren = false;
            if (Conf.OBJ_WORLD.locs[Conf.OBJ_TOWN.area_id] != null) {
                this.locSide = Conf.OBJ_WORLD.locs[Conf.OBJ_TOWN.area_id];
                this.locSide.resetHorizontalScrollPos();
                this.mapSide.updateFlag();
                this.removeLocs();
            } else {
                this.locSide = new canvas.app.location.view.LocSide();
                this.setLocSideListeners();
            }
            this.addChild(this.locSide);
        }
    } else {
        this.locSide = new canvas.app.location.view.LocSide();
        this.setLocSideListeners();
        this.addChild(this.locSide);
    }
    this.locSide.start();
    if (!this.skyAll[Conf.OBJ_TOWN.sky_type]) this.skyAll[Conf.OBJ_TOWN.sky_type] = new canvas.app.location.view.elements.Sky(Conf.OBJ_TOWN.sky_type);
    for (var key in this.skyAll) {
        if (key == Conf.OBJ_TOWN.sky_type) {
            this.skyAll[Conf.OBJ_TOWN.sky_type].start();
        } else {
            this.skyAll[Conf.OBJ_TOWN.sky_type].stop();
        }
    }
    this.locSide.setSky(this.skyAll[Conf.OBJ_TOWN.sky_type]);
    this.locSide.y = 6;
    if (Conf.OBJ_TOWN.weather == "1") {
        if (!this.snow) {
            this.snow = new canvas.app.location.view.elements.Snow();
            this.snow.init(2e3, Conf.MAX_STAGE_HEIGHT);
        }
        this.locSide.setSnow(this.snow);
    }
    if (!this.miniMapBtn) {
        this.miniMapBtn = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "mini_map_btn"));
        canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.miniMapBtn, this.miniMapBtnDownHandler, this);
        this.miniMapBtn.y = Math.round((Conf.MIN_STAGE_HEIGHT - this.miniMapBtn.height) / 2);
        var hint = new canvas.app.view.MappingHint(Conf.STRINGS_ARR[Conf.S_OPEN_MAP]);
        this.miniMapHint = new canvas.app.view.MappingHint(Conf.STRINGS_ARR[Conf.S_OPEN_MAP]);
        canvas.EventManager.dispatchEvent(canvas.app.location.Event.HINT_ADD, null, { target: this.miniMapBtn, params: new canvas.utils.HintParams(this.miniMapHint) });
        this.addChild(this.miniMapBtn);
    }
    this.miniMapBtn.interactiveChildren = Conf.WITH_MAP;
    this.miniMapBtn.filters = Conf.WITH_MAP ? [] : [canvas.Functions.getGreyScale(0.5)];
    if (this.miniMapBtn.parent) {
        if (this.getChildIndex(this.listSide) > this.getChildIndex(this.miniMapBtn)) this.swapChildren(this.miniMapBtn, this.listSide);
        if (this.getChildIndex(this.locSide) > this.getChildIndex(this.miniMapBtn)) this.swapChildren(this.miniMapBtn, this.locSide);
    }
    if (this.getChildIndex(this.listSide) > this.getChildIndex(this.locSide)) this.swapChildren(this.locSide, this.listSide);
    this.buildEvent();
    this.buildFight();
    Conf.inWaitingAnswer = false;
    for (var prop in Conf.OBJ_TOWN.items) {
        var dtime = Conf.OBJ_TOWN.items[prop].dtime;
        var ltime = Conf.OBJ_TOWN.items[prop].ltime;
        var curtime = Conf.OBJ_TOWN.curtime;
        var href = Conf.OBJ_TOWN.items[prop].href;
        var refresh = parseInt(Conf.OBJ_TOWN.items[prop].refresh) == 1 ? true : false;
        if (dtime != 0 && ltime != 0) {
            Conf.transitionLnk = href;
            Conf.waitRefresh = refresh;
            this.startFarming(curtime * 1e3, dtime * 1e3, (dtime - ltime) * 1e3, Conf.STRINGS_ARR[Conf.S_ACTION_IN_PROCESS]);
        }
    }
    this.addChild(this.m_brContainer);
    this.addChild(this.popupsExtContainer);
    this.addChild(this.popupsContainer);
    this.addChild(this.clocks);
    if (this.campaignInfo) this.addChild(this.campaignInfo);
    if (Conf.fronts.frontsEnabled) this.main.loadFrontsData();
    this.resize();
    this.main.hintManager.hide();
};
canvas.app.location.View.prototype.buildEvent = function () {
    var Conf = canvas.app.location.model;
    if (this.eventBtn) {
        canvas.EventManager.removeEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.eventBtn, this.refreshEventHandler, this);
        this.eventBtn.destroy();
        this.eventBtn = null;
    }
    if (this.eventPanel) {
        if (this.eventPanel.parent) this.removeChild(this.eventPanel);
    }
    if (Conf.OBJ_EVENT.id > 0) {
        this.eventPanel = new canvas.app.location.view.elements.EventPanel();
        this.eventPanel.y = 20;
        this.addChild(this.eventPanel);
        this.eventBtn = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "event_btn"));
        canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.eventBtn, this.refreshEventHandler, this);
        this.eventBtn.y = 12;
        this.addChild(this.eventBtn);
        this.resize();
    }
};
canvas.app.location.View.prototype.buildFight = function () {
    var Conf = canvas.app.location.model;
    if (this.fightBtn) {
        this.fightBtn.destroy();
        this.fightBtn = null;
    }
    if (Conf.NUM_BIG_FIGHT > 0) {
        this.fightBtn = new canvas.app.location.view.elements.FightButton(Conf.NUM_BIG_FIGHT);
        this.fightBtn.y = 12;
        this.addChild(this.fightBtn);
    }
};
canvas.app.location.View.prototype.buildResurect = function () {
    var Conf = canvas.app.location.model;
    if (this.main.windowsManager.windowIsActive(this.resurrectWindow)) {
        this.windowsManager.closeWindow(this.resurrectWindow);
        this.locSide.grayscaleLoc(false);
    }
    if (Conf.USER_GHOST) {
        this.locSide.grayscaleLoc(true);
        if (Conf.resurrectData && this.resurrectWindow) {
            this.resurrectWindow.itemsCount = Conf.resurrectData.length;
            this.resurrectWindow.update();
            this.main.windowsManager.openWindow(this.resurrectWindow, false, false);
        }
    }
};
canvas.app.location.View.prototype.refreshEventHandler = function () {
    refreshEvent(canvas.app.location.model.OBJ_EVENT.id);
};
canvas.app.location.View.prototype.wayOverHandler = function (event) {
    if (event.params.areaWaypoints) {
        this.findLocation(event.params.areaWaypoints);
    } else {
        this.findLocation(event.params.arr);
    }
};
canvas.app.location.View.prototype.wayOutHandler = function (event) {
    this.itemOutHandler(event);
};
canvas.app.location.View.prototype.wayClickHandler = function (event) {
    var Conf = canvas.app.location.model;
    if (!Conf.TRANSITION_POSSIBLE) return;
    if (event.params.areaWaypoints) {
        this.findClickButton(event.params.areaWaypoints);
    } else {
        this.findClickButton(event.params.arr);
    }
};
canvas.app.location.View.prototype.startFarming = function (ctime, ftime, stime, farmName) {
    var Conf = canvas.app.location.model;
    if (this.progressWin) {
        this.progressWin.destroy();
        this.progressWin = null;
    }
    if (this.popupWin && this.popupWin.parent) {
        this.windowsContainer.removeChild(this.popupWin);
    }
    this.progressWin = new canvas.app.location.view.ProgressWin(ctime, ftime, stime, farmName);
    canvas.EventManager.addEventListener(canvas.app.location.Event.PROGRESS_CANCEL, null, this.cancelFarming, this);
    canvas.EventManager.addEventListener(canvas.app.location.Event.PROGRESS_DONE, null, this.doneFarming, this);
    this.progressWin.position.set(Math.round((this.locSide._width - this.progressWin.width) / 2), Math.round((this.locSide._height - this.progressWin.height) / 2));
    this.windowsContainer.addChild(this.progressWin);
    if (Conf.localStorage.get("MapSide") == "1") {
        this.miniMapBtnDownHandler();
    }
    this.miniMapBtn.enabled = false;
    this.enableContent = this.listSide.active = this.locSide.active = false;
    this.progressWin.startProgress();
};
canvas.app.location.View.prototype.doneFarming = function () {
    this.closeFarming();
    this.navigateToUrl();
    this.resize();
};
canvas.app.location.View.prototype.cancelFarming = function () {
    this.closeFarming();
    stopAction();
    canvas.app.location.model.inWaitingAnswer = true;
};
canvas.app.location.View.prototype.closeFarming = function () {
    if (this.progressWin) {
        this.progressWin.destroy();
        this.progressWin = null;
    }
    this.enableContent = this.locSide.active = true;
    if (canvas.app.location.model.TRANSITION_POSSIBLE) this.listSide.active = true;
    this.miniMapBtn.enabled = true;
};
canvas.app.location.View.prototype.itemOverHandler = function (event) {
    this.locSide.showOverOnAnim = event.params;
};
canvas.app.location.View.prototype.itemOutHandler = function (event) {
    this.locSide.showOutOnAnim = event.params;
};
canvas.app.location.View.prototype.timerDoneHandler = function () {
    if (this.progressWin && this.progressWin.parent == this.windowsContainer) {
        return;
    }
    this.listSide.active = true;
};
canvas.app.location.View.prototype.updateFronts = function () {
    var Conf = canvas.app.location.model;
    if (Conf.fronts.frontsEnabled) {
        this.addChild(this.frontsIcon);
        this.frontsIcon.update();
    } else if (this.frontsIcon.parent == this) this.removeChild(this.frontsIcon);
    if (Conf.fronts.frontsPanelEnabled) {
        this.addChild(this.frontsPanel);
        this.frontsPanel.update();
    } else if (this.frontsPanel.parent == this) this.removeChild(this.frontsPanel);
};
canvas.app.location.View.prototype.setLocSideListeners = function () {
    canvas.EventManager.addEventListener(canvas.app.location.Event.ANIM_CLICK, null, this.pointClickHandler, this);
    canvas.EventManager.addEventListener(canvas.app.location.Event.ANIM_OVER, null, this.animOverHandler, this);
    canvas.EventManager.addEventListener(canvas.app.location.Event.ANIM_OUT, null, this.animOutHandler, this);
    canvas.EventManager.addEventListener(canvas.app.location.Event.COMPLETE, null, this.completeLocHandler, this);
};
canvas.app.location.View.prototype.animOverHandler = function (event) {
    this.listSide.showOverOnItem = event.params;
};
canvas.app.location.View.prototype.animOutHandler = function (event) {
    this.listSide.showOverOnItem = null;
};
canvas.app.location.View.prototype.completeLocHandler = function (event) {
    var Conf = canvas.app.location.model;
    this.mapSide.updateFlag();
    Conf.OBJ_WORLD.locs[Conf.OBJ_TOWN.area_id] = event.params;
    this.removeLocs();
};
canvas.app.location.View.prototype.removeLocs = function () {
    var len = this.locsToRemove.length;
    if (len > 0) {
        for (var i = 0; i < len; i++) {
            this.removeIfExist(this.locsToRemove[i]);
            this.locsToRemove[i].stop();
        }
        this.locsToRemove = [];
    }
    this.interactiveChildren = true;
};
canvas.app.location.View.prototype.pointClickHandler = function (event) {
    var t = "";
    var id, href;
    var find_flag = null;
    var Conf = canvas.app.location.model;
    var index = Conf.blinkIds.indexOf(event.params.id);
    if (index >= 0) {
        Conf.blinkIds.splice(index, 1);
        this.listSide.list.update();
    }
    for (var prop in Conf.OBJ_TOWN.items) {
        id = Conf.OBJ_TOWN.items[prop].id;
        href = Conf.OBJ_TOWN.items[prop].href;
        t = Conf.OBJ_TOWN.items[prop].type;
        if (id == event.params.id && (!event.params.href || href == event.params.href)) {
            find_flag = Conf.OBJ_TOWN.items[prop];
            break;
        }
    }
    if (find_flag) {
        if (Conf.TRANSITION_POSSIBLE || find_flag.mode == Conf.MODE_NPC || find_flag.hide) {
            this.clickFunction(find_flag, t);
        }
    } else {
        this.clickFunction(find_flag, "");
    }
};
canvas.app.location.View.prototype.clickFunction = function (btn, t) {
    if (!btn) return;
    if (this.locSide.scroll && this.locSide.scroll.wasDragged) return;
    var Conf = canvas.app.location.model;
    if (Conf.inWaitingAnswer) return;
    Conf.transitionLnk = btn.href;
    Conf.waitRefresh = parseInt(btn.refresh);
    if (btn.confirm && Conf.actionConfirms) {
        if (this.popupWin == null || !this.popupWin.parent) {
            if (this.popupWin) {
                canvas.EventManager.removeAllListeners(canvas.app.location.Event.POPUP_WIN_CLICK_CANCEL);
                canvas.EventManager.removeAllListeners(canvas.app.location.Event.POPUP_WIN_CLICK_OK);
                this.popupWin.destroy();
            }
            this.popupWin = new canvas.app.location.view.PopupWin(btn.confirm_text, null, null, t, canvas.Translator.getText(2026), canvas.Translator.getText(2027));
            canvas.EventManager.addEventListener(canvas.app.location.Event.POPUP_WIN_CLICK_CANCEL, this.popupWin, this.popupWinClickCancelHandler, this);
            canvas.EventManager.addEventListener(canvas.app.location.Event.POPUP_WIN_CLICK_OK, this.popupWin, this.popupWinClickOkHandler, this);
            this.popupWin.position.set(this.locSide.x + Math.round((this.locSide.width - this.popupWin.width) / 2), Math.round((this.locSide.height - this.popupWin.height) / 2));
            this.windowsContainer.addChild(this.popupWin);
            this.enableContent = this.listSide.active = this.locSide.active = this.mapSide.active = false;
        }
    } else {
        this.navigateToUrl();
    }
};
canvas.app.location.View.prototype.popupWinClickOkHandler = function () {
    var Conf = canvas.app.location.model;
    this.popupWinClickCancelHandler();
    this.navigateToUrl();
    if (this.popupWin.checkBox) Conf.actionConfirms = !this.popupWin.checkBox.checked;
};
canvas.app.location.View.prototype.navigateToUrl = function () {
    var curTime = Date.now();
    var Conf = canvas.app.location.model;
    if (curTime - Conf.reqTime > 1e4 || !Conf.inWaitingAnswer) {
        var target = Conf.waitRefresh ? Conf.MAIN_HIDDEN : "_self";
        if (!Conf.waitRefresh) {
            canvas.Functions.navigateToURL(Conf.transitionLnk, target);
        } else {
            new canvas.utils.URLRequest().load(Conf.transitionLnk);
        }
        this.main.hintManager.hide();
        Conf.reqTime = Date.now();
        Conf.inWaitingAnswer = true;
    }
};
canvas.app.location.View.prototype.miniMapBtnDownHandler = function () {
    var Conf = canvas.app.location.model;
    this.mapSide.isVisible = !this.mapSide.visible;
    this.mapSide.build();
    this.miniMapHint.update(this.mapSide.visible ? Conf.STRINGS_ARR[Conf.S_CLOSE_MAP] : Conf.STRINGS_ARR[Conf.S_OPEN_MAP]);
    this.resize();
    this.popupsContainer.visible = !this.mapSide.visible;
};
canvas.app.location.View.prototype.awardClick = function () {
    var Conf = canvas.app.location.model;
    if (Conf.m_awardUrl) {
        canvas.Functions.navigateToURL(Conf.m_awardUrl, "_blank");
    }
};
canvas.app.location.View.prototype.frame = function () {
    var Conf = canvas.app.location.model;
};
canvas.app.location.View.prototype.timerHandler = function () {
    var Conf = canvas.app.location.model;
    var castPeriodLeftTime = Conf.castPeriodFinish - Math.round(Date.now() * 0.001);
    var newValue = castPeriodLeftTime > 0;
    var needResize = newValue != this.clocks.visible;
    this.clocks.visible = newValue;
    if (this.clocks.visible) this.clocks.update(castPeriodLeftTime);
    if (needResize) this.resize();
};
canvas.app.location.View.prototype.blinkTimerHandler = function () {
    var Conf = canvas.app.location.model;
    var str = null;
    try {
        str = getCookie("sess_location_blink");
    } catch (e) {}
    if (str == null || str == "") return;
    Conf.blinkIds = new Array();
    var a = str.split("|");
    for (var i = 0; i < a.length; i++) {
        if (Conf.blinkIds.indexOf(parseInt(a[i])) < 0) Conf.blinkIds.push(parseInt(a[i]));
    }
    this.locSide.location.update();
    this.listSide.list.update();
    deleteCookie("sess_location_blink");
};
canvas.app.location.View.prototype.onCloseBrillContainer = function () {
    this.removeChild(this.m_brContainer);
};
canvas.app.location.View.prototype.checkGreatBattleConfirm = function () {
    var Conf = canvas.app.location.model;
    if (Conf.par["fight_confirm"] == "1") {
        var msg = Conf.par["fight_confirm_msg"];
        var url = Conf.par["fight_url"];
        if (this.popupWin) {
            canvas.EventManager.removeAllListeners(canvas.app.location.Event.POPUP_WIN_CLICK_CANCEL);
            canvas.EventManager.removeAllListeners(canvas.app.location.Event.POPUP_WIN_CLICK_OK);
            this.popupWin.destroy();
        }
        this.popupWin = new canvas.app.location.view.PopupWin(null, msg, Conf.STRINGS_ARR[Conf.S_TO_BATTLE], "");
        canvas.EventManager.addEventListener(canvas.app.location.Event.POPUP_WIN_CLICK_OK, this.popupWin, this.popupWinClickOk2Handler, this);
        canvas.EventManager.addEventListener(canvas.app.location.Event.POPUP_WIN_CLICK_CANCEL, this.popupWin, this.popupWinClickCancelHandler, this);
        this.popupWin.position.set(this.locSide.x + Math.round((this.locSide._width - this.popupWin.width) / 2), Math.round((this.locSide._height - this.popupWin.height) / 2));
        this.windowsContainer.addChild(this.popupWin);
        this.enableContent = this.listSide.active = this.locSide.active = this.mapSide.active = false;
    }
};
canvas.app.location.View.prototype.popupWinClickOk2Handler = function () {
    var Conf = canvas.app.location.model;
    this.popupWinClickCancelHandler();
    canvas.Functions.navigateToURL(Conf.par["fight_url"], "_self");
};
canvas.app.location.View.prototype.popupWinClickCancelHandler = function () {
    var Conf = canvas.app.location.model;
    if (this.popupWin.parent) {
        this.windowsContainer.removeChild(this.popupWin);
        this.enableContent = this.locSide.active = this.listSide.partActive = this.mapSide.active = true;
        if (Conf.TRANSITION_POSSIBLE) this.listSide.active = true;
    }
    canvas.EventManager.removeAllListeners(canvas.app.location.Event.POPUP_WIN_CLICK_CANCEL);
    canvas.EventManager.removeAllListeners(canvas.app.location.Event.POPUP_WIN_CLICK_OK);
};
canvas.app.location.View.prototype.addListeners = function () {
    if (this.m_brBg) {
        this.m_brBg.click = this.onBrilliantBgClick.bind(this);
    }
};
canvas.app.location.View.prototype.removeListeners = function () {
    if (this.m_brBg) {
        this.m_brBg.click = null;
    }
};
canvas.app.location.View.prototype.onBrilliantBgClick = function () {
    var Conf = canvas.app.location.model;
    canvas.Functions.navigateToURL(Conf.brilliant_link, "_blank");
};
canvas.app.location.View.prototype.blinkButton = function (id, status) {
    var Conf = canvas.app.location.model;
    if (status) {
        if (Conf.blinkIds.indexOf(id) < 0) Conf.blinkIds.push(id);
    } else {
        if (Conf.blinkIds.indexOf(id) >= 0) Conf.blinkIds.splice(Conf.blinkIds.indexOf(id), 1);
    }
    this.locSide.location.update();
    this.listSide.list.update();
};
canvas.app.location.View.prototype.updateMagicMirror = function () {
    var Conf = canvas.app.location.model;
    this.locSide.magicMirrorButton.visible = Conf.magicMirrorEndTime > Conf.serverTime.getTime();
};
canvas.app.location.View.prototype.findLocation = function (matchWaypoints) {
    var Conf = canvas.app.location.model;
    var anim;
    var isLight = false;
    for (var i = 0; i < matchWaypoints.length; i++) {
        if (isLight) return;
        for (var prop in Conf.OBJ_TOWN.items) {
            anim = Conf.OBJ_TOWN.items[prop].anim;
            if (anim != null) {
                if (parseInt(matchWaypoints[i]) == parseInt(Conf.OBJ_TOWN.items[prop].loc_id)) {
                    anim.light = true;
                    isLight = true;
                    this.locSide.moveToAnim = anim;
                } else {
                    anim.light = false;
                }
            }
        }
    }
};
canvas.app.location.View.prototype.findClickButton = function (matchWaypoints) {
    var Conf = canvas.app.location.model;
    var btn = null;
    var item = null;
    var t = "";
    lnk: for (var i = 0; i < matchWaypoints.length; i++) {
        for (var prop in Conf.OBJ_TOWN.items) {
            btn = Conf.OBJ_TOWN.items[prop].btn;
            t = Conf.OBJ_TOWN.items[prop].type;
            if (btn != null) {
                if (parseInt(matchWaypoints[i]) == Conf.OBJ_TOWN.items[prop].loc_id) {
                    item = Conf.OBJ_TOWN.items[prop];
                    break lnk;
                }
            }
            btn = null;
        }
    }
    if (item != null) {
        this.clickFunction(item, t);
    }
};
canvas.app.location.View.prototype.showConfirm = function (headerText, text, yesTitle, noTitle, actionFunc, actionFuncParams, context) {
    if (!this.confirmWindow) {
        this.confirmWindow = new canvas.app.view.window.ConfirmWindowOld();
    }
    this.confirmWindow.update(headerText, text, yesTitle, noTitle, actionFunc, actionFuncParams, context);
    this.main.windowsManager.openWindow(this.confirmWindow);
    this.main.hintManager.hide();
};
canvas.app.location.View.prototype.showEnterBattleConfirm = function (title, locationID, time) {
    var date = new Date(time);
    this.showConfirm(
        canvas.Translator.getText(714),
        canvas.Translator.getText(715) +
        " <b><font color='#990000'>" +
        title +
        "</font></b>?<br/><br/>" +
        canvas.Translator.getText(716) +
        ": <b><font color='#990000'>" +
        canvas.Functions.setNumberLen(date.getHours()) +
        ":" +
        canvas.Functions.setNumberLen(date.getMinutes()) +
        ":" +
        canvas.Functions.setNumberLen(date.getSeconds()) +
        "</font></b>.",
        canvas.Translator.getText(712),
        canvas.Translator.getText(2019),
        this.main.joinFrontsBattle,
        [locationID],
        this.main
    );
};
canvas.app.location.View.prototype.showStartBattleConfirm = function (title, locationID, time) {
    var date = new Date(time);
    this.showConfirm(
        canvas.Translator.getText(714),
        canvas.Translator.getText(720) +
        " <b><font color='#990000'>" +
        title +
        "</font></b>?<br/><br/>" +
        canvas.Translator.getText(716) +
        ": <b><font color='#990000'>" +
        canvas.Functions.setNumberLen(date.getHours()) +
        ":" +
        canvas.Functions.setNumberLen(date.getMinutes()) +
        ":" +
        canvas.Functions.setNumberLen(date.getSeconds()) +
        "</font></b>.",
        canvas.Translator.getText(707),
        canvas.Translator.getText(2019),
        this.main.startFrontsBattle,
        null,
        this.main
    );
};
canvas.app.location.Parser = function () {};
canvas.app.location.Parser.prototype.extractBg = function (str) {
    if (!str) return "";
    var a = str.split(".")[0].split("/");
    return a[a.length - 1];
};
canvas.app.location.Parser.prototype.unpackTownConfObject = function (data) {
    var Conf = canvas.app.location.model;
    var a1;
    var a2;
    var i1;
    var i2;
    var messages = {};
    var isNewTown = false;
    var fronts;
    var str;
    var str2;
    var obj;
    var obj2;
    for (str in data) {
        obj = data[str];
        switch (str) {
            case "town":
                if (obj.bg && obj.title) {
                    var arr_1 = String(obj.bg).split("/");
                    var arr_2 = String(arr_1[arr_1.length - 1]).split("?");
                }
                if (Conf.OBJ_WORLD.conf[obj.area_id] != null) {
                    Conf.OBJ_TOWN = Conf.OBJ_WORLD.conf[obj.area_id];
                } else {
                    Conf.OBJ_TOWN = { items: {} };
                    isNewTown = true;
                }
                if (Conf.OBJ_TOWN.area_id != obj.area_id) Conf.actionConfirms = true;
                Conf.OBJ_TOWN.area_id = Conf.FlagLocation = obj.area_id;
                Conf.OBJ_TOWN.bg = this.extractBg(obj.bg);
                Conf.OBJ_TOWN.bg_mid = obj.bg_mid == undefined ? "" : this.extractBg(obj.bg_mid);
                Conf.OBJ_TOWN.swf_file = String(arr_2[0]);
                Conf.OBJ_TOWN.title = obj.title != null ? obj.title : "---";
                Conf.OBJ_TOWN.sky_type = obj.sky_type != null ? this.extractBg(obj.sky_type) : "";
                Conf.OBJ_TOWN.ftime = obj.ftime != null ? obj.ftime : "0";
                Conf.OBJ_TOWN.ftime_max = obj.ftime_max != null ? parseInt(obj.ftime_max) : "0";
                Conf.OBJ_TOWN.weather = obj.weather != null ? obj.weather : "0";
                Conf.OBJ_TOWN.curtime = obj.curtime != null ? obj.curtime : Math.round(Date.now() / 1e3);
                Conf.OBJ_TOWN.dy = obj.dy != null ? parseInt(obj.dy) : 0;
                Conf.WITH_MAP = obj.show_minimap;
                Conf.castPeriodFinish = obj.chaotic_fight_time != null ? Math.round(Date.now() * 0.001) + parseInt(obj.chaotic_fight_time) : 0;
                if (obj.fronts != null) {
                    fronts = parseInt(obj.fronts);
                    switch (fronts) {
                        case 1:
                            Conf.fronts.frontsEnabled = true;
                            Conf.fronts.frontsPanelEnabled = false;
                            break;
                        case 2:
                            Conf.fronts.frontsEnabled = true;
                            Conf.fronts.frontsPanelEnabled = true;
                            break;
                        default:
                            Conf.fronts.frontsEnabled = false;
                            Conf.fronts.frontsPanelEnabled = false;
                    }
                } else {
                    Conf.fronts.frontsEnabled = false;
                    Conf.fronts.frontsPanelEnabled = false;
                }
                var loc_uid = 0;
                var locName;
                if (obj.items)
                    for (str2 in obj.items) {
                        if (obj.items[str2].id != null) {
                            if (isNewTown) {
                                locName = obj.items[str2].name != null ? obj.items[str2].name : "";
                                Conf.OBJ_TOWN.items[loc_uid] = {
                                    id: obj.items[str2].id != null ? obj.items[str2].id : "---",
                                    name: locName,
                                    confirm: obj.items[str2].confirm != null ? String(obj.items[str2].confirm) : obj.items[str2].confirm_text != null ? 1 : 0,
                                    confirm_text: obj.items[str2].confirm_text != null ? String(obj.items[str2].confirm_text) : null,
                                    mode: obj.items[str2].mode != null ? "mode_" + obj.items[str2].mode : Conf.MODE_AREA,
                                    href: obj.items[str2].link_href ? obj.items[str2].link_href : obj.items[str2].href ? obj.items[str2].href : "",
                                    loc_id: obj.items[str2].loc_id != null ? obj.items[str2].loc_id : "-100",
                                    type: obj.items[str2].type != null ? obj.items[str2].type : Conf.TYPE_AREA,
                                    farm: obj.items[str2].farm != null ? obj.items[str2].farm : Conf.WITHOUT_FARM,
                                    refresh: obj.items[str2].hidden != null ? obj.items[str2].hidden : "0",
                                    ltime: obj.items[str2].ltime != null ? obj.items[str2].ltime : 0,
                                    dtime: obj.items[str2].dtime != null ? obj.items[str2].dtime : 0,
                                    anim_x: 0,
                                    anim_y: 0,
                                    hide: locName == "" ? true : obj.items[str2].hide != null && obj.items[str2].hide == "1",
                                };
                            } else {
                                Conf.OBJ_TOWN.items[loc_uid].ltime = obj.items[str2].ltime != null ? obj.items[str2].ltime : 0;
                                Conf.OBJ_TOWN.items[loc_uid].dtime = obj.items[str2].dtime != null ? obj.items[str2].dtime : 0;
                            }
                            loc_uid++;
                        }
                    }
                break;
            case "add":
                a2 = obj;
                if (a2)
                    for (i2 = 0; i2 < a2.length; i2++) {
                        if (a2[i2].id != null && a2[i2].type != null && a2[i2].x != null && a2[i2].y != null && a2[i2].text != null) {
                            messages[a2[i2].id] = { type: a2[i2].type, x: a2[i2].x, y: a2[i2].y, text: a2[i2].text };
                        }
                    }
                break;
        }
    }
    Conf.OBJ_WORLD.conf[Conf.OBJ_TOWN.area_id] = Conf.OBJ_TOWN;
};
canvas.app.location.Parser.prototype.unpackNavConf = function (doc) {
    var Conf = canvas.app.location.model;
    var a1;
    var a2;
    var i1;
    var i2;
    a1 = doc.childNodes;
    for (i1 = 0; i1 < a1.length; i1++) {
        if (a1[i1].nodeName == "locations") {
            a2 = a1[i1].childNodes;
            for (i2 = 0; i2 < a2.length; i2++) {
                if (a2[i2].nodeName == "loc") {
                    if (a2[i2].attributes.id != null && a2[i2].attributes.verges != null) {
                        var fl = true;
                        if (a2[i2].attributes.race != null) {
                            if (a2[i2].attributes.race.value != Conf.mRace) {
                                fl = false;
                            }
                        }
                        if (fl) {
                            var ar2 = [];
                            var ar1 = a2[i2].attributes.verges.value.split("|");
                            var pair = [];
                            for (var i0 = 0; i0 < ar1.length; i0++) {
                                pair = ar1[i0].split(",");
                                if (pair.length == 2) {
                                    ar2[i0] = [pair[0], pair[1]];
                                }
                            }
                            Conf.OBJ_LOCVERGE[a2[i2].attributes.id.value] = ar2;
                            Conf.NUM_LOCATIONS++;
                        }
                    }
                }
            }
        }
    }
};
canvas.app.location.Parser.prototype.unpackEventConf = function (xml_data) {
    var Conf = canvas.app.location.model;
    var doc = new DOMParser().parseFromString(xml_data, "text/xml");
    var a1;
    var a2;
    var i1;
    var i2;
    var obj;
    var dEvent;
    var date = new Date();
    Conf.OBJ_EVENT = { tasks: {} };
    a1 = doc.childNodes;
    for (i1 = 0; i1 < a1.length; i1++) {
        if (a1[i1].nodeName == "event") {
            if (a1[i1].attributes.id != null && a1[i1].attributes.title != null && a1[i1].attributes.point_title != null) {
                Conf.OBJ_EVENT = { tasks: {} };
                Conf.OBJ_EVENT.id = a1[i1].attributes.id;
                Conf.OBJ_EVENT.title = a1[i1].attributes.title;
                Conf.OBJ_EVENT.point_title = a1[i1].attributes.point_title;
            }
            a2 = a1[i1].childNodes;
            var event_uid = 0;
            for (i2 = 0; i2 < a2.length; i2++) {
                if (a2[i2].nodeName == "task") {
                    Conf.OBJ_EVENT.tasks[event_uid] = {
                        title: a2[i2].attributes.title != null ? a2[i2].attributes.title : "---",
                        max_value: a2[i2].attributes.max_value != null ? a2[i2].attributes.max_value : 0,
                        max_user_value: a2[i2].attributes.max_user_value != null ? a2[i2].attributes.max_user_value : 0,
                        user_value: a2[i2].attributes.user_value != null ? a2[i2].attributes.user_value : 0,
                        value: a2[i2].attributes.value != null ? a2[i2].attributes.value : 0,
                        noUserValue: a2[i2].attributes.no_user_value == "1",
                    };
                    event_uid++;
                }
            }
        }
        if (a1[i1].nodeName == "global_npcs") {
            Conf.NPCEvents = new Array();
            var len = a1[i1].childNodes.length;
            for (var j = 0; j < len; j++) {
                obj = a1[i1].childNodes[j];
                if (obj.nodeName == "npc") {
                    dEvent = new canvas.data.location.DEvent();
                    dEvent.description = obj.firstChild.nodeValue;
                    dEvent.picture = obj.attributes["picture"];
                    dEvent.title = obj.attributes["title"];
                    dEvent.url = obj.attributes["url"];
                    dEvent.finishTime = Math.round(date.getTime() * 0.001) + parseInt(obj.attributes["time_left"]);
                    Conf.NPCEvents.push(dEvent);
                }
            }
        }
    }
};
canvas.app.location.Parser.prototype.unpackEventConfObject = function (data) {
    var Conf = canvas.app.location.model;
    var a1;
    var a2;
    var i1;
    var i2;
    var obj;
    var dEvent;
    var date = new Date();
    var str;
    var str2;
    var key;
    Conf.OBJ_EVENT = { tasks: {} };
    for (str in data) {
        if (str == "event") {
            if (data[str].id != null && data[str].title != null && data[str].point_title != null) {
                Conf.OBJ_EVENT = { tasks: {} };
                Conf.OBJ_EVENT.id = data[str].id;
                Conf.OBJ_EVENT.title = data[str].title;
                Conf.OBJ_EVENT.point_title = data[str].point_title;
            }
            var event_uid = 0;
            if (data[str].task) {
                for (key in data[str].task) {
                    obj = data[str].task[key];
                    Conf.OBJ_EVENT.tasks[event_uid] = {
                        title: obj.title != null ? obj.title : "---",
                        max_value: obj.max_value != null ? obj.max_value : 0,
                        max_user_value: obj.max_user_value != null ? obj.max_user_value : 0,
                        user_value: obj.user_value != null ? obj.user_value : 0,
                        value: obj.value != null ? obj.value : 0,
                        noUserValue: obj.no_user_value == "1",
                    };
                    event_uid++;
                }
            }
        }
        if (str == "global_npcs") {
            Conf.NPCEvents = new Array();
            for (key in data[str]) {
                obj = data[str][key];
                dEvent = new canvas.data.location.DEvent();
                dEvent.description = obj.description;
                dEvent.picture = obj.picture;
                dEvent.title = obj.title;
                dEvent.url = obj.url;
                dEvent.finishTime = Math.round(date.getTime() * 0.001) + parseInt(obj.time_left);
                Conf.NPCEvents.push(dEvent);
            }
        }
    }
};
canvas.app.location.Parser.prototype.unpackFightConf = function (xml_data) {
    var Conf = canvas.app.location.model;
    var doc = new DOMParser().parseFromString(xml_data, "text/xml");
    var a1;
    var a2;
    var i1;
    var i2;
    a1 = doc.childNodes;
    Conf.NUM_BIG_FIGHT = 0;
    for (i1 = 0; i1 < a1.length; i1++) {
        if (a1[i1].nodeName == "fight") {
            if (a1[i1].attributes.in_process != null) Conf.NUM_BIG_FIGHT = a1[i1].attributes.in_process;
        }
    }
};
canvas.app.location.Parser.prototype.instanceToLocation = function (data, server_time) {
    var obj = data;
    var result = new Object();
    var obj2;
    result.area_id = obj.location.area_id;
    result.title = obj.location.title;
    result.sky_type = obj.location.sky_type;
    result.bg = obj.location.swf;
    result.bg_mid = obj.location.swf_mid;
    result.ftime = obj.area.ftime;
    result.ftime_max = obj.area.ftime_max;
    result.weather = "0";
    result.show_minimap = false;
    result.fronts = 0;
    result.dy = "0";
    result.is_copy_location_id = "0";
    result.code = obj.location.code;
    result.curtime = server_time;
    result.items = new Object();
    for (var key in obj.items) {
        obj2 = obj.items[key];
        result.items[obj2.id] = { id: obj2.id, name: obj2.name, building_type: obj2.building_type, type: "instance", href: obj2.href, link_href: obj2.link_href, confirm: obj2.confirm, confirm_text: obj2.confirm_text, mode: "area" };
    }
    return { town: result };
};
canvas.app.location.Finder = function () {
    this.p1 = 0;
    this.p2 = 0;
    this.p1_tmp = 0;
    this.p2_tmp = 0;
    this.arr_tmp = null;
    this.arr_trash = null;
    this.cache_cont = null;
    this.arr_loc = null;
};
canvas.app.location.Finder.prototype.find = function (start_loc_id, target_loc_id) {
    canvas.app.location.log("Finder: start = " + start_loc_id + ", target = " + target_loc_id, 10551296);
    var Conf = canvas.app.location.model;
    this.p1 = start_loc_id;
    this.p2 = target_loc_id;
    if (String(this.p1) == String(this.p2)) {
        return [0];
    }
    this.p2_tmp = this.p2;
    this.p1_tmp = this.p2_tmp;
    this.arr_tmp = [];
    this.arr_trash = [];
    this.cache_cont = {};
    this.arr_loc = [];
    this.arr_tmp.push(this.p1);
    this.arr_trash = this.arr_trash.concat(this.arr_tmp);
    var k = 0;
    var len = Conf.NUM_LOCATIONS;
    if (len <= 0) return [0];
    link: while (k < len) {
        k++;
        var arr2 = [];
        for (var i = this.arr_tmp.length; i--; ) {
            var arr1 = [];
            arr1 = this.getNearLoc(this.arr_tmp[i]);
            this.clearArr(arr1, this.arr_trash);
            this.cache_cont[this.arr_tmp[i]] = arr1;
            if (this.seach(arr1, this.p2)) {
                break link;
            }
            this.arr_trash = this.arr_trash.concat(arr1);
            arr2 = arr2.concat(arr1);
        }
        this.arr_tmp = [];
        this.arr_tmp = this.arr_tmp.concat(arr2);
        if (this.arr_tmp.length == 0) {
            return [-1];
        }
    }
    this.arr_loc.push(this.p1_tmp);
    while (this.p1_tmp != this.p1) {
        this.p2_tmp = this.getNextCacheLoc(this.p2_tmp);
        this.p1_tmp = this.p2_tmp;
        this.arr_loc.push(this.p1_tmp);
    }
    return this.arr_loc;
};
canvas.app.location.Finder.prototype.getNextCacheLoc = function (loc_id) {
    for (var prop in this.cache_cont) {
        var sp = this.cache_cont[prop];
        for (var i = sp.length; i--; ) {
            if (parseInt(sp[i]) == loc_id) {
                return parseInt(prop);
            }
        }
    }
    return 1;
};
canvas.app.location.Finder.prototype.getNearLoc = function (loc_id) {
    var Conf = canvas.app.location.model;
    var out = [];
    for (var prop in Conf.OBJ_LOCVERGE) {
        var sp = Conf.OBJ_LOCVERGE[prop];
        link: for (var i = sp.length; i--; ) {
            for (var j = sp[i].length; j--; ) {
                if (sp[i][j] == loc_id) {
                    out.push(prop);
                    break link;
                }
            }
        }
    }
    return out;
};
canvas.app.location.Finder.prototype.seach = function (arr, loc_id) {
    for (var i = arr.length; i--; ) {
        if (arr[i] == loc_id) {
            return true;
        }
    }
    return false;
};
canvas.app.location.Finder.prototype.clearArr = function (arr, trash) {
    for (var i = trash.length; i--; ) {
        for (var j = arr.length; j--; ) {
            if (arr[j] == trash[i]) {
                arr.splice(j, 1);
                j++;
            }
        }
    }
};
canvas.app.location.view.LocationView = function (name) {
    canvas.px.Container.call(this);
    this.name = name;
    this.buttons = {};
    this.anims = {};
    this.movies = [];
    this.ready = false;
    this.url = canvas.Config.areasPath + name + "/" + name;
    this.back = new canvas.ui.Image(canvas.Config.areasPath + name + ".png");
    this.addChild(this.back);
    this.tmpIndex = 0;
    if (this.back.ready) {
        this._preInit();
    } else {
        canvas.EventManager.addEventListener(canvas.ui.ImageEvent.EVENT_LOADED, this.back, this._preInit, this);
    }
};
canvas.app.location.view.LocationView.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.location.view.LocationView.prototype._preInit = function () {
    canvas.EventManager.removeEventListener(canvas.ui.ImageEvent.EVENT_LOADED, this.back, this.preInit, this);
    this.tmpIndex = 0;
    canvas.EventManager.addEventListener(canvas.app.location.Event.ENTER_FRAME, null, this.frameHandler, this);
};
canvas.app.location.view.LocationView.prototype.frameHandler = function () {
    if (this.tmpIndex == 2) {
        canvas.EventManager.removeEventListener(canvas.app.location.Event.ENTER_FRAME, null, this.frameHandler, this);
        this.preInit();
    } else {
        this.tmpIndex++;
    }
};
canvas.app.location.view.LocationView.prototype.preInit = function () {
    if (!canvas.ResourceLoader.get(this.url + ".mci")) {
        canvas.ResourceLoader.add([this.url + ".mci", this.url + ".json"]);
        canvas.EventManager.addEventListener(canvas.ResourceLoader.EVENT_COMPLETE, null, this.init, this);
    } else {
        this.init();
    }
};
canvas.app.location.view.LocationView.prototype.init = function () {
    canvas.EventManager.removeEventListener(canvas.ResourceLoader.EVENT_COMPLETE, null, this.init, this);
    this.data = canvas.ResourceLoader.get(this.url + ".mci").data;
    this.atlas = canvas.ResourceLoader.get(this.url + ".json").textures;
    var len = this.data[canvas.px.MovieClipProps.children].length;
    var child;
    var mc;
    var gr;
    for (var i = 0; i < len; i++) {
        mc = null;
        child = this.data[canvas.px.MovieClipProps.children][i];
        if (child.mc) {
            mc = new canvas.px.MovieClipChild(child.mc, this.atlas, child.name + "/", null);
            mc.frameEvent = canvas.app.location.Event.ENTER_FRAME;
            mc.play();
        } else if (child.polygon) {
            mc = new canvas.px.Container();
            gr = new canvas.px.Polygon(child.polygon);
            mc.addChild(gr);
            mc.button = gr;
            gr.interactive = true;
        } else {
            mc = new canvas.px.Sprite(this.atlas[child.name + ".png"]);
        }
        if (child.name.substr(0, 4) == "but_") {
            if (!this.anims[child.name.substr(4)]) {
                mc = new canvas.app.location.view.elements.LocationAnim(mc);
                this.anims[child.name.substr(4)] = mc;
                mc.name = child.name.substr(4);
            } else {
                mc = null;
            }
        } else if (child.name.substr(0, 4) == "hit_") {
            if (!this.buttons[child.name.substr(8)]) {
                this.buttons[child.name.substr(8)] = mc;
                mc.interactive = true;
                mc.buttonMode = true;
                mc.mouseover = this.overHandler.bind(this);
                mc.mouseout = this.outHandler.bind(this);
                mc.click = this.clickHandler.bind(this);
                mc.name = mc.id = child.name.substr(8);
            } else {
                mc = null;
            }
        } else if (child.mc) {
            this.movies.push(mc);
        }
        if (mc) {
            this.addChild(mc);
            mc.position.set(
                Math.round(child.x) * (child[canvas.px.MovieClipProps.matrix] && child[canvas.px.MovieClipProps.matrix].a < 0 ? child[canvas.px.MovieClipProps.matrix].a : 1),
                Math.round(child.y) * (child[canvas.px.MovieClipProps.matrix] && child[canvas.px.MovieClipProps.matrix].d < 0 ? child[canvas.px.MovieClipProps.matrix].d : 1)
            );
            if (child[canvas.px.MovieClipProps.matrix]) {
                mc.scale.set(child[canvas.px.MovieClipProps.matrix].a < 0 && mc.x > 0 ? child[canvas.px.MovieClipProps.matrix].a : 1, child[canvas.px.MovieClipProps.matrix].d < 0 && mc.y > 0 ? child[canvas.px.MovieClipProps.matrix].d : 1);
                if (child.x2 == 1) {
                    mc.scale.set(2, 2);
                }
            }
        }
    }
    var key;
    for (var key in this.buttons) {
        if (!this.anims[key] && !this.movies[key]) {
            this.removeChild(this.buttons[key]);
            this.buttons[key].destroy({ children: true });
            this.buttons[key] = null;
        }
    }
    this.ready = true;
    canvas.EventManager.dispatchEvent(canvas.app.location.Event.LOCATION_READY);
};
canvas.app.location.view.LocationView.prototype.overHandler = function (e) {
    if (!e.currentTarget || !e.currentTarget.name) return;
    var anim = this.anims[e.currentTarget.name];
    if (anim) {
        anim.show();
        canvas.EventManager.dispatchEvent(canvas.app.location.Event.ANIM_OVER, null, e.currentTarget);
    }
};
canvas.app.location.view.LocationView.prototype.outHandler = function (e) {
    if (!e.currentTarget || !e.currentTarget.name) return;
    var anim = this.anims[e.currentTarget.name];
    if (anim) {
        anim.hide();
        canvas.EventManager.dispatchEvent(canvas.app.location.Event.ANIM_OUT, null, e.currentTarget);
    }
};
canvas.app.location.view.LocationView.prototype.clickHandler = function (e) {
    canvas.EventManager.dispatchEvent(canvas.app.location.Event.ANIM_CLICK, null, e.currentTarget);
};
canvas.app.location.view.LocationView.prototype.start = function () {
    for (var i = 0; i < this.movies.length; i++) {
        this.movies[i].play();
    }
};
canvas.app.location.view.LocationView.prototype.stop = function () {
    for (var i = 0; i < this.movies.length; i++) {
        this.movies[i].stop();
    }
};
canvas.app.location.view.LocationView.prototype.destroy = function () {
    for (var key in this.buttons) {
        this.buttons[key].mouseover = null;
        this.buttons[key].mouseout = null;
        this.buttons[key].click = null;
    }
    canvas.px.Container.prototype.destroy.apply(this, [{ children: true }]);
};
canvas.app.location.view.PopupWin = function (msg, bodyText, okText, loc_type, checkBoxTitle, checkBoxHint) {
    canvas.px.Container.call(this);
    this.interactive = true;
    var Conf = canvas.app.location.model;
    this.bg = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", checkBoxTitle ? "popup_win2" : "popup_win"));
    this.caption_tf = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD, 15660470, 100, 20, "center");
    this.caption_tf.text = Conf.STRINGS_ARR[Conf.S_CONFIRMATION];
    this.info_tf = new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_11_BOLD, canvas.Const.FONT_TAHOMA_11_BOLD, 9722697, this.bg.width - 40, 50, "center", "middle");
    if (bodyText) {
        this.info_tf.text = bodyText;
    } else {
        if (loc_type == "area") {
            this.info_tf.text = !msg ? Conf.STRINGS_ARR[Conf.S_ARE_YOU_ASSURED] : msg;
        } else if (loc_type == "instance") {
            this.info_tf.text = !msg ? Conf.STRINGS_ARR[Conf.S_ARE_YOU_ASSURED] : msg;
        } else {
            this.info_tf.text = msg ? loc_type : Conf.STRINGS_ARR[Conf.S_ARE_YOU_ASSURED];
        }
    }
    canvas.EventManager.addEventListener(canvas.ui.HtmlTextEvent.EVENT_LINK, this.info_tf, this.info_tfLinkHandler, this);
    this.but_ok = new canvas.app.view.OldButton(1133569);
    this.but_ok.setTitle(okText ? okText : Conf.STRINGS_ARR[Conf.S_YES]);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.but_ok, this.confirmHandler, this);
    this.but_cancel = new canvas.app.view.OldButton(12124160);
    this.but_cancel.setTitle(Conf.STRINGS_ARR[Conf.S_CANCEL]);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.but_cancel, this.hideWinHandler, this);
    this.addChild(this.bg);
    this.addChild(this.caption_tf);
    this.addChild(this.info_tf);
    this.addChild(this.but_ok);
    this.addChild(this.but_cancel);
    this.caption_tf.position.set(Math.round((this.width - this.caption_tf.width) / 2), 2);
    this.info_tf.position.set(Math.round((this.width - this.info_tf._width) / 2) - 2, 20);
    if (bodyText) {
        this.but_ok.x = Math.round(this.bg.width / 2 - this.but_ok.width + 27);
        this.but_ok.y = this.height - this.but_ok.height - 15;
        this.but_cancel.x = Math.round(this.bg.width / 2 - 27);
        this.but_cancel.y = this.height - this.but_cancel.height - 15;
    } else {
        this.but_ok.x = Math.round((this.width - this.but_ok.width) / 2);
        this.but_ok.y = 67;
        this.but_cancel.x = Math.round((this.width - this.but_cancel.width) / 2);
        this.but_cancel.y = 87;
    }
    this.info_tf.setSize(0, this.but_ok.x - 20);
    if (checkBoxTitle) {
        this.checkBox = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "checker_back"), null, new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "checker_front")));
        var tf = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD, 9722697, 150, 20, "center", "top", 0, 0);
        tf.text = checkBoxTitle;
        this.checkBox.sprite.addChild(tf);
        tf.position.set(30, 3);
        this.addChild(this.checkBox);
        this.checkBox.y = 102;
        this.checkBox.x = Math.round((this.bg.width - this.checkBox.width) * 0.5);
        this.but_ok.y -= 15;
        this.but_cancel.y -= 15;
        if (checkBoxHint) {
            this.hint = new canvas.app.view.MappingHint(checkBoxHint);
            canvas.EventManager.dispatchEvent(canvas.app.location.Event.HINT_ADD, null, { target: this.checkBox, params: new canvas.utils.HintParams(this.hint) });
        }
    }
};
canvas.app.location.view.PopupWin.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.location.view.PopupWin.prototype.confirmHandler = function () {
    canvas.EventManager.dispatchEvent(canvas.app.location.Event.POPUP_WIN_CLICK_OK, this);
};
canvas.app.location.view.PopupWin.prototype.hideWinHandler = function () {
    canvas.EventManager.dispatchEvent(canvas.app.location.Event.POPUP_WIN_CLICK_CANCEL, this);
};
canvas.app.location.view.PopupWin.prototype.info_tfLinkHandler = function (event) {
    ExternalInterface.call(event.params);
};
canvas.app.location.view.PopupWin.prototype.destroy = function () {
    if (this.parent) this.parent.removeChild(this);
    if (this.checkBox) canvas.EventManager.dispatchEvent(canvas.app.location.Event.HINT_REMOVE, null, { target: this.checkBox });
    canvas.EventManager.removeEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.but_ok, this.confirmHandler, this);
    canvas.EventManager.removeEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.but_cancel, this.hideWinHandler, this);
    canvas.px.Container.prototype.destroy.apply(this, [{ children: true }]);
};
canvas.app.location.view.MapSide = function () {
    Object.defineProperty(this, "_width", {
        get: function () {
            return this.curls.width;
        },
        set: function (value) {
            this.resize(value);
        },
    });
    Object.defineProperty(this, "_height", {
        get: function () {
            return this.curls.height;
        },
        set: function (value) {
            this.hh = value;
            this.resize(this.ww);
        },
    });
    Object.defineProperty(this, "isVisible", {
        get: function () {
            return false;
        },
        set: function (vis) {
            this.visible = vis;
            canvas.app.location.model.localStorage.set("MapSide", vis ? "1" : "0");
        },
    });
    Object.defineProperty(this, "active", {
        get: function () {
            return false;
        },
        set: function (fl) {
            if (fl) this.activate();
            else this.deactivate();
        },
    });
    canvas.px.Container.call(this);
    var Conf = canvas.app.location.model;
    this.isOvered = false;
    this.hh = Conf.MIN_STAGE_HEIGHT - 8;
    this.curls = new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "curl"), 95, 130, 95, 130);

    /*
    this.nine_back = new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "curl"), 95, 130, 95, 130);
    this.curls = this.addChild(this.nine_back);
    this.back_texture = canvas.ResourceLoader.getImage("ui", "curl").clone();
    this.back_texture.frame = new canvas.px.Rectangle(this.back_texture.orig.x + 95, this.back_texture.orig.y + 130, 20, 20);
    this.back2 = this.addChild(new canvas.px.TilingSprite(this.back_texture, 20, 20));
    this.back2.position.set(18, 41);

     */

    this.curls.height = this.hh;
    this.caption = new canvas.ui.Text(Conf.IsBold ? canvas.Const.FONT_TAHOMA_11_BOLD : canvas.Const.FONT_TAHOMA_11, 16769466, 100, 20, "center");
    this.caption.text = Conf.STRINGS_ARR[Conf.S_MAP];
    this.caption.y = -4;
    this.header = new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "header"), 31, 0, 31, 0);
    this.header.width = this.caption.field.textWidth + 70;
    this.header.y = -6;
    this.miniMap = new canvas.app.location.view.MiniMap();
    canvas.EventManager.addEventListener(canvas.app.location.Event.WAY_OVER, this.miniMap, this.wayOverHandler, this);
    canvas.EventManager.addEventListener(canvas.app.location.Event.WAY_OUT, this.miniMap, this.wayOutHandler, this);
    canvas.EventManager.addEventListener(canvas.app.location.Event.WAY_CLICK, this.miniMap, this.wayClickHandler, this);
    this.miniMap.x = -3;
    this.mapZoom = new canvas.app.location.view.elements.MapZoom();
    canvas.EventManager.addEventListener(canvas.app.location.Event.REFRESH_MAP, this.mapZoom, this.refreshMapHandler, this);
    canvas.EventManager.addEventListener(canvas.app.location.Event.ZOOM_IN, this.mapZoom, this.zoomInMapHandler, this);
    canvas.EventManager.addEventListener(canvas.app.location.Event.ZOOM_OUT, this.mapZoom, this.zoomOutMapHandler, this);
    this.mapZoom.y = this.hh - this.mapZoom.height;
    this.mapMask = new canvas.px.Mask(Conf.MAP_WIDTH, this.hh - 10);
    this.miniMap.mask = this.mapMask;
    this.addChild(this.miniMap);
    this.addChild(this.curls);
    //this.addChild(this.back2);
    this.addChild(this.header);
    this.addChild(this.caption);
    this.addChild(this.mapZoom);
    this.addChild(this.mapMask);
    this.interactive = true;
    this.mouseover = this.rollOverHandler.bind(this);
    this.mouseout = this.rollOutHandler.bind(this);
};
canvas.app.location.view.MapSide.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.location.view.MapSide.prototype.resize = function (ww) {
    var Conf = canvas.app.location.model;
    this.ww = ww;
    this.curls.width = this.ww;
    this.curls.height = this.hh;
    this.caption.x = Math.round((ww - this.caption._width) / 2) + 1;
    this.header.x = Math.round((ww - this.header.width) / 2);
    this.mapZoom.y = this.hh - this.mapZoom.height;
    this.mapMask.setSize(Conf.MAP_WIDTH, this.hh - 10);
    this.miniMap.resizeMap();
};
canvas.app.location.view.MapSide.prototype.updateFlag = function () {
    this.miniMap.updateFlag();
};
canvas.app.location.view.MapSide.prototype.build = function () {
    this.miniMap.build();
};
canvas.app.location.view.MapSide.prototype.wayOverHandler = function (event) {
    canvas.EventManager.dispatchEvent(canvas.app.location.Event.WAY_OVER, this, event.params);
};
canvas.app.location.view.MapSide.prototype.wayOutHandler = function () {
    canvas.EventManager.dispatchEvent(canvas.app.location.Event.WAY_OUT, this);
};
canvas.app.location.view.MapSide.prototype.wayClickHandler = function (event) {
    canvas.EventManager.dispatchEvent(canvas.app.location.Event.WAY_CLICK, this, event.params);
};
canvas.app.location.view.MapSide.prototype.refreshMapHandler = function () {
    this.miniMap.refreshMap();
};
canvas.app.location.view.MapSide.prototype.zoomInMapHandler = function () {
    this.miniMap.zoomMode(2);
    this.mapZoom.zoomMode(2);
};
canvas.app.location.view.MapSide.prototype.zoomOutMapHandler = function () {
    this.miniMap.zoomMode(1);
    this.mapZoom.zoomMode(1);
};
canvas.app.location.view.MapSide.prototype.rollOverHandler = function () {
    this.isOvered = true;
};
canvas.app.location.view.MapSide.prototype.rollOutHandler = function () {
    this.isOvered = false;
};
canvas.app.location.view.MapSide.prototype.activate = function () {
    this.miniMap.filters = [];
};
canvas.app.location.view.MapSide.prototype.deactivate = function () {
    this.miniMap.filters = [canvas.Functions.getGreyScale(0.5)];
};
canvas.app.location.view.MiniMap = function () {
    canvas.px.Container.call(this);
    this.isBuilded = false;
};
canvas.app.location.view.MiniMap.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.location.view.MiniMap.prototype.updateFlag = function () {
    if (this.map && this.isBuilded && this.map["fastUpdateFlag"]) {
        this.map["fastUpdateFlag"].call(this.map);
    }
};
canvas.app.location.view.MiniMap.prototype.refreshMap = function () {
    if (this.map && this.isBuilded && this.map["refreshFlag"]) {
        this.map["refreshFlag"].call(this.map);
    }
};
canvas.app.location.view.MiniMap.prototype.zoomMode = function (mode) {
    if (this.map && this.isBuilded) {
        if (mode == 1) {
            if (this.map["zoomOut"]) this.map["zoomOut"].call(this.map, mode);
        } else {
            if (this.map["zoomIn"]) this.map["zoomIn"].call(this.map, mode);
        }
    }
};
canvas.app.location.view.MiniMap.prototype.wheelMouse = function (direction, type) {
    if (type == undefined) type = "y";
    if (this.map && this.isBuilded && this.map["wheelMouse"]) {
        this.map["wheelMouse"].call(this.map, direction, type);
    }
};
canvas.app.location.view.MiniMap.prototype.resizeMap = function () {
    if (this.map && this.isBuilded && this.map["resize"]) {
        this.map["resize"].call(this.map);
    }
};
canvas.app.location.view.MiniMap.prototype.swfObject = function (data) {
    if (this.map && this.isBuilded && this.map["swfObjectData"]) {
        this.map["swfObjectData"].call(this.map, data);
    }
};
canvas.app.location.view.MiniMap.prototype.build = function () {
    if (this.isBuilded) return;
    this.isBuilded = true;
    this.map = new canvas.app.CanvasWorld({}, this, true);
};
canvas.app.location.view.MiniMap.prototype.selectWay = function (arr, areaWaypoints) {
    var st = { arr: arr, areaWaypoints: areaWaypoints };
};
canvas.app.location.view.MiniMap.prototype.unSelectWay = function () {};
canvas.app.location.view.MiniMap.prototype.goToWay = function (arr, areaWaypoints) {
    var st = { arr: arr, areaWaypoints: areaWaypoints };
    canvas.EventManager.dispatchEvent(canvas.app.location.Event.WAY_CLICK, this, st);
};
canvas.app.location.view.MiniMap.prototype.zoomModeAnswer = function (mode) {
    if (mode == 1) {
        canvas.EventManager.dispatchEvent(canvas.app.location.Event.ZOOM_OUT, this);
    } else {
        canvas.EventManager.dispatchEvent(canvas.app.location.Event.ZOOM_IN, this);
    }
};
canvas.app.location.view.ListSide = function () {
    Object.defineProperty(this, "_width", {
        get: function () {
            return this.curls.width;
        },
        set: function (value) {},
    });
    Object.defineProperty(this, "_height", {
        get: function () {
            return this.curls.height;
        },
        set: function (value) {
            this.hh = value;
            this.resize();
        },
    });
    Object.defineProperty(this, "showOverOnItem", {
        get: function () {
            return false;
        },
        set: function (item) {
            this.list.showOverOnItem = item;
        },
    });
    Object.defineProperty(this, "active", {
        get: function () {
            return false;
        },
        set: function (fl) {
            if (fl) this.activate();
            else this.deactivate();
        },
    });
    Object.defineProperty(this, "partActive", {
        get: function () {
            return false;
        },
        set: function (fl) {
            if (fl) this.partiallyDeactivate();
        },
    });
    canvas.px.Container.call(this);
    var Conf = canvas.app.location.model;
    Conf.listOveredFlag = false;
    this.bg = new canvas.px.TilingSprite(canvas.ResourceLoader.getImage("ui", "bg_list"));
    this.bg.position.set(14, 14);
    this.bg.width = 203;
    this.curls = new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "curl"), 95, 130, 95, 130);
    this.curls.width = 232;
    this.curls.height = Conf.MIN_STAGE_HEIGHT - 8;
    this.curls2 = new canvas.app.location.view.elements.CurlBack();
    this.curls2.setSize(196, Conf.MIN_STAGE_HEIGHT - 36);
    this.curls2.position.set(18, 14);
    this.bg.height = this.curls2.height;
    var list_dy = Conf.OBJ_TOWN.ftime_max == 0 ? 0 : 50;
    this.list = new canvas.app.location.view.List(167, 256 - list_dy, Conf.OBJ_TOWN.items, this);
    this.list.position.set(34, 30);
    this.partiallyDeactivate();
    this.timer = new canvas.app.location.view.elements.LocTimer(Conf.OBJ_TOWN.ftime, Conf.OBJ_TOWN.ftime_max);
    canvas.EventManager.addEventListener(canvas.app.location.Event.TIMER_DONE, this.timer, this.timerDoneHandler, this);
    this.addChild(this.bg);
    this.addChild(this.curls2);
    this.addChild(this.curls);
    this.addChild(this.list);
    this.addChild(this.timer);
    this.timer.position.set(Math.round((this.curls.width - this.timer.width) / 2), this.curls.height - this.timer.height - 18);
    this.interactive = true;
    this.mouseover = this.rollOverHandler.bind(this);
    this.mouseout = this.rollOutHandler.bind(this);
};
canvas.app.location.view.ListSide.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.location.view.ListSide.prototype.timerStart = function () {
    this.timer.timerStart();
};
canvas.app.location.view.ListSide.prototype.partiallyDeactivate = function () {
    this.list.active = false;
};
canvas.app.location.view.ListSide.prototype.timerDoneHandler = function () {
    canvas.app.location.model.TRANSITION_POSSIBLE = true;
};
canvas.app.location.view.ListSide.prototype.activate = function () {
    this.list.activeAll = true;
};
canvas.app.location.view.ListSide.prototype.deactivate = function () {
    this.list.activeAll = false;
};
canvas.app.location.view.ListSide.prototype.rollOverHandler = function () {
    canvas.app.location.model.listOveredFlag = true;
    this.list.listRollOver();
};
canvas.app.location.view.ListSide.prototype.rollOutHandler = function () {
    canvas.app.location.model.listOveredFlag = false;
    this.list.listRollOut();
};
canvas.app.location.view.ListSide.prototype.resize = function () {
    this.curls.height = this.hh;
    this.curls2.height = this.hh - 28;
    this.timer.y = this.curls.height - this.timer.height - 18;
    this.bg.height = this.curls2.height;
    this.list.resize(this.hh);
};
canvas.app.location.view.ListSide.prototype.destroy = function () {
    if (this.list) this.list.destroy();
    if (this.timer) this.timer.destroy();
    this.mouseover = null;
    this.mouseout = null;
    canvas.EventManager.removeEventListener(canvas.app.location.Event.TIMER_DONE, this.timer, this.timerDoneHandler, this);
    canvas.px.Container.prototype.destroy.apply(this, [{ children: true }]);
};
canvas.app.location.view.List = function (ww, hh, items, listSide) {
    Object.defineProperty(this, "showOverOnItem", {
        get: function () {
            return false;
        },
        set: function (item) {
            this.overOnItem(item);
        },
    });
    Object.defineProperty(this, "active", {
        get: function () {
            return false;
        },
        set: function (fl) {
            if (fl) this.activate();
            else this.deactivate();
        },
    });
    Object.defineProperty(this, "activeAll", {
        get: function () {
            return false;
        },
        set: function (fl) {
            if (fl) this.activate();
            else this.deactivate(true);
        },
    });
    canvas.px.Container.call(this);
    this.actived = true;
    this.items = {};
    this.ww = ww;
    this.hh = hh;
    this.listSide = listSide;
    this.items = items;
    this.cont_mask = new canvas.px.Mask();
    this.cont = new canvas.px.Container();
    this.addChild(this.cont);
    this.addChild(this.cont_mask);
    this.cont.mask = this.cont_mask;
    this.create_masked_cont();
    this.intervalId = setInterval(this.finderTik.bind(this), 2e3);
    this.finderTik();
    this.activate();
};
canvas.app.location.view.List.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.location.view.List.prototype.activate = function () {
    this.actived = true;
    this.create_masked_cont();
};
canvas.app.location.view.List.prototype.deactivate = function (all_disable) {
    if (all_disable == undefined) all_disable = false;
    this.create_masked_cont(true, all_disable);
};
canvas.app.location.view.List.prototype.create_masked_cont = function (npc_active_only, all_disable) {
    if (npc_active_only == undefined) npc_active_only = false;
    if (all_disable == undefined) all_disable = false;
    var Conf = canvas.app.location.model;
    this.destroyAllBtns();
    this.cont_mask.setSize(this.ww - 2, this.hh - 24);
    var dy = 0;
    var itemsOrder = [
        [Conf.MODE_AREA, Conf.STRINGS_ARR[Conf.S_LOCATIONS], 0],
        [Conf.MODE_HOUSE, Conf.STRINGS_ARR[Conf.S_OBJECTS], 0],
        [Conf.MODE_NPC, Conf.STRINGS_ARR[Conf.S_NPCs], 0],
    ];
    for (var i = 0; i < itemsOrder.length; i++) {
        var sliser_tf = new canvas.ui.Text(Conf.IsBold ? canvas.Const.FONT_TAHOMA_10_BOLD : canvas.Const.FONT_TAHOMA_10, 16771765, 100, 20, "center");
        sliser_tf.text = itemsOrder[i][1];
        sliser_tf.position.set(Math.round((this.ww - sliser_tf._width) / 2), 3);
        var sliser = new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "list_sliser"), 56, 0, 56, 0);
        sliser.width = Math.round(sliser_tf.field.textWidth) + 110;
        sliser.x = Math.round((this.ww - sliser.width) / 2);
        var sliserCont = new canvas.px.Container();
        sliserCont.addChild(sliser);
        sliserCont.addChild(sliser_tf);
        sliserCont.y = dy;
        for (var prop in this.items) {
            if (this.items[prop].mode == itemsOrder[i][0]) {
                var btn = new canvas.app.location.view.elements.ListItem(this.ww, 18, this.items[prop]);
                this.items[prop].btn = btn;
                if (!this.items[prop].hide) {
                    if (itemsOrder[i][2] == 0) {
                        this.cont.addChild(sliserCont);
                        itemsOrder[i][2] = 1;
                        dy += 21;
                    }
                    btn.position.set(0, dy);
                    if (!npc_active_only || (this.items[prop].mode == Conf.MODE_NPC && !all_disable)) {
                        canvas.EventManager.addEventListener(canvas.app.location.Event.ITEM_OVER, null, this.itemBtnMouseOver, this);
                        btn.interactive = true;
                    } else {
                        btn.gray = true;
                    }
                    dy += 21;
                    this.cont.addChild(btn);
                }
            }
        }
    }
    this.creat_scroll();
    this.update();
};
canvas.app.location.view.List.prototype.listRollOver = function () {
    for (var prop in this.items) {
        this.items[prop].btn.overList();
    }
};
canvas.app.location.view.List.prototype.listRollOut = function () {
    for (var prop in this.items) {
        this.items[prop].btn.outList();
    }
};
canvas.app.location.view.List.prototype.itemBtnMouseOver = function (event) {
    for (var prop in this.items) {
        if (this.items[prop].btn.id != event.params.id) {
            this.items[prop].btn.refresh();
        }
    }
};
canvas.app.location.view.List.prototype.finderTik = function () {
    var Conf = canvas.app.location.model;
    var finishLocTmp = Conf.FinishLocation;
    Conf.getCoordinates();
    if (Conf.FinishLocation != finishLocTmp) {
        Conf.ARR_LOCATIONS = [];
        Conf.ARR_LOCATIONS = Conf.ARR_LOCATIONS.concat(Conf.finder.find(parseInt(Conf.FlagLocation), parseInt(Conf.FinishLocation)));
        if (this.actived) this.activate();
        else this.deactivate();
    } else {
        if (Conf.FinishLocation == null) {
            Conf.ARR_LOCATIONS = [];
        }
    }
};
canvas.app.location.view.List.prototype.update = function () {
    var Conf = canvas.app.location.model;
    for (var prop in this.items) {
        var btn = this.items[prop].btn;
        if (Conf.ARR_LOCATIONS.indexOf(parseInt(this.items[prop].loc_id)) != -1 || Conf.blinkIds.indexOf(parseInt(this.items[prop].id)) >= 0) {
            btn.light = true;
        } else {
            btn.light = false;
        }
    }
};
canvas.app.location.view.List.prototype.creat_scroll = function () {
    if (!this.scroll) {
        var minus = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "scroll_up"));
        var plus = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "scroll_down"));
        var drag = new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "scroll_item"), 0, 3, 0, 3);
        drag.height = 40;
        this.drag = drag;
        var bg = new canvas.px.Graphics();
        bg.beginFill(9764864, 0.1);
        bg.drawRect(0, 0, 16, 100);
        bg.endFill();
        this.scroll = new canvas.ui.Scroll(canvas.ui.ScrollType.VERTICAL, minus, plus, bg, drag, this);
        this.scroll.padding = 15;
        this.scroll.step = 15;
        this.scroll.position.set(this.ww, -16);
    }
    this.scroll.setSize(16, this.hh + (this.listSide.timer && this.listSide.timer.visible ? -4 : 17));
    this.scroll.max = this.cont.height - (this.hh - 28);
    this.scroll.current = this.scroll.current;
    this.drag.height = Math.min(this.hh - 70, this.hh - this.scroll.max);
    if (this.drag.height < 50) this.drag.height = 50;
    if (this.scroll.isDisabled()) {
        if (this.scroll.parent) this.removeChild(this.scroll);
        canvas.EventManager.removeEventListener(canvas.ui.ScrollEvent.EVENT_SCROLL, this.scroll, this.scrollHandler, this);
    } else {
        if (!this.scroll.parent) this.addChild(this.scroll);
        canvas.EventManager.addEventListener(canvas.ui.ScrollEvent.EVENT_SCROLL, this.scroll, this.scrollHandler, this);
    }
};
canvas.app.location.view.List.prototype.resize = function (h) {
    this.hh = h - (this.listSide.timer.visible ? 75 : 35);
    this.create_masked_cont();
};
canvas.app.location.view.List.prototype.scrollHandler = function () {
    this.cont.y = -this.scroll.current;
};
canvas.app.location.view.List.prototype.overOnItem = function (selectAnim) {
    for (var prop in this.items) {
        if (!this.items[prop].hide) {
            var btn = this.items[prop].btn;
            if (selectAnim) {
                if (parseInt(btn.id) == parseInt(selectAnim.id)) {
                    btn.select = true;
                    this.toListPosition(btn.y);
                } else {
                    btn.select = false;
                }
            } else {
                btn.select = false;
            }
        }
    }
};
canvas.app.location.view.List.prototype.toListPosition = function (yy) {
    if (this.scroll.parent) {
        this.scroll.current = yy - this.hh + 80;
        this.scrollHandler();
    }
};
canvas.app.location.view.List.prototype.destroyAllBtns = function () {
    canvas.Functions.destroyChildren(this.cont);
};
canvas.app.location.view.List.prototype.destroy = function () {
    clearInterval(this.intervalId);
    clearTimeout(this.timeoutId);
    canvas.EventManager.removeEventListener(canvas.ui.ScrollEvent.EVENT_SCROLL, this.scroll, this.scrollHandler, this);
    this.destroyAllBtns();
    canvas.px.Container.prototype.destroy.apply(this, [{ children: true }]);
};
canvas.app.location.view.LocSide = function () {
    this._hPos = 0;
    Object.defineProperty(this, "hPos", {
        get: function () {
            return this._hPos;
        },
        set: function (value) {},
    });
    Object.defineProperty(this, "_width", {
        get: function () {
            return this.curls.width;
        },
        set: function (value) {
            this.ww = value;
        },
    });
    Object.defineProperty(this, "_height", {
        get: function () {
            return this.curls.height;
        },
        set: function (value) {
            this.hh = value;
            this.activeHeight = value - 25;
            if (!canvas.app.location.model.firstResize) this.loadLocation();
            this.resize(this.ww);
            canvas.app.location.model.firstResize = false;
        },
    });
    Object.defineProperty(this, "bg", {
        get: function () {
            return this.objTownBg;
        },
        set: function (value) {},
    });
    Object.defineProperty(this, "areaID", {
        get: function () {
            return this.objTown.area_id;
        },
        set: function (value) {},
    });
    Object.defineProperty(this, "showOverOnAnim", {
        get: function () {
            return false;
        },
        set: function (item) {
            if (this.location != null) this.location.showOverOnAnim = item;
        },
    });
    Object.defineProperty(this, "showOutOnAnim", {
        get: function () {
            return false;
        },
        set: function (item) {
            if (this.location != null) this.location.showOutOnAnim = item;
            this.animOutHandler();
        },
    });
    Object.defineProperty(this, "active", {
        get: function () {
            return false;
        },
        set: function (fl) {
            if (fl) this.activate();
            else this.deactivate();
        },
    });
    Object.defineProperty(this, "moveToAnim", {
        get: function () {
            return false;
        },
        set: function (anim) {
            this.moveToAnimHandler({ params: anim });
        },
    });
    canvas.px.Container.call(this);
    this.objTown = {};
    this.locationCurType = "small";
    this.locationCurTypePrev = "small";
    this.actived = true;
    this.locIsLoaded = false;
    this.locMidIsLoaded = false;
    this.locIsStartLoading = false;
    this.locMidIsSartLoading = false;
    this.eventsContainer = new canvas.px.Container();
    this.mapWasMoved = false;
    this.hPosMax = 0;
    this.vScrollActive = false;
    var Conf = canvas.app.location.model;
    this.hh = Conf.MIN_STAGE_HEIGHT - 8;
    this.cont = new canvas.px.Container();
    this.cont.y = -1;
    this.cont2 = new canvas.px.Container();
    this.location_cont = new canvas.px.Container();
    this.location_cont.position.set(14, 14);
    this.location_mask = new canvas.px.Graphics();
    this.cont.addChild(this.location_cont);
    this.cont.mask = this.location_mask;
    this.objTown = Conf.OBJ_TOWN;
    this.objTownBg = this.objTown.bg;
    this.curls = new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "curl"), 95, 130, 95, 130);
    this.curls.height = this.hh - 3;
    this.caption = new canvas.ui.Text(Conf.IsBold ? canvas.Const.FONT_TAHOMA_11_BOLD : canvas.Const.FONT_TAHOMA_11, 16769466, 1e3, 20, "center");
    this.caption.text = String(this.objTown.title);
    this.caption.setSize(this.caption.textWidth);
    this.caption.y = -4;
    this.header = new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "header"), 31, 0, 31, 0);
    this.header.width = this.caption._width + 70;
    this.header.y = -6;
    this.drag = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "scroll_slider"), [47, 0, 47, 0]);
    this.scroll = new canvas.ui.Scroll(canvas.ui.ScrollType.HORIZONTAL, null, null, new canvas.px.Mask(100, 19), this.drag, this.cont, true);
    this.scroll.padding = 15;
    this.scroll.step = 30;
    this.scroll.position.set(this.ww, -16);
    canvas.EventManager.addEventListener(canvas.ui.ScrollEvent.EVENT_SCROLL, this.scroll, this.scrollHandler, this);
    this.dragV = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "scroll_slider_v"), [0, 47, 0, 47]);
    this.scrollV = new canvas.ui.Scroll(canvas.ui.ScrollType.VERTICAL, null, null, new canvas.px.Mask(19, 100), this.dragV, this.cont2, true, false);
    this.scrollV.padding = 15;
    this.scrollV.step = 30;
    this.scrollV.position.set(this.ww, 0);
    canvas.EventManager.addEventListener(canvas.ui.ScrollEvent.EVENT_SCROLL, this.scrollV, this.scrollVHandler, this);
    this.techBtn = new canvas.app.location.view.popups.TechBtn(Conf.par, canvas.app.location.Event.ENTER_FRAME);
    this.infoBtn = new canvas.app.location.view.popups.InfoBtn(Conf.par);
    if (Conf.CasinoLink) {
        this.casinoBtn = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "casino"));
        this.casinoBtn.position.set(13, 207);
        this.casinoBtn.sprite.hitArea = new canvas.px.Circle(38, 58, 27);
        canvas.EventManager.dispatchEvent(canvas.app.location.Event.HINT_ADD, null, {
            target: this.casinoBtn,
            params: new canvas.utils.HintParams(new canvas.app.view.MappingHint(Conf.CasinoIsGold ? canvas.Translator.getText(735) : canvas.Translator.getText(734))),
        });
        canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.casinoBtn, this.onCasionClick, this);
    }
    if (Conf.diceGameEnabled) {
        this.diceGameButton = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "dice_game"));
        this.diceGameButton.sprite.hitArea = new canvas.px.Circle(46, 46, 36);
        canvas.EventManager.dispatchEvent(canvas.app.location.Event.HINT_ADD, null, { target: this.diceGameButton, params: new canvas.utils.HintParams(new canvas.app.view.MappingHint(canvas.Translator.getText(700))) });
        canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.diceGameButton, this.onDiceGameClick, this);
    }
    this.magicMirrorButton = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "icon_mirror"));
    this.magicMirrorButton.x = 10;
    this.magicMirrorButton.visible = Conf.magicMirrorEndTime > Conf.serverTime.getTime();
    canvas.EventManager.dispatchEvent(canvas.app.location.Event.HINT_ADD, null, { target: this.magicMirrorButton, params: new canvas.utils.HintParams(new canvas.app.view.MappingHint(canvas.Translator.getText(732))) });
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.magicMirrorButton, this.onMagicMirrorClick, this);
    this.addChild(this.cont2);
    this.cont2.addChild(this.cont);
    this.addChild(this.location_mask);
    if (this.casinoBtn != null) this.addChild(this.casinoBtn);
    if (this.diceGameButton != null) this.addChild(this.diceGameButton);
    this.addChild(this.curls);
    this.addChild(this.header);
    this.addChild(this.caption);
    this.addChild(this.techBtn);
    this.techBtn.position.set(1028, 305);
    this.addChild(this.infoBtn);
    this.infoBtn.position.set(1080, 105);
    this.addChild(this.scroll);
    this.addChild(this.scrollV);
    this.addChild(this.magicMirrorButton);
    this.eventsContainer = new canvas.px.Container();
    this.addChild(this.eventsContainer);
    this.eventsContainer.position.set(15, 70);
    var dEvent;
    var eventBtn;
    for (var i = 0; i < Conf.NPCEvents.length; i++) {
        dEvent = Conf.NPCEvents[i];
        eventBtn = new canvas.app.location.view.popups.NPCEventBtn(dEvent);
        this.eventsContainer.addChild(eventBtn);
    }
    this.updateNPCEvents();
    canvas.EventManager.addEventListener(canvas.app.location.Event.UPDATE_NPC_EVENTS, null, this.updateNPCEvents, this);
    canvas.EventManager.addEventListener(canvas.app.location.Event.MOVE_TO_ANIM, null, this.moveToAnimHandler, this);
};
canvas.app.location.view.LocSide.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.location.view.LocSide.prototype.scrollHandler = function () {
    if (this.scroll.isDisabled()) {
        this.location_cont.x = 0;
    } else {
        this.location_cont.x = -Math.round(this.scroll.current);
    }
};
canvas.app.location.view.LocSide.prototype.scrollVHandler = function () {
    if (this.scrollV.isDisabled()) {
        this.location_cont.y = this.locationCurType == "mid" ? 0 : 15;
    } else {
        this.location_cont.y = (this.locationCurType == "mid" ? 0 : 15) - Math.round(this.scrollV.current);
    }
};
canvas.app.location.view.LocSide.prototype.onCasionClick = function () {
    canvas.Functions.navigateToURL(canvas.app.location.model.CasinoLink, "_self");
};
canvas.app.location.view.LocSide.prototype.onDiceGameClick = function () {
    openHeavensGift(canvas.app.location.model.canvasMinigamesFlag);
    canvas.app.location.model.diceGameEnabled = false;
    this.update();
};
canvas.app.location.view.LocSide.prototype.update = function () {
    if (this.diceGameButton) {
        if (canvas.app.location.model.diceGameEnabled) {
            if (!this.diceGameButton.parent) {
                this.addChild(this.diceGameButton);
                canvas.EventManager.dispatchEvent(canvas.app.location.Event.HINT_ADD, null, { target: this.diceGameButton, params: new canvas.utils.HintParams(new canvas.app.view.MappingHint(canvas.Translator.getText(700))) });
                canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.diceGameButton, this.onDiceGameClick, this);
            }
        } else {
            if (this.diceGameButton.parent) {
                this.removeChild(this.diceGameButton);
                canvas.EventManager.dispatchEvent(canvas.app.location.Event.HINT_REMOVE, null, { target: this.diceGameButton });
                canvas.EventManager.removeEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.diceGameButton, this.onDiceGameClick, this);
            }
        }
    }
};
canvas.app.location.view.LocSide.prototype.onMagicMirrorClick = function () {
    _top().openMagicMirror(canvas.app.location.model.canvasMinigamesFlag);
};
canvas.app.location.view.LocSide.prototype.loadLocation = function () {
    if ((this.locMidIsSartLoading && !this.locMidIsLoaded) || (this.locIsStartLoading && !this.locIsLoaded)) return;
    this.locationCurTypePrev = this.locationCurType;
    if (canvas.app.location.model.hh > canvas.app.location.Const.LOC_SMALL_HEIGHT && this.objTown.bg_mid != "") {
        this.locationCurType = "mid";
        if (this.locMidIsSartLoading) {
            if (this.locMidIsLoaded) {
                this.location = this.location_mid;
                this.resizeLocation();
            }
            return;
        }
        this.startLoad(this.objTown.bg_mid, this.getLocationMid);
        this.locMidIsSartLoading = true;
    } else {
        this.locationCurType = "small";
        if (this.locIsStartLoading) {
            if (this.locIsLoaded) {
                this.location = this.location_small;
                this.resizeLocation();
            }
            return;
        }
        this.startLoad(this.objTown.bg, this.getLocation);
        this.locIsStartLoading = true;
    }
};
canvas.app.location.view.LocSide.prototype.loadProgress = function (e) {
    if (this.preloader) this.preloader.gotoAndStop(Math.round(e.params.progress));
};
canvas.app.location.view.LocSide.prototype.loadCompleteOperations = function () {
    canvas.EventManager.removeEventListener(canvas.ResourceLoader.EVENT_COMPLETE, null, this.getLocationMid, this);
    canvas.EventManager.removeEventListener(canvas.ResourceLoader.EVENT_COMPLETE, null, this.getLocation, this);
    canvas.EventManager.removeEventListener(canvas.ResourceLoader.EVENT_PROGRESS, null, this.loadProgress, this);
    if (this.preloader) {
        this.preloader.destroy();
        delete this.preloader;
    }
};
canvas.app.location.view.LocSide.prototype.startLoad = function (name, completeHandler) {
    if (this.sky) this.sky.visible = false;
    if (this.snow) this.snow.visible = false;
    var url = canvas.Config.areasPath + name + "/" + name;
    this.preloader = new canvas.px.MovieClip(canvas.Config.effectsPath + "preloader");
    this.preloader.frameEvent = canvas.app.location.Event.ENTER_FRAME;
    this.preloader.position.set(Math.round(this.ww / 2), Math.round(this.hh / 2));
    this.addChild(this.preloader);
    canvas.EventManager.addEventListener(canvas.ResourceLoader.EVENT_COMPLETE, null, completeHandler, this);
    canvas.EventManager.addEventListener(canvas.ResourceLoader.EVENT_PROGRESS, null, this.loadProgress, this);
    canvas.ResourceLoader.add([url + ".mci", url + ".json"]);
};
canvas.app.location.view.LocSide.prototype.getLocation = function (e) {
    this.loadCompleteOperations();
    this.location_small = new canvas.app.location.view.LocContents(this.objTown.bg, canvas.app.location.model.OBJ_TOWN.items);
    this.location = this.location_small;
    if (this.location == null) {
        canvas.app.location.log("ERR: found old location [ " + this.objTown.bg + " ]", 16711680);
        return;
    }
    this.completeLocation();
};
canvas.app.location.view.LocSide.prototype.getLocationMid = function (e) {
    this.loadCompleteOperations();
    this.location_mid = new canvas.app.location.view.LocContents(this.objTown.bg_mid, canvas.app.location.model.OBJ_TOWN.items);
    this.location = this.location_mid;
    if (this.location == null) {
        canvas.app.location.log("ERR: found old location [ " + objTown.bg + " ]", 16711680);
        return;
    }
    this.completeLocation();
};
canvas.app.location.view.LocSide.prototype.completeLocation = function () {
    switch (this.locationCurType) {
        case "small":
            this.locIsLoaded = true;
            break;
        case "mid":
            this.locMidIsLoaded = true;
            break;
    }
    this.location_cont.addChild(this.location);
    if (this.sky) this.sky.visible = true;
    if (this.snow) this.snow.visible = true;
    canvas.EventManager.dispatchEvent(canvas.app.location.Event.COMPLETE, null, this);
    this.resizeLocation();
    this.setScrollSize(this.ww - 28);
    canvas.EventManager.dispatchEvent(canvas.app.location.Event.RESIZE);
    this.resetHorizontalScrollPos();
};
canvas.app.location.view.LocSide.prototype.setSky = function (sky) {
    this.sky = sky;
    this.location_cont.addChildAt(sky, 0);
};
canvas.app.location.view.LocSide.prototype.setSnow = function (snow) {
    this.snow = snow;
    this.cont.addChild(this.snow);
};
canvas.app.location.view.LocSide.prototype.resetHorizontalScrollPos = function () {
    if (this.scroll) this.scroll.current = Math.round(this.scroll.max * 0.5);
    this.scrollHandler();
    if (this.scrollV) this.scrollV.current = this.scrollV.max;
};
canvas.app.location.view.LocSide.prototype.resize = function (ww) {
    var locHeight = this.getLocationHeight();
    var hPosRatio = this.hPosMax == 0 ? 0 : this.hPos / this.hPosMax;
    if (this.location != null) {
        this.hPosMax = this.hh >= locHeight ? 0 : locHeight - this.hh;
        if (this.locationCurType != this.locationCurTypePrev) {
            this.resetHorizontalScrollPos();
        } else {
            this.hPos = this.hPosMax * hPosRatio;
        }
    }
    this.location_mask.clear();
    this.location_mask.beginFill(255, 1);
    this.location_mask.drawRect(15, 14, this.ww - 28, this.hh - 25);
    this.location_mask.endFill();
    this.ww = ww;
    this.curls.width = this.ww;
    this.curls.height = this.hh - 3;
    this.caption.x = Math.round((this.ww - this.caption.width) / 2);
    this.header.x = Math.round((this.ww - this.header.width) / 2);
    this.setScrollSize(this.ww - 28);
    this.scroll.position.set(30, this.hh - 20);
    this.scrollV.position.set(this.ww - 20, 0);
    this.techBtn.position.set(this.ww - 10, this.hh - 20);
    this.infoBtn.position.set(this.ww - 10, 100);
    if (this.casinoBtn != null) this.casinoBtn.y = this.hh - 100;
    if (this.magicMirrorButton != null) this.magicMirrorButton.y = this.hh - 130;
    if (this.diceGameButton != null) {
        this.diceGameButton.position.set(this.techBtn.x - this.techBtn.width - 93, this.techBtn.y - 85);
    }
    if (this.preloader) this.preloader.position.set(Math.round(this.ww / 2), Math.round(this.hh / 2));
};
canvas.app.location.view.LocSide.prototype.setScrollSize = function (h) {
    var w = this.getLocationWidth();
    this.scroll.max = w - h - 14;
    this.scroll.setSize(h - 35, 19);
    var dragSize = this.scroll._width - this.scroll.padding * 2 - this.scroll.max;
    this.drag.setSize(dragSize < 300 ? 300 : dragSize, 19);
    if (this.scroll.max == 0) {
        this.location_cont.x = 0;
        this.scroll.visible = false;
    } else {
        this.scroll.visible = true;
        this.scroll.update();
        this.scroll.current = Math.round(this.scroll.max * 0.5);
    }
    h = this.hh - 14;
    w = this.getLocationHeight();
    this.scrollV.max = w - h - 14;
    this.scrollV.setSize(19, this.hh);
    dragSize = this.scrollV._height - this.scrollV.max;
    this.dragV.setSize(19, dragSize < 200 ? 200 : dragSize);
    if (this.scrollV.max == 0) {
        this.location_cont.y = 0;
        this.scrollV.visible = false;
    } else {
        this.scrollV.visible = true;
        this.scrollV.current = this.scrollV.max;
    }
    this.scrollHandler();
    this.scrollVHandler();
};
canvas.app.location.view.LocSide.prototype.resizeLocation = function () {
    switch (this.locationCurType) {
        case "small":
            if (this.location_small != null && !this.location_small.parent) {
                this.location_cont.addChild(this.location_small);
                this.location_small.location.start();
            }
            if (this.location_mid != null && this.location_mid.parent) {
                this.location_cont.removeChild(this.location_mid);
                this.location_mid.location.stop();
            }
            break;
        case "mid":
            if (this.location_small != null && this.location_small.parent) {
                this.location_cont.removeChild(this.location_small);
                this.location_small.location.stop();
            }
            if (this.location_mid != null && !this.location_mid.parent) {
                this.location_cont.addChild(this.location_mid);
                this.location_mid.location.start();
            }
            break;
    }
    this.scrollHandler();
    this.scrollVHandler();
};
canvas.app.location.view.LocSide.prototype.updateNPCEvents = function () {
    var tmpX = 0;
    var eventBtn;
    var i = this.eventsContainer.children.length;
    while (i--) {
        eventBtn = this.eventsContainer.getChildAt(i);
        eventBtn.x = tmpX;
        tmpX += eventBtn.imageWidth + 5;
    }
};
canvas.app.location.view.LocSide.prototype.activate = function () {
    this.actived = true;
    this.cont.filters = [];
};
canvas.app.location.view.LocSide.prototype.deactivate = function () {
    this.actived = false;
};
canvas.app.location.view.LocSide.prototype.grayscaleLoc = function (gray) {
    this.location_cont.filters = gray ? [canvas.Functions.getGreyScale(0.3)] : [];
};
canvas.app.location.view.LocSide.prototype.getLocationWidth = function () {
    if (this.location == null) return canvas.app.location.Const.LOC_SMALL_WIDTH + 2;
    if (this.locationCurType == "small" || this.objTown.bg_mid == "") {
        return canvas.app.location.Const.LOC_SMALL_WIDTH * this.location.scale.x;
    } else {
        return canvas.app.location.Const.LOC_MID_WIDTH * this.location.scale.x;
    }
};
canvas.app.location.view.LocSide.prototype.getLocationHeight = function () {
    if (this.location == null) return canvas.app.location.Const.LOC_SMALL_HEIGHT;
    if (this.locationCurType == "small" || this.objTown.bg_mid == "") {
        return canvas.app.location.Const.LOC_SMALL_HEIGHT;
    } else {
        return canvas.app.location.Const.LOC_MID_HEIGHT;
    }
};
canvas.app.location.view.LocSide.prototype.moveToAnimHandler = function (event) {
    var anim = event.params;
    var w = this.getLocationWidth();
    var pos1 = Math.round(w * 0.4);
    var pos2 = Math.round(w * 0.6);
    var bounds = anim.getBounds(anim.parent);
    var xPos = anim.x + anim.width;
    if (xPos <= pos1) {
        this.scrollTargetValue = 0;
    } else if (xPos - anim.width >= pos2) {
        this.scrollTargetValue = this.scroll.max;
    } else {
        this.scrollTargetValue = Math.round(this.scroll.max * 0.5);
    }
    clearTimeout(this.timeOutId);
    this.timeOutId = setTimeout(this.startMoveToAnim.bind(this), 1e3);
};
canvas.app.location.view.LocSide.prototype.animOutHandler = function (event) {
    if (this.timeOutId) clearTimeout(this.timeOutId);
    if (this.tween) this.tween.stop();
};
canvas.app.location.view.LocSide.prototype.startMoveToAnim = function () {
    this.tween = new canvas.px.Tween.Tween(this.scroll).to({ current: this.scrollTargetValue }, 1e3).easing(canvas.px.Tween.Easing.Linear.None).onUpdate(this.scrollHandler.bind(this)).start();
};
canvas.app.location.view.LocSide.prototype.start = function () {
    if (this.location) this.location.location.start();
};
canvas.app.location.view.LocSide.prototype.stop = function () {
    if (this.location_small) this.location_small.location.stop();
    if (this.location_mid) this.location_mid.location.stop();
};
canvas.app.location.view.LocContents = function (locationName, items) {
    Object.defineProperty(this, "showOverOnAnim", {
        get: function () {},
        set: function (item) {
            this.overOnAnim(item);
        },
    });
    Object.defineProperty(this, "showOutOnAnim", {
        get: function () {},
        set: function (item) {
            this.outOnAnim(item);
        },
    });
    canvas.px.Container.call(this);
    this.location = new canvas.app.location.view.LocationView(locationName);
    this.items = items == null ? new Object() : this.cloneObject(items);
    this.addChild(this.location);
    if (this.location.ready) {
        this.preInit();
    } else {
        canvas.EventManager.addEventListener(canvas.app.location.Event.LOCATION_READY, null, this.preInit, this);
    }
};
canvas.app.location.view.LocContents.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.location.view.LocContents.prototype.cloneObject = function (source) {
    if (source.clone) return source.clone();
    var result = new Object();
    for (var str in source) {
        if (str != "btn") {
            result[str] = source[str] && typeof source[str] == "object" ? this.cloneObject(source[str]) : source[str];
        }
    }
    return result;
};
canvas.app.location.view.LocContents.prototype.preInit = function () {
    canvas.EventManager.removeEventListener(canvas.app.location.Event.LOCATION_READY, null, this.preInit, this);
    this.init();
    this.update();
};
canvas.app.location.view.LocContents.prototype.init = function () {
    var Conf = canvas.app.location.model;
    var ids = {};
    var prop;
    for (prop in this.items) {
        ids[this.items[prop].id] = this.items[prop];
    }
    for (prop in this.location.buttons) {
        var button = this.location.buttons[prop];
        var anim = this.location.anims[prop];
        var color;
        if (ids[prop]) {
            if (!ids[prop].hide && ids[prop].name) {
                color = ids[prop].mode == Conf.MODE_AREA ? 6770493 : ids[prop].mode == Conf.MODE_NPC ? 6585600 : ids[prop].mode == Conf.MODE_HOUSE ? 11813888 : 6770493;
                canvas.EventManager.dispatchEvent(canvas.app.location.Event.HINT_ADD, null, { target: button.button, params: new canvas.utils.HintParams(new canvas.app.view.MappingHint(ids[prop].name, color)) });
            } else {
            }
        } else {
            if (button && button.parent) button.parent.removeChild(button);
            if (anim && anim.parent) anim.parent.removeChild(anim);
        }
    }
};
canvas.app.location.view.LocContents.prototype.update = function () {
    var anim;
    var nubLight = false;
    var lightId = 0;
    var Conf = canvas.app.location.model;
    if (Conf.USER_NUB) {
        for (var loc in Conf.OBJ_NUB_LOC_ITEMS) {
            if (loc == Conf.OBJ_TOWN.swf_file) {
                nubLight = true;
                lightId = Conf.OBJ_NUB_LOC_ITEMS[loc];
            }
        }
    }
    for (var prop in this.location.anims) {
        anim = this.location.anims[prop];
        if (anim == null) continue;
        if ((nubLight && parseInt(lightId) == parseInt(prop)) || Conf.blinkIds.indexOf(parseInt(prop)) >= 0) {
            anim.alwaysLight = true;
        } else {
            anim.alwaysLight = false;
        }
    }
};
canvas.app.location.view.LocContents.prototype.overOnAnim = function (selectItem) {
    for (var key in this.location.anims) {
        var anim = this.location.anims[key];
        if (key == selectItem.id) {
            anim.show();
            canvas.EventManager.dispatchEvent(canvas.app.location.Event.MOVE_TO_ANIM, null, anim);
        } else {
            anim.hide();
        }
    }
};
canvas.app.location.view.LocContents.prototype.outOnAnim = function (selectItem) {
    for (var key in this.location.anims) {
        var anim = this.location.anims[key];
        if (key == selectItem.id) {
            anim.hide();
            break;
        }
    }
};
canvas.app.location.view.ResurrectWindow = function () {
    this._itemsCount = 0;
    Object.defineProperty(this, "itemsCount", {
        get: function () {
            return this._itemsCount;
        },
        set: function (value) {
            if (this._itemsCount === value) return;
            this._itemsCount = value;
            if (!this.items) this.items = new Array();
            var len = this.items.length;
            var i;
            var resurrectItem;
            if (len < this._itemsCount) {
                for (i = len; i < this._itemsCount; i++) {
                    resurrectItem = new canvas.app.location.view.elements.ResurrectItem();
                    this.container.addChild(resurrectItem);
                    this.items.push(resurrectItem);
                    resurrectItem.position.set((i % 3) * (resurrectItem.width - 20), Math.floor(i / 3) * (resurrectItem.height + 10));
                }
            }
            len = this.items.length;
            for (i = 0; i < len; i++) {
                this.items[i].visible = i < this._itemsCount;
            }
        },
    });
    Object.defineProperty(this, "_width", {
        get: function () {
            return this.back.width;
        },
    });
    canvas.px.Window.call(this);
    this.back = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "resurrect_back")));
    this.header = new canvas.px.Container();
    this.addChild(this.header);
    this.header.interactive = true;
    this.headerField = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_16_BOLD_STROKE, 16577975, this.back.width, 25, "center", "top", 0, 0);
    this.headerField.y = 4;
    this.headerField.text = canvas.Translator.getText(29);
    this.header.addChild(this.headerField);
    this.closeButton = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "cross"));
    this.closeButton.x = this.back.width - this.closeButton.width;
    this.closeButton.interactive = true;
    this.addChild(this.closeButton);
    this.container = new canvas.px.Container();
    this.addChild(this.container);
    this.container.position.set(20, 35);
    var minus = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "scroll_vertical_arrow"));
    var plus = new canvas.px.Container();
    var drag = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "scroll_vertical_drag"), [0, 7, 0, 5]);
    var btn = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "scroll_vertical_arrow"));
    btn.scale.y = -1;
    btn.position.y = -btn.height + 2;
    plus.addChild(btn);
    drag.setSize(21, 40);
    this.drag = drag;
    this.scroll = new canvas.ui.Scroll(canvas.ui.ScrollType.VERTICAL, minus, plus, new canvas.px.Mask(21, 100), drag, this);
    this.scroll.position.set(this.back.width - 40, 30);
    this.scroll.padding = 13;
    this.scroll.step = 30;
    this.scroll.setSize(21, 176);
    this.containerMask = new canvas.px.Mask(this.back.width, 170);
    this.addChild(this.containerMask);
    this.containerMask.position.set(20, 35);
    this.container.mask = this.containerMask;
    canvas.EventManager.addEventListener(canvas.ui.ScrollEvent.EVENT_SCROLL, this.scroll, this.scrollHandler, this);
};
canvas.app.location.view.ResurrectWindow.prototype = Object.create(canvas.px.Window.prototype);
canvas.app.location.view.ResurrectWindow.prototype.scrollHandler = function () {
    if (this.scroll.parent) this.container.y = 35 - this.scroll.current;
};
canvas.app.location.view.ResurrectWindow.prototype.update = function () {
    var Conf = canvas.app.location.model;
    if (Conf.resurrectData == null) return;
    var i = 0;
    var len = Conf.resurrectData.length;
    for (i = 0; i < len; i++) {
        this.items[i].data = Conf.resurrectData[i];
    }
    this.scroll.max = this.container.height - 170;
    if (len > 6) {
        this.addChild(this.scroll);
    } else {
        if (this.scroll.parent) this.removeChild(this.scroll);
    }
    this.container.x = this.scroll.parent ? 20 : 29;
};
canvas.app.location.view.ProgressWin = function (ctime, ftime, stime, farmName) {
    canvas.px.Container.call(this);
    this.interactive = true;
    var Conf = canvas.app.location.model;
    if (ctime == undefined) ctime = 0;
    if (ftime == undefined) ftime = 0;
    if (stime == undefined) stime = 0;
    if (farmName == undefined) farmName = "";
    this.bg = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "popup_progress_win"));
    if (ctime == 0) return;
    var current_time = Date.now();
    var delta_time = ctime - current_time;
    this.ctime = current_time;
    this.ftime = ftime;
    this.stime = stime;
    this.stime -= delta_time;
    this.ftime -= delta_time + 1;
    this.caption_tf = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD, 15660470, this.bg.width, 20, "center");
    this.caption_tf.text = farmName;
    this.caption_tf.y = -4;
    this.header = new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "header"), 31, 0, 31, 0);
    this.header.width = Math.round(this.caption_tf.textWidth) + 70;
    this.header.y = -7;
    this.but_cancel = new canvas.app.view.OldButton(12124160);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.but_cancel, this.cancelClickHandler, this);
    this.but_cancel.setTitle(Conf.STRINGS_ARR[Conf.S_CANCEL]);
    this.bar_red = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "progress_bar_red"));
    this.bar_green = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "progress_bar_green"));
    this.green_mask = new canvas.ui.Progress();
    this.green_mask.setSize(this.bar_green.width, this.bar_green.height);
    this.bar_green.mask = this.green_mask.sprite;
    this.addChild(this.bg);
    this.addChild(this.header);
    this.addChild(this.caption_tf);
    this.addChild(this.bar_red);
    this.addChild(this.bar_green);
    this.addChild(this.green_mask);
    this.addChild(this.but_cancel);
    this.header.x = Math.round((this.width - this.header.width) / 2);
    this.but_cancel.position.set(Math.round((this.width - this.but_cancel.width) / 2), 51);
    this.bar_red.position.set(Math.round((this.width - this.bar_red.width) / 2), 20);
    this.bar_green.position.set(this.bar_red.x, this.bar_red.y);
    this.green_mask.position.set(this.bar_green.x, this.bar_green.y);
};
canvas.app.location.view.ProgressWin.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.location.view.ProgressWin.prototype.startProgress = function () {
    if (this.ctime >= this.ftime) {
        canvas.EventManager.dispatchEvent(canvas.app.location.Event.PROGRESS_DONE);
    } else {
        canvas.EventManager.addEventListener(canvas.app.location.Event.ENTER_FRAME, null, this.frameHandler, this);
    }
};
canvas.app.location.view.ProgressWin.prototype.frameHandler = function () {
    var current_time = Date.now();
    this.green_mask.progress = (current_time - this.stime) / (this.ftime - this.stime);
    if (this.green_mask.progress >= 1) {
        canvas.EventManager.removeEventListener(canvas.app.location.Event.ENTER_FRAME, null, this.frameHandler, this);
        canvas.EventManager.dispatchEvent(canvas.app.location.Event.PROGRESS_DONE);
    }
};
canvas.app.location.view.ProgressWin.prototype.cancelClickHandler = function () {
    canvas.EventManager.dispatchEvent(canvas.app.location.Event.PROGRESS_CANCEL);
};
canvas.app.location.view.ProgressWin.prototype.destroy = function () {
    if (this.parent) this.parent.removeChild(this);
    canvas.EventManager.removeEventListener(canvas.app.location.Event.ENTER_FRAME, null, this.frameHandler, this);
    canvas.px.Container.prototype.destroy.apply(this, [{ children: true }]);
};
canvas.app.location.view.elements.LocationAnim = function (anim) {
    this._alwaysLight = false;
    Object.defineProperty(this, "alwaysLight", {
        get: function () {
            return this._alwaysLight;
        },
        set: function (value) {
            this._alwaysLight = value;
            if (value) {
                this.speed = 0.1;
                this.show();
            } else {
                this.speed = 0.25;
                this.hide();
            }
        },
    });
    canvas.px.Container.call(this);
    this.anim = anim;
    this.direction = false;
    this.alpha = 0;
    this.speed = 0.25;
};
canvas.app.location.view.elements.LocationAnim.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.location.view.elements.LocationAnim.prototype.show = function () {
    this.direction = true;
    this.addChild(this.anim);
    if (this.anim.gotoAndPlay != undefined) {
        this.anim.gotoAndPlay(1);
    }
    canvas.EventManager.addEventListener(canvas.app.location.Event.ENTER_FRAME, null, this.frameHandler, this);
};
canvas.app.location.view.elements.LocationAnim.prototype.hide = function () {
    this.direction = false;
    canvas.EventManager.addEventListener(canvas.app.location.Event.ENTER_FRAME, null, this.frameHandler, this);
};
canvas.app.location.view.elements.LocationAnim.prototype.frameHandler = function () {
    if (this.direction) {
        this.alpha += this.speed;
        if (this.alpha >= 1) {
            this.alpha = 1;
            if (this.alwaysLight) {
                this.direction = !this.direction;
                return;
            }
            canvas.EventManager.removeEventListener(canvas.app.location.Event.ENTER_FRAME, null, this.frameHandler, this);
        }
    } else {
        this.alpha -= this.speed;
        if (this.alpha <= 0) {
            this.alpha = 0;
            if (this.alwaysLight) {
                this.direction = !this.direction;
                return;
            }
            canvas.EventManager.removeEventListener(canvas.app.location.Event.ENTER_FRAME, null, this.frameHandler, this);
            if (this.anim.stop != undefined) {
                this.anim.stop();
            }
            if (this.anim.parent) {
                this.removeChild(this.anim);
            }
        }
    }
};
canvas.app.location.view.elements.Clocks = function () {
    canvas.px.Container.call(this);
    this.rect = new canvas.px.RoundRect(0, 0.4, 80, 34, 10, 10);
    this.addChild(this.rect);
    this.title = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD, 14540253, 80, 20, "center");
    this.title.y = 2;
    this.addChild(this.title);
    this.time = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD, 14540253, 80, 20, "center");
    this.addChild(this.time);
    this.time.y = 18;
};
canvas.app.location.view.elements.Clocks.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.location.view.elements.Clocks.prototype.update = function (timeToStart) {
    var date = new Date();
    this.title.text = canvas.Translator.getText(314) + ":";
    if (timeToStart > 0) {
        date.setTime(timeToStart * 1e3);
        this.time.text = canvas.Functions.setNumberLen(date.getMinutes()) + ":" + canvas.Functions.setNumberLen(date.getSeconds());
        this.visible = true;
    }
};
canvas.app.location.view.elements.MapZoom = function () {
    canvas.px.Container.call(this);
    var Conf = canvas.app.location.model;
    this.curl = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "zoom_curl"));
    this.openMapBtn = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "zoom_map_btn"));
    this.plusBtn = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "zoom_plus_btn"));
    this.minusBtn = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "zoom_minus_btn"));
    this.refreshBtn = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "zoom_refresh_btn"));
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.openMapBtn, this.openMapHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.plusBtn, this.zoomInMapHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.minusBtn, this.zoomOutMapHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.refreshBtn, this.refreshMapHandler, this);
    canvas.EventManager.dispatchEvent(canvas.app.location.Event.HINT_ADD, null, { target: this.openMapBtn, params: new canvas.utils.HintParams(new canvas.app.view.MappingHint(Conf.STRINGS_ARR[Conf.S_OPEN_WORLD_MAP])) });
    canvas.EventManager.dispatchEvent(canvas.app.location.Event.HINT_ADD, null, { target: this.plusBtn, params: new canvas.utils.HintParams(new canvas.app.view.MappingHint(Conf.STRINGS_ARR[Conf.S_ZOOM_IN])) });
    canvas.EventManager.dispatchEvent(canvas.app.location.Event.HINT_ADD, null, { target: this.minusBtn, params: new canvas.utils.HintParams(new canvas.app.view.MappingHint(Conf.STRINGS_ARR[Conf.S_ZOOM_OUT])) });
    canvas.EventManager.dispatchEvent(canvas.app.location.Event.HINT_ADD, null, { target: this.refreshBtn, params: new canvas.utils.HintParams(new canvas.app.view.MappingHint(Conf.STRINGS_ARR[Conf.S_REFRESH_MAP])) });
    this.plusBtn.visible = false;
    this.bgBtn = new canvas.px.Graphics();
    this.bgBtn.beginFill(0, 0);
    this.bgBtn.moveTo(5, -5);
    this.bgBtn.lineTo(this.curl.width + 5, this.curl.height - 5);
    this.bgBtn.lineTo(5, this.bgBtn.height - 5);
    this.bgBtn.lineTo(5, -5);
    this.bgBtn.endFill();
    this.bgBtn.interactive = true;
    this.openMapBtn.position.set(7, 56);
    this.plusBtn.position.set(20, 29);
    this.minusBtn.position.set(20, 29);
    this.refreshBtn.position.set(58, 72);
    this.addChild(this.curl);
    this.addChild(this.bgBtn);
    this.addChild(this.openMapBtn);
    this.addChild(this.plusBtn);
    this.addChild(this.minusBtn);
    this.addChild(this.refreshBtn);
};
canvas.app.location.view.elements.MapZoom.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.location.view.elements.MapZoom.prototype.zoomMode = function (mode) {
    if (mode == 1) {
        this.plusBtn.visible = true;
        this.minusBtn.visible = false;
    } else {
        this.plusBtn.visible = false;
        this.minusBtn.visible = true;
    }
};
canvas.app.location.view.elements.MapZoom.prototype.refreshMapHandler = function () {
    canvas.EventManager.dispatchEvent(canvas.app.location.Event.REFRESH_MAP, this);
};
canvas.app.location.view.elements.MapZoom.prototype.zoomOutMapHandler = function () {
    canvas.EventManager.dispatchEvent(canvas.app.location.Event.ZOOM_OUT, this);
};
canvas.app.location.view.elements.MapZoom.prototype.zoomInMapHandler = function () {
    canvas.EventManager.dispatchEvent(canvas.app.location.Event.ZOOM_IN, this);
};
canvas.app.location.view.elements.MapZoom.prototype.openMapHandler = function () {
    openMap();
};
canvas.app.location.view.elements.CurlBack = function () {
    canvas.px.Container.call(this);
    this.curl2_0 = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "curl2_0"));
    this.curl2_2 = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "curl2_2"));
    this.curl2_5 = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "curl2_5"));
    this.curl2_7 = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "curl2_7"));
    this.curl2_1 = new canvas.px.TilingSprite(canvas.ResourceLoader.getImage("ui", "curl2_1"), 20, 17);
    this.curl2_3 = new canvas.px.TilingSprite(canvas.ResourceLoader.getImage("ui", "curl2_3"), 17, 24);
    this.curl2_4 = new canvas.px.TilingSprite(canvas.ResourceLoader.getImage("ui", "curl2_4"), 17, 24);
    this.curl2_6 = new canvas.px.TilingSprite(canvas.ResourceLoader.getImage("ui", "curl2_6"), 20, 17);
    this.addChild(this.curl2_0);
    this.addChild(this.curl2_1);
    this.addChild(this.curl2_2);
    this.addChild(this.curl2_3);
    this.addChild(this.curl2_4);
    this.addChild(this.curl2_5);
    this.addChild(this.curl2_6);
    this.addChild(this.curl2_7);
    this.setSize(100, 100);
};
canvas.app.location.view.elements.CurlBack.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.location.view.elements.CurlBack.prototype.setSize = function (w, h) {
    var size = 32;
    this.curl2_1.position.set(size, 0);
    this.curl2_1.width = w - size * 2;
    this.curl2_2.position.set(w - size, 0);
    this.curl2_3.position.set(0, size);
    this.curl2_3.height = h - size * 2;
    this.curl2_4.position.set(w - 17, size);
    this.curl2_4.height = h - size * 2;
    this.curl2_5.position.set(0, h - size);
    this.curl2_6.position.set(size, h - 17);
    this.curl2_6.width = w - size * 2;
    this.curl2_7.position.set(w - size, h - size);
};
canvas.app.location.view.elements.LocTimer = function (ftime, ftime_max) {
    canvas.px.Container.call(this);
    var Conf = canvas.app.location.model;
    this.timerIsDone = false;
    this.ftime = ftime;
    this.ftime_max = ftime_max;
    this.bg = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "timer"));
    this.bar = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "timer_bar"));
    this.bar.position.set(20, 20);
    this.bar_mask = new canvas.px.Mask(this.bar.width, this.bar.height);
    this.bar_mask.position.set(20, 20);
    this.bar.mask = this.bar_mask;
    this.time_tf = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_10_BOLD, 10551296, 60, 16, "center");
    this.time_tf.text = "00:00:00";
    this.time_tf.position.set(69, 34);
    this.title_tf = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_10_BOLD, 5391675, 123, 16, "center");
    this.title_tf.text = canvas.app.location.model.STRINGS_ARR[Conf.S_TIME_TRANSITION];
    this.title_tf.position.set(38, 2);
    this.addChild(this.bg);
    this.addChild(this.bar);
    this.addChild(this.bar_mask);
    this.addChild(this.time_tf);
    this.addChild(this.title_tf);
    this.timer = setInterval(this.timerHandler.bind(this), 500);
};
canvas.app.location.view.elements.LocTimer.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.location.view.elements.LocTimer.prototype.timerStart = function () {
    this.bar.texture = canvas.ResourceLoader.getImage("ui", "timer_bar");
    this.autoDone = false;
    var delta = (this.ftime_max - this.ftime) * 1e3;
    this.cur_time = Date.now();
    this.start_time = this.cur_time - delta;
    this.fin_time = this.cur_time + this.ftime * 1e3;
    if (this.ftime_max == 0) {
        this.timerDone();
        this.visible = false;
    } else {
        this.intervalId = setInterval(this.timerTik.bind(this), 70);
        this.timerTik();
    }
};
canvas.app.location.view.elements.LocTimer.prototype.timerTik = function () {
    this.cur_time = Date.now();
    if (this.cur_time <= this.fin_time) {
        this.time_tf.text = this.timeToStr(parseInt((this.fin_time - this.cur_time + 999) / 1e3));
        this.bar_mask.scale.x = Math.min(1, 1 - (this.cur_time - this.start_time) / (this.fin_time - this.start_time));
    } else {
        clearInterval(this.intervalId);
        this.timerDone();
    }
};
canvas.app.location.view.elements.LocTimer.prototype.timerDone = function () {
    var Conf = canvas.app.location.model;
    this.bar_mask.scale.x = 0;
    this.title_tf.text = Conf.STRINGS_ARR[Conf.S_TRANSITION_POSSIBLE];
    this.time_tf.text = "00:00:00";
    this.timerIsDone = true;
    this.title_tf.color = 5391675;
    canvas.EventManager.dispatchEvent(canvas.app.location.Event.TIMER_DONE, this);
};
canvas.app.location.view.elements.LocTimer.prototype.timeToStr = function (tiks) {
    var out = "";
    var hours = Math.floor(tiks / 3600);
    tiks -= hours * 3600;
    var minutes = Math.floor(tiks / 60);
    tiks -= minutes * 60;
    var seconds = tiks;
    out = canvas.Functions.setNumberLen(hours) + ":" + canvas.Functions.setNumberLen(minutes) + ":" + canvas.Functions.setNumberLen(seconds);
    return out;
};
canvas.app.location.view.elements.LocTimer.prototype.timerHandler = function () {
    if (this.timerIsDone) {
        if (canvas.app.location.model.autoPenalty >= 0 && !this.autoDone) {
            if (!this.autoTime) {
                this.autoTime = this.fin_time + this.ftime * 10 * canvas.app.location.model.autoPenalty;
                this.bar.texture = canvas.ResourceLoader.getImage("ui", "timer_bar_green");
            } else {
                this.bar_mask.scale.x = Math.min(1, 1 - (Date.now() - this.fin_time) / (this.autoTime - this.fin_time));
                if (this.autoTime <= Date.now()) {
                    if (canvas.app.location.model.manorAutoEnter) {
                        canvas.app.location.model.finishSessTarget();
                        canvas.Functions.navigateToURL("estate.php?mode=enter", "_self");
                    } else {
                        canvas.EventManager.dispatchEvent(canvas.app.location.Event.AUTO_TURN, this);
                    }
                    this.bar_mask.scale.x = 0;
                    this.autoDone = true;
                }
            }
        }
    } else {
        this.title_tf.color = this.title_tf.color == 13369344 ? 5391675 : 13369344;
    }
};
canvas.app.location.view.elements.LocTimer.prototype.destroy = function () {
    clearInterval(this.intervalId);
    clearInterval(this.timer);
    canvas.px.Container.prototype.destroy.apply(this, [{ children: true }]);
};
canvas.app.location.view.elements.ListItem = function (ww, hh, item) {
    Object.defineProperty(this, "id", {
        get: function () {
            return parseInt(item.id);
        },
        set: function (value) {},
    });
    Object.defineProperty(this, "confirm", {
        get: function () {
            return parseInt(this.item.confirm) == 1;
        },
        set: function (value) {},
    });
    Object.defineProperty(this, "confirm_text", {
        get: function () {
            return !this.item.confirm_text ? null : this.item.confirm_text;
        },
        set: function (value) {},
    });
    Object.defineProperty(this, "href", {
        get: function () {
            return String(this.item.href);
        },
        set: function (value) {},
    });
    Object.defineProperty(this, "farm", {
        get: function () {
            return String(this.item.farm);
        },
        set: function (value) {},
    });
    Object.defineProperty(this, "overloaded", {
        get: function () {
            return parseInt(this.item.refresh) == 1;
        },
        set: function (value) {},
    });
    Object.defineProperty(this, "select", {
        get: function () {
            return false;
        },
        set: function (value) {
            if (value) this.showSelect();
            else this.hideSelect();
        },
    });
    Object.defineProperty(this, "light", {
        get: function () {
            return false;
        },
        set: function (value) {
            if (value) this.showLight();
            else this.hideLight();
            if (this.compass) {
                this.compass.visible = value;
                if (this.compass.visible) this.clock.visible = false;
            }
        },
    });
    Object.defineProperty(this, "gray", {
        get: function () {
            return false;
        },
        set: function (value) {
            if (value) this.showGray();
            else this.hideGray();
        },
    });
    canvas.px.Container.call(this);
    var Conf = canvas.app.location.model;
    this.item = {};
    this.start_frame = 0;
    this.cur_frame = 0;
    this.stop_frame = 30;
    this.div = 1;
    this.isDestroyed = false;
    this.item = item;
    this.ww = ww;
    this.hh = hh;
    this.cont = new canvas.px.Container();
    this.over_bg = new canvas.px.Graphics();
    this.over_bg.alpha = 0;
    this.light_bg = new canvas.px.Graphics();
    this.light_bg.alpha = 0;
    this.ico_bmp = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", this.item.mode));
    this.ico_bmp.position.set(4, 4);
    if (this.item.mode == Conf.MODE_AREA) {
        this.clock = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "clock"));
        this.clock.position.set(4, 4);
        this.clock.visible = false;
        this.addChild(this.clock);
        this.compass = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "compass"));
        this.compass.position.set(3, 3);
        this.compass.visible = false;
    }
    this.creat_bg(this.over_bg, this.ww - 2, this.hh, 8742487, 16777215);
    this.creat_bg(this.light_bg, this.ww - 2, this.hh, 14243584, 16737792);
    var tf_color = this.item.mode == Conf.MODE_AREA ? 6770493 : this.item.mode == Conf.MODE_NPC ? 6585600 : this.item.mode == Conf.MODE_HOUSE ? 11813888 : 6770493;
    this.name_tf = new canvas.ui.Text(Conf.IsBold ? canvas.Const.FONT_TAHOMA_12_BOLD : canvas.Const.FONT_TAHOMA_12, tf_color, 300, 20, "left");
    this.name_tf.text = this.item.name;
    this.name_tf.position.set(22, 1);
    this.name_copy_tf = new canvas.ui.Text(Conf.IsBold ? canvas.Const.FONT_TAHOMA_12_BOLD : canvas.Const.FONT_TAHOMA_12, tf_color, 300, 20, "left");
    this.name_copy_tf.text = this.item.name;
    this.name_copy_tf.position.set(10 + this.name_tf.x + this.name_tf.field.textWidth, 1);
    this.txt_cont = new canvas.px.Container();
    this.txt_cont.addChild(this.name_tf);
    if (this.name_tf.x + this.name_tf.field.textWidth > this.ww) this.txt_cont.addChild(this.name_copy_tf);
    this.txt_mask = new canvas.px.Mask(this.name_tf._width, this.name_tf._height);
    this.txt_mask.x = 21;
    this.txt_cont.mask = this.txt_mask;
    this.cont.addChild(this.over_bg);
    this.cont.addChild(this.ico_bmp);
    this.cont.addChild(this.txt_cont);
    this.cont.addChild(this.txt_mask);
    this.addChild(this.cont);
    this.addChild(this.light_bg);
    if (this.compass) this.addChild(this.compass);
    this.buttonMode = true;
    this.mouseover = this.mouseOverHandler.bind(this);
    this.mouseout = this.mouseOutHandler.bind(this);
    this.click = this.mouseClickHandler.bind(this);
    if (Conf.listOveredFlag) this.overList();
    canvas.EventManager.addEventListener(canvas.app.location.Event.AUTO_TURN, null, this.autoTurnHandler, this);
};
canvas.app.location.view.elements.ListItem.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.location.view.elements.ListItem.prototype.refresh = function () {
    this.over_bg.alpha = 0;
};
canvas.app.location.view.elements.ListItem.prototype.overList = function () {
    if (!this.clock) return;
    if (this.cont.filters == null || this.cont.filters.length == 0) {
        this.clock.visible = false;
        this.ico_bmp.visible = true;
    } else {
        this.clock.visible = this.compass.visible ? false : true;
        this.ico_bmp.visible = false;
    }
};
canvas.app.location.view.elements.ListItem.prototype.outList = function () {
    if (this.clock == null) return;
    this.clock.visible = false;
    this.ico_bmp.visible = true;
};
canvas.app.location.view.elements.ListItem.prototype.moveTxtHandler = function () {
    if (this.name_tf.x + this.name_tf.field.textWidth <= this.ww) return;
    if (this.txt_cont.x < -this.txt_cont.width / 2) this.txt_cont.x = 3;
    else this.txt_cont.x -= 1;
};
canvas.app.location.view.elements.ListItem.prototype.creat_bg = function (lnk, ww, hh, color1, color2) {
    lnk.beginFill(color1, 0.8);
    lnk.drawRect(1, 0, ww - 1, 1);
    lnk.drawRect(ww - 1, 1, 1, hh - 1);
    lnk.drawRect(0, hh - 1, ww - 1, 1);
    lnk.drawRect(0, 0, 1, hh - 1);
    lnk.endFill();
    lnk.beginFill(color2, 0.15);
    lnk.drawRect(1, 1, ww - 2, hh - 2);
    lnk.endFill();
};
canvas.app.location.view.elements.ListItem.prototype.mouseClickHandler = function () {
    canvas.EventManager.dispatchEvent(canvas.app.location.Event.ITEM_CLICK, null, this.item);
};
canvas.app.location.view.elements.ListItem.prototype.mouseOverHandler = function () {
    this.over_bg.alpha = 1;
    canvas.EventManager.dispatchEvent(canvas.app.location.Event.ITEM_OVER, null, this.item);
    canvas.EventManager.addEventListener(canvas.app.location.Event.ENTER_FRAME, null, this.moveTxtHandler, this);
};
canvas.app.location.view.elements.ListItem.prototype.mouseOutHandler = function () {
    this.over_bg.alpha = 0;
    canvas.EventManager.dispatchEvent(canvas.app.location.Event.ITEM_OUT, null, this.item);
    canvas.EventManager.removeEventListener(canvas.app.location.Event.ENTER_FRAME, null, this.moveTxtHandler, this);
    this.txt_cont.x = 0;
};
canvas.app.location.view.elements.ListItem.prototype.showLight = function () {
    canvas.EventManager.addEventListener(canvas.app.location.Event.ENTER_FRAME, null, this.lightBgEnterFrameHandler, this);
};
canvas.app.location.view.elements.ListItem.prototype.hideLight = function () {
    canvas.EventManager.removeEventListener(canvas.app.location.Event.ENTER_FRAME, null, this.lightBgEnterFrameHandler, this);
};
canvas.app.location.view.elements.ListItem.prototype.showSelect = function () {
    this.over_bg.alpha = 1;
    canvas.EventManager.addEventListener(canvas.app.location.Event.ENTER_FRAME, null, this.moveTxtHandler, this);
};
canvas.app.location.view.elements.ListItem.prototype.hideSelect = function () {
    this.over_bg.alpha = 0;
    canvas.EventManager.removeEventListener(canvas.app.location.Event.ENTER_FRAME, null, this.moveTxtHandler, this);
    this.txt_cont.x = 0;
};
canvas.app.location.view.elements.ListItem.prototype.showGray = function () {
    this.cont.filters = [canvas.Functions.getGreyScale(0.5)];
    if (canvas.app.location.model.listOveredFlag) this.overList();
};
canvas.app.location.view.elements.ListItem.prototype.hideGray = function () {
    this.cont.filters = [];
    if (canvas.app.location.model.listOveredFlag) this.overList();
};
canvas.app.location.view.elements.ListItem.prototype.lightBgEnterFrameHandler = function () {
    this.cur_frame++;
    if (this.cur_frame < this.stop_frame) {
        this.light_bg.alpha = (this.div < 0 ? 1 : 0) + (this.cur_frame / this.stop_frame) * this.div;
    } else {
        this.cur_frame = this.start_frame;
        this.div *= -1;
    }
    if (this.isDestroyed) {
        canvas.EventManager.removeEventListener(canvas.app.location.Event.ENTER_FRAME, null, this.lightBgEnterFrameHandler, this);
    }
};
canvas.app.location.view.elements.ListItem.prototype.autoTurnHandler = function () {
    if (this.compass && this.compass.visible) {
        this.mouseClickHandler();
    }
};
canvas.app.location.view.elements.ListItem.prototype.destroy = function () {
    this.isDestroyed = true;
    this.lightBgEnterFrameHandler();
    canvas.EventManager.removeEventListener(canvas.app.location.Event.ENTER_FRAME, null, this.moveTxtHandler, this);
    canvas.EventManager.removeEventListener(canvas.app.location.Event.ENTER_FRAME, null, this.lightBgEnterFrameHandler, this);
    canvas.EventManager.removeEventListener(canvas.app.location.Event.AUTO_TURN, null, this.autoTurnHandler, this);
    canvas.px.Container.prototype.destroy.apply(this, [{ children: true }]);
};
canvas.app.location.view.elements.Snow = function (count, enterFrameEvent) {
    canvas.px.Container.call(this);
    if (enterFrameEvent == undefined) enterFrameEvent = canvas.app.location.Event.ENTER_FRAME;
    this.enterFrameEvent = enterFrameEvent;
    this.count_snow = count;
    this.arr_snow = [];
    this.gravity = 3;
    this.share = new canvas.app.location.view.elements.SnowShare();
    this.setData();
    this.id_interval = setInterval(this.setData.bind(this), 3e3);
};
canvas.app.location.view.elements.Snow.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.location.view.elements.Snow.prototype.setData = function () {
    var data = this.share.getData();
    if (!this.count_snow) this.count_snow = data.snow_count;
    this.wind = {};
    this.wind.x = data.wind.x;
    this.wind.y = data.wind.y;
    var len = this.arr_snow.length;
    for (var i = 0; i < len; i++) {
        if (Math.abs(this.wind.x) > 2) {
            this.arr_snow[i].vibration_max = 3;
        } else {
            this.arr_snow[i].vibration_max = 1;
        }
    }
};
canvas.app.location.view.elements.Snow.prototype.init = function (ww, hh) {
    this.w = ww;
    this.h = hh;
    this.arr_snow = [];
    for (var i = 0; i < this.count_snow; i++) {
        var ball = this.createSnowFlakes();
        canvas.EventManager.addEventListener(canvas.app.location.Event.SNOWBALL_KILL, ball, this.killSnow, this);
        ball.y = Math.round(this.h * Math.random());
        this.addChild(ball);
        this.arr_snow.push(ball);
    }
};
canvas.app.location.view.elements.Snow.prototype.createSnowFlakes = function () {
    var ball = new canvas.app.location.view.elements.SnowBall(this.w, this.h, this.wind, this.gravity, this.enterFrameEvent);
    ball.position.set(Math.round(this.w * Math.random()), -ball.height);
    return ball;
};
canvas.app.location.view.elements.Snow.prototype.killSnow = function (e) {
    var snow_mc = e.target;
    snow_mc.initAlpha();
    snow_mc.position.set(Math.round(this.w * Math.random()), -snow_mc.height);
};
canvas.app.location.view.elements.Sky = function (name) {
    canvas.px.Container.call(this);
    this.name = name;
    this.stopped = true;
    this.anims = [];
    this.loopWidth = 1e3;
    if (!name) return;
    this.staticContent = new canvas.px.Container();
    this.dynamicContent = new canvas.px.Container();
    this.addChild(this.staticContent);
    this.addChild(this.dynamicContent);
    this.url = canvas.Config.skyPath + name + "/" + name;
    if (!canvas.ResourceLoader.get(this.url + ".mci")) {
        canvas.ResourceLoader.add([this.url + ".mci"]);
        canvas.EventManager.addEventListener(canvas.ResourceLoader.EVENT_COMPLETE, null, this.init, this);
    } else {
        this.init();
    }
};
canvas.app.location.view.elements.Sky.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.location.view.elements.Sky.prototype.init = function () {
    canvas.EventManager.removeEventListener(canvas.ResourceLoader.EVENT_COMPLETE, null, this.init, this);
    this.data = canvas.ResourceLoader.get(this.url + ".mci").data;
    if (this.data.loopWidth) this.loopWidth = this.data.loopWidth;
    canvas.EventManager.addEventListener(canvas.ResourceLoader.EVENT_COMPLETE, null, this.ready, this);
    if (this.data[canvas.px.MovieClipProps.children]) {
        canvas.ResourceLoader.add([this.url + ".json"]);
    } else {
        canvas.ResourceLoader.add([this.url + ".jpg"]);
    }
};
canvas.app.location.view.elements.Sky.prototype.ready = function () {
    canvas.EventManager.removeEventListener(canvas.ResourceLoader.EVENT_COMPLETE, null, this.ready, this);
    if (this.data[canvas.px.MovieClipProps.children]) {
        var mc;
        this.atlas = canvas.ResourceLoader.get(this.url + ".json").textures;
        var len = this.data[canvas.px.MovieClipProps.children].length;
        for (var i = 0; i < len; i++) {
            var child = this.data[canvas.px.MovieClipProps.children][i];
            var dyn = child.name == "dynamic_layer";
            var len2 = 3;
            for (var j = 0; j < len2; j++) {
                if (child.mc) {
                    mc = new canvas.px.MovieClipChild(child.mc, this.atlas, child.name + "/", null);
                    mc.frameEvent = canvas.app.location.Event.ENTER_FRAME;
                    this.anims.push[mc];
                    if (!this.stopped) mc.play();
                    else mc.gotoAndStop(1);
                } else {
                    mc = new canvas.px.Sprite(this.atlas[child.name + ".png"]);
                }
                mc.position.set(child.x - j * this.loopWidth, child.y);
                if (dyn) {
                    this.dynamicContent.addChild(mc);
                } else {
                    this.staticContent.addChild(mc);
                }
            }
        }
    } else {
        for (var k = 0; k < 3; k++) {
            mc = new canvas.ui.Image(this.url + ".jpg");
            mc.position.set(-k * this.loopWidth, 0);
            this.dynamicContent.addChild(mc);
        }
    }
    this.dynamicContent.x = this.loopWidth;
    if (!this.data.stop) {
        canvas.EventManager.addEventListener(canvas.app.location.Event.ENTER_FRAME, null, this.updateHandler, this);
    }
};
canvas.app.location.view.elements.Sky.prototype.updateHandler = function () {
    if (this.stopeed) return;
    if (this.dynamicContent.x >= this.loopWidth * 2 - 1) {
        this.dynamicContent.x = this.loopWidth;
    } else {
        this.dynamicContent.x += 1;
    }
};
canvas.app.location.view.elements.Sky.prototype.stop = function () {
    this.stopped = true;
    for (var i = 0; i < this.anims.length; i++) {
        this.anims[i].stop();
    }
};
canvas.app.location.view.elements.Sky.prototype.start = function () {
    this.stopped = false;
    for (var i = 0; i < this.anims.length; i++) {
        this.anims[i].play();
    }
};
canvas.app.location.view.elements.SnowBall = function (ww, hh, wnd, grv, enterFrameEvent) {
    canvas.px.Graphics.call(this);
    this.enterFrameEvent = enterFrameEvent;
    this.pers_set = 0.8;
    this.size_min = 0.5;
    this.size_max = 3;
    this.alpha_min = 0.2;
    this.alpha_max = 1;
    this.vibration_max = 1;
    this.time = 0;
    this.min_time = 0;
    this.max_time = 30;
    this.max_x = ww;
    this.max_y = hh;
    this.wind = wnd;
    this.gravity = grv;
    this.init();
};
canvas.app.location.view.elements.SnowBall.prototype = Object.create(canvas.px.Graphics.prototype);
canvas.app.location.view.elements.SnowBall.prototype.init = function () {
    canvas.EventManager.addEventListener(this.enterFrameEvent, null, this.enterFrameHandler, this);
    this.initAlpha();
};
canvas.app.location.view.elements.SnowBall.prototype.initAlpha = function () {
    this.clear();
    this.beginFill(16777215, 1);
    var rand = Math.random();
    this.size = this.size_min + rand * (this.size_max - this.size_min);
    this.drawCircle(0, 0, this.size);
    this.endFill();
    this.curr_alpha = this.alpha_min + rand * (this.alpha_max - this.alpha_min);
    this.alpha = this.curr_alpha;
    this.hide_y = this.max_y - this.max_y * 0.5 * (1 - rand);
    this.vibration = { x: 0, y: 0 };
    if (Math.abs(this.wind.x) > 2) {
        this.vibration_max = 3;
    } else {
        this.vibration_max = 1;
    }
};
canvas.app.location.view.elements.SnowBall.prototype.enterFrameHandler = function () {
    this.x += this.vibration.x + this.wind.x;
    this.y += this.vibration.y + this.wind.y + this.gravity;
    this.time--;
    if (this.time <= 0) {
        this.time = this.min_time + Math.random() * (this.max_time - this.min_time);
        this.vibration.x = -this.vibration_max + Math.random() * this.vibration_max * 2;
        this.vibration.y = -this.vibration_max + Math.random() * this.vibration_max * 2;
    }
    if (this.size < (this.size_max - this.size_min) * 0.99) {
        this.alpha = this.curr_alpha - (this.curr_alpha * this.y) / this.hide_y;
    }
    if (this.y > this.max_y) {
        canvas.EventManager.dispatchEvent(canvas.app.location.Event.SNOWBALL_KILL, this);
    }
    if (this.x > this.max_x - this.width / 2) {
        if (this.size > this.pers_set * this.size_max) {
            canvas.EventManager.dispatchEvent(canvas.app.location.Event.SNOWBALL_DRAW, this);
        }
        this.x = this.width / 2 + 2;
    }
    if (this.x < this.width / 2) {
        if (this.size > this.pers_set * this.size_max) {
            canvas.EventManager.dispatchEvent(canvas.app.location.Event.SNOWBALL_DRAW, this);
        }
        this.x = this.max_x - this.width / 2 - 2;
    }
};
canvas.app.location.view.elements.SnowShare = function () {
    this.save_count = 24;
    var date = new Date();
    this.name = "snow_location_" + date.getMonth() + "_" + date.getDate();
    var localStorage = canvas.app.location.model ? canvas.app.location.model.localStorage : null;
    var dat = localStorage ? localStorage.get(this.name) : null;
    if (dat) {
        this.arr_data = JSON.parse(dat);
    } else {
        this.arr_data = this.generationData();
        if (localStorage) localStorage.set(this.name, JSON.stringify(this.arr_data));
    }
};
canvas.app.location.view.elements.SnowShare.prototype.clearFunc = function () {
    canvas.app.location.model.localStorage.set(this.name, "");
};
canvas.app.location.view.elements.SnowShare.prototype.generationData = function () {
    var arr = [];
    var max_count = 80;
    var min_count = 20;
    for (var i = 0; i < this.save_count; i++) {
        var dat = {};
        dat.snow_count = Math.round(min_count + Math.random() * (max_count - min_count));
        var wind = { x: 0, y: 0 };
        if (dat.snow_count > max_count * 0.2) {
            wind.x = -7 + Math.random() * 7 * 2;
            wind.y = -2 + Math.random() * 2 * 2;
        }
        dat.wind = wind;
        arr.push(dat);
    }
    return arr;
};
canvas.app.location.view.elements.SnowShare.prototype.getData = function () {
    var date = new Date();
    var persent = date.getHours() / this.save_count;
    var cnt = Math.floor(this.arr_data.length * persent);
    var dat_min = this.arr_data[cnt];
    var dat_max;
    if (cnt == this.save_count - 1) {
        dat_max = this.arr_data[cnt];
    } else {
        dat_max = this.arr_data[cnt + 1];
    }
    var dat = {};
    persent = date.getMinutes() / 60;
    dat.snow_count = dat_min.snow_count + persent * (dat_max.snow_count - dat_min.snow_count);
    dat.wind = {};
    dat.wind.x = dat_min.wind.x + persent * (dat_max.wind.x - dat_min.wind.x);
    dat.wind.y = dat_min.wind.y + persent * (dat_max.wind.y - dat_min.wind.y);
    return dat;
};
canvas.app.location.view.elements.EventPanel = function () {
    canvas.px.Container.call(this);
    var Conf = canvas.app.location.model;
    this.maxWidth = 0;
    this.bg = new canvas.px.Graphics();
    this.addChild(this.bg);
    this.eventTF = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD, 16705718, 300, 20, "left");
    this.eventTF.text = Conf.OBJ_EVENT.title;
    this.addChild(this.eventTF);
    this.maxWidth = Math.max(this.eventTF.textWidth, this.maxWidth);
    this.eventTF.y = 2;
    this.eventPointTF = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_10, 16705718, 300, 20, "left");
    this.eventPointTF.text = Conf.OBJ_EVENT.point_title;
    this.eventPointTF.y = Math.round(this.eventTF.y + this.eventTF.height - 2);
    this.addChild(this.eventPointTF);
    this.maxWidth = Math.max(this.eventPointTF.textWidth, this.maxWidth);
    this.sliser = new canvas.px.Graphics();
    this.sliser.y = Math.round(this.eventPointTF.y + this.eventPointTF.height + 1);
    this.addChild(this.sliser);
    var dy = this.sliser.y + 2;
    for (var prop in Conf.OBJ_EVENT.tasks) {
        var task = Conf.OBJ_EVENT.tasks[prop];
        if (task.max_value == 0) continue;
        if (!task.noUserValue) {
            var myBullet = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "bullet"));
            myBullet.y = dy + 4;
            var myTF = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_10, 16705718, 300, 20, "left");
            myTF.position.set(myBullet.x + myBullet.width + 3, dy);
            this.addChild(myBullet);
            myTF.text = Conf.STRINGS_ARR[Conf.S_TO_YOU] + " " + String(task.title) + "  " + task.user_value + String(task.max_user_value != 0 ? "/" + task.max_user_value : "");
            this.addChild(myTF);
            this.maxWidth = Math.max(myTF.textWidth, this.maxWidth);
            dy += 12;
        }
        var commandBullet = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "bullet"));
        commandBullet.y = dy + 4;
        this.addChild(commandBullet);
        var commandTF = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_10, 16705718, 300, 20, "left");
        commandTF.text = Conf.STRINGS_ARR[Conf.S_TO_ALL] + " " + String(task.title) + "  " + task.value + String(task.max_value != 0 ? "/" + task.max_value : "");
        commandTF.position.set(commandBullet.x + commandBullet.width + 3, dy);
        this.addChild(commandTF);
        this.maxWidth = Math.max(commandTF.textWidth, this.maxWidth);
        dy += 12;
    }
    this.sliser.beginFill(8937019, 1);
    this.sliser.drawRect(-4, 0, this.maxWidth + 5, 1);
    this.sliser.endFill();
    this.bg.beginFill(0, 0.55);
    this.bg.moveTo(0, 0);
    this.bg.lineTo(this.maxWidth + 47, 0);
    this.bg.lineTo(this.maxWidth + 47, this.height + 5);
    this.bg.lineTo(0, this.height);
    this.bg.lineTo(-10, this.height - 10);
    this.bg.lineTo(-10, 0);
    this.bg.lineTo(0, 0);
    this.bg.endFill();
};
canvas.app.location.view.elements.EventPanel.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.location.view.elements.FightButton = function (num) {
    var Conf = canvas.app.location.model;
    canvas.px.Container.call(this);
    var bg = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "big_fight_bg"));
    this.addChild(bg);
    this.button = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "big_fight_btn"), [0, 0, 0, 0]);
    this.addChild(this.button);
    this.button.position.set(7, 20);
    var tf = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_10_BOLD, 16758046, 20, 16, "center");
    tf.text = num.toString();
    this.addChild(tf);
    tf.position.set(18, 49);
    canvas.EventManager.dispatchEvent(canvas.app.location.Event.HINT_ADD, null, { target: this, params: new canvas.utils.HintParams(new canvas.app.view.MappingHint(Conf.STRINGS_ARR[Conf.S_GREAT_FIGHT])) });
    this.interactive = true;
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.btn, this.clickHandler, this);
};
canvas.app.location.view.elements.FightButton.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.location.view.elements.FightButton.prototype.clickHandler = function () {
    enterGreatFights();
};
canvas.app.location.view.elements.FightButton.prototype.destroy = function () {
    canvas.EventManager.removeEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.btn, this.clickHandler, this);
    canvas.EventManager.dispatchEvent(canvas.app.location.Event.HINT_REMOVE, null, { target: this });
    canvas.px.Container.prototype.destroy.apply(this, arguments);
};
canvas.app.location.view.elements.ResurrectItem = function () {
    this._enabled = true;
    Object.defineProperty(this, "enabled", {
        get: function () {
            return this._enabled;
        },
        set: function (value) {
            this._enabled = value;
            this.button.enabled = value;
            this.image.filters = value ? [] : [canvas.Functions.getGreyScale()];
        },
    });
    this._data = null;
    Object.defineProperty(this, "data", {
        get: function () {
            return this._data;
        },
        set: function (value) {
            this._data = value;
            this.update();
        },
    });
    canvas.px.Container.call(this);
    this.container = new canvas.px.Container();
    this.addChild(this.container);
    this.image = new canvas.px.Container();
    this.container.addChild(this.image);
    var sprite = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "icon_back"));
    this.image.addChild(sprite);
    this.loader = new canvas.ui.Image();
    this.image.addChild(this.loader);
    this.image.x = 60;
    this.button = new canvas.app.location.view.elements.ResurrectButton();
    this.container.addChild(this.button);
    this.button.y = 40;
    this.button.setSize(190, 0);
    this.container.click = this.clickHandler.bind(this);
    this.container.mouseover = this.overHandler.bind(this);
    this.container.mouseout = this.outHandler.bind(this);
    this.container.buttonMode = true;
    this.container.interactive = true;
    this.interactive = true;
};
canvas.app.location.view.elements.ResurrectItem.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.location.view.elements.ResurrectItem.prototype.update = function () {
    canvas.EventManager.dispatchEvent(canvas.app.location.Event.HINT_REMOVE, null, { target: this });
    if (this._data != null) {
        switch (this._data.id) {
            case 1:
                this.button.setTitle(canvas.Translator.getText(731) + " " + this._data.title, canvas.ResourceLoader.getImage("ui", "silver"));
                break;
            default:
                this.button.setTitle(this._data.title);
        }
        this.enabled = this.container.buttonMode = this._data.enabled;
        if (this._data.error) {
            canvas.EventManager.dispatchEvent(canvas.app.location.Event.HINT_ADD, null, { target: this, params: new canvas.utils.HintParams(new canvas.app.view.MappingHint(this._data.error)) });
        }
        if (this.loader.name != this._data.picture) {
            this.loader.name = this._data.picture;
            this.loader.setImage(this._data.picture);
        }
    } else {
        this.visible = false;
    }
};
canvas.app.location.view.elements.ResurrectItem.prototype.clickHandler = function () {
    if (!this._enabled) return;
    resurrect(this._data.id);
};
canvas.app.location.view.elements.ResurrectItem.prototype.overHandler = function () {
    this.filters = [canvas.Functions.getBrightness(1.2)];
};
canvas.app.location.view.elements.ResurrectItem.prototype.outHandler = function () {
    this.filters = null;
};
canvas.app.location.view.elements.ResurrectButton = function () {
    canvas.app.view.MainButton.call(this);
    this.field = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD, 16375713, 100, 20, "center");
    this.addChild(this.field);
    this.field.position.set(25, 10);
    this.imageContainer = new canvas.px.Sprite(canvas.px.TextureEmpty);
    this.addChild(this.imageContainer);
};
canvas.app.location.view.elements.ResurrectButton.prototype = Object.create(canvas.app.view.MainButton.prototype);
canvas.app.location.view.elements.ResurrectButton.prototype.setTitle = function (text, image) {
    this.imageContainer.texture = canvas.px.TextureEmpty;
    if (text == undefined) text = "";
    this.field.text = text;
    this.field.x = 25;
    if (image != null) {
        this.imageContainer.texture = image;
        var r = this.field.getLocalBounds();
        this.imageContainer.x = this.field.x + r.x + r.width + 3 - Math.round(image.width * 0.5);
        this.imageContainer.y = Math.round((34 - image.height) * 0.5);
        this.field.x = 25 - Math.round(image.width * 0.5);
    }
};
canvas.app.location.view.elements.CampaignInfo = function () {
    this._data = null;
    Object.defineProperty(this, "data", {
        get: function () {
            return this._data;
        },
        set: function (value) {
            if (this._data === value) return;
            this._data = value;
            this.update();
        },
    });
    canvas.px.Container.call(this);
    this.image = new canvas.ui.Image();
    this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "campaign_back")));
    this.addChild(this.image);
    this.image.position.set(12, 6);
    this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "campaign_front")));
    this.timeField = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_10_BOLD, 6236456, 66, 20, "center");
    this.timeField.position.set(8, 68);
    this.addChild(this.timeField);
    this.interactive = true;
    this.buttonMode = true;
    this.click = this.clickHandler.bind(this);
    this.hint = new canvas.app.view.MappingHint();
    canvas.EventManager.dispatchEvent(canvas.app.location.Event.HINT_ADD, null, { target: this, params: new canvas.utils.HintParams(this.hint) });
};
canvas.app.location.view.elements.CampaignInfo.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.location.view.elements.CampaignInfo.prototype.update = function () {
    if (!this.data) return;
    this.image.setImage(this.data.picture);
    this.hint.update(this.data.title);
    this.updateTime();
};
canvas.app.location.view.elements.CampaignInfo.prototype.updateTime = function () {
    if (!this.data) return;
    this.timeField.text = canvas.Functions.formatDate((this.data.finishTime - canvas.app.location.model.serverTime.getTime()) * 1e3, "00", 2, true);
};
canvas.app.location.view.elements.CampaignInfo.prototype.clickHandler = function () {
    tProcessMenu("b36", { url: "/area_banks.php?mode=user_campaign" });
};
canvas.app.location.view.elements.CampaignInfo.prototype.destroy = function () {
    this.data = null;
    if (this.parent) this.parent.removeChild(this);
};
canvas.app.location.view.popups.Popups = function (hintEventLink) {
    canvas.px.Container.call(this);
    this.hintEvent = hintEventLink;
};
canvas.app.location.view.popups.Popups.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.location.view.popups.Popups.prototype.init = function (popupType, popupParams) {
    var popup;
    var hint;
    canvas.Functions.destroyChildren(this);
    switch (popupType) {
        case canvas.app.location.Const.POPUP_ZERO_LEVEL:
            popup = new canvas.app.location.view.popups.PopupZeroLevel(parseInt(popupParams.time_bonus_online) * 1e3, popupParams.time_bonus_message == undefined ? "Останься в Легенде и получи подарок!" : popupParams.time_bonus_message);
            hint = new canvas.app.view.MappingHint(popupParams.time_bonus_hint == undefined ? "Оставайтесь в игре и через указанное на таймере время получите подарок!" : popupParams.time_bonus_hint);
            canvas.EventManager.dispatchEvent(this.hintEvent.HINT_ADD, null, { target: popup, params: new canvas.utils.HintParams(hint) });
            if (popup.children.length > 0) {
                return this.addChild(popup);
            }
            break;
        case canvas.app.location.Const.POPUP_ACTIVITY:
            popup = new canvas.app.location.view.popups.PopupActivity(popupParams);
            hint = new canvas.app.view.MappingHint(canvas.Translator.getText(733));
            canvas.EventManager.dispatchEvent(this.hintEvent.HINT_ADD, null, { target: popup, params: new canvas.utils.HintParams(hint) });
            if (popup.children.length > 0) {
                return this.addChild(popup);
            }
            break;
    }
    return null;
};
canvas.app.location.view.popups.Popups.prototype.removeHint = function (target) {
    canvas.EventManager.dispatchEvent(this.hintEvent.HINT_REMOVE, null, { target: target });
};
canvas.app.location.view.popups.Popup = function () {
    canvas.px.Container.call(this);
    this.container = new canvas.px.Container();
    this.background = new canvas.px.Graphics();
    this.addChild(this.background);
    this.addChild(this.container);
    this.interactive = true;
    this.container.interactive = true;
    this.buttonMode = true;
    this.container.click = this.clickHandler.bind(this);
    this.container.mouseover = this.overHandler.bind(this);
    this.container.mouseout = this.outHandler.bind(this);
};
canvas.app.location.view.popups.Popup.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.location.view.popups.Popup.prototype.update = function (w, h) {
    if (w == undefined) w = 0;
    if (h == undefined) h = 0;
    this.background.clear();
    this.background.beginFill(1118481, 0.5);
    this.background.drawRoundedRect(0, 0, w == 0 ? this.container.width : w, h == 0 ? this.container.height : h, 7);
    this.background.endFill();
};
canvas.app.location.view.popups.Popup.prototype.clickHandler = function () {};
canvas.app.location.view.popups.Popup.prototype.overHandler = function () {};
canvas.app.location.view.popups.Popup.prototype.outHandler = function () {};
canvas.app.location.view.popups.Popup.prototype.destroy = function () {
    if (this.parent) {
        if (this.parent.removeHint) {
            this.parent.removeHint(this);
        }
        this.parent.removeChild(this);
    }
    if (this.container) {
        this.container.click = null;
        this.container.mouseover = null;
        this.container.mouseout = null;
    }
    canvas.px.Container.prototype.destroy.apply(this, [{ children: true }]);
};
canvas.app.location.view.popups.PopupZeroLevel = function (timeStamp, title) {
    canvas.app.location.view.popups.Popup.call(this);
    this.checkPoints = [120, 600, 1500, 3600];
    this.baseTimeStamp = this.timeStamp = timeStamp;
    this.next = this.getNext();
    this.timeField = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD, 16777215, 64, 20, "center");
    this.timeField.position.set(66, 29);
    this.timeField.text = "?";
    var sprite = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "chest"));
    sprite.position.set(18, 6);
    this.container.addChild(sprite);
    this.container.addChild(this.timeField);
    this.removeChild(this.background);
    this.date = new Date();
    this.baseTime = this.constBaseTime = this.date.getTime();
    this.diff = this.next - timeStamp;
    this.date.setTime(this.diff);
    this.request = new canvas.utils.URLRequest("time_bonus.php", "GET", { time: 0 });
    canvas.EventManager.addEventListener(canvas.utils.URLRequestEvent.EVENT_ERROR, this.request, this.requestIOErrorHandler, this);
    this.timer = setInterval(this.timerHandler.bind(this), 1e3);
    this.timerHandler();
    this.testTime();
};
canvas.app.location.view.popups.PopupZeroLevel.prototype = Object.create(canvas.app.location.view.popups.Popup.prototype);
canvas.app.location.view.popups.PopupZeroLevel.prototype.testTime = function () {
    if (this.timeStamp >= this.checkPoints[this.checkPoints.length - 1] * 1e3) {
        this.destroy();
        return false;
    }
    return true;
};
canvas.app.location.view.popups.PopupZeroLevel.prototype.getNext = function () {
    var result = 0;
    for (var i = 0; i < this.checkPoints.length; i++) {
        if (this.timeStamp < this.checkPoints[i] * 1e3) {
            result = this.checkPoints[i] * 1e3;
            break;
        }
    }
    return result;
};
canvas.app.location.view.popups.PopupZeroLevel.prototype.timerHandler = function () {
    var date = new Date();
    var t = this.date.getTime() - (date.getTime() - this.baseTime);
    t = t < 0 ? 0 : t;
    this.date.setTime(t);
    this.baseTime = date.getTime();
    this.timeField.text = canvas.Functions.setNumberLen(this.date.getMinutes()) + ":" + canvas.Functions.setNumberLen(this.date.getSeconds());
    this.timeStamp = this.baseTimeStamp + (date.getTime() - this.constBaseTime);
    if (this.date.getTime() <= 0) {
        if (this.next > 0) {
            this.request.params.time = Math.round(this.next * 0.001).toString();
            this.request.load();
        }
        this.next = this.getNext();
        if (this.next == 0) {
            this.destroy();
            return;
        }
        this.diff = this.next - this.timeStamp;
        this.date.setTime(this.diff);
        this.timerHandler();
    }
};
canvas.app.location.view.popups.PopupZeroLevel.prototype.requestIOErrorHandler = function () {
    this.destroy();
};
canvas.app.location.view.popups.PopupZeroLevel.prototype.destroy = function () {
    if (this.timer) clearInterval(this.timer);
    if (this.request) canvas.EventManager.removeEventListener(canvas.utils.URLRequestEvent.EVENT_ERROR, this.request, this.requestIOErrorHandler, this);
    canvas.app.location.view.popups.Popup.prototype.destroy.apply(this, arguments);
};
canvas.app.location.view.popups.PopupActivity = function (url) {
    canvas.app.location.view.popups.Popup.call(this);
    this.url = url;
    this.hitArea = this.container.hitArea = new canvas.px.Circle(40, 40, 32);
    this.container.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "activities")));
};
canvas.app.location.view.popups.PopupActivity.prototype = Object.create(canvas.app.location.view.popups.Popup.prototype);
canvas.app.location.view.popups.PopupActivity.prototype.clickHandler = function () {
    canvas.app.location.view.popups.Popup.prototype.clickHandler.apply(this, arguments);
    canvas.Functions.navigateToURL(this.url, "_self");
    this.destroy();
};
canvas.app.location.view.popups.PopupActivity.prototype.overHandler = function () {
    canvas.app.location.view.popups.Popup.prototype.overHandler.apply(this, arguments);
    this.filters = [canvas.Functions.getBrightness(1.2)];
};
canvas.app.location.view.popups.PopupActivity.prototype.outHandler = function () {
    canvas.app.location.view.popups.Popup.prototype.outHandler.apply(this, arguments);
    this.filters = null;
};
canvas.app.location.view.popups.HintBtn = function (start, stop, curTime, hintWidth, timeZoneOffset) {
    canvas.px.Container.call(this);
    if (hintWidth == undefined) hintWidth = 200;
    if (timeZoneOffset == undefined) timeZoneOffset = 240;
    this.isNow = false;
    this.hintText = "";
    this.backgroundColor = 1118481;
    this.textColor = 0;
    this.hintWidth = hintWidth;
    this.currentDate = new Date();
    this.currentDate.setTime(curTime - (-timeZoneOffset - this.currentDate.getTimezoneOffset()) * 6e4);
    this.stopDate = new Date();
    this.stopDate.setTime(stop - (-timeZoneOffset - this.currentDate.getTimezoneOffset()) * 6e4);
    if (!this.testTime()) return;
    this.dateStart = new Date();
    this.dateStart.setTime(start - (-timeZoneOffset - this.currentDate.getTimezoneOffset()) * 6e4);
    this.image = new canvas.px.Container();
    this.addChild(this.image);
    if (Math.floor((this.currentDate.valueOf() - this.dateStart.valueOf()) / 1e3) > 0) {
        this.isNow = true;
        this.timeLeftSec = Math.floor((this.stopDate.valueOf() - this.currentDate.valueOf()) / 1e3);
    } else {
        this.timeLeftSec = Math.floor((this.dateStart.valueOf() - this.currentDate.valueOf()) / 1e3);
    }
    this.timer = setInterval(this.timerHandler.bind(this), 1e3);
    this.interactive = true;
    this.image.buttonMode = true;
    this.image.interactive = true;
    this.click = this.onClick.bind(this);
    this.image.mouseover = this.onRollOver.bind(this);
    this.image.mouseout = this.onRollOut.bind(this);
};
canvas.app.location.view.popups.HintBtn.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.location.view.popups.HintBtn.prototype.testTime = function () {
    return this.stopDate.valueOf() >= this.currentDate.valueOf();
};
canvas.app.location.view.popups.HintBtn.prototype.onClick = function () {
    this.click = null;
    var maskClip = new canvas.px.Graphics();
    maskClip.beginFill(16777215, 0.4);
    maskClip.drawRect(-this.image.width, -this.image.height, this.image.width, this.image.height);
    maskClip.endFill();
    this.addChild(maskClip);
    this.image.mask = maskClip;
    var tween = new canvas.px.Tween.Tween(this.image)
        .to({ y: 50 }, 4e3)
        .easing(canvas.px.Tween.Easing.Elastic.Out)
        .onUpdate(function () {})
        .onComplete(this.onRemoveBanner.bind(this))
        .start();
};
canvas.app.location.view.popups.HintBtn.prototype.getTimeLeft = function () {
    return this.timeLeftSec < 60 ? this.getFormattedTimeBySeconds(this.timeLeftSec, false, true, true, false) : this.getFormattedTimeBySeconds(this.timeLeftSec, true, true, false, false);
};
canvas.app.location.view.popups.HintBtn.prototype.timerHandler = function () {
    if (this.image == null) {
        clearInterval(this.timer);
        return;
    }
    this.timeLeftSec--;
    if (this.timeLeftSec <= 0) {
        clearInterval(this.timer);
        if (this.isNow) {
            this.removeChild(this.image);
            this.image = null;
            return;
        } else {
            this.isNow = true;
            this.timeLeftSec = Math.floor((this.stopDate.valueOf() - this.dateStart.valueOf()) / 1e3);
            this.timer = setInterval(this.timerHandler.bind(this), 1e3);
            this.setHintText(this.updateHint(true), 1118481, 16705718);
            return;
        }
    }
    this.setHintText(this.updateHint(this.isNow), 1118481, 16705718);
};
canvas.app.location.view.popups.HintBtn.prototype.updateHint = function (isInProcess) {
    if (isInProcess == undefined) isInProcess = false;
    return "";
};
canvas.app.location.view.popups.HintBtn.prototype.onRemoveBanner = function () {
    this.removeChild(this.image);
    this.image.destroy({ children: true });
    this.image = null;
    this.destroy();
};
canvas.app.location.view.popups.HintBtn.prototype.getFormattedTimeBySeconds = function (_seconds, _showHours, _showMinutes, _showSeconds, _showMilliseconds) {
    var result = "";
    var seconds = Math.floor(_seconds);
    var milliseconds = Math.floor(1e3 * (_seconds - seconds));
    var minutes = Math.floor(seconds / 60);
    seconds -= minutes * 60;
    var hours = Math.floor(minutes / 60);
    minutes -= hours * 60;
    if (_showHours) {
        result += hours < 10 ? "0" : "";
        result += hours.toString();
    }
    if (_showMinutes) {
        if (_showHours) result += ":";
        result += minutes < 10 ? "0" : "";
        result += minutes.toString();
    }
    if (_showSeconds) {
        if (_showMinutes) result += ":";
        result += seconds < 10 ? "0" : "";
        result += seconds.toString();
    }
    if (_showMilliseconds) {
        if (_showSeconds) {
            result += ".";
            result += (milliseconds < 100 ? "0" : "") + (milliseconds < 10 ? "0" : "");
        }
        result += milliseconds.toString();
    }
    return result;
};
canvas.app.location.view.popups.HintBtn.prototype.getTimeFormated = function (unixTimeStamp) {
    var d = new Date();
    d.setTime(unixTimeStamp * 1e3);
    var result = d.getHours() < 10 ? "0" + d.getHours().toString() : d.getHours().toString();
    result += ":";
    result += d.getMinutes() < 10 ? "0" + d.getMinutes().toString() : d.getMinutes().toString();
    return result;
};
canvas.app.location.view.popups.HintBtn.prototype.setHintText = function (text, backgroundColor, textColor) {
    if (text == undefined) text = "";
    if (backgroundColor == undefined) backgroundColor = 1118481;
    if (textColor == undefined) textColor = 0;
    this.hintText = text;
    this.backgroundColor = backgroundColor;
    this.textColor = textColor;
    this.updateHintText();
};
canvas.app.location.view.popups.HintBtn.prototype.updateHintText = function () {
    if (this.hint == null) return;
    canvas.Functions.destroyChildren(this.hint);
    this.hint.clear();
    this.textField = new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_11, canvas.Const.FONT_TAHOMA_11_BOLD, this.textColor, this.hintWidth, 500, "center");
    this.textField.text = this.hintText;
    this.hint.beginFill(this.backgroundColor, 0.55);
    var r = this.textField.getBounds();
    var w = this.hintWidth + 8;
    var h = this.textField.textHeight + 14;
    this.hint.drawRoundedRect(-4, 0, w, h, 6);
    this.hint.endFill();
    this.textField.x = -this.textField.x;
    this.textField.y = 2;
    this.hint.addChild(this.textField);
    this.hint.position.set(-w - 20, -h);
};
canvas.app.location.view.popups.HintBtn.prototype.onRollOver = function () {
    if (this.hintText == "") return;
    this.hint = new canvas.px.Graphics();
    this.updateHintText();
    this.addChildAt(this.hint, 0);
};
canvas.app.location.view.popups.HintBtn.prototype.onRollOut = function () {
    if (this.hint != null) this.removeChild(this.hint);
    this.hint = null;
};
canvas.app.location.view.popups.HintBtn.prototype.destroy = function () {
    clearInterval(this.timer);
    canvas.px.Container.prototype.destroy.apply(this, [{ children: true }]);
};
canvas.app.location.view.popups.TechBtn = function (parameters, enterFrameEvent) {
    this.link = "";
    if (parameters) {
        this.start = parseInt(parameters["tech_works_start"]) * 1e3;
        this.stop = parseInt(parameters["tech_works_stop"]) * 1e3;
        this.curTime = parseInt(parameters["current_time"]) * 1e3;
        this.title = parameters["tech_works_name"];
        this.description = parameters["tech_works_description"];
        if (parameters["tech_works_link"] != undefined) this.link = parameters["tech_works_link"];
    }
    canvas.app.location.view.popups.HintBtn.call(this, this.start, this.stop, this.curTime, 200, parameters.time_zone == undefined ? 240 : parseInt(parameters.time_zone));
    if (!this.testTime()) return;
    this.techBtn = new canvas.app.location.view.popups.TechnicalWorksBtn(enterFrameEvent);
    this.image.addChild(this.techBtn);
    this.techBtn.updateTimeLeft("--:--");
};
canvas.app.location.view.popups.TechBtn.prototype = Object.create(canvas.app.location.view.popups.HintBtn.prototype);
canvas.app.location.view.popups.TechBtn.prototype.timerHandler = function () {
    this.techBtn.updateTimeLeft(this.getTimeLeft(), this.isNow);
    canvas.app.location.view.popups.HintBtn.prototype.timerHandler.call(this);
};
canvas.app.location.view.popups.TechBtn.prototype.updateHint = function (isInProcess) {
    if (isInProcess == undefined) isInProcess = false;
    var htmlText = "<font color='#fcb567'><b>" + this.title + "</b></font><br/><br/>";
    htmlText += "<font face='" + canvas.Const.FONT_TAHOMA_10 + "' color='#e6dc85'>" + this.description + "</font>";
    htmlText +=
        "<font color='#fcb567'><br/><br/>" +
        canvas.Translator.getText(2028) +
        " " +
        this.getTimeFormated(Math.floor(this.dateStart.getTime() / 1e3)) +
        " " +
        canvas.Translator.getText(2029) +
        " " +
        this.getTimeFormated(Math.floor(this.stopDate.getTime() / 1e3)) +
        "</font>";
    if (isInProcess) {
        htmlText += "<font color='#FF0000'> (" + canvas.Translator.getText(2032).toLowerCase() + ")<br/></font>";
        htmlText += "<font face='" + canvas.Const.FONT_TAHOMA_10 + "' color='#e6dc85'>" + canvas.Translator.getText(2030) + ": " + this.getTimeLeft() + "</font>";
    } else {
        htmlText += "<font face='" + canvas.Const.FONT_TAHOMA_10 + "' color='#e6dc85'><br/>" + canvas.Translator.getText(2031) + ": " + this.getTimeLeft() + "</font>";
    }
    return htmlText;
};
canvas.app.location.view.popups.TechBtn.prototype.updateHintText = function () {
    canvas.app.location.view.popups.HintBtn.prototype.updateHintText.call(this);
    if (this.hint != null) {
        this.hint.clear();
        this.hint.beginFill(this.backgroundColor, 0.55);
        var w = this.hintWidth + 8;
        var h = this.textField.textHeight + 54;
        this.hint.drawRoundedRect(-4, 0, w, h, 6);
        this.hint.endFill();
        this.hint.position.set(-w - 20, -h);
        this.hint.y = -h;
    }
};
canvas.app.location.view.popups.TechBtn.prototype.onClick = function () {
    canvas.app.location.view.popups.HintBtn.prototype.onClick.call(this);
    if (this.link) canvas.Functions.navigateToURL(this.link, "_blank");
};
canvas.app.location.view.popups.InfoBtn = function (parameters) {
    this.link = "";
    if (parameters) {
        this.start = parseInt(parameters["info_start"]) * 1e3;
        this.stop = parseInt(parameters["info_stop"]) * 1e3;
        this.curTime = parseInt(parameters["current_time"]) * 1e3;
        this.title = parameters["info_name"];
        this.description = parameters["info_description"];
        if (parameters["info_link"] != undefined) this.link = parameters["info_link"];
    }
    canvas.app.location.view.popups.HintBtn.call(this, this.start, this.stop, this.curTime, 200, parameters.time_zone == undefined ? 240 : parseInt(parameters.time_zone));
    if (!this.testTime()) return;
    this.image.addChild(new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "info_button")));
    this.image.position.set(-50, -30);
};
canvas.app.location.view.popups.InfoBtn.prototype = Object.create(canvas.app.location.view.popups.HintBtn.prototype);
canvas.app.location.view.popups.InfoBtn.prototype.updateHint = function (isInProcess) {
    if (isInProcess == undefined) isInProcess = false;
    var htmlText = "<br/><br/><br/><font color='#fcb567'><b>" + this.title + "<br/><br/></b></font>";
    htmlText += "<font face='" + canvas.Const.FONT_TAHOMA_10 + "' color='#e6dc85'>" + this.description + "</font>";
    htmlText +=
        "<font color='#fcb567'><br/><br/>" +
        canvas.Translator.getText(2028) +
        " " +
        this.getTimeFormated(Math.floor(this.dateStart.getTime() / 1e3)) +
        "<br/> " +
        canvas.Translator.getText(2029) +
        " " +
        this.getTimeFormated(Math.floor(this.stopDate.getTime() / 1e3)) +
        "</font><br/>";
    if (isInProcess) {
        htmlText += "<font face='" + canvas.Const.FONT_TAHOMA_10 + "' color='#e6dc85'>" + canvas.Translator.getText(2030) + ": " + this.getTimeLeft() + "</font>";
    } else {
        htmlText += "<font face='" + canvas.Const.FONT_TAHOMA_10 + "' color='#e6dc85'><br/>" + canvas.Translator.getText(2031) + ": " + this.getTimeLeft() + "</font>";
    }
    return htmlText;
};
canvas.app.location.view.popups.InfoBtn.prototype.getTimeFormated = function (unixTimeStamp) {
    var d = new Date();
    d.setTime(unixTimeStamp * 1e3);
    return canvas.app.location.view.popups.HintBtn.prototype.getTimeFormated.call(this, unixTimeStamp) + " " + d.getDate().toString() + " " + canvas.Translator.getText(2004 + d.getMonth());
};
canvas.app.location.view.popups.InfoBtn.prototype.updateHintText = function () {
    canvas.app.location.view.popups.HintBtn.prototype.updateHintText.call(this);
    if (this.hint != null) {
        this.hint.clear();
        this.hint.beginFill(this.backgroundColor, 0.55);
        var w = this.hintWidth + 8;
        var h = this.textField.textHeight + 54;
        this.hint.drawRoundedRect(-4, 0, w, h, 6);
        this.hint.endFill();
        this.hint.x = -this.hintWidth - 20;
        this.hint.y = -this.image.height;
    }
};
canvas.app.location.view.popups.InfoBtn.prototype.onClick = function () {
    this.click = null;
    var maskClip = new canvas.px.Mask(this.image.width, this.image.height);
    maskClip.position.set(this.image.x, this.image.y);
    this.addChild(maskClip);
    this.image.mask = maskClip;
    var tween = new canvas.px.Tween.Tween(this.image)
        .to({ x: this.image.x + this.image.width + 20 }, 4e3)
        .easing(canvas.px.Tween.Easing.Elastic.Out)
        .onUpdate(function () {})
        .onComplete(this.onRemoveBanner.bind(this))
        .start();
    if (this.link) canvas.Functions.navigateToURL(this.link, "_blank");
};
canvas.app.location.view.popups.TechnicalWorksBtn = function (enterFrameEvent) {
    canvas.px.Container.call(this);
    this.enterFrameEvent = enterFrameEvent;
    this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "tech_back")));
    this.position.set(-this.width - 20, -this.height);
    this.timeField = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_9, 15518322, 50, 20, "right");
    this.addChild(this.timeField);
    this.timeField.position.set(-17, 26);
    var g = new canvas.px.Graphics();
    g.beginFill(16777215, 1);
    g.drawCircle(55, 21, 17);
    g.endFill();
    this.addChild(g);
    this.container = new canvas.px.Container();
    this.container.mask = g;
    this.wheel1 = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "tech_wheel"));
    this.wheel2 = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "tech_wheel"));
    this.container.addChild(this.wheel1);
    this.container.addChild(this.wheel2);
    this.wheel1.anchor.set(0.5, 0.5);
    this.wheel2.anchor.set(0.5, 0.5);
    this.addChild(this.container);
    this.wheel1.position.set(41, 11);
    this.wheel2.position.set(65, 35);
    this.hitArea = new canvas.px.Circle(55, 21, 20);
    canvas.EventManager.addEventListener(this.enterFrameEvent, null, this.updateHandler, this);
};
canvas.app.location.view.popups.TechnicalWorksBtn.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.location.view.popups.TechnicalWorksBtn.prototype.updateTimeLeft = function (time, isFilterUsed, color) {
    if (isFilterUsed == undefined) isFilterUsed = false;
    if (color == undefined) color = 15518322;
    this.speed = isFilterUsed ? 4 : 1;
    this.timeField.color = color;
    this.timeField.text = time;
};
canvas.app.location.view.popups.TechnicalWorksBtn.prototype.updateHandler = function () {
    this.wheel1.rotation += this.speed * 0.02;
    this.wheel2.rotation -= this.speed * 0.02;
};
canvas.app.location.view.popups.TechnicalWorksBtn.prototype.destroy = function () {
    canvas.EventManager.removeEventListener(this.enterFrameEvent, null, this.updateHandler, this);
    canvas.px.Container.prototype.destroy.apply(this, [{ children: true }]);
};
canvas.app.location.view.popups.NPCEventBtn = function (data) {
    Object.defineProperty(this, "imageWidth", {
        get: function () {
            return this.image ? this.image.width : 0;
        },
        set: function (value) {},
    });
    this.data = data;
    canvas.app.location.view.popups.HintBtn.call(this, 0, this.data.finishTime * 1e3, Date.now(), 200, canvas.app.location.model.serverTimeZoneOffset);
    if (!this.testTime()) return;
    this.loader = new canvas.ui.Image(this.data.picture);
    this.image.addChild(this.loader);
    if (this.loader.ready) {
        this.completeHandler();
    } else {
        canvas.EventManager.addEventListener(canvas.ui.ImageEvent.EVENT_LOADED, this.loader, this.completeHandler, this);
    }
};
canvas.app.location.view.popups.NPCEventBtn.prototype = Object.create(canvas.app.location.view.popups.HintBtn.prototype);
canvas.app.location.view.popups.NPCEventBtn.prototype.updateHint = function (isInProcess) {
    if (isInProcess == undefined) isInProcess = false;
    var htmlText = "<font color='#fcb567'><b>" + this.data.title + "<br/><br/></b></font>";
    if (this.data.description != null) htmlText += "<font face='" + canvas.Const.FONT_TAHOMA_10 + "' color='#e6dc85'>" + this.data.description + "</font>";
    if (isInProcess == true) {
        htmlText += "<font size='11' color='#FF0000'> (" + canvas.Translator.getText(2032).toLowerCase() + ")<br/></font>";
        htmlText += "<font face='" + canvas.Const.FONT_TAHOMA_10 + "' color='#e6dc85'>" + canvas.Translator.getText(2030) + ": " + this.getTimeLeft() + "</font>";
    } else {
        htmlText += "<font face='" + canvas.Const.FONT_TAHOMA_10 + "' color='#e6dc85'><br/>" + canvas.Translator.getText(2031) + ": " + this.getTimeLeft() + "</font>";
    }
    return htmlText;
};
canvas.app.location.view.popups.NPCEventBtn.prototype.updateHintText = function (isInProcess) {
    canvas.app.location.view.popups.HintBtn.prototype.updateHintText.call(this);
    this.moveHint();
};
canvas.app.location.view.popups.NPCEventBtn.prototype.timerHandler = function () {
    canvas.app.location.view.popups.HintBtn.prototype.timerHandler.call(this);
    if (!this.image) {
        if (this.parent) this.parent.removeChild(this);
        canvas.EventManager.dispatchEvent(canvas.app.location.Event.UPDATE_NPC_EVENTS);
    }
};
canvas.app.location.view.popups.NPCEventBtn.prototype.moveHint = function () {
    if (this.hint) {
        this.hint.position.set(this.image.width, this.image.height);
    }
};
canvas.app.location.view.popups.NPCEventBtn.prototype.onClick = function () {
    canvas.Functions.navigateToURL(this.data.url, "_self");
};
canvas.app.location.view.popups.NPCEventBtn.prototype.completeHandler = function () {
    canvas.EventManager.removeEventListener(canvas.ui.ImageEvent.EVENT_LOADED, this.loader, this.completeHandler, this);
    delete this.loader;
    this.moveHint();
    canvas.EventManager.dispatchEvent(canvas.app.location.Event.UPDATE_NPC_EVENTS);
};
canvas.app.location.view.popups.PopupWheelFortune = function (title, expireTime, url) {
    canvas.px.Container.call(this);
    this.title = title;
    this.expireTime = expireTime;
    this.url = url;
    this.back = this.addChild(new canvas.px.RoundRect(0, 0.5, 240, 45, 8, 8));
    this.field = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD, 16705718, this.back.width, this.back.height, "center", "middle"));
    this.interactive = true;
    this.buttonMode = true;
    this.click = this.clickHandler.bind(this);
    this.updateTime();
};
canvas.app.location.view.popups.PopupWheelFortune.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.location.view.popups.PopupWheelFortune.prototype.clickHandler = function () {
    canvas.Functions.navigateToURL(this.url, "_self");
};
canvas.app.location.view.popups.PopupWheelFortune.prototype.updateTime = function () {
    var time = this.expireTime - canvas.app.location.model.serverTime.getTime();
    this.field.text = this.title + "\n" + canvas.Functions.formatDate(time * 1e3, "00", 2);
    if (time <= 0) this.destroy();
};
canvas.app.location.view.popups.PopupWheelFortune.prototype.destroy = function () {
    if (this.parent) this.parent.removeChild(this);
    canvas.px.Container.prototype.destroy.apply(this, [{ children: true }]);
};
canvas.app.location.view.fronts.FrontsIcon = function (base) {
    canvas.px.Container.call(this);
    this.baseLnk = base;
    this.items = [];
    var d;
    this.infoContainer = new canvas.px.Container();
    this.addChild(this.infoContainer);
    this.infoContainer.x = 35;
    this.infoContainer.y = -70;
    this.container = new canvas.px.Container();
    this.addChild(this.container);
    this.container.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "fronts3")));
    d = this.container.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "fronts4")));
    this.maskBlue = new canvas.px.Graphics();
    this.maskBlue.beginFill(16777215, 1);
    this.maskBlue.drawRect(0, 0, 40, 40);
    this.maskBlue.endFill();
    this.maskBlue.position.set(5, 5);
    this.container.addChild(this.maskBlue);
    d.mask = this.maskBlue;
    d = this.container.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "fronts5")));
    this.maskRed = new canvas.px.Graphics();
    this.maskRed.beginFill(16777215, 1);
    this.maskRed.drawRect(-40, 0, 40, 40);
    this.maskRed.endFill();
    this.maskRed.position.set(45, 5);
    this.container.addChild(this.maskRed);
    d.mask = this.maskRed;
    this.container.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "fronts6")));
    this.icons = new canvas.app.location.view.fronts.FrontsIcons();
    this.container.addChild(this.icons);
    this.icons.position.set(13, 33);
    this.infoContainerBack = new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "fronts10"), 10, 0, 10, 0);
    this.infoContainer.addChild(this.infoContainerBack);
    this.infoContainerBack.width = 200;
    this.locsContainer = new canvas.px.Container();
    this.infoContainer.addChild(this.locsContainer);
    this.locsContainer.position.set(10, 30);
    this.infoHeader = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD, 16769695, 200, 20, "center");
    this.infoContainer.addChild(this.infoHeader);
    this.infoHeader.y = 4;
    this.container.buttonMode = true;
    this.container.interactive = true;
    this.infoContainer.visible = false;
    this.click = this.clickHandler.bind(this);
    this.interactive = true;
};
canvas.app.location.view.fronts.FrontsIcon.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.location.view.fronts.FrontsIcon.prototype.setProgress = function (blue, red) {
    this.maskBlue.scale.x = blue;
    this.maskRed.scale.x = red;
};
canvas.app.location.view.fronts.FrontsIcon.prototype.update = function () {
    var locData;
    var locItem;
    var tmpX = 0;
    var i = 0;
    var Conf = canvas.app.location.model;
    canvas.Functions.clearChildren(this.locsContainer);
    this.infoHeader.text = Conf.fronts.frontTitle;
    var len = Conf.fronts.locationsData.length;
    for (var k = 0; k < len; k++) {
        locData = Conf.fronts.locationsData[k];
        locItem = this.items[i];
        if (!locItem) {
            locItem = new canvas.app.location.view.fronts.FrontsLoc(this.baseLnk);
            this.items.push(locItem);
        }
        locItem.data = locData;
        this.locsContainer.addChild(locItem);
        locItem.x = tmpX;
        tmpX += 55;
        i++;
    }
    this.infoContainerBack.width = Math.max(tmpX + 15, this.infoHeader.field.textWidth + 20);
    this.infoHeader.setSize(this.infoContainerBack.width);
    this.setProgress(Conf.fronts.humLocs * 0.01, Conf.fronts.magLocs * 0.01);
    this.icons.setIcon();
    if (Conf.fronts.availableLocationData)
        switch (parseInt(Conf.fronts.availableLocationData.status)) {
            case 0:
                this.icons.setIcon(2);
                break;
            case 1:
                this.icons.setIcon(0);
                break;
            case 2:
                this.icons.setIcon(1);
                break;
            case 3:
                this.icons.setIcon(3);
                break;
        }
};
canvas.app.location.view.fronts.FrontsIcon.prototype.updateTimer = function () {
    var len = this.items.length;
    for (var k = 0; k < len; k++) {
        this.items[k].updateTimer();
    }
};
canvas.app.location.view.fronts.FrontsIcon.prototype.clickHandler = function () {
    this.infoContainer.visible = !this.infoContainer.visible;
};
canvas.app.location.view.fronts.FrontsPanel = function (base) {
    canvas.px.Container.call(this);
    this.baseLnk = base;
    this.back = new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "fronts15"), 25, 0, 20, 0);
    this.addChild(this.back);
    this.back.width = 170;
    this.header = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_12_BOLD, 11730944, 300, 20, "left");
    this.addChild(this.header);
    this.header.position.set(34, 13);
    this.actionButton = new canvas.app.view.MainButton();
    this.addChild(this.actionButton);
    this.actionButton.y = 32;
    this.locInfo = new canvas.app.location.view.fronts.FrontsLoc(this.baseLnk, 1);
    this.addChild(this.locInfo);
    this.locInfo.position.set(-15, 0);
    this.infoButton = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "fronts14"));
    this.addChild(this.infoButton);
    this.infoButton.y = 9;
    this.hint = new canvas.app.view.MappingHint("");
    this.click = this.clickHandler.bind(this);
    this.interactive = true;
    canvas.EventManager.dispatchEvent(canvas.app.location.Event.HINT_ADD, null, { target: this.actionButton, params: new canvas.utils.HintParams(this.hint) });
};
canvas.app.location.view.fronts.FrontsPanel.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.location.view.fronts.FrontsPanel.prototype.update = function () {
    var Conf = canvas.app.location.model;
    this.actionButton.enabled = false;
    switch (Conf.fronts.currentLocationData.status) {
        case 0:
            this.header.text = canvas.Translator.getText(706);
            this.actionButton.setTitle(canvas.Translator.getText(707));
            this.hint.update(canvas.Translator.getText(711));
            this.hint.visible = true;
            break;
        case 1:
            this.header.text = canvas.Translator.getText(708);
            this.actionButton.enabled = true;
            this.actionButton.setTitle(canvas.Translator.getText(707));
            this.hint.visible = false;
            break;
        case 2:
            this.header.text = canvas.Translator.getText(709);
            this.actionButton.setTitle(canvas.Translator.getText(712));
            this.actionButton.enabled = true;
            this.hint.visible = false;
            break;
        case 3:
            this.header.text = canvas.Translator.getText(710);
            this.actionButton.setTitle(canvas.Translator.getText(712));
            this.hint.update(canvas.Translator.getText(713));
            this.hint.visible = true;
            break;
    }
    this.updateBack();
    this.updateTimer();
    this.locInfo.data = Conf.fronts.currentLocationData;
    this.resize();
};
canvas.app.location.view.fronts.FrontsPanel.prototype.updateBack = function () {
    this.back.width = this.header.field.textWidth + 56;
    if (this.back.width < 160) this.back.width = 160;
    this.infoButton.x = this.back.width - 15;
    this.actionButton.width = this.actionButton.field.field.textWidth + 80;
    this.actionButton.x = Math.round((this.back.width - this.actionButton.width) * 0.5);
    this.resize();
};
canvas.app.location.view.fronts.FrontsPanel.prototype.resize = function () {
    this.x = Math.round((this.baseLnk.locSide.width - this.back.width) * 0.5) + (this.baseLnk.mapSide.visible ? this.baseLnk.mapSide.width : 0);
};
canvas.app.location.view.fronts.FrontsPanel.prototype.updateTimer = function () {
    var Conf = canvas.app.location.model;
    var timeLeft = 0;
    var title;
    if (Conf.fronts.currentLocationData.status >= 0 && Conf.fronts.currentLocationData.status <= 2) {
        switch (Conf.fronts.currentLocationData.status) {
            case 0:
                title = canvas.Translator.getText(706);
                break;
            case 1:
                title = canvas.Translator.getText(708);
                break;
            case 2:
                title = canvas.Translator.getText(709);
                break;
        }
        timeLeft = Conf.fronts.currentLocationData.cooldown - Date.now();
        this.header.text = title + " " + canvas.Functions.formatDate(timeLeft, "", 0, true, true);
        if (timeLeft <= 0) this.baseLnk.main.loadFrontsData();
        this.updateBack();
    }
};
canvas.app.location.view.fronts.FrontsPanel.prototype.clickHandler = function (mouseData) {
    var Conf = canvas.app.location.model;
    if (canvas.Functions.findParent(this.infoButton, mouseData.target)) {
        canvas.Functions.navigateToURL(canvas.Translator.getText(721), "_blank");
    } else if (canvas.Functions.findParent(this.locInfo.icons, mouseData.target)) {
        if (this.locInfo.icons.currentIcon != 1) return;
    } else if (canvas.Functions.findParent(this.actionButton, mouseData.target)) {
        switch (Conf.fronts.currentLocationData.status) {
            case 1:
                this.baseLnk.showStartBattleConfirm(Conf.fronts.currentLocationData.title, Conf.fronts.currentLocationData.id, Conf.fronts.currentLocationData.cooldown);
                break;
            case 2:
                this.baseLnk.showEnterBattleConfirm(Conf.fronts.currentLocationData.title, Conf.fronts.currentLocationData.id, Conf.fronts.currentLocationData.cooldown);
                break;
        }
    }
};
canvas.app.location.view.fronts.FrontsIcons = function () {
    canvas.px.Container.call(this);
    this.currentIcon = -1;
    this.sprite = new canvas.px.Sprite(canvas.px.TextureEmpty);
    this.addChild(this.sprite);
    this.interactive = true;
    this.setIcon();
    this.icons = ["fronts1", "fronts2", "fronts19", "fronts18"];
};
canvas.app.location.view.fronts.FrontsIcons.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.location.view.fronts.FrontsIcons.prototype.setIcon = function (index) {
    if (index == undefined) index = -1;
    this.sprite.texture = index < 0 ? canvas.px.TextureEmpty : canvas.ResourceLoader.getImage("ui", this.icons[index]);
    switch (index) {
        case 1:
        case 3:
            this.buttonMode = true;
            break;
        default:
            this.buttonMode = false;
    }
    this.currentIcon = index;
};
canvas.app.location.view.fronts.FrontsLoc = function (base, hintType) {
    this._data = null;
    Object.defineProperty(this, "data", {
        get: function () {
            return this._data;
        },
        set: function (value) {
            if (value == null) return;
            if (this._data == null || this._data.image != value.image) this.loader.setImage(value.image);
            this._data = value;
            this.update();
        },
    });
    canvas.px.Container.call(this);
    this.baseLnk = base;
    if (hintType == undefined) hintType = 0;
    this.hintType = parseInt(hintType);
    var d;
    var shape;
    var dy = this.hintType == 0 ? 10 : 0;
    this.back = this.addChild(new canvas.px.Sprite(canvas.px.TextureEmpty));
    this.clock = this.addChild(new canvas.px.Sprite(canvas.px.TextureEmpty));
    this.clock.position.set(6, dy - 11);
    this.back.y = dy;
    d = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "fronts12")));
    d.position.set(4, 5 + dy);
    this.shape = new canvas.px.Graphics();
    this.shape.beginFill(0, 1);
    this.shape.drawCircle(25, 25 + dy, 19);
    this.shape.endFill();
    this.addChild(this.shape);
    this.loader = new canvas.ui.Image();
    this.addChild(this.loader);
    this.loader.position.set(4, 5 + dy);
    this.loader.mask = this.shape;
    this.icons = new canvas.app.location.view.fronts.FrontsIcons();
    this.addChild(this.icons);
    this.icons.position.set(13, 33 + dy);
    this.header = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_10, 13021302, 50, 20, "left");
    this.header.position.set(18, dy - 12);
    if (this.hintType == 0) {
        this.addChild(this.header);
    } else {
        this.removeChild(this.clock);
    }
    this.click = this.clickHandler.bind(this);
    this.interactive = true;
};
canvas.app.location.view.fronts.FrontsLoc.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.location.view.fronts.FrontsLoc.prototype.update = function () {
    var statusTitle = 726;
    var color = 4473924;
    this.back.visible = this.clock.visible = false;
    this.icons.setIcon();
    switch (parseInt(this._data.status)) {
        case 0:
            switch (parseInt(this._data.owner)) {
                case 1:
                    statusTitle = 724;
                    color = 1210068;
                    break;
                case -1:
                    statusTitle = 725;
                    color = 11730944;
                    break;
                default:
                    statusTitle = 726;
                    color = 4473924;
            }
            this.icons.setIcon(2);
            break;
        case 1:
            this.icons.setIcon(0);
            statusTitle = 727;
            break;
        case 2:
            this.icons.setIcon(this._data.fightAvail ? 1 : -1);
            statusTitle = 728;
            break;
        case 3:
            statusTitle = 710;
            this.icons.setIcon(3);
            break;
    }
    switch (parseInt(this._data.owner)) {
        case 0:
            this.back.texture = canvas.ResourceLoader.getImage("ui", "fronts9");
            this.clock.texture = canvas.ResourceLoader.getImage("ui", "timer_none");
            this.back.visible = this.clock.visible = true;
            break;
        case 1:
            this.back.texture = canvas.ResourceLoader.getImage("ui", "fronts8");
            this.clock.texture = canvas.ResourceLoader.getImage("ui", "timer_hum");
            this.back.visible = this.clock.visible = true;
            break;
        case -1:
            this.back.texture = canvas.ResourceLoader.getImage("ui", "fronts7");
            this.clock.texture = canvas.ResourceLoader.getImage("ui", "timer_mag");
            this.back.visible = this.clock.visible = true;
            break;
    }
    if (!this.hint) {
        if (this.hintType == 0) {
            this.hint = new canvas.app.location.view.fronts.FrontsHint(this._data.title, "");
        } else {
            this.hint = new canvas.app.view.MappingHint();
        }
        canvas.EventManager.dispatchEvent(canvas.app.location.Event.HINT_ADD, null, { target: this, params: new canvas.utils.HintParams(this.hint, true) });
    }
    switch (this.hintType) {
        case 0:
            this.hint.update(canvas.Translator.getText(723) + "<br/><br/>" + this._data.description);
            this.hint.icons.setIcon(this.icons.currentIcon);
            this.hint.updateTop(canvas.Translator.getText(statusTitle), color);
            break;
        default:
            this.hint.update(
                this._data.owner > 0 ? canvas.Translator.getText(703) : this._data.owner < 0 ? canvas.Translator.getText(702) : canvas.Translator.getText(704),
                this._data.owner > 0 ? 1210068 : this._data.owner < 0 ? 11730944 : 4010799,
                canvas.Const.FONT_TAHOMA_12_BOLD
            );
    }
    if (parseInt(this._data.status) == 3) {
        this.clock.visible = false;
        this.header.visible = false;
    } else {
        this.header.visible = true;
    }
    this.updateTimer();
};
canvas.app.location.view.fronts.FrontsLoc.prototype.updateTimer = function () {
    var timeLeft = this.data.cooldown - Date.now();
    this.header.text = canvas.Functions.formatDate(timeLeft, "", 0, true, true);
    switch (this.hintType) {
        case 0:
            this.hint.updateTime(this._data.status == 3 ? 0 : timeLeft);
            break;
    }
};
canvas.app.location.view.fronts.FrontsLoc.prototype.clickHandler = function (mouseData) {
    if (canvas.Functions.findParent(this.icons, mouseData.target)) {
        switch (parseInt(this.icons.currentIcon)) {
            case 1:
                this.baseLnk.showEnterBattleConfirm(this.data.title, this.data.id, this.data.cooldown);
                break;
            case 3:
                if (this.data.fightID != "") showFightInfo(this.data.fightID);
                break;
        }
    }
};
canvas.app.location.view.fronts.FrontsHint = function (title, text) {
    canvas.app.view.BigHint.call(this, title, text);
    this.iconsContainer = new canvas.px.Container();
    this.timeField = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD, 869915, Math.round(this.width - 15), 20, "right");
    this.addChild(this.timeField);
    this.timeField.y = 47;
    this.wall = new canvas.px.Mask(this.width - 28, 15, 15973005, 1);
    this.addChildAt(this.wall, 1);
    this.wall.position.set(14, 47);
    this.topField = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_12_BOLD, 4010799, this.width, 20, "center");
    this.addChild(this.iconsContainer);
    this.icons = new canvas.app.location.view.fronts.FrontsIcons();
    this.iconsContainer.addChild(this.icons);
    this.iconsContainer.y = 24;
    this.addChild(this.topField);
    this.topField.position.set(0, 27);
    this.infoField.position.set(22, 32 + 15);
};
canvas.app.location.view.fronts.FrontsHint.prototype = Object.create(canvas.app.view.BigHint.prototype);
canvas.app.location.view.fronts.FrontsHint.prototype.updateTop = function (str, color) {
    this.topField.color = color;
    this.topField.text = str;
    this.iconsContainer.x = Math.round((this.width - this.topField.textWidth) * 0.5) - this.iconsContainer.width - 4;
};
canvas.app.location.view.fronts.FrontsHint.prototype.updateTime = function (time) {
    this.timeField.text = time > 0 ? canvas.Functions.formatDate(time, "00", 1) : "--";
};
canvas.app.location.view.fronts.FrontsHint.prototype.update = function (text, color, font) {
    if (color == undefined) color = 4010799;
    if (font == undefined) font = canvas.Const.FONT_TAHOMA_12;
    this.infoField.color = color;
    this.infoField.font = font;
    this.infoField.text = text;
    this.back.height = this.infoField.textHeight + 60;
};
canvas.app.manor.Const = {
    REQUESTS_ON_PAGE: 10,
    REQUESTS_ON_PAGE_SHORT: 6,
    FLAG_AFTER_BUILD: 1,
    STORAGE_MAX_CELLS: 6,
    REQ_CONFIG: "config",
    REQ_BUILD: "build",
    REQ_CREATE_WORK_REQUEST: "createWorkRequest",
    REQ_LOAD_USER_REQUESTS: "loadUserRequests",
    REQ_REMOVE_WORK_REQUEST: "removeWorkRequest",
    REQ_WORK_USE: "workUse",
    REQ_BUY_CEMENT: "buyCement",
    REQ_USE_PETS_DATA: "usePetsData",
    REQ_USE_PETS_ACTION: "usePetsAction",
    REQ_USE_EXP_DATA: "useExpData",
    REQ_USE_EXP_ACTION: "useExpAction",
    REQ_USE_EXP2_DATA: "useExp2Data",
    REQ_USE_EXP2_ACTION: "useExp2Action",
    REQ_USE_VALOUR_DATA: "useValourData",
    REQ_USE_VALOUR_ACTION: "useValourAction",
    REQ_USE_HOSPITAL_DATA: "useHospitalData",
    REQ_USE_HOSPITAL_ACTION: "useHospitalAction",
    REQ_USE_STORAGE_ACTION: "useStorageAction",
    REQ_USE_BANK_DATA: "useBankData",
    REQ_USE_BANK_ACTION: "useBankAction",
    REQ_USE_WORKSHOP_DATA: "useWorkshopData",
    REQ_USE_WORKSHOP_ACTION: "useWorkshopAction",
    REQ_USE_MINE_DATA: "useMineData",
    REQ_USE_MINE_ACTION: "useMineAction",
    REQ_DESTROY_BUILDING: "destroyBuilding",
    REQ_GET_AVAILABLE_BUILDINGS: "getAvailableBuildings",
    REQ_EXIT: "exit",
    REQ_USE_KENNEL_DATA: "useKennelData",
    REQ_USE_KENNEL_ACTION: "useKennelAction",
    TITLES: ["main", "exp", "obelisk", "pets", "storage", "workshop", "mail", "hospital", "market", "wall", "tree", "mine1", "mine2", "mine3", "make1", "make2", "make3", "portal", "halloween", "kennel", "exp2", "camp"],
    MAP_POINTS: {
        1: [
            [5, 1804, 176],
            [11, 1724, 316],
            [19, 1724, 316],
            [20, 768, 409],
            [1, 1338, 274],
            [6, 1852, 372],
            [7, 1668, 412],
            [2, 1964, 508],
            [9, 1820, 519],
            [3, 1643, 540],
            [4, 1210, 610],
            [8, 1674, 625],
            [10, 1898, 630],
            [12, 311, 241],
            [18, 644, 95],
            [22, 435, 583],
        ],
        2: [
            [4, 214, 136],
            [1, 678, 274],
            [5, 190, 340],
            [7, 324, 436],
            [2, 108, 484],
            [9, 242, 486],
            [3, 524, 542],
            [11, 620, 573],
            [19, 621, 573],
            [20, 1212, 413],
            [6, 732, 598],
            [8, 426, 638],
            [10, 106, 640],
            [12, 1691, 243],
            [18, 1342, 100],
            [22, 1643, 551],
        ],
    },
    WIDTH_MIN: 800,
    HEIGHT_MIN: 400,
    WIDTH_MAX: 2024,
    HEIGHT_MAX: 724,
    MAP_ORIGINAL_WIDTH: 2e3,
    MAP_ORIGINAL_HEIGHT: 700,
    CURL_DX: 12,
    CURL_DY: 12,
    BUILDING_COUNT: 22,
    BUILDING_MAX_COUNT: 30,
    ENERGY_COURSE: 5,
    THRONE_ROOM_WIDTH: 1e3,
    THRONE_ROOM_HEIGHT: 300,
};
canvas.app.manor.Controller = function (main) {
    this.main = main;
    this.view = this.main.view;
    canvas.EventManager.addEventListener(canvas.app.manor.Event.SELECT_BUILDING, null, this.thisHandler, this);
    canvas.EventManager.addEventListener(canvas.app.manor.Event.OPEN_THRONE_ROOM, null, this.thisHandler, this);
    if (canvas.app.manor.model.guestMode) return;
    var a = [
        canvas.app.manor.Event.CLOSE_BUILDING,
        canvas.app.manor.Event.CLOSE_LABOUR,
        canvas.app.manor.Event.OPEN_LABOUR,
        canvas.app.manor.Event.OPEN_HIRE,
        canvas.app.manor.Event.CLOSE_HIRE,
        canvas.app.manor.Event.OPEN_PORTAL_RESET,
        canvas.app.manor.Event.CLOSE_PORTAL_RESET,
        canvas.app.manor.Event.OPEN_WORK,
        canvas.app.manor.Event.CLOSE_WORK,
        canvas.app.manor.Event.OPEN_CONFIRM,
        canvas.app.manor.Event.OPEN_MESSAGE,
        canvas.app.manor.Event.OPEN_CEMENT,
        canvas.app.manor.Event.CLOSE_CEMENT,
        canvas.app.manor.Event.BUY_CEMENT,
        canvas.app.manor.Event.CREATE_WORK_REQUEST,
        canvas.app.manor.Event.LOAD_WORK_REQUESTS,
        canvas.app.manor.Event.REMOVE_WORK_REQUEST,
        canvas.app.manor.Event.WORK_USE,
        canvas.app.manor.Event.BUILD,
        canvas.app.manor.Event.USE_PETS_DATA,
        canvas.app.manor.Event.USE_PETS_ACTION,
        canvas.app.manor.Event.USE_EXP_DATA,
        canvas.app.manor.Event.USE_EXP_ACTION,
        canvas.app.manor.Event.USE_EXP2_DATA,
        canvas.app.manor.Event.USE_EXP2_ACTION,
        canvas.app.manor.Event.USE_HOSPITAL_DATA,
        canvas.app.manor.Event.USE_HOSPITAL_ACTION,
        canvas.app.manor.Event.USE_STORAGE_DATA,
        canvas.app.manor.Event.USE_STORAGE_ACTION,
        canvas.app.manor.Event.USE_VALOUR_DATA,
        canvas.app.manor.Event.USE_VALOUR_ACTION,
        canvas.app.manor.Event.OPEN_BANK,
        canvas.app.manor.Event.OPEN_HUNT_CAMP,
        canvas.app.manor.Event.OPEN_COUNT,
        canvas.app.manor.Event.USE_BANK_ACTION,
        canvas.app.manor.Event.USE_WORKSHOP_DATA,
        canvas.app.manor.Event.USE_WORKSHOP_ACTION,
        canvas.app.manor.Event.USE_MINE_DATA,
        canvas.app.manor.Event.USE_MINE_ACTION,
        canvas.app.manor.Event.USE_PORTAL_DATA,
        canvas.app.manor.Event.USE_PORTAL_ACTION,
        canvas.app.manor.Event.USE_HUNT_CAMP_DATA_FARM,
        canvas.app.manor.Event.USE_HUNT_CAMP_DATA_FORGE,
        canvas.app.manor.Event.USE_HUNT_CAMP_DATA_SEARCH,
        canvas.app.manor.Event.USE_HUNT_CAMP_ACTION,
        canvas.app.manor.Event.LOAD_CONFIG,
        canvas.app.manor.Event.DESTROY_BUILDING,
        canvas.app.manor.Event.GET_AVAILABLE_BUILDINGS,
        canvas.app.manor.Event.BACK_TO_CHOOSE_BUILDING,
        canvas.app.manor.Event.USE_KENNEL_DATA,
        canvas.app.manor.Event.USE_KENNEL_ACTION,
        canvas.app.manor.Event.OPEN_CHOOSE_PET,
        canvas.app.manor.Event.CLOSE_CHOOSE_PET,
        canvas.app.manor.Event.EXIT,
        canvas.app.manor.Event.THRONE_ROOM_INSTALL,
        canvas.app.manor.Event.THRONE_ROOM_REMOVE,
        canvas.app.manor.Event.THRONE_ROOM_UPDATE,
        canvas.app.manor.Event.THRONE_ROOM_BUY,
    ];
    var i,
        len = a.length;
    for (i = 0; i < len; i++) {
        canvas.EventManager.addEventListener(a[i], null, this.thisHandler, this);
    }
    canvas.EventManager.addEventListener(canvas.app.manor.Event.LIST_SHOW_HIDE, null, this.listHandler, this);
    this.request = new canvas.utils.URLRequest();
    canvas.EventManager.addEventListener(canvas.utils.URLRequestEvent.EVENT_COMPLETE, this.request, this.completeHandler, this);
    canvas.EventManager.addEventListener(canvas.utils.URLRequestEvent.EVENT_ERROR, this.request, this.errorHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.view.exitButton, this.exit, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.view.workButton, this.workButtonClickHandler, this);
    this.timer = setInterval(this.timerHandler.bind(this), 6e4);
    this.timerHandler();
    this.timer1000 = setInterval(this.timerHandler1000.bind(this), 1e3);
};
canvas.app.manor.Controller.prototype.workButtonClickHandler = function () {
    this.view.labourWin.open();
    this.view.labourWin.panel.path = "all";
};
canvas.app.manor.Controller.prototype.testError = function (xml) {
    if (xml.error) {
        this.view.showError(xml.error);
        return true;
    }
    return false;
};
canvas.app.manor.Controller.prototype.completeHandler = function (e) {
    var Conf = canvas.app.manor.model;
    this.main.interactiveChildren = true;
    var dUserBuilding;
    var dBuilding;
    var xml = e ? JSON.parse(this.request.request.responseText) : JSON.parse(canvas.ResourceLoader.get("conf").data);
    var root = xml;
    var reqName = "";
    var str;
    if (root["user|view"]) {
        swfObject("lvl", root);
    }
    for (str in xml) {
        if (str.substr(0, 6) == "estate") {
            xml = xml[str];
            reqName = "estate";
            break;
        }
        if (str.substr(0, 5) == "store") {
            xml = xml[str];
            reqName = "store";
            break;
        }
    }
    if (parseInt(xml.reload) == 1) {
        Conf.needUpdate = true;
    }
    if (xml.redirect) {
        canvas.Functions.navigateToURL(xml.redirect, "_self");
        return;
    }
    if (this.request.info.name) {
        if (this.testError(xml)) {
            switch (this.request.info.name) {
                case canvas.app.manor.Const.REQ_USE_KENNEL_ACTION:
                    this.view.buildingWin.useKennel.update();
                    break;
            }
            return;
        }
        switch (this.request.info.name) {
            case canvas.app.manor.Const.REQ_CONFIG:
                Conf.parseConf(xml);
                this.loadUserRequests();
                this.view.update();
                this.timerHandler1000();
                dUserBuilding = Conf.user.buildings["portal"];
                if (!Conf.portals && dUserBuilding && dUserBuilding.level > 0) this.usePortalData();
                break;
            case canvas.app.manor.Const.REQ_BUILD:
                if (parseInt(xml.amount) > 0) {
                    Conf.user.labour -= parseInt(xml.amount.toString());
                    Conf.user.cement -= parseInt(xml.amount.toString());
                    dUserBuilding = Conf.user.buildings[Conf.selectedBuilding];
                    dBuilding = Conf.buildings[Conf.selectedBuilding][dUserBuilding.level];
                    dUserBuilding.labour += parseInt(xml.amount.toString());
                }
                this.view.update(canvas.app.manor.Const.FLAG_AFTER_BUILD);
                break;
            case canvas.app.manor.Const.REQ_CREATE_WORK_REQUEST:
                break;
            case canvas.app.manor.Const.REQ_LOAD_USER_REQUESTS:
                Conf.parseUserRequests(xml);
                this.view.labourWin.allRequests.update();
                break;
            case canvas.app.manor.Const.REQ_REMOVE_WORK_REQUEST:
                this.view.labourWin.myRequests.update();
                break;
            case canvas.app.manor.Const.REQ_WORK_USE:
                var labourRequest,
                    i,
                    len = Conf.labourRequests.length;
                for (i = 0; i < len; i++) {
                    labourRequest = Conf.labourRequests[i];
                    if (labourRequest && labourRequest.id == Conf.selectedRequestID) {
                        Conf.user.labour -= labourRequest.labour - xml.amount;
                        labourRequest.labour = xml.amount;
                        this.view.labourWin.update();
                        break;
                    }
                }
                break;
            case canvas.app.manor.Const.REQ_USE_PETS_DATA:
                Conf.parsePets(xml);
                this.view.buildingWin.usePets.update();
                break;
            case canvas.app.manor.Const.REQ_USE_PETS_ACTION:
                this.usePetsData();
                return;
            case canvas.app.manor.Const.REQ_USE_EXP_DATA:
                Conf.parseExp(xml);
                this.view.buildingWin.useExp.update();
                break;
            case canvas.app.manor.Const.REQ_USE_EXP_ACTION:
                this.useExpData();
                return;
            case canvas.app.manor.Const.REQ_USE_EXP2_DATA:
                Conf.parseExp2(xml);
                this.view.buildingWin.useExp2.update();
                break;
            case canvas.app.manor.Const.REQ_USE_EXP2_ACTION:
                this.useExpData("21", canvas.app.manor.Const.REQ_USE_EXP2_DATA);
                return;
            case canvas.app.manor.Const.REQ_USE_VALOUR_DATA:
                Conf.parseValour(xml);
                this.view.buildingWin.useObelisk.update();
                break;
            case canvas.app.manor.Const.REQ_USE_VALOUR_ACTION:
                this.useValourData();
                return;
            case canvas.app.manor.Const.REQ_USE_HOSPITAL_DATA:
                Conf.parseHospital(xml);
                this.view.buildingWin.useHospital.update();
                break;
            case canvas.app.manor.Const.REQ_USE_HOSPITAL_ACTION:
                this.useHospitalData();
                return;
            case canvas.app.manor.Const.REQ_USE_STORAGE_ACTION:
                if (Conf.storageArtToPut) {
                    this.useStorageAction(Conf.storageArtToPut, "", Conf.storageArtToPutCount == 0 ? 1 : Conf.storageArtToPutCount);
                    Conf.storageArtToPut = "";
                    Conf.storageArtToPutCount = 1;
                } else {
                    this.useBankData();
                }
                break;
            case canvas.app.manor.Const.REQ_USE_BANK_DATA:
                Conf.parseBank(xml);
                this.view.bankWin.update();
                break;
            case canvas.app.manor.Const.REQ_USE_BANK_ACTION:
                this.useBankData();
                break;
            case canvas.app.manor.Const.REQ_USE_WORKSHOP_DATA:
                Conf.parseWorkshop(xml);
                this.view.buildingWin.useWorkshop.update();
                this.view.buildingWin.useWorkshop2.update();
                break;
            case canvas.app.manor.Const.REQ_USE_WORKSHOP_ACTION:
                this.useWorkshopData();
                break;
            case canvas.app.manor.Const.REQ_USE_MINE_DATA:
                Conf.parseMine(xml);
                switch (Conf.getSelectedBuildingBase()) {
                    case "mine":
                        this.view.buildingWin.useMine.update();
                        break;
                    case "make":
                        this.view.buildingWin.useMake.update();
                        break;
                }
                this.view.buildingWin.useMine2.update();
                break;
            case canvas.app.manor.Const.REQ_USE_MINE_ACTION:
                this.useMineData();
                break;
            case canvas.app.manor.Const.REQ_DESTROY_BUILDING:
                Conf.craftData = null;
                canvas.EventManager.dispatchEvent(canvas.app.manor.Event.BACK_TO_CHOOSE_BUILDING);
                break;
            case canvas.app.manor.Const.REQ_GET_AVAILABLE_BUILDINGS:
                Conf.parseAvailableBuildings(xml.buildings_id_list.toString());
                if (Conf.availableBuildings.length < 2) {
                    if (Conf.availableBuildings.length == 1) {
                        canvas.EventManager.dispatchEvent(canvas.app.manor.Event.SELECT_BUILDING, null, { params: "chooser", object: Conf.availableBuildings[0] });
                    }
                } else {
                    this.view.buildingWin.close();
                    this.view.chooseBuildingWin.update();
                    this.view.chooseBuildingWin.open();
                }
                break;
            case canvas.app.manor.Const.REQ_USE_KENNEL_DATA:
                Conf.parseKennel(xml);
                this.view.buildingWin.useKennel.update();
                break;
            case canvas.app.manor.Const.REQ_USE_KENNEL_ACTION:
                this.useBuildingData(canvas.app.manor.Const.REQ_USE_KENNEL_DATA);
                break;
        }
    } else {
        switch (reqName) {
            case "estate":
                switch (this.request.info.action) {
                    case "building":
                        switch (parseInt(this.request.params.type_id)) {
                            case 18:
                                switch (this.request.params.building_action) {
                                    case "teleport":
                                        if (xml.need_confirm && xml.error) {
                                            canvas.EventManager.dispatchEvent(canvas.app.manor.Event.OPEN_CONFIRM, null, {
                                                params: xml.error,
                                                object: { name: canvas.app.manor.Event.USE_PORTAL_ACTION, params: { object: { building_action: "teleport", number: this.request.params.number, confirmed: true } } },
                                            });
                                            return;
                                        }
                                }
                                break;
                        }
                        switch (parseInt(this.request.params.type_id)) {
                            case 1:
                                if (this.testError(xml)) {
                                    return;
                                }
                                switch (this.request.params.building_action) {
                                    case "throneroom_conf":
                                        Conf.throneRoomData.parseConf(xml);
                                        if (!Conf.throneRoomData.shopItems) {
                                            this.throneRoomStoreList();
                                        } else {
                                            this.view.throneRoom.update();
                                        }
                                        break;
                                    case "throneroom_install":
                                    case "throneroom_remove":
                                    case "throneroom_buy_artikul":
                                        Conf.throneRoomData.mergeItems(xml.change_items);
                                        this.view.throneRoom.update();
                                        break;
                                }
                                break;
                            case 18:
                                if (this.testError(xml)) {
                                    return;
                                }
                                switch (this.request.params.building_action) {
                                    case "conf":
                                        Conf.parsePortal(xml);
                                        this.view.buildingWin.usePortal.update();
                                        this.view.updateMenu();
                                        break;
                                    case "bind":
                                    case "reset_bind_timer":
                                        this.usePortalData();
                                        break;
                                }
                                break;
                            case 22:
                                if (this.testError(xml)) {
                                    return;
                                }
                                switch (this.request.params.building_action) {
                                    case "confSearch":
                                    case "confFarm":
                                    case "confForge":
                                        Conf.parseHuntCamp(xml);
                                        this.view.huntCampWin.update();
                                        break;
                                    case "missionGetRewards":
                                        Conf.campData.parsePets(xml.pets);
                                        Conf.campData.removeActiveMission(Conf.campData.currentActiveMission);
                                        this.view.huntCampWin.updateFarm();
                                        break;
                                    case "missionSendPets":
                                        Conf.campData.parsePets(xml.pets);
                                        Conf.campData.parseActiveMissions(xml.missions);
                                        Conf.campData.changeArtifactsCount();
                                        this.view.huntCampWin.updateFarm();
                                        break;
                                    case "destructItem":
                                        Conf.campData.parseDestructResult(xml);
                                        this.view.huntCampWin.activate();
                                        this.view.huntCampWin.equipment.update();
                                        break;
                                    case "buildItemRandom":
                                        Conf.campData.deltaFragment();
                                        if (xml.new) {
                                            for (str in xml.new) {
                                                Conf.campData.addForgeItem(xml.new[str], true);
                                            }
                                        }
                                        this.view.huntCampWin.equipment.update();
                                        break;
                                    case "buildItemLevel":
                                        Conf.campData.deltaFragment(Conf.campData.currentForgeLevel);
                                        if (xml.new) {
                                            for (str in xml.new) {
                                                Conf.campData.addForgeItem(xml.new[str], true);
                                            }
                                        }
                                        this.view.huntCampWin.equipment.update();
                                        break;
                                }
                                this.view.huntCampWin.showLoader();
                                break;
                        }
                        break;
                }
                break;
            case "store":
                if (!this.testError(xml)) {
                    switch (this.request.info.action) {
                        case "list":
                            Conf.throneRoomData.parseShopItems(xml);
                            Conf.throneRoomData.userData.restrictions = xml.restrictions;
                            this.view.throneRoom.update();
                            Conf.throneRoomData.loadHints();
                            break;
                        case "cart_add":
                            this.throneRoomStorePurchase();
                            break;
                        case "purchase":
                        case "purchase_in_one_step":
                            this.throneRoomConf();
                            break;
                    }
                } else {
                    switch (this.request.info.action) {
                        case "cart_add":
                        case "purchase":
                            this.throneRoomStoreClear();
                            break;
                    }
                }
                break;
        }
    }
    if (Conf.needUpdate) {
        this.loadConfig();
    }
    if (xml.js_code) {
        getArtifactAlt(xml.js_code.replace("<![CDATA[", "").replace("]]>", ""));
    }
};
canvas.app.manor.Controller.prototype.errorHandler = function (event) {
    this.main.interactiveChildren = true;
};
canvas.app.manor.Controller.prototype.timerHandler = function () {
    this.sendRequest("last_active");
};
canvas.app.manor.Controller.prototype.timerHandler1000 = function () {
    var Conf = canvas.app.manor.model;
    var request;
    if (Conf.selectedBuilding == "workshop" && Conf.workShopRequests != null) {
        request = Conf.workShopRequests[0];
        if (request != null) {
            request.duration++;
            if (request.duration >= request.durationMax) {
                this.useWorkshopData();
            } else {
                this.view.buildingWin.useWorkshop2.updateRequests();
            }
        }
    }
    if (Conf.craftData != null && (Conf.getSelectedBuildingBase() == "mine" || Conf.getSelectedBuildingBase() == "make") && Conf.craftData.requests != null) {
        request = Conf.craftData.requests[0];
        if (request != null) {
            request.duration++;
            if (request.duration >= request.durationMax) {
                this.useMineData();
            } else {
                switch (Conf.getSelectedBuildingBase()) {
                    case "mine":
                        this.view.buildingWin.useMine.updateRequests();
                        break;
                    case "make":
                        this.view.buildingWin.useMake.updateRequests();
                        break;
                }
            }
        }
    }
    if (Conf.user.labourMax == 0) {
        this.view.labour.setLabour(0, 0);
        this.view.labour.tf.text = canvas.Functions.formatDate(Conf.user.workRefreshTime * 1e3, "00", 2, true);
        Conf.user.workRefreshTime--;
        if (Conf.user.workRefreshTime < 0) Conf.user.workRefreshTime = 0;
        if (Conf.user.workRefreshTime == 0) {
            this.loadConfig();
        }
    } else {
        this.view.labour.setLabour(Conf.user.labour, Conf.user.labourMax);
    }
    switch (Conf.getSelectedBuildingBase()) {
        case "portal":
            this.view.buildingWin.usePortal.updateTime();
            break;
        case "kennel":
            this.view.buildingWin.useKennel.updateTime();
            break;
    }
    if (this.view.huntCampWin.parent) {
        this.view.huntCampWin.updateTime();
    }
    if (this.view.throneRoom.parent) {
        this.view.throneRoom.updateTime();
    }
    var sess = canvas.Functions.getSessTarget();
    if (sess.autoPenalty >= 0) {
        this.exit();
    }
};
canvas.app.manor.Controller.prototype.updateCurrentBuilding = function () {
    this.view.updateCurrentBuildingPath();
};
canvas.app.manor.Controller.prototype.update = function () {
    this.view.update();
};
canvas.app.manor.Controller.prototype.sendRequest = function (action, params, loadName, objectName) {
    var i,
        len = this.request.stack.length;
    if (len > 0) {
        for (i = 0; i < len; i++) {
            if (this.request.stack[i][2].name == loadName) return;
        }
    }
    if (loadName == undefined) loadName = "";
    if (objectName == undefined) objectName = "estate";
    var url = canvas.Config.entryPoint + "?object=" + objectName + "&json_mode_on=1&action=" + action;
    if (params) {
        for (var str in params) {
            url += "&" + str + "=" + params[str];
        }
    } else {
        params = new Object();
    }
    if (this.request.busy && this.request.url == url) return;
    this.request.load(url, params, { name: loadName, action: action });
};
canvas.app.manor.Controller.prototype.listHandler = function () {
    canvas.app.manor.model.localStorage.set("menuOpened", this.view.menu.showed ? "1" : "0");
};
canvas.app.manor.Controller.prototype.loadConfig = function () {
    canvas.app.manor.model.needUpdate = false;
    if (canvas.ResourceLoader.get("conf")) {
        var tmpInfo = this.request.info;
        var tmpParams = this.request.params;
        this.request.info = { name: canvas.app.manor.Const.REQ_CONFIG, action: "conf" };
        this.request.params = null;
        this.completeHandler();
        canvas.ResourceLoader.remove("conf");
        this.request.info = tmpInfo;
        this.request.params = tmpParams;
    } else {
        this.sendRequest("conf", null, canvas.app.manor.Const.REQ_CONFIG);
    }
};
canvas.app.manor.Controller.prototype.loadUserRequests = function () {
    var params = new Object();
    params.page = canvas.app.manor.model.requestCurPage + 1;
    this.sendRequest("work_requests", params, canvas.app.manor.Const.REQ_LOAD_USER_REQUESTS);
};
canvas.app.manor.Controller.prototype.build = function () {
    var params = new Object();
    params.index = canvas.app.manor.model.selectedDich;
    params.type_id = canvas.app.manor.Const.TITLES.indexOf(canvas.app.manor.model.selectedBuilding) + 1;
    params.amount = this.view.buildingWin.upgrade.labourInput.input.text;
    this.sendRequest("build", params, canvas.app.manor.Const.REQ_BUILD);
};
canvas.app.manor.Controller.prototype.createWorkRequest = function (type, labour, price, edit) {
    var params = new Object();
    var dUserBuilding = canvas.app.manor.model.user.buildings[type];
    params.amount = labour;
    params.index = dUserBuilding.dichIndex.toString();
    params.type_id = canvas.app.manor.Const.TITLES.indexOf(type) + 1;
    params.work_request_price = price;
    this.sendRequest(edit ? "work_request_update" : "build", params, canvas.app.manor.Const.REQ_CREATE_WORK_REQUEST);
};
canvas.app.manor.Controller.prototype.removeWorkRequest = function (id) {
    var params = new Object();
    params.work_request_id = id;
    this.sendRequest("cancel_request", params, canvas.app.manor.Const.REQ_REMOVE_WORK_REQUEST);
};
canvas.app.manor.Controller.prototype.workUse = function (labour) {
    var params = new Object();
    params.work_request_id = canvas.app.manor.model.selectedRequestID;
    params.amount = labour;
    this.sendRequest("work", params, canvas.app.manor.Const.REQ_WORK_USE);
};
canvas.app.manor.Controller.prototype.buyCement = function (amount, useEnergy) {
    var params = new Object();
    params.amount = amount;
    params.energy = useEnergy ? "1" : "0";
    this.sendRequest("buy_cement", params, canvas.app.manor.Const.REQ_BUY_CEMENT);
};
canvas.app.manor.Controller.prototype.usePetsData = function () {
    var params = new Object();
    params.building_action = "conf";
    params.type_id = "4";
    this.sendRequest("building", params, canvas.app.manor.Const.REQ_USE_PETS_DATA);
};
canvas.app.manor.Controller.prototype.usePetsAction = function (petId, typeId) {
    var params = new Object();
    var petTrainingType = canvas.app.manor.model.petTrainingTypes[typeId];
    params.building_action = "train";
    params.type_id = "4";
    params.pet_id = petId;
    params.training_type = petTrainingType.id;
    this.sendRequest("building", params, canvas.app.manor.Const.REQ_USE_PETS_ACTION);
};
canvas.app.manor.Controller.prototype.useExpData = function (typeId, loadName) {
    var params = new Object();
    params.building_action = "conf";
    params.type_id = typeId == undefined ? "2" : typeId;
    this.sendRequest("building", params, loadName == undefined ? canvas.app.manor.Const.REQ_USE_EXP_DATA : loadName);
};
canvas.app.manor.Controller.prototype.useExpAction = function (action, flag, typeId, loadName) {
    var params = new Object();
    params.building_action = action;
    params.type_id = typeId == undefined ? "2" : typeId;
    params.energy = flag ? "1" : "0";
    if (action == "set_direction") params.dir = flag ? "1" : "0";
    this.sendRequest("building", params, loadName == undefined ? canvas.app.manor.Const.REQ_USE_EXP_ACTION : loadName);
};
canvas.app.manor.Controller.prototype.useValourData = function () {
    var params = new Object();
    params.building_action = "conf";
    params.type_id = "3";
    this.sendRequest("building", params, canvas.app.manor.Const.REQ_USE_VALOUR_DATA);
};
canvas.app.manor.Controller.prototype.useValourAction = function (action, useEnergy) {
    var params = new Object();
    params.building_action = action;
    params.type_id = "3";
    params.energy = useEnergy ? "1" : "0";
    this.sendRequest("building", params, canvas.app.manor.Const.REQ_USE_VALOUR_ACTION);
};
canvas.app.manor.Controller.prototype.useHospitalData = function () {
    var params = new Object();
    params.building_action = "conf";
    params.type_id = "8";
    this.sendRequest("building", params, canvas.app.manor.Const.REQ_USE_HOSPITAL_DATA);
};
canvas.app.manor.Controller.prototype.useHospitalAction = function () {
    var params = new Object();
    params.building_action = "use_buff";
    params.type_id = "8";
    this.sendRequest("building", params, canvas.app.manor.Const.REQ_USE_HOSPITAL_ACTION);
};
canvas.app.manor.Controller.prototype.useStorageAction = function (putId, getId, count) {
    if (count == undefined) count = 1;
    var params = new Object();
    params.type_id = "5";
    params.cnt = count;
    if (getId) {
        params.building_action = "give_art";
        params.artifact_id = getId;
    } else if (putId) {
        params.building_action = "put_art";
        params.artifact_id = putId;
    }
    this.sendRequest("building", params, canvas.app.manor.Const.REQ_USE_STORAGE_ACTION);
};
canvas.app.manor.Controller.prototype.useBankData = function () {
    var params = new Object();
    params.building_action = "conf";
    params.type_id = "1";
    this.sendRequest("building", params, canvas.app.manor.Const.REQ_USE_BANK_DATA);
};
canvas.app.manor.Controller.prototype.useBankAction = function (count) {
    if (count == undefined) count = 1;
    var params = new Object();
    params.building_action = "move_art";
    params.type_id = "1";
    params.artifact_id = canvas.app.manor.model.bankItemFrom.id;
    params.cnt = count;
    params.area_id_from = canvas.app.manor.model.bankItemFrom.area;
    params.area_id_to = canvas.app.manor.model.bankItemToArea;
    this.sendRequest("building", params, canvas.app.manor.Const.REQ_USE_BANK_ACTION);
};
canvas.app.manor.Controller.prototype.useWorkshopData = function () {
    var params = new Object();
    params.building_action = "conf";
    params.type_id = "6";
    this.sendRequest("building", params, canvas.app.manor.Const.REQ_USE_WORKSHOP_DATA);
};
canvas.app.manor.Controller.prototype.useWorkshopAction = function (params) {
    params.type_id = "6";
    this.sendRequest("building", params, canvas.app.manor.Const.REQ_USE_WORKSHOP_ACTION);
};
canvas.app.manor.Controller.prototype.useMineData = function () {
    var params = new Object();
    params.building_action = "conf";
    params.type_id = canvas.app.manor.Const.TITLES.indexOf(canvas.app.manor.model.selectedBuilding) + 1;
    this.sendRequest("building", params, canvas.app.manor.Const.REQ_USE_MINE_DATA);
};
canvas.app.manor.Controller.prototype.useMineAction = function (params) {
    params.type_id = canvas.app.manor.Const.TITLES.indexOf(canvas.app.manor.model.selectedBuilding) + 1;
    this.sendRequest("building", params, canvas.app.manor.Const.REQ_USE_MINE_ACTION);
};
canvas.app.manor.Controller.prototype.usePortalData = function () {
    this.sendRequest("building", { type_id: 18, building_action: "conf" });
};
canvas.app.manor.Controller.prototype.useBuildingData = function (requestName) {
    var params = new Object();
    params.building_action = "conf";
    params.type_id = canvas.app.manor.Const.TITLES.indexOf(canvas.app.manor.model.selectedBuilding) + 1;
    this.sendRequest("building", params, requestName);
};
canvas.app.manor.Controller.prototype.useBuildingAction = function (params, requestName) {
    params.type_id = canvas.app.manor.Const.TITLES.indexOf(canvas.app.manor.model.selectedBuilding) + 1;
    this.sendRequest("building", params, requestName);
};
canvas.app.manor.Controller.prototype.destroyBuilding = function () {
    var params = new Object();
    params.index = canvas.app.manor.model.selectedDich;
    params.type_id = canvas.app.manor.Const.TITLES.indexOf(canvas.app.manor.model.selectedBuilding) + 1;
    this.sendRequest("destroy_building", params, canvas.app.manor.Const.REQ_DESTROY_BUILDING);
};
canvas.app.manor.Controller.prototype.getAvailableBuildings = function () {
    var params = new Object();
    params.index = canvas.app.manor.model.selectedDich;
    this.sendRequest("buildings_list", params, canvas.app.manor.Const.REQ_GET_AVAILABLE_BUILDINGS);
};
canvas.app.manor.Controller.prototype.throneRoomConf = function () {
    var params = new Object();
    params.type_id = 1;
    params.building_action = "throneroom_conf";
    this.sendRequest("building", params);
};
canvas.app.manor.Controller.prototype.throneRoomStoreList = function () {
    this.sendRequest("list", { is_throne_room: "1", with_badges: "1", with_restrictions: "1" }, null, "store");
};
canvas.app.manor.Controller.prototype.throneRoomStorePurchase = function () {
    this.sendRequest("purchase", { is_throne_room: "1" }, null, "store");
};
canvas.app.manor.Controller.prototype.throneRoomStoreClear = function () {
    this.sendRequest("cart_clear", { is_throne_room: "1" }, null, "store");
};
canvas.app.manor.Controller.prototype.exit = function () {
    this.sendRequest("exit", null, canvas.app.manor.Const.REQ_EXIT);
};
canvas.app.manor.Controller.prototype.thisHandler = function (e) {
    var event = e.params;
    var Conf = canvas.app.manor.model;
    var workRequest;
    var item;
    var dUserBuilding;
    switch (e.name) {
        case canvas.app.manor.Event.SELECT_BUILDING:
            if (Conf.guestMode) {
                if (event.params == "1") this.view.openGuestThroneRoom();
            } else {
                if (event.params == "exit") {
                    this.exit();
                    return;
                }
                this.view.bankWin.close();
                if (event.params == "chooser") {
                    Conf.selectedBuilding = event.object.name;
                    this.view.buildingWin.open();
                    this.view.chooseBuildingWin.close();
                } else {
                    Conf.selectedDich = parseInt(event.params);
                    dUserBuilding = Conf.user.buildingsByIndex[parseInt(event.params)];
                    if (dUserBuilding) {
                        Conf.selectedBuilding = dUserBuilding.name;
                        this.view.buildingWin.open();
                    } else {
                        this.getAvailableBuildings();
                    }
                }
            }
            break;
        case canvas.app.manor.Event.BACK_TO_CHOOSE_BUILDING:
            this.view.buildingWin.close();
            this.getAvailableBuildings();
            break;
        case canvas.app.manor.Event.CLOSE_BUILDING:
            this.view.buildingWin.close();
            break;
        case canvas.app.manor.Event.CLOSE_LABOUR:
            this.view.labourWin.close();
            break;
        case canvas.app.manor.Event.OPEN_LABOUR:
            this.view.labourWin.open();
            break;
        case canvas.app.manor.Event.BUILD:
            this.build();
            break;
        case canvas.app.manor.Event.OPEN_HIRE:
            this.view.hireWin.open(false);
            if (event.object) {
                workRequest = event.object;
                this.view.hireWin.combo.setSelectedItem("name", workRequest.building);
                this.view.hireWin.inputLabour.text = workRequest.labour.toString();
                this.view.hireWin.inputPrice.text = workRequest.price.toString();
                this.view.hireWin.changeHandler();
            }
            break;
        case canvas.app.manor.Event.CLOSE_HIRE:
            this.view.hireWin.close();
            break;
        case canvas.app.manor.Event.OPEN_PORTAL_RESET:
            this.view.portalResetWin.open();
            break;
        case canvas.app.manor.Event.CLOSE_PORTAL_RESET:
            this.view.portalResetWin.close();
            break;
        case canvas.app.manor.Event.CLOSE_WORK:
            this.view.workWin.close();
            break;
        case canvas.app.manor.Event.OPEN_WORK:
            this.view.workWin.open(false);
            break;
        case canvas.app.manor.Event.OPEN_CONFIRM:
            this.view.openConfirm(event.params, event.object);
            break;
        case canvas.app.manor.Event.OPEN_MESSAGE:
            this.view.showError(event.params);
            break;
        case canvas.app.manor.Event.OPEN_CEMENT:
            this.view.cementWin.open();
            break;
        case canvas.app.manor.Event.CLOSE_CEMENT:
            this.view.cementWin.close();
            break;
        case canvas.app.manor.Event.CREATE_WORK_REQUEST:
            this.createWorkRequest(event.object.type, event.object.labour, event.object.price, typeof event.object.edit == "boolean" ? event.object.edit : false);
            break;
        case canvas.app.manor.Event.LOAD_WORK_REQUESTS:
            this.loadUserRequests();
            break;
        case canvas.app.manor.Event.REMOVE_WORK_REQUEST:
            this.removeWorkRequest(event.params);
            break;
        case canvas.app.manor.Event.WORK_USE:
            this.workUse(e.params);
            break;
        case canvas.app.manor.Event.BUY_CEMENT:
            this.view.cementWin.close();
            this.buyCement(parseInt(event.params), event.flag);
            break;
        case canvas.app.manor.Event.USE_PETS_DATA:
            this.usePetsData();
            break;
        case canvas.app.manor.Event.USE_PETS_ACTION:
            this.usePetsAction(event.object.pet, event.object.type);
            break;
        case canvas.app.manor.Event.USE_EXP_DATA:
            this.useExpData();
            break;
        case canvas.app.manor.Event.USE_EXP_ACTION:
            this.useExpAction(event.params, event.flag);
            break;
        case canvas.app.manor.Event.USE_EXP2_DATA:
            this.useExpData("21", canvas.app.manor.Const.REQ_USE_EXP2_DATA);
            break;
        case canvas.app.manor.Event.USE_EXP2_ACTION:
            this.useExpAction(event.params, event.flag, "21", canvas.app.manor.Const.REQ_USE_EXP2_ACTION);
            break;
        case canvas.app.manor.Event.USE_VALOUR_DATA:
            this.useValourData();
            break;
        case canvas.app.manor.Event.USE_VALOUR_ACTION:
            this.useValourAction(event.params, event.flag);
            break;
        case canvas.app.manor.Event.USE_HOSPITAL_DATA:
            this.useHospitalData();
            break;
        case canvas.app.manor.Event.USE_HOSPITAL_ACTION:
            this.useHospitalAction();
            break;
        case canvas.app.manor.Event.USE_STORAGE_DATA:
            this.useBankData();
            break;
        case canvas.app.manor.Event.USE_STORAGE_ACTION:
            if (event.object.putItem == undefined && event.object.getItem != undefined) {
                item = event.object.getItem;
            } else {
                item = event.object.putItem;
            }
            if (event.object.putItem != undefined && event.object.getItem != undefined) {
                Conf.storageArtToPut = item.id;
                if (item.equals(event.object.getItem)) {
                    Conf.storageArtToPutCount = (canvas.app.manor.view.controls.CountWin.count == 0 ? 1 : canvas.app.manor.view.controls.CountWin.count) + event.object.getItem.count;
                } else {
                    Conf.storageArtToPutCount = canvas.app.manor.view.controls.CountWin.count;
                }
            }
            if (item && item.count > 1 && canvas.app.manor.view.controls.CountWin.count == 0) {
                canvas.app.manor.view.controls.CountWin.event = [canvas.app.manor.Event.USE_STORAGE_ACTION, null, { object: { putItem: event.object.putItem, getItem: event.object.getItem } }];
                canvas.app.manor.view.controls.CountWin.maxCount = item.count;
                this.view.countWin.open();
            } else {
                if (event.object.putItem != undefined && event.object.getItem != undefined) {
                    this.useStorageAction("", event.object.getItem.id, event.object.getItem.count);
                } else {
                    this.useStorageAction(
                        event.object.putItem == undefined ? "" : event.object.putItem.id,
                        event.object.getItem == undefined ? "" : event.object.getItem.id,
                        canvas.app.manor.view.controls.CountWin.count == 0 ? 1 : canvas.app.manor.view.controls.CountWin.count
                    );
                }
            }
            break;
        case canvas.app.manor.Event.USE_PORTAL_DATA:
            this.sendRequest("building", { type_id: 18, building_action: "conf" });
            break;
        case canvas.app.manor.Event.USE_PORTAL_ACTION:
            event.object.type_id = 18;
            this.sendRequest("building", event.object);
            break;
        case canvas.app.manor.Event.USE_HUNT_CAMP_DATA_SEARCH:
            this.sendRequest("building", { type_id: 22, building_action: "confSearch" });
            break;
        case canvas.app.manor.Event.USE_HUNT_CAMP_DATA_FARM:
            this.sendRequest("building", { type_id: 22, building_action: "confFarm" });
            break;
        case canvas.app.manor.Event.USE_HUNT_CAMP_DATA_FORGE:
            this.sendRequest("building", { type_id: 22, building_action: "confForge" });
            break;
        case canvas.app.manor.Event.USE_HUNT_CAMP_ACTION:
            event.object.type_id = 22;
            this.view.huntCampWin.showLoader(true);
            this.sendRequest("building", event.object);
            break;
        case canvas.app.manor.Event.OPEN_BANK:
            this.view.bankWin.open();
            this.useBankData();
            this.view.bankWin.panels.path = event.flag ? "storage" : "cells";
            break;
        case canvas.app.manor.Event.USE_BANK_DATA:
            this.useBankData();
            break;
        case canvas.app.manor.Event.USE_BANK_ACTION:
            Conf.bankItemFrom = event.object.from;
            Conf.bankItemToArea = event.object.toArea == "firstFree" ? Conf.findFirstFreeArea(Conf.bankItemFrom.stackable ? Conf.bankItemFrom : null) : event.object.toArea;
            if (Conf.bankItemToArea == "") return;
            if (Conf.bankItemFrom.count > 1 && canvas.app.manor.view.controls.CountWin.count == 0) {
                canvas.app.manor.view.controls.CountWin.event = [canvas.app.manor.Event.USE_BANK_ACTION, null, { object: { from: Conf.bankItemFrom, toArea: Conf.bankItemToArea } }];
                canvas.app.manor.view.controls.CountWin.maxCount = Conf.bankItemFrom.count;
                this.view.countWin.open();
            } else {
                this.useBankAction(canvas.app.manor.view.controls.CountWin.count == 0 ? 1 : canvas.app.manor.view.controls.CountWin.count);
            }
            break;
        case canvas.app.manor.Event.OPEN_HUNT_CAMP:
            this.view.huntCampWin.open();
            break;
        case canvas.app.manor.Event.OPEN_COUNT:
            this.view.countWin.open();
            break;
        case canvas.app.manor.Event.USE_WORKSHOP_DATA:
            this.useWorkshopData();
            break;
        case canvas.app.manor.Event.USE_WORKSHOP_ACTION:
            this.useWorkshopAction(event.object);
            break;
        case canvas.app.manor.Event.USE_MINE_DATA:
            this.useMineData();
            break;
        case canvas.app.manor.Event.USE_MINE_ACTION:
            this.useMineAction(event.object);
            break;
        case canvas.app.manor.Event.LOAD_CONFIG:
            this.loadConfig();
            break;
        case canvas.app.manor.Event.DESTROY_BUILDING:
            this.destroyBuilding();
            break;
        case canvas.app.manor.Event.GET_AVAILABLE_BUILDINGS:
            this.getAvailableBuildings();
            break;
        case canvas.app.manor.Event.OPEN_THRONE_ROOM:
            Conf.throneRoomData.userData.items = null;
            this.view.throneRoom.open();
            this.throneRoomConf();
            break;
        case canvas.app.manor.Event.USE_KENNEL_DATA:
            this.useBuildingData(canvas.app.manor.Const.REQ_USE_KENNEL_DATA);
            break;
        case canvas.app.manor.Event.USE_KENNEL_ACTION:
            this.useBuildingAction(event.object, canvas.app.manor.Const.REQ_USE_KENNEL_ACTION);
            break;
        case canvas.app.manor.Event.OPEN_CHOOSE_PET:
            if (event.object.type) {
                Conf.campData.selectedType = event.object.type;
            } else {
                Conf.campData.selectedType = 0;
            }
            Conf.campData.selectedSlot = event.object.index;
            this.view.choosePetWin.excludePets = event.object.excludePets;
            this.view.choosePetWin.open();
            break;
        case canvas.app.manor.Event.CLOSE_CHOOSE_PET:
            if (Conf.campData.selectedType) {
                this.view.huntCampWin.mineTalismans.list.items[Conf.campData.selectedType - 4].pets[Conf.campData.selectedSlot].data = event.object;
                this.view.huntCampWin.mineTalismans.list.items[Conf.campData.selectedType - 4].update();
            } else {
                this.view.huntCampWin.mineResources.list.items[Conf.campData.selectedSlot].pet = event.object;
            }
            this.view.choosePetWin.close();
            break;
        case canvas.app.manor.Event.EXIT:
            this.exit();
            break;
        case canvas.app.manor.Event.THRONE_ROOM_INSTALL:
            this.sendRequest("building", { type_id: 1, building_action: "throneroom_install", id: event.id });
            break;
        case canvas.app.manor.Event.THRONE_ROOM_REMOVE:
            this.sendRequest("building", { type_id: 1, building_action: "throneroom_remove", id: event.id });
            break;
        case canvas.app.manor.Event.THRONE_ROOM_UPDATE:
            this.view.throneRoom.update();
            break;
        case canvas.app.manor.Event.THRONE_ROOM_BUY:
            this.sendRequest("purchase_in_one_step", { "form[item_id]": event.id, "form[amount]": 1, is_throne_room: 1 }, null, "store");
            break;
    }
};
canvas.app.manor.Event = {
    ENTER_FRAME: "Manor.ENTER_FRAME",
    ENTER_FRAME_ANIM: "Manor.ENTER_FRAME_ANIM",
    HINT_ADD: "Manor.HINT_ADD",
    HINT_REMOVE: "Manor.HINT_REMOVE",
    SELECT_BUILDING: "Manor.SELECT_BUILDING",
    CLOSE_BUILDING: "Manor.CLOSE_BUILDING",
    BUILD: "Manor.BUILD",
    CLOSE_LABOUR: "Manor.CLOSE_LABOUR",
    OPEN_LABOUR: "Manor.OPEN_LABOUR",
    OPEN_HIRE: "Manor.OPEN_HIRE",
    CLOSE_HIRE: "Manor.CLOSE_HIRE",
    OPEN_PORTAL_RESET: "Manor.OPEN_PORTAL_RESET",
    CLOSE_PORTAL_RESET: "Manor.CLOSE_PORTAL_RESET",
    OPEN_WORK: "Manor.OPEN_WORK",
    CLOSE_WORK: "Manor.CLOSE_WORK",
    OPEN_CONFIRM: "Manor.OPEN_CONFIRM",
    OPEN_MESSAGE: "Manor.OPEN_MESSAGE",
    OPEN_CEMENT: "Manor.OPEN_CEMENT",
    CLOSE_CEMENT: "Manor.CLOSE_CEMENT",
    CREATE_WORK_REQUEST: "Manor.CREATE_WORK_REQUEST",
    LOAD_WORK_REQUESTS: "Manor.LOAD_WORK_REQUESTS",
    REMOVE_WORK_REQUEST: "Manor.REMOVE_WORK_REQUEST",
    WORK_USE: "Manor.WORK_USE",
    OPEN_MARKET_BUY: "Manor.OPEN_MARKET_BUY",
    OPEN_MARKET_SELL: "Manor.OPEN_MARKET_SELL",
    CLOSE_MARKET: "Manor.CLOSE_MARKET",
    LOAD_SELL_REQUESTS: "Manor.LOAD_SELL_REQUESTS",
    LOAD_SELL_REQUESTS2: "Manor.LOAD_SELL_REQUESTS2",
    BUY_AREA: "Manor.BUY_AREA",
    SELL_AREA: "Manor.SELL_AREA",
    SELL_AREA_CANCEL: "Manor.SELL_AREA_CANCEL",
    SELECT_LOCATION: "Manor.SELECT_LOCATION",
    BUY_CEMENT: "Manor.BUY_CEMENT",
    USE_PETS_DATA: "Manor.USE_PETS_DATA",
    USE_PETS_ACTION: "Manor.USE_PETS_ACTION",
    USE_EXP_DATA: "Manor.USE_EXP_DATA",
    USE_EXP_ACTION: "Manor.USE_EXP_ACTION",
    USE_EXP2_DATA: "Manor.USE_EXP2_DATA",
    USE_EXP2_ACTION: "Manor.USE_EXP2_ACTION",
    USE_VALOUR_DATA: "Manor.USE_VALOUR_DATA",
    USE_VALOUR_ACTION: "Manor.USE_VALOUR_ACTION",
    USE_HOSPITAL_DATA: "Manor.USE_HOSPITAL_DATA",
    USE_HOSPITAL_ACTION: "Manor.USE_HOSPITAL_ACTION",
    USE_STORAGE_DATA: "Manor.USE_STORAGE_DATA",
    USE_STORAGE_ACTION: "Manor.USE_STORAGE_ACTION",
    USE_PORTAL_DATA: "Manor.USE_PORTAL_DATA",
    USE_PORTAL_ACTION: "Manor.USE_PORTAL_ACTION",
    USE_HUNT_CAMP_DATA_SEARCH: "Manor.USE_HUNT_CAMP_DATA_SEARCH",
    USE_HUNT_CAMP_DATA_FARM: "Manor.USE_HUNT_CAMP_DATA_FARM",
    USE_HUNT_CAMP_DATA_FORGE: "Manor.USE_HUNT_CAMP_DATA_FORGE",
    USE_HUNT_CAMP_ACTION: "Manor.USE_HUNT_CAMP_ACTION",
    OPEN_HUNT_CAMP: "Manor.OPEN_HUNT_CAMP",
    OPEN_CHOOSE_PET: "Manor.OPEN_CHOOSE_PET",
    CLOSE_CHOOSE_PET: "Manor.CLOSE_CHOOSE_PET",
    OPEN_BANK: "Manor.OPEN_BANK",
    USE_BANK_DATA: "Manor.USE_BANK_DATA",
    USE_BANK_ACTION: "Manor.USE_BANK_ACTION",
    OPEN_COUNT: "Manor.OPEN_COUNT",
    USE_WORKSHOP_DATA: "Manor.USE_WORKSHOP_DATA",
    USE_WORKSHOP_ACTION: "Manor.USE_WORKSHOP_ACTION",
    USE_MINE_DATA: "Manor.USE_MINE_DATA",
    USE_MINE_ACTION: "Manor.USE_MINE_ACTION",
    LOAD_CONFIG: "Manor.LOAD_CONFIG",
    MOVE_AREA: "Manor.MOVE_AREA",
    DESTROY_BUILDING: "Manor.DESTROY_BUILDING",
    GET_AVAILABLE_BUILDINGS: "Manor.GET_AVAILABLE_BUILDINGS",
    BACK_TO_CHOOSE_BUILDING: "Manor.BACK_TO_CHOOSE_BUILDING",
    OPEN_THRONE_ROOM: "Manor.OPEN_THRONE_ROOM",
    USE_KENNEL_DATA: "Manor.USE_KENNEL_DATA",
    USE_KENNEL_ACTION: "Manor.USE_KENNEL_ACTION",
    PANELS_PATH: "Manor.PANELS_PATH",
    PANELS_CLICK: "Manor.PANELS_CLICK",
    EXIT: "Manor.EXIT",
    THRONE_ROOM_INSTALL: "Manor.THRONE_ROOM_INSTALL",
    THRONE_ROOM_REMOVE: "Manor.THRONE_ROOM_REMOVE",
    THRONE_ROOM_UPDATE: "Manor.THRONE_ROOM_UPDATE",
    THRONE_ROOM_BUY: "Manor.THRONE_ROOM_BUY",
    HIDE_BUILDING_LOADER: "Manor.HIDE_BUILDING_LOADER",
};
canvas.app.manor.Main = function (model) {
    canvas.px.Container.call(this);
    this.model = model;
    this.hintManager = new canvas.utils.HintManager();
    this.hintContainer = new canvas.px.Container();
    this.hintContainer.interactive = true;
    canvas.EventManager.addEventListener(canvas.app.manor.Event.HINT_ADD, null, this.handlerHintAdd, this);
    canvas.EventManager.addEventListener(canvas.app.manor.Event.HINT_REMOVE, null, this.handlerHintRemove, this);
    this.windowsContainer = new canvas.px.Container();
    this.view = this.addChild(new canvas.app.manor.View());
    this.addChild(this.windowsContainer);
    this.addChild(this.hintContainer);
    this.windowsManager = new canvas.utils.WindowsManager();
    this.controller = new canvas.app.manor.Controller(this);
    if (this.model.guestMode) {
        this.view.hideGuestControls();
        this.view.update();
        this.x -= 10;
        if (this.model.showThroneRoom) this.view.openGuestThroneRoom();
    } else {
        this.controller.loadConfig();
    }
    canvas.EventManager.addEventListener(canvas.px.WindowEvent.EVENT_OPEN, null, this.openWinHandler, this);
    canvas.EventManager.addEventListener(canvas.px.WindowEvent.EVENT_CLOSE, null, this.closeWinHandler, this);
};
canvas.app.manor.Main.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.manor.Main.prototype.handlerHintAdd = function (e) {
    this.hintManager.add(e.params.target, e.params.params);
};
canvas.app.manor.Main.prototype.handlerHintRemove = function (e) {
    this.hintManager.remove(e.params.target);
};
canvas.app.manor.Main.prototype.resize = function (w, h) {
    this.view.resize();
    this.windowsManager.init(this.windowsContainer, w, h, this.view.container);
    this.hintManager.init(this.hintContainer, w, h);
    this.view.position.set(Math.round((w - this.model.width) * 0.5), canvas.app.manor.Const.CURL_DY + Math.round((h - this.model.height) * 0.5));
};
canvas.app.manor.Main.prototype.openWinHandler = function (event) {
    this.hintManager.hide();
    this.model.paused = true;
    this.view.manor.deactivate();
};
canvas.app.manor.Main.prototype.closeWinHandler = function (event) {
    this.model.paused = this.windowsManager.haveActiveWindows;
    if (!this.windowsManager.haveActiveWindows) this.view.manor.activate();
};
canvas.app.manor.Model = function (par) {
    this.par = par;
    this.paused = false;
    this.showThroneRoom = par.show_throne_room == "1";
    this.requestCurPage = 0;
    this.mapMode = false;
    this.selectedBuilding = "";
    this.selectedRequest = 0;
    this.selectedRequestID = "";
    this.requestNumPages = 1;
    this.selectedPet = "";
    this.expUse = false;
    this.expCost = 0;
    this.exp2Use = false;
    this.exp2Cost = 0;
    this.valourCost = 0;
    this.storageArtToPut = "";
    this.storageArtToPutCount = 1;
    this.bankCells = [];
    this.bankItems = [];
    this.needUpdate = false;
    this.selectedDich = 0;
    this.globalDrag = false;
    this.buildingPanelsStatus = {};
    this.kennelData = new canvas.data.manor.DKennel();
    this.campData = new canvas.data.manor.DCampData();
    this.throneRoomData = new canvas.data.manor.DThroneRoomData(par);
    this.requestToRemove = "";
    this.winScale = 1;
    this.user = new canvas.data.manor.DUser();
    this.backImage = par.BackImage != undefined ? canvas.Functions.extractSwfName(par.BackImage) : "manor_back_hum";
    this.cementImage = par.CementImage != undefined ? par.CementImage : "";
    this.favoriteImage = par.FavoriteImage != undefined ? par.FavoriteImage : "images/favorite.png";
    this.cementID = par.CementArtikulId != undefined ? par.CementArtikulId : "";
    this.dicURL = par.DicUrl != undefined ? par.DicUrl : "dic.xml";
    this.requestURL = par.RequestUrl != undefined ? par.RequestUrl : "manor_conf.xml";
    this.cementCost = par.CementCost != undefined ? parseInt(par.CementCost) : 1;
    this.user.race = par.Race != undefined ? parseInt(par.Race) : 1;
    this.guestMode = par.Guest != undefined ? par.Guest == "1" : false;
    this.guestBuildings = par.Buildings != undefined ? par.Buildings.toString() : "";
    this.winterMode = par.winterMode != undefined ? par.winterMode == "1" : false;
    this.user.labourMax = 100;
    this.labourRequests = new Array();
    this.localStorage = new canvas.utils.LocalStorage(canvas.Log.MANOR);
    this.serverTime = new canvas.utils.ServerTime(parseInt(par.current_time), parseInt(par.time_zone));
    var i,
        len = canvas.app.manor.Const.TITLES.length + 1;
    for (i = len; i <= canvas.app.manor.Const.BUILDING_MAX_COUNT; i++) {
        canvas.app.manor.Const.TITLES.push("b" + i);
    }
    this.labourPrognosisData = new Object();
    if (par.WorkAvgTimes != undefined) {
        this.labourPrognosisData = JSON.parse(par.WorkAvgTimes);
    }
    var sess = canvas.Functions.getSessTarget();
    if (sess.manor) {
        canvas.Functions.deleteSessTarget();
    }
};
canvas.app.manor.Model.prototype.getSelectedBuildingBase = function () {
    if (this.selectedBuilding.substr(0, 4) == "mine") return "mine";
    if (this.selectedBuilding.substr(0, 4) == "make") return "make";
    return this.selectedBuilding;
};
canvas.app.manor.Model.prototype.parseDic = function () {
    var xml = canvas.ResourceLoader.get("dic").data;
    var obj;
    var dbuilding;
    var a;
    var str;
    var flags;
    var maxType = 0;
    var buildingSwf;
    var list;
    var i, len, index;
    this.buildings = new Object();
    this.diches = new Array();
    this.multiBuildingTypes = new Array();
    list = xml.getElementsByTagName("building");
    var len = list.length;
    for (i = 0; i < len; i++) {
        obj = list[i];
        dbuilding = new canvas.data.manor.DBuilding();
        dbuilding.cost = parseInt(canvas.Functions.getChildValueByName(obj, "cost")) || 0;
        dbuilding.desc = canvas.Functions.getChildValueByName(obj, "description");
        if (this.user.race == 1) {
            buildingSwf = this.winterMode ? canvas.Functions.getChildNodeByName(obj, "building_swf3") : canvas.Functions.getChildNodeByName(obj, "building_swf1");
        } else {
            buildingSwf = this.winterMode ? canvas.Functions.getChildNodeByName(obj, "building_swf4") : canvas.Functions.getChildNodeByName(obj, "building_swf2");
        }
        dbuilding.image = buildingSwf ? canvas.Functions.extractSwfName(buildingSwf[0].innerHTML) : "";
        dbuilding.dx = buildingSwf ? parseInt(canvas.Functions.getAttribute(buildingSwf[0], "dx")) : 0;
        dbuilding.dy = buildingSwf ? parseInt(canvas.Functions.getAttribute(buildingSwf[0], "dy")) : 0;
        dbuilding.picture = this.user.race == 1 ? canvas.Functions.getChildValueByName(obj, "building_picture3") : canvas.Functions.getChildValueByName(obj, "building_picture4");
        if (dbuilding.picture.indexOf(".") < 0) {
            dbuilding.picture = "";
        } else {
            dbuilding.picture = dbuilding.picture.substr(0, dbuilding.picture.length - 4);
        }
        dbuilding.level = parseInt(canvas.Functions.getChildValueByName(obj, "level"));
        dbuilding.type = parseInt(canvas.Functions.getChildValueByName(obj, "type_id"));
        if (dbuilding.type > maxType) maxType = dbuilding.type;
        dbuilding.name = canvas.app.manor.Const.TITLES[dbuilding.type - 1];
        dbuilding.title = canvas.Functions.getChildValueByName(obj, "title");
        flags = canvas.Functions.getChildValueByName(obj, "flags");
        if (flags) {
            flags = parseInt(flags);
            dbuilding.enabled = !canvas.Functions.testFlag(flags, 1);
            dbuilding.destroyEnabled = !canvas.Functions.testFlag(flags, 4);
        }
        if (this.buildings[dbuilding.name] == undefined) {
            a = new Array();
            a[dbuilding.level] = dbuilding;
            this.buildings[dbuilding.name] = a;
        } else {
            a = this.buildings[dbuilding.name];
            a[dbuilding.level] = dbuilding;
        }
        if (dbuilding.level == 0) {
            index = parseInt(canvas.Functions.getChildValueByName(obj, "index"));
            if (this.diches[index] != undefined) this.multiBuildingTypes.push(dbuilding.type);
            if (dbuilding.type == 0 || this.diches[index] == undefined) {
                this.diches[index] = dbuilding;
                dbuilding.ownDichIndex = index;
            }
        }
    }
    canvas.app.manor.Const.BUILDING_COUNT = maxType;
    var i;
    var dUserBuilding;
    if (this.guestMode && this.guestBuildings != "") {
        obj = JSON.parse(this.guestBuildings);
        this.user.buildings = new Object();
        this.user.buildingsByIndex = new Array();
        for (i = 1; i <= canvas.app.manor.Const.BUILDING_COUNT; i++) {
            dUserBuilding = new canvas.data.manor.DUserBuilding();
            dUserBuilding.level = obj[i] == undefined ? 0 : parseInt(obj[i].level);
            dUserBuilding.type = i;
            dUserBuilding.dichIndex = obj[i] == undefined ? 0 : parseInt(obj[i].map_index);
            dUserBuilding.name = canvas.app.manor.Const.TITLES[dUserBuilding.type - 1];
            this.user.buildings[dUserBuilding.name] = dUserBuilding;
            this.user.buildingsByIndex[dUserBuilding.dichIndex] = dUserBuilding;
        }
    }
};
canvas.app.manor.Model.prototype.parseConf = function (xml) {
    var obj;
    var str;
    var i, len;
    var dUserBuilding;
    var dBuilding;
    this.user.buildings = new Object();
    this.user.buildingsById = new Object();
    this.user.buildingsByIndex = new Array();
    for (i = 0; i < canvas.app.manor.Const.BUILDING_COUNT; i++) {
        if (this.buildings[canvas.app.manor.Const.TITLES[i]] == undefined) continue;
        dBuilding = this.buildings[canvas.app.manor.Const.TITLES[i]][0];
        dUserBuilding = new canvas.data.manor.DUserBuilding();
        dUserBuilding.labour = 0;
        dUserBuilding.level = 0;
        dUserBuilding.type = i + 1;
        dUserBuilding.name = canvas.app.manor.Const.TITLES[i];
        dUserBuilding.dichIndex = dBuilding.ownDichIndex;
        switch (dUserBuilding.type) {
            case canvas.data.manor.DBuilding.TYPE_TREE:
                dUserBuilding.params = xml.tree_url;
                break;
            case canvas.data.manor.DBuilding.TYPE_HALLOWEEN:
                dUserBuilding.params = xml.halloween_url;
                break;
        }
        this.user.buildings[dUserBuilding.name] = dUserBuilding;
    }
    len = xml.buildings.length;
    for (i = 0; i < len; i++) {
        obj = xml.buildings[i];
        dUserBuilding = new canvas.data.manor.DUserBuilding();
        dUserBuilding.labour = parseInt(obj.work);
        dUserBuilding.level = parseInt(obj.level);
        dUserBuilding.type = parseInt(obj.type_id);
        dUserBuilding.id = parseInt(obj.id);
        dUserBuilding.dichIndex = parseInt(obj.index);
        dUserBuilding.name = canvas.app.manor.Const.TITLES[dUserBuilding.type - 1];
        switch (dUserBuilding.type) {
            case canvas.data.manor.DBuilding.TYPE_TREE:
                dUserBuilding.params = xml.tree_url;
                break;
            case canvas.data.manor.DBuilding.TYPE_HALLOWEEN:
                dUserBuilding.params = xml.halloween_url;
                break;
        }
        this.user.buildings[dUserBuilding.name] = dUserBuilding;
        this.user.buildingsById[dUserBuilding.id] = dUserBuilding;
        this.user.buildingsByIndex[dUserBuilding.dichIndex] = dUserBuilding;
        dUserBuilding.hirePrice = 10;
        this.buildingPanelsStatus["bs_" + dUserBuilding.name] = this.localStorage.get("bs_" + dUserBuilding.name);
    }
    var workRequest;
    this.user.requests = new Array();
    len = xml.work_requests.length;
    for (i = 0; i < len; i++) {
        obj = xml.work_requests[i];
        workRequest = new canvas.data.manor.DWorkRequest();
        dUserBuilding = this.user.buildingsById[parseInt(obj.building_id)];
        if (dUserBuilding == null) continue;
        workRequest.building = dUserBuilding.name;
        workRequest.id = obj.id;
        workRequest.labour = parseInt(obj.amount);
        workRequest.price = parseInt(obj.price);
        this.user.requests.push(workRequest);
    }
    this.user.labour = parseInt(xml.current_work);
    this.user.cement = parseInt(xml.current_cement);
    this.user.money = parseInt(xml.money);
    this.user.labourMax = parseInt(xml.work_max);
    this.user.ghost = xml.ghost == "1";
    this.user.workRefreshTime = parseInt(xml.work_refresh_time);
};
canvas.app.manor.Model.prototype.parseUserRequests = function (xml) {
    this.requestNumPages = xml.pages;
    this.labourRequests = new Array();
    var labourRequest;
    var obj;
    var len = xml.work_requests.length;
    for (var i = 0; i < len; i++) {
        obj = xml.work_requests[i];
        labourRequest = new canvas.data.manor.DLabourRequest();
        labourRequest.user = new canvas.data.manor.DUserGame();
        labourRequest.user.login = obj.nick;
        labourRequest.user.level = obj.level;
        labourRequest.labour = obj.amount;
        labourRequest.price = obj.price;
        labourRequest.id = obj.id;
        this.labourRequests[this.requestCurPage * canvas.app.manor.Const.REQUESTS_ON_PAGE + i] = labourRequest;
    }
};
canvas.app.manor.Model.prototype.parsePets = function (xml) {
    this.pets = new Array();
    this.petTrainingTypes = new Array();
    var pet;
    var trainingType;
    var obj;
    var i,
        len = xml.pets.length;
    for (i = 0; i < len; i++) {
        obj = xml.pets[i];
        pet = new canvas.data.manor.DPet();
        pet.id = obj.id.toString();
        pet.title = obj.title.toString();
        pet.image = obj.picture2.toString();
        pet.level = parseInt(obj.level.toString());
        pet.swf = obj.picture.toString();
        pet.exp = parseInt(obj.exp.toString());
        pet.expUp = parseInt(obj.exp_max.toString());
        pet.time = parseInt(obj.time_left.toString());
        pet.timeFull = parseInt(obj.time_total.toString());
        pet.error = obj.error.toString();
        pet.color = parseInt(obj.quality.toString());
        this.pets.push(pet);
    }
    len = xml.training_types.length;
    for (i = 0; i < len; i++) {
        obj = xml.training_types[i];
        trainingType = new canvas.data.manor.DPetTrainingType();
        trainingType.id = obj.id.toString();
        trainingType.duration = parseInt(obj.duration.toString());
        trainingType.exp = parseInt(obj.exp.toString());
        trainingType.feedCost = parseInt(obj.feed_cost.toString());
        this.petTrainingTypes.push(trainingType);
    }
};
canvas.app.manor.Model.prototype.parseExp = function (xml) {
    this.expCount = parseInt(xml.exp.toString());
    this.expDecrease = parseInt(xml.exp_decr.toString()) == 1;
    this.expMax = parseInt(xml.exp_limit.toString());
    this.expPercent = parseInt(xml.exp_percent.toString());
    this.expUse = xml.exp_use.toString() == "1";
    this.expCost = parseInt(xml.cost.toString());
};
canvas.app.manor.Model.prototype.parseExp2 = function (xml) {
    this.exp2Count = parseInt(xml.exp.toString());
    this.exp2Decrease = parseInt(xml.exp_decr.toString()) == 1;
    this.exp2Max = parseInt(xml.exp_limit.toString());
    this.exp2Percent = parseInt(xml.exp_percent.toString());
    this.exp2Use = xml.exp_use.toString() == "1";
    this.exp2Cost = parseInt(xml.cost.toString());
};
canvas.app.manor.Model.prototype.parseValour = function (xml) {
    this.valourCount = parseInt(xml.honor.toString());
    this.valourMax = parseInt(xml.honor_limit.toString());
    this.valourPercent = parseInt(xml.honor_percent.toString());
    this.valourUse = xml.honor_use.toString() == "1";
    this.valourCost = parseInt(xml.cost.toString());
};
canvas.app.manor.Model.prototype.parseHospital = function (xml) {
    var obj;
    var item;
    this.hospitalItems = new Array();
    var i,
        len = xml.injuries.length;
    this.hospitalRegeneratePercent = xml.reg_percent * 0.01;
    for (i = 0; i < len; i++) {
        obj = xml.injuries[i];
        item = new canvas.data.manor.DItem();
        item.id = obj.id.toString();
        item.title = obj.title.toString();
        item.image = obj.picture.toString();
        item.time = Math.round(obj.expires * (1 - this.hospitalRegeneratePercent)).toString();
        this.hospitalItems.push(item);
    }
    this.hospitalBuffItem = new canvas.data.manor.DItem();
    this.hospitalBuffItem.id = this.hospitalBuffItem.aid = xml.buff_id.toString();
    this.hospitalBuffItem.image = xml.buff_picture.toString();
    this.hospitalBuffItem.time = parseInt(xml.buff_time.toString());
    this.hospitalBuffItem.timeFull = parseInt(xml.buff_cooldown.toString());
};
canvas.app.manor.Model.prototype.parseKennel = function (xml) {
    var obj;
    var bot;
    var str;
    this.kennelData.bots = new Array();
    var i,
        len = xml.bot_list.length;
    for (str in xml.bot_list) {
        obj = xml.bot_list[str];
        if (typeof obj == "function") continue;
        if (!obj) break;
        bot = new canvas.data.manor.DKennelBot();
        bot.id = obj.id;
        bot.nick = obj.nick;
        bot.picture = canvas.Config.dataPath + "bots/" + obj.picture;
        bot.moneyMin = parseInt(obj.money_min);
        bot.moneyMax = parseInt(obj.money_max);
        bot.price = parseInt(obj.price);
        bot.exp = parseInt(obj.exp);
        this.kennelData.bots.push(bot);
    }
    for (str in xml.user_times) {
        obj = xml.user_times[str];
        switch (str) {
            case "KENNEL_TIME":
                this.kennelData.killTime = obj;
                break;
            case "KENNEL_BIG_TIME":
                this.kennelData.killBigTime = obj;
                break;
        }
    }
    for (str in xml.settings) {
        obj = xml.settings[str];
        switch (str) {
            case "KILL10_PRICE_EXT":
                this.kennelData.killPriceExt = obj;
                break;
            case "KILL10_TIMER":
                this.kennelData.killBigCooldown = parseInt(obj) + 1;
                break;
            case "KILL1_TIMER":
                this.kennelData.killColldown = parseInt(obj) + 1;
                break;
        }
    }
    this.kennelData.canKill = xml.can_kill;
    this.kennelData.canKillTotal = xml.kill_cnt;
};
canvas.app.manor.Model.prototype.parseStorage = function (xml) {
    var obj;
    var item;
    this.storageItems = new Array();
    this.storageUserItems = new Array();
    var i,
        len = xml.tmp_artifacts.length;
    for (i = 0; i < len; i++) {
        obj = xml.tmp_artifacts[i];
        item = new canvas.data.manor.DItem();
        item.id = obj.id.toString();
        item.aid = obj.aid.toString();
        item.title = obj.title.toString();
        item.image = obj.picture.toString();
        item.time = obj.expires.toString();
        item.count = parseInt(obj.cnt.toString());
        this.storageUserItems.push(item);
    }
    len = xml.current_artifacts.length;
    for (i = 0; i < len; i++) {
        obj = xml.current_artifacts[i];
        item = new canvas.data.manor.DItem();
        item.id = obj.id.toString();
        item.aid = obj.aid.toString();
        item.title = obj.title.toString();
        item.image = obj.picture.toString();
        item.time = obj.expires.toString();
        item.count = parseInt(obj.cnt.toString());
        storageItems.push(item);
    }
    this.storageSlots = parseInt(xml.fridge_cnt.toString());
    while (i < this.storageSlots) {
        item = new canvas.data.manor.DItem();
        this.storageItems.push(item);
        item.id = "empty";
        i++;
    }
};
canvas.app.manor.Model.prototype.parseBank = function (xml) {
    var obj;
    var obj2;
    var item;
    var cell;
    this.bankItems = new Array();
    var i,
        j,
        len = xml.bag_artifacts.length,
        len2;
    for (i = 0; i < len; i++) {
        obj = xml.bag_artifacts[i];
        item = new canvas.data.manor.DItem(obj);
        item.area = "0";
        this.bankItems.push(item);
    }
    this.storageItems = new Array();
    len = xml.cell_storage.length;
    for (i = 0; i < len; i++) {
        obj = xml.cell_storage[i];
        item = new canvas.data.manor.DItem(obj);
        this.storageItems.push(item);
    }
    this.bankCells = new Array();
    len = xml.cells.length;
    for (i = 0; i < len; i++) {
        obj = xml.cells[i];
        cell = new canvas.data.manor.DItemCell();
        cell.size = parseInt(obj.cell_capacity.toString());
        cell.area = obj.cell_area_id.toString();
        cell.title = obj.cell_area_title.toString();
        cell.items = new Array();
        len2 = obj.cell_artifacts.length;
        for (j = 0; j < len2; j++) {
            obj2 = obj.cell_artifacts[j];
            item = new canvas.data.manor.DItem(obj2);
            cell.items.push(item);
            item.area = cell.area;
        }
        this.bankCells.push(cell);
    }
};
canvas.app.manor.Model.prototype.parseWorkshop = function (xml) {
    var obj;
    var obj2;
    var recipe;
    var a;
    var item;
    var request;
    this.workShopTimeLeft = parseInt(xml.duration_left.toString());
    this.workShopReduceKoef = parseFloat(xml.reduce_duration.toString());
    if (!this.workShopReduceKoef) this.workShopReduceKoef = 1;
    this.workShopRecepts = new Object();
    this.workShopReceptsArray = new Array();
    var i,
        len = xml.recipes.length;
    for (i = 0; i < len; i++) {
        obj = xml.recipes[i];
        recipe = new canvas.data.manor.DRecipe();
        recipe.id = obj.recipe_id.toString();
        recipe.title = obj.title.toString();
        recipe.duration = parseInt(obj.duration.toString());
        recipe.image = obj.picture.toString();
        recipe.resultCount = parseInt(obj.cnt.toString());
        recipe.resultAid = obj.artikul_id.toString();
        recipe.favorite = obj.favorite == "1";
        recipe.items = new Array();
        var j,
            len2 = obj.parts.length;
        for (j = 0; j < len2; j++) {
            obj2 = obj.parts[j];
            item = new canvas.data.manor.DItem();
            item.id = item.aid = obj2.artikul_id.toString();
            item.title = obj2.title.toString();
            item.image = obj2.picture.toString();
            item.count = parseInt(obj2.cnt.toString());
            recipe.items.push(item);
        }
        this.workShopRecepts[recipe.id] = recipe;
        this.workShopReceptsArray.push(recipe);
    }
    this.workShopBugArtefacts = new Object();
    len = xml.bag_artifacts.length;
    for (i = 0; i < len; i++) {
        obj = xml.bag_artifacts[i];
        item = new canvas.data.manor.DItem();
        item.id = item.aid = obj.artikul_id.toString();
        item.image = obj.picture.toString();
        item.title = obj.title.toString();
        item.count = parseInt(obj.cnt.toString());
        this.workShopBugArtefacts[item.id] = item;
    }
    this.workShopRequests = new Array();
    this.workShopRequestsCompleted = new Array();
    len = xml.craft_requests.length;
    for (i = 0; i < len; i++) {
        obj = xml.craft_requests[i];
        request = new canvas.data.manor.DCraftRequest();
        request.id = obj.id.toString();
        request.recipe = obj.recipe_id.toString();
        request.count = parseInt(obj.amount.toString());
        request.durationMax = Math.round(parseInt(obj.duration.toString()) * this.workShopReduceKoef);
        request.duration = parseInt(obj.time.toString());
        if (request.duration >= request.durationMax) {
            this.workShopRequestsCompleted.push(request);
        } else {
            this.workShopRequests.push(request);
        }
    }
};
canvas.app.manor.Model.prototype.parseMine = function (xml) {
    var request;
    var obj;
    this.craftData = new canvas.data.manor.DCraftData();
    this.craftData.item = new canvas.data.manor.DItem();
    if (xml.hasOwnProperty("artikul_id")) {
        this.craftData.item.count = parseInt(xml.artikul_quantity);
        this.craftData.item.aid = this.craftData.item.id = xml.artikul_id;
        this.craftData.item.image = xml.picture;
        this.craftData.item.title = xml.title;
    } else {
        this.craftData.item.count = parseInt(xml.material_artikul_quantity);
        this.craftData.item.aid = this.craftData.item.id = xml.material_artikul_id;
        this.craftData.item.image = xml.material_picture;
        this.craftData.item.title = xml.material_title;
        this.craftData.item2 = new canvas.data.manor.DItem();
        this.craftData.item2.count = parseInt(xml.result_artikul_quantity);
        this.craftData.item2.aid = this.craftData.item2.id = xml.result_artikul_id;
        this.craftData.item2.image = xml.result_picture;
        this.craftData.item2.title = xml.result_title;
    }
    this.craftData.price = parseInt(xml.cost);
    this.craftData.queueSizeMax = parseInt(xml.max_queue_length);
    this.craftData.requests = new Array();
    this.craftData.requestsCompleted = new Array();
    this.craftData.materialCount = parseInt(xml.material_cnt);
    var i,
        len = xml.craft_requests.length;
    for (i = 0; i < len; i++) {
        obj = xml.craft_requests[i];
        request = new canvas.data.manor.DCraftRequest();
        request.item = this.craftData.item2 == null ? this.craftData.item : this.craftData.item2;
        request.id = obj.id.toString();
        request.durationMax = parseInt(xml.max_time_to_produce);
        request.duration = parseInt(obj.time.toString());
        if (request.duration >= request.durationMax) {
            this.craftData.requestsCompleted.push(request);
        } else {
            this.craftData.requests.push(request);
        }
    }
    this.craftData.requests.sort(function (a, b) {
        return parseInt(b.duration) - parseInt(a.duration);
    });
};
canvas.app.manor.Model.prototype.parsePortal = function (data) {
    var portal;
    var location;
    this.portals = new Array();
    this.portalLocations = new Array();
    this.portalRebindTime = Math.round(Date.now() * 0.001) + data.rebind_left_time;
    this.portalRebindCooldown = data.rebind_cooldown;
    this.portalJumpCost = data.energy_per_jump;
    var obj;
    var i,
        len = data.available_areas.length;
    for (i = 0; i < len; i++) {
        obj = data.available_areas[i];
        location = new canvas.data.manor.DLocation();
        location.id = obj.id;
        location.areaID = obj.area_id;
        location.title = obj.title;
        location.picture = obj.picture;
        location.error = obj.error;
        this.portalLocations[location.id] = location;
    }
    var a = new Array();
    len = data.user_areas.length;
    for (i = 0; i < len; i++) {
        obj = data.user_areas[i];
        a[obj.num] = obj.value;
    }
    var dUserBuilding = this.user.buildings["portal"];
    for (i = 1; i <= 6; i++) {
        location = this.portalLocations[a[i]];
        portal = new canvas.data.manor.DPortal();
        portal.status = dUserBuilding.level < i ? 0 : location ? 1 : -1;
        portal.level = i;
        portal.locationID = location ? location.id : 0;
        this.portals.push(portal);
    }
    this.portalResetItem = new canvas.data.manor.DItem();
    this.portalResetItem.id = data.artifact_reset_timer.id;
    this.portalResetItem.title = data.artifact_reset_timer.title;
    this.portalResetItem.image = data.artifact_reset_timer.picture;
    this.portalResetItem.count2 = parseInt(data.artifact_reset_timer.cnt);
};
canvas.app.manor.Model.prototype.parseHuntCamp = function (data) {
    this.campData.parse(data);
};
canvas.app.manor.Model.prototype.getLabourPrognosis = function (price, count) {
    var closestSpeedValue = 1;
    var diff = 1e3;
    var str;
    var totalSeconds;
    var i;
    for (str in this.labourPrognosisData) {
        if (Math.abs(parseInt(str) - price) < diff) {
            diff = Math.abs(parseInt(str) - price);
            closestSpeedValue = parseFloat(this.labourPrognosisData[str]);
        }
    }
    if (diff == 1e3 || price == 0 || count == 0) return canvas.Translator.getText(117) + ".";
    totalSeconds = Math.round(count / closestSpeedValue);
    if (totalSeconds >= 86400) {
        return canvas.Translator.getText(118) + ".";
    } else {
        if (totalSeconds < 3600) {
            return Math.ceil(totalSeconds / 60).toString() + " " + canvas.Translator.getText(2016) + ".";
        } else {
            i = totalSeconds % 3600;
            return Math.floor(totalSeconds / 3600).toString() + " " + canvas.Translator.getText(2001) + ". " + Math.ceil(i / 60).toString() + " " + canvas.Translator.getText(2016) + ".";
        }
    }
};
canvas.app.manor.Model.prototype.parseAvailableBuildings = function (buildingsString) {
    this.availableBuildings = new Array();
    if (buildingsString == "") return;
    var a = buildingsString.split(",");
    var dBuilding;
    var str;
    var i,
        len = a.length;
    for (i = 0; i < len; i++) {
        str = a[i];
        this.availableBuildings.push(this.buildings[canvas.app.manor.Const.TITLES[parseInt(str) - 1]][1]);
    }
};
canvas.app.manor.Model.prototype.findFirstFreeArea = function (aItem) {
    var i,
        len = this.bankCells.length;
    if (len < 1) return "";
    var cell;
    var result = "";
    var item;
    for (i = 0; i < len; i++) {
        cell = this.bankCells[i];
        if (result == "" && cell.items.length < cell.size) result = cell.area;
        if (aItem) {
            var j,
                len2 = cell.items.length;
            for (j = 0; j < len2; j++) {
                item = cell.items[j];
                if (item.equals(aItem)) {
                    return cell.area;
                }
            }
        }
    }
    return result == "" ? this.bankCells[0].area : result;
};
canvas.app.manor.Model.prototype.getFilteredItems = function (items, filter) {
    var result = new Array();
    var dItem;
    var i,
        len = items.length;
    for (i = 0; i < len; i++) {
        dItem = items[i];
        if (dItem.flags[filter]) result.push(dItem);
    }
    return result;
};
canvas.app.manor.Model.prototype.storageHaveFreeCells = function () {
    var dUserBuilding = this.user.buildings["storage"];
    return dUserBuilding.level > this.storageItems.length;
};
canvas.app.manor.Model.prototype.getDragScale = function () {
    return 1 - this.winScale + 1;
};
canvas.app.manor.View = function () {
    canvas.px.Container.call(this);
    this.container = this.addChild(new canvas.px.Container());
    this.manor = this.container.addChild(new canvas.app.manor.view.Map());
    this.manor.position.set(canvas.app.manor.Const.CURL_DX, canvas.app.manor.Const.CURL_DY);
    this.curls = this.container.addChild(new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "contour"), 49, 49, 49, 49));
    this.header = this.container.addChild(new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "tile_header"), 30, 0, 30, 0));
    this.header.width = 150;
    this.header.y = -16;
    this.title = this.header.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_13_BOLD, 16118721, 150, 20, "center"));
    this.title.text = canvas.Translator.getText(148);
    this.title.y = 9;
    this.labour = this.container.addChild(new canvas.app.manor.view.controls.elements.Labour(canvas.Translator.getText(149)));
    this.labour.setLabour(0, 100);
    this.windows = [];
    this.buildingWin = new canvas.app.manor.view.controls.BuildingWin();
    this.buildingWin.position.set(20, 0);
    this.windows.push(this.buildingWin);
    this.labourWin = new canvas.app.manor.view.controls.LabourWin();
    this.labourWin.position.set(475, 0);
    this.windows.push(this.labourWin);
    this.hireWin = new canvas.app.manor.view.controls.HireWin();
    this.hireWin.position.set(200, 100);
    this.windows.push(this.hireWin);
    this.portalResetWin = new canvas.app.manor.view.controls.PortalResetWin();
    this.portalResetWin.position.set(200, 100);
    this.windows.push(this.portalResetWin);
    this.workWin = new canvas.app.manor.view.controls.WorkWin();
    this.workWin.position.set(475, 0);
    this.windows.push(this.workWin);
    this.messageWin = new canvas.app.manor.view.controls.MessageWindow();
    this.windows.push(this.messageWin);
    this.confirmWin = new canvas.app.manor.view.controls.ConfirmWindow();
    this.windows.push(this.confirmWin);
    this.cementWin = new canvas.app.manor.view.controls.BuyCementWin();
    this.cementWin.position.set(200, 100);
    this.windows.push(this.cementWin);
    this.huntCampWin = new canvas.app.manor.view.controls.HuntCampWin();
    this.huntCampWin.position.set(20, 0);
    this.windows.push(this.huntCampWin);
    this.countWin = new canvas.app.manor.view.controls.CountWin();
    this.countWin.position.set(200, 100);
    this.windows.push(this.countWin);
    this.chooseBuildingWin = new canvas.app.manor.view.controls.ChooseBuildingWin();
    this.chooseBuildingWin.position.set(20, 0);
    this.windows.push(this.chooseBuildingWin);
    this.choosePetWin = new canvas.app.manor.view.controls.ChoosePetWin();
    this.choosePetWin.position.set(20, 0);
    this.windows.push(this.choosePetWin);
    this.bankWin = new canvas.app.manor.view.controls.BankWin();
    this.bankWin.position.set(20, 0);
    this.windows.push(this.bankWin);
    this.throneRoom = new canvas.app.manor.view.controls.ThroneRoom();
    this.throneRoom.position.set(20, 20);
    this.windows.push(this.throneRoom);
    this.menu = this.addChild(new canvas.app.manor.view.controls.Menu(parseInt(canvas.app.manor.model.localStorage.get("menuOpened"))));
    this.menu.y = 25;
    this.exitButton = this.addChild(new canvas.ui.Button(canvas.ResourceLoader.getImage("ui", "exit_button_base"), canvas.ResourceLoader.getImage("ui", "exit_button_over"), canvas.ResourceLoader.getImage("ui", "exit_button_down")));
    this.exitButton.y = -2;
    this.exitButton.sprite.hitArea = new canvas.px.Circle(20, 20, 20);
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.HINT_ADD, null, { target: this.exitButton, params: new canvas.utils.HintParams(new canvas.app.view.MappingHint(canvas.Translator.getText(150))) });
    this.workButton = this.addChild(new canvas.ui.Button(canvas.ResourceLoader.getImage("ui", "work_button_base"), canvas.ResourceLoader.getImage("ui", "work_button_over"), canvas.ResourceLoader.getImage("ui", "work_button_down")));
    this.workButton.y = -2;
    this.workButton.sprite.hitArea = new canvas.px.Circle(22, 22, 22);
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.HINT_ADD, null, { target: this.workButton, params: new canvas.utils.HintParams(new canvas.app.view.MappingHint(canvas.Translator.getText(151))) });
    this.techBtn = this.addChild(new canvas.app.location.view.popups.TechBtn(canvas.app.manor.model.par, canvas.app.manor.Event.ENTER_FRAME));
    this.infoBtn = this.addChild(new canvas.app.location.view.popups.InfoBtn(canvas.app.manor.model.par));
    this.infoBtn.y = 50;
};
canvas.app.manor.View.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.manor.View.prototype.hideGuestControls = function () {
    this.workButton.parent.removeChild(this.workButton);
    this.exitButton.parent.removeChild(this.exitButton);
    this.menu.parent.removeChild(this.menu);
    this.labour.parent.removeChild(this.labour);
    this.curls.parent.removeChild(this.curls);
    this.title.parent.removeChild(this.title);
};
canvas.app.manor.View.prototype.resize = function () {
    var model = canvas.app.manor.model;
    var w = model.width;
    var h = model.height;
    this.curls.width = w;
    this.curls.height = h - 12;
    this.manor.setSize(w - canvas.app.manor.Const.CURL_DX * 2, h - canvas.app.manor.Const.CURL_DY * 3);
    this.header.x = Math.round((w - this.header.width) * 0.5);
    this.labour.position.set(w - this.labour.width - 13, h - 50);
    this.exitButton.x = w - 41;
    if (this.techBtn && this.techBtn.parent) this.techBtn.position.set(w - 45, h - 40);
    if (this.infoBtn && this.infoBtn.parent) this.infoBtn.x = w - 25;
    this.resizeMenu();
    canvas.utils.WindowsManager.instance.resizeWindows();
    var i,
        len = this.windows.length,
        win;
    if (h) {
        for (i = 0; i < len; i++) {
            win = this.windows[i];
            if (!win.back.height) continue;
            if (win.back.height < h + 20) {
                model.winScale = 1;
            } else {
                model.winScale = h / win.back.height;
            }
            win.scale.set(model.winScale, model.winScale);
        }
    }
};
canvas.app.manor.View.prototype.resizeMenu = function () {
    this.menu.x = canvas.app.manor.model.width - this.menu._width + 3;
    this.menu.resize();
};
canvas.app.manor.View.prototype.update = function (flags) {
    if (flags == undefined) flags = 0;
    this.updateMenu();
    this.manor.updateMap();
    var i,
        len = this.windows.length,
        win;
    for (i = 0; i < len; i++) {
        win = this.windows[i];
        if (win.parent) win.update(flags);
    }
    this.resize();
    this.filters = canvas.app.manor.model.user.ghost ? [canvas.Functions.getGreyScale()] : null;
};
canvas.app.manor.View.prototype.updateMenu = function () {
    var Conf = canvas.app.manor.model;
    var dUserBuilding;
    var dBuilding;
    var dBuildingNext;
    var dPortal;
    var dLocation;
    var a = new Array();
    var b = new Array();
    var i,
        len = canvas.app.manor.Const.TITLES.length;
    var str;
    for (i = 0; i < len; i++) {
        str = canvas.app.manor.Const.TITLES[i];
        dUserBuilding = Conf.user.buildings[str];
        if (dUserBuilding == null || dUserBuilding.level == 0) continue;
        if (!Conf.buildings[dUserBuilding.name]) continue;
        dBuilding = Conf.buildings[dUserBuilding.name][dUserBuilding.level];
        if (dBuilding == null || !dBuilding.enabled) continue;
        a.push(dBuilding.title + " [" + dUserBuilding.level.toString() + "]");
        b.push(dUserBuilding.dichIndex);
    }
    a.push("");
    b.push("");
    for (i = 0; i < len; i++) {
        str = canvas.app.manor.Const.TITLES[i];
        dUserBuilding = Conf.user.buildings[str];
        if (dUserBuilding == null || dUserBuilding.level > 0 || dUserBuilding.isUnknownDich()) continue;
        if (!Conf.buildings[dUserBuilding.name]) continue;
        dBuilding = Conf.buildings[dUserBuilding.name][dUserBuilding.level];
        dBuildingNext = Conf.buildings[dUserBuilding.name][dUserBuilding.level + 1];
        if (dBuilding == null || !dBuilding.enabled || dBuildingNext == null || dBuildingNext.cost < 1) continue;
        a.push(dBuilding.title);
        b.push(dUserBuilding.dichIndex);
    }
    a.push("");
    b.push("");
    a.push(canvas.Translator.getText(152));
    b.push("exit");
    if (Conf.portals) {
        len = Conf.portals.length;
        for (i = 0; i < len; i++) {
            dPortal = Conf.portals[i];
            if (dPortal.status == 1) {
                dLocation = Conf.portalLocations[dPortal.locationID];
                if (dLocation) {
                    a.push(dLocation.title);
                    b.push("prt" + dPortal.level);
                }
            }
        }
    }
    this.menu.update(a, b);
    this.resizeMenu();
};
canvas.app.manor.View.prototype.openConfirm = function (title, params) {
    this.confirmWin.init(title, params);
    this.confirmWin.open(false, false, true);
};
canvas.app.manor.View.prototype.showError = function (error) {
    this.messageWin.init(error);
    this.messageWin.open(false, false, true);
};
canvas.app.manor.View.prototype.openGuestThroneRoom = function () {
    var dUserBuilding = canvas.app.manor.model.user.buildings["main"];
    if (dUserBuilding && dUserBuilding.level > 0) {
        this.throneRoom.open();
    }
};
canvas.app.manor.view.Back = function () {
    canvas.px.Container.call(this);
    this.mc = this.addChild(new canvas.px.MovieClip(canvas.Config.effectsPath + canvas.app.manor.model.backImage));
    this.mc.frameEvent = canvas.app.manor.Event.ENTER_FRAME_ANIM;
    for (var str in this.mc.mcChildsCache) {
        this.mc.mcChildsCache[str].loop = true;
        this.mc.mcChildsCache[str].frameEvent = canvas.app.manor.Event.ENTER_FRAME_ANIM;
        this.mc.mcChildsCache[str].play();
    }
};
canvas.app.manor.view.Back.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.manor.view.BuildingRenderer = function (type) {
    canvas.ui.ListRenderer.call(this);
    this.type = type;
    this.hint = new canvas.app.view.MappingHint();
    this.mouseover = this.overHandler.bind(this);
    this.mouseout = this.outHandler.bind(this);
};
canvas.app.manor.view.BuildingRenderer.prototype = Object.create(canvas.ui.ListRenderer.prototype);
canvas.app.manor.view.BuildingRenderer.prototype.update = function () {
    if (this.data != this.oldData) {
        this.clear();
        if (this.data) {
            var name = canvas.Functions.extractSwfName(this.data.image);
            var mci = canvas.ResourceLoader.get(canvas.Config.manorBuildingsPath + name + "/" + name + ".mci");
            if (mci) {
                this.readyHandler();
            } else {
                canvas.ResourceLoader.add([canvas.Config.manorBuildingsPath + name + "/" + name + ".mci", canvas.Config.manorBuildingsPath + name + "/" + name + ".json", canvas.Config.manorBuildingsPath + name + "/" + name + ".png"]);
                canvas.EventManager.addEventListener(canvas.ResourceLoader.EVENT_COMPLETE, null, this.readyHandler, this);
            }
        }
    }
};
canvas.app.manor.view.BuildingRenderer.prototype.readyHandler = function () {
    canvas.EventManager.removeEventListener(canvas.ResourceLoader.EVENT_COMPLETE, null, this.readyHandler, this);
    var name = canvas.Functions.extractSwfName(this.data.image);
    var str = canvas.ResourceLoader.get(canvas.Config.manorBuildingsPath + name + "/" + name + ".mci");
    if (str) {
        var atlasUrl = canvas.Config.manorBuildingsPath + name + "/" + name + ".json";
        var mci = str.data;
        var children = mci[canvas.px.MovieClipProps.children];
        var sprite,
            child,
            i,
            len = children.length;
        var dx = -Math.round(parseInt(mci.w) * 0.5) + parseInt(this.data.dx);
        var dy = -Math.round(parseInt(mci.h) * 0.5) + parseInt(this.data.dy);
        for (i = 0; i < len; i++) {
            child = children[i];
            if (child.polygon) {
                sprite = this.polygon = this.addChild(new canvas.px.Polygon(child.polygon));
                this.addPolygon(sprite);
                sprite.position.set(child.x + dx, child.y + dy);
            } else if (child.isImage) {
                sprite = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage(atlasUrl, child.name)));
                sprite.position.set(child.x + dx, child.y + dy);
            } else {
                sprite = this.addChild(new canvas.px.MovieClipChild(child.mc, canvas.ResourceLoader.get(atlasUrl).textures, null, null, false));
                if (child.x2) {
                    sprite.scale.set(2, 2);
                }
                sprite.frameEvent = canvas.app.manor.Event.ENTER_FRAME_ANIM;
                sprite.loop = true;
                sprite.play();
                if (sprite.mcChildsCache) {
                    for (str in sprite.mcChildsCache) {
                        sprite.mcChildsCache[str].frameEvent = sprite.frameEvent;
                        sprite.mcChildsCache[str].play();
                    }
                }
                sprite.position.set(dx, dy);
            }
        }
        if (!this.polygon) {
            this.addPolygon(this);
        }
    }
};
canvas.app.manor.view.BuildingRenderer.prototype.addPolygon = function (target) {
    target.interactive = true;
    target.buttonMode = true;
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.HINT_ADD, null, { target: target, params: new canvas.utils.HintParams(this.hint) });
    this.hint.update(this.data.title + (this.data.level > 0 ? " [" + this.data.level + "]" : ""));
};
canvas.app.manor.view.BuildingRenderer.prototype.removePolygon = function (target) {
    target.interactive = false;
    target.buttonMode = false;
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.HINT_REMOVE, null, { target: target });
};
canvas.app.manor.view.BuildingRenderer.prototype.clear = function () {
    canvas.EventManager.removeEventListener(canvas.ResourceLoader.EVENT_COMPLETE, null, this.readyHandler, this);
    if (this.polygon) {
        this.removePolygon(this.polygon);
        this.removeIfExist(this.polygon);
        this.polygon.destroy();
        this.polygon = null;
    } else {
        this.removePolygon(this);
    }
    canvas.Functions.destroyChildren(this);
};
canvas.app.manor.view.BuildingRenderer.prototype.overHandler = function () {
    this.filters = [canvas.Functions.getBrightness()];
};
canvas.app.manor.view.BuildingRenderer.prototype.outHandler = function () {
    this.filters = null;
};
canvas.app.manor.view.Map = function () {
    canvas.px.Container.call(this);
    this._width = 0;
    this._height = 0;
    this.container = this.addChild(new canvas.px.Container());
    this.msk = this.addChild(new canvas.px.Mask(100, 100));
    this.container.mask = this.msk;
    this.back = this.container.addChild(new canvas.app.manor.view.Back());
    this.buildingsContainer = this.container.addChild(new canvas.px.Container());
    var mapPoints = canvas.app.manor.Const.MAP_POINTS[canvas.app.manor.model.user.race];
    var i,
        building,
        len = mapPoints.length;
    for (i = 0; i < len; i++) {
        building = this.buildingsContainer.addChild(new canvas.app.manor.view.BuildingRenderer(mapPoints[i][0]));
        building.position.set(mapPoints[i][1], mapPoints[i][2]);
    }
    this.scrollV = this.addChild(new canvas.ui.Scroll(canvas.ui.ScrollType.VERTICAL, null, null, new canvas.px.Sprite(canvas.px.TextureEmpty), new canvas.px.Sprite(canvas.px.TextureEmpty), this.container, true));
    this.scrollV.step = 40;
    canvas.EventManager.addEventListener(canvas.ui.ScrollEvent.EVENT_SCROLL, this.scrollV, this.scrollHandler, this);
    this.scrollH = this.addChild(new canvas.ui.Scroll(canvas.ui.ScrollType.HORIZONTAL, null, null, new canvas.px.Sprite(canvas.px.TextureEmpty), new canvas.px.Sprite(canvas.px.TextureEmpty), this, true, false));
    canvas.EventManager.addEventListener(canvas.ui.ScrollEvent.EVENT_SCROLL, this.scrollH, this.scrollHandler, this);
    this.firstResize = true;
    this.interactive = true;
    this.dragIndex = 0;
    this.click = this.clickHandler.bind(this);
    if (canvas.app.manor.model.winterMode) {
        this.snow = this.container.addChild(new canvas.app.location.view.elements.Snow(null, canvas.app.manor.Event.ENTER_FRAME_ANIM));
        this.snow.init(canvas.app.manor.Const.MAP_ORIGINAL_WIDTH, canvas.app.manor.Const.MAP_ORIGINAL_HEIGHT);
    }
};
canvas.app.manor.view.Map.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.manor.view.Map.prototype.setSize = function (w, h) {
    this._width = w;
    this._height = h;
    this.msk.setSize(this._width, this._height);
    this.scrollV.max = canvas.app.manor.Const.MAP_ORIGINAL_HEIGHT - this._height;
    this.scrollH.max = canvas.app.manor.Const.MAP_ORIGINAL_WIDTH - this._width;
    if (this.firstResize && this.scrollH.max > 0) {
        this.firstResize = false;
        this.scrollH.current = Math.round(this.scrollH.max * (parseInt(canvas.app.manor.model.user.race) == 1 ? 0.9 : 0.2));
        this.scrollV.current = Math.round(this.scrollV.max * 0.5);
    }
    this.updateScrollPos();
    this.scrollHandler();
};
canvas.app.manor.view.Map.prototype.updateMap = function () {
    var model = canvas.app.manor.model;
    var mapPoints = canvas.app.manor.Const.MAP_POINTS[model.user.race];
    var dUserBuilding, dbuilding, index;
    var a,
        i,
        item,
        renderer,
        len = mapPoints.length;
    for (i = 0; i < len; i++) {
        index = mapPoints[i][0];
        renderer = this.buildingsContainer.getChildAt(i);
        dUserBuilding = model.user.buildingsByIndex[index];
        if (!dUserBuilding) {
            dbuilding = model.diches[index];
        } else {
            a = model.buildings[dUserBuilding.name];
            if (!a) continue;
            dbuilding = a[dUserBuilding.level];
        }
        if (dbuilding && dbuilding.enabled) {
            renderer.data = dbuilding;
        } else {
            renderer.data = null;
        }
    }
};
canvas.app.manor.view.Map.prototype.scrollHandler = function () {
    if (this.dragIndex++ > 2) {
        this.wasDragged = true;
    }
    this.updateScrollPos();
    if (canvas.app.manor.model.guestMode) {
        if (this.scrollH.isDisabled()) {
            hideArrow("left");
            hideArrow("right");
            this.scrollStop();
        } else if (this.scrollH.current == 0) {
            hideArrow("left");
            showArrow("right");
            if (!this.direction) this.scrollStop();
        } else if (this.scrollH.current == this.scrollH.max) {
            showArrow("left");
            hideArrow("right");
            if (this.direction) this.scrollStop();
        } else {
            showArrow("right");
            showArrow("left");
        }
    }
};
canvas.app.manor.view.Map.prototype.activate = function () {
    this.scrollV.handlerWheelTargetOver();
};
canvas.app.manor.view.Map.prototype.deactivate = function () {
    this.scrollV.handlerWheelTargetOut();
};
canvas.app.manor.view.Map.prototype.updateScrollPos = function () {
    this.container.position.set(-this.scrollH.current, -this.scrollV.current);
};
canvas.app.manor.view.Map.prototype.clickHandler = function (e) {
    if (this.wasDragged) {
        this.wasDragged = false;
        this.dragIndex = 0;
        return;
    }
    if (e.target.parent && e.target.parent.hasOwnProperty("type")) {
        canvas.EventManager.dispatchEvent(canvas.app.manor.Event.SELECT_BUILDING, null, { params: e.target.parent.type });
    }
};
canvas.app.manor.view.Map.prototype.scrollMove = function (direction, pressed) {
    this.direction = direction;
    if (pressed) {
        this.scrollStart();
    } else {
        this.scrollStop();
    }
};
canvas.app.manor.view.Map.prototype.scrollStart = function () {
    canvas.EventManager.addEventListener(canvas.app.manor.Event.ENTER_FRAME, null, this.frameHandler, this);
};
canvas.app.manor.view.Map.prototype.scrollStop = function () {
    canvas.EventManager.removeEventListener(canvas.app.manor.Event.ENTER_FRAME, null, this.frameHandler, this);
};
canvas.app.manor.view.Map.prototype.frameHandler = function () {
    if (this.direction) {
        this.scrollH.current += 10;
    } else {
        this.scrollH.current -= 10;
    }
    this.scrollHandler();
};
canvas.app.manor.view.UseBuilding = function () {
    canvas.px.Container.call(this);
    this.alpha = 0;
};
canvas.app.manor.view.UseBuilding.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.manor.view.UseBuilding.prototype.update = function () {
    if (!this.alpha) {
        this.alpha = 1;
        canvas.EventManager.dispatchEvent(canvas.app.manor.Event.HIDE_BUILDING_LOADER);
    }
};
canvas.app.manor.view.WindowManorBase = function (w, h, title) {
    canvas.px.Window.call(this);
    this._baseHeight = 520;
    this.back = this.addChild(new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "main_window"), 19, 42, 39, 23));
    this.header = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_S_15_BOLD, 16118721, w - 40, 20, "center", "top", 0);
    this.header.position.set(20, 4);
    this.header.text = title == undefined ? "" : title;
    this.header.interactive = true;
    this.sliceLeft = new canvas.px.TilingSprite(canvas.ResourceLoader.getImage("ui", "main_window_left"), 18, 20);
    this.sliceRight = new canvas.px.TilingSprite(canvas.ResourceLoader.getImage("ui", "main_window_right"), 39, 20);
    this.sliceTop = new canvas.px.TilingSprite(canvas.ResourceLoader.getImage("ui", "main_window_top"), 20, 41);
    this.sliceBot = new canvas.px.TilingSprite(canvas.ResourceLoader.getImage("ui", "main_window_bot"), 20, 24);
    this.addChild(this.sliceLeft);
    this.addChild(this.sliceRight);
    this.addChild(this.sliceTop);
    this.addChild(this.sliceBot);
    this.addChild(this.header);
    this.closeButton = this.addChild(
        new canvas.ui.Button(canvas.ResourceLoader.getImage("ui", "main_window_close_base"), canvas.ResourceLoader.getImage("ui", "main_window_close_over"), canvas.ResourceLoader.getImage("ui", "main_window_close_down"), null)
    );
    this.setSize(w, h);
    canvas.EventManager.addEventListener(canvas.px.WindowEvent.EVENT_OPEN, null, this._show, this);
    canvas.EventManager.addEventListener(canvas.px.WindowEvent.EVENT_CLOSE, null, this._hide, this);
};
canvas.app.manor.view.WindowManorBase.prototype = Object.create(canvas.px.Window.prototype);
canvas.app.manor.view.WindowManorBase.prototype.setSize = function (w, h) {
    this.header.setSize(w - 40);
    this.closeButton.position.set(w - 32, 0);
    this.back.width = w;
    this.back.height = h;
    this.sliceLeft.position.set(0, 41);
    this.sliceLeft.height = h - 63;
    this.sliceRight.position.set(w - 38, 41);
    this.sliceRight.height = h - 63;
    this.sliceTop.position.set(18, 0);
    this.sliceTop.width = w - 56;
    this.sliceBot.position.set(18, h - 22);
    this.sliceBot.width = w - 56;
};
canvas.app.manor.view.WindowManorBase.prototype._show = function (event) {
    if (event != undefined && event.params == this) {
        this.show();
    }
};
canvas.app.manor.view.WindowManorBase.prototype._hide = function (event) {
    if (event != undefined && event.params == this) {
        this.hide();
    }
};
canvas.app.manor.view.WindowManorBase.prototype.show = function (event) {
    this._onTop();
    this.update();
    if (canvas.utils.HintManager.instance) canvas.utils.HintManager.instance.hide();
};
canvas.app.manor.view.WindowManorBase.prototype.open = function (applyFilter, blockBack, centered, applyWall) {
    if (applyFilter == undefined) applyFilter = false;
    if (blockBack == undefined) blockBack = false;
    if (centered == undefined) centered = false;
    if (applyWall == undefined) applyWall = false;
    canvas.utils.WindowsManager.instance.openWindow(this, applyFilter, blockBack, centered, applyWall);
};
canvas.app.manor.view.WindowManorBase.prototype.close = function () {
    canvas.utils.WindowsManager.instance.closeWindow(this);
    this.hide();
};
canvas.app.manor.view.WindowManorBase.prototype.hide = function (event) {
    this.deactivate();
};
canvas.app.manor.view.WindowManorBase.prototype._onTop = function () {
    if (this.parent) this.parent.setChildIndex(this, this.parent.numChildren - 1);
    var len = canvas.utils.WindowsManager.instance.activeWindows.length;
    var win;
    for (var i = 0; i < len; i++) {
        win = canvas.utils.WindowsManager.instance.activeWindows[i];
        if (win != this) {
            win.deactivate();
        }
    }
    this.activate();
};
canvas.app.manor.view.WindowManorBase.prototype.update = function () {};
canvas.app.manor.view.WindowManorBase.prototype.downHandler = function (mouseData) {
    this._onTop();
    canvas.px.Window.prototype.downHandler.call(this, mouseData);
};
canvas.app.manor.view.WindowManorBase.prototype.activate = function () {};
canvas.app.manor.view.WindowManorBase.prototype.deactivate = function () {};
canvas.app.manor.view.WindowManorBase.prototype.destroy = function () {
    canvas.px.Window.prototype.destroy.call(this);
};
canvas.app.manor.view.controls.AllRequests = function () {
    canvas.px.Container.call(this);
    this.container = new canvas.px.Container();
    this.listContainer = new canvas.px.Container();
    this.addChild(this.container);
    this.container.addChild(this.listContainer);
    this.listContainer.position.set(20, 64);
    this.fieldTitle = new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_11, canvas.Const.FONT_TAHOMA_11_BOLD, 7092753, 400, 18, "center");
    this.fieldTitle.position.set(6, 17);
    this.container.addChild(this.fieldTitle);
    var t = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11, 7092753, 73, 18, "center");
    t.position.set(2, 39);
    t.text = canvas.Translator.getText(153);
    this.container.addChild(t);
    t = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11, 7092753, 65, 18, "left");
    t.position.set(80, 39);
    t.text = canvas.Translator.getText(154);
    this.container.addChild(t);
    t = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11, 7092753, 94, 18, "center");
    t.position.set(243, 39);
    t.text = canvas.Translator.getText(107);
    this.container.addChild(t);
    t = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11, 7092753, 65, 18, "center");
    t.position.set(330, 39);
    t.text = canvas.Translator.getText(155);
    this.container.addChild(t);
    this.pager = new canvas.app.manor.view.controls.elements.Pager();
    this.container.addChild(this.pager);
    this.pager.position.set(207, 360);
    canvas.EventManager.addEventListener(canvas.ui.PagerEvent.EVENT_CHANGE, this.pager, this._pagerHandler, this);
    var i;
    var tmpY = 0;
    var line;
    var radioArray = [];
    for (i = 0; i < canvas.app.manor.Const.REQUESTS_ON_PAGE; i++) {
        line = new canvas.app.manor.view.controls.elements.WorkRequestLine(i, radioArray);
        radioArray.push(line.check);
        this.listContainer.addChild(line);
        line.y = tmpY;
        tmpY += 29;
        canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_SELECT, line.check, this._itemClickHandler, this);
    }
    this.workButton = new canvas.app.view.MainButton();
    this.workButton.setTitle(canvas.Translator.getText(151));
    this.workButton.setSize(180);
    this.container.addChild(this.workButton);
    this.workButton.position.set(18, 390);
    this.cancelButton = new canvas.app.view.MainButton();
    this.cancelButton.setTitle(canvas.Translator.getText(156));
    this.cancelButton.setSize(180);
    this.container.addChild(this.cancelButton);
    this.cancelButton.position.set(218, 390);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.cancelButton, this._cancelClickHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.workButton, this._workClickHandler, this);
};
canvas.app.manor.view.controls.AllRequests.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.manor.view.controls.AllRequests.prototype._pagerHandler = function (event) {
    var Conf = canvas.app.manor.model;
    Conf.requestCurPage = this.pager.currentPage;
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.LOAD_WORK_REQUESTS);
};
canvas.app.manor.view.controls.AllRequests.prototype._itemClickHandler = function (event) {
    var Conf = canvas.app.manor.model;
    Conf.selectedRequest = this.pager.currentPage * canvas.app.manor.Const.REQUESTS_ON_PAGE + event.target.parent.index;
};
canvas.app.manor.view.controls.AllRequests.prototype._cancelClickHandler = function (event) {
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.LOAD_WORK_REQUESTS);
};
canvas.app.manor.view.controls.AllRequests.prototype._workClickHandler = function (event) {
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.OPEN_WORK);
};
canvas.app.manor.view.controls.AllRequests.prototype._updateList = function () {
    var Conf = canvas.app.manor.model;
    var i;
    var labourRequest;
    var sprite;
    var j = 0;
    var result = false;
    for (i = this.pager.startIndex; i < this.pager.endIndex; i++) {
        labourRequest = Conf.labourRequests[i];
        sprite = this.listContainer.getChildAt(j);
        sprite.check.checked = j == 0;
        sprite.data = labourRequest;
        if (labourRequest != null) {
            result = true;
            sprite.visible = true;
        } else {
            sprite.visible = false;
        }
        j++;
    }
    if (Conf.user.labour == 0) result = false;
    this.workButton.enabled = result;
};
canvas.app.manor.view.controls.AllRequests.prototype.update = function () {
    var Conf = canvas.app.manor.model;
    if (Conf.requestNumPages > 1) {
        this.pager.init(Conf.requestNumPages * canvas.app.manor.Const.REQUESTS_ON_PAGE, canvas.app.manor.Const.REQUESTS_ON_PAGE);
        this.pager.currentPage = Conf.requestCurPage;
        this.pager.visible = true;
    } else {
        this.pager.init(Conf.labourRequests.length, canvas.app.manor.Const.REQUESTS_ON_PAGE);
        this.pager.visible = false;
    }
    this._updateList();
    Conf.selectedRequest = this.pager.currentPage * canvas.app.manor.Const.REQUESTS_ON_PAGE;
    if (canvas.app.manor.Const.REQUESTS_ON_PAGE > 0) this.listContainer.getChildAt(0).check.checked = true;
};
canvas.app.manor.view.controls.BankWin = function () {
    canvas.app.manor.view.WindowManorBase.call(this, 900, 496, "");
    this.leftPagerMemory = {};
    this.container = this.addChild(new canvas.px.Container());
    var dy = 25;
    var sprite = this.container.addChild(new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "tile_back"), 20, 20, 20, 20));
    sprite.width = 415;
    sprite.height = 400;
    sprite.position.set(30, 40 + dy);
    sprite = this.container.addChild(new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "tab_white"), 37, 0, 37, 0));
    sprite.width = 180;
    sprite.position.set(140, 14 + dy);
    this.bagTitle = this.container.addChild(new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_13, canvas.Const.FONT_TAHOMA_13_BOLD, 7092753, 150, 20, "center"));
    this.bagTitle.position.set(155, 46);
    this.leftTitle = this.container.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_13_BOLD, 7092753, 300, 20, "left"));
    this.leftTitle.position.set(46, 50 + dy);
    this.bankItems = this.container.addChild(new canvas.ui.List(canvas.ui.ListType.VERTICAL, 5));
    this.bankItems.setSize(400, 360);
    this.bankItems.position.set(45, 100);
    this.bankItems._paddingH = this.bankItems._paddingV = 0;
    var i, item;
    for (i = 0; i < 25; i++) {
        item = new canvas.app.manor.view.controls.elements.Item(true, true, canvas.app.manor.view.controls.elements.Item.MODE_BANK_PUT);
        this.bankItems.add(item, false);
        item.name = "bank";
    }
    this.bankItems.update();
    this.leftScroll = this.container.addChild(new canvas.app.manor.view.controls.elements.PagerSimple(canvas.ui.ScrollType.VERTICAL, true, true, this.bankItems.container, 2));
    this.leftScroll.position.set(407, 100);
    this.leftScroll.setSize(20, 350);
    this.storageContent = new canvas.px.Container();
    this.storageContent.position.set(0, 14);
    this.storageItems = this.storageContent.addChild(new canvas.ui.List(canvas.ui.ListType.VERTICAL, 5));
    this.storageItems.setSize(400, 360);
    this.storageItems._paddingH = this.storageItems._paddingV = 0;
    for (i = 0; i < canvas.app.manor.Const.STORAGE_MAX_CELLS; i++) {
        item = new canvas.app.manor.view.controls.elements.Item(true, true, canvas.app.manor.view.controls.elements.Item.MODE_STORAGE_GET, canvas.Translator.getText(248) + " " + (i + 1).toString() + " " + canvas.Translator.getText(249));
        this.storageItems.add(item, false);
        item.name = "storage";
    }
    this.storageItems.update();
    this.cellsContent = new canvas.px.Container();
    this.tree = this.cellsContent.addChild(new canvas.app.manor.view.controls.elements.Tree());
    this.tree.setSize(330, 365);
    this.tree._scrollPadding = 40;
    this.panels = this.container.addChild(new canvas.app.manor.view.controls.elements.Panels([this.cellsContent, this.storageContent], ["cells", "storage"], ["", ""], 1));
    this.panels.position.set(455, 14 + dy);
    this.panels.setSize(420, 400);
    this.panels.contentContainer.x += 20;
    this.panels.contentContainer.y += 20;
    this.rightScroll = this.cellsContent.addChild(new canvas.app.manor.view.controls.elements.PagerSimple(canvas.ui.ScrollType.VERTICAL, true, true, this.cellsContent, 2));
    this.rightScroll.position.set(362, 20);
    this.rightScroll.setSize(20, 365);
    this.rightScroll.dragView.setSize = function () {};
    this.rightScroll._step = 50;
    this.tree.scroll = this.rightScroll;
    this.filterSortControl = new canvas.app.manor.view.controls.elements.FilterSortControl(
        [
            new canvas.data.manor.DSortData(canvas.data.manor.DSortData.TYPE_DEFAULT, canvas.Translator.getText(280)),
            new canvas.data.manor.DSortData(canvas.data.manor.DSortData.TYPE_TITLE, canvas.Translator.getText(272)),
            new canvas.data.manor.DSortData(canvas.data.manor.DSortData.TYPE_COLOR, canvas.Translator.getText(273)),
            new canvas.data.manor.DSortData(canvas.data.manor.DSortData.TYPE_TYPE, canvas.Translator.getText(274)),
            new canvas.data.manor.DSortData(canvas.data.manor.DSortData.TYPE_TIME, canvas.Translator.getText(275)),
        ],
        "",
        canvas.app.manor.model.localStorage.get("sortType"),
        canvas.app.manor.model.localStorage.get("sortDirection") == "1",
        canvas.Translator.getText(276)
    );
    this.filterSortControl.name = "filter";
    this.addChild(this.filterSortControl);
    this.filterSortControl.position.set(430, 70);
    this.updateFilterAndSort();
    canvas.EventManager.addEventListener(canvas.ui.Event.EVENT_CHANGE, this.filterSortControl, this.filterChangeHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ScrollEvent.EVENT_SCROLL, this.leftScroll, this.leftScrollHandler, this);
    canvas.EventManager.addEventListener(canvas.app.manor.Event.PANELS_PATH, this.panels, this.panelsHandler, this);
    this.panelsHandler();
};
canvas.app.manor.view.controls.BankWin.prototype = Object.create(canvas.app.manor.view.WindowManorBase.prototype);
canvas.app.manor.view.controls.BankWin.CONTENT_HEIGHT = 342;
canvas.app.manor.view.controls.BankWin.prototype.update = function () {
    var Conf = canvas.app.manor.model;
    var a = new Array();
    var b = new Array();
    var c;
    var itemCell;
    var sprite;
    var i;
    var j;
    var tmpX;
    var tmpY;
    var item;
    var k = 0;
    var dItem;
    var len = Conf.bankCells.length;
    var list;
    var str;
    for (str in this.lists) this.lists[str].destroy();
    this.lists = new Object();
    this.updateLeft();
    for (i = 0; i < len; i++) {
        itemCell = Conf.bankCells[i];
        a.push(itemCell.title);
        list = new canvas.ui.List(canvas.ui.ListType.VERTICAL, 4);
        list._paddingH = list._paddingV = 0;
        list.setSize(300, Math.ceil(itemCell.size / 4) * 70);
        this.lists[itemCell.area] = list;
        for (j = 0; j < itemCell.size; j++) {
            item = new canvas.app.manor.view.controls.elements.Item(true, true, canvas.app.manor.view.controls.elements.Item.MODE_BANK_GET);
            list.add(item, false);
            item.name = "cell" + itemCell.area;
            item.data = itemCell.items[j];
        }
        b.push(list);
        list.update();
    }
    this.tree.init(a, b);
    if (!this.inited && a.length > 0) {
        this.inited = true;
        this.tree.openAll();
    }
    this.tree.update();
    var dUserBuilding = Conf.user.buildings["storage"];
    for (i = 0; i < canvas.app.manor.Const.STORAGE_MAX_CELLS; i++) {
        item = this.storageItems.items[i];
        dItem = Conf.storageItems == null ? null : Conf.storageItems[i];
        if (dItem == null && i < dUserBuilding.level) {
            dItem = new canvas.data.manor.DItem();
            dItem.title = "";
            dItem.id = "empty";
        }
        item.data = dItem;
    }
    a = [this.cellsContent, this.storageContent];
    b = ["<b>" + canvas.Translator.getText(101) + " (" + Conf.bankCells.length + ")</b>", "<b>" + canvas.Translator.getText(103) + "</b>"];
    this.panels.init(a, ["cells", "storage"], b);
    this.panelsHandler();
};
canvas.app.manor.view.controls.BankWin.prototype.updateLeft = function () {
    var Conf = canvas.app.manor.model;
    var a;
    switch (this.panels.path) {
        case "storage":
            a = Conf.getFilteredItems(Conf.bankItems, "storage");
            break;
        default:
            a = Conf.getFilteredItems(Conf.bankItems, "cell");
    }
    var item, i, len;
    if (this.filterSortControl.filterText.length > 2) {
        this.leftItems = new Array();
        len = a.length;
        for (i = 0; i < len; i++) {
            item = a[i];
            if (item.title.toLowerCase().search(this.filterSortControl.filterText.toLowerCase()) >= 0) this.leftItems.push(item);
        }
    } else {
        this.leftItems = a;
    }
    switch (this.filterSortControl.sortType) {
        case canvas.data.manor.DSortData.TYPE_TITLE:
            this.leftItems.sort(this.sortOnTitle.bind(this));
            break;
        case canvas.data.manor.DSortData.TYPE_TIME:
            this.leftItems.sort(this.sortOnTime.bind(this));
            break;
        case canvas.data.manor.DSortData.TYPE_TYPE:
            this.leftItems.sort(this.sortOnType.bind(this));
            break;
        case canvas.data.manor.DSortData.TYPE_COLOR:
            this.leftItems.sort(this.sortOnColor.bind(this));
            break;
        default:
            if (this.filterSortControl.sortDirection) this.leftItems.reverse();
    }
    this.leftScroll.max = Math.ceil(this.leftItems.length / 5) - 5;
    this.leftScroll.current = this.leftPagerMemory[this.panels.path] ? this.leftPagerMemory[this.panels.path] : this.leftScroll.current;
    this.leftScrollHandler();
    this.bagTitle.text = "<b>" + canvas.Translator.getText(102) + " (" + this.leftItems.length + ")</b>";
};
canvas.app.manor.view.controls.BankWin.prototype.sortOnType = function (a, b) {
    if (a.type > b.type) {
        return this.filterSortControl.sortDirection ? -1 : 1;
    } else if (a.type < b.type) {
        return this.filterSortControl.sortDirection ? 1 : -1;
    } else {
        return 0;
    }
};
canvas.app.manor.view.controls.BankWin.prototype.sortOnTime = function (a, b) {
    if (a.time > b.time) {
        return this.filterSortControl.sortDirection ? -1 : 1;
    } else if (a.time < b.time) {
        return this.filterSortControl.sortDirection ? 1 : -1;
    } else {
        return 0;
    }
};
canvas.app.manor.view.controls.BankWin.prototype.sortOnTitle = function (a, b) {
    if (a.title.toLowerCase() > b.title.toLowerCase()) {
        return this.filterSortControl.sortDirection ? -1 : 1;
    } else if (a.title.toLowerCase() < b.title.toLowerCase()) {
        return this.filterSortControl.sortDirection ? 1 : -1;
    } else {
        return 0;
    }
};
canvas.app.manor.view.controls.BankWin.prototype.sortOnColor = function (a, b) {
    if (a.color > b.color) {
        return this.filterSortControl.sortDirection ? -1 : 1;
    } else if (a.color < b.color) {
        return this.filterSortControl.sortDirection ? 1 : -1;
    } else {
        return 0;
    }
};
canvas.app.manor.view.controls.BankWin.prototype.updateFilterAndSort = function () {
    this.updateLeft();
};
canvas.app.manor.view.controls.BankWin.prototype.filterChangeHandler = function () {
    canvas.app.manor.model.localStorage.set("sortType", this.filterSortControl.sortType);
    canvas.app.manor.model.localStorage.set("sortDirection", this.filterSortControl.sortDirection ? "1" : "0");
    this.updateFilterAndSort();
};
canvas.app.manor.view.controls.BankWin.prototype.leftScrollHandler = function () {
    var i = this.leftScroll.current * 5;
    var item;
    this.leftPagerMemory[this.panels.path] = this.leftScroll.current;
    var j,
        len = this.bankItems.items.length;
    for (j = 0; j < len; j++) {
        item = this.bankItems.items[j];
        item.data = this.leftItems[i++];
    }
};
canvas.app.manor.view.controls.BankWin.prototype.downHandler = function (event) {
    canvas.app.manor.view.WindowManorBase.prototype.downHandler.call(this, event);
    if (!canvas.Functions.findParentByName("filter", event.target)) this.filterSortControl.mode = "";
    var item = canvas.Functions.findParentByName("bank", event.target) || canvas.Functions.findParentByName("storage", event.target) || canvas.Functions.findParentByName("cell", event.target);
    if (item != null && item.data != null && item.data.id != "empty") {
        this.dragItem(item);
    }
    canvas.EventManager.addEventListener(canvas.Event.STAGE_MOUSE_UP, null, this.upHandler, this);
    canvas.EventManager.addEventListener(canvas.Event.STAGE_MOUSE_MOVE, null, this.mouseMoveHandler, this);
};
canvas.app.manor.view.controls.BankWin.prototype.dragItem = function (item) {
    var Conf = canvas.app.manor.model;
    var a;
    var d;
    var result = null;
    if (this.currentDragItem) {
        this.currentDragItem.filters = [];
        this.currentDragItem.stopDrag();
        this.removeChild(this.currentDragItem);
        this.currentDragItem = null;
        result = canvas.app.manor.view.controls.elements.Item.overedItem;
        Conf.globalDrag = false;
    }
    if (item != null) {
        this.currentDragItem = item.clone();
        this.currentDragItem.interactive = this.currentDragItem.interactiveChildren = false;
        this.currentDragItem.removeHints();
        this.addChild(this.currentDragItem);
        this.currentDragItem.startDrag(new canvas.px.Point(35 * Conf.winScale, 35 * Conf.winScale), new canvas.px.Rectangle(0, 0, 800, 400), canvas.app.CanvasManor.App.renderer.plugins.interaction.mouse.global, Conf.getDragScale());
        var point = this.toLocal(new canvas.px.Point(0, 0), item);
        this.currentDragItem.position.set(point.x, point.y);
        Conf.globalDrag = true;
    }
    return result;
};
canvas.app.manor.view.controls.BankWin.prototype.upHandler = function (event) {
    var itemDrag;
    var itemTarget;
    var itemData = null;
    if (this.currentDragItem) {
        itemDrag = this.currentDragItem;
        this.dragItem();
        itemTarget = canvas.app.manor.view.controls.elements.Item.overedItem;
        if (itemTarget != null && !itemTarget.lockedImage.visible && itemTarget.name != itemDrag.name) {
            switch (this.panels.path) {
                case "storage":
                    if (itemTarget.name == "bank") {
                        canvas.EventManager.dispatchEvent(canvas.app.manor.Event.USE_STORAGE_ACTION, null, { object: { getItem: itemDrag.data } });
                    } else {
                        canvas.EventManager.dispatchEvent(canvas.app.manor.Event.USE_STORAGE_ACTION, null, {
                            object: { putItem: itemDrag.data, getItem: itemTarget.data != null && itemTarget.data.id != "empty" && (!itemTarget.data.equals(itemDrag.data) || !itemTarget.data.stackable) ? itemTarget.data : null },
                        });
                    }
                    break;
                default:
                    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.USE_BANK_ACTION, null, { object: { from: itemDrag.data, toArea: itemTarget.name == "bank" ? "0" : itemTarget.name.substr(4) } });
            }
        }
    }
    canvas.EventManager.removeEventListener(canvas.Event.STAGE_MOUSE_UP, null, this.upHandler);
    canvas.EventManager.removeEventListener(canvas.Event.STAGE_MOUSE_MOVE, null, this.mouseMoveHandler);
};
canvas.app.manor.view.controls.BankWin.prototype.mouseMoveHandler = function (event) {
    var item;
    var b;
    var itemTarget;
    if (this.currentDragItem) {
        itemTarget = canvas.app.manor.view.controls.elements.Item.overedItem;
        if (itemTarget != null && itemTarget.name != this.currentDragItem.name && !itemTarget.lockedImage.visible) {
            this.currentDragItem.filters = [canvas.Functions.getBrightness(1.5)];
        } else {
            this.currentDragItem.filters = null;
        }
    }
};
canvas.app.manor.view.controls.BankWin.prototype.panelsHandler = function (event) {
    var item,
        i,
        len = this.bankItems.items.length;
    switch (this.panels.path) {
        case "storage":
            this.leftTitle.text = canvas.Translator.getText(247) + ":";
            for (i = 0; i < len; i++) this.bankItems.items[i].mode = canvas.app.manor.view.controls.elements.Item.MODE_STORAGE_PUT;
            break;
        default:
            this.leftTitle.text = canvas.Translator.getText(246) + ":";
            for (i = 0; i < len; i++) this.bankItems.items[i].mode = canvas.app.manor.view.controls.elements.Item.MODE_BANK_PUT;
    }
    if (event != undefined) this.updateLeft();
};
canvas.app.manor.view.controls.BankWin.prototype.activate = function () {
    this.filterSortControl.input.input = canvas.app.manor.view.input8;
};
canvas.app.manor.view.controls.BankWin.prototype.deactivate = function () {
    this.filterSortControl.input.input = null;
};
canvas.app.manor.view.controls.BankWin.prototype.hide = function () {
    this.filterSortControl.filterText = "";
};
canvas.app.manor.view.controls.BuildingWin = function () {
    canvas.app.manor.view.WindowManorBase.call(this, 600, 500, "");
    this.container = this.addChild(new canvas.px.Container());
    this.useContainer = new canvas.px.Container();
    this.useContainer2 = new canvas.px.Container();
    this.useModules = {};
    this.fieldDesc = this.container.addChild(new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_12, canvas.Const.FONT_TAHOMA_12_BOLD, 7026733, 350, 164, "left"));
    this.fieldDesc.position.set(218, 35);
    this.image = this.container.addChild(new canvas.ui.Image());
    this.image.position.set(20, 27);
    this.level = this.container.addChild(new canvas.app.manor.view.controls.elements.Level());
    this.level.position.set(45, 140);
    this.upgrade = new canvas.app.manor.view.controls.Upgrade();
    this.panel = this.container.addChild(new canvas.app.manor.view.controls.elements.Panels([this.upgrade, this.useContainer], ["upgrade", "use"], [canvas.Translator.getText(114), canvas.Translator.getText(115)], 1));
    this.panel.position.set(22, 185);
    this.panel.setSize(555);
    this.useKennel = new canvas.app.manor.view.controls.UseKennel();
    this.useObelisk = new canvas.app.manor.view.controls.UseObelisk();
    this.useExp = new canvas.app.manor.view.controls.UseExp();
    this.useExp2 = new canvas.app.manor.view.controls.UseExp2();
    this.usePets = new canvas.app.manor.view.controls.UsePets();
    this.useHospital = new canvas.app.manor.view.controls.UseHospital();
    this.useWorkshop = new canvas.app.manor.view.controls.UseWorkshop();
    this.useWorkshop2 = new canvas.app.manor.view.controls.UseWorkshop2();
    this.useMine = new canvas.app.manor.view.controls.UseMine();
    this.useMine2 = new canvas.app.manor.view.controls.UseMine2();
    this.useMake = new canvas.app.manor.view.controls.UseMake();
    this.usePortal = new canvas.app.manor.view.controls.UsePortal();
    this.useModules["kennel"] = this.useKennel;
    this.useModules["obelisk"] = this.useObelisk;
    this.useModules["exp"] = this.useExp;
    this.useModules["exp2"] = this.useExp2;
    this.useModules["pets"] = this.usePets;
    this.useModules["hospital"] = this.useHospital;
    this.useModules["workshop"] = this.useWorkshop;
    this.useModules["workshop2"] = this.useWorkshop2;
    this.useModules["mine"] = this.useMine;
    this.useModules["mine2"] = this.useMine2;
    this.useModules["make"] = this.useMake;
    this.useModules["portal"] = this.usePortal;
    this.enterButton = this.container.addChild(new canvas.app.view.MainButton());
    this.enterButton.setTitle(canvas.Translator.getText(104));
    this.enterButton.y = 145;
    this.enterButton.visible = false;
    this.enterButton.setSize(120);
    this.enterButton2 = this.container.addChild(new canvas.app.view.MainButton());
    this.enterButton2.y = 145;
    this.enterButton2.visible = false;
    this.loader = new canvas.px.MovieClip(canvas.Config.effectsPath + "hourglass");
    this.loader.frameEvent = canvas.app.manor.Event.ENTER_FRAME;
    this.loader.loop = true;
    this.loader.position.set(208, 300);
    this.updateButtonsPositions();
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.enterButton, this.enterClickHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.enterButton2, this.enter2ClickHandler, this);
    canvas.EventManager.addEventListener(canvas.app.manor.Event.PANELS_PATH, this.panel, this.pathHandler, this);
    canvas.EventManager.addEventListener(canvas.app.manor.Event.PANELS_CLICK, this.panel, this.panelsClickHandler, this);
    canvas.EventManager.addEventListener(canvas.app.manor.Event.HIDE_BUILDING_LOADER, null, this.hideLoaderHandler, this);
};
canvas.app.manor.view.controls.BuildingWin.prototype = Object.create(canvas.app.manor.view.WindowManorBase.prototype);
canvas.app.manor.view.controls.BuildingWin.prototype.update = function (flags) {
    if (flags == undefined) flags = 0;
    var Conf = canvas.app.manor.model;
    var a = Conf.buildings[Conf.selectedBuilding];
    var dUserBuilding = Conf.user.buildings[Conf.selectedBuilding];
    var dbuilding = a[dUserBuilding.level];
    var dbuildingUpgrade = a[dUserBuilding.level + 1];
    var r, i;
    if (dbuilding != null) {
        this.level.level = dUserBuilding.level.toString();
        if (dbuilding.picture == "") {
            this.image.clear();
        } else {
            this.image.setImage(dbuilding.picture + ".png");
        }
        this.header.text = dbuilding.title;
        this.fieldDesc.text = dbuilding.desc.replace("\r", "");
        if (dbuildingUpgrade != null && dbuildingUpgrade.enabled) {
            this.upgrade.labour.setLabour(dUserBuilding.labour, dbuildingUpgrade.cost, canvas.Functions.testFlag(flags, canvas.app.manor.Const.FLAG_AFTER_BUILD));
            this.upgrade.labourInput.maxValue = Math.min(Conf.user.labour, Conf.user.cement, dbuildingUpgrade.cost - dUserBuilding.labour);
            this.upgrade.setTitlePercent(Math.round((dUserBuilding.labour / dbuildingUpgrade.cost) * 100));
            this.upgrade.labourInput.update();
            this.upgrade.cementInput.update(null, Conf.user.cement.toString());
            this.upgrade.clear();
            this.upgrade.testRequires();
            this.upgrade.labour.visible = true;
            this.upgrade.labourInput.interactiveChildren = true;
        } else {
            switch (dUserBuilding.name) {
                case "storage":
                case "mail":
                case "market":
                case "camp":
                    canvas.EventManager.dispatchEvent(canvas.ui.ButtonEvent.EVENT_CLICK, this.enterButton);
                    return;
            }
            this.upgrade.labour.setLabour(dUserBuilding.labour, 0);
            this.upgrade.setTitlePercent(0);
            this.upgrade.labourInput.update();
            this.upgrade.cementInput.update(null, Conf.user.cement);
            this.upgrade.clear();
            this.upgrade.buildButton.enabled = false;
            this.upgrade.labour.visible = false;
            this.upgrade.labourInput.interactiveChildren = false;
            this.upgrade.fieldTopTitle.text = canvas.Translator.getText(113) + ".";
        }
        this.upgrade.destroyButton.visible = dUserBuilding.level > 0 || dUserBuilding.labour > 0;
        this.upgrade.backButton.visible = this.upgrade.fieldBack.visible = !this.upgrade.destroyButton.visible && Conf.availableBuildings != null && Conf.availableBuildings.length > 1;
        if (!dbuilding.destroyEnabled) this.upgrade.destroyButton.visible = false;
    }
    switch (Conf.getSelectedBuildingBase()) {
        case "tree":
        case "halloween":
            this.panel.visible = false;
            break;
        case "workshop":
        case "mine":
        case "make":
            switch (Conf.getSelectedBuildingBase()) {
                case "workshop":
                    i = 115;
                    break;
                case "mine":
                    i = 234;
                    break;
                case "make":
                    i = 237;
                    break;
            }
            if (dUserBuilding.level > 0) {
                this.panel.init([this.upgrade, this.useContainer, this.useContainer2], ["upgrade", "use", "use2"], [canvas.Translator.getText(114), canvas.Translator.getText(i), canvas.Translator.getText(116)]);
                this.panel.visible = true;
                break;
            }
        default:
            this.panel.init([this.upgrade, this.useContainer], ["upgrade", "use"], [canvas.Translator.getText(114), canvas.Translator.getText(115)]);
            this.panel.visible = true;
            break;
    }
    if (dUserBuilding == null || dUserBuilding.level == 0 || ["main", "storage", "mail", "market", "wall", "tree", "halloween", "camp"].indexOf(dUserBuilding.name) != -1) {
        this.panel.init([this.upgrade], ["upgrade"], [canvas.Translator.getText(114)]);
    }
    this.enterButton.visible = this.enterButton2.visible = false;
    if (dUserBuilding != null)
        switch (dUserBuilding.name) {
            case "main":
                if (dUserBuilding.level > 0) this.enterButton2.visible = true;
            case "camp":
            case "storage":
            case "mail":
            case "market":
                if (dUserBuilding.level > 0) this.enterButton.visible = true;
                break;
            case "tree":
            case "halloween":
                this.enterButton.visible = true;
                break;
        }
    this.upgrade.hireButton.enabled = !dUserBuilding.isUnknownDich();
};
canvas.app.manor.view.controls.BuildingWin.prototype.show = function () {
    canvas.app.manor.view.WindowManorBase.prototype.show.call(this);
    var Conf = canvas.app.manor.model;
    var panel = this.panel.visible ? this.panel : null;
    if (
        panel != null &&
        Conf.buildingPanelsStatus["bs_" + Conf.selectedBuilding] != undefined &&
        Conf.buildingPanelsStatus["bs_" + Conf.selectedBuilding] != "" &&
        this.panel.getEnabled(Conf.buildingPanelsStatus["bs_" + Conf.selectedBuilding])
    ) {
        panel.path = Conf.buildingPanelsStatus["bs_" + Conf.selectedBuilding];
    } else {
        if (panel != null) panel.setDefaultPath();
    }
    this.pathHandler();
    this.activate();
};
canvas.app.manor.view.controls.BuildingWin.prototype.hide = function () {
    canvas.app.manor.view.WindowManorBase.prototype.hide.call(this);
    this.deactivate();
    if (this.usePets.petView.pet) this.usePets.petView.pet.stop();
};
canvas.app.manor.view.controls.BuildingWin.prototype.enterClickHandler = function () {
    var Conf = canvas.app.manor.model;
    var dUserBuilding = Conf.user.buildings[Conf.selectedBuilding];
    switch (Conf.selectedBuilding) {
        case "main":
        case "storage":
            canvas.EventManager.dispatchEvent(canvas.app.manor.Event.OPEN_BANK, null, { flag: Conf.selectedBuilding == "storage" });
            break;
        case "mail":
            canvas.Functions.navigateToURL("area_post.php", "_self");
            break;
        case "tree":
        case "halloween":
            if (dUserBuilding != null && dUserBuilding.params != "") {
                canvas.Functions.navigateToURL(dUserBuilding.params, "_self");
            }
            break;
        case "market":
            canvas.Functions.navigateToURL("area_store.php", "_self");
            break;
        case "camp":
            canvas.EventManager.dispatchEvent(canvas.app.manor.Event.OPEN_HUNT_CAMP);
            break;
    }
    this.close();
};
canvas.app.manor.view.controls.BuildingWin.prototype.enter2ClickHandler = function () {
    var Conf = canvas.app.manor.model;
    switch (Conf.selectedBuilding) {
        case "main":
            canvas.EventManager.dispatchEvent(canvas.app.manor.Event.OPEN_THRONE_ROOM);
            break;
    }
    this.close();
};
canvas.app.manor.view.controls.BuildingWin.prototype.panelsClickHandler = function () {
    var Conf = canvas.app.manor.model;
    Conf.localStorage.set("bs_" + Conf.selectedBuilding, this.panel.path);
    Conf.buildingPanelsStatus["bs_" + Conf.selectedBuilding] = this.panel.path;
};
canvas.app.manor.view.controls.BuildingWin.prototype.pathHandler = function () {
    var Conf = canvas.app.manor.model;
    var dUserBuilding;
    var panel = this.panel.visible ? this.panel : null;
    canvas.Functions.clearChildren(this.useContainer);
    canvas.Functions.clearChildren(this.useContainer2);
    var dwidth = 140;
    if (panel != null && panel.path == "upgrade" && (this.upgrade.destroyButton.visible || this.upgrade.backButton.visible)) {
        this.setSize(600, 500);
        this.fieldDesc.setSize(350);
        panel.setSize(556);
    } else {
        this.setSize(600 - dwidth, 500);
        this.fieldDesc.setSize(350 - dwidth);
        if (panel != null) panel.setSize(556 - dwidth);
    }
    this.enterButton.setTitle(canvas.Translator.getText(104));
    this.enterButton2.setTitle("");
    if (panel != null) panel.setSize(0, 265);
    switch (Conf.selectedBuilding) {
        case "main":
            this.enterButton.setTitle(canvas.Translator.getText(253));
            this.enterButton2.setTitle(canvas.Translator.getText(252));
            break;
        case "tree":
        case "halloween":
            this.setSize(this.back.width, 215);
            this.enterButton.setTitle(canvas.Translator.getText(226));
            this.enterButton.x = this.back.width - this.enterButton._width - 10;
            this.baseHeight = 300;
            break;
        default:
            this.baseHeight = 520;
            break;
    }
    this.updateButtonsPositions();
    if (this.useModules[Conf.getSelectedBuildingBase()] != undefined && panel != null) {
        switch (panel.path) {
            case "use":
                dUserBuilding = Conf.user.buildings[Conf.selectedBuilding];
                if (dUserBuilding != null && dUserBuilding.level > 0) {
                    switch (Conf.getSelectedBuildingBase()) {
                        case "pets":
                            this.setSize(this.back.width, 526);
                            panel.setSize(0, 295);
                            canvas.EventManager.dispatchEvent(canvas.app.manor.Event.USE_PETS_DATA);
                            break;
                        case "exp":
                            canvas.EventManager.dispatchEvent(canvas.app.manor.Event.USE_EXP_DATA);
                            break;
                        case "exp2":
                            canvas.EventManager.dispatchEvent(canvas.app.manor.Event.USE_EXP2_DATA);
                            break;
                        case "obelisk":
                            canvas.EventManager.dispatchEvent(canvas.app.manor.Event.USE_VALOUR_DATA);
                            break;
                        case "hospital":
                            canvas.EventManager.dispatchEvent(canvas.app.manor.Event.USE_HOSPITAL_DATA);
                            break;
                        case "workshop":
                            canvas.EventManager.dispatchEvent(canvas.app.manor.Event.USE_WORKSHOP_DATA);
                            break;
                        case "mine":
                            canvas.EventManager.dispatchEvent(canvas.app.manor.Event.USE_MINE_DATA);
                            break;
                        case "make":
                            canvas.EventManager.dispatchEvent(canvas.app.manor.Event.USE_MINE_DATA);
                            break;
                        case "portal":
                            canvas.EventManager.dispatchEvent(canvas.app.manor.Event.USE_PORTAL_DATA);
                            break;
                        case "kennel":
                            canvas.EventManager.dispatchEvent(canvas.app.manor.Event.USE_KENNEL_DATA);
                            break;
                    }
                    this.useContainer.addChild(this.useModules[Conf.getSelectedBuildingBase()]);
                }
                break;
            case "use2":
                dUserBuilding = Conf.user.buildings[Conf.selectedBuilding];
                if (dUserBuilding != null && dUserBuilding.level > 0) {
                    switch (Conf.getSelectedBuildingBase()) {
                        case "workshop":
                            canvas.EventManager.dispatchEvent(canvas.app.manor.Event.USE_WORKSHOP_DATA);
                            this.useContainer2.addChild(this.useWorkshop2);
                            break;
                        case "mine":
                        case "make":
                            canvas.EventManager.dispatchEvent(canvas.app.manor.Event.USE_MINE_DATA);
                            this.useContainer2.addChild(this.useMine2);
                            break;
                    }
                }
                break;
        }
    }
    var useModule = null;
    if (this.useContainer.numChildren > 0) useModule = this.useContainer.getChildAt(0);
    if (this.useContainer2.numChildren > 0) useModule = this.useContainer2.getChildAt(0);
    if (useModule && useModule.alpha == 0) {
        this.addChild(this.loader);
        this.loader.play();
    } else {
        this.hideLoaderHandler();
    }
    this.deactivate();
    this.activate();
};
canvas.app.manor.view.controls.BuildingWin.prototype.updatePath = function () {
    this.pathHandler();
};
canvas.app.manor.view.controls.BuildingWin.prototype.updateButtonsPositions = function () {
    this.enterButton.x = this.back.width - this.enterButton._width - 10;
    this.enterButton2.x = this.enterButton.x - this.enterButton2._width + 20;
};
canvas.app.manor.view.controls.BuildingWin.prototype.activate = function () {
    if (!this.parent) return;
    if (this.upgrade.parent) this.upgrade.labourInput.input.input = canvas.app.manor.view.input4;
    if (this.usePets.parent) this.usePets.filterSortControl.input.input = canvas.app.manor.view.input1;
    if (this.useWorkshop.parent && !this.useWorkshop.combo.isOpened()) this.useWorkshop.input.input = canvas.app.manor.view.input5;
    if (this.useWorkshop.parent) this.useWorkshop.search.input = canvas.app.manor.view.input7;
    if (this.usePortal.parent) this.usePortal.activate();
};
canvas.app.manor.view.controls.BuildingWin.prototype.deactivate = function () {
    this.upgrade.labourInput.input.input = null;
    this.usePets.filterSortControl.input.input = null;
    this.useWorkshop.input.input = null;
    this.useWorkshop.search.input = null;
    this.usePortal.deactivate();
};
canvas.app.manor.view.controls.BuildingWin.prototype.hideLoaderHandler = function () {
    this.loader.stop();
    this.removeIfExist(this.loader);
};
canvas.app.manor.view.controls.BuyArea = function () {
    canvas.px.Container.call(this);
    this._selectedRequest = 0;
    Object.defineProperty(this, "selectedRequest", {
        get: function () {
            return this._requests[this._selectedRequest];
        },
    });
    this.container = new canvas.px.Container();
    this.addChild(this.container);
    this.listContainer = new canvas.px.Container();
    this.container.addChild(this.listContainer);
    this.listContainer.position.set(20, 64);
    this.fieldTitle = new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_11, canvas.Const.FONT_TAHOMA_11_BOLD, 7092753, 400, 18, "center");
    this.container.addChild(this.fieldTitle);
    this.fieldTitle.position.set(6, 17);
    var t = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11, 7092753, 73, 18, "center");
    this.container.addChild(t);
    t.position.set(-2, 39);
    t.text = canvas.Translator.getText(153);
    t = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11, 7092753, 65, 18, "left");
    this.container.addChild(t);
    t.position.set(75, 39);
    t.text = canvas.Translator.getText(123);
    t = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11, 7092753, 65, 18, "center");
    this.container.addChild(t);
    t.position.set(323, 39);
    t.text = canvas.Translator.getText(121);
    this.pager = new canvas.app.manor.view.controls.elements.Pager();
    this.container.addChild(this.pager);
    this.pager.position.set(207, 360);
    this.pager.visible = false;
    canvas.EventManager.addEventListener(canvas.ui.PagerEvent.EVENT_CHANGE, this.pager, this._pagerHandler, this);
    var i;
    var tmpY = 0;
    var line;
    var radioArray = [];
    for (i = 0; i < canvas.app.manor.Const.REQUESTS_ON_PAGE; i++) {
        line = new canvas.app.manor.view.controls.elements.WorkRequestLine(i, radioArray, "money_gold");
        line.visible = false;
        radioArray.push(line.check);
        this.listContainer.addChild(line);
        line.y = tmpY;
        tmpY += 29;
        canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_SELECT, line.check, this._itemClickHandler, this);
    }
    this.buyButton = new canvas.app.view.MainButton();
    this.buyButton.setTitle(canvas.Translator.getText(167));
    this.buyButton.setSize(180);
    this.container.addChild(this.buyButton);
    this.buyButton.position.set(18, 390);
    this.cancelButton = new canvas.app.view.MainButton();
    this.cancelButton.setTitle(canvas.Translator.getText(2019));
    this.cancelButton.setSize(180);
    this.container.addChild(this.cancelButton);
    this.cancelButton.position.set(218, 390);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.cancelButton, this._cancelClickHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.buyButton, this._buyClickHandler, this);
};
canvas.app.manor.view.controls.BuyArea.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.manor.view.controls.BuyArea.prototype._pagerHandler = function (event) {
    this.requestCurPage = this.pager.currentPage;
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.LOAD_SELL_REQUESTS);
};
canvas.app.manor.view.controls.BuyArea.prototype._itemClickHandler = function (event) {
    this._selectedRequest = event.target.parent.index;
};
canvas.app.manor.view.controls.BuyArea.prototype._updateList = function () {
    var i;
    var sellRequest;
    var sprite;
    var j = 0;
    for (i = 0; i < canvas.app.manor.Const.REQUESTS_ON_PAGE; i++) {
        sellRequest = this._requests[i];
        sprite = this.listContainer.getChildAt(j);
        sprite.check.checked = j == 0;
        sprite.data = sellRequest;
        if (sellRequest != null) {
            sprite.visible = true;
        } else {
            sprite.visible = false;
        }
        j++;
    }
    this._selectedRequest = 0;
};
canvas.app.manor.view.controls.BuyArea.prototype.update = function (requests, requestNumPages, area, location) {
    this._requests = requests;
    this._requestNumPages = requestNumPages;
    if (this._requestNumPages > 1) {
        this.pager.init(this._requestNumPages * canvas.app.manor.Const.REQUESTS_ON_PAGE);
        this.pager.currentPage = this._requestCurPage;
        this.pager.visible = true;
    } else {
        this.pager.visible = false;
    }
    this.fieldTitle.text = "<b>" + canvas.Translator.getText(127) + ":</b> " + area + "     <b>" + canvas.Translator.getText(128) + ":</b> " + location;
    this._updateList();
};
canvas.app.manor.view.controls.BuyArea.prototype._cancelClickHandler = function (event) {
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.CLOSE_MARKET);
};
canvas.app.manor.view.controls.BuyArea.prototype._buyClickHandler = function (event) {
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.OPEN_CONFIRM, null, {
        text: canvas.Translator.getText(168) + " <b>" + this.selectedRequest.price + "</b> <img src='money_gold' atlas='ui' yOffset='1'/> ?",
        event: { name: canvas.app.manor.Event.BUY_AREA, params: { areaId: "", requestId: this.selectedRequest.id, price: this.selectedRequest.price } },
    });
};
canvas.app.manor.view.controls.BuyCementWin = function () {
    canvas.app.manor.view.WindowManorBase.call(this, 390, 194, "");
    this.container = this.addChild(new canvas.px.Container());
    var sprite = this.container.addChild(new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "tile_3"), 4, 4, 4, 4));
    sprite.width = 153;
    sprite.height = 104;
    sprite.position.set(31, 38);
    var title = this.container.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD, 7026733, 85, 38, "left"));
    title.position.set(119, 51);
    title.text = canvas.Translator.getText(169);
    title = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD, 7026733, 95, 18, "right"));
    title.position.set(175, 57);
    title.text = canvas.Translator.getText(170) + ":";
    this.title1 = title;
    title = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD, 7026733, 95, 18, "right"));
    title.position.set(175, 81);
    title.text = canvas.Translator.getText(171) + ":";
    this.item = this.container.addChild(new canvas.app.manor.view.controls.elements.Item(false, true));
    this.item.position.set(38, 44);
    this.item.data = new canvas.data.manor.DItem({ id: canvas.app.manor.model.cementID, picture: canvas.app.manor.model.cementImage, title: canvas.Translator.getText(169) });
    this.item.buttonMode = false;
    this.input = this.container.addChild(new canvas.app.manor.view.controls.elements.Input("center", true, 41, null, null, null, null, true));
    this.input.leftArrow.x += 6;
    this.input.rightArrow.x -= 4;
    this.input.onlyNumbers = true;
    this.input.maxChars = 10;
    this.input.position.set(53, 116);
    this.radioArray = [];
    this.checkMoney = this.container.addChild(new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "check_0"), null, new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "check_0_checker")), this.radioArray));
    this.radioArray.push(this.checkMoney);
    this.checkMoney.position.set(113, 68);
    this.coins1 = this.checkMoney.sprite.addChild(new canvas.app.view.Money(null, canvas.Const.FONT_TAHOMA_11_BOLD, null, 40, null, null, null, false, 0, 0));
    this.coins1.position.set(32, 8);
    this.checkMoney.checked = true;
    this.checkEnergy = this.container.addChild(new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "check_0"), null, new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "check_0_checker")), this.radioArray));
    this.radioArray.push(this.checkEnergy);
    this.checkEnergy.position.set(113, 95);
    this.energy1 = this.checkEnergy.sprite.addChild(new canvas.app.manor.view.controls.elements.Energy());
    this.energy1.position.set(32, 8);
    this.coins2 = this.addChild(new canvas.app.view.Money(null, canvas.Const.FONT_TAHOMA_11_BOLD, null, 110, null, null, null, false));
    this.coins2.position.set(275, 56);
    this.coins2.interactive = false;
    this.coins3 = this.addChild(new canvas.app.view.Money(null, canvas.Const.FONT_TAHOMA_11_BOLD, null, 110, null, null, null, false));
    this.coins3.position.set(275, 80);
    this.coins3.interactive = false;
    this.energy2 = this.addChild(new canvas.app.manor.view.controls.elements.Energy());
    this.energy2.position.set(275, 56);
    this.energy2.interactive = false;
    this.energy3 = this.addChild(new canvas.app.manor.view.controls.elements.Energy());
    this.energy3.position.set(275, 80);
    this.energy3.interactive = false;
    this.container.x = -10;
    var i,
        len = this.radioArray.length;
    for (i = 0; i < len; i++) {
        canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_SELECT, this.radioArray[i], this.selectHandler, this);
    }
    canvas.EventManager.addEventListener(canvas.ui.InputEvent.EVENT_CHANGE, this.input, this.changeHandler, this);
    this.buyButton = this.addChild(new canvas.app.view.MainButton());
    this.buyButton.setTitle(canvas.Translator.getText(167));
    this.buyButton.position.set(140, 142);
    this.buyButton.setSize(120);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.buyButton, this.buyClickHandler, this);
    this.selectHandler();
};
canvas.app.manor.view.controls.BuyCementWin.prototype = Object.create(canvas.app.manor.view.WindowManorBase.prototype);
canvas.app.manor.view.controls.BuyCementWin.prototype.show = function (event) {
    this.activate();
    this.input.text = "0";
    canvas.app.manor.view.WindowManorBase.prototype.show.apply(this);
};
canvas.app.manor.view.controls.BuyCementWin.prototype.hide = function (event) {
    this.deactivate();
    canvas.app.manor.view.WindowManorBase.prototype.hide.call(this, event);
};
canvas.app.manor.view.controls.BuyCementWin.prototype.activate = function () {
    this.input.input = canvas.app.manor.view.input3;
};
canvas.app.manor.view.controls.BuyCementWin.prototype.deactivate = function () {
    this.input.input = null;
};
canvas.app.manor.view.controls.BuyCementWin.prototype.update = function () {
    var model = canvas.app.manor.model;
    this.coins1.money = model.cementCost * 100;
    this.coins2.money = model.user.money * 100;
    this.coins3.money = this.input.text ? model.cementCost * parseInt(this.input.text) * 100 : 0;
    this.energy1.update(model.cementCost);
    this.energy2.update(model.user.labour);
    this.energy3.update(this.input.text ? model.cementCost * parseInt(this.input.text) : 0);
    this.buyButton.enabled = parseInt(this.input.text) > 0 && (this.checkEnergy.checked ? this.energy3.energy <= this.energy2.energy : this.coins3.money <= this.coins2.money);
};
canvas.app.manor.view.controls.BuyCementWin.prototype.selectHandler = function () {
    if (this.checkMoney.checked) {
        this.removeIfExist(this.energy2);
        this.removeIfExist(this.energy3);
        this.addChild(this.coins2);
        this.addChild(this.coins3);
        this.title1.text = canvas.Translator.getText(170) + ":";
        this.item.data.count = 1;
        this.item.update();
        this.item.interactive = false;
        this.input.text = "0";
    } else {
        this.removeIfExist(this.coins2);
        this.removeIfExist(this.coins3);
        this.addChild(this.energy2);
        this.addChild(this.energy3);
        this.item.data.count = canvas.app.manor.Const.ENERGY_COURSE;
        this.item.update();
        this.item.interactive = false;
        this.title1.text = canvas.Translator.getText(205) + ":";
        this.input.text = Math.floor(canvas.app.manor.model.user.labour / canvas.app.manor.model.cementCost);
    }
    this.update();
};
canvas.app.manor.view.controls.BuyCementWin.prototype.changeHandler = function () {
    this.update();
};
canvas.app.manor.view.controls.BuyCementWin.prototype.buyClickHandler = function () {
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.OPEN_CONFIRM, null, {
        params: canvas.Translator.getText(109),
        object: { name: canvas.app.manor.Event.BUY_CEMENT, params: { params: this.input.text, flag: this.checkEnergy.checked } },
    });
};
canvas.app.manor.view.controls.ChooseBuildingWin = function () {
    canvas.app.manor.view.WindowManorBase.call(this, 460, 510, canvas.Translator.getText(230));
    this.list = this.addChild(new canvas.ui.List(canvas.ui.ListType.VERTICAL, 1));
    this.list.setSize(420, 446);
    this.list.scroll = new canvas.app.manor.view.controls.elements.Scroll(this.list.container);
    this.list.position.set(20, 40);
    this.list._scrollPadding = 3;
    this.list.scroll._step = 100;
};
canvas.app.manor.view.controls.ChooseBuildingWin.prototype = Object.create(canvas.app.manor.view.WindowManorBase.prototype);
canvas.app.manor.view.controls.ChooseBuildingWin.prototype.update = function () {
    var Conf = canvas.app.manor.model;
    this.list.clear(false);
    var i,
        len = Conf.availableBuildings.length;
    for (i = 0; i < len; i++) {
        this.list.add(new canvas.app.manor.view.controls.elements.ChoseBuildingItem(Conf.availableBuildings[i]), false);
    }
    this.list.update();
};
canvas.app.manor.view.controls.ChoosePetWin = function () {
    this._selectedIndex = -1;
    Object.defineProperty(this, "selectedIndex", {
        get: function () {
            return this._selectedIndex;
        },
        set: function (value) {
            this._selectedIndex = value;
            this.updateSorButtons();
            this.updateView();
        },
    });
    canvas.app.manor.view.WindowManorBase.call(this, 630, 524, canvas.Translator.getText(327));
    this.container = this.addChild(new canvas.px.Container());
    this.container.y = 30;
    this.topList = this.container.addChild(new canvas.ui.List(canvas.ui.ListType.HORIZONTAL, 1));
    this.topList._paddingV = this.topList._paddingH = 0;
    this.topList.setSize(440, canvas.app.manor.view.controls.ChoosePetWin.CELL_WIDTH);
    var i, len, button;
    for (i = 0; i < canvas.data.manor.DCampData.TYPE_COUNT; i++) {
        this.topList.add(new canvas.app.manor.view.controls.camp.SortButtonRenderer(i), false);
    }
    this.topList.update();
    this.topList.position.set(canvas.app.manor.view.controls.ChoosePetWin.FIRST_CELL_WIDTH, 0);
    var sprite = this.container.addChild(new canvas.px.RoundRect(16576940, 1, this.back.width - 13, 427, 15, 15));
    sprite.position.set(6, 61);
    sprite = this.container.addChild(new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "tile_gradient"), 10, 0, 10, 0));
    sprite.width = this.back.width - 24;
    sprite.position.set(12, 60);
    this.list = this.addChild(new canvas.ui.List(canvas.ui.ListType.VERTICAL, 1));
    this.list._paddingV = this.list._paddingH = 0;
    this.list._scrollPadding = 20;
    this.list.position.set(6, 91);
    this.list.setSize(599, 420);
    this.list.scroll = new canvas.app.manor.view.controls.elements.Scroll(this.list.container);
    this.filterSortControl = this.addChild(new canvas.app.manor.view.controls.elements.FilterSortControlPets([], "", "", false, canvas.Translator.getText(281)));
    this.filterSortControl.container.removeChild(this.filterSortControl.filterButton);
    this.filterSortControl.position.set(54, 65);
    this.excludePets = null;
    canvas.EventManager.addEventListener(canvas.ui.Event.EVENT_CHANGE, this.filterSortControl, this.filterChangeHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ListEvent.EVENT_SELECT, this.topList, this.topSelectHandler, this);
};
canvas.app.manor.view.controls.ChoosePetWin.prototype = Object.create(canvas.app.manor.view.WindowManorBase.prototype);
canvas.app.manor.view.controls.ChoosePetWin.FIRST_CELL_WIDTH = 170;
canvas.app.manor.view.controls.ChoosePetWin.CELL_WIDTH = 72;
canvas.app.manor.view.controls.ChoosePetWin.prototype.updateView = function () {
    this.pets.sort(this.sortFunction.bind(this));
    var i,
        len = this.pets.length;
    var line;
    for (i = 0; i < len; i++) {
        line = this.list.items[i];
        line.selectedIndex = this.selectedIndex;
        line.data = this.pets[i];
    }
};
canvas.app.manor.view.controls.ChoosePetWin.prototype.updateSorButtons = function () {
    var i, button;
    for (i = 0; i < canvas.data.manor.DCampData.TYPE_COUNT; i++) {
        button = this.topList.items[i];
        if (button.id == this.selectedIndex) {
            button.changeSort();
        } else {
            button.sortValue = 0;
        }
    }
};
canvas.app.manor.view.controls.ChoosePetWin.prototype.sortFunction = function (a, b) {
    if (a.getSkillByIndex(this.selectedIndex + 1) > b.getSkillByIndex(this.selectedIndex + 1)) {
        return -this.topList.items[this.selectedIndex].sortValue;
    } else if (a.getSkillByIndex(this.selectedIndex + 1) < b.getSkillByIndex(this.selectedIndex + 1)) {
        return this.topList.items[this.selectedIndex].sortValue;
    } else {
        return 0;
    }
};
canvas.app.manor.view.controls.ChoosePetWin.prototype.update = function () {
    var Conf = canvas.app.manor.model;
    if (!Conf.campData.pets) return;
    var petRenderer;
    var dCampPet;
    var index = 0;
    this.pets = new Array();
    this.list.clear(false);
    for (var str in Conf.campData.pets) {
        dCampPet = Conf.campData.pets[str];
        if (dCampPet.mission || !dCampPet.canQuest || (this.excludePets && this.excludePets.indexOf(dCampPet.id) >= 0)) continue;
        if (this.filterSortControl.filterText.length > 2 && dCampPet.title.toLowerCase().search(this.filterSortControl.filterText.toLowerCase()) < 0) {
            continue;
        }
        this.list.add(new canvas.app.manor.view.controls.camp.PetLineRenderer(this.back.width - 13, dCampPet), false);
        this.pets.push(dCampPet);
    }
    this.list.update();
    if (this._selectedIndex < 0) this.selectedIndex = 0;
    else this.updateView();
};
canvas.app.manor.view.controls.ChoosePetWin.prototype.topSelectHandler = function (event) {
    if (event.params) {
        this.selectedIndex = event.params.id;
    }
};
canvas.app.manor.view.controls.ChoosePetWin.prototype.filterChangeHandler = function (event) {
    this.update();
};
canvas.app.manor.view.controls.ChoosePetWin.prototype.activate = function () {
    this.filterSortControl.input.input = canvas.app.manor.view.input11;
};
canvas.app.manor.view.controls.ChoosePetWin.prototype.deactivate = function () {
    this.filterSortControl.input.input = null;
};
canvas.app.manor.view.controls.ConfirmWindow = function () {
    canvas.app.manor.view.WindowManorBase.call(this, 327, 166, canvas.Translator.getText(2020));
    this.messageField = new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_12, canvas.Const.FONT_TAHOMA_12_BOLD, 7026733, 250, 70, "center", "middle");
    this.messageField._lineSpace = 4;
    this.messageField.position.set(40, 40);
    this.addChild(this.messageField);
    this.okButton = new canvas.app.view.MainButton();
    this.okButton.setTitle(canvas.Translator.getText(2018));
    this.okButton.setSize(120);
    this.okButton.position.set(Math.round(this.width * 0.5 - this.okButton.width - 10), 105);
    this.addChild(this.okButton);
    this.cancelButton = new canvas.app.view.MainButton();
    this.cancelButton.setTitle(canvas.Translator.getText(2019));
    this.cancelButton.setSize(120);
    this.cancelButton.position.set(Math.round(this.width * 0.5 + 10), 105);
    this.addChild(this.cancelButton);
};
canvas.app.manor.view.controls.ConfirmWindow.prototype = Object.create(canvas.app.manor.view.WindowManorBase.prototype);
canvas.app.manor.view.controls.ConfirmWindow.prototype.clickHandler = function (mouseData) {
    if (canvas.Functions.findParent(this.okButton, mouseData.target)) {
        canvas.EventManager.dispatchEvent(canvas.px.WindowEvent.EVENT_CLOSE, this);
        if (this.e != null) {
            if (this.e.func) {
                this.e.func.apply(null, this.e.params);
            } else if (this.e.name) {
                canvas.EventManager.dispatchEvent(this.e.name, null, this.e.params);
            }
        }
        return;
    }
    if (canvas.Functions.findParent(this.cancelButton, mouseData.target)) {
        canvas.EventManager.dispatchEvent(canvas.px.WindowEvent.EVENT_CLOSE, this);
        return;
    }
    canvas.px.Window.prototype.clickHandler.call(this, mouseData);
};
canvas.app.manor.view.controls.ConfirmWindow.prototype.init = function (title, e, okText, cancelText) {
    if (okText != undefined) this.okButton.setTitle(okText);
    if (cancelText != undefined) this.cancelButton.setTitle(cancelText);
    if (e == undefined) e = null;
    this.messageField.text = title;
    this.e = e;
};
canvas.app.manor.view.controls.CountWin = function () {
    canvas.app.manor.view.WindowManorBase.call(this, 327, 166, "");
    this.title = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD, 7026733, 240, 18, "center"));
    this.title.position.set(40, 53);
    this.title.text = canvas.Translator.getText(186) + ":";
    this.input = this.addChild(new canvas.app.manor.view.controls.elements.Input("center", true, 41, null, null, null, null, true));
    this.input.leftArrow.x += 6;
    this.input.rightArrow.x -= 4;
    this.input.onlyNumbers = true;
    this.input.maxChars = 10;
    this.input.position.set(135, 80);
    this.okButton = this.addChild(new canvas.app.view.MainButton());
    this.okButton.setTitle(canvas.Translator.getText(2018));
    this.okButton.position.set(50, 110);
    this.okButton.setSize(100);
    this.allButton = this.addChild(new canvas.app.view.MainButton());
    this.allButton.setTitle(canvas.Translator.getText(187));
    this.allButton.position.set(165, 110);
    this.allButton.setSize(100);
    canvas.EventManager.addEventListener(canvas.ui.InputEvent.EVENT_CHANGE, this.input, this.changeHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.okButton, this.okHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.allButton, this.allHandler, this);
};
canvas.app.manor.view.controls.CountWin.prototype = Object.create(canvas.app.manor.view.WindowManorBase.prototype);
canvas.app.manor.view.controls.CountWin.count = 0;
canvas.app.manor.view.controls.CountWin.maxCount = 0;
canvas.app.manor.view.controls.CountWin.event = null;
canvas.app.manor.view.controls.CountWin.prototype.update = function () {
    this.okButton.enabled = parseInt(this.input.text) > 0;
};
canvas.app.manor.view.controls.CountWin.prototype.changeHandler = function () {
    this.update();
};
canvas.app.manor.view.controls.CountWin.prototype.okHandler = function () {
    canvas.app.manor.view.controls.CountWin.count = parseInt(this.input.text);
    canvas.EventManager.dispatchEvent.apply(canvas.EventManager, canvas.app.manor.view.controls.CountWin.event);
    this.close();
};
canvas.app.manor.view.controls.CountWin.prototype.allHandler = function () {
    canvas.app.manor.view.controls.CountWin.count = canvas.app.manor.view.controls.CountWin.maxCount;
    canvas.EventManager.dispatchEvent.apply(canvas.EventManager, canvas.app.manor.view.controls.CountWin.event);
    this.close();
};
canvas.app.manor.view.controls.CountWin.prototype.activate = function () {
    this.input.input = canvas.app.manor.view.input9;
};
canvas.app.manor.view.controls.CountWin.prototype.deactivate = function () {
    this.input.input = null;
};
canvas.app.manor.view.controls.CountWin.prototype.show = function () {
    canvas.app.manor.view.WindowManorBase.prototype.show.call(this);
    this.input.text = "1";
    this.update();
};
canvas.app.manor.view.controls.CountWin.prototype.hide = function () {
    canvas.app.manor.view.WindowManorBase.prototype.hide.call(this);
    canvas.app.manor.view.controls.CountWin.count = 0;
    canvas.app.manor.view.controls.CountWin.maxCount = 1;
    this.input.input = null;
};
canvas.app.manor.view.controls.HireWin = function () {
    canvas.app.manor.view.WindowManorBase.call(this, 327, 307, canvas.Translator.getText(105));
    this.container = this.addChild(new canvas.px.Container());
    var label0 = this.container.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD, 7026733, 96, 18, "right"));
    label0.position.set(5, 46);
    label0.text = canvas.Translator.getText(106) + ":";
    var label1 = this.container.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD, 7026733, 96, 18, "right"));
    label1.position.set(5, 76);
    label1.text = canvas.Translator.getText(107) + ":";
    var label2 = this.container.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD, 7026733, 96, 18, "right"));
    label2.position.set(107, 76);
    label2.text = canvas.Translator.getText(108);
    this.prognosisField = this.container.addChild(new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_11, canvas.Const.FONT_TAHOMA_11, 7026733, 283, 18, "center"));
    this.prognosisField.position.set(23, 102);
    this.inputLabour = this.container.addChild(new canvas.app.manor.view.controls.elements.Input());
    this.inputLabour.onlyNumbers = true;
    this.inputLabour.maxChars = 4;
    this.inputLabour.position.set(104, 74);
    this.inputPrice = this.container.addChild(new canvas.app.manor.view.controls.elements.Input());
    this.inputPrice.onlyNumbers = true;
    this.inputPrice.maxChars = 2;
    this.inputPrice.position.set(206, 74);
    var coin = this.container.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "money_silver")));
    coin.position.set(240, 78);
    this.cementInput = this.container.addChild(new canvas.app.manor.view.controls.elements.CementInput());
    this.cementInput.position.set(80, 125);
    this.buyCementButton = this.container.addChild(new canvas.app.manor.view.controls.elements.ButtonImage(canvas.Translator.getText(109), 2));
    this.buyCementButton.position.set(20, 252);
    this.saveButton = this.container.addChild(new canvas.app.manor.view.controls.elements.ButtonImage(canvas.Translator.getText(110), 4));
    this.saveButton.position.set(159, 252);
    this.combo = this.container.addChild(new canvas.app.manor.view.controls.elements.Combo());
    this.combo.position.set(105, 40);
    canvas.EventManager.addEventListener(canvas.ui.ComboBoxEvent.EVENT_OPEN, this.combo, this.comboOpenHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ComboBoxEvent.EVENT_CLOSE, this.combo, this.comboCloseHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.InputEvent.EVENT_CHANGE, this.inputLabour, this.changeHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.InputEvent.EVENT_CHANGE, this.inputPrice, this.changeHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.buyCementButton, this.buyClickHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.saveButton, this.saveClickHandler, this);
    canvas.EventManager.addEventListener(canvas.px.WindowEvent.EVENT_CLOSE, null, this.closeHandler, this);
};
canvas.app.manor.view.controls.HireWin.prototype = Object.create(canvas.app.manor.view.WindowManorBase.prototype);
canvas.app.manor.view.controls.HireWin.prototype.show = function (event) {
    this.activate();
    canvas.app.manor.view.WindowManorBase.prototype.show.apply(this);
};
canvas.app.manor.view.controls.HireWin.prototype.hide = function (event) {
    this.deactivate();
    canvas.app.manor.view.WindowManorBase.prototype.hide.call(this, event);
};
canvas.app.manor.view.controls.HireWin.prototype.comboOpenHandler = function (event) {
    this.deactivate();
};
canvas.app.manor.view.controls.HireWin.prototype.comboCloseHandler = function (event) {
    if (this.parent) this.activate();
};
canvas.app.manor.view.controls.HireWin.prototype.activate = function () {
    this.inputLabour.input = canvas.app.manor.view.input;
    this.inputPrice.input = canvas.app.manor.view.input2;
};
canvas.app.manor.view.controls.HireWin.prototype.deactivate = function () {
    this.inputLabour.input = null;
    this.inputPrice.input = null;
};
canvas.app.manor.view.controls.HireWin.prototype.update = function (flags) {
    if (flags == undefined) flags = 0;
    var model = canvas.app.manor.model;
    var userBuilding;
    var building;
    var values = new Array();
    for (var str in model.user.buildings) {
        userBuilding = model.user.buildings[str];
        building = model.buildings[userBuilding.name][userBuilding.level + 1];
        if (building != null && !userBuilding.isUnknownDich() && building.cost > 0) {
            values.push({ name: building.name, title: building.title });
        }
    }
    if (values.length < 1) {
        canvas.EventManager.dispatchEvent(canvas.app.manor.Event.OPEN_MESSAGE, null, { params: canvas.Translator.getText(250) });
        this.close();
        return;
    } else {
        this.combo.init(values);
        this.inputLabour.text = "0";
        this.cementInput.clear();
        this.inputPrice.text = "5";
        this.updateLight();
        this.saveButton.setTitle(model.requestToRemove != "" ? canvas.Translator.getText(111) : canvas.Translator.getText(110));
        this.combo.enabled = model.requestToRemove == "";
        this.updatePrognosis();
    }
};
canvas.app.manor.view.controls.HireWin.prototype.updateLight = function () {
    var model = canvas.app.manor.model;
    if (model.requestToRemove != "") {
        var workRequest = model.user.getRequestById(model.requestToRemove);
        if (workRequest != null) this.cementInput.update(null, model.user.cement + workRequest.labour);
    } else {
        this.cementInput.update();
    }
    this.saveButton.enabled = this.cementInput.testRequires() && parseInt(this.inputPrice.text) > 0;
};
canvas.app.manor.view.controls.HireWin.prototype.updatePrognosis = function () {
    this.prognosisField.text = canvas.Translator.getText(112) + ": <b>" + canvas.app.manor.model.getLabourPrognosis(parseInt(this.inputPrice.text), parseInt(this.inputLabour.text)) + "</b>";
};
canvas.app.manor.view.controls.HireWin.prototype.changeHandler = function () {
    this.cementInput.update(this.inputLabour.text);
    this.saveButton.enabled = this.cementInput.testRequires() && parseInt(this.inputPrice.text) > 0;
    this.updatePrognosis();
};
canvas.app.manor.view.controls.HireWin.prototype.buyClickHandler = function (e) {
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.OPEN_CEMENT);
};
canvas.app.manor.view.controls.HireWin.prototype.saveClickHandler = function (e) {
    var obj = new Object();
    obj.type = this.combo.selectedItem.name;
    obj.labour = this.inputLabour.text;
    obj.price = this.inputPrice.text;
    if (canvas.app.manor.model.requestToRemove != "") {
        obj.edit = true;
        canvas.app.manor.model.requestToRemove = "";
    } else {
        obj.edit = false;
    }
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.CREATE_WORK_REQUEST, null, { object: obj });
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.CLOSE_HIRE);
};
canvas.app.manor.view.controls.HireWin.prototype.closeHandler = function (e) {
    if (e.params == this) {
        canvas.app.manor.model.requestToRemove = "";
    }
};
canvas.app.manor.view.controls.HuntCampWin = function () {
    canvas.app.manor.view.WindowManorBase.call(this, 926, 524, canvas.Translator.getText(292));
    this.container = this.addChild(new canvas.px.Container());
    this.container.position.set(20, 32);
    this.mineResources = new canvas.app.manor.view.controls.camp.MineResources();
    this.mineTalismans = new canvas.app.manor.view.controls.camp.MineTalismans();
    this.equipment = new canvas.app.manor.view.controls.camp.Equipment();
    this.panels = this.container.addChild(
        new canvas.app.manor.view.controls.elements.Panels(
            [this.mineTalismans, this.mineResources, this.equipment],
            ["talismans", "resources", "equipment"],
            [canvas.Translator.getText(294), canvas.Translator.getText(293), canvas.Translator.getText(295)],
            1
        )
    );
    this.panels.setSize(886, 443);
    this.panels.contentContainer.x += 16;
    this.panels.contentContainer.y += 20;
    this.panels.path = "talismans";
    this.loader = new canvas.px.MovieClip(canvas.Config.effectsPath + "hourglass");
    this.loader.frameEvent = canvas.app.manor.Event.ENTER_FRAME;
    this.loader.loop = true;
    this.loader.position.set(450, 270);
    canvas.EventManager.addEventListener(canvas.app.manor.Event.PANELS_PATH, this.panels, this.pathHandler, this);
};
canvas.app.manor.view.controls.HuntCampWin.prototype = Object.create(canvas.app.manor.view.WindowManorBase.prototype);
canvas.app.manor.view.controls.HuntCampWin.prototype.update = function () {
    if (!this.mineResources.inited && this.panels.path == "resources") this.mineResources.update();
    if (!this.mineTalismans.inited && this.panels.path == "talismans") this.mineTalismans.update();
    if (!this.equipment.inited && this.panels.path == "equipment") {
        this.equipment.update();
        this.activate();
    }
    this.testLoader();
};
canvas.app.manor.view.controls.HuntCampWin.prototype.updateFarm = function () {
    this.mineResources.update();
    this.mineTalismans.update();
};
canvas.app.manor.view.controls.HuntCampWin.prototype.show = function () {
    canvas.app.manor.view.WindowManorBase.prototype.show.call(this);
    this.testInited();
};
canvas.app.manor.view.controls.HuntCampWin.prototype.testLoader = function () {
    var show = false;
    switch (this.panels.path) {
        case "resources":
            show = !this.mineResources.inited;
            break;
        case "talismans":
            show = !this.mineTalismans.inited;
            break;
        case "equipment":
            show = !this.equipment.inited;
            break;
    }
    this.showLoader(show);
};
canvas.app.manor.view.controls.HuntCampWin.prototype.showLoader = function (b) {
    if (b) {
        this.loader.play();
        this.addChild(this.loader);
        this.interactiveChildren = false;
    } else {
        this.loader.stop();
        this.removeIfExist(this.loader);
        this.interactiveChildren = true;
    }
};
canvas.app.manor.view.controls.HuntCampWin.prototype.updateTime = function () {
    this.mineResources.updateTime();
    this.mineTalismans.updateTime();
};
canvas.app.manor.view.controls.HuntCampWin.prototype.pathHandler = function () {
    this.activate();
    this.testLoader();
    this.testInited();
};
canvas.app.manor.view.controls.HuntCampWin.prototype.testInited = function () {
    switch (this.panels.path) {
        case "resources":
            if (!this.mineResources.inited) canvas.EventManager.dispatchEvent(canvas.app.manor.Event.USE_HUNT_CAMP_DATA_FARM);
            break;
        case "talismans":
            if (!this.mineTalismans.inited) canvas.EventManager.dispatchEvent(canvas.app.manor.Event.USE_HUNT_CAMP_DATA_SEARCH);
            break;
        case "equipment":
            if (!this.equipment.inited) canvas.EventManager.dispatchEvent(canvas.app.manor.Event.USE_HUNT_CAMP_DATA_FORGE);
            break;
    }
};
canvas.app.manor.view.controls.HuntCampWin.prototype.activate = function () {
    if (this.parent && this.equipment.input && this.panels.path == "equipment") {
        this.equipment.input.input = canvas.app.manor.view.input10;
    } else {
        this.deactivate();
    }
};
canvas.app.manor.view.controls.HuntCampWin.prototype.deactivate = function () {
    if (this.equipment.input) {
        this.equipment.input.input = null;
    }
};
canvas.app.manor.view.controls.HuntCampWin.prototype.hide = function () {
    canvas.app.manor.view.WindowManorBase.prototype.hide.call(this);
    if (this.equipment.input) {
        this.equipment.input.input = null;
    }
};
canvas.app.manor.view.controls.LabourWin = function (onlyWork) {
    canvas.app.manor.view.WindowManorBase.call(this, 461, 496, canvas.Translator.getText(157) + ":");
    if (onlyWork == undefined) onlyWork = false;
    this.header.hAlign = "left";
    this.container = new canvas.px.Container();
    this.addChild(this.container);
    this.allRequests = new canvas.app.manor.view.controls.AllRequests();
    if (onlyWork) {
        this.panel = new canvas.app.manor.view.controls.elements.Panels([this.allRequests], ["all"], [canvas.Translator.getText(158)], null, null, 100);
    } else {
        this.myRequests = new canvas.app.manor.view.controls.MyRequests();
        this.panel = new canvas.app.manor.view.controls.elements.Panels([this.allRequests, this.myRequests], ["all", "my"], [canvas.Translator.getText(158), canvas.Translator.getText(159)], null, null, 100);
    }
    this.panel.setSize(415, 440);
    this.container.addChild(this.panel);
    this.panel.position.set(22, 10);
    if (canvas.app.manor.model.mapMode) {
        this.position.set(30, 70);
    }
};
canvas.app.manor.view.controls.LabourWin.prototype = Object.create(canvas.app.manor.view.WindowManorBase.prototype);
canvas.app.manor.view.controls.LabourWin.prototype.show = function (event) {
    this.panel.path = "my";
    canvas.app.manor.view.WindowManorBase.prototype.show.call(this, event);
};
canvas.app.manor.view.controls.LabourWin.prototype.update = function (flags) {
    if (flags == undefined) flags = 0;
    var Conf = canvas.app.manor.model;
    this.allRequests.fieldTitle.text = canvas.Translator.getText(160) + " <b>" + Conf.user.labour + "</b> " + canvas.Translator.getText(161);
    this.allRequests.update();
    if (this.myRequests) {
        this.myRequests.fieldTitle.text = this.allRequests.fieldTitle.text;
        this.myRequests.update();
    }
};
canvas.app.manor.view.controls.MarketWin = function () {
    canvas.app.manor.view.WindowManorBase.call(this, 461, 496, canvas.Translator.getText(173) + ":");
    this.header.hAlign = "left";
    this.header.field.x += 20;
    this.container = new canvas.px.Container();
    this.addChild(this.container);
    this.buyArea = new canvas.app.manor.view.controls.BuyArea();
    this.sellArea = new canvas.app.manor.view.controls.SellArea();
    this.panel = new canvas.app.manor.view.controls.elements.Panels([this.buyArea, this.sellArea], ["buy", "sell"], [canvas.Translator.getText(174), canvas.Translator.getText(175)], null, null, 100);
    this.panel.setSize(415, 440);
    this.container.addChild(this.panel);
    this.panel.position.set(22, 10);
    if (canvas.app.manor.model.mapMode) {
        this.position.set(30, 70);
    }
    canvas.EventManager.addEventListener(canvas.app.manor.Event.PANELS_PATH, this.panel, this.pathHandler, this);
};
canvas.app.manor.view.controls.MarketWin.prototype = Object.create(canvas.app.manor.view.WindowManorBase.prototype);
canvas.app.manor.view.controls.MarketWin.prototype.show = function (event) {
    canvas.app.manor.view.WindowManorBase.prototype.show.call(this, event);
    this.panel.path = "buy";
    this.sellArea.input.input = canvas.app.manor.view.input;
    this.sellArea.input.input.text = "10";
};
canvas.app.manor.view.controls.MarketWin.prototype.hide = function (event) {
    canvas.app.manor.view.WindowManorBase.prototype.hide.call(this, event);
    this.sellArea.input.input = null;
};
canvas.app.manor.view.controls.MarketWin.prototype.activate = function (event) {
    if (this.panel.path == "sell") {
        this.sellArea.input.input = canvas.app.manor.view.input;
    }
    canvas.app.manor.view.WindowManorBase.prototype.activate.call(this, event);
};
canvas.app.manor.view.controls.MarketWin.prototype.deactivate = function (event) {
    this.sellArea.input.input = null;
    canvas.app.manor.view.WindowManorBase.prototype.deactivate.call(this, event);
};
canvas.app.manor.view.controls.MarketWin.prototype.pathHandler = function (event) {
    switch (this.panel.path) {
        case "buy":
            canvas.EventManager.dispatchEvent(canvas.app.manor.Event.LOAD_SELL_REQUESTS);
            this.sellArea.input.input = null;
            break;
        case "sell":
            canvas.EventManager.dispatchEvent(canvas.app.manor.Event.LOAD_SELL_REQUESTS2);
            this.sellArea.input.input = canvas.app.manor.view.input;
            break;
    }
};
canvas.app.manor.view.controls.Menu = function (show) {
    this._showed = true;
    Object.defineProperty(this, "showed", {
        get: function () {
            return this._showed;
        },
        set: function (value) {
            this._showed = value;
            this.updatePos();
        },
    });
    canvas.px.Container.call(this);
    if (show == undefined || isNaN(show)) show = true;
    this._width = 250;
    this.container = this.addChild(new canvas.px.Container());
    this.container.position.set(-17, 0);
    this.button = this.addChild(new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "panel_button_back")));
    this.button.position.set(this._width - 35, 80);
    this.arrow = this.button.sprite.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "panel_button_arrow")));
    this.arrow.position.set(14, 21);
    this.hint = new canvas.app.view.MappingHint();
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.HINT_ADD, null, { target: this.button, params: new canvas.utils.HintParams(this.hint) });
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.button, this.buttonClickHandler, this);
    this.back = this.container.addChild(new canvas.px.RoundRect(0, 0.5, this._width, 200, 5, 5));
    this.msk = this.addChild(new canvas.px.Mask(this.back.width, this.back.height));
    this.msk.position.set(this.container.x, this.container.y);
    this.container.mask = this.msk;
    this.list = this.container.addChild(new canvas.ui.List(canvas.ui.ListType.VERTICAL, 1));
    this.list.position.set(6, 10);
    this.list._paddingV = 0;
    var minus = new canvas.px.Sprite(canvas.px.TextureEmpty);
    var plus = new canvas.px.Sprite(canvas.px.TextureEmpty);
    var drag = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "menu_scroll_drag"));
    drag.setSize = function () {};
    var scroll = new canvas.ui.Scroll(canvas.ui.ScrollType.VERTICAL, minus, plus, new canvas.px.Mask(6, 100, 0, 0.6), drag, this);
    scroll.padding = 13;
    scroll.backPadding = 20;
    scroll.step = 30;
    scroll.setSize(5);
    this.list.scrollPadding = -20;
    this.list.scrollMaxAdd = 10;
    this.list.scroll = scroll;
    this.showed = show;
    this.container.x = this.targetPos;
};
canvas.app.manor.view.controls.Menu.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.manor.view.controls.Menu.prototype.updatePos = function () {
    if (!this.button) return;
    if (this.showed) {
        this.addChildAt(this.msk, 0);
        this.addChildAt(this.container, 0);
        this.arrow.scale.x = 1;
        this.arrow.x = 14;
        this.hint.update(canvas.Translator.getText(188));
        this.targetPos = -15;
    } else {
        this.arrow.scale.x = -1;
        this.arrow.x = 29;
        this.hint.update(canvas.Translator.getText(189));
        this.targetPos = this._width;
    }
    canvas.EventManager.addEventListener(canvas.app.manor.Event.ENTER_FRAME, null, this.frameHandler, this);
};
canvas.app.manor.view.controls.Menu.prototype.update = function (titles, links, event) {
    if (event == undefined) event = canvas.app.manor.Event.SELECT_BUILDING;
    this.list.clear(false);
    var i,
        item,
        renderer,
        len = titles.length;
    for (i = 0; i < len; i++) {
        renderer = new canvas.app.manor.view.MenuItemRenderer({ title: titles[i], link: links[i].toString(), event: event });
        this.list.add(renderer, false);
    }
    this.list.update();
};
canvas.app.manor.view.controls.Menu.prototype.resize = function () {
    var h = canvas.app.manor.model.height;
    this.list.setSize(this._width, h - 80);
    this.back.h = this.list.container.height + 18;
    this.msk.setSize(-1, this.back.h);
    this.button.y = Math.round(this.back.h * 0.5) - 40;
};
canvas.app.manor.view.controls.Menu.prototype.buttonClickHandler = function () {
    this.showed = !this.showed;
    canvas.app.manor.model.localStorage.set("menuOpened", this.showed ? "1" : "0");
};
canvas.app.manor.view.controls.Menu.prototype.frameHandler = function () {
    if (this.container.x != this.targetPos) {
        if (this.container.x < this.targetPos) {
            this.container.x = Math.min(this.container.x + 30, this.targetPos);
        } else {
            this.container.x = Math.max(this.container.x - 30, this.targetPos);
        }
    } else {
        canvas.EventManager.removeEventListener(canvas.app.manor.Event.ENTER_FRAME, null, this.frameHandler, this);
        if (!this.showed) {
            this.removeIfExist(this.container);
            this.removeIfExist(this.msk);
        }
    }
};
canvas.app.manor.view.controls.MessageWindow = function () {
    canvas.app.manor.view.WindowManorBase.call(this, 327, 166);
    this.messageField = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_12, 7026733, 250, 70, "center", "middle");
    this.messageField.position.set(40, 40);
    this.addChild(this.messageField);
    this.okButton = new canvas.app.view.MainButton();
    this.okButton.setTitle(canvas.Translator.getText(2018));
    this.okButton.setSize(120);
    this.okButton.position.set(Math.round(this.width * 0.5 - this.okButton.width * 0.5), 105);
    this.addChild(this.okButton);
};
canvas.app.manor.view.controls.MessageWindow.prototype = Object.create(canvas.app.manor.view.WindowManorBase.prototype);
canvas.app.manor.view.controls.MessageWindow.prototype.clickHandler = function (mouseData) {
    if (canvas.Functions.findParent(this.okButton, mouseData.target)) {
        canvas.EventManager.dispatchEvent(canvas.px.WindowEvent.EVENT_CLOSE, this);
    }
    canvas.px.Window.prototype.clickHandler.call(this, mouseData);
};
canvas.app.manor.view.controls.MessageWindow.prototype.init = function (title, okText) {
    if (okText != undefined) this.okButton.setTitle(okText);
    this.messageField.text = title;
};
canvas.app.manor.view.controls.MyRequests = function () {
    canvas.px.Container.call(this);
    this.container = new canvas.px.Container();
    this.listContainer = new canvas.px.Container();
    this.addChild(this.container);
    this.container.addChild(this.listContainer);
    this.listContainer.position.set(20, 64);
    this.fieldTitle = new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_11, canvas.Const.FONT_TAHOMA_11_BOLD, 7092753, 400, 18, "center");
    this.fieldTitle.position.set(6, 17);
    this.container.addChild(this.fieldTitle);
    var t = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11, 7092753, 73, 18, "center");
    t.position.set(9, 39);
    t.text = canvas.Translator.getText(106);
    this.container.addChild(t);
    t = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11, 7092753, 65, 18, "left");
    t.position.set(174, 39);
    t.text = canvas.Translator.getText(162);
    this.container.addChild(t);
    t = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11, 7092753, 94, 18, "center");
    t.position.set(230, 39);
    t.text = canvas.Translator.getText(107);
    this.container.addChild(t);
    t = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11, 7092753, 65, 18, "center");
    t.position.set(300, 39);
    t.text = canvas.Translator.getText(155);
    this.container.addChild(t);
    this.list = this.container.addChild(new canvas.ui.List(canvas.ui.ListType.VERTICAL, 1));
    this.list.position.set(20, 60);
    this.list.setSize(380, 330);
    this.createButton = new canvas.app.view.MainButton();
    this.createButton.setTitle(canvas.Translator.getText(163));
    this.createButton.setSize(180);
    this.container.addChild(this.createButton);
    this.createButton.position.set(18, 390);
    this.cancelButton = new canvas.app.view.MainButton();
    this.cancelButton.setTitle(canvas.Translator.getText(156));
    this.cancelButton.setSize(180);
    this.container.addChild(this.cancelButton);
    this.cancelButton.position.set(218, 390);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.cancelButton, this.cancelClickHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.createButton, this.createClickHandler, this);
};
canvas.app.manor.view.controls.MyRequests.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.manor.view.controls.MyRequests.prototype.update = function () {
    var model = canvas.app.manor.model;
    this.list.clear(false);
    var workRequest, userBuilding, building;
    var i,
        len = model.user.requests.length;
    for (i = 0; i < len; i++) {
        workRequest = model.user.requests[i];
        userBuilding = model.user.buildings[workRequest.building];
        if (!userBuilding) continue;
        building = model.buildings[userBuilding.name][userBuilding.level + 1];
        if (!building) continue;
        this.list.add(new canvas.app.manor.view.controls.elements.MyRequestLine(workRequest), false);
    }
    this.list.update();
};
canvas.app.manor.view.controls.MyRequests.prototype.cancelClickHandler = function (event) {
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.LOAD_CONFIG);
};
canvas.app.manor.view.controls.MyRequests.prototype.createClickHandler = function (event) {
    var model = canvas.app.manor.model;
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.OPEN_HIRE, null, model.selectedBuilding == "" ? {} : { params: model.selectedBuilding });
};
canvas.app.manor.view.controls.PortalResetWin = function () {
    canvas.app.manor.view.WindowManorBase.call(this, 327, 307, canvas.Translator.getText(263));
    this.container = this.addChild(new canvas.px.Container());
    this.titleField = this.container.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_12_BOLD, 7092268, 300, 20, "center"));
    this.titleField.text = canvas.Translator.getText(260);
    this.titleField.position.set(10, 40);
    this.cooldown = this.container.addChild(new canvas.app.manor.view.controls.elements.LabourGreen(200));
    this.cooldown.position.set(65, 60);
    this.buyButton = this.container.addChild(new canvas.app.manor.view.controls.elements.ButtonImage(canvas.Translator.getText(266), 6));
    this.buyButton.position.set(20, 250);
    this.goButton = this.container.addChild(new canvas.app.manor.view.controls.elements.ButtonImage(canvas.Translator.getText(267), 7));
    this.goButton.position.set(160, 250);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.buyButton, this.buyClickHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.goButton, this.goClickHandler, this);
};
canvas.app.manor.view.controls.PortalResetWin.prototype = Object.create(canvas.app.manor.view.WindowManorBase.prototype);
canvas.app.manor.view.controls.PortalResetWin.prototype.update = function () {
    var Conf = canvas.app.manor.model;
    var cooldownTime = Conf.portalRebindTime - Math.round(Date.now() * 0.001);
    this.cooldown.setLabour(cooldownTime, Conf.portalRebindCooldown);
    this.cooldown.setTitle(canvas.Functions.formatDate(cooldownTime * 1e3, "00", 2, true));
    if (this.cementInput) this.cementInput.destroy();
    this.cementInput = this.container.addChild(new canvas.app.manor.view.controls.elements.CementInput(Conf.portalResetItem));
    this.cementInput.position.set(80, 110);
    this.cementInput.update(1, Conf.portalResetItem.count2);
    this.goButton.enabled = Conf.portalResetItem.count2 > 0;
};
canvas.app.manor.view.controls.PortalResetWin.prototype.updateLight = function () {
    this.cementInput.update();
};
canvas.app.manor.view.controls.PortalResetWin.prototype.buyClickHandler = function () {
    canvas.Functions.navigateToURL("area_store.php?source=premium&mode=store", "_self");
};
canvas.app.manor.view.controls.PortalResetWin.prototype.goClickHandler = function () {
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.USE_PORTAL_ACTION, null, { object: { building_action: "reset_bind_timer" } });
    this.close();
};
canvas.app.manor.view.controls.SellArea = function () {
    canvas.px.Container.call(this);
    this.container = new canvas.px.Container();
    this.addChild(this.container);
    this.listContainer = new canvas.px.Container();
    this.container.addChild(this.listContainer);
    this.listContainer.position.set(10, 204);
    this.fieldTitle = new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_11, canvas.Const.FONT_TAHOMA_11_BOLD, 7092753, 235, 48, "left");
    this.container.addChild(this.fieldTitle);
    this.fieldTitle.position.set(172, 31);
    this.label0 = new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_11, canvas.Const.FONT_TAHOMA_11_BOLD, 7092753, 70, 18, "right");
    this.container.addChild(this.label0);
    this.label0.position.set(7, 39);
    this.label0.text = "<b>" + canvas.Translator.getText(121) + ":</b> <img src='money_gold' atlas='ui' yOffset='1'/>";
    var t = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD, 7092753, 403, 18, "center");
    this.container.addChild(t);
    t.position.set(5, 152);
    t.text = canvas.Translator.getText(122) + ":";
    t = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11, 7092753, 65, 18, "left");
    this.container.addChild(t);
    t.position.set(65, 179);
    t.text = canvas.Translator.getText(123);
    t = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11, 7092753, 65, 18, "center");
    this.container.addChild(t);
    t.position.set(313, 179);
    t.text = canvas.Translator.getText(121);
    var sprite = new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "line_0"), 1, 0, 1, 0);
    this.container.addChild(sprite);
    sprite.width = 381;
    sprite.position.set(15, 142);
    this.pager = new canvas.app.manor.view.controls.elements.Pager();
    this.container.addChild(this.pager);
    this.pager.position.set(207, 385);
    this.pager.visible = false;
    canvas.EventManager.addEventListener(canvas.ui.PagerEvent.EVENT_CHANGE, this.pager, this._pagerHandler, this);
    var i;
    var tmpY = 0;
    var line;
    var radioArray = [];
    for (i = 0; i < canvas.app.manor.Const.REQUESTS_ON_PAGE_SHORT; i++) {
        line = new canvas.app.manor.view.controls.elements.WorkRequestLine(i, radioArray, "money_gold");
        line.visible = false;
        radioArray.push(line.check);
        this.listContainer.addChild(line);
        line.y = tmpY;
        tmpY += 29;
        line.check.visible = false;
        canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_SELECT, line.check, this._itemClickHandler, this);
    }
    this.input = new canvas.app.manor.view.controls.elements.Input(canvas.app.manor.view.input, true, 45);
    this.container.addChild(this.input);
    this.input.onlyNumbers = true;
    this.input.maxChars = 10;
    this.input.text = "10";
    this.sellButton = new canvas.app.view.MainButton();
    this.sellButton.setTitle(canvas.Translator.getText(124));
    this.sellButton.setSize(180);
    this.container.addChild(this.sellButton);
    this.sellButton.position.set(18, 90);
    this.cancelButton = new canvas.app.view.MainButton();
    this.cancelButton.setTitle(canvas.Translator.getText(2019));
    this.cancelButton.setSize(180);
    this.container.addChild(this.cancelButton);
    this.cancelButton.position.set(218, 90);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.cancelButton, this._cancelClickHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.sellButton, this._sellClickHandler, this);
    this.hideSellView();
};
canvas.app.manor.view.controls.SellArea.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.manor.view.controls.SellArea.prototype._pagerHandler = function (event) {
    this.requestCurPage = this.pager.currentPage;
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.LOAD_SELL_REQUESTS2);
};
canvas.app.manor.view.controls.SellArea.prototype._updateList = function () {
    var i;
    var sellRequest;
    var sprite;
    var j = 0;
    for (i = 0; i < canvas.app.manor.Const.REQUESTS_ON_PAGE_SHORT; i++) {
        sellRequest = this._requests[i];
        sprite = this.listContainer.getChildAt(j);
        sprite.check.checked = j == 0;
        sprite.data = sellRequest;
        if (sellRequest != null) {
            sprite.visible = true;
        } else {
            sprite.visible = false;
        }
        j++;
    }
};
canvas.app.manor.view.controls.SellArea.prototype.update = function (requests, requestNumPages, area, location, canSell) {
    if (canSell == undefined) canSell = true;
    this._requests = requests;
    this._requestNumPages = requestNumPages;
    if (this._requestNumPages > 1) {
        this.pager.init(this._requestNumPages * canvas.app.manor.Const.REQUESTS_ON_PAGE_SHORT);
        this.pager.currentPage = this.requestCurPage;
        this.pager.visible = true;
    } else {
        this.pager.visible = false;
    }
    this.fieldTitle.text = "<b>" + canvas.Translator.getText(127) + ":</b> " + area + "<br/><b>" + canvas.Translator.getText(128) + ":</b> " + location;
    this._updateList();
    if (canSell) {
        this.showSellView();
    } else {
        this.hideSellView();
    }
};
canvas.app.manor.view.controls.SellArea.prototype.showSellView = function () {
    this.label0.visible = true;
    this.input.visible = true;
    this.sellButton.visible = true;
    this.cancelButton.visible = true;
    this.input.position.set(86, 36);
};
canvas.app.manor.view.controls.SellArea.prototype.hideSellView = function () {
    this.label0.visible = false;
    this.input.visible = false;
    this.sellButton.visible = false;
    this.cancelButton.visible = false;
    this.input.position.set(86, -2e3);
};
canvas.app.manor.view.controls.SellArea.prototype._cancelClickHandler = function (event) {
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.CLOSE_MARKET);
};
canvas.app.manor.view.controls.SellArea.prototype._sellClickHandler = function (event) {
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.OPEN_CONFIRM, null, { text: canvas.Translator.getText(126) + "?", event: { name: canvas.app.manor.Event.SELL_AREA } });
};
canvas.app.manor.view.controls.ThroneRoom = function () {
    canvas.app.manor.view.WindowManorBase.call(this, 1054, 356, canvas.Translator.getText(254));
    this.container = this.addChild(new canvas.px.Container());
    this.container.position.set(25, 35);
    this.back = this.container.addChild(new canvas.ui.Image());
    this.back.interactive = true;
    this.back.click = this.backClickHandler.bind(this);
    this.throneRoom = this.container.addChild(new canvas.app.manor.view.controls.throne.ThroneRoomView());
    this.viewButton = this.container.addChild(new canvas.app.view.MainButton());
    this.viewButton.setSize(200);
    this.viewButton.setTitle(canvas.Translator.getText(1500));
    this.viewButton.position.set(0, canvas.app.manor.Const.THRONE_ROOM_HEIGHT - 40);
    this.tabsPanel = new canvas.app.manor.view.controls.throne.ItemsWindow();
    var p = this.toGlobal(new canvas.px.Point(canvas.app.manor.Const.THRONE_ROOM_WIDTH - this.tabsPanel.width - 20, 20));
    this.tabsPanel.position.set(p.x, p.y);
    var msk = this.addChild(new canvas.px.Mask(canvas.app.manor.Const.THRONE_ROOM_WIDTH, canvas.app.manor.Const.THRONE_ROOM_HEIGHT));
    msk.position.set(this.container.x, this.container.y);
    this.container.mask = msk;
    if (canvas.app.manor.model.throneRoomData.guestMode) {
        this.container.interactiveChildren = false;
    }
    this.preloader = this.addChild(new canvas.px.MovieClip(canvas.Config.effectsPath + "preloader"));
    this.preloader.gotoAndStop(1);
    this.preloader.position.set(Math.round(canvas.app.manor.Const.THRONE_ROOM_WIDTH * 0.5) + 25, Math.round(canvas.app.manor.Const.THRONE_ROOM_HEIGHT * 0.5) + 25);
    this.throneRoom.interactive = true;
    this.throneRoom.click = this.throneClickHandler.bind(this);
    this.container.interactive = true;
    this.container.click = this.containerClickHandler.bind(this);
    canvas.EventManager.addEventListener(canvas.app.manor.Event.PANELS_PATH, this.tabsPanel.panels, this.pathHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.viewButton, this.viewClickHandler, this);
};
canvas.app.manor.view.controls.ThroneRoom.prototype = Object.create(canvas.app.manor.view.WindowManorBase.prototype);
canvas.app.manor.view.controls.ThroneRoom.prototype.update = function () {
    var Conf = canvas.app.manor.model.throneRoomData;
    if (!Conf.userData.items) return;
    this.back.setImage(Conf.userData.throneRoomBack);
    var roomItems = Conf.userData.items.filter(Conf.filterActiveItems);
    var str;
    var i;
    var len;
    var itemData;
    var typePrototype = canvas.data.manor.throne.Prototypes.getTypePrototype(Conf.currentType);
    var items = Conf.userData.items.filter(Conf.filterTypeItems.bind(Conf));
    var shopItems = Conf.shopItems.filter(Conf.filterTypeItems.bind(Conf));
    var types = new Array();
    len = roomItems.length;
    for (i = 0; i < len; i++) {
        itemData = roomItems[i];
        types.push(itemData.proto.type);
    }
    for (str in canvas.data.manor.throne.Prototypes.typePrototypes) {
        if (types.indexOf(parseInt(str)) < 0) {
            itemData = new canvas.data.manor.throne.ItemData(0);
            itemData.id = parseInt(str);
            roomItems.push(itemData);
        }
    }
    if (Conf.watchMode) {
        canvas.utils.WindowsManager.instance.closeWindow(this.tabsPanel);
        this.viewButton.visible = false;
        this.throneRoom.bMode = false;
    } else {
        this.throneRoom.bMode = true;
        if (Conf.currentType > 0 && (!typePrototype || !typePrototype.disabled)) {
            canvas.utils.WindowsManager.instance.openWindow(this.tabsPanel, false, false, false);
            if (this.tabsPanel.panels.path == "shop") {
                this.tabsPanel.data = shopItems;
            } else {
                this.tabsPanel.data = items;
            }
        } else {
            canvas.utils.WindowsManager.instance.closeWindow(this.tabsPanel);
        }
        this.viewButton.visible = true;
    }
    if (Conf.userData.redressItemID > 0) {
        var redressItemData = new canvas.data.manor.throne.ItemData(Conf.userData.redressItemID);
        len = roomItems.length;
        if (len)
            for (i = 0; i < len; i++) {
                itemData = roomItems[i];
                if (itemData.proto.type == redressItemData.proto.type || (!itemData.artikulID && itemData.id == redressItemData.proto.type)) {
                    roomItems.splice(i, 1);
                    break;
                }
            }
        roomItems.push(redressItemData);
    }
    roomItems.sort(Conf.compareItemDataIndex);
    this.throneRoom.data = roomItems;
    if (this.preloader) {
        canvas.EventManager.addEventListener(canvas.ResourceLoader.EVENT_PROGRESS, null, this.progressHandler, this);
        canvas.EventManager.addEventListener(canvas.ResourceLoader.EVENT_COMPLETE, null, this.completeHandler, this);
    }
};
canvas.app.manor.view.controls.ThroneRoom.prototype.progressHandler = function (e) {
    this.preloader.gotoAndStop(Math.round(e.params.progress));
};
canvas.app.manor.view.controls.ThroneRoom.prototype.completeHandler = function () {
    canvas.EventManager.removeEventListener(canvas.ResourceLoader.EVENT_PROGRESS, null, this.progressHandler, this);
    canvas.EventManager.removeEventListener(canvas.ResourceLoader.EVENT_COMPLETE, null, this.completeHandler, this);
    this.preloader.destroy();
    this.preloader = null;
};
canvas.app.manor.view.controls.ThroneRoom.prototype.throneClickHandler = function (event) {
    var throneRoomRenderer = canvas.Functions.findParentByName("item", event.target);
    if (throneRoomRenderer) {
        canvas.app.manor.model.throneRoomData.currentType = parseInt(throneRoomRenderer.data.artikulID > 0 ? throneRoomRenderer.data.proto.type : throneRoomRenderer.data.id);
        this.update();
    }
};
canvas.app.manor.view.controls.ThroneRoom.prototype.pathHandler = function () {
    if (this.tabsPanel.panels.path != "shop") canvas.app.manor.model.throneRoomData.userData.redressItemID = 0;
    this.update();
};
canvas.app.manor.view.controls.ThroneRoom.prototype.updateTime = function () {
    this.tabsPanel.updateTime();
    if (canvas.app.manor.model.throneRoomData.testExpiredItems()) this.update();
};
canvas.app.manor.view.controls.ThroneRoom.prototype.containerClickHandler = function (e) {
    var Conf = canvas.app.manor.model.throneRoomData;
    if (Conf.watchMode && !Conf.guestMode) {
        Conf.watchMode = false;
        this.update();
    }
};
canvas.app.manor.view.controls.ThroneRoom.prototype.backClickHandler = function (e) {
    var Conf = canvas.app.manor.model.throneRoomData;
    if (!Conf.watchMode && !Conf.guestMode) {
        Conf.currentType = 0;
        this.update();
    }
};
canvas.app.manor.view.controls.ThroneRoom.prototype.viewClickHandler = function (e) {
    e.params.stopPropagation();
    var Conf = canvas.app.manor.model.throneRoomData;
    Conf.watchMode = true;
    Conf.currentType = 0;
    this.update();
};
canvas.app.manor.view.controls.ThroneRoom.prototype.show = function () {
    canvas.app.manor.view.WindowManorBase.prototype.show.call(this);
    this.throneRoom.stopAndPlay();
};
canvas.app.manor.view.controls.ThroneRoom.prototype.hide = function () {
    canvas.utils.WindowsManager.instance.closeAllWindows();
    canvas.app.manor.model.throneRoomData.currentType = 0;
    this.update();
    this.throneRoom.stopAndPlay(true);
};
canvas.app.manor.view.controls.ThroneRoom.prototype.activate = function () {
    if (this.tabsPanel.parent) {
        this.tabsPanel.parent.addChild(this.tabsPanel);
    }
};
canvas.app.manor.view.controls.Upgrade = function () {
    canvas.px.Container.call(this);
    this.container = this.addChild(new canvas.px.Container());
    this.fieldTopTitle = this.container.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_12_BOLD, 7026733, 394, 18, "center"));
    this.fieldTopTitle.position.set(12, 14);
    this.fieldBack = this.container.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11, 7026733, 138, 18, "left"));
    this.fieldBack.position.set(412, 90);
    this.fieldBack.text = canvas.Translator.getText(233);
    this.requiresField = this.container.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_12, 7026733, 394, 18, "center"));
    this.requiresField.position.set(10, 67);
    this.requiresField.text = canvas.Translator.getText(144) + ":";
    this.labourInput = this.container.addChild(new canvas.app.manor.view.controls.elements.LabourInput());
    this.labourInput.position.set(23, 90);
    this.cementInput = this.container.addChild(new canvas.app.manor.view.controls.elements.CementInput());
    this.cementInput.position.set(220, 90);
    var params = new Object();
    params.back = "labour3_progress_back";
    params.front = "labour3_progress";
    params.font = canvas.Const.FONT_TAHOMA_10;
    params.color = 6499081;
    params.pos = new canvas.px.Point(16, 9);
    params.textPos = new canvas.px.Point(0, 0);
    this.labour = this.container.addChild(new canvas.app.manor.view.controls.elements.Labour(canvas.Translator.getText(176), params));
    this.labour.position.set(28, 30);
    this.labour.setLabour(0, 0);
    var tmpX = 0;
    this.hireButton = this.container.addChild(new canvas.app.manor.view.controls.elements.ButtonImage(canvas.Translator.getText(177), 1));
    this.hireButton.position.set(tmpX, 220);
    tmpX += Math.round(this.hireButton.width - 20);
    this.buyCementButton = this.container.addChild(new canvas.app.manor.view.controls.elements.ButtonImage(canvas.Translator.getText(109), 2));
    this.buyCementButton.position.set(tmpX, 220);
    tmpX += Math.round(this.buyCementButton.width - 20);
    this.buildButton = this.container.addChild(new canvas.app.manor.view.controls.elements.ButtonImage(canvas.Translator.getText(178), 3));
    this.buildButton.position.set(tmpX, 220);
    tmpX += Math.round(this.buildButton.width - 20);
    this.destroyButton = this.container.addChild(new canvas.app.manor.view.controls.elements.ButtonImage(canvas.Translator.getText(228), 5));
    this.destroyButton.position.set(tmpX, 220);
    this.backButton = this.addChild(new canvas.app.view.MainButton());
    this.backButton.setTitle(canvas.Translator.getText(232));
    this.backButton.setSize(120);
    this.backButton.position.set(410, 30);
    canvas.EventManager.addEventListener(canvas.ui.InputEvent.EVENT_CHANGE, this.labourInput, this.changeHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.buildButton, this.buildClickHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.hireButton, this.hireClickHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.buyCementButton, this.buyClickHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.destroyButton, this.destroyClickHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.backButton, this.backClickHandler, this);
};
canvas.app.manor.view.controls.Upgrade.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.manor.view.controls.Upgrade.prototype.setTitlePercent = function (value) {
    this.fieldTopTitle.text = canvas.Translator.getText(179) + " " + value + "%:";
};
canvas.app.manor.view.controls.Upgrade.prototype.changeHandler = function () {
    this.cementInput.update(this.labourInput.input.text);
    this.testRequires();
};
canvas.app.manor.view.controls.Upgrade.prototype.buildClickHandler = function () {
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.BUILD);
};
canvas.app.manor.view.controls.Upgrade.prototype.hireClickHandler = function () {
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.OPEN_LABOUR);
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.OPEN_HIRE, null, canvas.app.manor.model.selectedBuilding == "" ? {} : { params: canvas.app.manor.model.selectedBuilding });
};
canvas.app.manor.view.controls.Upgrade.prototype.buyClickHandler = function () {
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.OPEN_CEMENT);
};
canvas.app.manor.view.controls.Upgrade.prototype.destroyClickHandler = function () {
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.OPEN_CONFIRM, null, { params: canvas.Translator.getText(229) + "?", object: { name: canvas.app.manor.Event.DESTROY_BUILDING } });
};
canvas.app.manor.view.controls.Upgrade.prototype.backClickHandler = function () {
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.BACK_TO_CHOOSE_BUILDING);
};
canvas.app.manor.view.controls.Upgrade.prototype.testRequires = function () {
    this.buildButton.enabled = this.labourInput.testRequires() && this.cementInput.testRequires();
};
canvas.app.manor.view.controls.Upgrade.prototype.clear = function () {
    this.labourInput.clear();
    this.cementInput.clear();
};
canvas.app.manor.view.controls.UseExp = function () {
    canvas.app.manor.view.UseBuilding.call(this);
    this.title = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_12, 7026733, 391, 18, "center"));
    this.title.position.set(12, 19);
    this.title.text = canvas.Translator.getText(129);
    this.description = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_12, 7026733, 360, 56, "left"));
    this.description.position.set(27, 155);
    this.description.text = canvas.Translator.getText(132);
    this.leftLabel = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_12, 7026733, 100, 18, "right"));
    this.leftLabel.position.set(45, 108);
    this.leftLabel.text = canvas.Translator.getText(130);
    this.rightLabel = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_12, 7026733, 100, 18, "left"));
    this.rightLabel.position.set(265, 108);
    this.rightLabel.text = canvas.Translator.getText(131);
    this.exp = this.addChild(new canvas.app.manor.view.controls.elements.LabourGreen(360));
    this.exp.position.set(29, 40);
    this.exp.setLabour(0, 0);
    this.checker = this.addChild(new canvas.app.manor.view.controls.elements.Checker());
    this.checker.position.set(155, 110);
    this.checker.enabled = false;
    this.modeButton = this.addChild(new canvas.app.view.MainButton());
    this.modeButton.position.set(130, 220);
    this.modeButton.enabled = false;
    this.checkContainer = new canvas.px.Container();
    this.checkContainer.y = 190;
    this.checkContainer.interactiveChildren = false;
    this.radioArray = [];
    this.checkMoney = this.checkContainer.addChild(new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "check_0"), null, new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "check_0_checker")), this.radioArray));
    this.radioArray.push(this.checkMoney);
    this.checkMoney.position.set(70, 0);
    this.coins = this.checkMoney.sprite.addChild(new canvas.app.view.Money(null, canvas.Const.FONT_TAHOMA_11_BOLD, null, 80, null, null, null, false, 0, 0));
    this.coins.position.set(32, 8);
    this.checkMoney.checked = true;
    this.checkEnergy = this.checkContainer.addChild(new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "check_0"), null, new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "check_0_checker")), this.radioArray));
    this.radioArray.push(this.checkEnergy);
    this.checkEnergy.position.set(268, 0);
    this.energy = this.checkEnergy.sprite.addChild(new canvas.app.manor.view.controls.elements.Energy());
    this.energy.position.set(32, 8);
    this.orField = this.checkContainer.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_12, 7026733, 40, 18, "center"));
    this.orField.position.set(180, 8);
    this.orField.text = canvas.Translator.getText(206);
    canvas.EventManager.addEventListener(canvas.ui.Event.EVENT_CHANGE, this.checker, this.checkerHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.modeButton, this.clickHandler, this);
};
canvas.app.manor.view.controls.UseExp.prototype = Object.create(canvas.app.manor.view.UseBuilding.prototype);
canvas.app.manor.view.controls.UseExp.prototype.update = function () {
    canvas.app.manor.view.UseBuilding.prototype.update.call(this);
    var Conf = canvas.app.manor.model;
    this.update2(Conf.expCount, Conf.expMax, Conf.expDecrease, Conf.expUse, Conf.expCost);
};
canvas.app.manor.view.controls.UseExp.prototype.update2 = function (expCount, expMax, expDecrease, expUse, expCost) {
    this.exp.setLabour(expCount, expMax);
    this.checker.checked = expDecrease;
    if (expUse) {
        this.exp.filters = [];
        this.modeButton.setTitle(canvas.Translator.getText(133));
        this.removeIfExist(this.checkContainer);
        this.checker.enabled = true;
    } else {
        this.exp.filters = [canvas.Functions.getBlackAndWhite()];
        this.modeButton.setTitle(canvas.Translator.getText(115));
        this.addChild(this.checkContainer);
        this.checker.enabled = false;
    }
    this.coins.money = expCost * 100;
    this.energy.energy = Math.round(expCost / canvas.app.manor.Const.ENERGY_COURSE);
    this.coins.visible = !expUse;
    this.modeButton.enabled = true;
    this.checkContainer.interactiveChildren = true;
};
canvas.app.manor.view.controls.UseExp.prototype.clickHandler = function () {
    var Conf = canvas.app.manor.model;
    this.clickAction(canvas.app.manor.Event.USE_EXP_ACTION, Conf.expUse, Conf.expCost);
};
canvas.app.manor.view.controls.UseExp.prototype.clickAction = function (eventName, expUse, expCost) {
    var str, obj;
    if (expUse) {
        canvas.EventManager.dispatchEvent(canvas.app.manor.Event.OPEN_CONFIRM, null, { params: canvas.Translator.getText(134), object: { name: eventName, params: { params: "store" } } });
    } else {
        if (this.checkEnergy.checked) {
            str = " <b>" + Math.round(expCost / canvas.app.manor.Const.ENERGY_COURSE) + "</b> <img src='energy_icon' yOffset='2' atlas='ui'/>";
        } else {
            obj = canvas.Functions.getMoneyForText(expCost);
            str = " <b>" + obj.value + "</b> <img src='" + obj.icon + "' yOffset='2' atlas='ui'/>";
        }
        canvas.EventManager.dispatchEvent(canvas.app.manor.Event.OPEN_CONFIRM, null, { params: canvas.Translator.getText(135) + str, object: { name: eventName, params: { params: "use", flag: this.checkEnergy.checked } } });
    }
};
canvas.app.manor.view.controls.UseExp.prototype.checkerHandler = function () {
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.USE_EXP_ACTION, null, { params: "set_direction", flag: this.checker.checked });
};
canvas.app.manor.view.controls.UseExp2 = function () {
    canvas.app.manor.view.controls.UseExp.call(this);
    this.removeChild(this.checker);
    this.removeChild(this.leftLabel);
    this.removeChild(this.rightLabel);
};
canvas.app.manor.view.controls.UseExp2.prototype = Object.create(canvas.app.manor.view.controls.UseExp.prototype);
canvas.app.manor.view.controls.UseExp2.prototype.update = function () {
    canvas.app.manor.view.UseBuilding.prototype.update.call(this);
    var Conf = canvas.app.manor.model;
    this.update2(Conf.exp2Count, Conf.exp2Max, Conf.exp2Decrease, Conf.exp2Use, Conf.exp2Cost);
};
canvas.app.manor.view.controls.UseExp2.prototype.clickHandler = function () {
    var Conf = canvas.app.manor.model;
    this.clickAction(canvas.app.manor.Event.USE_EXP2_ACTION, Conf.exp2Use, Conf.exp2Cost);
};
canvas.app.manor.view.controls.UseExp2.prototype.checkerHandler = function () {
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.USE_EXP2_ACTION, null, { params: "set_direction", flag: this.checker.checked });
};
canvas.app.manor.view.controls.UseHospital = function () {
    canvas.app.manor.view.UseBuilding.call(this);
    var sprite = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "tab_single")));
    sprite.position.set(0, 97);
    this.pager = this.addChild(new canvas.app.manor.view.controls.elements.PagerSimple(canvas.ui.ScrollType.HORIZONTAL, false, false, null, true));
    this.pager.setSize(395, 20);
    this.pager.position.set(10, 40);
    var field = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_13, 7092753, 204, 20, "center"));
    field.position.set(107, 105);
    field.text = canvas.Translator.getText(180);
    this.list = this.addChild(new canvas.ui.List(canvas.ui.ListType.HORIZONTAL, 1));
    this.list.position.set(34, 15);
    this.list.setSize(350, 80);
    this.list._paddingH = -1;
    var item;
    for (var i = 0; i < canvas.app.manor.view.controls.UseHospital.ON_PAGE; i++) {
        item = new canvas.app.manor.view.controls.elements.Item();
        item.buttonMode = false;
        this.list.add(item, false);
    }
    this.list.update();
    this.targetItem = this.addChild(new canvas.app.manor.view.controls.elements.Item());
    this.targetItem.position.set(175, 135);
    this.getButton = this.addChild(new canvas.app.view.MainButton());
    this.getButton.position.set(137, 215);
    this.getButton.setTitle(canvas.Translator.getText(181));
    canvas.EventManager.addEventListener(canvas.ui.ScrollEvent.EVENT_SCROLL, this.pager, this.pagerHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.getButton, this.getClickHandler, this);
};
canvas.app.manor.view.controls.UseHospital.prototype = Object.create(canvas.app.manor.view.UseBuilding.prototype);
canvas.app.manor.view.controls.UseHospital.ON_PAGE = 5;
canvas.app.manor.view.controls.UseHospital.prototype.update = function () {
    canvas.app.manor.view.UseBuilding.prototype.update.call(this);
    var Conf = canvas.app.manor.model;
    this.pager.max = Conf.hospitalItems.length - canvas.app.manor.view.controls.UseHospital.ON_PAGE;
    this.pager.current = 0;
    this.pagerHandler();
    this.targetItem.data = Conf.hospitalBuffItem;
    this.getButton.enabled = Conf.hospitalBuffItem.time == 0;
};
canvas.app.manor.view.controls.UseHospital.prototype.pagerHandler = function () {
    var Conf = canvas.app.manor.model;
    var item,
        ditem,
        j = 0;
    for (var i = this.pager.current; i < this.pager.current + canvas.app.manor.view.controls.UseHospital.ON_PAGE; i++) {
        item = this.list.items[j++];
        ditem = Conf.hospitalItems[i];
        item.data = ditem;
    }
};
canvas.app.manor.view.controls.UseHospital.prototype.getClickHandler = function () {
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.USE_HOSPITAL_ACTION);
};
canvas.app.manor.view.controls.UseKennel = function () {
    canvas.app.manor.view.UseBuilding.call(this);
    this.defaultBot = parseInt(canvas.app.manor.model.localStorage.get("kennelBot"));
    var sprite = this.addChild(new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "tile_3"), 4, 4, 4, 4));
    sprite.width = 390;
    sprite.height = 80;
    sprite.position.set(12, 10);
    sprite = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "item_back")));
    sprite.position.set(21, 20);
    this.image = this.addChild(new canvas.ui.Image());
    this.image.position.set(21, 20);
    this.image.scale.set(1.2, 1.2);
    sprite = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "item_border")));
    sprite.position.set(15, 15);
    this.infoField = this.addChild(new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_12, canvas.Const.FONT_TAHOMA_12_BOLD, 4594699, 300, 40, "left"));
    this.infoField.position.set(92, 44);
    this.infoField._lineSpace = 5;
    this.leftButton = this.addChild(new canvas.app.view.MainButton(null, null, null, null, null, true));
    this.leftButton.setSize(170);
    this.leftButton.position.set(5, 100);
    this.rightButton = this.addChild(new canvas.app.view.MainButton(null, null, null, null, null, true));
    this.rightButton.setSize(240);
    this.rightButton.position.set(170, 100);
    this.leftText = this.addChild(new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_11, canvas.Const.FONT_TAHOMA_11_BOLD, 4594699, 170, 18, "center"));
    this.leftText.position.set(5, 137);
    this.rightText = this.addChild(new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_11, canvas.Const.FONT_TAHOMA_11_BOLD, 4594699, 170, 18, "center"));
    this.rightText.position.set(205, 137);
    this.rightText.text = canvas.Translator.getText(288);
    this.combo = this.addChild(new canvas.app.manor.view.controls.elements.Combo(305, 96));
    this.combo.position.set(90, 15);
    this.progress = this.addChild(new canvas.app.manor.view.controls.elements.LabourGreen(360));
    this.progress.position.set(27, 165);
    this.progress.removeChild(this.progress.tf);
    sprite = this.addChild(new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "tile_3"), 4, 4, 4, 4));
    sprite.width = 390;
    sprite.height = 30;
    sprite.position.set(12, 210);
    this.bottomText = this.addChild(new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_11, canvas.Const.FONT_TAHOMA_12_BOLD, 4594699, 370, 18, "left"));
    this.bottomText.position.set(20, 218);
    canvas.EventManager.addEventListener(canvas.ui.ComboBoxEvent.EVENT_SELECT, this.combo, this.comboSelectHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.leftButton, this.leftClickHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.rightButton, this.rightClickHandler, this);
};
canvas.app.manor.view.controls.UseKennel.prototype = Object.create(canvas.app.manor.view.UseBuilding.prototype);
canvas.app.manor.view.controls.UseKennel.prototype.comboSelectHandler = function () {
    var botId = parseInt(this.combo.selectedItem.id);
    if (botId > 0 && botId != this.defaultBot) {
        canvas.app.manor.model.localStorage.set("kennelBot", botId.toString());
        this.defaultBot = botId;
    }
    this.updateMonsterView();
};
canvas.app.manor.view.controls.UseKennel.prototype.updateMonsterView = function () {
    var Conf = canvas.app.manor.model;
    var bot = Conf.kennelData.getBotById(parseInt(this.combo.selectedItem.id));
    if (bot) {
        this.infoField.text = canvas.Translator.getText(286) + "<br/><img src='money_silver' yOffset='1' atlas='ui'/> <b>" + bot.moneyMin + "-" + bot.moneyMax + "</b>   " + canvas.Translator.getText(142) + ": <b>" + bot.exp + "</b>";
        this.image.setImage(bot.picture);
        this.leftButton.setTitle(canvas.Translator.getText(290) + "  <img src='money_silver' yOffset='2' xOffset='-2' atlas='ui'/>" + bot.price);
        this.rightButton.setTitle(
            canvas.Translator.getText(291) + "  <img src='money_silver' yOffset='2' xOffset='-2' atlas='ui'/>" + bot.price * 10 + "  <img src='money_crystal' yOffset='2' xOffset='-2' atlas='ui'/>" + Conf.kennelData.killPriceExt
        );
    } else {
        this.image.clear();
        this.infoField.text = canvas.Translator.getText(286) + "<br/><img src='money_silver' yOffset='1' atlas='ui'/> <b>0</b>   " + canvas.Translator.getText(142) + ": <b>0</b>";
    }
    this.updateButtonsEnabled();
};
canvas.app.manor.view.controls.UseKennel.prototype.updateButtonsEnabled = function () {
    if (!this.combo.selectedItem) return;
    var Conf = canvas.app.manor.model;
    var bot = Conf.kennelData.getBotById(parseInt(this.combo.selectedItem.id));
    var leftEnabled, rightEnabled;
    if (!this.lockBeforeUpdate && bot && Conf.kennelData.getFinishTime() < Conf.serverTime.getTime()) {
        leftEnabled = Conf.kennelData.canKillTotal && Conf.kennelData.canKill;
        rightEnabled = Conf.kennelData.canKillTotal > 9;
    } else {
        leftEnabled = false;
        rightEnabled = false;
    }
    if (this.leftButton.enabled != leftEnabled) this.leftButton.enabled = leftEnabled;
    if (this.rightButton.enabled != rightEnabled) this.rightButton.enabled = rightEnabled;
};
canvas.app.manor.view.controls.UseKennel.prototype.update = function () {
    canvas.app.manor.view.UseBuilding.prototype.update.call(this);
    var Conf = canvas.app.manor.model;
    this.lockBeforeUpdate = false;
    var values = new Array();
    var i,
        len = Conf.kennelData.bots.length;
    values.push({ id: 0, title: canvas.Translator.getText(289) });
    for (i = 0; i < len; i++) {
        values.push({ id: parseInt(Conf.kennelData.bots[i].id), title: Conf.kennelData.bots[i].nick });
    }
    this.combo.init(values);
    if (this.defaultBot) this.combo.setSelectedItem("id", this.defaultBot);
    this.leftText.text = canvas.Translator.getText(287) + ": <b><font color='#c20000'>" + Conf.kennelData.canKill + "</font></b>";
    this.bottomText.text = canvas.Translator.getText(507) + ": <b>" + Conf.kennelData.canKillTotal + "</b>";
    this.updateMonsterView();
    this.updateTime();
};
canvas.app.manor.view.controls.UseKennel.prototype.leftClickHandler = function () {
    var bot = canvas.app.manor.model.kennelData.getBotById(parseInt(this.combo.selectedItem.id));
    if (bot) {
        canvas.EventManager.dispatchEvent(canvas.app.manor.Event.USE_KENNEL_ACTION, null, { object: { building_action: "use", kennel_bot_id: bot.id, big_hunt: 0 } });
        this.lockBeforeUpdate = true;
        this.updateButtonsEnabled();
    }
};
canvas.app.manor.view.controls.UseKennel.prototype.rightClickHandler = function () {
    var bot = canvas.app.manor.model.kennelData.getBotById(parseInt(this.combo.selectedItem.id));
    if (bot) {
        canvas.EventManager.dispatchEvent(canvas.app.manor.Event.USE_KENNEL_ACTION, null, { object: { building_action: "use", kennel_bot_id: bot.id, big_hunt: 1 } });
        this.lockBeforeUpdate = true;
        this.updateButtonsEnabled();
    }
};
canvas.app.manor.view.controls.UseKennel.prototype.updateTime = function () {
    var Conf = canvas.app.manor.model;
    if (Conf.serverTime.getTime() > Conf.kennelData.getFinishTime()) {
        this.progress.setLabour(1, 1);
    } else {
        this.progress.setLabour(this.progress.progress == 1 ? 0 : Conf.serverTime.getTime() - Conf.kennelData.getStartTime(), Conf.kennelData.getFinishTime() - Conf.kennelData.getStartTime());
    }
    this.updateButtonsEnabled();
};
canvas.app.manor.view.controls.UseMine = function (make) {
    canvas.app.manor.view.UseBuilding.call(this);
    this.make = make;
    var sprite = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "tab_single")));
    sprite.position.set(0, 97);
    this.title = this.addChild(new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_13, canvas.Const.FONT_TAHOMA_13_BOLD, 7092753, 204, 20, "center"));
    this.title.position.set(107, 105);
    this.hint = new canvas.app.view.MappingHint();
    this.list = this.addChild(new canvas.ui.List(canvas.ui.ListType.VERTICAL, 1));
    this.list.position.set(20, 135);
    this.list.setSize(350, 120);
    this.list._paddingV = 0;
    var item;
    for (var i = 0; i < canvas.app.manor.view.controls.UseMine.ON_PAGE; i++) {
        item = new canvas.app.manor.view.controls.elements.TaskItem2();
        this.list.add(item, false);
    }
    this.list.update();
    this.pager = this.addChild(new canvas.app.manor.view.controls.elements.PagerSimple(canvas.ui.ScrollType.VERTICAL, true, true, this.list));
    this.pager.setSize(20, 120);
    this.pager.position.set(375, 135);
    sprite = this.addChild(new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "tile_3"), 4, 4, 4, 4));
    sprite.width = sprite.height = 85;
    sprite.position.set(this.make ? 20 : 100, 8);
    if (this.make) {
        this.arrow = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "big_arrow")));
        this.arrow.position.set(109, 3);
    }
    this.button = this.addChild(new canvas.app.view.MainButton(null, null, null, null, null, true));
    this.button.position.set(this.make ? 120 : 200, 30);
    this.button.setSize(170);
    this.item = this.addChild(new canvas.app.manor.view.controls.elements.Item(true));
    this.item.position.set(this.make ? 27 : 107, 15);
    if (this.make) {
        sprite = this.addChild(new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "tile_3"), 4, 4, 4, 4));
        sprite.width = sprite.height = 85;
        sprite.position.set(310, 8);
        this.item2 = this.addChild(new canvas.app.manor.view.controls.elements.Item(true));
        this.item2.position.set(317, 15);
        this.hint = new canvas.app.view.MappingHint(canvas.Translator.getText(238));
    }
    canvas.EventManager.addEventListener(canvas.ui.ScrollEvent.EVENT_SCROLL, this.pager, this.pagerHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.button, this.clickHandler, this);
};
canvas.app.manor.view.controls.UseMine.prototype = Object.create(canvas.app.manor.view.UseBuilding.prototype);
canvas.app.manor.view.controls.UseMine.ON_PAGE = 4;
canvas.app.manor.view.controls.UseMine.prototype.update = function () {
    canvas.app.manor.view.UseBuilding.prototype.update.call(this);
    var Conf = canvas.app.manor.model;
    this.updateRequests();
    this.pager.current = 0;
    this.item.data = Conf.craftData.item;
    if (this.item2 != null) this.item2.data = Conf.craftData.item2;
    this.button.setTitle(canvas.Translator.getText(this.make ? 236 : 235) + " " + Conf.craftData.price + " <img src='energy_icon' atlas='ui' yOffset='1'/>");
    this.button.enabled = Conf.craftData.requests.length + Conf.craftData.requestsCompleted.length < Conf.craftData.queueSizeMax;
    if (this.arrow != null) canvas.EventManager.dispatchEvent(canvas.app.manor.Event.HINT_REMOVE, null, { target: this.button });
    if (this.make && Conf.craftData.materialCount < Conf.craftData.item.count) {
        this.button.enabled = false;
        canvas.EventManager.dispatchEvent(canvas.app.manor.Event.HINT_ADD, null, { target: this.button, params: new canvas.utils.HintParams(this.hint) });
    }
    this.title.text = canvas.Translator.getText(191) + " <b>(" + Conf.craftData.requests.length.toString() + "/" + Conf.craftData.queueSizeMax.toString() + ")</b>";
};
canvas.app.manor.view.controls.UseMine.prototype.pagerHandler = function () {
    var Conf = canvas.app.manor.model;
    var i;
    var taskItem;
    var request;
    var j = 0;
    for (i = this.pager.current; i < this.pager.current + canvas.app.manor.view.controls.UseMine.ON_PAGE; i++) {
        taskItem = this.list.items[j++];
        request = Conf.craftData.requests[i];
        taskItem.name = (i + 1).toString();
        taskItem.data = request;
    }
};
canvas.app.manor.view.controls.UseMine.prototype.updateRequests = function () {
    var max = canvas.app.manor.model.craftData.requests.length - canvas.app.manor.view.controls.UseMine.ON_PAGE;
    if (max != this.pager.max) {
        this.pager.max = max;
    }
    this.pagerHandler();
};
canvas.app.manor.view.controls.UseMine.prototype.clickHandler = function () {
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.USE_MINE_ACTION, null, { object: { building_action: "produce" } });
};
canvas.app.manor.view.controls.UseMake = function () {
    canvas.app.manor.view.controls.UseMine.call(this, true);
};
canvas.app.manor.view.controls.UseMake.prototype = Object.create(canvas.app.manor.view.controls.UseMine.prototype);
canvas.app.manor.view.controls.UseMine2 = function () {
    canvas.app.manor.view.UseBuilding.call(this);
    this.pager = this.addChild(new canvas.app.manor.view.controls.elements.PagerSimple(canvas.ui.ScrollType.HORIZONTAL, false, false, null, true));
    this.pager.setSize(395, 20);
    this.pager.position.set(10, 40);
    this.list = this.addChild(new canvas.ui.List(canvas.ui.ListType.HORIZONTAL, 1));
    this.list.position.set(34, 15);
    this.list.setSize(350, 80);
    this.list._paddingH = -1;
    var item;
    for (var i = 0; i < canvas.app.manor.view.controls.UseMine2.ON_PAGE; i++) {
        item = new canvas.app.manor.view.controls.elements.Item(false);
        item.click = this.selectHandler.bind(this);
        item.buttonMode = false;
        this.list.add(item, false);
    }
    this.list.update();
    this.hint = new canvas.app.view.MappingHint(canvas.Translator.getText(192));
    canvas.EventManager.addEventListener(canvas.ui.ScrollEvent.EVENT_SCROLL, this.pager, this.pagerHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ListEvent.EVENT_SELECT, this.list, this.selectHandler, this);
};
canvas.app.manor.view.controls.UseMine2.prototype = Object.create(canvas.app.manor.view.UseBuilding.prototype);
canvas.app.manor.view.controls.UseMine2.ON_PAGE = 5;
canvas.app.manor.view.controls.UseMine2.prototype.update = function () {
    canvas.app.manor.view.UseBuilding.prototype.update.call(this);
    this.pager.max = canvas.app.manor.model.craftData.requestsCompleted.length - canvas.app.manor.view.controls.UseMine2.ON_PAGE;
    this.pager.current = 0;
    this.pagerHandler();
};
canvas.app.manor.view.controls.UseMine2.prototype.pagerHandler = function () {
    var Conf = canvas.app.manor.model;
    var i;
    var item;
    var dItem;
    var request;
    var recipe;
    var j = 0;
    for (i = this.pager.current; i < this.pager.current + canvas.app.manor.view.controls.UseMine2.ON_PAGE; i++) {
        item = this.list.items[j++];
        item.data = null;
        canvas.EventManager.dispatchEvent(canvas.app.manor.Event.HINT_REMOVE, null, { target: item });
        request = Conf.craftData.requestsCompleted[i];
        if (request != null) {
            dItem = new canvas.data.manor.DItem();
            dItem.image = request.item.image;
            dItem.title = request.item.title;
            dItem.count = request.item.count;
            dItem.id = request.id;
            item.data = dItem;
            canvas.EventManager.dispatchEvent(canvas.app.manor.Event.HINT_ADD, null, { target: item, params: new canvas.utils.HintParams(this.hint) });
        }
    }
};
canvas.app.manor.view.controls.UseMine2.prototype.selectHandler = function (event) {
    var item = event.currentTarget;
    if (item.data) {
        canvas.EventManager.dispatchEvent(canvas.app.manor.Event.USE_MINE_ACTION, null, { object: { building_action: "pick", craft_id: item.data.id } });
    }
};
canvas.app.manor.view.controls.UseObelisk = function () {
    canvas.app.manor.view.UseBuilding.call(this);
    this.title = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_12, 7026733, 391, 18, "center"));
    this.title.position.set(12, 19);
    this.title.text = canvas.Translator.getText(136);
    this.description = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_12, 7026733, 360, 56, "left"));
    this.description.position.set(27, 105);
    this.description.text = canvas.Translator.getText(137);
    this.valour = this.addChild(new canvas.app.manor.view.controls.elements.LabourGreen(360));
    this.valour.position.set(29, 40);
    this.valour.setLabour(0, 0);
    this.modeButton = this.addChild(new canvas.app.view.MainButton());
    this.modeButton.position.set(130, 190);
    this.modeButton.enabled = false;
    this.checkContainer = new canvas.px.Container();
    this.checkContainer.y = 160;
    this.checkContainer.interactiveChildren = false;
    this.radioArray = [];
    this.checkMoney = this.checkContainer.addChild(new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "check_0"), null, new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "check_0_checker")), this.radioArray));
    this.radioArray.push(this.checkMoney);
    this.checkMoney.position.set(110, 0);
    this.coins = this.checkMoney.sprite.addChild(new canvas.app.view.Money(null, canvas.Const.FONT_TAHOMA_11_BOLD, null, 40, null, null, null, false, 0, 0));
    this.coins.position.set(32, 8);
    this.checkMoney.checked = true;
    this.checkEnergy = this.checkContainer.addChild(new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "check_0"), null, new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "check_0_checker")), this.radioArray));
    this.radioArray.push(this.checkEnergy);
    this.checkEnergy.position.set(228, 0);
    this.energy = this.checkEnergy.sprite.addChild(new canvas.app.manor.view.controls.elements.Energy());
    this.energy.position.set(32, 8);
    this.orField = this.checkContainer.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_12, 7026733, 40, 18, "center"));
    this.orField.position.set(180, 8);
    this.orField.text = canvas.Translator.getText(206);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.modeButton, this.clickHandler, this);
};
canvas.app.manor.view.controls.UseObelisk.prototype = Object.create(canvas.app.manor.view.UseBuilding.prototype);
canvas.app.manor.view.controls.UseObelisk.prototype.update = function () {
    canvas.app.manor.view.UseBuilding.prototype.update.call(this);
    var Conf = canvas.app.manor.model;
    this.valour.setLabour(Conf.valourCount, Conf.valourMax);
    if (Conf.valourUse) {
        this.valour.filters = [];
        this.modeButton.setTitle(canvas.Translator.getText(133));
        this.removeIfExist(this.checkContainer);
    } else {
        this.valour.filters = [canvas.Functions.getBlackAndWhite()];
        this.modeButton.setTitle(canvas.Translator.getText(115));
        this.addChild(this.checkContainer);
    }
    this.coins.money = Conf.valourCost * 100;
    this.energy.energy = Math.round(Conf.valourCost / canvas.app.manor.Const.ENERGY_COURSE);
    this.coins.visible = !Conf.valourUse;
    this.modeButton.enabled = true;
    this.checkContainer.interactiveChildren = true;
};
canvas.app.manor.view.controls.UseObelisk.prototype.clickHandler = function () {
    var Conf = canvas.app.manor.model;
    var str, obj;
    if (Conf.valourUse) {
        canvas.EventManager.dispatchEvent(canvas.app.manor.Event.OPEN_CONFIRM, null, { params: canvas.Translator.getText(138), object: { name: canvas.app.manor.Event.USE_VALOUR_ACTION, params: { params: "store" } } });
    } else {
        if (this.checkEnergy.checked) {
            str = " <b>" + Math.round(Conf.valourCost / canvas.app.manor.Const.ENERGY_COURSE) + "</b> <img src='energy_icon' yOffset='2' atlas='ui'/>";
        } else {
            obj = canvas.Functions.getMoneyForText(Conf.valourCost);
            str = " <b>" + obj.value + "</b> <img src='" + obj.icon + "' yOffset='2' atlas='ui'/>";
        }
        canvas.EventManager.dispatchEvent(canvas.app.manor.Event.OPEN_CONFIRM, null, {
            params: canvas.Translator.getText(139) + str,
            object: { name: canvas.app.manor.Event.USE_VALOUR_ACTION, params: { params: "use", flag: this.checkEnergy.checked } },
        });
    }
};
canvas.app.manor.view.controls.UsePets = function () {
    this._curPage = 0;
    Object.defineProperty(this, "curPage", {
        get: function () {
            return this._curPage;
        },
        set: function (value) {
            this._curPage = value < 0 ? 0 : value >= this._numPages ? this._numPages - 1 : value;
            if (this._numPages < 2) {
                this.leftArrow.visible = this.rightArrow.visible = false;
            } else if (this._curPage == 0) {
                this.leftArrow.visible = false;
                this.rightArrow.visible = true;
            } else if (this._curPage == this._numPages - 1) {
                this.rightArrow.visible = false;
                this.leftArrow.visible = true;
            } else {
                this.leftArrow.visible = this.rightArrow.visible = true;
            }
            var i,
                j = 0;
            var petItem;
            for (i = this._curPage; i < this._curPage + canvas.app.manor.view.controls.UsePets.ON_PAGE; i++) {
                petItem = this.pets[j++];
                petItem.data = this.sortedPetsData[i];
                petItem.selector.visible = i == this._selectedPet;
                petItem.interactive = petItem.data != null;
            }
            this.testTraining();
        },
    });
    this._selectedPet = 0;
    Object.defineProperty(this, "selectedPet", {
        get: function () {
            return this._selectedPet;
        },
        set: function (value) {
            this._selectedPet = value;
            var pet;
            var i;
            var selectedData;
            for (i = 0; i < canvas.app.manor.view.controls.UsePets.ON_PAGE; i++) {
                pet = this.pets[i];
                pet.selector.visible = false;
                pet.interactive = pet.data != null;
            }
            canvas.EventManager.dispatchEvent(canvas.app.manor.Event.HINT_REMOVE, null, { target: this.trainButton });
            selectedData = this.sortedPetsData[this.selectedPet];
            pet = this.pets[this.selectedPet - this.curPage];
            if (selectedData) {
                this.titleField.text = selectedData.title + " [" + selectedData.level + "]";
                if (this.titleField.textWidth > 190) {
                    i = selectedData.title.length - 1;
                    while (this.titleField.textWidth > 190) {
                        this.titleField.text = selectedData.title.substr(0, --i) + "... [" + selectedData.level + "]";
                    }
                }
                this.exp.setLabour(selectedData.exp, selectedData.expUp);
                canvas.app.manor.model.selectedPet = selectedData.id;
                if (!this.isTrainingNow) this.trainButton.enabled = true;
                this.petView.update({ src: selectedData.swf });
                if (selectedData.error) {
                    this.hint.update(selectedData.error);
                    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.HINT_ADD, null, { target: this.trainButton, params: new canvas.utils.HintParams(this.hint) });
                    this.trainButton.enabled = false;
                }
                if (pet) {
                    pet.selector.visible = true;
                    pet.interactive = false;
                    this.list.container.setChildIndex(pet, this.list.container.numChildren - 1);
                }
            } else {
                this.exp.setLabour(0, 0);
                this.titleField.text = "";
                canvas.app.manor.model.selectedPet = "";
                this.trainButton.enabled = false;
                this.petView.update();
            }
        },
    });
    canvas.app.manor.view.UseBuilding.call(this);
    this.isTrainingNow = false;
    this._numPages = 1;
    this.container = this.addChild(new canvas.px.Container());
    this.titleField = this.container.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_14_BOLD, 7026733, 210, 20, "left"));
    this.titleField.position.set(200, 10);
    this.descField = this.container.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_12, 7026733, 394, 35, "left"));
    this.descField.position.set(12, 220);
    this.petView = this.container.addChild(new canvas.animation.Pet(null, canvas.app.manor.Event.ENTER_FRAME));
    this.petView.position.set(11, 20);
    this.petTop = this.container.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "pet_top")));
    this.petTop.position.set(12, 20);
    this.hint = new canvas.app.view.MappingHint();
    this.exp = this.container.addChild(new canvas.app.manor.view.controls.elements.LabourGreen(200));
    this.exp.position.set(195, 35);
    this.exp.setLabour(0, 0);
    var sprite = this.container.addChild(new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "tile_3"), 4, 4, 4, 4));
    sprite.width = 192;
    sprite.height = 54;
    sprite.position.set(200, 72);
    var field = this.container.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_12_BOLD, 7026733, 40, 18, "left"));
    field.position.set(212, 84);
    field.text = canvas.Translator.getText(723) + ":";
    this.infoField = this.container.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_12_BOLD, 7026733, 200, 18, "left"));
    this.infoField.position.set(212, 106);
    this.list = this.container.addChild(new canvas.ui.List(canvas.ui.ListType.HORIZONTAL, 1));
    this.list._paddingH = 3;
    this.list.container.x = 10;
    this.list.setSize(360, 80);
    this.list.position.set(30, 205);
    for (var i = 0; i < canvas.app.manor.view.controls.UsePets.ON_PAGE; i++) {
        this.list.add(new canvas.app.manor.view.controls.elements.PetItem(), false);
    }
    this.list.update();
    this.pets = this.list.items;
    this.leftArrow = this.container.addChild(new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "arrow_left")));
    this.leftArrow.position.set(10, 225);
    this.rightArrow = this.container.addChild(new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "arrow_left")));
    this.rightArrow.position.set(408, 225);
    this.rightArrow.scale.x = -1;
    this.trainButton = this.container.addChild(new canvas.app.view.MainButton());
    this.trainButton.setTitle(canvas.Translator.getText(143));
    this.trainButton.position.set(222, 135);
    this.filterSortControl = new canvas.app.manor.view.controls.elements.FilterSortControlPets(
        [
            new canvas.data.manor.DSortData(canvas.data.manor.DSortData.TYPE_DEFAULT, canvas.Translator.getText(282)),
            new canvas.data.manor.DSortData(canvas.data.manor.DSortData.TYPE_TITLE, canvas.Translator.getText(283)),
            new canvas.data.manor.DSortData(canvas.data.manor.DSortData.TYPE_LEVEL, canvas.Translator.getText(284)),
            new canvas.data.manor.DSortData(canvas.data.manor.DSortData.TYPE_COLOR, canvas.Translator.getText(273)),
        ],
        "",
        canvas.app.manor.model.localStorage.get("sortTypePets"),
        canvas.app.manor.model.localStorage.get("sortDirectionPets") == "1",
        canvas.Translator.getText(281)
    );
    this.addChild(this.filterSortControl);
    this.filterSortControl.position.set(250, 175);
    this.combo = this.container.addChild(new canvas.app.manor.view.controls.elements.Combo(110, 96));
    this.combo.position.set(266, 79);
    canvas.EventManager.addEventListener(canvas.ui.Event.EVENT_CHANGE, this.filterSortControl, this.filterChangeHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ComboBoxEvent.EVENT_SELECT, this.combo, this.comboSelectHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ListEvent.EVENT_SELECT, this.list, this.listSelectHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.trainButton, this.trainClickHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.leftArrow, this.leftClickHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.rightArrow, this.rightClickHandler, this);
};
canvas.app.manor.view.controls.UsePets.prototype = Object.create(canvas.app.manor.view.UseBuilding.prototype);
canvas.app.manor.view.controls.UsePets.ON_PAGE = 5;
canvas.app.manor.view.controls.UsePets.prototype.update = function () {
    canvas.app.manor.view.UseBuilding.prototype.update.call(this);
    if (!canvas.app.manor.model.petTrainingTypes) return;
    this.updateFilterAndSort();
    this.testTraining();
    this._numPages = this.sortedPetsData.length - canvas.app.manor.view.controls.UsePets.ON_PAGE + 1;
    if (this._numPages < 1) this._numPages = 1;
    this.curPage = this._curPage;
    if (this.sortedPetsData.length > 0) {
        this.container.interactiveChildren = true;
    } else {
        this.container.interactiveChildren = false;
    }
    this.selectedPet = this.selectedPet;
    var sprite;
    var trainingType;
    var i = 0;
    var a = new Array();
    for (i = 0; i < 4; i++) {
        trainingType = canvas.app.manor.model.petTrainingTypes[i];
        if (trainingType != null) {
            a.push({ title: canvas.Functions.getNumberName(trainingType.duration, canvas.Translator.getText(2023), canvas.Translator.getText(2024), canvas.Translator.getText(140)), value: i });
        }
    }
    this.combo.init(a);
    this.comboSelectHandler();
    if (this.petView.pet) this.petView.pet.play();
};
canvas.app.manor.view.controls.UsePets.prototype.updateFilterAndSort = function () {
    var Conf = canvas.app.manor.model;
    if (!Conf.pets) return;
    var baseData = new Array();
    var len = Conf.pets.length,
        len2,
        i,
        j;
    var petData;
    for (i = 0; i < len; i++) baseData.push(Conf.pets[i]);
    if (this.filterSortControl.filterText.length > 2) {
        this.sortedPetsData = new Array();
        len2 = baseData.length;
        for (j = 0; j < len2; j++) {
            petData = baseData[j];
            if (petData.title.toLowerCase().search(this.filterSortControl.filterText.toLowerCase()) >= 0) this.sortedPetsData.push(petData);
        }
    } else {
        this.sortedPetsData = baseData;
    }
    switch (this.filterSortControl.sortType) {
        case canvas.data.manor.DSortData.TYPE_DEFAULT:
            this.sortedPetsData.sort(this.sortOnReadyAndLevel.bind(this));
            break;
        case canvas.data.manor.DSortData.TYPE_TITLE:
            this.sortedPetsData.sort(this.sortOnTitle.bind(this));
            break;
        case canvas.data.manor.DSortData.TYPE_LEVEL:
            this.sortedPetsData.sort(this.sortOnLevel.bind(this));
            break;
        case canvas.data.manor.DSortData.TYPE_COLOR:
            this.sortedPetsData.sort(this.sortOnColor.bind(this));
            break;
        default:
            if (this.filterSortControl.sortDirection) this.sortedPetsData.reverse();
    }
};
canvas.app.manor.view.controls.UsePets.prototype.sortOnReadyAndLevel = function (a, b) {
    var ready1 = a.error == "" ? 1 : 0;
    var ready2 = b.error == "" ? 1 : 0;
    if (ready1 > ready2) {
        return -1;
    } else if (ready1 < ready2) {
        return 1;
    } else {
        if (a.level > b.level) {
            return this.filterSortControl.sortDirection ? -1 : 1;
        } else if (a.level < b.level) {
            return this.filterSortControl.sortDirection ? 1 : -1;
        } else {
            return 0;
        }
    }
};
canvas.app.manor.view.controls.UsePets.prototype.sortOnLevel = function (a, b) {
    if (a.level > b.level) {
        return this.filterSortControl.sortDirection ? -1 : 1;
    } else if (a.level < b.level) {
        return this.filterSortControl.sortDirection ? 1 : -1;
    } else {
        return 0;
    }
};
canvas.app.manor.view.controls.UsePets.prototype.sortOnTitle = function (a, b) {
    if (a.title.toLowerCase() > b.title.toLowerCase()) {
        return this.filterSortControl.sortDirection ? -1 : 1;
    } else if (a.title.toLowerCase() < b.title.toLowerCase()) {
        return this.filterSortControl.sortDirection ? 1 : -1;
    } else {
        return 0;
    }
};
canvas.app.manor.view.controls.UsePets.prototype.sortOnColor = function (a, b) {
    if (a.color > b.color) {
        return this.filterSortControl.sortDirection ? -1 : 1;
    } else if (a.color < b.color) {
        return this.filterSortControl.sortDirection ? 1 : -1;
    } else {
        return 0;
    }
};
canvas.app.manor.view.controls.UsePets.prototype.filterChangeHandler = function () {
    canvas.app.manor.model.localStorage.set("sortTypePets", this.filterSortControl.sortType);
    canvas.app.manor.model.localStorage.set("sortDirectionPets", this.filterSortControl.sortDirection ? "1" : "0");
    this.update();
};
canvas.app.manor.view.controls.UsePets.prototype.testTraining = function () {
    var pet;
    this.isTrainingNow = false;
    var i,
        len = canvas.app.manor.model.pets.length;
    for (i = 0; i < len; i++) {
        pet = canvas.app.manor.model.pets[i];
        if (pet.time > 0) {
            this.isTrainingNow = true;
            break;
        }
    }
    var item;
    for (i = 0; i < canvas.app.manor.view.controls.UsePets.ON_PAGE; i++) {
        item = this.pets[i];
        if (this.isTrainingNow && item.data != null && item.data.time == 0) {
            item.alpha = 0.5;
        } else {
            item.alpha = 1;
        }
    }
    this.trainButton.enabled = !this.isTrainingNow;
};
canvas.app.manor.view.controls.UsePets.prototype.comboSelectHandler = function () {
    var trainingType = canvas.app.manor.model.petTrainingTypes[this.combo.selectedIndex];
    if (trainingType) {
        this.infoField.text = canvas.Translator.getText(141) + ": " + trainingType.feedCost + "   " + canvas.Translator.getText(142) + ": " + trainingType.exp;
    } else {
        this.infoField.text = "";
    }
};
canvas.app.manor.view.controls.UsePets.prototype.listSelectHandler = function (event) {
    this.selectedPet = this.sortedPetsData.indexOf(event.params.data);
};
canvas.app.manor.view.controls.UsePets.prototype.trainClickHandler = function () {
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.USE_PETS_ACTION, null, { object: { pet: this.sortedPetsData[this.selectedPet].id, type: this.combo.selectedIndex } });
};
canvas.app.manor.view.controls.UsePets.prototype.leftClickHandler = function () {
    this.curPage--;
    this.selectedPet = this.selectedPet;
};
canvas.app.manor.view.controls.UsePets.prototype.rightClickHandler = function () {
    this.curPage++;
    this.selectedPet = this.selectedPet;
};
canvas.app.manor.view.controls.UsePortal = function () {
    this._data = null;
    Object.defineProperty(this, "data", {
        get: function () {
            return this._data;
        },
        set: function (value) {
            this._data = value;
            this.updateContent();
        },
    });
    canvas.app.manor.view.UseBuilding.call(this);
    this.portalList = this.addChild(new canvas.app.manor.view.controls.elements.PortalList());
    this.portalList.position.set(15, 0);
    var sprite = this.addChild(new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "tile_7"), 48, 0, 48, 0));
    sprite.width = 330;
    sprite.position.set(40, 115);
    this.statusField = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD, 4594699, 320, 20, "center"));
    this.statusField.position.set(40, 120);
    this.disabledField = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_12, 7092268, 320, 20, "center"));
    this.disabledField.position.set(40, 177);
    this.disabledField.text = canvas.Translator.getText(258);
    this.enabledContainer = this.addChild(new canvas.px.Container());
    this.enabledContainer.position.set(17, 143);
    sprite = this.enabledContainer.addChild(new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "tile_3"), 4, 4, 4, 4));
    sprite.width = 380;
    sprite.height = 60;
    this.search = this.enabledContainer.addChild(new canvas.app.manor.view.controls.elements.Input("left", false, 210, null, null, null, canvas.Translator.getText(259), false));
    this.search.position.set(8, 6);
    this.search.maxChars = 30;
    this.search.paddingLeft = 16;
    this.search.topField.x += 16;
    this.search.topField.font = canvas.Const.FONT_TAHOMA_11;
    sprite = this.search.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "search_icon")));
    sprite.position.set(2, 3);
    this.titleField = this.enabledContainer.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_12, 7092268, 320, 20, "left"));
    this.titleField.position.set(5, 7);
    this.titleField.text = canvas.Translator.getText(260);
    this.combo = this.enabledContainer.addChild(new canvas.app.manor.view.controls.elements.Combo(210, 96));
    this.combo.position.set(8, 30);
    this.actionButton = this.enabledContainer.addChild(new canvas.app.view.MainButton());
    this.actionButton.position.set(225, 22);
    this.actionButton.setSize(150);
    this.cooldown = this.enabledContainer.addChild(new canvas.app.manor.view.controls.elements.LabourGreen(200));
    this.cooldown.position.set(8, 25);
    this.cooldown.setLabour(0, 0);
    this.cooldown.setTitle();
    this.confirmField = this.enabledContainer.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD, 9788490, 180, 40, "left"));
    this.confirmField.position.set(5, 74);
    this.confirmField.text = canvas.Translator.getText(264);
    this.confirmCheck = this.enabledContainer.addChild(new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "checker_back"), null, new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "checker_front"))));
    this.confirmCheck.position.set(190, 77);
    this.confirmCheck.checked = canvas.app.manor.model.localStorage.get("portalConfirm") != "1";
    this.locationButton = this.enabledContainer.addChild(new canvas.app.view.MainButton(null, null, null, null, null, true));
    this.locationButton.position.set(225, 70);
    this.locationButton.setSize(150);
    canvas.EventManager.addEventListener(canvas.ui.Event.EVENT_CHANGE, this.portalList, this.changeHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.actionButton, this.actionClickHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.locationButton, this.locationClickHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.confirmCheck, this.checkClickHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ComboBoxEvent.EVENT_SELECT, this.combo, this.comboSelectHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.InputEvent.EVENT_CHANGE, this.search, this.inputSearchHandler, this);
};
canvas.app.manor.view.controls.UsePortal.prototype = Object.create(canvas.app.manor.view.UseBuilding.prototype);
canvas.app.manor.view.controls.UsePortal.prototype.update = function () {
    canvas.app.manor.view.UseBuilding.prototype.update.call(this);
    var Conf = canvas.app.manor.model;
    this.portalList.data = Conf.portals;
    var values = new Array();
    var location;
    var a = new Array();
    values.push({ id: 0, title: canvas.Translator.getText(268), description: "" });
    var i,
        len = Conf.portalLocations.length;
    for (i = 0; i < len; i++) {
        if (Conf.portalLocations[i]) a.push(Conf.portalLocations[i]);
    }
    a.sort(function (a, b) {
        return a.name - b.name;
    });
    len = a.length;
    for (i = 0; i < len; i++) {
        location = a[i];
        if (this.search.text == "" || location.title.toLowerCase().search(this.search.text.toLowerCase()) >= 0) {
            values.push({ id: location.id, title: location.title, description: location.error });
        }
    }
    this.combo.init(values);
    if (Conf.portalJumpCost > 0) {
        this.locationButton.setTitle(canvas.Translator.getText(265) + " " + Conf.portalJumpCost + " <img src='energy_icon' atlas='ui' yOffset='2'/>");
    } else {
        this.locationButton.setTitle(canvas.Translator.getText(270));
    }
    this.changeHandler(null);
};
canvas.app.manor.view.controls.UsePortal.prototype.updateContent = function () {
    var Conf = canvas.app.manor.model;
    var cooldownTime = Conf.portalRebindTime - Math.round(Date.now() * 0.001);
    this.disabledField.visible = false;
    this.addChild(this.enabledContainer);
    this.actionButton.enabled = true;
    var location;
    if (this.data) {
        location = Conf.portalLocations[this.data.locationID];
        switch (this.data.status) {
            case 1:
                this.statusField.text = location ? location.title : "";
                this.actionButton.setTitle(canvas.Translator.getText(262));
                break;
            case -1:
                this.statusField.text = canvas.Translator.getText(255);
                this.actionButton.setTitle(canvas.Translator.getText(261));
                break;
            default:
                this.statusField.text = canvas.Translator.getText(256) + " " + this.data.level + " " + canvas.Translator.getText(249);
                this.disabledField.visible = true;
                this.removeIfExist(this.enabledContainer);
        }
        this.cooldown.visible = this.titleField.visible = cooldownTime > 0 && this.data.status == 1;
        if (this.cooldown.visible) {
            this.enabledContainer.removeIfExist(this.search);
            this.enabledContainer.removeIfExist(this.combo);
            this.actionButton.setTitle(canvas.Translator.getText(263));
            this.updateTime();
        } else {
            this.enabledContainer.addChild(this.search);
            this.enabledContainer.addChild(this.combo);
            this.actionButton.enabled = this.combo.selectedIndex > 0 && !this.combo.selectedItem.description;
        }
        this.locationButton.enabled = this.data.status == 1;
    }
};
canvas.app.manor.view.controls.UsePortal.prototype.select = function (params) {
    this.portalList.select(params);
};
canvas.app.manor.view.controls.UsePortal.prototype.changeHandler = function () {
    this.data = this.portalList.selectedItem;
};
canvas.app.manor.view.controls.UsePortal.prototype.updateTime = function () {
    var Conf = canvas.app.manor.model;
    var cooldownTime = Conf.portalRebindTime - Math.round(Date.now() * 0.001);
    if (cooldownTime > 0) {
        this.cooldown.setLabour(cooldownTime, Conf.portalRebindCooldown);
        this.cooldown.setTitle(canvas.Functions.formatDate(cooldownTime * 1e3, "00", 2, true));
    } else {
        if (this.cooldown.visible) this.updateContent();
    }
};
canvas.app.manor.view.controls.UsePortal.prototype.actionClickHandler = function () {
    if (this.cooldown.visible) {
        canvas.EventManager.dispatchEvent(canvas.app.manor.Event.OPEN_PORTAL_RESET);
    } else {
        canvas.EventManager.dispatchEvent(canvas.app.manor.Event.USE_PORTAL_ACTION, null, { object: { building_action: "bind", area_id: this.combo.selectedItem.id, number: this.data.level } });
    }
};
canvas.app.manor.view.controls.UsePortal.prototype.locationClickHandler = function () {
    var Conf = canvas.app.manor.model;
    if (this.confirmCheck.checked) {
        canvas.EventManager.dispatchEvent(canvas.app.manor.Event.OPEN_CONFIRM, null, {
            params: canvas.Translator.getText(269) + " <b>" + this.statusField.text + "</b>?<br/>" + canvas.Translator.getText(271) + " " + Conf.portalJumpCost + " <img src='energy_icon' atlas='ui' yOffset='2'/>",
            object: { name: canvas.app.manor.Event.USE_PORTAL_ACTION, params: { object: { building_action: "teleport", number: this.data.level } } },
        });
    } else {
        canvas.EventManager.dispatchEvent(canvas.app.manor.Event.USE_PORTAL_ACTION, null, { object: { building_action: "teleport", number: this.data.level } });
    }
};
canvas.app.manor.view.controls.UsePortal.prototype.checkClickHandler = function () {
    canvas.app.manor.model.localStorage.set("portalConfirm", this.confirmCheck.checked ? "" : "1");
};
canvas.app.manor.view.controls.UsePortal.prototype.comboSelectHandler = function () {
    this.updateContent();
};
canvas.app.manor.view.controls.UsePortal.prototype.inputSearchHandler = function () {
    this.update();
    this.combo.open();
};
canvas.app.manor.view.controls.UsePortal.prototype.activate = function () {
    this.isActive = true;
    this.search.input = canvas.app.manor.view.input6;
};
canvas.app.manor.view.controls.UsePortal.prototype.deactivate = function () {
    this.isActive = false;
    this.search.input = null;
};
canvas.app.manor.view.controls.UseWorkshop = function () {
    this._favoriteEnabled = false;
    Object.defineProperty(this, "favoriteEnabled", {
        get: function () {
            return this._favoriteEnabled;
        },
        set: function (value) {
            this._favoriteEnabled = value;
            this.favoriteButton.baseTexture = this.favoriteButton.sprite.texture = canvas.ResourceLoader.getImage("ui", "favorite" + (value ? "" : "_disabled"));
            this.favoriteHint.update(canvas.Translator.getText(value ? 245 : 244));
            this.update();
        },
    });
    canvas.app.manor.view.UseBuilding.call(this);
    this.lastComboSelected = "";
    this.lastSearchValue = "";
    var sprite = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "tab_single")));
    sprite.position.set(0, 97);
    this.pager = this.addChild(new canvas.app.manor.view.controls.elements.PagerSimple(canvas.ui.ScrollType.HORIZONTAL, false, false, null, true));
    this.pager.setSize(395, 20);
    this.pager.position.set(10, 160);
    sprite = this.addChild(new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "tile_3"), 4, 4, 4, 4));
    sprite.width = 384;
    sprite.height = 80;
    sprite.position.set(15, 30);
    sprite = this.addChild(new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "tab_white"), 37, 0, 37, 0));
    sprite.width = 220;
    sprite.position.set(97, 97);
    var field = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_13, 7092753, 204, 20, "center"));
    field.position.set(107, 105);
    field.text = canvas.Translator.getText(144);
    field = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11, 7092753, 132, 18, "center"));
    field.position.set(143, 10);
    field.text = canvas.Translator.getText(145);
    this.recipeItem = this.addChild(new canvas.app.manor.view.controls.elements.Item());
    this.recipeItem.position.set(20, 35);
    this.recipeItem.buttonMode = false;
    this.input = this.addChild(new canvas.app.manor.view.controls.elements.Input("center", false, 40, null, null, null, null, true));
    this.input.position.set(100, 72);
    this.input.maxChars = 4;
    this.input.onlyNumbers = true;
    this.input.leftArrow.x += 6;
    this.input.rightArrow.x -= 4;
    this.search = this.addChild(new canvas.app.manor.view.controls.elements.Input("left", false, 112, null, null, null, canvas.Translator.getText(227), false));
    this.search.position.set(15, 7);
    this.search.maxChars = 30;
    this.search.paddingLeft = 16;
    this.search.topField.x += 16;
    this.search.topField.font = canvas.Const.FONT_TAHOMA_11;
    sprite = this.search.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "search_icon")));
    sprite.position.set(2, 3);
    this.list = this.addChild(new canvas.ui.List(canvas.ui.ListType.HORIZONTAL, 1));
    this.list.position.set(34, 135);
    this.list.setSize(350, 90);
    this.list._paddingH = -1;
    var item;
    for (var i = 0; i < canvas.app.manor.view.controls.UseWorkshop.ON_PAGE; i++) {
        item = new canvas.app.manor.view.controls.elements.Item();
        item.buttonMode = false;
        this.list.add(item, false);
    }
    this.list.update();
    this.progress = this.addChild(new canvas.app.manor.view.controls.elements.LabourGreen(130));
    this.progress.position.set(272, 0);
    this.progress.setLabour(0, 0);
    this.progress.setTitle();
    this.maxButton = this.addChild(new canvas.app.view.MainButton());
    this.maxButton.position.set(295, 65);
    this.maxButton.setSize(100);
    this.maxButton.setTitle("MAX");
    this.goButton = this.addChild(new canvas.app.view.MainButton());
    this.goButton.position.set(134, 220);
    this.goButton.setTitle(canvas.Translator.getText(146));
    this.goButton.enabled = false;
    this.favoriteButton = this.addChild(new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "favorite")));
    this.favoriteButton.position.set(375, 41);
    this.favoriteHint = new canvas.app.view.MappingHint(canvas.Translator.getText(245));
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.HINT_ADD, null, { target: this.favoriteButton, params: new canvas.utils.HintParams(this.favoriteHint) });
    this.favoriteEnabled = false;
    this.combo = this.addChild(new canvas.app.manor.view.controls.elements.Combo(275, 130));
    this.combo.position.set(95, 38);
    canvas.EventManager.addEventListener(canvas.ui.ComboBoxEvent.EVENT_SELECT, this.combo, this.comboHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ComboBoxEvent.EVENT_OPEN, this.combo, this.comboOpenHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ComboBoxEvent.EVENT_CLOSE, this.combo, this.comboCloseHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ScrollEvent.EVENT_SCROLL, this.pager, this.pagerHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.InputEvent.EVENT_CHANGE, this.input, this.inputHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.InputEvent.EVENT_CHANGE, this.search, this.inputSearchHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.maxButton, this.maxClickHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.goButton, this.goClickHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.favoriteButton, this.favoriteClickHandler, this);
};
canvas.app.manor.view.controls.UseWorkshop.prototype = Object.create(canvas.app.manor.view.UseBuilding.prototype);
canvas.app.manor.view.controls.UseWorkshop.ON_PAGE = 5;
canvas.app.manor.view.controls.UseWorkshop.prototype.update = function () {
    canvas.app.manor.view.UseBuilding.prototype.update.call(this);
    var Conf = canvas.app.manor.model;
    if (!Conf.workShopReceptsArray) return;
    var a = new Array();
    var recipe;
    a.push({ id: 0, title: canvas.Translator.getText(147) });
    var i,
        len = Conf.workShopReceptsArray.length;
    for (i = 0; i < len; i++) {
        recipe = Conf.workShopReceptsArray[i];
        if ((!this.favoriteEnabled || recipe.favorite) && recipe.title.toLowerCase().search(this.search.text.toLowerCase()) >= 0) {
            a.push({ id: recipe.id, title: recipe.title });
        }
    }
    this.combo.init(a);
    this.combo.setSelectedItem("id", this.lastComboSelected);
    this.comboHandler();
};
canvas.app.manor.view.controls.UseWorkshop.prototype.comboHandler = function () {
    var Conf = canvas.app.manor.model;
    this.lastComboSelected = this.combo.selectedItem.id;
    Conf.workShopSelectedRecipe = null;
    var recipe;
    var image;
    var dItem;
    this.recipeItem.data = null;
    for (var str in Conf.workShopRecepts) {
        recipe = Conf.workShopRecepts[str];
        if (recipe.id == this.combo.selectedItem.id) {
            Conf.workShopSelectedRecipe = recipe;
            dItem = new canvas.data.manor.DItem();
            dItem.image = recipe.image;
            dItem.title = recipe.title;
            dItem.aid = recipe.resultAid;
            this.recipeItem.data = dItem;
            break;
        }
    }
    this.updatePager();
};
canvas.app.manor.view.controls.UseWorkshop.prototype.updatePager = function () {
    var Conf = canvas.app.manor.model;
    if (Conf.workShopSelectedRecipe != null) {
        this.pager.max = Conf.workShopSelectedRecipe.items.length - canvas.app.manor.view.controls.UseWorkshop.ON_PAGE;
        this.pager.current = 0;
    }
    this.pagerHandler(null);
};
canvas.app.manor.view.controls.UseWorkshop.prototype.pagerHandler = function () {
    var Conf = canvas.app.manor.model;
    var i;
    var item;
    var ditem;
    var ditem2;
    var j = 0;
    var b = true;
    for (i = this.pager.current; i < this.pager.current + canvas.app.manor.view.controls.UseWorkshop.ON_PAGE; i++) {
        item = this.list.items[j];
        if (Conf.workShopSelectedRecipe != null) {
            ditem = Conf.workShopSelectedRecipe.items[i];
            if (ditem != null) {
                ditem = ditem.clone();
                ditem.count = ditem.count * parseInt(this.input.text);
                if (Conf.workShopBugArtefacts[ditem.id] != undefined && Conf.workShopBugArtefacts[ditem.id].count >= ditem.count) {
                    item.setColor(1);
                } else {
                    item.setColor(2);
                    b = false;
                }
            } else {
                item.setColor(0);
            }
            item.data = ditem;
        } else {
            item.data = null;
            item.setColor(0);
        }
        j++;
    }
    if (Conf.workShopSelectedRecipe != null) {
        this.progress.setLabour(Math.round(Conf.workShopSelectedRecipe.duration * parseInt(this.input.text) * Conf.workShopReduceKoef), Conf.workShopTimeLeft);
        this.progress.tf.text =
            canvas.Functions.formatDate(Math.round(Conf.workShopSelectedRecipe.duration * parseInt(this.input.text) * Conf.workShopReduceKoef * 1e3), "00", 2, true) +
            " / " +
            (Conf.workShopTimeLeft == 0 ? "0" : canvas.Functions.formatDate(Conf.workShopTimeLeft * 1e3, "00", 2, true));
        this.progress.backImage.texture = canvas.ResourceLoader.getImage(
            "ui",
            "labour4_progress" + (Math.round(Conf.workShopSelectedRecipe.duration * parseInt(this.input.text) * Conf.workShopReduceKoef) <= Conf.workShopTimeLeft ? "" : "_red")
        );
    } else {
        this.progress.setLabour(0, Conf.workShopTimeLeft);
        this.progress.tf.text = "";
        this.progress.backImage.texture = canvas.ResourceLoader.getImage("ui", "labour4_progress");
    }
    this.goButton.enabled = Conf.workShopSelectedRecipe == null ? false : Math.round(Conf.workShopSelectedRecipe.duration * parseInt(this.input.text) * Conf.workShopReduceKoef) > Conf.workShopTimeLeft ? false : b;
    if (this.recipeItem.data != null && Conf.workShopSelectedRecipe != null) {
        this.recipeItem.data.count = parseInt(this.input.text.toString()) * Conf.workShopSelectedRecipe.resultCount;
        this.recipeItem.data = this.recipeItem.data;
    }
};
canvas.app.manor.view.controls.UseWorkshop.prototype.inputHandler = function () {
    if (this.input.text == "" || parseInt(this.input.text) < 2) this.input.text = "1";
    else if (parseInt(this.input.text) > 9999) this.input.text = "9999";
    this.updatePager();
};
canvas.app.manor.view.controls.UseWorkshop.prototype.inputSearchHandler = function () {
    if (this.lastSearchValue == this.search.text) return;
    this.lastSearchValue = this.search.text;
    this.update();
    this.combo.open();
};
canvas.app.manor.view.controls.UseWorkshop.prototype.maxClickHandler = function () {
    var Conf = canvas.app.manor.model;
    if (Conf.workShopSelectedRecipe != null) {
        this.input.text = "0";
        this.inputHandler();
        while (this.goButton.enabled) {
            this.input.text = (parseInt(this.input.text) + 1).toString();
            this.inputHandler();
        }
        this.input.text = (parseInt(this.input.text) - 1).toString();
        this.inputHandler(null);
    }
};
canvas.app.manor.view.controls.UseWorkshop.prototype.goClickHandler = function () {
    var Conf = canvas.app.manor.model;
    this.lastComboSelected = "";
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.USE_WORKSHOP_ACTION, null, {
        object: { building_action: "craft", recipe_id: Conf.workShopSelectedRecipe == null ? "" : Conf.workShopSelectedRecipe.id, amount: this.input.text },
    });
    this.input.text = "1";
};
canvas.app.manor.view.controls.UseWorkshop.prototype.favoriteClickHandler = function () {
    this.favoriteEnabled = !this.favoriteEnabled;
};
canvas.app.manor.view.controls.UseWorkshop.prototype.comboOpenHandler = function () {
    this.input.input = null;
};
canvas.app.manor.view.controls.UseWorkshop.prototype.comboCloseHandler = function () {
    this.input.input = canvas.app.manor.view.input5;
    this.inputHandler();
};
canvas.app.manor.view.controls.UseWorkshop2 = function () {
    canvas.app.manor.view.UseBuilding.call(this);
    var sprite = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "tab_single")));
    sprite.position.set(0, 97);
    this.pager = this.addChild(new canvas.app.manor.view.controls.elements.PagerSimple(canvas.ui.ScrollType.HORIZONTAL, false, false, null, true));
    this.pager.setSize(395, 20);
    this.pager.position.set(10, 40);
    this.title = this.addChild(new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_13, canvas.Const.FONT_TAHOMA_13_BOLD, 7092753, 204, 20, "center"));
    this.title.position.set(107, 105);
    this.list = this.addChild(new canvas.ui.List(canvas.ui.ListType.HORIZONTAL, 1));
    this.list.position.set(34, 15);
    this.list.setSize(350, 80);
    this.list._paddingH = -1;
    var item;
    for (var i = 0; i < canvas.app.manor.view.controls.UseWorkshop2.ON_PAGE; i++) {
        item = new canvas.app.manor.view.controls.elements.Item(false);
        item.click = this.selectHandler.bind(this);
        item.buttonMode = false;
        this.list.add(item, false);
    }
    this.list.update();
    this.hint = new canvas.app.view.MappingHint(canvas.Translator.getText(192));
    this.list2 = this.addChild(new canvas.ui.List(canvas.ui.ListType.VERTICAL, 1));
    this.list2.position.set(20, 135);
    this.list2.setSize(350, 120);
    this.list2._paddingV = 0;
    for (var i = 0; i < canvas.app.manor.view.controls.UseWorkshop2.ON_PAGE2; i++) {
        item = new canvas.app.manor.view.controls.elements.TaskItem();
        this.list2.add(item, false);
    }
    this.list2.update();
    this.pager2 = this.addChild(new canvas.app.manor.view.controls.elements.PagerSimple(canvas.ui.ScrollType.VERTICAL, true, true, this.list2));
    this.pager2.setSize(20, 120);
    this.pager2.position.set(375, 135);
    canvas.EventManager.addEventListener(canvas.ui.ScrollEvent.EVENT_SCROLL, this.pager, this.pagerHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ScrollEvent.EVENT_SCROLL, this.pager2, this.pager2Handler, this);
    canvas.EventManager.addEventListener(canvas.ui.ListEvent.EVENT_SELECT, this.list, this.selectHandler, this);
};
canvas.app.manor.view.controls.UseWorkshop2.prototype = Object.create(canvas.app.manor.view.UseBuilding.prototype);
canvas.app.manor.view.controls.UseWorkshop2.ON_PAGE = 5;
canvas.app.manor.view.controls.UseWorkshop2.ON_PAGE2 = 4;
canvas.app.manor.view.controls.UseWorkshop2.prototype.update = function () {
    canvas.app.manor.view.UseBuilding.prototype.update.call(this);
    var Conf = canvas.app.manor.model;
    this.pager.max = Conf.workShopRequestsCompleted.length - canvas.app.manor.view.controls.UseWorkshop2.ON_PAGE;
    this.pager.current = 0;
    this.pagerHandler();
    this.updateRequests();
    this.pager2.current = 0;
    this.title.text = canvas.Translator.getText(191) + " <b>(" + Conf.workShopRequests.length + ")</b>";
};
canvas.app.manor.view.controls.UseWorkshop2.prototype.updateRequests = function () {
    var max = canvas.app.manor.model.workShopRequests.length - canvas.app.manor.view.controls.UseWorkshop2.ON_PAGE2;
    if (max != this.pager2.max) {
        this.pager2.max = max;
    }
    this.pager2Handler();
};
canvas.app.manor.view.controls.UseWorkshop2.prototype.pagerHandler = function () {
    var Conf = canvas.app.manor.model;
    var i;
    var item;
    var dItem;
    var request;
    var recipe;
    var j = 0;
    for (i = this.pager.current; i < this.pager.current + canvas.app.manor.view.controls.UseWorkshop2.ON_PAGE; i++) {
        item = this.list.items[j++];
        item.data = null;
        canvas.EventManager.dispatchEvent(canvas.app.manor.Event.HINT_REMOVE, null, { target: item });
        request = Conf.workShopRequestsCompleted[i];
        if (request != null) {
            recipe = Conf.workShopRecepts[request.recipe];
            if (recipe != null) {
                dItem = new canvas.data.manor.DItem();
                dItem.image = recipe.image;
                dItem.title = recipe.title;
                dItem.count = request.count * recipe.resultCount;
                dItem.id = request.id;
                item.data = dItem;
                canvas.EventManager.dispatchEvent(canvas.app.manor.Event.HINT_ADD, null, { target: item, params: new canvas.utils.HintParams(this.hint) });
            }
        }
    }
};
canvas.app.manor.view.controls.UseWorkshop2.prototype.pager2Handler = function () {
    var Conf = canvas.app.manor.model;
    var i;
    var taskItem;
    var request;
    var j = 0;
    for (i = this.pager2.current; i < this.pager2.current + canvas.app.manor.view.controls.UseWorkshop2.ON_PAGE2; i++) {
        taskItem = this.list2.items[j++];
        request = Conf.workShopRequests[i];
        taskItem.name = (i + 1).toString();
        taskItem.data = request;
    }
};
canvas.app.manor.view.controls.UseWorkshop2.prototype.selectHandler = function (event) {
    var item = event.currentTarget;
    if (item.data) {
        canvas.EventManager.dispatchEvent(canvas.app.manor.Event.USE_WORKSHOP_ACTION, null, { object: { building_action: "pick", craft_request_id: item.data.id } });
    }
};
canvas.app.manor.view.controls.WorkWin = function () {
    canvas.app.manor.view.WindowManorBase.call(this, 327, 307);
    var t = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_12, 7026733, 275, 20, "center");
    t.text = canvas.Translator.getText(182) + ":";
    t.position.set(26, 51);
    this.addChild(t);
    var t = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_12_BOLD, 7026733, 128, 20, "right");
    t.text = canvas.Translator.getText(183) + ":";
    t.position.set(26, 183);
    this.addChild(t);
    this.labourInput = new canvas.app.manor.view.controls.elements.LabourInput();
    this.addChild(this.labourInput);
    this.labourInput.position.set(75, 85);
    this.workButton = new canvas.app.manor.view.controls.elements.ButtonImage(canvas.Translator.getText(151));
    this.addChild(this.workButton);
    this.workButton.position.set(Math.round((this.width - this.workButton.width) * 0.5), 252);
    this.coins = new canvas.app.view.Money();
    this.addChild(this.coins);
    this.coins.position.set(158, 183);
    canvas.EventManager.addEventListener(canvas.ui.InputEvent.EVENT_CHANGE, this.labourInput, this.changeHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.workButton, this.workHandler, this);
    if (canvas.app.manor.model.mapMode) {
        this.position.set(90, 130);
    }
};
canvas.app.manor.view.controls.WorkWin.prototype = Object.create(canvas.app.manor.view.WindowManorBase.prototype);
canvas.app.manor.view.controls.WorkWin.prototype.update = function (flags) {
    if (flags == undefined) flags = 0;
    var Conf = canvas.app.manor.model;
    var labourRequest = Conf.labourRequests[Conf.selectedRequest];
    Conf.selectedRequestID = labourRequest.id;
    if (labourRequest != null) {
        this.header.text = canvas.Translator.getText(184) + " " + labourRequest.user.login + " [" + labourRequest.user.level + "]";
    } else {
        header.text = "";
    }
    this.labourInput.update();
    this.labourInput.maxValue = Math.min(Conf.user.labour, labourRequest.labour);
    this.coins.money = labourRequest.price * parseInt(this.labourInput.input.input.text.toString()) * 100;
    this.workButton.enabled = this.labourInput.testRequires();
};
canvas.app.manor.view.controls.WorkWin.prototype.show = function (event) {
    this.labourInput.input.input = canvas.app.manor.view.input;
    this.labourInput.input.input.text = 0;
    this.labourInput.changeHandler();
    canvas.app.manor.view.WindowManorBase.prototype.show.call(this, event);
};
canvas.app.manor.view.controls.WorkWin.prototype.hide = function (event) {
    this.labourInput.input.input = null;
    canvas.app.manor.view.WindowManorBase.prototype.hide.call(this, event);
};
canvas.app.manor.view.controls.WorkWin.prototype.activate = function (event) {
    this.labourInput.input.input = canvas.app.manor.view.input;
    canvas.app.manor.view.WindowManorBase.prototype.activate.call(this, event);
};
canvas.app.manor.view.controls.WorkWin.prototype.deactivate = function (event) {
    this.labourInput.input.input = null;
    canvas.app.manor.view.WindowManorBase.prototype.deactivate.call(this, event);
};
canvas.app.manor.view.controls.WorkWin.prototype.changeHandler = function () {
    this.update();
};
canvas.app.manor.view.controls.WorkWin.prototype.workHandler = function () {
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.WORK_USE, null, this.labourInput.input.text);
    canvas.EventManager.dispatchEvent(canvas.px.WindowEvent.EVENT_CLOSE, this);
};
canvas.app.manor.view.controls.WorkWin.prototype.destroy = function () {
    canvas.EventManager.removeEventListener(canvas.ui.InputEvent.EVENT_CHANGE, this.labourInput, this.changeHandler, this);
    canvas.EventManager.removeEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.workButton, this.workHandler, this);
    canvas.px.Container.prototype.destroy.call(this, { children: true });
};
canvas.app.manor.view.controls.camp.Equipment = function () {
    canvas.px.Container.call(this);
    this.inited = this.visible = false;
};
canvas.app.manor.view.controls.camp.Equipment.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.manor.view.controls.camp.Equipment.VISIBLE_LINES = 5;
canvas.app.manor.view.controls.camp.Equipment.LINE_SIZE = 5;
canvas.app.manor.view.controls.camp.Equipment.prototype.init = function () {
    if (this.inited) return;
    this.inited = this.visible = true;
    var sprite = this.addChild(new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "tile_3"), 4, 4, 4, 4));
    sprite.width = 400;
    sprite.height = 190;
    sprite.y = 22;
    sprite = this.addChild(new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "tile_3"), 4, 4, 4, 4));
    sprite.width = 400;
    sprite.height = 190;
    sprite.y = 218;
    sprite = this.addChild(new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "tile_3"), 4, 4, 4, 4));
    sprite.width = 400;
    sprite.height = 386;
    sprite.position.set(412, 22);
    this.title1 = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD, 9526348, 200, 20, "right"));
    this.title1.position.set(280, -3);
    this.title1.text = canvas.Translator.getText(299) + ":";
    this.image1 = this.addChild(new canvas.ui.Image(canvas.app.manor.model.campData.fragmentItem.image));
    this.image1.position.set(492, -8);
    this.image1.scale.set(0.4, 0.4);
    this.title2 = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD, 9526348, 100, 20, "left"));
    this.title2.position.set(519, -3);
    this.title3 = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD, 9526348, 400, 20, "center"));
    this.title3.position.set(0, 72);
    this.title3.text = canvas.Translator.getText(324);
    this.title4 = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD, 9526348, 100, 20, "right"));
    this.title4.position.set(82, 112);
    this.title4.text = canvas.Translator.getText(121) + ":";
    this.image2 = this.addChild(new canvas.ui.Image(canvas.app.manor.model.campData.fragmentItem.image));
    this.image2.position.set(192, 108);
    this.image2.scale.set(0.4, 0.4);
    this.title5 = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD, 9526348, 100, 20, "left"));
    this.title5.position.set(218, 112);
    this.button1 = this.addChild(new canvas.app.view.MainButton());
    this.button1.position.set(112, 136);
    this.button1.setTitle(canvas.Translator.getText(2034));
    this.button1.setSize(180);
    this.title6 = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD, 9526348, 400, 20, "center"));
    this.title6.position.set(-30, 266);
    this.title6.text = canvas.Translator.getText(325);
    this.input = this.addChild(new canvas.app.manor.view.controls.elements.Input("center", true, 41, null, null, null, null, true));
    this.input.leftArrow.x += 6;
    this.input.rightArrow.x -= 4;
    this.input.onlyNumbers = true;
    this.input.maxChars = 2;
    this.input.position.set(this.title6._width - Math.round((this.title6._width - this.title6.textWidth) * 0.5) - 10, 264);
    this.title7 = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD, 9526348, 100, 20, "right"));
    this.title7.position.set(82, 308);
    this.title7.text = canvas.Translator.getText(121) + ":";
    this.image3 = this.addChild(new canvas.ui.Image(canvas.app.manor.model.campData.fragmentItem.image));
    this.image3.position.set(192, 304);
    this.image3.scale.set(0.4, 0.4);
    this.title8 = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD, 9526348, 100, 20, "left"));
    this.title8.position.set(218, 308);
    this.button2 = this.addChild(new canvas.app.view.MainButton());
    this.button2.position.set(112, 332);
    this.button2.setTitle(canvas.Translator.getText(2034));
    this.button2.setSize(180);
    this.title9 = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD, 9526348, 400, 20, "center"));
    this.title9.position.set(411, 30);
    this.title9.text = canvas.Translator.getText(326);
    this.list = this.addChild(new canvas.ui.List(canvas.ui.ListType.VERTICAL, canvas.app.manor.view.controls.camp.Equipment.LINE_SIZE));
    this.list._paddingV = this.list._paddingH = 0;
    this.list.position.set(435, 50);
    this.list.setSize(350, 350);
    var len = canvas.app.manor.view.controls.camp.Equipment.LINE_SIZE * canvas.app.manor.view.controls.camp.Equipment.VISIBLE_LINES;
    var item;
    for (var i = 0; i < len; i++) {
        item = new canvas.app.manor.view.controls.elements.Item(false, true, null, null, null, null, true);
        this.list.add(item, false);
        item.name = "item" + i;
    }
    this.list.update();
    this.pager = new canvas.app.manor.view.controls.elements.PagerSimple(canvas.ui.ScrollType.VERTICAL, true, true, this.list.container, 2);
    this.pager.position.set(830, 50);
    this.pager.setSize(20, 350);
    this.image1.mouseover = this.image2.mouseover = this.image3.mouseover = this.imageOverHandler.bind(this);
    this.image1.mouseout = this.image2.mouseout = this.image3.mouseout = this.imageOutHandler.bind(this);
    canvas.EventManager.addEventListener(canvas.ui.InputEvent.EVENT_CHANGE, this.input, this.changeHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.button1, this.button1ClickHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.button2, this.button2ClickHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ScrollEvent.EVENT_SCROLL, this.pager, this.pagerHandler, this);
    this.interactive = true;
    this.click = this.clickHandler.bind(this);
};
canvas.app.manor.view.controls.camp.Equipment.prototype.updateScroll = function () {
    var len = canvas.app.manor.model.campData.forgeItems.length;
    this.pager.max =
        len <= canvas.app.manor.view.controls.camp.Equipment.VISIBLE_LINES * canvas.app.manor.view.controls.camp.Equipment.LINE_SIZE
            ? 0
            : Math.ceil((len - canvas.app.manor.view.controls.camp.Equipment.VISIBLE_LINES * canvas.app.manor.view.controls.camp.Equipment.LINE_SIZE) / canvas.app.manor.view.controls.camp.Equipment.LINE_SIZE);
    this.pagerHandler();
    if (this.pager.isDisabled()) {
        this.removeIfExist(this.pager);
    } else {
        this.addChild(this.pager);
    }
};
canvas.app.manor.view.controls.camp.Equipment.prototype.update = function () {
    var Conf = canvas.app.manor.model;
    if (!Conf.campData.forgeItems) return;
    this.init();
    this.updateScroll();
    this.title2.text = Conf.campData.fragmentItem.count.toString();
    this.title5.text = Conf.campData.forgeLevels[0] + " " + canvas.Translator.getText(2022);
    var enough = Conf.campData.fragmentItem.count >= Conf.campData.forgeLevels[0];
    this.button1.enabled = enough;
    this.title5.color = enough ? 9526348 : 16711680;
    this.changeHandler();
};
canvas.app.manor.view.controls.camp.Equipment.prototype.updateData = function () {
    var i,
        len = this.list.items.length;
    for (i = 0; i < len; i++) {
        this.list.items[i].data = canvas.app.manor.model.campData.forgeItems[i + this.pager.current * canvas.app.manor.view.controls.camp.Equipment.LINE_SIZE];
    }
};
canvas.app.manor.view.controls.camp.Equipment.prototype.button1ClickHandler = function () {
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.USE_HUNT_CAMP_ACTION, null, { object: { building_action: "buildItemRandom" } });
    this.button1.enabled = this.button2.enabled = false;
};
canvas.app.manor.view.controls.camp.Equipment.prototype.button2ClickHandler = function () {
    canvas.app.manor.model.campData.currentForgeLevel = parseInt(this.input.text);
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.USE_HUNT_CAMP_ACTION, null, { object: { building_action: "buildItemLevel", level: canvas.app.manor.model.campData.currentForgeLevel } });
    this.button1.enabled = this.button2.enabled = false;
};
canvas.app.manor.view.controls.camp.Equipment.prototype.clickHandler = function (event) {
    item = canvas.Functions.findParentByName("item", event.target);
    if (item && item.data) {
        canvas.app.manor.model.campData.currentDestructItemAid = item.data.aid;
        canvas.EventManager.dispatchEvent(canvas.app.manor.Event.OPEN_CONFIRM, null, {
            params: canvas.Translator.getText(334),
            object: { name: canvas.app.manor.Event.USE_HUNT_CAMP_ACTION, params: { object: { building_action: "destructItem", artikul_id: item.data.aid } } },
        });
    }
};
canvas.app.manor.view.controls.camp.Equipment.prototype.pagerHandler = function () {
    this.updateData();
};
canvas.app.manor.view.controls.camp.Equipment.prototype.changeHandler = function () {
    var Conf = canvas.app.manor.model;
    var inputValue = parseInt(this.input.text);
    var value = Conf.campData.forgeLevels[inputValue];
    if (inputValue > 0 && !value) {
        this.input.text = (Conf.campData.forgeLevels.length - 1).toString();
        this.changeHandler();
        return;
    }
    if (inputValue == 0) {
        this.input.text = "1";
        this.changeHandler();
        return;
    }
    var enough = Conf.campData.fragmentItem.count >= value;
    this.button2.enabled = parseInt(this.input.text) > 0 && value && enough;
    this.title8.text = (value ? value : 0) + " " + canvas.Translator.getText(2022);
    this.title8.color = enough ? 9526348 : 16711680;
};
canvas.app.manor.view.controls.camp.Equipment.prototype.imageOverHandler = function () {
    artifactAltSimple(canvas.app.manor.model.campData.fragmentItem.id, 2);
};
canvas.app.manor.view.controls.camp.Equipment.prototype.imageOutHandler = function () {
    artifactAltSimple(canvas.app.manor.model.campData.fragmentItem.id, 0);
};
canvas.app.manor.view.controls.camp.MineResourceRenderer = function (index) {
    this._pet = null;
    Object.defineProperty(this, "pet", {
        get: function () {
            return this._pet;
        },
        set: function (value) {
            this._pet = value;
            this.update(false);
        },
    });
    canvas.ui.ListRenderer.call(this, null, 814, 122);
    this.state = 0;
    this.index = index;
    this.back = this.addChild(new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "tile_3"), 4, 4, 4, 4));
    this.back.width = this._width;
    this.back.height = this._height;
    this.petView = this.addChild(new canvas.app.manor.view.controls.camp.PetView(true));
    this.petView.position.set(26, 8);
    this.title3 = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD, 9526348, 150, 20, "left"));
    this.title3.position.set(150, 10);
    this.title3.text = canvas.Translator.getText(296);
    this.title4 = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD, 9526348, 150, 20, "left"));
    this.title4.position.set(150, 60);
    this.title4.text = canvas.Translator.getText(297);
    this.combo2 = this.addChild(new canvas.app.manor.view.controls.elements.Combo(226, 110));
    this.combo2.position.set(150, 75);
    this.combo2.list.scroll.step = 14;
    this.combo1 = this.addChild(new canvas.app.manor.view.controls.elements.Combo(226, 80));
    this.combo1.position.set(150, 25);
    this.combo1.init([
        { title: canvas.Translator.getText(328), type: 1 },
        { title: canvas.Translator.getText(329), type: 2 },
        { title: canvas.Translator.getText(330), type: 3 },
    ]);
    this.item2 = this.addChild(new canvas.app.manor.view.controls.elements.Item(false, true, "", "", false));
    this.item2.position.set(415, 26);
    this.title5 = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD, 9526348, 124, 20, "center"));
    this.title5.position.set(389, 97);
    this.title6 = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD, 9526348, 100, 20, "left"));
    this.title6.position.set(525, 8);
    this.title6.text = canvas.Translator.getText(121) + ":";
    this.title7 = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD, 9526348, 100, 20, "left"));
    this.title7.position.set(555, 32);
    this.title8 = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD, 9526348, 100, 20, "left"));
    this.title8.position.set(555, 63);
    this.button = this.addChild(new canvas.app.view.MainButton());
    this.button.position.set(650, 56);
    this.button.setTitle(canvas.Translator.getText(2033));
    this.progress = this.addChild(new canvas.app.manor.view.controls.elements.LabourGreen(131));
    this.progress.position.set(660, 22);
    this.progress.setLabour(0, 0);
    this.image1 = this.addChild(new canvas.ui.Image());
    this.image1.position.set(525, 27);
    this.image1.interactive = true;
    this.image1.scale.set(0.4, 0.4);
    this.image2 = this.addChild(new canvas.ui.Image());
    this.image2.position.set(525, 58);
    this.image2.interactive = true;
    this.image2.scale.set(0.4, 0.4);
    this.state = 0;
    this.clear();
    canvas.EventManager.addEventListener(canvas.ui.ComboBoxEvent.EVENT_SELECT, this.combo1, this.combo1SelectHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ComboBoxEvent.EVENT_SELECT, this.combo2, this.combo2SelectHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.button, this.buttonClickHandler, this);
    this.petView.item.click = this.petClickHandler.bind(this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.petView.crossButton, this.petCrossClickHandler, this);
    this.image1.mouseover = this.image1OverHandler.bind(this);
    this.image1.mouseout = this.image1OutHandler.bind(this);
    this.image2.mouseover = this.image2OverHandler.bind(this);
    this.image2.mouseout = this.image2OutHandler.bind(this);
};
canvas.app.manor.view.controls.camp.MineResourceRenderer.prototype = Object.create(canvas.ui.ListRenderer.prototype);
canvas.app.manor.view.controls.camp.MineResourceRenderer.prototype.update = function (testPet) {
    var Conf = canvas.app.manor.model;
    if (testPet == undefined) testPet = true;
    if (testPet && this.pet && !this.pet.mission) this.pet = null;
    var a = new Array();
    var dCampMission;
    var dItem;
    var id;
    var str;
    var lastCombo1 = this.combo1.selectedItem;
    var lastCombo2 = this.combo2.selectedItem;
    if (this.pet && this.pet.mission) {
        this.combo1.setSelectedItem("type", this.pet.mission.type);
        lastCombo1 = this.combo1.selectedItem;
        dCampMission = Conf.campData.missions[this.pet.mission.type];
        if (dCampMission) {
            for (str in dCampMission.objects) {
                id = parseInt(str);
                if (this.pet.mission.objectId == id && Conf.campData.artifacts[id]) {
                    a.push({ title: Conf.campData.artifacts[id].title, id: Conf.campData.artifacts[id].aid });
                    break;
                }
            }
        }
    } else {
        dCampMission = Conf.campData.missions[parseInt(this.combo1.selectedItem.type)];
        if (dCampMission) {
            for (str in dCampMission.objects) {
                id = parseInt(str);
                if (!Conf.campData.artifacts[id]) continue;
                a.push({ title: Conf.campData.artifacts[id].title, id: Conf.campData.artifacts[id].aid });
            }
        }
    }
    if (a.length > 0) {
        a.sort(this.sortOnTitle);
        this.combo2.init(a);
    } else {
        this.combo2.init([{ title: "", id: 0 }]);
    }
    if (lastCombo1) this.combo1.setSelectedItem("type", lastCombo1.type);
    if (lastCombo2) this.combo2.setSelectedItem("id", lastCombo2.id);
    this.updateInfo();
};
canvas.app.manor.view.controls.camp.MineResourceRenderer.prototype.sortOnTitle = function (a, b) {
    if (a.title.toLowerCase() > b.title.toLowerCase()) {
        return 1;
    } else if (a.title.toLowerCase() < b.title.toLowerCase()) {
        return -1;
    } else {
        return 0;
    }
};
canvas.app.manor.view.controls.camp.MineResourceRenderer.prototype.updateInfo = function () {
    var Conf = canvas.app.manor.model;
    var dCampMission = Conf.campData.missions[parseInt(this.combo1.selectedItem.type)];
    this.image1.clear();
    this.image2.clear();
    var dItem;
    if (dCampMission) {
        this.petView.index = parseInt(this.combo1.selectedItem.type);
        if (this.pet && this.combo2.selectedItem && this.combo2.selectedItem.id) {
            this.petView.data = this.pet;
            this.tmpPrice1 = Math.ceil(dCampMission.price1Amount * Math.max(0.5, 1 - this.pet.getSkill(canvas.data.manor.DCampData.PET_A_DISCIPLINE) / 1e3));
            this.title7.text = this.tmpPrice1 + " " + canvas.Translator.getText(2022);
            this.title7.color = Conf.campData.artifacts[dCampMission.price1Id].count < this.tmpPrice1 ? 16711680 : 9526348;
            this.image1.setImage(Conf.campData.artifacts[dCampMission.price1Id].image);
            this.tmpPrice2 = Math.ceil(dCampMission.price2Amount * Math.max(0.5, 1 - this.pet.getSkill(canvas.data.manor.DCampData.PET_A_DISCIPLINE) / 1e3));
            this.title8.text = this.tmpPrice2 + " " + canvas.Translator.getText(2022);
            if (dCampMission.price2Amount > 0) {
                this.title8.color = Conf.campData.artifacts[dCampMission.price2Id].count < this.tmpPrice2 ? 16711680 : 9526348;
            } else {
                this.title8.color = 9526348;
            }
            if (dCampMission.price2Amount > 0) {
                this.image2.setImage(Conf.campData.artifacts[dCampMission.price2Id].image);
            }
            this.title5.text =
                Math.floor((0.8 * this.pet.getSkillByIndex(parseInt(this.combo1.selectedItem.type))) / dCampMission.objects[this.combo2.selectedItem.id]) +
                "-" +
                Math.floor((1.2 * this.pet.getSkillByIndex(parseInt(this.combo1.selectedItem.type))) / dCampMission.objects[this.combo2.selectedItem.id]) +
                " " +
                canvas.Translator.getText(2022);
            this.tmpTime = Math.ceil(dCampMission.duration * Math.max(0.5, 1 - this.pet.getSkill(canvas.data.manor.DCampData.PET_A_STEALTH) / 1e3));
            this.updateTime();
        } else {
            this.clear();
            this.petView.title1.text = canvas.Translator.getText(338) + ":";
            this.petView.updateTitle(true);
        }
        this.item2.data = Conf.campData.artifacts[parseInt(this.combo2.selectedItem.id)];
        this.item2.buttonMode = false;
    } else {
        this.item2.data = null;
        this.clear();
    }
    this.updateButton();
};
canvas.app.manor.view.controls.camp.MineResourceRenderer.prototype.updateButton = function () {
    var Conf = canvas.app.manor.model;
    var dCampMission;
    if (this.pet && this.pet.mission) {
        this.combo1.enabled = false;
        this.combo2.enabled = false;
        this.petView.interactiveChildren = false;
        this.button.enabled = this.pet.missionIsComplete();
        this.button.setTitle(canvas.Translator.getText(192));
    } else {
        this.combo1.enabled = true;
        this.combo2.enabled = true;
        this.petView.interactiveChildren = true;
        dCampMission = Conf.campData.missions[parseInt(this.combo1.selectedItem.type)];
        this.button.enabled = false;
        this.button.setTitle(canvas.Translator.getText(2033));
        if (dCampMission && this.pet) {
            if (Conf.campData.artifacts[dCampMission.price1Id].count >= this.tmpPrice1 && (dCampMission.price2Id == 0 || Conf.campData.artifacts[dCampMission.price2Id].count >= this.tmpPrice2)) {
                if (Math.floor((1.2 * this.pet.getSkillByIndex(parseInt(this.combo1.selectedItem.type))) / dCampMission.objects[this.combo2.selectedItem.id]) > 0) this.button.enabled = true;
            }
        }
    }
};
canvas.app.manor.view.controls.camp.MineResourceRenderer.prototype.updateTime = function () {
    var time = canvas.app.manor.model.serverTime.getTime();
    if (this.pet && this.pet.mission) {
        if (time >= this.pet.mission.dtime) {
            if (this.state != 2) {
                this.state = 2;
                this.progress.setLabour(1, 1);
                this.progress.setTitle();
                this.updateInfo();
            }
        } else {
            this.progress.setLabour(time - this.pet.mission.stime, this.pet.mission.dtime - this.pet.mission.stime);
            this.progress.setTitle(time >= this.pet.mission.dtime ? "" : canvas.Functions.formatDate((this.pet.mission.dtime - time) * 1e3, "00", 3, false, true));
            if (this.state != 1) {
                this.state = 1;
            }
        }
    } else {
        if (this.state != 0) {
            this.state = 0;
        }
        if (this.tmpTime) {
            this.progress.setLabour(0, 0);
            this.progress.setTitle(canvas.Functions.formatDate(this.tmpTime * 1e3, "00", 3, false, true));
        }
    }
};
canvas.app.manor.view.controls.camp.MineResourceRenderer.prototype.clear = function () {
    this.tmpTime = 0;
    this.title7.text = "";
    this.title8.text = "";
    this.title5.text = "";
    this.progress.setLabour(0, 0);
    this.progress.setTitle();
    this.petView.data = null;
};
canvas.app.manor.view.controls.camp.MineResourceRenderer.prototype.combo1SelectHandler = function () {
    this.update(false);
};
canvas.app.manor.view.controls.camp.MineResourceRenderer.prototype.combo2SelectHandler = function () {
    this.updateInfo();
};
canvas.app.manor.view.controls.camp.MineResourceRenderer.prototype.petClickHandler = function () {
    if (parseInt(this.combo2.selectedItem.id) > 0) {
        canvas.EventManager.dispatchEvent(canvas.app.manor.Event.OPEN_CHOOSE_PET, null, { object: { index: this.index, excludePets: this.pet ? [this.pet.id] : null } });
    }
};
canvas.app.manor.view.controls.camp.MineResourceRenderer.prototype.petCrossClickHandler = function () {
    canvas.utils.HintManager.instance.hide();
    this.pet = null;
    this.update();
};
canvas.app.manor.view.controls.camp.MineResourceRenderer.prototype.image1OverHandler = function (value) {
    if (value != 0) value = 2;
    var dCampMission = canvas.app.manor.model.campData.missions[parseInt(this.combo1.selectedItem.type)];
    if (!dCampMission) return;
    if (dCampMission.price1Id) artifactAltSimple(canvas.app.manor.model.campData.artifacts[dCampMission.price1Id].id, value);
};
canvas.app.manor.view.controls.camp.MineResourceRenderer.prototype.image1OutHandler = function () {
    this.image1OverHandler(0);
};
canvas.app.manor.view.controls.camp.MineResourceRenderer.prototype.image2OverHandler = function (value) {
    if (value != 0) value = 2;
    var dCampMission = canvas.app.manor.model.campData.missions[parseInt(this.combo1.selectedItem.type)];
    if (!dCampMission) return;
    if (dCampMission.price2Id) artifactAltSimple(canvas.app.manor.model.campData.artifacts[dCampMission.price2Id].id, value);
};
canvas.app.manor.view.controls.camp.MineResourceRenderer.prototype.image2OutHandler = function () {
    this.image2OverHandler(0);
};
canvas.app.manor.view.controls.camp.MineResourceRenderer.prototype.buttonClickHandler = function () {
    var Conf = canvas.app.manor.model;
    var dCampMission = Conf.campData.missions[parseInt(this.combo1.selectedItem.type)];
    if (dCampMission && this.pet) {
        this.button.enabled = false;
        if (this.pet.mission) {
            Conf.campData.currentActiveMission = this.pet.mission;
            canvas.EventManager.dispatchEvent(canvas.app.manor.Event.USE_HUNT_CAMP_ACTION, null, { object: { building_action: "missionGetRewards", id: this.pet.mission.id } });
        } else {
            Conf.campData.currentActiveMission = new canvas.data.manor.DCampActiveMission();
            Conf.campData.currentActiveMission.id = dCampMission.id;
            Conf.campData.currentActiveMission.type = dCampMission.type;
            Conf.campData.currentActiveMission.objectId = parseInt(this.combo2.selectedItem.id);
            Conf.campData.currentActiveMission.pet1 = this.pet.id;
            Conf.campData.currentActiveMission.stime = Conf.serverTime.getTime();
            Conf.campData.currentActiveMission.dtime = Conf.campData.currentActiveMission.stime + this.tmpTime;
            Conf.campData.waitChangeCountArtifacts = {};
            if (this.tmpPrice1 > 0) Conf.campData.waitChangeCountArtifacts[dCampMission.price1Id] = this.tmpPrice1;
            if (this.tmpPrice2 > 0) Conf.campData.waitChangeCountArtifacts[dCampMission.price2Id] = this.tmpPrice2;
            canvas.EventManager.dispatchEvent(canvas.app.manor.Event.USE_HUNT_CAMP_ACTION, null, {
                object: { building_action: "missionSendPets", pet1: this.pet.id, mission_id: dCampMission.id, farm_id: parseInt(this.combo2.selectedItem.id) },
            });
        }
    }
};
canvas.app.manor.view.controls.camp.MineResources = function () {
    canvas.px.Container.call(this);
    this.inited = this.visible = false;
    var wall = this.addChild(new canvas.px.Mask(850, 410));
    this.list = this.addChild(new canvas.ui.List(canvas.ui.ListType.VERTICAL, 1));
    this.list._paddingV = 7;
    this.list.reverseLayers = true;
    this.list.setSize(850, 445);
    this.info = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_16_BOLD, 9526348, 800, 40, "left");
    this.info.text = canvas.Translator.getText(339);
};
canvas.app.manor.view.controls.camp.MineResources.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.manor.view.controls.camp.MineResources.prototype.update = function () {
    var Conf = canvas.app.manor.model;
    if (!Conf.campData.haveResourceMission()) return;
    this.inited = this.visible = true;
    if (Conf.campData.resourceSlots > 0) {
        this.removeIfExist(this.info);
    } else {
        this.addChild(this.info);
    }
    var pet;
    var a = [];
    var str;
    for (str in Conf.campData.pets) {
        pet = Conf.campData.pets[str];
        if (pet.mission && pet.mission.isResource()) {
            a.push(pet);
        }
    }
    var item;
    for (var i = 0; i < Conf.campData.resourceSlots; i++) {
        if (!this.list.items[i]) {
            this.list.add(new canvas.app.manor.view.controls.camp.MineResourceRenderer(i));
        }
        this.list.items[i].pet = a.length > 0 ? a.shift() : null;
    }
};
canvas.app.manor.view.controls.camp.MineResources.prototype.updateTime = function () {
    var i,
        len = this.list.items.length;
    for (i = 0; i < len; i++) {
        this.list.items[i].updateTime();
    }
};
canvas.app.manor.view.controls.camp.MineTalismanRenderer = function (type) {
    this._activeMission = null;
    Object.defineProperty(this, "activeMission", {
        get: function () {
            return this._activeMission;
        },
        set: function (value) {
            this._activeMission = value;
        },
    });
    canvas.ui.ListRenderer.call(this, null, 814, 130);
    this.state = 0;
    this.type = type;
    this.title8 = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_S_15_BOLD, 9526348, 300, 20, "left"));
    this.title8.position.set(2, 0);
    switch (canvas.app.manor.model.campData.getTypeByIndex(this.type)) {
        case canvas.data.manor.DCampData.PET_S_ITEMS:
            this.title8.text = canvas.Translator.getText(333);
            break;
        case canvas.data.manor.DCampData.PET_S_TALISMANS:
            this.title8.text = canvas.Translator.getText(331);
            break;
        case canvas.data.manor.DCampData.PET_S_VALUE:
            this.title8.text = canvas.Translator.getText(332);
            break;
    }
    this.container = this.addChild(new canvas.px.Container());
    this.container.y = 20;
    this.back = this.container.addChild(new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "tile_3"), 4, 4, 4, 4));
    this.back.width = this._width;
    this.back.height = this._height - 12;
    this.pets = new Array();
    var petView;
    for (var i = 0; i < canvas.data.manor.DCampData.ARTIFACT_PETS_MAX; i++) {
        petView = this.container.addChild(new canvas.app.manor.view.controls.camp.PetView(true));
        petView.position.set(26 + i * 90, 5);
        this.pets.push(petView);
        petView.index = this.type;
        petView.item.click = this.petClickHandler.bind(this);
        petView.crossButton.click = this.petCrossClickHandler.bind(this);
        petView.hideSkill = i != 1;
    }
    this.title4 = this.container.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD, 9526348, 124, 20, "center"));
    this.title4.position.set(389, 10);
    this.title4.text = canvas.Translator.getText(298);
    this.item2 = this.container.addChild(new canvas.app.manor.view.controls.elements.Item(false, true, "", "", false));
    this.item2.position.set(415, 26);
    this.title5 = this.container.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD, 9526348, 124, 20, "center"));
    this.title5.position.set(389, 97);
    this.title6 = this.container.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD, 9526348, 100, 20, "left"));
    this.title6.position.set(525, 8);
    this.title6.text = canvas.Translator.getText(121) + ":";
    this.title7 = this.container.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD, 9526348, 100, 20, "left"));
    this.title7.position.set(555, 32);
    this.button = this.container.addChild(new canvas.app.view.MainButton());
    this.button.position.set(650, 56);
    this.progress = this.container.addChild(new canvas.app.manor.view.controls.elements.LabourGreen(131));
    this.progress.position.set(660, 22);
    this.progress.setLabour(0, 0);
    this.image1 = this.container.addChild(new canvas.ui.Image());
    this.image1.position.set(525, 27);
    this.image1.interactive = true;
    this.image1.scale.set(0.4, 0.4);
    this.clear();
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.button, this.buttonClickHandler, this);
    this.image1.mouseover = this.image1OverHandler.bind(this);
    this.image1.mouseout = this.image1OutHandler.bind(this);
};
canvas.app.manor.view.controls.camp.MineTalismanRenderer.prototype = Object.create(canvas.ui.ListRenderer.prototype);
canvas.app.manor.view.controls.camp.MineTalismanRenderer.prototype.update = function () {
    var Conf = canvas.app.manor.model;
    var dCampMission;
    this.mission = Conf.campData.missions[this.type];
    this.selectedPets = [];
    this.petsCommonSkill = 0;
    this.petsCommonSkillDiscipline = 0;
    this.petsCommonSkillStealth = 0;
    var petView;
    var i,
        len = this.pets.length;
    for (i = 0; i < len; i++) {
        petView = this.pets[i];
        if (petView.data && !petView.locked) {
            if (this.selectedPets.indexOf(petView.data) < 0) {
                this.selectedPets.push(petView.data);
                this.petsCommonSkill += petView.data.getSkillByIndex(this.type);
                this.petsCommonSkillDiscipline += petView.data.getSkill(canvas.data.manor.DCampData.PET_A_DISCIPLINE);
                this.petsCommonSkillStealth += petView.data.getSkill(canvas.data.manor.DCampData.PET_A_STEALTH);
            } else {
                petView.data = null;
            }
        }
    }
    this.updateInfo();
};
canvas.app.manor.view.controls.camp.MineTalismanRenderer.prototype.updateInfo = function () {
    var Conf = canvas.app.manor.model;
    this.image1.clear();
    var dItem;
    var reward;
    this.tmpTime = 0;
    if (this.mission) {
        reward = this.mission.getRewardBySkill(this.petsCommonSkill);
        if (reward) {
            if (this.selectedPets.length) {
                this.pets[0].update();
                this.pets[1].title2.text = "<img src='" + this.pets[1].iconName + "' atlas='ui' yOffset='2'/> " + this.petsCommonSkill;
                this.tmpPrice = Math.ceil(this.mission.price1Amount * Math.max(0.5, 1 - this.petsCommonSkillDiscipline / 1e3) * this.selectedPets.length);
                this.title7.text = this.tmpPrice + " " + canvas.Translator.getText(2022);
                this.title7.color = Conf.campData.artifacts[this.mission.price1Id].count < this.tmpPrice ? 16711680 : 9526348;
                this.image1.setImage(Conf.campData.artifacts[this.mission.price1Id].image);
                this.title5.text = Math.floor((0.8 * this.petsCommonSkill) / reward.bonusDifficulty) + "-" + Math.floor((1.2 * this.petsCommonSkill) / reward.bonusDifficulty) + " " + canvas.Translator.getText(2022);
                this.tmpTime = Math.ceil(this.mission.duration * Math.max(0.5, 1 - this.petsCommonSkillStealth / 1e3));
                this.updateTime();
            } else {
                this.clear();
                this.pets[0].title1.text = canvas.Translator.getText(338) + ":";
                this.pets[1].updateTitle(true);
            }
            this.item2.data = reward.item;
            this.item2.buttonMode = false;
        }
    } else {
        this.item2.data = null;
        this.clear();
    }
    this.updateButton();
};
canvas.app.manor.view.controls.camp.MineTalismanRenderer.prototype.clear = function () {
    this.title7.text = "";
    this.title5.text = "";
    this.progress.setLabour(0, 0);
    this.progress.setTitle();
    var petView;
    var i,
        len = this.pets.length;
    for (i = 0; i < len; i++) {
        this.pets[i].data = null;
    }
    this.pets[1].title2.text = "";
};
canvas.app.manor.view.controls.camp.MineTalismanRenderer.prototype.updateButton = function () {
    var Conf = canvas.app.manor.model;
    var dCampMission;
    var petView;
    var reward;
    var i,
        len = this.pets.length;
    if (this.selectedPets.length && this.selectedPets[0].mission) {
        for (i = 0; i < len; i++) {
            this.pets[i].interactiveChildren = false;
        }
        this.button.enabled = this.selectedPets[0].missionIsComplete();
        this.button.setTitle(canvas.Translator.getText(192));
    } else {
        for (i = 0; i < len; i++) {
            this.pets[i].interactiveChildren = !this.pets[i].locked;
        }
        this.button.enabled = false;
        this.button.setTitle(canvas.Translator.getText(2033));
        if (this.mission && this.selectedPets.length) {
            reward = this.mission.getRewardBySkill(this.petsCommonSkill);
            if (reward && Conf.campData.artifacts[this.mission.price1Id].count >= this.tmpPrice) {
                if (Math.floor((1.2 * this.petsCommonSkill) / reward.bonusDifficulty) > 0) this.button.enabled = true;
            }
        }
    }
};
canvas.app.manor.view.controls.camp.MineTalismanRenderer.prototype.updateTime = function () {
    var time = canvas.app.manor.model.serverTime.getTime();
    if (this.activeMission) {
        if (time >= this.activeMission.dtime) {
            if (this.state != 2) {
                this.state = 2;
                this.progress.setLabour(1, 1);
                this.progress.setTitle();
                this.updateInfo();
            }
        } else {
            this.progress.setLabour(time - this.activeMission.stime, this.activeMission.dtime - this.activeMission.stime);
            this.progress.setTitle(time >= this.activeMission.dtime ? "" : canvas.Functions.formatDate((this.activeMission.dtime - time) * 1e3, "00", 3, false, true));
            if (this.state != 1) {
                this.state = 1;
            }
        }
    } else {
        if (this.state != 0) {
            this.state = 0;
        }
        if (this.tmpTime) {
            this.progress.setLabour(0, 0);
            this.progress.setTitle(canvas.Functions.formatDate(this.tmpTime * 1e3, "00", 3, false, true));
        }
    }
};
canvas.app.manor.view.controls.camp.MineTalismanRenderer.prototype.petClickHandler = function (event) {
    var excludePets = null;
    var i,
        len = this.pets.length,
        petView;
    for (i = 0; i < len; i++) {
        petView = this.pets[i];
        if (petView.data) {
            if (!excludePets) excludePets = new Array();
            excludePets.push(petView.data.id);
        }
    }
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.OPEN_CHOOSE_PET, null, { object: { index: this.pets.indexOf(event.currentTarget.parent), type: this.type, excludePets: excludePets } });
};
canvas.app.manor.view.controls.camp.MineTalismanRenderer.prototype.petCrossClickHandler = function (event) {
    canvas.utils.HintManager.instance.hide();
    var petView = event.currentTarget.parent.parent.parent;
    if (petView) {
        petView.data = null;
        this.update();
    }
};
canvas.app.manor.view.controls.camp.MineTalismanRenderer.prototype.image1OverHandler = function (value) {
    if (!this.mission) return;
    if (value != 0) value = 2;
    if (this.mission.price1Id) artifactAltSimple(canvas.app.manor.model.campData.artifacts[this.mission.price1Id].id, value);
};
canvas.app.manor.view.controls.camp.MineTalismanRenderer.prototype.image1OutHandler = function () {
    this.image1OverHandler(0);
};
canvas.app.manor.view.controls.camp.MineTalismanRenderer.prototype.buttonClickHandler = function () {
    var Conf = canvas.app.manor.model;
    var obj;
    var i;
    if (this.mission && this.selectedPets.length) {
        this.button.enabled = false;
        if (this.activeMission) {
            Conf.campData.currentActiveMission = this.activeMission;
            canvas.EventManager.dispatchEvent(canvas.app.manor.Event.USE_HUNT_CAMP_ACTION, null, { object: { building_action: "missionGetRewards", id: this.activeMission.id } });
        } else {
            Conf.campData.currentActiveMission = new canvas.data.manor.DCampActiveMission();
            Conf.campData.currentActiveMission.id = this.mission.id;
            Conf.campData.currentActiveMission.type = this.mission.type;
            Conf.campData.currentActiveMission.pet1 = this.selectedPets[0].id;
            Conf.campData.currentActiveMission.pet2 = this.selectedPets[1] ? this.selectedPets[1].id : 0;
            Conf.campData.currentActiveMission.pet3 = this.selectedPets[2] ? this.selectedPets[2].id : 0;
            Conf.campData.currentActiveMission.stime = Conf.serverTime.getTime();
            Conf.campData.currentActiveMission.dtime = Conf.campData.currentActiveMission.stime + this.tmpTime;
            Conf.campData.waitChangeCountArtifacts = {};
            if (this.tmpPrice > 0) Conf.campData.waitChangeCountArtifacts[this.mission.price1Id] = this.tmpPrice;
            obj = { building_action: "missionSendPets", mission_id: this.mission.id };
            var len = this.selectedPets.length;
            for (i = 0; i < len; i++) {
                obj["pet" + (i + 1).toString()] = this.selectedPets[i].id;
            }
            canvas.EventManager.dispatchEvent(canvas.app.manor.Event.USE_HUNT_CAMP_ACTION, null, { object: obj });
        }
    }
};
canvas.app.manor.view.controls.camp.MineTalismans = function () {
    canvas.px.Container.call(this);
    this.inited = this.visible = false;
    this.list = this.addChild(new canvas.ui.List(canvas.ui.ListType.VERTICAL, 1));
    this.list._paddingV = 7;
    this.list.setSize(850, 415);
    for (var i = 0; i < canvas.data.manor.DCampData.ARTIFACT_TYPE_COUNT; i++) {
        this.list.add(new canvas.app.manor.view.controls.camp.MineTalismanRenderer(i + 4), false);
    }
    this.list.update();
};
canvas.app.manor.view.controls.camp.MineTalismans.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.manor.view.controls.camp.MineTalismans.prototype.update = function () {
    var Conf = canvas.app.manor.model;
    if (!Conf.campData.haveArtifactMission()) return;
    this.inited = this.visible = true;
    var renderer;
    var pet;
    var obj = {};
    for (var str in Conf.campData.pets) {
        pet = Conf.campData.pets[str];
        if (pet.mission && pet.mission.isArtifact()) {
            if (!obj[pet.mission.type]) {
                obj[pet.mission.type] = [];
            }
            obj[pet.mission.type].push(pet);
        }
    }
    var i,
        j,
        len = this.list.items.length;
    for (i = 0; i < len; i++) {
        renderer = this.list.items[i];
        for (j = 0; j < canvas.data.manor.DCampData.ARTIFACT_PETS_MAX; j++) {
            renderer.pets[j].data = obj[renderer.type] && obj[renderer.type][j] ? obj[renderer.type][j] : null;
            renderer.pets[j].locked = j >= Conf.campData.artifactSlots;
        }
        renderer.activeMission = obj[renderer.type] ? obj[renderer.type][0].mission : null;
        renderer.update();
    }
};
canvas.app.manor.view.controls.camp.MineTalismans.prototype.updateTime = function () {
    var i,
        len = this.list.items.length;
    for (i = 0; i < len; i++) {
        this.list.items[i].updateTime();
    }
};
canvas.app.manor.view.controls.camp.PetLineRenderer = function (w, data) {
    this._selectedIndex = 0;
    Object.defineProperty(this, "selectedIndex", {
        get: function () {
            return this._selectedIndex;
        },
        set: function (value) {
            this._selectedIndex = value;
            this.selector.x = this.fields[this._selectedIndex].x + 1;
        },
    });
    canvas.ui.ListRenderer.call(this, null, w, 100);
    var wall = this.addChild(new canvas.px.Mask(this._width - 20, this._height, 0, 0));
    this.overWall = new canvas.px.Mask(this._width - 20, this._height, 16303994, 1);
    wall = this.addChild(new canvas.px.Mask(this._width - 20, 1, 14065526, 1));
    wall.y = this._height - 1;
    this.title = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD, 9526348, canvas.app.manor.view.controls.ChoosePetWin.FIRST_CELL_WIDTH, 20, "left"));
    this.title.position.set(10, 8);
    this.imagesContainer = this.addChild(new canvas.px.Container());
    this.image = this.imagesContainer.addChild(new canvas.ui.Image());
    this.image.position.set(10, 26);
    this.images = new Array();
    var i;
    var img;
    for (i = 0; i < 4; i++) {
        img = this.imagesContainer.addChild(new canvas.ui.Image());
        img.position.set(i % 2 == 0 ? 80 : 110, i < 2 ? 26 : 56);
        img.scale.x = img.scale.y = 0.48;
        this.images.push(img);
        img.mouseover = this.imgOverHandler.bind(this);
        img.mouseout = this.imgOutHandler.bind(this);
    }
    this.selector = this.addChild(new canvas.px.Mask(canvas.app.manor.view.controls.ChoosePetWin.CELL_WIDTH - 2, this._height - 2, 16775110, 1));
    this.selector.y = 1;
    this.fields = new Array();
    var field;
    var shape;
    for (i = 0; i <= canvas.data.manor.DCampData.TYPE_COUNT; i++) {
        shape = this.addChild(new canvas.px.Graphics());
        shape.lineStyle(1, 14065526);
        shape.moveTo(0, 0);
        shape.lineTo(0, this._height - 1);
        shape.x = canvas.app.manor.view.controls.ChoosePetWin.FIRST_CELL_WIDTH - 5 + i * canvas.app.manor.view.controls.ChoosePetWin.CELL_WIDTH;
        if (i != canvas.data.manor.DCampData.TYPE_COUNT) {
            field = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD, 9526348, canvas.app.manor.view.controls.ChoosePetWin.CELL_WIDTH, 20, "center"));
            field.position.set(shape.x, 40);
            this.fields.push(field);
        }
    }
    this.buttonMode = true;
    this.data = data;
    this.interactiveChildren = true;
};
canvas.app.manor.view.controls.camp.PetLineRenderer.prototype = Object.create(canvas.ui.ListRenderer.prototype);
canvas.app.manor.view.controls.camp.PetLineRenderer.prototype.update = function () {
    if (this.data) {
        this.title.text = this.data.title;
        this.image.setImage(this.data.image);
        var img,
            i,
            len = this.images.length;
        for (i = 0; i < len; i++) {
            img = this.images[i];
            if (this.data.artifacts[i]) {
                img.setImage(this.data.artifacts[i].image);
                img.name = this.data.artifacts[i].aid;
            } else {
                img.clear();
                img.name = "";
            }
        }
        for (i = 0; i < canvas.data.manor.DCampData.TYPE_COUNT; i++) {
            this.fields[i].text = this.data.getSkillByIndex(i + 1);
        }
    }
};
canvas.app.manor.view.controls.camp.PetLineRenderer.prototype.clickHandler = function () {
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.CLOSE_CHOOSE_PET, null, { object: this.data });
    this.outHandler();
    this.imgOutHandler();
};
canvas.app.manor.view.controls.camp.PetLineRenderer.prototype.overHandler = function (event) {
    this.addChildAt(this.overWall, 0);
};
canvas.app.manor.view.controls.camp.PetLineRenderer.prototype.outHandler = function () {
    this.removeIfExist(this.overWall);
};
canvas.app.manor.view.controls.camp.PetLineRenderer.prototype.imgOverHandler = function (event) {
    if (event.currentTarget.name) {
        this.curOverImage = event.currentTarget.name;
        artifactAltSimple(this.curOverImage, 2);
    }
};
canvas.app.manor.view.controls.camp.PetLineRenderer.prototype.imgOutHandler = function (event) {
    if (this.curOverImage) {
        artifactAltSimple(this.curOverImage, 0);
        this.curOverImage = null;
    }
};
canvas.app.manor.view.controls.camp.PetLineRenderer.prototype.destroy = function () {
    var i,
        len = this.images.length;
    for (i = 0; i < len; i++) {
        img = this.images[i];
        img.mouseover = null;
        img.mouseout = null;
    }
    canvas.ui.ListRenderer.prototype.destroy.call(this);
};
canvas.app.manor.view.controls.camp.PetView = function (showCross) {
    this._locked = false;
    Object.defineProperty(this, "locked", {
        get: function () {
            return this._locked;
        },
        set: function (value) {
            this._locked = value;
            this.lockIcon.visible = this._locked;
            this.interactiveChildren = !this._locked;
        },
    });
    this._hideSkill = false;
    Object.defineProperty(this, "hideSkill", {
        get: function () {
            return this._hideSkill;
        },
        set: function (value) {
            this._hideSkill = value;
            if (this._hideSkill) {
                this.removeIfExist(this.title2);
            } else {
                this.addChild(this.title2);
            }
        },
    });
    this._data = null;
    Object.defineProperty(this, "data", {
        get: function () {
            return this._data;
        },
        set: function (value) {
            this._data = value;
            this.update();
        },
    });
    this._index = 0;
    Object.defineProperty(this, "index", {
        get: function () {
            return this._index;
        },
        set: function (value) {
            this._index = value;
            this.iconName = "camp_icons/camp_icon_" + (this._index - 1);
            this.updateTitle();
        },
    });
    canvas.px.Container.call(this);
    this.title1 = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD, 9526348, 124, 18, "center"));
    this.title1.position.set(-26, 2);
    this.item = this.addChild(new canvas.app.manor.view.controls.elements.Item(false, false));
    this.item.y = 18;
    this.title2 = this.addChild(new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_11_BOLD, canvas.Const.FONT_TAHOMA_11_BOLD, 9526348, 108, 18, "center"));
    this.title2.position.set(-18, 89);
    this.iconName = "";
    this.lockIcon = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "lock_icon")));
    this.lockIcon.position.set(-2, 14);
    this.lockIcon.visible = false;
    if (showCross) {
        this.crossButton = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "delete_button"));
        this.crossButton.position.set(43, 2);
        canvas.EventManager.dispatchEvent(canvas.app.manor.Event.HINT_ADD, null, { target: this.crossButton, params: new canvas.utils.HintParams(new canvas.app.view.MappingHint(canvas.Translator.getText(1e3))) });
        this.item.container.mouseover = this.overHandler.bind(this);
        this.item.container.mouseout = this.outHandler.bind(this);
    }
    this.update();
};
canvas.app.manor.view.controls.camp.PetView.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.manor.view.controls.camp.PetView.prototype.update = function () {
    if (this.data) {
        this.item.data = this.data.item;
        this.title1.text = this.data.title;
    } else {
        this.item.data = null;
        this.item.buttonMode = true;
        this.title1.text = "";
        this.outHandler();
    }
    this.updateTitle();
};
canvas.app.manor.view.controls.camp.PetView.prototype.updateTitle = function (showZeroIcon) {
    var str = "<img src='" + this.iconName + "' atlas='ui' yOffset='2'/> ";
    if (this.data) {
        this.title2.text = str + this.data.getSkillByIndex(this.index);
    } else {
        this.title2.text = (showZeroIcon ? str : "") + "0";
    }
};
canvas.app.manor.view.controls.camp.PetView.prototype.overHandler = function () {
    if (this.data) this.item.container.addChild(this.crossButton);
};
canvas.app.manor.view.controls.camp.PetView.prototype.outHandler = function () {
    if (this.crossButton) this.item.container.removeIfExist(this.crossButton);
};
canvas.app.manor.view.controls.camp.SortButtonRenderer = function (id) {
    this._sortValue = 0;
    Object.defineProperty(this, "sortValue", {
        get: function () {
            return this._sortValue;
        },
        set: function (value) {
            this._sortValue = value;
            this.update();
        },
    });
    canvas.ui.ListRenderer.call(this, null, canvas.app.manor.view.controls.ChoosePetWin.CELL_WIDTH, canvas.app.manor.view.controls.ChoosePetWin.CELL_WIDTH);
    this.id = id;
    this.selector = this.addChild(new canvas.px.Mask(canvas.app.manor.view.controls.ChoosePetWin.CELL_WIDTH, 60, 16775110, 1));
    this.selector.position.set(1, -2);
    this.selector.visible = false;
    this.button = new canvas.ui.Button(
        canvas.ResourceLoader.getImage("ui", "camp_icons/button_" + this.id + "/camp_button_" + this.id + "_base"),
        canvas.ResourceLoader.getImage("ui", "camp_icons/button_" + this.id + "/camp_button_" + this.id + "_over"),
        canvas.ResourceLoader.getImage("ui", "camp_icons/button_" + this.id + "/camp_button_" + this.id + "_down"),
        canvas.ResourceLoader.getImage("ui", "camp_icons/button_" + this.id + "/camp_button_" + this.id + "_disabled")
    );
    this.addChild(this.button);
    this.button.x = 8;
    var sprite = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "line_0")));
    if (this.id == canvas.data.manor.DCampData.TYPE_COUNT - 1) {
        sprite = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "line_0")));
        sprite.x = canvas.app.manor.view.controls.ChoosePetWin.CELL_WIDTH;
    }
    this.arrowUp = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "filter_sort_arrow")));
    this.arrowUp.scale.y = -1;
    this.arrowUp.position.set(60, 48);
    this.arrowDown = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "filter_sort_arrow")));
    this.arrowDown.position.set(60, 48);
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.HINT_ADD, null, { target: this, params: new canvas.utils.HintParams(new canvas.app.view.MappingHint(canvas.app.manor.model.campData.getTitleByIndex(this.id + 1))) });
};
canvas.app.manor.view.controls.camp.SortButtonRenderer.prototype = Object.create(canvas.ui.ListRenderer.prototype);
canvas.app.manor.view.controls.camp.SortButtonRenderer.prototype.update = function () {
    switch (this.sortValue) {
        case 1:
            this.arrowUp.alpha = 1;
            this.arrowDown.alpha = 0.3;
            break;
        case -1:
            this.arrowUp.alpha = 0.3;
            this.arrowDown.alpha = 1;
            break;
        default:
            this.arrowUp.alpha = 0.3;
            this.arrowDown.alpha = 0.3;
            break;
    }
    this.selector.visible = this.sortValue != 0;
};
canvas.app.manor.view.controls.camp.SortButtonRenderer.prototype.changeSort = function () {
    this.sortValue = this.sortValue == 1 ? -1 : 1;
};
canvas.app.manor.view.controls.elements.ButtonImage = function (title, image, w) {
    canvas.app.view.MainButton.call(this);
    if (w == undefined) w = 150;
    if (image == undefined) image = 1;
    this.button2 = new canvas.ui.Button(canvas.ResourceLoader.getImage("ui", "button_0"), canvas.ResourceLoader.getImage("ui", "button_0_over"), canvas.ResourceLoader.getImage("ui", "button_0_down"));
    this.sprite.addChildAt(this.button2, 0);
    this.button2.sprite.mousedown = null;
    this.button2.sprite.mouseover = null;
    this.button2.sprite.mouseout = null;
    this.button2.sprite.mouseup = null;
    this.button2.sprite.click = null;
    this.setTitle(title);
    this.setSize(w);
    var image = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "manor_button_icon_" + image));
    this.addChild(image);
    image.interactive = false;
    this.button2.position.set(Math.round((w - this.button2.width) * 0.5), -40);
    image.position.set(this.button2.x + 11, this.button2.y + 2);
};
canvas.app.manor.view.controls.elements.ButtonImage.prototype = Object.create(canvas.app.view.MainButton.prototype);
canvas.app.manor.view.controls.elements.ButtonImage.prototype.handlerOver = function (mouseData) {
    canvas.ui.Button.prototype.handlerOver.call(this, mouseData);
    this.button2.handlerOver(mouseData);
};
canvas.app.manor.view.controls.elements.ButtonImage.prototype.handlerOut = function (mouseData) {
    canvas.ui.Button.prototype.handlerOut.call(this, mouseData);
    this.button2.handlerOut(mouseData);
};
canvas.app.manor.view.controls.elements.ButtonImage.prototype.handlerDown = function (mouseData) {
    canvas.ui.Button.prototype.handlerDown.call(this, mouseData);
    this.button2.handlerDown(mouseData);
};
canvas.app.manor.view.controls.elements.ButtonImage.prototype.handlerUp = function (mouseData) {
    canvas.ui.Button.prototype.handlerUp.call(this, mouseData);
    this.button2.handlerUp(mouseData);
};
canvas.app.manor.view.controls.elements.ButtonImage.prototype.update = function () {
    if (this.button2) this.button2.enabled = this.enabled;
};
canvas.app.manor.view.controls.elements.CementInput = function (itemData) {
    canvas.px.Container.call(this);
    this.itemData = itemData;
    var back = this.addChild(new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "tile_3"), 4, 4, 4, 4));
    back.width = 173;
    back.height = 81;
    var title = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD, 7026733, 85, 38, "left"));
    title.position.set(82, 11);
    title.text = this.itemData ? this.itemData.title : canvas.Translator.getText(169);
    this.field = this.addChild(new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_11, canvas.Const.FONT_TAHOMA_11_BOLD, 7026733, 85, 20, "left"));
    this.field.position.set(82, 55);
    this.item = this.addChild(new canvas.app.manor.view.controls.elements.Item(false, true));
    this.item.position.set(5, 5);
    this.item.data = this.itemData ? this.itemData : new canvas.data.manor.DItem({ id: canvas.app.manor.model.cementID, picture: canvas.app.manor.model.cementImage, title: canvas.Translator.getText(169) });
    this.item.buttonMode = false;
    this.update(0, 0);
};
canvas.app.manor.view.controls.elements.CementInput.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.manor.view.controls.elements.CementInput.prototype.clear = function () {
    this.update(0);
};
canvas.app.manor.view.controls.elements.CementInput.prototype.update = function (value1, value2) {
    this.value1 = value1 == undefined ? this.value1 : value1;
    this.value2 = value2 == undefined ? canvas.app.manor.model.user.cement : value2;
    this.field.text = "<b>" + this.value1 + "</b> " + canvas.Translator.getText(196) + " <font color='#" + (this.testRequires() || this.value1 == 0 ? "446c00" : "bc0000") + "'><b>" + this.value2 + "</b></font>";
};
canvas.app.manor.view.controls.elements.CementInput.prototype.testRequires = function () {
    var b = this.value1 > 0;
    if (this.value1 > this.value2) {
        b = false;
    }
    return b;
};
canvas.app.manor.view.controls.elements.CementInput.prototype.destroy = function () {
    if (this.parent) this.parent.removeChild(this);
    canvas.px.Container.prototype.destroy.apply(this, [{ children: true }]);
};
canvas.app.manor.view.controls.elements.Checker = function () {
    this._enabled = true;
    Object.defineProperty(this, "enabled", {
        get: function () {
            return this._enabled;
        },
        set: function (value) {
            this._enabled = value;
            this.filters = this._enabled ? null : [canvas.Functions.getBlackAndWhite()];
            this.interactiveChildren = this._enabled;
        },
        configurable: true,
    });
    this._checked = false;
    Object.defineProperty(this, "checked", {
        get: function () {
            return this._checked;
        },
        set: function (value) {
            this._checked = value;
            this.current = this._checked ? 1 : 0;
        },
    });
    var back = new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "tile_4"), 6, 0, 6, 0);
    var drag = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "checker"));
    canvas.ui.Scroll.call(this, canvas.ui.ScrollType.HORIZONTAL, null, null, back, drag);
    this.backPadding = 10;
    this.setSize(100, 13);
    this.max = 1;
    this.shape.buttonMode = true;
};
canvas.app.manor.view.controls.elements.Checker.prototype = Object.create(canvas.ui.Scroll.prototype);
canvas.app.manor.view.controls.elements.Checker.prototype.update = function () {
    canvas.ui.Scroll.prototype.update.call(this);
    var value = this.current > 0 ? true : false;
    if (value != this._checked) {
        this._checked = value;
        canvas.EventManager.dispatchEvent(canvas.ui.Event.EVENT_CHANGE, this);
    }
};
canvas.app.manor.view.controls.elements.ChoseBuildingItem = function (data) {
    canvas.ui.ListRenderer.call(this, null, 400, 200);
    this.back = this.addChild(new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "tile_back"), 20, 20, 20, 20));
    this.back.width = 400;
    this.back.height = 200;
    this.image = this.addChild(new canvas.ui.Image());
    this.field = this.addChild(new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_12, canvas.Const.FONT_TAHOMA_12_BOLD, 7026733, 215, 200, "left"));
    this.field.position.set(175, 4);
    this.buildButton = this.addChild(new canvas.app.view.MainButton());
    this.buildButton.setTitle(canvas.Translator.getText(153));
    this.buildButton.x = 205;
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.buildButton, this.buildClickHandler, this);
    this.data = data;
};
canvas.app.manor.view.controls.elements.ChoseBuildingItem.prototype = Object.create(canvas.ui.ListRenderer.prototype);
canvas.app.manor.view.controls.elements.ChoseBuildingItem.prototype.update = function () {
    this.image.setImage(this.data.picture + ".png");
    this.field.text =
        "<font color='#B00101'><b>" +
        this.data.title +
        "</b></font><br/>" +
        this.data.desc +
        "<br/><br/><b><font face='" +
        canvas.Const.FONT_TAHOMA_11 +
        "'>" +
        canvas.Translator.getText(231) +
        ": <font face='" +
        canvas.Const.FONT_TAHOMA_11_BOLD +
        "' color='#0066cc'>" +
        this.data.cost +
        "</font></font></b> <img src='energy_icon' atlas='ui' yOffset='2'/>";
    this.buildButton.y = this.field.y + this.field.textHeight + 4;
    this._height = Math.max(150, this.buildButton.y + 40);
    this.back.height = this._height;
};
canvas.app.manor.view.controls.elements.ChoseBuildingItem.prototype.buildClickHandler = function () {
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.SELECT_BUILDING, null, { params: "chooser", object: this.data });
};
canvas.app.manor.view.controls.elements.Combo = function (w, h) {
    var headerBack = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "combo_header"), [4, 0, 22, 0]);
    var headerRenderer = new canvas.app.manor.view.controls.elements.ComboHeaderRenderer();
    var listBack = new canvas.px.RoundRect(16376749, 1, w, h, 5, 5, false, true, 0, 0.5);
    canvas.ui.ComboBox.call(this, headerBack, headerRenderer, listBack, canvas.app.manor.view.controls.elements.ComboListRenderer, canvas.ui.ComboBoxType.DOWN, scroll);
    this.list._scrollMaxAdd = 5;
    this.list.scroll = new canvas.app.manor.view.controls.elements.Scroll(this.list.container);
    this.setSize(w || 190, h || 130);
    this.list.paddingV = 0;
    this.list.paddingH = -6;
};
canvas.app.manor.view.controls.elements.Combo.prototype = Object.create(canvas.ui.ComboBox.prototype);
canvas.app.manor.view.controls.elements.ComboHeaderRenderer = function (data) {
    canvas.ui.ListRenderer.call(this, data);
    this.title = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD, 7026733, 100, 16, "left", undefined, undefined, undefined, true);
    this.addChild(this.title);
    this.title.position.set(4, 6);
    this.interactive = false;
    this.msk = new canvas.px.Mask(100, 20);
    this.addChild(this.msk);
    this.mask = this.msk;
};
canvas.app.manor.view.controls.elements.ComboHeaderRenderer.prototype = Object.create(canvas.ui.ListRenderer.prototype);
canvas.app.manor.view.controls.elements.ComboHeaderRenderer.prototype.update = function () {
    if (this.title) {
        this.title.text = this.data ? this.data.title : "";
        this.title.setSize(this._width);
        this.msk.setSize(this._width - 20);
    }
};
canvas.app.manor.view.controls.elements.ComboListRenderer = function (data) {
    canvas.ui.ListRenderer.call(this, data);
    this.title = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD, 7026733, 100, 14, "left", undefined, undefined, undefined, true);
    this.addChild(this.title);
    this.title.position.set(4, 1);
    this._height = 14;
    this.selector = new canvas.px.Mask(100, 20, 13421772, 1);
    this.buttonMode = true;
};
canvas.app.manor.view.controls.elements.ComboListRenderer.prototype = Object.create(canvas.ui.ListRenderer.prototype);
canvas.app.manor.view.controls.elements.ComboListRenderer.prototype.update = function () {
    if (this.selector) {
        this.selector.setSize(this._width, 16);
    }
    if (this.title) {
        this.title.text = this.data ? this.data.title : "";
        this.title.setSize(this._width - 10);
    }
};
canvas.app.manor.view.controls.elements.ComboListRenderer.prototype.overHandler = function () {
    this.addChildAt(this.selector, 0);
};
canvas.app.manor.view.controls.elements.ComboListRenderer.prototype.outHandler = function () {
    if (this.selector.parent) this.removeChild(this.selector);
};
canvas.app.manor.view.controls.elements.Dragger = function (wheelTarget) {
    var line = new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "tile_1"), 4, 0, 4, 0);
    var drag = new canvas.px.Container();
    this.leftArrow = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "pager_minus"));
    this.rightArrow = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "pager_plus"));
    drag.addChild(this.leftArrow);
    drag.addChild(this.rightArrow);
    this.rightArrow.x = this.leftArrow.width - 5;
    canvas.ui.Scroll.call(this, canvas.ui.ScrollType.HORIZONTAL, null, null, line, drag, wheelTarget);
    this.backPadding = 5;
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.leftArrow, this.minusClick, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.rightArrow, this.plusClick, this);
};
canvas.app.manor.view.controls.elements.Dragger.prototype = Object.create(canvas.ui.Scroll.prototype);
canvas.app.manor.view.controls.elements.Dragger.prototype.plusClick = function () {
    if (!this.wasDragged) this.plusClickHandler();
};
canvas.app.manor.view.controls.elements.Dragger.prototype.minusClick = function () {
    if (!this.wasDragged) this.minusClickHandler();
};
canvas.app.manor.view.controls.elements.Dragger.prototype.update = function () {
    canvas.ui.Scroll.prototype.update.call(this);
    this.dragView.visible = true;
};
canvas.app.manor.view.controls.elements.Dragger.prototype.destroy = function () {
    canvas.EventManager.removeEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.leftArrow, this.minusClick, this);
    canvas.EventManager.removeEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.rightArrow, this.plusClick, this);
    canvas.ui.Scroll.prototype.destroy.call(this);
};
canvas.app.manor.view.controls.elements.Energy = function (w) {
    this._energy = 0;
    Object.defineProperty(this, "energy", {
        get: function () {
            return this._energy;
        },
        set: function (value) {
            this.update(value);
        },
    });
    canvas.px.Container.call(this);
    this.field = this.addChild(new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_11_BOLD, canvas.Const.FONT_TAHOMA_11_BOLD, 26316, w ? w : 40, 20, "left", null, 0, 0));
};
canvas.app.manor.view.controls.elements.Energy.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.manor.view.controls.elements.Energy.prototype.update = function (value) {
    this._energy = value;
    this.field.text = value > 0 ? value + " <img src='energy_icon' atlas='ui' yOffset='2'/>" : "";
};
canvas.app.manor.view.controls.elements.FilterItemRenderer = function (sortData, direction) {
    canvas.ui.ListRenderer.call(this, null, 213, 20);
    var w = 213;
    this.back = this.addChild(new canvas.px.Mask(w + 1, 20, 15585423, 1));
    this.back.visible = false;
    this.back.x = -14;
    this.field = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_12_BOLD, 7026733, w - 30, 20, "left"));
    this.field.position.set(10, 2);
    this.arrow = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "filter_sort_arrow")));
    this.arrow.pivot = new canvas.px.Point(Math.round(this.arrow.width * 0.5), Math.round(this.arrow.height * 0.5));
    this.arrow.y = 10;
    this.arrow.scale.y = direction ? 1 : -1;
    this.data = sortData;
    this.buttonMode = true;
    this.selected = false;
    this.data = sortData;
};
canvas.app.manor.view.controls.elements.FilterItemRenderer.prototype = Object.create(canvas.ui.ListRenderer.prototype);
canvas.app.manor.view.controls.elements.FilterItemRenderer.prototype.update = function () {
    this.field.text = this.data.title;
};
canvas.app.manor.view.controls.elements.FilterItemRenderer.prototype.updateSelection = function () {
    this.arrow.visible = this.selected;
};
canvas.app.manor.view.controls.elements.FilterItemRenderer.prototype.setSortDirection = function (value) {
    this.arrow.scale.y = value ? 1 : -1;
};
canvas.app.manor.view.controls.elements.FilterItemRenderer.prototype.overHandler = function () {
    this.back.visible = true;
    this.field.color = 10616832;
};
canvas.app.manor.view.controls.elements.FilterItemRenderer.prototype.outHandler = function () {
    this.back.visible = false;
    this.field.color = 7026733;
};
canvas.app.manor.view.controls.elements.FilterSortControl = function (sortDataValues, filterText, sortType, sortDirection, defaultSearchText, inputSize) {
    this._filterText = "";
    Object.defineProperty(this, "filterText", {
        get: function () {
            return this._filterText;
        },
        set: function (value) {
            this._filterText = value;
            this.input.text = this._filterText;
        },
    });
    this._sortType = "";
    Object.defineProperty(this, "sortType", {
        get: function () {
            return this._sortType;
        },
        set: function (value) {
            this._sortType = value;
        },
    });
    this._sortDirection = "";
    Object.defineProperty(this, "sortDirection", {
        get: function () {
            return this._sortDirection;
        },
        set: function (value) {
            this._sortDirection = value;
        },
    });
    this._mode = "";
    Object.defineProperty(this, "mode", {
        get: function () {
            return this._mode;
        },
        set: function (value) {
            this._mode = value;
            this.update();
        },
    });
    canvas.px.Container.call(this);
    if (filterText == undefined) filterText = "";
    if (sortType == undefined) sortType = "";
    if (sortDirection == undefined) sortDirection = false;
    if (defaultSearchText == undefined) defaultSearchText = "Search here...";
    if (inputSize == undefined) inputSize = 199;
    this.sortType = sortType;
    this.sortDirection = sortDirection;
    var sortData;
    var renderer;
    var b;
    var stretch;
    this.container = this.addChild(new canvas.px.Container());
    this.list = new canvas.ui.List(canvas.ui.ListType.VERTICAL, 1);
    this.list._paddingV = 0;
    this.list.container.x = 5;
    var i,
        len = sortDataValues.length;
    for (i = 0; i < len; i++) {
        sortData = sortDataValues[i];
        renderer = new canvas.app.manor.view.controls.elements.FilterItemRenderer(sortData, sortDirection);
        this.list.add(renderer, false);
        if (sortData.type == this.sortType) renderer.selected = true;
    }
    this.list.update();
    this.list.position.set(-209, 30);
    this.list.setSize(213, len * 20);
    this.backFilter = this.container.addChild(new canvas.px.Container());
    stretch = this.backFilter.addChild(new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "tile_5"), 8, 5, 29, 9));
    stretch.width = 220;
    stretch.height = this.list.height + 11;
    b = this.backFilter.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "tile_5_1")));
    b.x = stretch.width - b.width;
    stretch.y = b.height;
    this.backFilter.position.set(-this.backFilter.width + 3, -1);
    this.backFilter.visible = false;
    this.backSearch = this.container.addChild(new canvas.px.Container());
    stretch = this.backSearch.addChild(new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "tile_5"), 8, 5, 29, 9));
    stretch.width = 205;
    stretch.height = 30;
    b = this.backSearch.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "tile_5_1")));
    b.x = stretch.width - b.width;
    stretch.y = b.height;
    this.backSearch.position.set(-this.backSearch.width - 25, -1);
    this.backSearch.visible = false;
    this.filterButton = this.container.addChild(new canvas.ui.Button(canvas.ResourceLoader.getImage("ui", "filter_sort_button"), canvas.ResourceLoader.getImage("ui", "filter_sort_button_over")));
    this.filterButton.x = -this.filterButton.width;
    this.searchButton = this.container.addChild(new canvas.ui.Button(canvas.ResourceLoader.getImage("ui", "filter_search_button"), canvas.ResourceLoader.getImage("ui", "filter_search_button_over")));
    this.searchButton.x = this.filterButton.x - this.searchButton.width - 5;
    this.container.addChild(this.list);
    this.input = this.container.addChild(
        new canvas.app.manor.view.controls.elements.Input(
            "left",
            true,
            inputSize,
            new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "tile_input_base"), 6, 0, 6, 0),
            new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "tile_input_down"), 6, 0, 6, 0),
            new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "tile_input_over"), 6, 0, 6, 0),
            defaultSearchText,
            false
        )
    );
    this.input._paddingRight = 20;
    this.searchClearButton = this.container.addChild(new canvas.ui.Button(canvas.ResourceLoader.getImage("ui", "filter_clear_button"), canvas.ResourceLoader.getImage("ui", "filter_clear_button_over")));
    this.input.position.set(-this.input.width - 28, 31);
    this.searchClearButton.position.set(this.input.x + this.input.width - this.searchClearButton.width - 2, 33);
    this.filterText = filterText;
    this.mode = "";
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.HINT_ADD, null, { target: this.searchButton, params: new canvas.utils.HintParams(new canvas.app.view.MappingHint(canvas.Translator.getText(277))) });
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.HINT_ADD, null, { target: this.filterButton, params: new canvas.utils.HintParams(new canvas.app.view.MappingHint(canvas.Translator.getText(278))) });
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.HINT_ADD, null, { target: this.searchClearButton, params: new canvas.utils.HintParams(new canvas.app.view.MappingHint(canvas.Translator.getText(279))) });
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.filterButton, this.filterClickHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.searchButton, this.searchClickHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.searchClearButton, this.clearClickHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ListEvent.EVENT_SELECT, this.list, this.listSelectHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.InputEvent.EVENT_CHANGE, this.input, this.inputSearchHandler, this);
    this.interactive = true;
};
canvas.app.manor.view.controls.elements.FilterSortControl.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.manor.view.controls.elements.FilterSortControl.MODE_FILTER = "modeFilter";
canvas.app.manor.view.controls.elements.FilterSortControl.MODE_SEARCH = "modeSearch";
canvas.app.manor.view.controls.elements.FilterSortControl.prototype.update = function () {
    this.backSearch.visible = this.backFilter.visible = this.list.visible = false;
    this.container.removeIfExist(this.input);
    this.container.removeIfExist(this.searchClearButton);
    switch (this.mode) {
        case canvas.app.manor.view.controls.elements.FilterSortControl.MODE_FILTER:
            this.backFilter.visible = this.list.visible = true;
            break;
        case canvas.app.manor.view.controls.elements.FilterSortControl.MODE_SEARCH:
            this.backSearch.visible = true;
            this.container.addChildAt(this.input, 0);
            this.updateClearButton();
            this.focus();
            break;
    }
};
canvas.app.manor.view.controls.elements.FilterSortControl.prototype.filterClickHandler = function () {
    this.mode = this.mode == canvas.app.manor.view.controls.elements.FilterSortControl.MODE_FILTER ? "" : canvas.app.manor.view.controls.elements.FilterSortControl.MODE_FILTER;
};
canvas.app.manor.view.controls.elements.FilterSortControl.prototype.searchClickHandler = function () {
    this.mode = this.mode == canvas.app.manor.view.controls.elements.FilterSortControl.MODE_SEARCH ? "" : canvas.app.manor.view.controls.elements.FilterSortControl.MODE_SEARCH;
};
canvas.app.manor.view.controls.elements.FilterSortControl.prototype.clearClickHandler = function () {
    this.input.clear();
    canvas.EventManager.dispatchEvent(canvas.ui.InputEvent.EVENT_CHANGE, this.input);
    this.focus();
    canvas.utils.HintManager.instance.hide();
};
canvas.app.manor.view.controls.elements.FilterSortControl.prototype.focus = function () {
    if (this.input.input.input) this.input.input.input.focus();
};
canvas.app.manor.view.controls.elements.FilterSortControl.prototype.listSelectHandler = function (event) {
    var renderer = event.params;
    var sortData = renderer ? renderer.data : null;
    if (sortData) {
        if (this.sortType == sortData.type) {
            this.sortDirection = !this.sortDirection;
        } else {
            this.sortType = sortData.type;
        }
        renderer.setSortDirection(this.sortDirection);
    }
    canvas.EventManager.dispatchEvent(canvas.ui.Event.EVENT_CHANGE, this);
    this.mode = "";
};
canvas.app.manor.view.controls.elements.FilterSortControl.prototype.inputSearchHandler = function () {
    this.filterText = this.input.text;
    canvas.EventManager.dispatchEvent(canvas.ui.Event.EVENT_CHANGE, this);
    this.updateClearButton();
};
canvas.app.manor.view.controls.elements.FilterSortControl.prototype.updateClearButton = function () {
    if (this.input.parent) {
        if (this.filterText != "") {
            this.container.addChild(this.searchClearButton);
        } else {
            this.container.removeIfExist(this.searchClearButton);
        }
    } else {
        this.container.removeIfExist(this.searchClearButton);
    }
};
canvas.app.manor.view.controls.elements.FilterSortControlPets = function (sortDataValues, filterText, sortType, sortDirection, defaultSearchText) {
    canvas.app.manor.view.controls.elements.FilterSortControl.call(this, sortDataValues, filterText, sortType, sortDirection, defaultSearchText, 157);
    this.searchButton.interactiveChildren = false;
    this.filterButton.x += 142;
    this.list.x += 142;
    this.backFilter.x += 142;
    this.input.x += 146;
    this.input.y -= 30;
    this.searchClearButton.x += 144;
    this.searchClearButton.y -= 30;
    this.input._paddingLeft = 8;
    this.input._paddingRight = 26;
    this.input.topField.x += 8;
    this.container.addChild(this.searchButton);
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.HINT_ADD, null, { target: this.filterButton, params: new canvas.utils.HintParams(new canvas.app.view.MappingHint(canvas.Translator.getText(285))) });
};
canvas.app.manor.view.controls.elements.FilterSortControlPets.prototype = Object.create(canvas.app.manor.view.controls.elements.FilterSortControl.prototype);
canvas.app.manor.view.controls.elements.FilterSortControlPets.prototype.update = function () {
    canvas.app.manor.view.controls.elements.FilterSortControl.prototype.update.call(this);
    this.container.addChildAt(this.input, 0);
};
canvas.app.manor.view.controls.elements.Input = function (align, bold, w, backBase, backFocus, backOver, defaultText, showArrows) {
    this._input = null;
    Object.defineProperty(this, "input", {
        get: function () {
            return this._input;
        },
        set: function (value) {
            if (this._input) {
                this._input.parent = null;
                canvas.EventManager.removeEventListener(canvas.ui.InputEvent.EVENT_CHANGE, this._input, this.changeHandler, this);
            }
            this._input = value;
            if (this._input) {
                this._input.parent = this;
                this._input.color = "#6B382D";
                this._input.width = this.back.width - 4 - this._paddingRight;
                this._input.bold = true;
                this._input.align = this.align;
                this._input.x = 4 + this._paddingLeft;
                this._input.y = 11;
                canvas.EventManager.addEventListener(canvas.ui.InputEvent.EVENT_CHANGE, this._input, this.changeHandler, this);
                this.changeHandler();
                if (this.backOver) {
                    this._input.input.onmouseover = this.overHandler.bind(this);
                    this._input.input.onmouseout = this.outHandler.bind(this);
                }
                if (this.backFocus) {
                    this._input.input.onfocus = this.focusinHandler.bind(this);
                    this._input.input.onblur = this.focusoutHandler.bind(this);
                }
            }
        },
    });
    Object.defineProperty(this, "text", {
        get: function () {
            return this.input ? this.input.text : "";
        },
        set: function (value) {
            if (this.input) this.input.text = value;
        },
    });
    this._paddingRight = 0;
    Object.defineProperty(this, "paddingRight", {
        get: function () {
            return this._paddingRight;
        },
        set: function (value) {
            this._paddingRight = value;
        },
    });
    this._paddingLeft = 0;
    Object.defineProperty(this, "paddingLeft", {
        get: function () {
            return this._paddingLeft;
        },
        set: function (value) {
            this._paddingLeft = value;
        },
    });
    canvas.px.Container.call(this);
    if (align == undefined) align = "left";
    if (bold == undefined) bold = true;
    if (w == undefined) w = 30;
    if (defaultText == undefined) defaultText = "";
    if (showArrows == undefined) showArrows = false;
    this.back = backBase ? backBase : new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "tile_2"), 5, 0, 5, 0);
    this.addChild(this.back);
    this.back.width = w;
    this.align = align;
    this.defaultText = defaultText;
    this.lastValue = null;
    if (backFocus != null) {
        this.backFocus = backFocus;
        this.backFocus.width = w;
    }
    if (backOver != null) {
        this.backOver = backOver;
        this.backOver.width = w;
    }
    this.onlyNumbers = false;
    this.maxChars = 30;
    if (showArrows) {
        this.leftArrow = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "pager_minus"));
        this.leftArrow.position.set(-this.leftArrow.width, 0);
        this.addChild(this.leftArrow);
        this.rightArrow = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "pager_plus"));
        this.rightArrow.position.set(w, 0);
        this.addChild(this.rightArrow);
        canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.leftArrow, this.minusHandler, this);
        canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.rightArrow, this.plusHandler, this);
    }
    if (this.defaultText) {
        this.topField = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_12_BOLD, 7026733, w, 20, this.align);
        this.topField.alpha = 0.6;
        this.topField.position.set(5, 2);
        this.addChild(this.topField);
        this.topField.text = this.defaultText;
    }
};
canvas.app.manor.view.controls.elements.Input.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.manor.view.controls.elements.Input.prototype.changeHandler = function (event) {
    if (this.lastValue == this.input.text) return;
    this.lastValue = this.input.text;
    if (this.onlyNumbers) {
        var value = parseInt(this.input.text) || 0;
        this.input.text = value;
    }
    if (this.maxChars > 0 && this.input.text.length > this.maxChars) {
        this.input.text = this.input.text.substr(0, this.maxChars);
    }
    this.updateTop();
    canvas.EventManager.dispatchEvent(canvas.ui.InputEvent.EVENT_CHANGE, this, this.input.text);
};
canvas.app.manor.view.controls.elements.Input.prototype.clear = function () {
    this.input.text = "";
    this.changeHandler();
};
canvas.app.manor.view.controls.elements.Input.prototype.plusHandler = function () {
    var n = parseInt(this.input.text) + 1;
    n = n > 9999999999 ? 9999999999 : n;
    this.input.text = n;
    canvas.EventManager.dispatchEvent(canvas.ui.InputEvent.EVENT_CHANGE, this.input, this.input.text);
};
canvas.app.manor.view.controls.elements.Input.prototype.minusHandler = function () {
    var n = parseInt(this.input.text) - 1;
    n = n < 0 ? 0 : n;
    this.input.text = n;
    canvas.EventManager.dispatchEvent(canvas.ui.InputEvent.EVENT_CHANGE, this.input, this.input.text);
};
canvas.app.manor.view.controls.elements.Input.prototype.hideAll = function () {
    if (this.back) back.visible = false;
    if (this.backFocus) backFocus.visible = false;
    if (this.backOver) backOver.visible = false;
};
canvas.app.manor.view.controls.elements.Input.prototype.updateTop = function () {
    if (this.topField) {
        this.topField.visible = this.input.text == "";
    }
};
canvas.app.manor.view.controls.elements.Input.prototype.overHandler = function () {
    if (this.backFocus && this.input && this.input.input && this.input.input === document.activeElement) return;
    if (this.back) this.removeIfExist(this.back);
    if (this.backFocus) this.removeIfExist(this.backFocus);
    if (this.backOver) this.addChildAt(this.backOver, 0);
};
canvas.app.manor.view.controls.elements.Input.prototype.outHandler = function () {
    if (this.backFocus && this.input && this.input.input && this.input.input === document.activeElement) return;
    if (this.backOver) this.removeIfExist(this.backOver);
    if (this.backFocus) this.removeIfExist(this.backFocus);
    if (this.back) this.addChildAt(this.back, 0);
};
canvas.app.manor.view.controls.elements.Input.prototype.focusinHandler = function () {
    if (this.back) this.removeIfExist(this.back);
    if (this.backOver) this.removeIfExist(this.backOver);
    if (this.backFocus) this.addChildAt(this.backFocus, 0);
};
canvas.app.manor.view.controls.elements.Input.prototype.focusoutHandler = function () {
    this.outHandler();
};
canvas.app.manor.view.controls.elements.Input.prototype.destroy = function () {
    this.input = null;
    if (this.leftArrow) canvas.EventManager.removeEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.leftArrow, this.minusHandler, this);
    if (this.rightArrow) canvas.EventManager.removeEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.rightArrow, this.plusHandler, this);
    canvas.px.Container.prototype.destroy.call(this, { children: true });
};
canvas.app.manor.view.controls.elements.Item = function (clickable, hintable, mode, lockedMessage, showCount, showProgress, useOutTest) {
    this._mode = "";
    Object.defineProperty(this, "mode", {
        get: function () {
            return this._mode;
        },
        set: function (value) {
            this._mode = value;
            canvas.Functions.clearChildren(this.overContainer);
            var content;
            switch (this._mode) {
                case canvas.app.manor.view.controls.elements.Item.MODE_BANK_GET:
                case canvas.app.manor.view.controls.elements.Item.MODE_STORAGE_GET:
                    content = this.overContainer.addChild(new canvas.app.manor.view.controls.elements.BankContent(canvas.Translator.getText(1e3)));
                    break;
                case canvas.app.manor.view.controls.elements.Item.MODE_BANK_PUT:
                case canvas.app.manor.view.controls.elements.Item.MODE_STORAGE_PUT:
                    content = this.overContainer.addChild(new canvas.app.manor.view.controls.elements.BankContent(canvas.Translator.getText(242)));
                    break;
            }
        },
    });
    canvas.ui.ListRenderer.call(this, null, 70, 70);
    if (clickable == undefined) clickable = true;
    if (hintable == undefined) hintable = true;
    if (mode == undefined) mode = "";
    if (lockedMessage == undefined) lockedMessage = "";
    if (showCount == undefined) showCount = true;
    if (showProgress == undefined) showProgress = false;
    if (useOutTest == undefined) useOutTest = false;
    this.container = this.addChild(new canvas.px.Container());
    this.lockedMessage = lockedMessage;
    this.showCount = showCount;
    this.red = this.container.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "item_red")));
    this.red.position.set(-1, 64);
    this.green = this.container.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "item_green")));
    this.green.position.set(0, 65);
    this.bottomTitle = this.container.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_10_BOLD, 16765254, 64, 17, "center"));
    this.bottomTitle.position.set(4, 68);
    this.back = this.container.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "item_back")));
    this.back.position.set(5, 5);
    this.imageContainer = this.container.addChild(new canvas.px.Container());
    this.imageContainer.position.set(6, 5);
    this.image = this.imageContainer.addChild(new canvas.ui.Image());
    this.lockedImage = this.container.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "item_locked")));
    this.lockedImage.position.set(6, 5);
    this.lockedImage.visible = false;
    this.count = this.container.addChild(new canvas.px.Mask(34, 16, 7230284, 1));
    this.count.position.set(7, 48);
    this.count.visible = false;
    this.count.interactiveChildren = false;
    this.countField = this.count.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_12_BOLD, 16177574, 36, 18, "center"));
    this.countField.position.set(-1, 1);
    this.border = this.container.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "item_border")));
    this.timeField = this.container.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_13_BOLD_STROKE, 15587444, 66, 20, "center"));
    this.timeField.position.set(4, 8);
    if (showProgress) {
        this.progressor = this.container.addChildAt(new canvas.px.RoundProgress(60, 0, 0.8), this.container.getChildIndex(this.timeField));
        this.progressor.position.set(35, 35);
        this.progressor.scale.x = -1;
        this.msk = this.addChild(new canvas.px.Mask(60, 60));
        this.msk.position.set(6, 5);
        this.progressor.mask = this.msk;
        this.setProgress(1);
    }
    this.setColor(0);
    this.overContainer = new canvas.px.Container();
    this.buttonMode = true;
    this.click = this.mouseover = this.mouseout = null;
    if (hintable) {
        this.container.mouseover = this.overHandler.bind(this);
        this.container.mouseout = this.outHandler.bind(this);
    }
    if (clickable) {
        this.container.click = this.clickHandler.bind(this);
    }
    this.mode = mode;
    this.container.interactive = this.interactive = true;
    this.container.hitArea = new canvas.px.Rectangle(4, 4, 60, 60);
};
canvas.app.manor.view.controls.elements.Item.MODE_BANK_PUT = "bankPut";
canvas.app.manor.view.controls.elements.Item.MODE_BANK_GET = "bankGet";
canvas.app.manor.view.controls.elements.Item.MODE_STORAGE_PUT = "storagePut";
canvas.app.manor.view.controls.elements.Item.MODE_STORAGE_GET = "storageGet";
canvas.app.manor.view.controls.elements.Item.overedItem = null;
canvas.app.manor.view.controls.elements.Item.prototype = Object.create(canvas.ui.ListRenderer.prototype);
canvas.app.manor.view.controls.elements.Item.prototype.update = function () {
    if (this.oldData == null || this.oldData.id == "empty") this.outHandler(null);
    var b;
    this.image.clear();
    canvas.Functions.clearChildren(this.imageContainer);
    this.imageContainer.addChild(this.image);
    if (this._data && this._data.id != "empty") {
        this.image.setImage(this._data.image);
        this.setProgress(this._data.timeFull == 0 ? 1 : 1 - this._data.time / this._data.timeFull);
        this.timeField.text = canvas.Functions.formatDate(this._data.time * 1e3, "00", 2, true);
        if (this.showCount && this._data.count > 1) {
            this.count.visible = true;
            this.countField.text = this._data.count;
        } else {
            this.count.visible = false;
        }
        this.buttonMode = true;
        if (this._data.enchant3 > 0) {
            b = this.imageContainer.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "rune_hole")));
            b.y = 40;
        }
        if (this._data.enchantQuality > 0 || this._data.enchantParam > 0) {
            b = this.imageContainer.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "rune_" + (parseInt(this._data.enchantQuality) * 10 + parseInt(this._data.enchantParam)))));
            b.position.set(2, 42);
        }
        if (this._data.enchant3 > 0) {
            b = this.imageContainer.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "rune_oprava")));
            b.y = 40;
        }
    } else {
        this.setProgress(1);
        this.timeField.text = "";
        this.count.visible = false;
        this.lockedImage.visible = false;
        this.buttonMode = false;
        if (this.lockedMessage != "" && (this._data == null || this._data.id != "empty")) {
            this.lockedImage.visible = true;
        }
        this.outHandler();
    }
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.HINT_REMOVE, null, { target: this });
    this.timeField.visible = this.timeField.text != "";
};
canvas.app.manor.view.controls.elements.Item.prototype.setProgressExp = function (value) {};
canvas.app.manor.view.controls.elements.Item.prototype.setProgress = function (value) {
    if (this.progressor) this.progressor.progress = 1 - value;
};
canvas.app.manor.view.controls.elements.Item.prototype.clone = function () {
    var result = new canvas.app.manor.view.controls.elements.Item();
    result.data = this._data;
    result.name = this.name;
    return result;
};
canvas.app.manor.view.controls.elements.Item.prototype.removeHints = function () {
    this.outHandler();
    canvas.utils.HintManager.instance.hide();
};
canvas.app.manor.view.controls.elements.Item.prototype.overHandler = function (event) {
    canvas.app.manor.view.controls.elements.Item.overedItem = this;
    if (canvas.app.manor.model.globalDrag) {
        event.stopPropagation();
        return;
    }
    if (this.data != null && this.data.id != "empty" && this.data.id != "") {
        if (!this.mouseover && artifactAltSimple(this.data.id, 2) != "1") {
            canvas.EventManager.dispatchEvent(canvas.app.manor.Event.HINT_ADD, null, { target: this, params: new canvas.utils.HintParams(new canvas.app.view.MappingHint(this.data.title)) });
            canvas.utils.HintManager.instance.show(this);
        }
        this.container.addChild(this.overContainer);
    }
};
canvas.app.manor.view.controls.elements.Item.prototype.outHandler = function (event) {
    if (this.useOutTest && canvas.app.manor.view.controls.elements.Item.overedItem != this) return;
    if (this.data != null && this._data.id != "empty" && this.data.id != "") {
        artifactAltSimple(this.data.id, 0);
    }
    this.container.removeIfExist(this.overContainer);
    canvas.app.manor.view.controls.elements.Item.overedItem = null;
};
canvas.app.manor.view.controls.elements.Item.prototype.clickHandler = function (event) {
    var itemData;
    if (this._data == null || this._data.id == "empty") return;
    switch (this.mode) {
        case canvas.app.manor.view.controls.elements.Item.MODE_BANK_GET:
            if (!event.target.parent || event.target.parent.name != "info") {
                canvas.EventManager.dispatchEvent(canvas.app.manor.Event.USE_BANK_ACTION, null, { object: { from: this.data, toArea: "0" } });
                return;
            }
            break;
        case canvas.app.manor.view.controls.elements.Item.MODE_BANK_PUT:
            if (!event.target.parent || event.target.parent.name != "info") {
                canvas.EventManager.dispatchEvent(canvas.app.manor.Event.USE_BANK_ACTION, null, { object: { from: this.data, toArea: "firstFree" } });
                return;
            }
            break;
        case canvas.app.manor.view.controls.elements.Item.MODE_STORAGE_GET:
            if (!event.target.parent || event.target.parent.name != "info") {
                canvas.EventManager.dispatchEvent(canvas.app.manor.Event.USE_STORAGE_ACTION, null, { object: { getItem: this.data } });
                return;
            }
            break;
        case canvas.app.manor.view.controls.elements.Item.MODE_STORAGE_PUT:
            if (!event.target.parent || event.target.parent.name != "info") {
                canvas.EventManager.dispatchEvent(canvas.app.manor.Event.USE_STORAGE_ACTION, null, { object: { putItem: this.data } });
                return;
            }
            break;
    }
    if (this._data.id != "" && this._data.aid != "" && this._data.id == this._data.aid) canvas.Functions.navigateToURL("artifact_info.php?artikul_id=" + this._data.aid, "_blank");
    else if (this._data.id != "") canvas.Functions.navigateToURL("artifact_info.php?artifact_id=" + this._data.id, "_blank");
    else if (this._data.aid != "") canvas.Functions.navigateToURL("artifact_info.php?artikul_id=" + this._data.aid, "_blank");
};
canvas.app.manor.view.controls.elements.Item.prototype.setColor = function (i) {
    switch (i) {
        case 0:
            this.bottomTitle.visible = false;
            this.green.visible = false;
            this.red.visible = false;
            break;
        case 1:
            this.bottomTitle.visible = true;
            this.bottomTitle.text = canvas.Translator.getText(194);
            this.green.visible = true;
            this.red.visible = false;
            break;
        case 2:
            this.bottomTitle.visible = true;
            this.bottomTitle.text = canvas.Translator.getText(195);
            this.green.visible = false;
            this.red.visible = true;
            break;
    }
};
canvas.app.manor.view.controls.elements.Item.prototype.destroy = function () {
    this.container.mouseover = null;
    this.container.mouseout = null;
    this.container.click = null;
    this.data = null;
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.HINT_REMOVE, null, { target: this });
    canvas.ui.ListRenderer.prototype.destroy.call(this);
};
canvas.app.manor.view.controls.elements.BankContent = function (title) {
    canvas.px.Container.call(this);
    this.title = title;
    var b = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "item_plane")));
    b.position.set(6, 30);
    this.info = this.addChild(new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "item_info")));
    this.info.name = "info";
    this.info.position.set(46, 5);
    this.field = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_9, 2564379, 64, 16, "center"));
    this.field.text = this.title;
    this.field.position.set(4, 30);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_OVER, this.info, this.infoOverHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_OUT, this.info, this.infoOutHandler, this);
};
canvas.app.manor.view.controls.elements.BankContent.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.manor.view.controls.elements.BankContent.prototype.infoOverHandler = function () {
    this.field.text = canvas.Translator.getText(243);
};
canvas.app.manor.view.controls.elements.BankContent.prototype.infoOutHandler = function () {
    this.field.text = this.title;
};
canvas.app.manor.view.controls.elements.BankContent.prototype.destroy = function () {
    canvas.px.Container.prototype.destroy.apply(this, [{ children: true }]);
    canvas.EventManager.removeEventListener(canvas.ui.ButtonEvent.EVENT_OVER, this.info, this.infoOverHandler, this);
    canvas.EventManager.removeEventListener(canvas.ui.ButtonEvent.EVENT_OUT, this.info, this.infoOutHandler, this);
};
canvas.app.manor.view.controls.elements.Labour = function (title, params) {
    if (params == undefined) {
        params = new Object();
        params.back = "labour_progress_back";
        params.backSlicedArray = null;
        params.backSize = 0;
        params.front = "labour_progress";
        params.frontSlicedArray = null;
        params.frontSize = 0;
        params.font = canvas.Const.FONT_TAHOMA_9;
        params.color = 16777215;
        params.pos = new canvas.px.Point(30, 12);
        params.textPos = new canvas.px.Point(0, 1);
    }
    this.title = title || "";
    this.params = params;
    canvas.ui.Progress.call(this, canvas.ResourceLoader.getImage("ui", this.params.front), this.params.frontSlicedArray);
    if (this.params.backSlicedArray) {
        var sprite = this.addChildAt(
            new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", this.params.back), this.params.backSlicedArray[0], this.params.backSlicedArray[1], this.params.backSlicedArray[2], this.params.backSlicedArray[3]),
            0
        );
        sprite.width = this.params.backSize;
    } else {
        this.addChildAt(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", this.params.back)), 0);
    }
    if (this.params.frontSize) this.setSize(this.params.frontSize);
    if (this.backImage) this.backImage.position.set(this.params.pos.x, this.params.pos.y);
    this.sprite.position.set(this.params.pos.x, this.params.pos.y);
    this.tf = this.addChild(new canvas.ui.Text(this.params.font, this.params.color, this.sprite.width, 20, "center"));
    this.tf.position.set(this.params.pos.x + this.params.textPos.x, this.params.pos.y + this.params.textPos.y);
};
canvas.app.manor.view.controls.elements.Labour.prototype = Object.create(canvas.ui.Progress.prototype);
canvas.app.manor.view.controls.elements.Labour.prototype.setLabour = function (value, maxValue, animated) {
    if (canvas.EventManager.hasEventListener(canvas.app.manor.Event.ENTER_FRAME, null, this.updateHandler, this)) this.animated = true;
    if (value == 0) this.animated = false;
    this.tf.text = (this.title == "" ? "" : this.title + ": ") + value + "/" + maxValue;
    value = value < 0 ? 0 : value > maxValue ? maxValue : value;
    maxValue = maxValue;
    this.targetValue = maxValue == 0 ? 0 : value / maxValue;
    if (this.animated) {
        canvas.EventManager.addEventListener(canvas.app.manor.Event.ENTER_FRAME, null, this.updateHandler, this);
    } else {
        canvas.EventManager.removeEventListener(canvas.app.manor.Event.ENTER_FRAME, null, this.updateHandler, this);
        this.progress = this.targetValue;
    }
};
canvas.app.manor.view.controls.elements.Labour.prototype.setTitle = function (value) {
    this.tf.text = value || "";
};
canvas.app.manor.view.controls.elements.Labour.prototype.updateHandler = function () {
    if (this.progress < this.targetValue) {
        this.progress = Math.min(this.progress + 0.05, this.targetValue);
    } else if (this.progress > this.targetValue) {
        this.progress = Math.max(this.progress - 0.05, this.targetValue);
    } else {
        canvas.EventManager.removeEventListener(canvas.app.manor.Event.ENTER_FRAME, null, this.updateHandler, this);
    }
};
canvas.app.manor.view.controls.elements.LabourGreen = function (w) {
    if (w == undefined) w = 130;
    var params = new Object();
    params.back = "labour4_progress_back";
    params.backSlicedArray = [20, 0, 20, 0];
    params.backSize = w;
    params.front = "labour4_progress";
    params.frontSlicedArray = [6, 0, 6, 0];
    params.frontSize = w - 30;
    params.font = canvas.Const.FONT_TAHOMA_10;
    params.color = 16777215;
    params.pos = new canvas.px.Point(15, 9);
    params.textPos = new canvas.px.Point(0, 0);
    canvas.app.manor.view.controls.elements.Labour.call(this, null, params);
};
canvas.app.manor.view.controls.elements.LabourGreen.prototype = Object.create(canvas.app.manor.view.controls.elements.Labour.prototype);
canvas.app.manor.view.controls.elements.LabourInput = function () {
    this._maxValue = 1e4;
    Object.defineProperty(this, "maxValue", {
        get: function () {
            return this._maxValue;
        },
        set: function (value) {
            this._maxValue = value;
            this.dragger.max = this._maxValue;
        },
    });
    canvas.px.Container.call(this);
    this.back = new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "tile_0"), 4, 4, 4, 4);
    this.back.width = 173;
    this.back.height = 81;
    this.addChild(this.back);
    var t = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD, 7026733, 63, 18, "left");
    t.position.set(12, 19);
    t.text = canvas.Translator.getText(107);
    this.addChild(t);
    this.fieldLabourMax = new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_11, canvas.Const.FONT_TAHOMA_11_BOLD, 7026733, 60, 20, "left");
    this.fieldLabourMax.position.set(110, 19);
    this.addChild(this.fieldLabourMax);
    this.input = new canvas.app.manor.view.controls.elements.Input(canvas.app.manor.view.input);
    this.addChild(this.input);
    this.input.onlyNumbers = true;
    this.input.maxChars = 4;
    this.input.position.set(70, 15);
    this.input.text = "0";
    this.dragger = new canvas.app.manor.view.controls.elements.Dragger(this);
    this.addChild(this.dragger);
    this.dragger.position.set(10, 50);
    this.dragger.setSize(150, 5);
    canvas.EventManager.addEventListener(canvas.ui.ScrollEvent.EVENT_SCROLL, this.dragger, this.draggerHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.InputEvent.EVENT_CHANGE, this.input, this.changeHandler, this);
};
canvas.app.manor.view.controls.elements.LabourInput.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.manor.view.controls.elements.LabourInput.prototype.update = function () {
    var Conf = canvas.app.manor.model;
    this.fieldLabourMax.text = canvas.Translator.getText(196) + "  <b>" + Conf.user.labourMax + "</b>";
    this.testRequires();
};
canvas.app.manor.view.controls.elements.LabourInput.prototype.testRequires = function () {
    var Conf = canvas.app.manor.model;
    var l = parseInt(this.input.text);
    var b = l > 0;
    if (l > Conf.user.labour) {
        if (this.input.input) this.input.input.color = "#bc0000";
        b = false;
    } else {
        if (this.input.input) this.input.input.color = "#446c00";
    }
    return b;
};
canvas.app.manor.view.controls.elements.LabourInput.prototype.changeHandler = function () {
    this.setInputValue(this.input.text || 0);
};
canvas.app.manor.view.controls.elements.LabourInput.prototype.draggerHandler = function () {
    this.setInputValue(this.dragger.current);
};
canvas.app.manor.view.controls.elements.LabourInput.prototype.setInputValue = function (i) {
    i = parseInt(i);
    var Conf = canvas.app.manor.model;
    var max = this.maxValue >= Conf.user.labourMax ? Conf.user.labourMax : this.maxValue;
    i = i > max ? max : i < 0 ? 0 : i;
    this.input.text = i;
    this.dragger.current = i;
    canvas.EventManager.dispatchEvent(canvas.ui.InputEvent.EVENT_CHANGE, this, this.input.text);
};
canvas.app.manor.view.controls.elements.LabourInput.prototype.clear = function () {
    this.setInputValue(0);
};
canvas.app.manor.view.controls.elements.LabourInput.prototype.destroy = function () {
    canvas.EventManager.removeEventListener(canvas.ui.ScrollEvent.EVENT_SCROLL, this.dragger, this.draggerHandler, this);
    canvas.EventManager.removeEventListener(canvas.ui.InputEvent.EVENT_CHANGE, this.input, this.changeHandler, this);
    canvas.px.Container.prototype.destroy.call(this, { children: true });
};
canvas.app.manor.view.controls.elements.Level = function () {
    Object.defineProperty(this, "level", {
        get: function () {
            return parseInt(this.levelField.text);
        },
        set: function (value) {
            this.levelField.text = value;
        },
    });
    canvas.px.Container.call(this);
    this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "level_back")));
    this.title = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_12, 16777215, 60, 23, "center"));
    this.title.text = canvas.Translator.getText(172);
    this.title.position.set(46, 11);
    this.levelField = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_16_BOLD, 16777215, 31, 23, "center"));
    this.levelField.position.set(12, 9);
};
canvas.app.manor.view.controls.elements.Level.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.manor.view.MenuItemRenderer = function (data) {
    canvas.ui.ListRenderer.call(this);
    this.setSize(200, data.title ? 20 : 10);
    this.field = this.addChild(new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_11_BOLD_STROKE, canvas.Const.FONT_TAHOMA_11_BOLD_STROKE, 15250952, this._width, this._height, "left"));
    this.buttonMode = true;
    this.data = data;
};
canvas.app.manor.view.MenuItemRenderer.prototype = Object.create(canvas.ui.ListRenderer.prototype);
canvas.app.manor.view.MenuItemRenderer.prototype.update = function () {
    var model = canvas.app.manor.model;
    if (this.data) {
        this.field.text = this.data.title ? "<img src='menu_icon' atlas='ui' yOffset='1'/>  " + this.data.title : "";
    }
};
canvas.app.manor.view.MenuItemRenderer.prototype.clickHandler = function () {
    var Conf = canvas.app.manor.model;
    if (this.data.link == "exit") {
        canvas.EventManager.dispatchEvent(canvas.app.manor.Event.EXIT);
    } else if (this.data.link.substr(0, 3) == "prt") {
        var params = { object: { building_action: "teleport", number: this.data.link.substr(3) } };
        if (Conf.localStorage.get("portalConfirm") != "1") {
            canvas.EventManager.dispatchEvent(canvas.app.manor.Event.OPEN_CONFIRM, null, {
                params:
                    canvas.Translator.getText(269) +
                    " <b>" +
                    this.data.title +
                    "</b>?" +
                    (Conf.portalJumpCost > 0 ? "<br/>" + canvas.Translator.getText(271) + " <b><font color='#0066cc'>" + Conf.portalJumpCost + "</font></b> <img src='energy_icon' yOffset='2' atlas='ui'/>" : ""),
                object: { name: canvas.app.manor.Event.USE_PORTAL_ACTION, params: params },
            });
        } else {
            canvas.EventManager.dispatchEvent(canvas.app.manor.Event.USE_PORTAL_ACTION, null, params);
        }
    } else {
        canvas.EventManager.dispatchEvent(this.data.event, null, { params: this.data.link });
    }
};
canvas.app.manor.view.MenuItemRenderer.prototype.overHandler = function () {
    this.filters = [canvas.Functions.getBrightness(1.2)];
};
canvas.app.manor.view.MenuItemRenderer.prototype.outHandler = function () {
    this.filters = null;
};
canvas.app.manor.view.MenuItemRenderer.prototype.destroy = function () {
    canvas.ui.ListRenderer.prototype.destroy.call(this);
};
canvas.app.manor.view.controls.elements.MyRequestLine = function (data) {
    this.back = new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "tile_0"), 4, 0, 4, 0);
    this.back.width = 370;
    this.back.height = 24;
    this.title = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD, 7092753, 224, 18, "left");
    this.title.position.set(7, 5);
    var params = new Object();
    params.back = "labour2_progress_back";
    params.front = "labour2_progress";
    params.font = canvas.Const.FONT_TAHOMA_9;
    params.color = 6499081;
    params.pos = new canvas.px.Point(6, 5);
    params.textPos = new canvas.px.Point(0, 1);
    this.progress = new canvas.app.manor.view.controls.elements.Labour("", params);
    this.progress.position.set(150, 0);
    this.fieldEnergy = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11, 7092753, 30, 18, "right");
    this.fieldEnergy.position.set(243, 5);
    this.fieldPrice = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11, 7092753, 26, 18, "right");
    this.fieldPrice.position.set(272, 5);
    this.back2 = new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "tile_3"), 4, 4, 4, 4);
    this.back2.width = 370;
    this.back2.height = 72;
    var gr = this.back2.addChild(new canvas.px.Graphics());
    gr.lineStyle(1, 14922592);
    for (var i = 0; i < 184; i += 2) {
        gr.moveTo(i * 2, 0);
        gr.lineTo((i + 1) * 2, 0);
    }
    gr.position.set(2, 28);
    this.fieldComment = this.back2.addChild(new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_11, canvas.Const.FONT_TAHOMA_11_BOLD, 7092753, 362, 37, "left"));
    this.fieldComment.position.set(6, 35);
    canvas.ui.ListRenderer.call(this, null, 380, 24);
    this.addChild(this.back);
    this.addChild(this.title);
    this.addChild(this.progress);
    this.addChild(this.fieldEnergy);
    this.addChild(this.fieldPrice);
    var coin = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "money_silver")));
    coin.position.set(300, 6);
    this.editButton = this.addChild(new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "edit_button")));
    this.editButton.position.set(322, 0);
    this.deleteButton = this.addChild(new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "delete_button")));
    this.deleteButton.position.set(346, 0);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.editButton, this.editClickHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.deleteButton, this.deleteClickHandler, this);
    this.data = data;
};
canvas.app.manor.view.controls.elements.MyRequestLine.prototype = Object.create(canvas.ui.ListRenderer.prototype);
canvas.app.manor.view.controls.elements.MyRequestLine.prototype.update = function () {
    if (this.data) {
        var model = canvas.app.manor.model;
        var workRequest = this.data,
            userBuilding,
            building;
        userBuilding = model.user.buildings[workRequest.building];
        building = model.buildings[userBuilding.name][userBuilding.level + 1];
        this.title.text = building.title;
        this.progress.setLabour(userBuilding.labour, building.cost);
        this.fieldEnergy.text = workRequest.labour;
        this.fieldPrice.text = workRequest.price;
        if (userBuilding.hireTimeLeft > 0) {
            this.removeIfExist(this.back);
            this.addChildAt(this.back2, 0);
            this.fieldComment.text = canvas.Translator.getText(165) + " <b>" + userBuilding.hireTimeLeft + " " + canvas.Translator.getText(2001) + ".</b><br/>" + canvas.Translator.getText(166);
            this._height = 99;
        } else {
            this.removeIfExist(this.back2);
            this.addChildAt(this.back, 0);
            this._height = 24;
        }
    }
};
canvas.app.manor.view.controls.elements.MyRequestLine.prototype.editClickHandler = function () {
    canvas.app.manor.model.requestToRemove = this.data.id;
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.OPEN_HIRE, null, { params: this.data.id, object: this.data });
};
canvas.app.manor.view.controls.elements.MyRequestLine.prototype.deleteClickHandler = function () {
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.OPEN_CONFIRM, null, { params: canvas.Translator.getText(164), object: { name: canvas.app.manor.Event.REMOVE_WORK_REQUEST, params: { params: this.data.id } } });
};
canvas.app.manor.view.controls.elements.MyRequestLine.prototype.destroy = function () {
    canvas.EventManager.removeEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.editButton, this.editClickHandler, this);
    canvas.EventManager.removeEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.deleteButton, this.deleteClickHandler, this);
    canvas.ui.ListRenderer.prototype.destroy.call(this);
};
canvas.app.manor.view.controls.elements.Pager = function () {
    canvas.ui.Pager.call(
        this,
        canvas.ResourceLoader.getImage("ui", "pager_home"),
        canvas.ResourceLoader.getImage("ui", "pager_end"),
        canvas.ResourceLoader.getImage("ui", "pager_minus"),
        canvas.ResourceLoader.getImage("ui", "pager_plus"),
        new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD, 12713984, 10, 16, "left")
    );
    this._paddingNumbersLeft = 7;
};
canvas.app.manor.view.controls.elements.Pager.prototype = Object.create(canvas.ui.Pager.prototype);
canvas.app.manor.view.controls.elements.PagerSimple = function (type, showBack, showDrag, wheelTarget, hideArrows) {
    if (hideArrows == undefined) hideArrows = 2;
    if (type == canvas.ui.ScrollType.HORIZONTAL) {
        var minus = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "arrow_left"));
        var plus = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "arrow_left"));
        plus.scale.x = -1;
        plus.pivot = new canvas.px.Point(-25, 0);
        var back = null;
        if (showBack) {
            back = new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "tile_6"), 4, 4, 4, 4);
            back.height = 28;
        }
        var drag = null;
        if (showDrag) {
            drag = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "drag_h"));
        }
        canvas.ui.Scroll.call(this, type, minus, plus, back, drag, wheelTarget, false, true, null, hideArrows);
        this._padding = 18;
        this._backPadding = 10;
    } else {
        var minus = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "arrow_top"));
        var plus = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "arrow_top"));
        plus.scale.y = -1;
        plus.pivot = new canvas.px.Point(0, -25);
        var back = null;
        if (showBack) {
            back = new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "tile_6"), 4, 4, 4, 4);
            back.width = 28;
        }
        var drag = null;
        if (showDrag) {
            drag = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "drag_v"));
        }
        canvas.ui.Scroll.call(this, type, minus, plus, back, drag, wheelTarget, false, true, null, hideArrows);
        this._padding = 18;
        this._backPadding = 10;
    }
    this.max = 0;
};
canvas.app.manor.view.controls.elements.PagerSimple.prototype = Object.create(canvas.ui.Scroll.prototype);
canvas.app.manor.view.controls.elements.PanelHeaderRenderer = function (type) {
    canvas.ui.ListRenderer.call(this);
    this.type = type;
    this.back = this.addChild(new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "tab_white"), 37, 0, 37, 0));
    this.field = this.addChild(new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_13, canvas.Const.FONT_TAHOMA_13_BOLD, 7092753, 100, 20, "center"));
    this.field.position.set(20, 6);
};
canvas.app.manor.view.controls.elements.PanelHeaderRenderer.prototype = Object.create(canvas.ui.ListRenderer.prototype);
canvas.app.manor.view.controls.elements.PanelHeaderRenderer.prototype.init = function (label, title) {
    this.title = title;
    this.field.text = label;
};
canvas.app.manor.view.controls.elements.PanelHeaderRenderer.prototype.update = function () {
    this.back.width = this._width;
    this.field.setSize(this._width - 40);
};
canvas.app.manor.view.controls.elements.PanelHeaderRenderer.prototype.updateSelection = function () {
    switch (this.type) {
        case 1:
            this.back.texture = this.selected ? canvas.ResourceLoader.getImage("ui", "tab_white") : canvas.ResourceLoader.getImage("ui", "tab_red");
            this.field.color = this.selected ? 7092753 : 16118721;
            break;
        default:
            this.field.color = this.selected ? 7092753 : 9243401;
    }
    this.buttonMode = !this.selected;
};
canvas.app.manor.view.controls.elements.PanelHeaderRenderer.prototype.clickHandler = function () {
    this.parent.parent.path = this.title;
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.PANELS_CLICK, this.parent.parent);
};
canvas.app.manor.view.controls.elements.Panels = function (content, titles, labels, type, maxSize, leftPadding, rightPadding) {
    this._path = "";
    Object.defineProperty(this, "path", {
        get: function () {
            return this._path;
        },
        set: function (value) {
            this._path = this.titles.indexOf(value) < 0 ? this.titles[0] : value;
            var i,
                len = this.content.length,
                item;
            canvas.Functions.clearChildren(this.contentContainer);
            for (i = 0; i < len; i++) {
                item = this.items[i];
                if (item.title == this._path) {
                    this.contentContainer.addChild(this.content[i]);
                    this.headerContainer.addChild(this.back);
                    this.headerContainer.addChild(this.items[i]);
                    item.selected = true;
                } else {
                    item.selected = false;
                }
            }
            canvas.EventManager.dispatchEvent(canvas.app.manor.Event.PANELS_PATH, this);
        },
    });
    canvas.ui.Component.call(this);
    this.headerContainer = this.addChild(new canvas.px.Container());
    this.back = this.headerContainer.addChild(new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "tile_back"), 20, 20, 20, 20));
    this.back.y = 27;
    this.contentContainer = this.addChild(new canvas.px.Container());
    this.contentContainer.y = this.back.y;
    this.type = type ? type : 0;
    this.leftPadding = leftPadding || 0;
    this.rightPadding = rightPadding || 0;
    this.maxSize = maxSize ? maxSize : 220;
    this.items = [];
    this._height = 265;
    this.init(content, titles, labels);
};
canvas.app.manor.view.controls.elements.Panels.prototype = Object.create(canvas.ui.Component.prototype);
canvas.app.manor.view.controls.elements.Panels.prototype.init = function (content, titles, labels) {
    this.content = content;
    this.titles = titles;
    this.labels = labels;
    var i,
        len = this.content.length,
        item;
    if (len > this.items.length) {
        for (i = this.items.length; i < len; i++) {
            this.items.push(new canvas.app.manor.view.controls.elements.PanelHeaderRenderer(this.type));
        }
    }
    canvas.Functions.clearChildren(this.headerContainer);
    for (i = 0; i < len; i++) {
        item = this.items[i];
        this.headerContainer.addChild(item);
        item.init(this.labels[i], this.titles[i]);
    }
    this.update();
    if (this._path) this.path = this._path;
};
canvas.app.manor.view.controls.elements.Panels.prototype.update = function () {
    this.back.width = this._width;
    this.back.height = this._height;
    var i,
        len = this.content.length,
        item;
    var size = Math.min(this.maxSize, Math.round((this._width - this.rightPadding - this.leftPadding - 40 + 20 * (len - 1)) / len));
    for (i = 0; i < len; i++) {
        item = this.items[i];
        item.setSize(size);
        item.x = 20 + this.leftPadding + i * (size - 20);
    }
};
canvas.app.manor.view.controls.elements.Panels.prototype.getEnabled = function (name) {
    var i,
        len = this.content.length;
    for (i = 0; i < len; i++) {
        if (this.items[i].title == name) return true;
    }
    return false;
};
canvas.app.manor.view.controls.elements.Panels.prototype.setDefaultPath = function (name) {
    this.path = this.titles.length > 1 && this.getEnabled(this.titles[1]) ? this.titles[1] : this.titles[0];
};
canvas.app.manor.view.controls.elements.PetItem = function () {
    canvas.ui.ListRenderer.call(this, null, 64, 64);
    var sprite = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "item_back")));
    sprite.position.set(6, 5);
    this.image = this.addChild(new canvas.ui.Image());
    this.image.position.set(6, 5);
    this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "pet_item_border")));
    this.progress = this.addChild(new canvas.ui.Progress(canvas.ResourceLoader.getImage("ui", "pet_item_progress")));
    this.progress.position.set(6, 68);
    this.progress.progress = 0.5;
    this.progressRound = this.addChild(new canvas.px.RoundProgress(60, 0, 0.8));
    this.progressRound.position.set(35, 35);
    this.progressRound.scale.x = -1;
    this.msk = this.addChild(new canvas.px.Mask(60, 60));
    this.msk.position.set(6, 5);
    this.progressRound.mask = this.msk;
    this.timeField = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_13_BOLD_STROKE, 15587444, 64, 20, "center"));
    this.timeField.position.set(4, 43);
    this.selector = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "pet_item_selector")));
    this.selector.position.set(-9, -7);
    this.buttonMode = true;
    this.hitArea = new canvas.px.Rectangle(0, 0, 64, 80);
};
canvas.app.manor.view.controls.elements.PetItem.prototype = Object.create(canvas.ui.ListRenderer.prototype);
canvas.app.manor.view.controls.elements.PetItem.prototype.update = function () {
    if (this.data) {
        this.image.setImage(this.data.image);
        this.setProgressExp(this.data.exp / this.data.expUp);
        this.setProgress(1 - (this.data.timeFull == this.data.time ? 0 : this.data.time / this.data.timeFull));
        this.timeField.text = this.data.time > 0 ? canvas.Functions.formatDate(this.data.time * 1e3, "00", 2, true) : "";
    } else {
        this.setProgressExp(0);
        this.setProgress(1);
        this.timeField.text = "";
        this.image.clear();
    }
};
canvas.app.manor.view.controls.elements.PetItem.prototype.setProgressExp = function (value) {
    this.progress.progress = value;
};
canvas.app.manor.view.controls.elements.PetItem.prototype.setProgress = function (value) {
    this.progressRound.progress = 1 - value;
};
canvas.app.manor.view.controls.elements.PortalList = function () {
    this._data = null;
    Object.defineProperty(this, "data", {
        get: function () {
            return this._data;
        },
        set: function (value) {
            var firstInit = this._data == null;
            this._data = value;
            if (this._data == null) return;
            var len = this._data.length;
            var i;
            var listItem;
            if (len > this.items.length) {
                for (i = this.items.length; i < len; i++) {
                    listItem = new canvas.app.manor.view.controls.elements.PortalListItem();
                    listItem.y = 50;
                    listItem.alpha = 0;
                    this.items.push(listItem);
                }
            }
            len = this.items.length;
            for (i = 0; i < len; i++) this.items[i].data = this._data[i];
            this.update(firstInit);
            this.currentIndex = this._currentIndex;
        },
    });
    this._currentIndex = 0;
    Object.defineProperty(this, "currentIndex", {
        get: function () {
            return this._currentIndex;
        },
        set: function (value) {
            var len = this._data.length;
            this._currentIndex = value < 0 ? 0 : value >= len ? len - 1 : value;
            this.leftArrow.visible = len > canvas.app.manor.view.controls.elements.PortalList.ON_PAGE - 2 && this.currentIndex > 0;
            this.rightArrow.visible = len > canvas.app.manor.view.controls.elements.PortalList.ON_PAGE - 2 && this.currentIndex < len - 1;
            this.update();
            canvas.EventManager.dispatchEvent(canvas.ui.Event.EVENT_CHANGE, this);
        },
    });
    Object.defineProperty(this, "selectedItem", {
        get: function () {
            return this.data[this.currentIndex];
        },
    });
    canvas.px.Container.call(this);
    this.items = new Array();
    this.container = this.addChild(new canvas.px.Container());
    this.container.position.set(2, 8);
    this.leftArrow = this.addChild(new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "arrow_left")));
    this.leftArrow.y = 38;
    this.rightArrow = this.addChild(new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "arrow_left")));
    this.rightArrow.position.set(385, 38);
    this.rightArrow.scale.x = -1;
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.leftArrow, this.leftArrowClickHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.rightArrow, this.rightArrowClickHandler, this);
    canvas.EventManager.addEventListener(canvas.app.manor.Event.ENTER_FRAME, null, this.updateHandler, this);
};
canvas.app.manor.view.controls.elements.PortalList.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.manor.view.controls.elements.PortalList.ON_PAGE = 3;
canvas.app.manor.view.controls.elements.PortalList.prototype.update = function (init) {
    var len = this.data.length;
    var i;
    var listItem;
    if (len == 0) return;
    for (i = 0; i < len; i++) {
        listItem = this.items[i];
        if (i < this.currentIndex - 1) {
            listItem.targetAlpha = 0;
            listItem.targetScale = 0;
            listItem.targetPoint.x = 60;
            listItem.targetPoint.y = 50;
            if (listItem.alpha > 0) this.container.addChildAt(listItem, 0);
        } else if (i == this.currentIndex - 1) {
            listItem.targetAlpha = 0.6;
            listItem.targetScale = 1;
            listItem.targetPoint.x = 120;
            listItem.targetPoint.y = 50;
            this.container.addChild(listItem);
        } else if (i == this.currentIndex) {
            listItem.targetAlpha = 1;
            listItem.targetScale = 1;
            listItem.targetPoint.x = 190;
            listItem.targetPoint.y = 50;
        } else if (i == this.currentIndex + 1) {
            listItem.targetAlpha = 0.6;
            listItem.targetScale = 1;
            listItem.targetPoint.x = 260;
            listItem.targetPoint.y = 50;
            this.container.addChild(listItem);
        } else {
            listItem.targetAlpha = 0;
            listItem.targetScale = 0;
            listItem.targetPoint.x = 320;
            listItem.targetPoint.y = 50;
            if (listItem.alpha > 0) this.container.addChildAt(listItem, 0);
        }
        if (init) {
            listItem.alpha = listItem.targetAlpha;
            listItem.scale.x = listItem.scale.y = listItem.targetScale;
            listItem.x = listItem.targetPoint.x;
            listItem.y = listItem.targetPoint.y;
        }
    }
    this.container.addChild(this.items[this.currentIndex]);
};
canvas.app.manor.view.controls.elements.PortalList.prototype.leftArrowClickHandler = function () {
    this.currentIndex--;
};
canvas.app.manor.view.controls.elements.PortalList.prototype.rightArrowClickHandler = function () {
    this.currentIndex++;
};
canvas.app.manor.view.controls.elements.PortalList.prototype.select = function (params) {
    this.currentIndex = this.items.indexOf(params);
};
canvas.app.manor.view.controls.elements.PortalList.prototype.updateHandler = function () {
    if (this.parent && this.parent.parent && this.parent.isActive) {
        var listItem;
        var direction;
        var i,
            len = this.items.length;
        for (i = 0; i < len; i++) {
            listItem = this.items[i];
            if (listItem.targetAlpha != listItem.alpha) {
                direction = listItem.targetAlpha > listItem.alpha;
                listItem.alpha += direction ? 0.15 : -0.15;
                if (listItem.targetAlpha > listItem.alpha != direction) listItem.alpha = listItem.targetAlpha;
            } else if (listItem.alpha == 0) this.container.removeIfExist(listItem);
            if (listItem.targetPoint.x != listItem.x) {
                direction = listItem.targetPoint.x > listItem.x;
                listItem.x += direction ? 10 : -10;
                if (listItem.targetPoint.x > listItem.x != direction) listItem.x = listItem.targetPoint.x;
            }
            if (listItem.targetPoint.y != listItem.y) {
                direction = listItem.targetPoint.y > listItem.y;
                listItem.y += direction ? 3 : -3;
                if (listItem.targetPoint.y > listItem.y != direction) listItem.y = listItem.targetPoint.y;
            }
            if (listItem.targetScale != listItem.scale.x) {
                direction = listItem.targetScale > listItem.scale.x;
                listItem.scale.x += direction ? 0.2 : -0.2;
                if (listItem.targetScale > listItem.scale.x != direction) listItem.scale.x = listItem.targetScale;
                listItem.scale.y = listItem.scale.x;
            }
        }
    }
};
canvas.app.manor.view.controls.elements.PortalListItem = function () {
    canvas.ui.ListRenderer.call(this);
    this.targetPoint = new canvas.px.Point(300);
    this.targetAlpha = 0;
    this.targetScale = 0;
    this.container = this.addChild(new canvas.px.Container());
    this.image = this.container.addChild(new canvas.ui.Image());
    this.image.y = 10;
    this.imageMask = this.container.addChild(new canvas.px.Graphics());
    this.imageMask.beginFill(0, 1);
    this.imageMask.drawEllipse(90, 48, 90, 48);
    this.imageMask.endFill();
    this.imageMask.position.set(3, 6);
    this.image.mask = this.imageMask;
    this.frontImage = this.container.addChild(new canvas.px.Sprite(canvas.px.TextureEmpty));
    this.container.position.set(-94, -53);
};
canvas.app.manor.view.controls.elements.PortalListItem.prototype = Object.create(canvas.ui.ListRenderer.prototype);
canvas.app.manor.view.controls.elements.PortalListItem.prototype.update = function () {
    if (this.data) {
        switch (this.data.status) {
            case -1:
                this.frontImage.texture = canvas.ResourceLoader.getImage("ui", "portal_image_1");
                break;
            case 1:
                this.frontImage.texture = canvas.ResourceLoader.getImage("ui", "portal_image_2");
                break;
            default:
                this.frontImage.texture = canvas.ResourceLoader.getImage("ui", "portal_image_3");
                break;
        }
        var location = canvas.app.manor.model.portalLocations[this.data.locationID];
        if (location && location.picture && this.image.url != location.picture) {
            this.image.setImage(location.picture);
        }
    }
};
canvas.app.manor.view.controls.elements.Scroll = function (wheelTarget, useDrag) {
    if (useDrag == undefined) useDrag = true;
    var minus = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "scroll_vertical_arrow"));
    var plus = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "scroll_vertical_arrow"));
    plus.scale.y = -1;
    plus.sprite.y = 18;
    var drag = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "scroll_vertical_drag"), [0, 7, 0, 5]);
    var bg = new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "scroll_back"), 0, 4, 0, 4);
    bg.x = -1;
    canvas.ui.Scroll.call(this, canvas.ui.ScrollType.VERTICAL, minus, plus, bg, drag, wheelTarget, useDrag, true);
    this._padding = 15;
    this._backPadding = 10;
    this._step = 50;
    this.setSize(22);
};
canvas.app.manor.view.controls.elements.Scroll.prototype = Object.create(canvas.ui.Scroll.prototype);
canvas.app.manor.view.controls.elements.TaskItem = function () {
    canvas.ui.ListRenderer.call(this, null, 360, 29);
    this.container = new canvas.px.Container();
    this.title = this.container.addChild(new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_13, canvas.Const.FONT_TAHOMA_13_BOLD, 10354945, 188, 20, "left"));
    this.title.position.set(0, 7);
    this.progress = this.container.addChild(new canvas.app.manor.view.controls.elements.LabourGreen(130));
    this.progress.position.set(190, 0);
    this.progress.setLabour(0, 0);
    this.removeButton = this.container.addChild(new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "delete_button")));
    this.removeButton.position.set(318, 3);
    this.click = null;
    this.mouseover = null;
    this.mouseout = null;
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.removeButton, this.clickHandler, this);
};
canvas.app.manor.view.controls.elements.TaskItem.prototype = Object.create(canvas.ui.ListRenderer.prototype);
canvas.app.manor.view.controls.elements.TaskItem.prototype.update = function () {
    if (this.data) {
        this.addChild(this.container);
        var recipe = canvas.app.manor.model.workShopRecepts[this.data.recipe];
        if (recipe) {
            this.title.text = "<font color='#6c3a11'>" + this.name + ". </font>" + recipe.title + (recipe.resultCount * this.data.count > 1 ? " (" + (recipe.resultCount * this.data.count).toString() + ")" : "");
        }
        this.progress.setLabour(this.data.duration, this.data.durationMax);
        this.progress.tf.text = (this.data.duration == 0 ? "" : canvas.Functions.formatDate(this.data.duration * 1e3, "00", 2, true) + " / ") + canvas.Functions.formatDate(this.data.durationMax * 1e3, "00", 2, true);
    } else {
        this.removeIfExist(this.container);
    }
};
canvas.app.manor.view.controls.elements.TaskItem.prototype.clickHandler = function () {
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.OPEN_CONFIRM, null, {
        params: canvas.Translator.getText(193) + "?",
        object: { name: canvas.app.manor.Event.USE_WORKSHOP_ACTION, params: { object: { building_action: "cancel", craft_request_id: this.data.id } } },
    });
};
canvas.app.manor.view.controls.elements.TaskItem2 = function () {
    canvas.ui.ListRenderer.call(this, null, 360, 29);
    this.container = new canvas.px.Container();
    this.title = this.container.addChild(new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_13, canvas.Const.FONT_TAHOMA_13_BOLD, 10354945, 208, 20, "left"));
    this.title.position.set(0, 7);
    this.progress = this.container.addChild(new canvas.app.manor.view.controls.elements.LabourGreen(130));
    this.progress.position.set(215, 0);
    this.progress.setLabour(0, 0);
    this.click = null;
    this.mouseover = null;
    this.mouseout = null;
};
canvas.app.manor.view.controls.elements.TaskItem2.prototype = Object.create(canvas.ui.ListRenderer.prototype);
canvas.app.manor.view.controls.elements.TaskItem2.prototype.update = function () {
    if (this.data) {
        this.addChild(this.container);
        this.title.text = "<font color='#6c3a11'>" + this.name + ". </font>" + this.data.item.title + (this.data.item.count * this.data.count > 1 ? " (" + (this.data.item.count * this.data.count).toString() + ")" : "");
        this.progress.setLabour(this.data.duration, this.data.durationMax);
        this.progress.tf.text = (this.data.duration == 0 ? "" : canvas.Functions.formatDate(this.data.duration * 1e3, "00", 2, true) + " / ") + canvas.Functions.formatDate(this.data.durationMax * 1e3, "00", 2, true);
    } else {
        this.removeIfExist(this.container);
    }
};
canvas.app.manor.view.controls.elements.Tree = function () {
    canvas.ui.List.call(this, canvas.ui.ListType.VERTICAL, 1);
};
canvas.app.manor.view.controls.elements.Tree.prototype = Object.create(canvas.ui.List.prototype);
canvas.app.manor.view.controls.elements.Tree.prototype.openAll = function (b) {
    if (b == undefined) b = true;
    var i,
        len = this.items.length;
    for (i = 0; i < len; i++) {
        this.items[i].opened = b;
    }
};
canvas.app.manor.view.controls.elements.Tree.prototype.init = function (titles, containers, saveState) {
    if (saveState == undefined) saveState = true;
    var item;
    var state = new Array();
    var i,
        len = this.items.length;
    if (saveState) {
        for (i = 0; i < len; i++) {
            state.push(this.items[i].opened);
        }
    }
    this.clear(false);
    this.titles = titles;
    this.containers = containers;
    len = titles.length;
    for (i = 0; i < len; i++) {
        item = new canvas.app.manor.view.controls.elements.TreeItem({ title: titles[i], content: containers[i] });
        this.add(item, false);
        if (saveState) item.opened = state[i];
    }
    this.update();
};
canvas.app.manor.view.controls.elements.TreeItem = function (data) {
    this._opened = false;
    Object.defineProperty(this, "opened", {
        get: function () {
            return this._opened;
        },
        set: function (value) {
            this._opened = value;
            if (value) {
                this.addChild(this.contentContainer);
            } else {
                this.removeIfExist(this.contentContainer);
            }
            this.setSize(this._width, Math.max(30, this.height));
            if (this.parent && this.parent.parent.parent && this.parent.parent.parent.update) {
                this.parent.parent.parent.update();
            }
            this.button.sprite.texture = this.button.baseTexture = canvas.ResourceLoader.getImage("ui", value ? "minus_icon" : "plus_icon");
        },
    });
    canvas.ui.ListRenderer.call(this, null, 330, 50);
    this.button = this.addChild(new canvas.ui.SimpleButton(canvas.px.TextureEmpty));
    this.title = this.button.sprite.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_12, 10354945, 305, 18, "left"));
    this.title.position.set(28, 5);
    this.contentContainer = this.addChild(new canvas.px.Container());
    this.contentContainer.position.set(28, 25);
    this.click = null;
    this.mouseover = null;
    this.mouseout = null;
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.button, this.clickHandler, this);
    this.data = data;
};
canvas.app.manor.view.controls.elements.TreeItem.prototype = Object.create(canvas.ui.ListRenderer.prototype);
canvas.app.manor.view.controls.elements.TreeItem.prototype.update = function () {
    canvas.Functions.clearChildren(this.contentContainer);
    if (this.data) {
        this.contentContainer.addChild(this.data.content);
        this.title.text = this.data.title;
    } else {
        this.title.text = "";
    }
};
canvas.app.manor.view.controls.elements.TreeItem.prototype.clickHandler = function () {
    this.opened = !this.opened;
};
canvas.app.manor.view.controls.elements.TreeItem.prototype.destroy = function () {
    canvas.EventManager.removeEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.button, this.clickHandler, this);
    canvas.ui.ListRenderer.prototype.destroy.call(this);
};
canvas.app.manor.view.controls.elements.UserLine = function () {
    canvas.px.Container.call(this);
    this.nickField = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD, 12713984, 200, 18, "left");
    this.addChild(this.nickField);
    this.infoButton = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "info_button_0"));
    this.addChild(this.infoButton);
    this.infoButton.y = 2;
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.infoButton, this.infoClickHandler, this);
};
canvas.app.manor.view.controls.elements.UserLine.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.manor.view.controls.elements.UserLine.prototype.init = function (user) {
    this._login = user.login;
    this.nickField.text = user.login + " [" + user.level + "]";
    this.infoButton.x = this.nickField.textWidth + 3;
};
canvas.app.manor.view.controls.elements.UserLine.prototype.infoClickHandler = function () {
    showUserInfo(this._login);
};
canvas.app.manor.view.controls.elements.UserLine.prototype.destroy = function () {
    canvas.EventManager.removeEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.infoButton, this.infoClickHandler, this);
    canvas.px.Container.prototype.destroy.apply(this, [{ children: true }]);
};
canvas.app.manor.view.controls.elements.WorkRequestLine = function (index, radioArray, moneyImage) {
    this._data = null;
    Object.defineProperty(this, "data", {
        get: function () {
            return this._data;
        },
        set: function (value) {
            this._data = value;
            this.update();
        },
    });
    canvas.px.Container.call(this);
    if (moneyImage == undefined) moneyImage = "money_silver";
    this.index = index;
    this.back = new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "tile_0"), 4, 0, 4, 0);
    this.back.width = 335;
    this.addChild(this.back);
    this.back.position.set(30, 0);
    this.priceField = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11, 7092753, 29, 18, "left");
    this.addChild(this.priceField);
    this.priceField.position.set(314, 5);
    this.labourField = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11, 7092753, 34, 18, "left");
    this.addChild(this.labourField);
    this.labourField.position.set(259, 5);
    var img = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", moneyImage));
    this.addChild(img);
    img.position.set(345, 7);
    this.check = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "check_0"), null, new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "check_0_checker")), radioArray);
    this.addChild(this.check);
    this.check.position.set(0, -4);
    this.userLine = new canvas.app.manor.view.controls.elements.UserLine();
    this.addChild(this.userLine);
    this.userLine.position.set(37, 5);
    this.back.interactive = true;
    this.back.click = this.clickHandler.bind(this);
};
canvas.app.manor.view.controls.elements.WorkRequestLine.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.manor.view.controls.elements.WorkRequestLine.prototype.update = function () {
    if (this.data) {
        this.priceField.text = this.data.price ? this.data.price : "";
        this.labourField.text = this.data.labour ? this.data.labour : "";
        this.userLine.init(this.data.user);
    }
};
canvas.app.manor.view.controls.elements.WorkRequestLine.prototype.clickHandler = function () {
    this.check.select();
};
canvas.app.manor.view.controls.elements.WorkRequestLine.prototype.destroy = function () {
    this.back.click = null;
    canvas.px.Container.prototype.destroy.apply(this, [{ children: true }]);
};
canvas.app.manor.view.controls.throne.ItemsWindow = function () {
    canvas.px.Window.call(this);
    this._compactModey = true;
    Object.defineProperty(this, "compactMode", {
        get: function () {
            return this._compactMode;
        },
        set: function (value) {
            this._compactMode = value;
            if (this._compactMode) {
                this.panels.setSize(305, 320);
                this.list.setSize(250, 280);
                this.list.cellsCount = 3;
                this.arrow.scale.x = -1;
            } else {
                this.panels.setSize(470, 320);
                this.list.setSize(420, 280);
                this.list.cellsCount = 5;
                this.arrow.scale.x = 1;
            }
            this.closeButton.position.set(this.panels._width - 25, 15);
        },
    });
    this._data = null;
    Object.defineProperty(this, "data", {
        get: function () {
            return this._data;
        },
        set: function (value) {
            if (!value) return;
            this._data = value;
            this.update();
        },
    });
    this.panels = this.addChild(new canvas.app.manor.view.controls.elements.Panels([new canvas.px.Container(), new canvas.px.Container()], ["shop", "my"], [canvas.Translator.getText(1502), canvas.Translator.getText(253)], 1));
    this.header = this.panels;
    this.list = this.addChild(new canvas.ui.List(canvas.ui.ListType.VERTICAL, 3));
    this.list.position.set(20, 40);
    this.list.scroll = new canvas.app.manor.view.controls.elements.Scroll(this, false);
    this.list._scrollPadding = 20;
    this.closeButton = this.addChild(
        new canvas.ui.Button(canvas.ResourceLoader.getImage("ui", "main_window_close_base"), canvas.ResourceLoader.getImage("ui", "main_window_close_over"), canvas.ResourceLoader.getImage("ui", "main_window_close_down"), null)
    );
    this.arrow = this.addChild(
        new canvas.ui.Button(canvas.ResourceLoader.getImage("ui", "throne_room_arrow_base"), canvas.ResourceLoader.getImage("ui", "throne_room_arrow_over"), canvas.ResourceLoader.getImage("ui", "throne_room_arrow_down"))
    );
    this.arrow.pivot = new canvas.px.Point(9, 10);
    this.arrow.position.set(20, 325);
    this.compactMode = true;
    this.panels.path = "shop";
    this.interactive = true;
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.arrow, this.arrowClickHandler, this);
};
canvas.app.manor.view.controls.throne.ItemsWindow.prototype = Object.create(canvas.px.Window.prototype);
canvas.app.manor.view.controls.throne.ItemsWindow.prototype.clickHandler = function (e) {
    canvas.px.Window.prototype.clickHandler.call(this, e);
    if (this.parent) {
        this.parent.addChild(this);
    }
};
canvas.app.manor.view.controls.throne.ItemsWindow.prototype.arrowClickHandler = function () {
    this.compactMode = !this.compactMode;
};
canvas.app.manor.view.controls.throne.ItemsWindow.prototype.update = function () {
    this.list.clear(false);
    var i,
        len = this.data.length;
    for (i = 0; i < len; i++) {
        this.list.add(new canvas.app.manor.view.controls.throne.ThroneItemRenderer(this.data[i]), false);
    }
    this.list.update();
};
canvas.app.manor.view.controls.throne.ItemsWindow.prototype.updateTime = function () {
    var i,
        len = this.list.items.length;
    for (i = 0; i < len; i++) {
        this.list.items[i].updateTime();
    }
};
canvas.app.manor.view.controls.throne.ItemsWindow.prototype.deactivate = function () {};
canvas.app.manor.view.controls.throne.ItemsWindow.prototype.hide = function () {};
canvas.app.manor.view.controls.throne.ItemsWindow.prototype.clickHandler = function (mouseData) {
    canvas.px.Window.prototype.clickHandler.call(this, mouseData);
    if (canvas.Functions.findParent(this.closeButton, mouseData.target)) {
        canvas.app.manor.model.throneRoomData.currentType = 0;
        canvas.EventManager.dispatchEvent(canvas.app.manor.Event.THRONE_ROOM_UPDATE);
    }
};
canvas.app.manor.view.controls.throne.ThroneItemRenderer = function (data) {
    canvas.ui.ListRenderer.call(this, null, 76, 125);
    this.container = this.addChild(new canvas.px.Container());
    this.container.position.set(2, 2);
    this.shopBack = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "throne_room_item_back")));
    var sprite = this.container.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "item_back")));
    sprite.position.set(8, 7);
    this.image = this.container.addChild(new canvas.ui.Image());
    this.image.position.set(8, 7);
    this.image.interactive = true;
    sprite = this.container.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "item_border")));
    sprite.position.set(2, 2);
    this.money = this.container.addChild(new canvas.app.view.Money(null, null, null, 76, null, "center"));
    this.money.y = 76;
    this.buyButton = this.container.addChild(new canvas.app.view.SmallButton());
    this.buyButton.setTitle(canvas.Translator.getText(167));
    this.buyButton.position.set(7, 100);
    this.actionPanel = this.container.addChild(new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "item_plane")));
    this.actionPanel.position.set(8, 30);
    this.actionTitle = this.actionPanel.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_10, 3419170, 60, 14, "center"));
    this.actionTitle.position.set(0, -2);
    this.actionPanel.interactive = true;
    this.actionPanel.buttonMode = true;
    this.activeImage = this.container.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "green_check")));
    this.activeImage.position.set(24, 52);
    this.expiryField = this.container.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_12_BOLD_STROKE, 15521651, 74, 18, "center"));
    this.expiryField.position.set(0, 9);
    this.hint = new canvas.app.view.MappingHint();
    if (data.mode != canvas.data.manor.throne.ItemData.MODE_SHOP) this._height = 72;
    this.data = data;
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.actionPanel, this.actionClickHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.buyButton, this.buyClickHandler, this);
    this.image.mouseover = this.overHandler.bind(this);
    this.image.mouseout = this.outHandler.bind(this);
    this.mouseover = null;
    this.mouseout = null;
    this.click = null;
};
canvas.app.manor.view.controls.throne.ThroneItemRenderer.prototype = Object.create(canvas.ui.ListRenderer.prototype);
canvas.app.manor.view.controls.throne.ThroneItemRenderer.prototype.update = function () {
    var Conf = canvas.app.manor.model.throneRoomData;
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.HINT_REMOVE, null, { target: this.buyButton });
    this.expiryField.text = "";
    var itemData = this.data;
    if (itemData && itemData.artifact) {
        this.image.setImage(itemData.artifact.picture);
        this.updateMoney();
        this.activeImage.visible = itemData.isActive;
        this.buyButton.enabled = !itemData.isActive;
        if (itemData.mode == canvas.data.manor.throne.ItemData.MODE_SHOP) {
            this.actionTitle.text = canvas.Translator.getText(itemData.artikulID == Conf.userData.redressItemID ? 1e3 : 1508);
            if (!itemData.isActive && Conf.userData.restrictions && Conf.userData.restrictions[itemData.id] != undefined) {
                canvas.EventManager.dispatchEvent(canvas.app.manor.Event.HINT_ADD, null, { target: this.buyButton, params: new canvas.utils.HintParams(this.hint) });
                this.hint.update(Conf.userData.restrictions[itemData.id]);
                this.buyButton.enabled = false;
            }
            this.addChildAt(this.shopBack, 0);
            this.container.addChild(this.money);
            this.container.addChild(this.buyButton);
            this.expiryField.text = itemData.expiry > 0 ? canvas.Functions.formatDate(itemData.expiry * 1e3, "00", 2, true) : "";
        } else {
            this.actionTitle.text = canvas.Translator.getText(itemData.isActive ? 1e3 : 1506);
            this.removeIfExist(this.shopBack);
            this.container.removeIfExist(this.money);
            this.container.removeIfExist(this.buyButton);
            this.updateTime();
        }
    } else {
        this.image.visible = false;
        this.activeImage.visible = false;
        this.removeIfExist(this.shopBack);
        this.container.removeIfExist(this.money);
        this.container.removeIfExist(this.buyButton);
    }
};
canvas.app.manor.view.controls.throne.ThroneItemRenderer.prototype.updateTime = function () {
    var itemData = this.data;
    if (!itemData || itemData.mode == canvas.data.manor.throne.ItemData.MODE_SHOP) return;
    var time = itemData.expiry - canvas.app.manor.model.serverTime.getTime();
    this.expiryField.text = time > 0 ? canvas.Functions.formatDate(time * 1e3, "00", 2, true) : "";
};
canvas.app.manor.view.controls.throne.ThroneItemRenderer.prototype.updateMoney = function () {
    this.money.reset();
    if (!this.data.money) return;
    var artikul = this.data.money.getBageArtikul();
    if (artikul) {
        var artifactProto = canvas.data.manor.throne.Prototypes.artifactPrototypes[artikul];
        if (artifactProto) {
            this.money.image = artifactProto.picture;
            this.money.imageCount = this.data.money.getBageCount();
        }
    } else {
        switch (this.data.money.priceType) {
            case canvas.data.manor.throne.ItemData.TYPE_MONEY:
                this.money.money = this.data.money.price * 100;
                break;
            case canvas.data.manor.throne.ItemData.TYPE_DIAMONDS:
                this.money.gems = this.data.money.price;
                break;
        }
    }
};
canvas.app.manor.view.controls.throne.ThroneItemRenderer.prototype.actionClickHandler = function () {
    var Conf = canvas.app.manor.model.throneRoomData;
    var itemData = this.data;
    if (itemData.mode == canvas.data.manor.throne.ItemData.MODE_MY) {
        canvas.EventManager.dispatchEvent(itemData.isActive ? canvas.app.manor.Event.THRONE_ROOM_REMOVE : canvas.app.manor.Event.THRONE_ROOM_INSTALL, null, { id: itemData.id });
    } else {
        if (itemData.artikulID == Conf.userData.redressItemID) {
            Conf.userData.redressItemID = 0;
        } else {
            Conf.userData.redressItemID = itemData.artikulID;
        }
        canvas.EventManager.dispatchEvent(canvas.app.manor.Event.THRONE_ROOM_UPDATE);
    }
};
canvas.app.manor.view.controls.throne.ThroneItemRenderer.prototype.buyClickHandler = function (event) {
    event.params.stopPropagation();
    if (this.data.mode == canvas.data.manor.throne.ItemData.MODE_SHOP) {
        canvas.EventManager.dispatchEvent(canvas.app.manor.Event.OPEN_CONFIRM, null, {
            params:
                canvas.Translator.getText(1507) +
                " <a href='/artifact_info.php?artikul_id=" +
                this.data.artifact.id +
                "'>" +
                this.data.artifact.title +
                "</a> " +
                canvas.Translator.getText(2021).toLowerCase() +
                " " +
                this.money.field.text +
                " ?",
            object: { name: canvas.app.manor.Event.THRONE_ROOM_BUY, params: this.data },
        });
    }
};
canvas.app.manor.view.controls.throne.ThroneItemRenderer.prototype.overHandler = function () {
    if (this.data && this.data.artifact) {
        artifactAltSimple(this.data.artifact.id, 2);
    }
};
canvas.app.manor.view.controls.throne.ThroneItemRenderer.prototype.outHandler = function () {
    if (this.data && this.data.artifact) {
        artifactAltSimple(this.data.artifact.id, 0);
    }
};
canvas.app.manor.view.controls.throne.ThroneItemRenderer.prototype.destroy = function () {
    canvas.EventManager.removeEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.actionPanel, this.actionClickHandler, this);
    canvas.EventManager.removeEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.buyButton, this.buyClickHandler, this);
    this.image.mouseover = null;
    this.image.mouseout = null;
    canvas.ui.ListRenderer.prototype.destroy.call(this);
};
canvas.app.manor.view.controls.throne.ThroneRoomRenderer = function (data) {
    canvas.ui.ListRenderer.call(this);
    this.container = this.addChild(new canvas.px.Container());
    this.image = this.container.addChild(new canvas.ui.Image());
    this.sensor = this.addChild(new canvas.px.Graphics());
    this.sensor.interactive = true;
    this.sensor.mouseover = this.overHandler.bind(this);
    this.sensor.mouseout = this.outHandler.bind(this);
    this.image.interactiveChildren = false;
    this.image.interactive = false;
    this.mc = null;
    this.lastURL = null;
    this.data = data;
};
canvas.app.manor.view.controls.throne.ThroneRoomRenderer.prototype = Object.create(canvas.ui.ListRenderer.prototype);
canvas.app.manor.view.controls.throne.ThroneRoomRenderer.prototype.update = function () {
    var Conf = canvas.app.manor.model.throneRoomData;
    this.filters = [];
    var url;
    var typePrototype;
    if (this.data) {
        if (this.data.artikulID > 0) {
            typePrototype = canvas.data.manor.throne.Prototypes.getTypePrototype(this.data.proto.type);
            url = this.data.proto.picture;
        } else {
            if (!Conf.watchMode) {
                typePrototype = canvas.data.manor.throne.Prototypes.getTypePrototype(this.data.id);
                url = typePrototype.imageURL;
            } else {
                this.clear();
                this.lastURL = "";
            }
        }
        if (url) {
            this.createSensor(typePrototype.id, url);
            if (this.lastURL != url) {
                this.clear();
                var a = url.split(".");
                if (a[a.length - 1] == "swf") {
                    var name = canvas.Functions.extractSwfName(url);
                    this.mc = this.container.addChild(new canvas.px.MovieClip(canvas.Config.throneRoomPath + name + "/" + name));
                    this.mc.frameEvent = canvas.app.manor.Event.ENTER_FRAME;
                    this.mc.interactiveChildren = false;
                    this.mc.interactive = false;
                    if (!this.mc.ready) {
                        canvas.EventManager.addEventListener(canvas.px.MovieClipEvent.EVENT_READY, this.mc, this.readyHandler, this);
                    } else {
                        this.readyHandler();
                    }
                } else {
                    this.image.setImage(url);
                }
            }
            this.position.set(typePrototype.posX, typePrototype.posY);
            this.lastURL = url;
            if (Conf.currentType == typePrototype.id && (!typePrototype || !typePrototype.disabled)) {
                this.filters = [canvas.Functions.getGlow(10, 1.54, 1.81, 15521651, 0.1)];
            }
        }
    }
};
canvas.app.manor.view.controls.throne.ThroneRoomRenderer.prototype.createSensor = function (id) {
    this.sensor.clear();
    this.sensor.beginFill(0, 0);
    switch (id) {
        case 1:
            this.sensor.drawPolygon(new canvas.px.Point(190, 190), new canvas.px.Point(370, 70), new canvas.px.Point(630, 70), new canvas.px.Point(810, 190));
            break;
        case 2:
            this.sensor.drawEllipse(170, 130, 100, 50);
            break;
        case 3:
            this.sensor.drawRect(15, 15, 40, 180);
            this.sensor.drawRect(945, 15, 40, 180);
            this.sensor.drawRect(170, 40, 25, 125);
            this.sensor.drawRect(803, 40, 25, 125);
            this.sensor.drawRect(270, 60, 10, 90);
            this.sensor.drawRect(720, 60, 10, 90);
            this.sensor.drawRect(314, 68, 7, 72);
            this.sensor.drawRect(679, 68, 7, 72);
            break;
        case 4:
            this.sensor.drawRect(20, 20, 260, 130);
            break;
        case 5:
            this.sensor.drawRect(16, 5, 16, 120);
            this.sensor.drawRect(320, 5, 16, 120);
            break;
        case 6:
            this.sensor.drawEllipse(80, 90, 60, 30);
            break;
        case 7:
            this.sensor.drawEllipse(50, 50, 40, 20);
            break;
        case 8:
            this.sensor.drawEllipse(30, 32, 20, 10);
            break;
        case 9:
            this.sensor.drawEllipse(78, 80, 60, 30);
            break;
        case 10:
            this.sensor.drawEllipse(50, 60, 40, 20);
            break;
        case 11:
            this.sensor.drawEllipse(25, 32, 20, 10);
            break;
        case 12:
            this.sensor.drawRect(156, 90, 40, 50);
            break;
        case 13:
            this.sensor.drawRect(21, 90, 40, 50);
            break;
        case 14:
            this.sensor.drawEllipse(74, 90, 20, 25);
            break;
        case 15:
            this.sensor.drawEllipse(50, 78, 15, 17);
            break;
        case 16:
            this.sensor.drawEllipse(33, 40, 10, 12);
            break;
        case 17:
            this.sensor.drawEllipse(61, 78, 20, 25);
            break;
        case 18:
            this.sensor.drawEllipse(39, 66, 15, 17);
            break;
        case 19:
            this.sensor.drawEllipse(31, 40, 10, 12);
            break;
        case 20:
            this.sensor.drawEllipse(80, 50, 10, 15);
            this.sensor.drawEllipse(195, 68, 9, 11);
            this.sensor.drawEllipse(260, 80, 5, 7);
            this.sensor.drawEllipse(838, 49, 10, 15);
            this.sensor.drawEllipse(725, 69, 9, 11);
            this.sensor.drawEllipse(661, 80, 5, 7);
            break;
        case 21:
            this.sensor.drawEllipse(37, 38, 16, 20);
            break;
        case 23:
            this.sensor.drawEllipse(46, 78, 26, 34);
            break;
    }
    this.sensor.endFill();
};
canvas.app.manor.view.controls.throne.ThroneRoomRenderer.prototype.readyHandler = function () {
    canvas.EventManager.removeEventListener(canvas.px.MovieClipEvent.EVENT_READY, this.mc, this.readyHandler, this);
    if (this.mc.totalFrames > 1) {
        this.mc.loop = true;
    }
    this.mc.playChildren();
};
canvas.app.manor.view.controls.throne.ThroneRoomRenderer.prototype.clear = function () {
    this.image.clear();
    if (this.mc) {
        this.mc.destroy();
        this.mc = null;
    }
};
canvas.app.manor.view.controls.throne.ThroneRoomRenderer.prototype.overHandler = function () {
    if (canvas.app.manor.model.throneRoomData.watchMode) return;
    this.container.filters = [canvas.Functions.getBrightness(1.2)];
};
canvas.app.manor.view.controls.throne.ThroneRoomRenderer.prototype.outHandler = function () {
    this.container.filters = null;
};
canvas.app.manor.view.controls.throne.ThroneRoomView = function () {
    this._data = null;
    Object.defineProperty(this, "data", {
        get: function () {
            return this._data;
        },
        set: function (value) {
            this._data = value;
            this.update();
        },
    });
    this._bMode = true;
    Object.defineProperty(this, "bMode", {
        get: function () {
            return this._bMode;
        },
        set: function (value) {
            this._bMode = value;
            this.updateButtonMode();
        },
    });
    canvas.px.Container.call(this);
    this.items = [];
};
canvas.app.manor.view.controls.throne.ThroneRoomView.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.manor.view.controls.throne.ThroneRoomView.prototype.update = function () {
    if (this.data) {
        var len = this.data.length;
        var throneRoomRenderer;
        for (var i = 0; i < len; i++) {
            throneRoomRenderer = this.items[i];
            if (!throneRoomRenderer) {
                throneRoomRenderer = this.addChild(new canvas.app.manor.view.controls.throne.ThroneRoomRenderer(this.data[i]));
                throneRoomRenderer.name = "item";
                this.items.push(throneRoomRenderer);
                throneRoomRenderer.sensor.buttonMode = this.bMode;
            } else {
                throneRoomRenderer.data = this.data[i];
            }
        }
    }
};
canvas.app.manor.view.controls.throne.ThroneRoomView.prototype.updateButtonMode = function () {
    var len = this.items.length;
    var throneRoomRenderer;
    for (var i = 0; i < len; i++) {
        throneRoomRenderer = this.items[i];
        throneRoomRenderer.sensor.buttonMode = throneRoomRenderer.sensor.interactive = this.bMode;
    }
};
canvas.app.manor.view.controls.throne.ThroneRoomView.prototype.stopAndPlay = function (stop) {
    var i,
        len = this.items.length,
        throneRoomRenderer;
    for (i = 0; i < len; i++) {
        throneRoomRenderer = this.items[i];
        if (throneRoomRenderer.mc) {
            if (stop) {
                throneRoomRenderer.mc.stopChildren();
            } else {
                throneRoomRenderer.mc.playChildren();
            }
        }
    }
};
canvas.app.world.Const = {};
canvas.app.world.Event = { ENTER_FRAME: "World.ENTER_FRAME", HINT_ADD: "World.HINT_ADD", HINT_REMOVE: "World.HINT_REMOVE" };
canvas.app.world.Main = function (model, hintManager, windowsManager) {
    canvas.px.Container.call(this);
    this.model = model;
    this.hintManager = hintManager;
    this.windowsManager = windowsManager;
    if (this.model.isModule) {
        canvas.app.world.Event.HINT_ADD = canvas.app.location.Event.HINT_ADD;
        canvas.app.world.Event.HINT_REMOVE = canvas.app.location.Event.HINT_REMOVE;
    } else {
        canvas.EventManager.addEventListener(canvas.app.world.Event.HINT_ADD, null, this.handlerHintAdd, this);
        canvas.EventManager.addEventListener(canvas.app.world.Event.HINT_REMOVE, null, this.handlerHintRemove, this);
    }
    canvas.EventManager.addEventListener(canvas.Event.STAGE_KEY_DOWN, null, this.handlerKey, this);
    canvas.EventManager.addEventListener(canvas.Event.STAGE_KEY_UP, null, this.handlerKeyUp, this);
    canvas.EventManager.addEventListener(canvas.px.WindowEvent.EVENT_OPEN, null, this.handlerOpenWindow, this);
    this.view = new canvas.app.world.View(this);
    this.hintContainer = new canvas.px.Container();
    this.hintContainer.interactive = true;
    this.addChild(this.view);
    this.addChild(this.hintContainer);
    this.windowsContainer = new canvas.px.Container();
    this.addChild(this.windowsContainer);
    this.timer = setInterval(this.timerHandler.bind(this), 1e3);
    this.flag_timer = setInterval(this.flag_timer_tic.bind(this), this.model.UpdInterval);
    this.loadFrontsData();
};
canvas.app.world.Main.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.world.Main.prototype.handlerKey = function (event) {
    if (document.activeElement && document.activeElement.constructor.name == "HTMLInputElement") return;
    var keyCode = event.params.globalKeyCode;
    var altKey = event.params.altKey;
    var ctrlKey = event.params.ctrlKey;
    var shiftKey = event.params.shiftKey;
    switch (keyCode) {
        case canvas.Const.KEYS.L:
            if (shiftKey) {
                canvas.Log.show(canvas.Log.WORLD);
            }
            break;
        case canvas.Const.KEYS.LEFT_ARROW:
        case canvas.Const.KEYS.UP_ARROW:
        case canvas.Const.KEYS.RIGHT_ARROW:
        case canvas.Const.KEYS.DOWN_ARROW:
            this.model.keyData[keyCode] = true;
            if (!this.model.keyProcssor) {
                this.model.keyProcssor = true;
                canvas.EventManager.addEventListener(canvas.app.world.Event.ENTER_FRAME, null, this.repeatKeyHandler, this);
            }
            break;
    }
};
canvas.app.world.Main.prototype.handlerKeyUp = function (event) {
    if (document.activeElement && document.activeElement.constructor.name == "HTMLInputElement") return;
    event.params.preventDefault();
    var keyCode = event.params.keyCode;
    var altKey = event.params.altKey;
    var ctrlKey = event.params.ctrlKey;
    var shiftKey = event.params.shiftKey;
    switch (keyCode) {
        case canvas.Const.KEYS.LEFT_ARROW:
        case canvas.Const.KEYS.UP_ARROW:
        case canvas.Const.KEYS.RIGHT_ARROW:
        case canvas.Const.KEYS.DOWN_ARROW:
            if (this.model.keyData[keyCode]) {
                delete this.model.keyData[keyCode];
            }
            break;
    }
};
canvas.app.world.Main.prototype.handlerOpenWindow = function () {
    this.hintManager.hide();
};
canvas.app.world.Main.prototype.resize = function (w, h) {
    var ww = this.get_ww(w);
    var hh = this.get_hh(h);
    this.hintManager.init(this.hintContainer, ww, hh);
    this.model.width = ww;
    this.model.height = hh;
    this.view.resize(ww, hh);
};
canvas.app.world.Main.prototype.get_ww = function (ww) {
    var conf = this.model;
    if (ww < conf.min_stage_width) {
        return conf.min_stage_width;
    } else if (ww > conf.max_stage_width) {
        return conf.max_stage_width;
    }
    return ww;
};
canvas.app.world.Main.prototype.get_hh = function (hh) {
    var conf = this.model;
    if (hh < conf.min_stage_height) {
        return conf.min_stage_height;
    } else if (hh > conf.max_stage_height) {
        return conf.max_stage_height;
    }
    return hh;
};
canvas.app.world.Main.prototype.handlerHintAdd = function (e) {
    this.hintManager.add(e.params.target, e.params.params);
};
canvas.app.world.Main.prototype.handlerHintRemove = function (e) {
    this.hintManager.remove(e.params.target);
};
canvas.app.world.Main.prototype.swfObject = function (data) {
    var str;
    var conf = canvas.app.world.model;
    if (data) {
        for (str in data) {
            switch (str) {
                case "fronts":
                    var config = data["fronts"];
                    conf.parseFronts(config);
                    this.view.updateFronts();
                    if (this.view.label2.frontsContent.fdata != null) {
                        this.view.label2.frontsContent.fdata = conf.frontsData[this.view.label2.frontsContent.fdata.id];
                    }
                    break;
            }
        }
    }
};
canvas.app.world.Main.prototype.timerHandler = function () {
    var conf = this.model;
    if (conf.treasureLocation > 0 && conf.treasureFinishTime * 1e3 <= Date.now()) {
        conf.treasureArea = conf.treasureLocation = 0;
        this.view.updateTreasure();
    } else {
        this.view.label2.updateTreasureTime();
    }
    var frontData;
    var timeLeft;
    var load = false;
    for (var key in conf.frontsData) {
        frontData = conf.frontsData[key];
        timeLeft = frontData.cooldown - Date.now();
        frontData.displayTime = canvas.Functions.formatDate(timeLeft);
        if (timeLeft <= 0) load = true;
    }
    if (load) {
        this.loadFrontsData();
    } else {
        this.view.label2.frontsContent.updateTime();
    }
};
canvas.app.world.Main.prototype.loadFrontsData = function (action, locationID) {
    front_locations();
};
canvas.app.world.Main.prototype.setPoint = function (p2) {
    try {
        if (p2 == 0) {
            canvas.Functions.deleteSessTarget();
        } else {
            setCookie("sess_target", String(p2));
        }
    } catch (e) {
        canvas.app.world.log("setPoint: " + e);
    }
};
canvas.app.world.Main.prototype.flag_timer_tic = function () {
    var conf = this.model;
    if (conf.locked_flag_update) {
        return;
    }
    var cur_time = Date.now() - conf.startTime;
    var delta = cur_time - conf.last_flag_update;
    if (delta > 2500 || this.isFastUpdate) {
        this.isFastUpdate = false;
        if (this.flag_timer) clearInterval(this.flag_timer);
        conf.last_flag_update = cur_time;
        conf.locked_flag_update = true;
        try {
            var mFlag = getCookie("sess_location");
            var target_tmp = canvas.Functions.getSessTarget().target;
            if (conf.FinishLocation != target_tmp) {
                conf.FinishLocation = target_tmp;
                this.view.map1.refresh_pers_finish_flag();
                this.view.map2.refresh_pers_finish_flag();
            }
            if (conf.parse_my_flag_js(mFlag)) {
                if (conf.isModule) {
                    this.view.refresh_my_flag();
                }
            }
            conf.locked_flag_update = false;
            this.flag_timer = setInterval(this.flag_timer_tic.bind(this), this.model.UpdInterval);
        } catch (e) {
            console.log(e);
        }
    } else {
    }
};
canvas.app.world.Main.prototype.fastUpdateFlag = function () {
    this.isFastUpdate = true;
    this.flag_timer_tic();
};
canvas.app.world.Main.prototype.repeatKeyHandler = function () {
    var k;
    var cnt = 0;
    for (k in this.model.keyData) {
        switch (parseInt(k)) {
            case canvas.Const.KEYS.LEFT_ARROW:
                this.view.scroll_H.minusClickHandler();
                cnt++;
                break;
            case canvas.Const.KEYS.UP_ARROW:
                this.view.scroll_V.minusClickHandler();
                cnt++;
                break;
            case canvas.Const.KEYS.RIGHT_ARROW:
                this.view.scroll_H.plusClickHandler();
                cnt++;
                break;
            case canvas.Const.KEYS.DOWN_ARROW:
                this.view.scroll_V.plusClickHandler();
                cnt++;
                break;
            default:
                break;
        }
    }
    if (cnt == 0) {
        this.model.keyProcssor = false;
        canvas.EventManager.removeEventListener(canvas.app.world.Event.ENTER_FRAME, null, this.repeatKeyHandler, this);
    }
};
canvas.app.world.Model = function (par) {
    Object.defineProperty(this, "stageWidth", {
        get: function () {
            return this.isModule ? this.ModuleStageWidth : this.width;
        },
    });
    Object.defineProperty(this, "stageHeight", {
        get: function () {
            return this.isModule ? canvas.app.location.model.hh : this.height;
        },
    });
    this.findWay = new canvas.app.world.engine.FindWay();
    this.isModule = false;
    this.startTime = Date.now();
    this.IsBold = true;
    this.min_stage_width = 199;
    this.min_stage_height = 283;
    this.max_stage_width = 2054;
    this.max_stage_height = 1344;
    this.manorMode = false;
    this.lastManorMode = false;
    this.userLevel = 0;
    this.AREALOC = [];
    this.treasureLocation = 0;
    this.treasureArea = 0;
    this.treasureFinishTime = 0;
    this.way_conf = {};
    this.lng = {};
    this.keyData = {};
    this.CfgLink = par.CfgLink ? par.CfgLink : "world_conf.xml";
    this.UpdLink = par.UpdLink ? par.UpdLink : "my_flag.xml";
    this.NavLink = par.NavLink ? par.NavLink : "compass_conf.xml";
    this.requestURL = par.RequestUrl ? par.RequestUrl : "estate_conf.php";
    this.IsBold = par.nobold != null ? par.nobold != 1 : true;
    this.UpdInterval = parseInt(par.UpdInterval) * 1e3;
    this.locked_flag_update = false;
    this.last_flag_update = 0;
    if (this.UpdInterval < 3e3) this.UpdInterval = 3e3;
    this.World1_Path = par.World1_Path ? par.World1_Path : "world_res/world1/";
    this.World2_Path = par.World2_Path ? par.World2_Path : "world_res/world2/";
    this.AreasXML_Path = par.AreasXML_Path ? par.AreasXML_Path : "world_xml/";
    this.race = par.race ? par.race : "1";
    this.race = this.race == "1" ? "hum" : "mag";
    this.myLocVerge = {};
    this.LOC_LIST_AR = [];
    this.ls_ww = 0;
    this.ls_hh = 0;
    var mFlag = "";
    try {
        var mFlag = getCookie("sess_location");
        this.FinishLocation = canvas.Functions.getSessTarget().target;
    } catch (e) {}
    if (mFlag) this.parse_my_flag_first_js(mFlag);
    this.FlagArea = this.ActiveArea;
    this.FlagLocation = this.ActiveLocation;
    this.focusedAreaId = this.ActiveArea;
    this.focusedLocationId = this.ActiveLocation;
    this.userLevel = par.level == undefined ? 0 : parseInt(par.level.toString());
    this.treasureLocation = par.treasureAreaId == undefined ? 0 : parseInt(par.treasureAreaId.toString());
    this.treasureFinishTime = Math.round(Date.now() * 0.001) + (par.treasureTime == undefined ? 0 : parseInt(par.treasureTime));
    this.frontsURL = par.frontsURL != undefined ? par.frontsURL : "";
};
canvas.app.world.Model.prototype.get_area_xml_link = function (area_id) {
    return this.AreasXML_Path + "area_" + area_id + ".xml";
};
canvas.app.world.Model.prototype.parseFronts = function (source) {
    if (!source) return;
    this.frontsData = new Object();
    var obj;
    var frontData;
    for (var key in source) {
        obj = source[key];
        frontData = new canvas.data.location.DFrontsLoc();
        frontData.cooldown = Date.now() + (obj.nextEvent <= 0 ? 5 : obj.nextEvent) * 1e3;
        frontData.cooldownStart = Date.now();
        frontData.owner = this.parseRace(parseInt(obj.owner));
        frontData.status = parseInt(obj.status);
        frontData.title = obj.title;
        frontData.id = obj.area_id;
        this.frontsData[frontData.id] = frontData;
    }
};
canvas.app.world.Model.prototype.parseRace = function (value) {
    return value > 1 ? -1 : value;
};
canvas.app.world.Model.prototype.findFrontLoc = function (areaID) {
    var str;
    var str2;
    var frontID = "";
    var area = this.AREAS[areaID];
    if (!area) return frontID;
    var len = area.locations_ids.length;
    for (var i = 0; i < len; i++) {
        str = area.locations_ids[i];
        if (frontID == "") {
            for (str2 in this.frontsData) {
                if (str2 == str) {
                    frontID = str2;
                    break;
                }
            }
        }
    }
    return frontID;
};
canvas.app.world.Model.prototype.initModule = function (value, parent) {
    this.isModule = value;
    if (this.isModule) {
        var Conf = canvas.app.location.model;
        this.CfgLink = Conf.MapCfgLink;
        this.NavLink = Conf.MapNavLink;
        this.UpdLink = Conf.MapUpdLink;
        this.World1_Path = Conf.World1_Path;
        this.World2_Path = Conf.World2_Path;
        this.AreasXML_Path = Conf.AreasXML_Path;
        this.race = Conf.mRace;
        this.SelectWay = parent["selectWay"].bind(parent);
        this.UnSelectWay = parent["unSelectWay"].bind(parent);
        this.GoToWay = parent["goToWay"].bind(parent);
        this.ZoomMode = parent["zoomModeAnswer"].bind(parent);
    }
};
canvas.app.world.Model.prototype.initConfig = function () {
    var waysXML = canvas.ResourceLoader.get("config").data;
    this.parseWaysXML(waysXML);
    this.AREAS = {};
    this.areas_xml = [];
    this.parse_world_confing(waysXML);
};
canvas.app.world.Model.prototype.initAreas = function () {
    for (var i = 0; i < this.areas_xml.length; i++) {
        this.parse_area_config(canvas.ResourceLoader.get(this.areas_xml[i]).data);
    }
};
canvas.app.world.Model.prototype.parseWaysXML = function (waysXML) {
    var wayObj;
    var waysList = waysXML.getElementsByTagName("way");
    var len = waysList.length;
    for (var i = 0; i < len; i++) {
        wayObj = {};
        wayObj.name = waysList[i].attributes.name.value;
        wayObj.xx = parseInt(waysList[i].attributes.xx.value);
        wayObj.yy = parseInt(waysList[i].attributes.yy.value);
        this.way_conf[wayObj.name] = wayObj;
    }
};
canvas.app.world.Model.prototype.parse_world_confing = function (doc) {
    var i1;
    var i2;
    var i3;
    var a1;
    var a2;
    var a3;
    var attr;
    var lng_id;
    a1 = doc.childNodes;
    for (i1 = 0; i1 < a1.length; i1++) {
        if (a1[i1].nodeName == "world") {
            a2 = a1[i1].childNodes;
            for (i2 = 0; i2 < a2.length; i2++) {
                switch (a2[i2].nodeName) {
                    case "area":
                        this.parse_area(a2[i2]);
                        break;
                    case "areas_xml":
                        a3 = a2[i2].childNodes;
                        for (i3 = 0; i3 < a3.length; i3++) {
                            if (a3[i3].nodeName == "file") {
                                if (a3[i3].attributes.src != null) {
                                    this.areas_xml.push(this.AreasXML_Path + a3[i3].attributes.src.value);
                                }
                            }
                        }
                        break;
                }
            }
        }
    }
};
canvas.app.world.Model.prototype.parse_area_config = function (xml_data) {
    var doc = xml_data;
    var a1;
    var a2;
    var i1;
    var i2;
    a1 = doc.childNodes;
    for (i1 = 0; i1 < a1.length; i1++) {
        if (a1[i1].nodeName == "areas") {
            a2 = a1[i1].childNodes;
            for (i2 = 0; i2 < a2.length; i2++) {
                if (a2[i2].nodeName == "area") {
                    this.parse_area(a2[i2]);
                }
            }
        }
    }
};
canvas.app.world.Model.prototype.parse_area = function (node) {
    var item;
    var locI;
    var objI;
    var i3;
    var i4;
    var a3;
    var a4;
    var attr;
    var attr_loc;
    var attr_obj;
    var attr_linkage;
    var rect;
    var inner_flag_pos;
    var inner_manor_pos;
    var inner_front_pos;
    var inner_popup_pos;
    var inner_pos;
    var arr_loc_id = [];
    var lng_id;
    attr = node.attributes;
    if (attr.src != null) {
        if (attr.id != null) {
            if (attr.rect != null) {
                rect = attr.rect.value.split(",");
                if (rect.length == 4) {
                    this.AREAS[attr.id.value] = {};
                    item = this.AREAS[attr.id.value];
                    item.src = attr.src.value;
                    item.id = attr.id.value;
                    item.rect_x1 = parseInt(rect[0]);
                    item.rect_y1 = parseInt(rect[1]);
                    item.rect_x2 = parseInt(rect[2]);
                    item.rect_y2 = parseInt(rect[3]);
                    this.pre_calc_item(item);
                    item.locations = {};
                    item.locations_list = [];
                    item.locations_ids = [];
                    item.objects = [];
                    a3 = node.childNodes;
                    for (i3 = 0; i3 < a3.length; i3++) {
                        if (a3[i3].nodeName == "title") {
                            item.title = a3[i3].childNodes[0].nodeValue;
                            if (!item.title) {
                                item.title = "no title";
                            }
                        } else if (a3[i3].nodeName == "location") {
                            attr_loc = a3[i3].attributes;
                            if (attr_loc.id != null) {
                                if (attr_loc.inner_flag_pos != null) {
                                    inner_flag_pos = attr_loc.inner_flag_pos.value.split(",");
                                    if (inner_flag_pos.length == 2) {
                                        item.locations[attr_loc.id.value] = {};
                                        locI = item.locations[attr_loc.id.value];
                                        arr_loc_id.push(attr_loc.id.value);
                                        locI.id = attr_loc.id.value;
                                        if (this.treasureLocation == parseInt(locI.id)) this.treasureArea = parseInt(item.id);
                                        locI.flag_pos_x = parseInt(inner_flag_pos[0]);
                                        locI.flag_pos_y = parseInt(inner_flag_pos[1]);
                                        a4 = a3[i3].childNodes;
                                        for (i4 = 0; i4 < a4.length; i4++) {
                                            if (a4[i4].nodeName == "object") {
                                                this.parse_object(item, a4[i4], "global", locI.id);
                                            } else if (a4[i4].nodeName == "title") {
                                                locI.title = a4[i4].childNodes[0].nodeValue;
                                            } else if (a4[i4].nodeName == null) {
                                            }
                                        }
                                        item.locations_list.push(locI.title);
                                        item.locations_ids.push(locI.id);
                                    } else {
                                    }
                                } else {
                                }
                                if (attr_loc.inner_manor_pos != null) {
                                    inner_manor_pos = attr_loc.inner_manor_pos.value.split(",");
                                    if (inner_manor_pos.length == 2) {
                                        locI.manor_pos_x = parseInt(inner_manor_pos[0]);
                                        locI.manor_pos_y = parseInt(inner_manor_pos[1]);
                                    }
                                } else {
                                }
                                if (attr_loc.inner_front_pos != null) {
                                    inner_front_pos = attr_loc.inner_front_pos.value.split(",");
                                    if (inner_front_pos.length == 2) {
                                        locI.front_pos_x = parseInt(inner_front_pos[0]);
                                        locI.front_pos_y = parseInt(inner_front_pos[1]);
                                    }
                                } else {
                                }
                                if (attr_loc.inner_popup_pos != null) {
                                    inner_popup_pos = attr_loc.inner_popup_pos.value.split(",");
                                    if (inner_popup_pos.length == 2) {
                                        locI.popup_pos_x = parseInt(inner_popup_pos[0]);
                                        locI.popup_pos_y = parseInt(inner_popup_pos[1]);
                                    }
                                } else {
                                }
                            } else {
                            }
                        } else if (a3[i3].nodeName == "object") {
                            this.parse_object(item, a3[i3], "area");
                        }
                    }
                } else {
                }
            } else {
            }
        } else {
        }
    } else {
    }
    this.AREALOC.push([attr.id.value, arr_loc_id]);
};
canvas.app.world.Model.prototype.pre_calc_item = function (item) {
    var tmp;
    if (item.rect_x1 > item.rect_x2) {
        tmp = item.rect_x1;
        item.rect_x1 = item.rect_x2;
        item.rect_x2 = tmp;
    }
    if (item.rect_y1 > item.rect_y2) {
        tmp = item.rect_y1;
        item.rect_y1 = item.rect_y2;
        item.rect_y2 = tmp;
    }
    item.rect_w = item.rect_x2 - item.rect_x1;
    item.rect_h = item.rect_y2 - item.rect_y1;
    item.center_x = Math.floor(item.rect_w / 2) + item.rect_x1;
    item.center_y = Math.floor(item.rect_h / 2) + item.rect_y1;
    item.rect_x1_3 = Math.round(item.rect_x1 / 3);
    item.rect_x2_3 = Math.round(item.rect_x2 / 3);
    item.rect_y1_3 = Math.round(item.rect_y1 / 3);
    item.rect_y2_3 = Math.round(item.rect_y2 / 3);
    item.rect_w_3 = item.rect_x2_3 - item.rect_x1_3;
    item.rect_h_3 = item.rect_y2_3 - item.rect_y1_3;
};
canvas.app.world.Model.prototype.parse_object = function (item, dat, type, location_id) {
    var attr_obj = dat.attributes;
    if (attr_obj.id != null) {
        if (attr_obj.inner_pos != null) {
            var inner_pos = attr_obj.inner_pos.value.split(",");
            if (inner_pos.length == 2) {
                var objI = {};
                item.objects.push(objI);
                objI.id = attr_obj.id.value;
                objI.xx = parseInt(inner_pos[0]);
                objI.yy = parseInt(inner_pos[1]);
                objI.type = type;
                objI.location_id = location_id;
                objI.items = [];
                var a4 = dat.childNodes;
                for (var i4 = 0; i4 < a4.length; i4++) {
                    switch (a4[i4].nodeName) {
                        case "title":
                            objI.title = a4[i4].childNodes[0].nodeValue;
                            break;
                        case "text":
                            objI.text = a4[i4].childNodes[0].nodeValue;
                            break;
                        case "item":
                            objI.items.push(a4[i4].childNodes[0].nodeValue);
                            break;
                        case "linkage":
                            var attr_linkage = a4[i4].attributes;
                            if (attr_linkage.area_id != null) {
                                objI.linkage_area_id = attr_linkage.area_id.value;
                            } else if (attr_linkage.locations != null) {
                                objI.linkage_locations = attr_linkage.locations.value.split(",");
                            } else {
                            }
                            objI.linkage_location_id = attr_linkage.location_id.value;
                            break;
                        case null:
                            break;
                    }
                }
            } else {
            }
        } else {
        }
    } else {
    }
};
canvas.app.world.Model.prototype.parse_my_flag = function (xml_data) {
    var conf = this;
    var doc = new DOMParser().parseFromString(xml_data, "text/xml");
    var i1;
    var a1 = doc.childNodes;
    var attr;
    for (i1 = 0; i1 < a1.length; i1++) {
        if (a1[i1].nodeName == "flag") {
            attr = a1[i1].attributes;
            if (attr.area != null && attr.location != null && attr.target != null) {
                if (attr.area.value != conf.FlagArea || attr.location.value != conf.FlagLocation || attr.target.value != conf.FinishLocation) {
                    if (conf.AREAS != null) {
                        if (conf.AREAS[attr.area.value] != null) {
                            if (conf.AREAS[attr.area.value].locations != null) {
                                if (conf.AREAS[attr.area.value].locations[attr.location.value] != null) {
                                    if (conf.main) {
                                        conf.FlagArea = attr.area.value;
                                        conf.FlagLocation = attr.location.value;
                                        conf.FinishLocation = attr.target.value;
                                        conf.main.view.update_my_flag();
                                    } else {
                                    }
                                } else {
                                }
                            } else {
                            }
                        } else {
                        }
                    } else {
                    }
                }
            } else {
            }
        }
    }
};
canvas.app.world.Model.prototype.parse_my_flag_js = function (mData) {
    var conf = this;
    if (mData == null) {
        return false;
    }
    var mData_arr = mData.split("|");
    if (mData_arr.length == 2) {
        var mData_area = mData_arr[0];
        var mData_location = mData_arr[1];
    } else {
        return false;
    }
    if (mData_area != conf.FlagArea || mData_location != conf.FlagLocation) {
        if (conf.AREAS != null) {
            if (conf.AREAS[mData_area] != null) {
                if (conf.AREAS[mData_area].locations != null) {
                    if (conf.AREAS[mData_area].locations[mData_location] != null) {
                        if (conf.main != null) {
                            conf.FlagArea = mData_area;
                            conf.FlagLocation = mData_location;
                            conf.main.view.update_my_flag();
                            return true;
                        } else {
                        }
                    } else {
                    }
                } else {
                }
            } else {
            }
        } else {
        }
    }
    return false;
};
canvas.app.world.Model.prototype.parse_my_flag_first_js = function (mData) {
    if (mData == null) {
        return;
    }
    var mData_arr = mData.split("|");
    if (mData_arr.length == 2) {
        var mData_area = mData_arr[0];
        var mData_location = mData_arr[1];
    } else {
        return;
    }
    this.ActiveArea = mData_area;
    this.ActiveLocation = mData_location;
};
canvas.app.world.Model.prototype.parse_compass_config = function (xml_data) {
    var conf = this;
    var doc = xml_data;
    var a1;
    var a2;
    var a3;
    var i1;
    var i2;
    var i3;
    a1 = doc.childNodes;
    for (i1 = 0; i1 < a1.length; i1++) {
        if (a1[i1].nodeName == "locations") {
            a2 = a1[i1].childNodes;
            for (i2 = 0; i2 < a2.length; i2++) {
                if (a2[i2].nodeName == "title") {
                    if (a2[i2].attributes.name != null) {
                        conf.LOC_LIST_AR.push([a2[i2].nodeName, a2[i2].attributes.name.value]);
                    }
                }
                if (a2[i2].nodeName == "loc") {
                    if (a2[i2].attributes.id != null && a2[i2].attributes.name != null && a2[i2].attributes.verges != null) {
                        var fl = true;
                        if (a2[i2].attributes.race != null) {
                            if (a2[i2].attributes.race.value != conf.race) {
                                fl = false;
                            }
                        }
                        if (fl) {
                            var ar2 = [];
                            var ar1 = a2[i2].attributes.verges.value.split("|");
                            var pair = [];
                            for (var i0 = 0; i0 < ar1.length; i0++) {
                                pair = ar1[i0].split(",");
                                if (pair.length == 2) {
                                    ar2[i0] = [pair[0], pair[1]];
                                }
                            }
                            conf.myLocVerge[a2[i2].attributes.id.value] = ar2;
                            conf.LOC_LIST_AR.push([parseInt(a2[i2].attributes.id.value), a2[i2].attributes.name.value]);
                        }
                    }
                }
            }
        }
    }
};
canvas.app.world.Model.prototype.parseConfig = function (xml) {
    this.locations = new Object();
    var Conf = canvas.app.manor.model;
    var obj;
    var loc;
    if (!canvas.Functions.hasChildNode(xml, "costs")) return;
    var doc = xml.getElementsByTagName("costs")[0].childNodes;
    var nodes;
    var len = doc.length;
    for (var i = 0; i < len; i++) {
        loc = {};
        loc.id = canvas.Functions.hasChildNode(doc[i], "id") ? doc[i].getElementsByTagName("id")[0].childNodes[0].nodeValue : 0;
        loc.price1 = canvas.Functions.hasChildNode(doc[i], "gov_cost") ? parseInt(doc[i].getElementsByTagName("gov_cost")[0].childNodes[0].nodeValue) : 0;
        nodes = doc[i].getElementsByTagName("market_cost");
        loc.price2 = nodes.length > 0 ? parseInt(nodes[0].childNodes[0].nodeValue) : 0;
        loc.user = canvas.Functions.hasChildNode(doc[i], "user") ? parseInt(doc[i].getElementsByTagName("user")[0].childNodes[0].nodeValue) : 0;
        loc.isSelling = canvas.Functions.hasChildNode(doc[i], "for_sell") ? parseInt(doc[i].getElementsByTagName("for_sell")[0].childNodes[0].nodeValue) == 1 : false;
        loc.sellEnable = canvas.Functions.hasChildNode(doc[i], "hand_buy_enable") ? doc[i].getElementsByTagName("hand_buy_enable")[0].childNodes[0].nodeValue == "1" : false;
        if (this.locations[loc.id] == undefined) this.locations[loc.id] = loc;
    }
    Conf.user = new canvas.data.manor.DUser();
    var node = canvas.Functions.hasChildNode(xml, "current_work") ? xml.getElementsByTagName("current_work")[0].childNodes[0] : null;
    Conf.user.labour = node ? parseInt(node.nodeValue) : 0;
    node = canvas.Functions.hasChildNode(xml, "work_max") ? xml.getElementsByTagName("work_max")[0].childNodes[0] : null;
    Conf.user.labourMax = node ? parseInt(node.nodeValue) : 0;
    node = canvas.Functions.hasChildNode(xml, "move_price") ? xml.getElementsByTagName("move_price")[0].childNodes[0] : null;
    this.movePrice = node ? parseInt(node.nodeValue) : 0;
    this.userHaveManor = Conf.user.labourMax > 0;
    node = canvas.Functions.hasChildNode(xml, "buy_enable") ? xml.getElementsByTagName("buy_enable")[0].childNodes[0] : null;
    this.buyEnable = node ? node.nodeValue == "1" : false;
};
canvas.app.world.Model.prototype.parseSellRequests = function (xml, prefix) {
    if (prefix == undefined) prefix = "";
    this["sellRequests" + prefix] = new Array();
    if (!canvas.Functions.hasChildNode(xml, "sell_requests")) return;
    var doc = xml.getElementsByTagName("sell_requests")[0].childNodes;
    var sellRequest;
    var len = doc.length;
    for (var i = 0; i < len; i++) {
        sellRequest = new canvas.data.manor.DSellRequest();
        sellRequest.id = canvas.Functions.hasChildNode(doc[i], "id") ? doc[i].getElementsByTagName("id")[0].childNodes[0].nodeValue : 0;
        sellRequest.price = canvas.Functions.hasChildNode(doc[i], "price") ? parseInt(doc[i].getElementsByTagName("price")[0].childNodes[0].nodeValue) : 0;
        sellRequest.user = new canvas.data.manor.DUserGame();
        sellRequest.user.id = "3434";
        sellRequest.user.level = canvas.Functions.hasChildNode(doc[i], "level") ? parseInt(doc[i].getElementsByTagName("level")[0].childNodes[0].nodeValue) : 0;
        sellRequest.user.login = canvas.Functions.hasChildNode(doc[i], "nick") ? doc[i].getElementsByTagName("nick")[0].childNodes[0].nodeValue : "";
        this["sellRequests" + prefix].push(sellRequest);
    }
    this["sellPagesCount" + prefix] = xml.getElementsByTagName("pages").length > 0 ? parseInt(xml.getElementsByTagName("pages")[0].childNodes[0].nodeValue) : 1;
};
canvas.app.world.Model.prototype.parseSellRequests2 = function (xml) {
    this.parseSellRequests(xml, "2");
};
canvas.app.world.View = function (main) {
    canvas.px.Container.call(this);
    var conf = canvas.app.world.model;
    this.main = main;
    this.container = new canvas.px.Container();
    this.addChild(this.container);
    this.container.interactive = true;
    this.map_cont = new canvas.px.Container();
    this.map_cont.position.set(19, 14);
    this.container.addChild(this.map_cont);
    this.map_cont.interactive = true;
    this.map1 = new canvas.app.world.view.MapWorldParts(this, 2e3, 1300, 3, conf.World1_Path + "world1_");
    this.map2 = new canvas.app.world.view.MapWorldParts(this, 6e3, 3900, 1, conf.World2_Path + "world2_");
    this.map_state = new canvas.app.world.engine.MapStateObject(this);
    this.map_state.focus_map(this.map2, 1);
    this.msk = new canvas.px.Mask(100, 100);
    this.msk.position.set(19, 14);
    this.addChild(this.msk);
    this.map_cont.mask = this.msk;
    this.scroll_V = new canvas.app.world.view.ScrollV(this.map_state, this.container);
    if (conf.isModule) this.addChild(this.scroll_V.shape);
    else this.addChild(this.scroll_V);
    this.scroll_H = new canvas.app.world.view.ScrollH(this.map_state, this.map_cont);
    if (conf.isModule) this.addChild(this.scroll_H.shape);
    else this.addChild(this.scroll_H);
    this.scroll_null = new canvas.px.Sprite(canvas.ResourceLoader.getImage("world", "png_scroll_null"));
    if (!conf.isModule) this.addChild(this.scroll_null);
    this.borders = new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("world", "curl"), 100, 142, 100, 142);
    if (!conf.isModule) this.addChild(this.borders);
    this.zoom = new canvas.app.world.view.ZoomView(this);
    if (!conf.isModule) this.addChild(this.zoom);
    this.zoom.x = 33;
    this.zoom.set_mode(2);
    this.set_labels();
    if (!conf.isModule) {
        this.manorLayer = new canvas.app.world.manor.Manor(this);
        this.addChild(this.manorLayer);
        this.manorLayer.position.set(20, 70);
    }
    this.firstResize = true;
    canvas.EventManager.addEventListener(canvas.ui.ScrollEvent.EVENT_SCROLL, this.scroll_H, this.scrollHandlerH, this);
    canvas.EventManager.addEventListener(canvas.ui.ScrollEvent.EVENT_SCROLL, this.scroll_V, this.scrollHandlerV, this);
};
canvas.app.world.View.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.world.View.prototype.resize = function (w, h) {
    var conf = canvas.app.world.model;
    var ww = conf.width;
    var hh = conf.height;
    this.borders.width = ww;
    this.borders.height = hh;
    var bool = false;
    if (conf.ls_ww != ww) {
        conf.ls_ww = ww;
        bool = true;
        this.scroll_V.position.set(ww - 35, 14);
        this.scroll_H.setSize(ww - 37, 16);
        this.map_state.set_visible_width(ww - 32);
        this.msk.setSize(this.map_state.map_visible_width);
        this.scroll_H.refresh();
        this.scroll_null.x = ww - 35;
        this.label2.pos(ww);
    }
    if (conf.ls_hh != hh) {
        conf.ls_hh = hh;
        bool = true;
        this.scroll_H.position.set(18, hh - 30);
        this.scroll_V.setSize(16, hh - 28);
        this.map_state.set_visible_height(hh - 28);
        this.msk.setSize(-1, this.map_state.map_visible_height);
        this.scroll_V.refresh();
        this.scroll_null.y = hh - 30;
        if (conf.isModule) {
            this.zoom.x = Math.round((ww - this.zoom.width) / 2) - 6;
        }
        this.zoom.y = hh - (conf.isModule ? 85 : 99);
    }
    if (bool) {
        this.map_state.map_check();
    }
    if (this.firstResize) {
        this.firstResize = false;
        this.map2.focus_on_active_area();
    }
    if (!conf.isModule) this.main.windowsManager.init(this.main.windowsContainer, ww, hh, this);
};
canvas.app.world.View.prototype.set_labels = function () {
    var conf = canvas.app.world.model;
    this.label1 = new canvas.app.world.view.TopTextLeft();
    this.label1.position.set(28, 21);
    if (!conf.isModule) this.addChild(this.label1);
    var cur_area = "unknown";
    var cur_location = "unknown";
    var item = conf.AREAS[conf.ActiveArea];
    if (item != null) {
        cur_area = item.title;
        if (item.locations[conf.ActiveLocation] != null) {
            cur_location = item.locations[conf.ActiveLocation].title;
        }
    }
    this.label1.set_line0(canvas.Translator.getText(207) + ":", cur_area, cur_location);
    this.label2 = new canvas.app.world.view.TopTextRight();
    this.label2.position.set(400, 21);
    this.addChild(this.label2);
};
canvas.app.world.View.prototype.testUpdate = function () {
    var conf = canvas.app.world.model;
    if (conf.treasureArea == parseInt(conf.focusedAreaId)) this.updateTreasure();
    if (conf.findFrontLoc(conf.focusedAreaId) != "") this.updateFronts();
};
canvas.app.world.View.prototype.updateTreasure = function () {
    var conf = canvas.app.world.model;
    var area;
    var location;
    for (var key in conf.AREAS) {
        area = conf.AREAS[key];
        if (area.sen != null) {
            if (conf.treasureArea == parseInt(area.id)) {
                area.sen.setSelection(true, 12592164, "chest");
            } else {
                if (!area.sen.isManorable) area.sen.setSelection();
            }
            for (var key2 in area.locations) {
                location = area.locations[key2];
                if (location.lnk != null) {
                    if (parseInt(location.id) == conf.treasureLocation) {
                        location.lnk.setSelection(true, 12592164, "chest");
                    } else {
                        if (!location.lnk.isManorable) location.lnk.setSelection();
                    }
                }
            }
        }
    }
};
canvas.app.world.View.prototype.updateFronts = function () {
    var conf = canvas.app.world.model;
    var area;
    var location;
    var str;
    var frontsData;
    for (var key in conf.AREAS) {
        area = conf.AREAS[key];
        if (area.sen != null) {
            for (var key2 in area.locations) {
                location = area.locations[key2];
                if (location.lnk != null) {
                    for (str in conf.frontsData) {
                        if (parseInt(location.id) == parseInt(str)) {
                            frontsData = conf.frontsData[str];
                            if (frontsData != null) {
                                switch (frontsData.status) {
                                    case 0:
                                        switch (frontsData.owner) {
                                            case 1:
                                                location.lnk.setFrontsIcon("timer_blue");
                                                break;
                                            case -1:
                                                location.lnk.setFrontsIcon("timer_red");
                                                break;
                                            default:
                                                location.lnk.setFrontsIcon("timer_gray");
                                        }
                                        break;
                                    default:
                                        location.lnk.setFrontsIcon("timer_gray");
                                }
                            } else {
                                location.lnk.setFrontsIcon();
                            }
                        } else {
                            location.lnk.setFrontsIcon();
                        }
                    }
                }
            }
        }
    }
};
canvas.app.world.View.prototype.updateManorMode = function () {
    var conf = canvas.app.world.model;
    if (conf.manorMode) {
        this.map2.popupsContainer.visible = true;
        if (this.manorLayer != null) this.manorLayer.update();
    } else {
        this.map2.popupsContainer.visible = false;
        if (this.manorLayer != null) this.manorLayer.update();
    }
};
canvas.app.world.View.prototype.area_exit = function () {
    var conf = canvas.app.world.model;
    this.label1.deactivate();
    this.zoom.set_mode(1);
    this.map_state.focus_map(this.map1, 3);
    this.map_state.set_visible_width(conf.width - (19 + 35));
    this.map_state.set_visible_height(conf.height - (14 + 30));
    this.refresh_scrollers();
    this.map1_focus();
    this.map_state.map_check();
};
canvas.app.world.View.prototype.area_enter = function (itemLnk) {
    var conf = canvas.app.world.model;
    conf.focusedAreaId = itemLnk.id;
    this.map_state.focus_map(this.map2, 1);
    this.map_state.set_visible_width(conf.width - (19 + 35));
    this.map_state.set_visible_height(conf.height - (14 + 30));
    this.refresh_scrollers();
    this.zoom.set_mode(2);
    this.map2.focus_on_active_area();
    this.map_state.map_check();
};
canvas.app.world.View.prototype.area_switch = function (itemLnk) {
    var conf = canvas.app.world.model;
    conf.focusedAreaId = itemLnk.id;
    this.map_state.set_visible_width(conf.width - (19 + 35));
    this.map_state.set_visible_height(conf.height - (14 + 30));
    this.refresh_scrollers();
    this.map2.focus_on_active_area();
    this.map_state.map_check();
    if (this.manorLayer != null) this.manorLayer.loadConfig();
};
canvas.app.world.View.prototype.refresh_scrollers = function () {
    this.scroll_H.refresh();
    this.scroll_V.refresh();
    this.scrollHandlerH();
    this.scrollHandlerV();
};
canvas.app.world.View.prototype.refresh_my_flag = function () {
    var conf = canvas.app.world.model;
    conf.focusedAreaId = conf.FlagArea;
    conf.focusedLocationId = conf.FlagLocation;
    conf.ActiveArea = conf.FlagArea;
    conf.ActiveLocation = conf.FlagLocation;
    if (conf.isModule) {
        this.map_state.mapLnk.focus_on_active_area_in_motion();
    } else {
        this.map_state.mapLnk.focus_on_active_area();
    }
    this.testUpdate();
    this.updateManorMode();
};
canvas.app.world.View.prototype.scrollHandlerH = function () {
    if (!this.scroll_H.isDisabled()) {
        this.map_state.delta_map_x(this.scroll_H.current);
    }
};
canvas.app.world.View.prototype.scrollHandlerV = function () {
    if (!this.scroll_V.isDisabled()) {
        this.map_state.delta_map_y(this.scroll_V.current);
    }
};
canvas.app.world.View.prototype.map1_focus = function () {
    var conf = canvas.app.world.model;
    if (conf.AREAS[conf.ActiveArea] != null) {
        var item = conf.AREAS[conf.ActiveArea];
        var vis_ww = conf.width - (19 + 35);
        var vis_hh = conf.height - (14 + 30);
        var invis_ww = this.map_state.map_complete_width - vis_ww;
        var invis_hh = this.map_state.map_complete_width - vis_ww;
        var nx = -Math.round(item.center_x / 3 - vis_ww / 2);
        var ny = -Math.round(item.center_y / 3 - vis_hh / 2);
        if (nx > 0) {
            nx = 0;
        } else if (nx < -invis_ww) {
            nx = -invis_ww;
        }
        if (ny > 0) {
            ny = 0;
        } else if (ny < -invis_hh) {
            ny = -invis_hh;
        }
        this.scroll_H.current = -nx;
        this.scroll_V.current = -ny;
        this.scrollHandlerV();
        this.scrollHandlerH();
    }
};
canvas.app.world.View.prototype.update_my_flag = function () {
    var conf = canvas.app.world.model;
    var item = conf.AREAS[conf.FlagArea];
    if (item == null) {
        return;
    }
    var locI = item.locations[conf.FlagLocation];
    if (locI == null) {
        return;
    }
    this.label1.set_line0(canvas.Translator.getText(207) + ":", item.title, locI.title);
    this.label1.redraw_bg();
    this.map1.refresh_pers_flag();
    this.map2.refresh_pers_flag();
    this.map1.refresh_pers_finish_flag();
    this.map2.refresh_pers_finish_flag();
};
canvas.app.world.engine.FindWay = function () {};
canvas.app.world.engine.FindWay.prototype.finder = function (start_loc_id, target_loc_id) {
    var conf = canvas.app.world.model;
    this.p1 = start_loc_id;
    this.p2 = target_loc_id;
    if (String(this.p1) == String(this.p2)) {
        return [0];
    }
    this.p2_tmp = this.p2;
    this.p1_tmp = this.p2_tmp;
    this.arr_tmp = [];
    this.arr_trash = [];
    this.cache_cont = {};
    this.arr_loc = [];
    this.arr_tmp.push(this.p1);
    this.arr_trash = this.arr_trash.concat(this.arr_tmp);
    var k = 0;
    var len = conf.LOC_LIST_AR.length;
    link: while (k < len) {
        k++;
        var arr2 = [];
        for (var i = this.arr_tmp.length - 1; i >= 0; i--) {
            var arr1 = [];
            arr1 = this.getNearLoc(this.arr_tmp[i]);
            this.clearArr(arr1, this.arr_trash);
            this.cache_cont[this.arr_tmp[i]] = arr1;
            if (this.find(arr1, this.p2)) {
                break link;
            }
            this.arr_trash = this.arr_trash.concat(arr1);
            arr2 = arr2.concat(arr1);
        }
        this.arr_tmp = [];
        this.arr_tmp = this.arr_tmp.concat(arr2);
        if (this.arr_tmp.length == 0) {
            return [-1];
        }
    }
    this.arr_loc.push(this.p1_tmp);
    while (this.p1_tmp != this.p1) {
        this.p2_tmp = this.getNextCacheLoc(this.p2_tmp);
        this.p1_tmp = this.p2_tmp;
        this.arr_loc.push(this.p1_tmp);
    }
    return this.arr_loc;
};
canvas.app.world.engine.FindWay.prototype.getNextCacheLoc = function (loc_id) {
    for (var prop in this.cache_cont) {
        var sp = this.cache_cont[prop];
        for (var i = sp.length - 1; i >= 0; i--) {
            if (sp[i] == loc_id) {
                return parseInt(prop);
            }
        }
    }
    return 1;
};
canvas.app.world.engine.FindWay.prototype.getNearLoc = function (loc_id) {
    var conf = canvas.app.world.model;
    var out = [];
    for (var prop in conf.myLocVerge) {
        var sp = conf.myLocVerge[prop];
        link: for (var i = sp.length - 1; i >= 0; i--) {
            if (sp[i])
                for (var j = sp[i].length - 1; j >= 0; j--) {
                    if (sp[i][j] == loc_id) {
                        out.push(prop);
                        break link;
                    }
                }
        }
    }
    return out;
};
canvas.app.world.engine.FindWay.prototype.find = function (arr, loc_id) {
    for (var i = arr.length - 1; i >= 0; i--) {
        if (arr[i] == loc_id) {
            return true;
        }
    }
    return false;
};
canvas.app.world.engine.FindWay.prototype.clearArr = function (arr, trash) {
    for (var i = trash.length - 1; i >= 0; i--) {
        for (var j = arr.length - 1; j >= 0; j--) {
            if (arr[j] == trash[i]) {
                arr.splice(j, 1);
                j++;
            }
        }
    }
};
canvas.app.world.engine.MapStateObject = function (base_lnk) {
    this.baseLnk = base_lnk;
    this.map_cont = base_lnk.map_cont;
};
canvas.app.world.engine.MapStateObject.prototype.focus_map = function (map_lnk, part_devisor) {
    if (this.mapLnk != null) {
        this.map_cont.removeChild(this.mapLnk);
    }
    this.mapLnk = map_lnk;
    this.devisor = part_devisor;
    this.map_complete_width = this.mapLnk.gw;
    this.map_complete_height = this.mapLnk.gh;
    this.map_pos_x = 0;
    this.map_pos_y = 0;
    this.map_cont.addChild(this.mapLnk);
};
canvas.app.world.engine.MapStateObject.prototype.set_visible_width = function (val) {
    this.map_visible_width = val;
    this.map_invisible_width = this.map_complete_width - this.map_visible_width;
    this.map_pos_x = -this.mapLnk.x / this.map_invisible_width;
    if (this.map_pos_x > 1) {
        this.mapLnk.x = -this.map_invisible_width;
        this.map_pos_x = 1;
    }
};
canvas.app.world.engine.MapStateObject.prototype.set_visible_height = function (val) {
    this.map_visible_height = val;
    this.map_invisible_height = this.map_complete_height - this.map_visible_height;
    this.map_pos_y = -this.mapLnk.y / this.map_invisible_height;
    if (this.map_pos_y > 1) {
        this.mapLnk.y = -this.map_invisible_height;
        this.map_pos_y = 1;
    }
};
canvas.app.world.engine.MapStateObject.prototype.delta_map_x = function (val) {
    var new_map_x = val;
    if (new_map_x < 0) {
        new_map_x = 0;
    } else if (new_map_x > this.map_invisible_width) {
        new_map_x = this.map_invisible_width;
    }
    this.set_pos_x(new_map_x / this.map_invisible_width);
};
canvas.app.world.engine.MapStateObject.prototype.delta_map_y = function (val) {
    var new_map_y = val;
    if (new_map_y < 0) {
        new_map_y = 0;
    } else if (new_map_y > this.map_invisible_height) {
        new_map_y = this.map_invisible_height;
    }
    this.set_pos_y(new_map_y / this.map_invisible_height);
};
canvas.app.world.engine.MapStateObject.prototype.set_pos_x = function (val) {
    this.map_pos_x = val;
    this.mapLnk.x = -Math.round(this.map_invisible_width * this.map_pos_x);
    this.map_check();
};
canvas.app.world.engine.MapStateObject.prototype.set_pos_y = function (val) {
    this.map_pos_y = val;
    this.mapLnk.y = -Math.round(this.map_invisible_height * this.map_pos_y);
    this.map_check();
};
canvas.app.world.engine.MapStateObject.prototype.map_check = function () {
    var conf = canvas.app.world.model;
    this.mapLnk.check_parts(this.map_visible_width, this.map_visible_height);
    var map_visible_rect = new canvas.px.Rectangle(-this.mapLnk.x, -this.mapLnk.y, this.map_visible_width, this.map_visible_height);
    var item_rect;
    var item;
    for (var key in conf.AREAS) {
        item = conf.AREAS[key];
        if (item.source == null) {
            if (this.devisor == 1) {
                item_rect = new canvas.px.Rectangle(item.rect_x1, item.rect_y1, item.rect_w, item.rect_h);
            } else if (this.devisor == 3) {
                item_rect = new canvas.px.Rectangle(item.rect_x1_3, item.rect_y1_3, item.rect_w_3, item.rect_h_3);
            } else {
                item_rect = null;
            }
            if (item_rect != null && map_visible_rect.intersects(item_rect)) {
                if (item.source == null) {
                    item.source = new canvas.app.world.view.AreaLoader(this.baseLnk, item, null);
                    item.source.init();
                }
            }
        }
    }
    this.baseLnk.testUpdate();
};
canvas.app.world.engine.MapStateObject.prototype.refresh_xy_pos = function () {
    this.map_pos_x = -Math.round(this.mapLnk.x / this.map_invisible_width);
    this.map_pos_y = -Math.round(this.mapLnk.y / this.map_invisible_height);
};
canvas.app.world.manor.Manor = function (baseLnk) {
    canvas.px.Container.call(this);
    this.container = new canvas.px.Container();
    this.baseLnk = baseLnk;
    this.addChild(this.container);
    this.market = new canvas.app.manor.view.controls.MarketWin();
    this.labourWin = new canvas.app.manor.view.controls.LabourWin(true);
    this.workWin = new canvas.app.manor.view.controls.WorkWin();
    this.confirmWin = new canvas.app.manor.view.controls.ConfirmWindow();
    this.messageWin = new canvas.app.manor.view.controls.MessageWindow();
    this._controller = new canvas.app.world.manor.ManorController(this, this.baseLnk);
    this.loadConfig();
};
canvas.app.world.manor.Manor.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.world.manor.Manor.prototype.loadConfig = function () {
    var conf = canvas.app.world.model;
    if (conf.userLevel >= 5) this._controller.loadConfig();
};
canvas.app.world.manor.Manor.prototype.update = function () {
    var conf = canvas.app.world.model;
    var item;
    var loc;
    var popupBuy;
    var locationData;
    var bmp;
    var sprite;
    var image;
    var len;
    var key;
    canvas.Functions.destroyChildren(this.baseLnk.map2.popupsContainer);
    item = conf.AREAS[conf.focusedAreaId];
    if (item != null && item.locations != null) {
        for (key in item.locations) {
            loc = item.locations[key];
            if (loc.popup != null && loc.popup.parent != null) {
                loc.popup.parent.removeChild(loc.popup);
                loc.popup = null;
            }
            locationData = conf.locations[loc.id];
            if (locationData != null) {
                locationData.areaTitle = item.title;
                locationData.locTitle = loc.title;
                popupBuy = new canvas.app.world.manor.popup.PopupBuy(locationData.id, locationData.price1, locationData.price2, locationData.user, locationData.isSelling, locationData.sellEnable);
                loc.popup = popupBuy;
                this.baseLnk.map2.popupsContainer.addChild(popupBuy);
                popupBuy.x = item.rect_x1 + (!loc.popup_pos_x || loc.popup_pos_x < 0 ? loc.flag_pos_x : loc.popup_pos_x);
                popupBuy.y = item.rect_y1 + (!loc.popup_pos_x || loc.popup_pos_y < 0 ? loc.flag_pos_y : loc.popup_pos_y);
                if (locationData.user >= 1) {
                    if (!this["manorIcon" + locationData.user]) {
                        bmp = new canvas.px.Sprite(canvas.ResourceLoader.getImage("world", locationData.user == 1 ? "manor/manor2" : "manor/manor3"));
                        image = new canvas.px.Container();
                        image.addChild(bmp);
                        bmp.x = -Math.round(bmp.width * 0.5);
                        bmp.y = -Math.round(bmp.height * 0.5);
                        image.scale.set(0.7, 0.7);
                        image.buttonMode = true;
                        image.interactive = true;
                        image.hitArea = new canvas.px.Circle(0, 0, image.width * 0.5);
                        this.baseLnk.map2.popupsContainer2.addChild(image);
                        image.mouseover = this._rollOverHandler.bind(this);
                        image.mouseout = this._rollOutHandler.bind(this);
                        image.click = this._clickHandler.bind(this);
                        image.name = locationData.user == 1 ? "manor" : "";
                        this["manorIcon" + locationData.user] = image;
                    }
                    this.baseLnk.map2.popupsContainer2.addChild(this["manorIcon" + locationData.user]);
                    this["manorIcon" + locationData.user].x = item.rect_x1 + (loc.manor_pos_x == undefined || loc.manor_pos_x < 0 ? loc.flag_pos_x : loc.manor_pos_x);
                    this["manorIcon" + locationData.user].y = item.rect_y1 + (loc.manor_pos_y == undefined || loc.manor_pos_y < 0 ? loc.flag_pos_y : loc.manor_pos_y);
                }
                if (loc.lnk != null) {
                    if (!loc.lnk.selected) {
                        if (conf.manorMode) {
                            loc.lnk.setSelection(true, locationData.user > 0 ? 2458659 : 12592164);
                            loc.lnk.isManorable = true;
                            loc.lnk.selected = false;
                        } else {
                            loc.lnk.setSelection();
                            loc.lnk.isManorable = false;
                        }
                    }
                }
            }
        }
    }
    this.baseLnk.zoom.btn_manor.visible = conf.userLevel >= 5;
    this.baseLnk.zoom.btn_work.visible = conf.userLevel >= 5 && conf.userHaveManor;
};
canvas.app.world.manor.Manor.prototype._clickHandler = function (event) {
    var conf = canvas.app.world.model;
    var mc;
    var r;
    switch (event.target.name) {
        case "manor":
            break;
        default:
            canvas.EventManager.dispatchEvent(canvas.app.manor.Event.OPEN_CONFIRM, null, {
                text: canvas.Translator.getText(225) + " <b>" + conf.movePrice.toString() + "</b> <img src='money_gold' atlas='world' yOffset='1'/> !",
                event: { name: canvas.app.manor.Event.MOVE_AREA },
            });
    }
};
canvas.app.world.manor.Manor.prototype._rollOverHandler = function (event) {
    switch (event.target.name) {
        case "manor":
            this.baseLnk.label2.set_data(canvas.Translator.getText(218), "", null);
            break;
        default:
            this.baseLnk.label2.set_data(canvas.Translator.getText(224), "", null);
            break;
    }
    this.currentIcon = event.target;
    canvas.EventManager.addEventListener(canvas.app.world.Event.ENTER_FRAME, null, this._enterFrameHandlerUp, this);
};
canvas.app.world.manor.Manor.prototype._rollOutHandler = function (event) {
    this.baseLnk.label2.deactivate();
    canvas.EventManager.removeEventListener(canvas.app.world.Event.ENTER_FRAME, null, this._enterFrameHandlerUp, this);
    canvas.EventManager.addEventListener(canvas.app.world.Event.ENTER_FRAME, null, this._enterFrameHandlerDown, this);
};
canvas.app.world.manor.Manor.prototype._enterFrameHandlerUp = function () {
    var scl = this.currentIcon.scale.x + 0.1;
    if (scl >= 1) {
        scl = 1;
        canvas.EventManager.removeEventListener(canvas.app.world.Event.ENTER_FRAME, null, this._enterFrameHandlerUp, this);
    }
    this.currentIcon.scale.set(scl, scl);
};
canvas.app.world.manor.Manor.prototype._enterFrameHandlerDown = function () {
    var scl = this.currentIcon.scale.x - 0.1;
    if (scl <= 0.7) {
        scl = 0.7;
        canvas.EventManager.removeEventListener(canvas.app.world.Event.ENTER_FRAME, null, this._enterFrameHandlerDown, this);
    }
    this.currentIcon.scale.set(scl, scl);
};
canvas.app.world.manor.ManorController = function (view, baseLnk) {
    this._view = view;
    this._baseLnk = baseLnk;
    canvas.EventManager.addEventListener(canvas.app.manor.Event.CLOSE_MARKET, null, this._thisHandler, this);
    canvas.EventManager.addEventListener(canvas.app.manor.Event.OPEN_MARKET_BUY, null, this._thisHandler, this);
    canvas.EventManager.addEventListener(canvas.app.manor.Event.OPEN_MARKET_SELL, null, this._thisHandler, this);
    canvas.EventManager.addEventListener(canvas.app.manor.Event.OPEN_WORK, null, this._thisHandler, this);
    canvas.EventManager.addEventListener(canvas.app.manor.Event.CLOSE_WORK, null, this._thisHandler, this);
    canvas.EventManager.addEventListener(canvas.app.manor.Event.LOAD_SELL_REQUESTS, null, this._thisHandler, this);
    canvas.EventManager.addEventListener(canvas.app.manor.Event.LOAD_SELL_REQUESTS2, null, this._thisHandler, this);
    canvas.EventManager.addEventListener(canvas.app.manor.Event.BUY_AREA, null, this._thisHandler, this);
    canvas.EventManager.addEventListener(canvas.app.manor.Event.SELL_AREA, null, this._thisHandler, this);
    canvas.EventManager.addEventListener(canvas.app.manor.Event.SELL_AREA_CANCEL, null, this._thisHandler, this);
    canvas.EventManager.addEventListener(canvas.app.manor.Event.OPEN_CONFIRM, null, this._thisHandler, this);
    canvas.EventManager.addEventListener(canvas.app.manor.Event.SELECT_LOCATION, null, this._thisHandler, this);
    canvas.EventManager.addEventListener(canvas.app.manor.Event.CLOSE_LABOUR, null, this._thisHandler, this);
    canvas.EventManager.addEventListener(canvas.app.manor.Event.OPEN_LABOUR, null, this._thisHandler, this);
    canvas.EventManager.addEventListener(canvas.app.manor.Event.WORK_USE, null, this._thisHandler, this);
    canvas.EventManager.addEventListener(canvas.app.manor.Event.LOAD_WORK_REQUESTS, null, this._thisHandler, this);
    canvas.EventManager.addEventListener(canvas.app.manor.Event.MOVE_AREA, null, this._thisHandler, this);
    this._urlLoader = new canvas.utils.URLRequest(canvas.app.world.model.requestURL);
    canvas.EventManager.addEventListener(canvas.utils.URLRequestEvent.EVENT_COMPLETE, this._urlLoader, this._completeHandler, this);
    canvas.EventManager.addEventListener(canvas.utils.URLRequestEvent.EVENT_ERROR, this._urlLoader, this._errorHandler, this);
};
canvas.app.world.manor.ManorController.prototype._thisHandler = function (event) {
    var loc;
    var conf = canvas.app.world.model;
    switch (event.name) {
        case canvas.app.manor.Event.CLOSE_MARKET:
            canvas.utils.WindowsManager.instance.closeWindow(this._view.market);
            break;
        case canvas.app.manor.Event.OPEN_MARKET_BUY:
            canvas.utils.WindowsManager.instance.openWindow(this._view.market, true, true, false);
            this._view.market.panel.path = "buy";
            this._view.market.buyArea.update([], 1, conf.areaCurTitle, conf.locationCurTitle);
            this.loadSellRequests();
            break;
        case canvas.app.manor.Event.OPEN_MARKET_SELL:
            canvas.utils.WindowsManager.instance.openWindow(this._view.market, true, true, false);
            this._view.market.panel.path = "sell";
            break;
        case canvas.app.manor.Event.LOAD_SELL_REQUESTS:
            this.loadSellRequests();
            break;
        case canvas.app.manor.Event.LOAD_SELL_REQUESTS2:
            this.loadSellRequests2();
            break;
        case canvas.app.manor.Event.BUY_AREA:
            this.buyArea(event.params.areaId, event.params.requestId, event.params.price);
            break;
        case canvas.app.manor.Event.SELL_AREA:
            this.sellArea();
            break;
        case canvas.app.manor.Event.SELL_AREA_CANCEL:
            this.sellAreaCancel();
            break;
        case canvas.app.manor.Event.OPEN_CONFIRM:
            this._view.confirmWin.init(event.params.text, event.params.event, event.params.okText);
            canvas.utils.WindowsManager.instance.openWindow(this._view.confirmWin);
            break;
        case canvas.app.manor.Event.SELECT_LOCATION:
            conf.curLocId = event.params;
            loc = conf.locations[conf.curLocId];
            conf.areaCurTitle = loc.areaTitle;
            conf.locationCurTitle = loc.locTitle;
            break;
        case canvas.app.manor.Event.CLOSE_LABOUR:
            canvas.utils.WindowsManager.instance.closeWindow(this._view.labourWin);
            break;
        case canvas.app.manor.Event.OPEN_LABOUR:
            canvas.utils.WindowsManager.instance.openWindow(this._view.labourWin, true, true, false);
            this._view.labourWin.panel.path = "all";
            this.loadUserRequests();
            break;
        case canvas.app.manor.Event.CLOSE_WORK:
            canvas.utils.WindowsManager.instance.closeWindow(this._view.workWin);
            break;
        case canvas.app.manor.Event.OPEN_WORK:
            canvas.utils.WindowsManager.instance.openWindow(this._view.workWin, true, true, false);
            break;
        case canvas.app.manor.Event.WORK_USE:
            this.workUse(event.params);
            break;
        case canvas.app.manor.Event.LOAD_WORK_REQUESTS:
            this.loadUserRequests();
            break;
        case canvas.app.manor.Event.MOVE_AREA:
            this.moveArea();
            break;
    }
};
canvas.app.world.manor.ManorController.prototype._errorHandler = function () {};
canvas.app.world.manor.ManorController.prototype._completeHandler = function () {
    var conf = canvas.app.world.model;
    var Conf = canvas.app.manor.model;
    this._view.iteractiveChildren = true;
    var loc;
    var mc;
    var r;
    var json;
    var xml = new DOMParser().parseFromString(this._urlLoader.request.responseText, "text/xml");
    if (xml.getElementsByTagName("error").length > 0) {
        this._view.messageWin.init(xml.getElementsByTagName("error")[0].childNodes[0].nodeValue);
        canvas.utils.WindowsManager.instance.openWindow(this._view.messageWin);
        if (this._urlLoader.info == "loadUserRequests") canvas.utils.WindowsManager.instance.instance.closeWindow(this._view.labourWin);
        return;
    }
    switch (this._urlLoader.info) {
        case "loadConfig":
            conf.parseConfig(xml);
            this._view.update();
            break;
        case "sellRequests":
            conf.parseSellRequests(xml);
            this._view.market.buyArea.update(conf.sellRequests, conf.sellPagesCount, conf.areaCurTitle, conf.locationCurTitle);
            break;
        case "sellRequests2":
            conf.parseSellRequests2(xml);
            loc = conf.locations[conf.curLocId];
            this._view.market.sellArea.update(conf.sellRequests2, conf.sellPagesCount2, conf.areaCurTitle, conf.locationCurTitle, loc.user > 0);
            break;
        case "buyArea":
            canvas.utils.WindowsManager.instance.closeWindow(this._view.market);
            if (xml.getElementsByTagName("current_cost").length > 0 && xml.getElementsByTagName("current_cost")[0].childNodes[0].nodeValue != "") {
                conf.lastBuyParams.price = parseInt(xml.getElementsByTagName("current_cost")[0].childNodes[0].nodeValue);
                canvas.EventManager.dispatchEvent(canvas.app.manor.Event.OPEN_CONFIRM, null, {
                    text: canvas.Translator.getText(199) + " <b>" + conf.lastBuyParams.price + "</b> <img src='money_gold' atlas='ui' yOffset='1'/> ?",
                    event: { name: canvas.app.manor.Event.BUY_AREA, params: conf.lastBuyParams },
                });
            }
            break;
        case "sellArea":
            canvas.utils.WindowsManager.instance.closeWindow(this._view.market);
            break;
        case "loadUserRequests":
            json = JSON.parse(this._urlLoader.request.responseText)["estate|work_requests"];
            Conf.parseUserRequests(json);
            this._view.labourWin.allRequests.update();
            break;
        case "workUse":
            json = JSON.parse(this._urlLoader.request.responseText)["estate|work"];
            var labourRequest;
            var len = Conf.labourRequests.length;
            for (var i = 0; i < len; i++) {
                labourRequest = Conf.labourRequests[i];
                if (labourRequest.id == Conf.selectedRequestID) {
                    Conf.user.labour -= labourRequest.labour - json.amount;
                    labourRequest.labour = json.amount;
                    this._view.labourWin.update();
                    break;
                }
            }
            break;
        case "moveArea":
            this._baseLnk.map2.popupsContainer2.removeChildren();
            break;
    }
    if (xml.getElementsByTagName("reload").length > 0 && xml.getElementsByTagName("reload")[0].childNodes[0].nodeValue == "1") this.loadConfig();
    if (json && json.reload == 1) this.loadConfig();
};
canvas.app.world.manor.ManorController.prototype.loadConfig = function () {
    this._urlLoader.load(canvas.app.world.model.requestURL + "?mode=map_info", null, "loadConfig");
    this._view.iteractiveChildren = false;
};
canvas.app.world.manor.ManorController.prototype.loadSellRequests = function () {
    var conf = canvas.app.world.model;
    this._urlLoader.load(
        canvas.app.world.model.requestURL + "?mode=sell_requests&area_id=" + conf.curLocId + "&page=" + (this._view.market.buyArea.requestCurPage + 1) + "&on_page=" + canvas.app.manor.Const.REQUESTS_ON_PAGE,
        null,
        "sellRequests"
    );
    this._view.iteractiveChildren = false;
};
canvas.app.world.manor.ManorController.prototype.loadSellRequests2 = function () {
    var conf = canvas.app.world.model;
    this._urlLoader.load(
        canvas.app.world.model.requestURL + "?mode=sell_requests&area_id=" + conf.curLocId + "&page=" + (this._view.market.sellArea.requestCurPage + 1) + "&on_page=" + canvas.app.manor.Const.REQUESTS_ON_PAGE_SHORT,
        null,
        "sellRequests2"
    );
    this._view.iteractiveChildren = false;
};
canvas.app.world.manor.ManorController.prototype.buyArea = function (areaId, requestId, price) {
    if (requestId == undefined) requestId = "";
    if (price == undefined) price = 0;
    var conf = canvas.app.world.model;
    conf.lastBuyParams = { areaId: areaId, requestId: requestId, price: price };
    var url = canvas.app.world.model.requestURL + "?mode=buy_estate&area_id=" + (areaId == "" ? conf.curLocId : areaId);
    if (price != 0) {
        url += "&flash_cost=" + price;
    }
    if (requestId != "") {
        url += "&sell_request_id=" + requestId;
        var sellRequest = conf.sellRequests[requestId];
        if (sellRequest != null) url += "&flash_cost=" + sellRequest.price;
    }
    this._urlLoader.load(url, null, "buyArea");
    this._view.iteractiveChildren = false;
};
canvas.app.world.manor.ManorController.prototype.sellArea = function () {
    var conf = canvas.app.world.model;
    this._urlLoader.load(canvas.app.world.model.requestURL + "?mode=sell_estate&area_id=" + conf.curLocId + "&price=" + canvas.app.manor.view.input.text, null, "sellArea");
    this._view.iteractiveChildren = false;
};
canvas.app.world.manor.ManorController.prototype.sellAreaCancel = function () {
    var conf = canvas.app.world.model;
    this._urlLoader.load(canvas.app.world.model.requestURL + "?mode=sell_request_cancel&area_id=" + conf.curLocId, null, "sellAreaCancel");
    this._view.iteractiveChildren = false;
};
canvas.app.world.manor.ManorController.prototype.loadUserRequests = function () {
    var Conf = canvas.app.manor.model;
    this._urlLoader.load(canvas.Config.entryPoint + "?object=estate&json_mode_on=1&action=work_requests&page=" + (Conf.requestCurPage + 1), null, "loadUserRequests");
    this._view.iteractiveChildren = false;
};
canvas.app.world.manor.ManorController.prototype.workUse = function (labour) {
    var Conf = canvas.app.manor.model;
    this._urlLoader.load(canvas.Config.entryPoint + "?object=estate&json_mode_on=1&action=work&work_request_id=" + Conf.selectedRequestID + "&amount=" + labour, null, "workUse");
    this._view.iteractiveChildren = false;
};
canvas.app.world.manor.ManorController.prototype.moveArea = function () {
    this._urlLoader.load(canvas.app.world.model.requestURL + "?mode=move_estate", null, "moveArea");
    this._view.iteractiveChildren = false;
};
canvas.app.world.manor.Popup = function () {
    canvas.px.Container.call(this);
    this.interactive = true;
    this.mouseover = this.overHandler.bind(this);
    this.container = new canvas.px.Container();
    this.addChild(this.container);
    this.container.position.set(-80, -105);
};
canvas.app.world.manor.Popup.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.world.manor.Popup.prototype.overHandler = function () {
    if (this.parent) this.parent.setChildIndex(this, this.parent.numChildren - 1);
};
canvas.app.world.manor.popup.PopupBuy = function (id, price1, price2, userType, isSelling, sellEnable) {
    canvas.app.world.manor.Popup.call(this);
    if (userType == undefined) userType = 0;
    if (isSelling == undefined) isSelling = false;
    if (sellEnable == undefined) sellEnable = false;
    if (price2 == undefined) price2 = 0;
    this.id = id;
    this._price = price1;
    this._isSelling = isSelling;
    var img;
    var t;
    var conf = canvas.app.world.model;
    this.flag = new canvas.px.Sprite(canvas.ResourceLoader.getImage("world", "manor/03"));
    this.flag.position.set(-65, -72);
    this.addChild(this.flag);
    this.flag.interactive = true;
    this.molotok = new canvas.px.Sprite(canvas.ResourceLoader.getImage("world", "manor/04"));
    this.molotok.position.set(-63, -46);
    this.addChild(this.molotok);
    this.molotok.interactive = true;
    canvas.EventManager.dispatchEvent(canvas.app.world.Event.HINT_ADD, null, { target: this.flag, params: new canvas.utils.HintParams(new canvas.app.view.MappingHint(canvas.Translator.getText(219))) });
    canvas.EventManager.dispatchEvent(canvas.app.world.Event.HINT_ADD, null, { target: this.molotok, params: new canvas.utils.HintParams(new canvas.app.view.MappingHint(canvas.Translator.getText(220))) });
    img = new canvas.px.Sprite(canvas.ResourceLoader.getImage("world", "money_gold"));
    this.addChild(img);
    img.position.set(-33, -66);
    t = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11, 7092753, 62, 18, "left");
    t.position.set(-18, -67);
    t.text = price1;
    this.addChild(t);
    if (conf.buyEnable) {
        img = new canvas.px.Sprite(canvas.ResourceLoader.getImage("world", "manor/05"));
        this.addChild(img);
        img.position.set(42, -74);
        t = new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_11, canvas.Const.FONT_TAHOMA_11_BOLD, 11141377, 50, 18, "left");
        t.position.set(70, -69);
        t.text = "<a href='event:buyNew'>" + canvas.Translator.getText(200) + "</a>";
        this.addChild(t);
    }
    if (price2 == 0) {
        t = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11, 7026733, 144, 20, "left");
        this.addChild(t);
        t.text = canvas.Translator.getText(201);
        this.addChild(t);
        t.position.set(-31, -43);
    } else {
        img = new canvas.px.Sprite(canvas.ResourceLoader.getImage("world", "money_gold"));
        this.addChild(img);
        img.position.set(-33, -41);
        t = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11, 7092753, 62, 18, "left");
        t.position.set(-18, -42);
        t.text = price2;
        this.addChild(t);
        if (conf.buyEnable) {
            img = new canvas.px.Sprite(canvas.ResourceLoader.getImage("world", "manor/05"));
            this.addChild(img);
            img.position.set(42, -49);
            t = new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_11, canvas.Const.FONT_TAHOMA_11_BOLD, 11141377, 50, 18, "left");
            t.position.set(70, -44);
            t.text = "<a href='event:buyUser'>" + canvas.Translator.getText(200) + "</a>";
            this.addChild(t);
        }
    }
    if (userType == 0 || !sellEnable) {
        var img = this.container.addChildAt(new canvas.px.Sprite(canvas.ResourceLoader.getImage("world", "manor/06")), 0);
        img.y = 23;
    } else {
        this.container.addChildAt(new canvas.px.Sprite(canvas.ResourceLoader.getImage("world", "manor/07")), 0);
        img = new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("world", "tile_0"), 4, 0, 4, 0);
        img.width = 145;
        img.position.set(43, 7);
        this.container.addChild(img);
        img = new canvas.px.Sprite(canvas.ResourceLoader.getImage("world", "manor/02"));
        img.position.set(-65, -100);
        this.addChild(img);
        t = new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_11, canvas.Const.FONT_TAHOMA_11_BOLD, 11141377, 100, 18, "left");
        t.position.set(-30, -94);
        t.text = "<a href='event:sell'>" + (this._isSelling ? canvas.Translator.getText(202) : canvas.Translator.getText(203)) + "</a>";
        this.addChild(t);
    }
    img = new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("world", "tile_0"), 4, 0, 4, 0);
    img.width = 145;
    img.position.set(43, 32);
    this.container.addChild(img);
    img = new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("world", "tile_0"), 4, 0, 4, 0);
    img.width = 145;
    img.position.set(43, 57);
    this.container.addChild(img);
    canvas.EventManager.addEventListener(canvas.ui.HtmlTextEvent.EVENT_LINK, null, this._linkHandler, this);
};
canvas.app.world.manor.popup.PopupBuy.prototype = Object.create(canvas.app.world.manor.Popup.prototype);
canvas.app.world.manor.popup.PopupBuy.prototype._linkHandler = function (event) {
    if (!canvas.Functions.findParent(this, event.target)) return;
    switch (event.params) {
        case "buyNew":
            canvas.EventManager.dispatchEvent(canvas.app.manor.Event.OPEN_CONFIRM, null, {
                text: canvas.Translator.getText(168) + " <b>" + this._price + "</b> <img src='money_gold' atlas='world' yOffset='1'/> ?",
                event: { name: canvas.app.manor.Event.BUY_AREA, params: { areaId: this.id, requestId: "", price: this._price } },
            });
            break;
        case "buyUser":
            canvas.EventManager.dispatchEvent(canvas.app.manor.Event.SELECT_LOCATION, null, this.id);
            canvas.EventManager.dispatchEvent(canvas.app.manor.Event.OPEN_MARKET_BUY);
            break;
        case "sell":
            canvas.EventManager.dispatchEvent(canvas.app.manor.Event.SELECT_LOCATION, null, this.id);
            if (this._isSelling) {
                canvas.EventManager.dispatchEvent(canvas.app.manor.Event.OPEN_CONFIRM, null, { text: canvas.Translator.getText(204), event: { name: canvas.app.manor.Event.SELL_AREA_CANCEL } });
            } else {
                canvas.EventManager.dispatchEvent(canvas.app.manor.Event.OPEN_MARKET_SELL);
            }
            break;
    }
};
canvas.app.world.manor.popup.PopupBuy.prototype.destroy = function () {
    canvas.EventManager.dispatchEvent(canvas.app.world.Event.HINT_REMOVE, null, { target: this.flag });
    canvas.EventManager.dispatchEvent(canvas.app.world.Event.HINT_REMOVE, null, { target: this.molotok });
    canvas.EventManager.removeEventListener(canvas.ui.HtmlTextEvent.EVENT_LINK, null, this._linkHandler, this);
    canvas.px.Container.prototype.destroy.apply(this, [{ children: true }]);
};
canvas.app.world.view.AreaLoader = function (base_lnk, item_lnk, complete_func, isInst) {
    canvas.px.Container.call(this);
    if (isInst == undefined) isInst = false;
    this.isInst = isInst;
    this.baseLnk = base_lnk;
    this.itemLnk = item_lnk;
    this.completeFunc = complete_func;
    this.cached_sprites = {};
};
canvas.app.world.view.AreaLoader.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.world.view.AreaLoader.prototype.init = function () {
    canvas.EventManager.addEventListener(canvas.ResourceLoader.EVENT_COMPLETE, null, this.completeHandler, this);
    var str = this.itemLnk.src.split(".")[0];
    this.imageLink = canvas.Config.worldPath + str + "/" + str + ".png";
    this.mciLink = canvas.Config.worldPath + str + "/" + str + ".mci";
    canvas.ResourceLoader.add(this.isInst ? [this.mciLink] : [this.imageLink, this.mciLink]);
};
canvas.app.world.view.AreaLoader.prototype.completeHandler = function () {
    canvas.EventManager.removeEventListener(canvas.ResourceLoader.EVENT_COMPLETE, null, this.completeHandler, this);
    this.data = canvas.ResourceLoader.get(this.mciLink).data;
    if (!this.isInst) {
        this.cached_sprites["fog"] = new canvas.px.Polygon(this.data.fog, 1, 0.5);
        this.cached_sprites["fog"].beginFill(1, 0.5);
        this.cached_sprites["fog"].drawRect(0, this.cached_sprites["fog"].height, this.cached_sprites["fog"].width, 1);
        this.cached_sprites["fog"].endFill();
        this.cached_sprites["borders"] = new canvas.px.Sprite(canvas.ResourceLoader.getTexture(this.imageLink));
        this.baseLnk.map1.add_area_sensor(this.itemLnk);
    }
    this.itemLnk.swf_ready = true;
    var objects = this.data.conf;
    if (objects != null) {
        var obj;
        var objI;
        var len = objects.length;
        for (var i = 0; i < len; i++) {
            obj = objects[i];
            objI = {};
            this.itemLnk.objects.push(objI);
            objI.id = obj.id;
            objI.xx = obj.xx;
            objI.yy = obj.yy;
            objI.type = "area";
            objI.exit_flag = obj.exit;
            objI.linkage_area_id = obj.area;
            if (objI.linkage_area_id && obj.loc) {
                objI.linkage_locations = null;
                objI.linkage_area_loc = obj.loc;
            } else {
                objI.linkage_locations = obj.loc;
            }
        }
    }
    if (this.completeFunc != null) {
        this.completeFunc.call();
    }
};
canvas.app.world.view.AreaLoader.prototype.get_sprite = function (sprite_name) {
    if (this.cached_sprites[sprite_name] != null) {
        return this.cached_sprites[sprite_name];
    }
    if (sprite_name == "sen_area") {
        return new canvas.px.Polygon(this.data.sen_area, 16777215, 0.15);
    }
    if (sprite_name.substr(0, 7) == "sen_loc") {
        return new canvas.px.Polygon(this.data.sen_loc[sprite_name.substr(8)], 16777215, 0.15);
    }
    return new canvas.px.Sprite(canvas.px.TextureEmpty);
};
canvas.app.world.view.AreaLoader.prototype.get_way_sen = function (id) {
    return new canvas.px.Polygon(this.data.sen_way[id.split("_")[1]]);
};
canvas.app.world.view.AreaLoader.prototype.get_bmp = function (bmpd_name) {
    return new canvas.px.Sprite(canvas.ResourceLoader.getImage("world", "area/" + this.itemLnk.src.split(".")[0] + "/" + bmpd_name) || new canvas.px.Sprite(canvas.px.TextureEmpty));
};
canvas.app.world.view.FrontsContent = function () {
    this._fdata = null;
    Object.defineProperty(this, "fdata", {
        get: function () {
            return this._fdata;
        },
        set: function (value) {
            this._fdata = value;
            this.update();
        },
    });
    canvas.px.Container.call(this);
    this.showHeader = true;
    var conf = canvas.app.world.model;
    var tfSize = conf.isModule ? canvas.Const.FONT_TAHOMA_10_BOLD_STROKE : canvas.Const.FONT_TAHOMA_11_BOLD_STROKE;
    this.glowContainer = new canvas.px.Container();
    this.addChild(this.glowContainer);
    this.list_header_tf = new canvas.ui.Text(tfSize, 16769442, 200, 18, "left");
    this.list_header_tf.position.set(5, 2);
    this.list_header_tf.text = canvas.Translator.getText(251) + ":";
    this.glowContainer.addChild(this.list_header_tf);
    this.text_header_point = new canvas.px.Sprite(canvas.ResourceLoader.getImage("world", "red_point"));
    this.text_header_point.position.set(5, 20);
    this.addChild(this.text_header_point);
    this.text_header_tf = new canvas.ui.Text(tfSize, 16762368, 200, 16, "left");
    this.text_header_tf.position.set(21, 18);
    this.text_header_tf.text = "Заголовок текста";
    this.glowContainer.addChild(this.text_header_tf);
    this.status_tf = new canvas.ui.Text(tfSize, 16769442, 200, 18, "left");
    this.status_tf.position.set(21, 34);
    this.status_tf.text = canvas.Translator.getText(251) + ":";
    this.glowContainer.addChild(this.status_tf);
    this.timer_icon = new canvas.px.Sprite(canvas.px.TextureEmpty);
    this.timer_icon.position.set(19, 50);
    this.addChild(this.timer_icon);
    this.timer_tf = new canvas.ui.Text(tfSize, 16769442, 200, 18, "left");
    this.timer_tf.position.set(32, 48);
    this.timer_tf.text = "10:12";
    this.glowContainer.addChild(this.timer_tf);
    this.update();
};
canvas.app.world.view.FrontsContent.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.world.view.FrontsContent.prototype.update = function () {
    this.visible = this.fdata != null;
    if (this.fdata == null) return;
    if (this.showHeader) {
        if (!this.glowContainer.contains(this.list_header_tf)) this.glowContainer.addChild(this.list_header_tf);
    } else {
        if (this.glowContainer.contains(this.list_header_tf)) this.glowContainer.removeChild(this.list_header_tf);
    }
    var color = 16769442;
    var statusTitle;
    switch (this.fdata.status) {
        case 0:
            switch (this.fdata.owner) {
                case 1:
                    statusTitle = 724;
                    color = 1210068;
                    this.timer_icon.texture = canvas.ResourceLoader.getImage("world", "timer_hum");
                    break;
                case -1:
                    statusTitle = 725;
                    color = 11730944;
                    this.timer_icon.texture = canvas.ResourceLoader.getImage("world", "timer_mag");
                    break;
                default:
                    statusTitle = 726;
                    color = 16769442;
                    this.timer_icon.texture = canvas.ResourceLoader.getImage("world", "timer_none");
            }
            break;
        case 1:
            statusTitle = 727;
            this.timer_icon.texture = canvas.ResourceLoader.getImage("world", "timer_none");
            break;
        case 2:
            statusTitle = 728;
            this.timer_icon.texture = canvas.ResourceLoader.getImage("world", "timer_none");
            break;
        case 3:
            statusTitle = 710;
            this.timer_icon.texture = canvas.ResourceLoader.getImage("world", "timer_none");
            break;
    }
    this.status_tf.text = canvas.Translator.getText(statusTitle);
    this.text_header_tf.text = this.fdata.title;
    this.updateTime();
};
canvas.app.world.view.FrontsContent.prototype.updateTime = function () {
    this.timer_tf.text = this.fdata == null || this.fdata.status == 3 || this.fdata.displayTime == null ? "--" : this.fdata.displayTime;
};
canvas.app.world.view.InnerObject = function (base_lnk, item_lnk, object_lnk) {
    canvas.px.Container.call(this);
    this.baseLnk = base_lnk;
    this.itemLnk = item_lnk;
    this.objLnk = object_lnk;
    var conf = canvas.app.world.model;
    var xx = this.itemLnk.rect_x1 + this.objLnk.xx;
    var yy = this.itemLnk.rect_y1 + this.objLnk.yy;
    var def;
    if (this.objLnk.type == "area") {
        def = this.objLnk.id;
        this.bmp = this.itemLnk.source.get_bmp(def);
        this.v_color = 1;
        this.bmp.position.set(xx, yy);
        this.addChild(this.bmp);
        this.sen = this.itemLnk.source.get_way_sen(this.objLnk.id);
        this.sen.buttonMode = true;
        this.sen.interactive = true;
        this.sen.mouseover = this.senMouseOverhandler_color.bind(this);
        this.sen.mouseout = this.senMouseOuthandler_color.bind(this);
        this.addChild(this.sen);
        this.sen.position.set(xx, yy);
        if (this.objLnk.linkage_area_id != null || this.objLnk.linkage_locations != null) {
            this.sen.click = this.senMouseClickHandler.bind(this);
        }
    } else if (this.objLnk.type == "global") {
        def = "ico_" + this.objLnk.id + "_bmp";
        this.bmpc = new canvas.px.Container();
        var b = new canvas.px.Sprite(canvas.ResourceLoader.getImage("world", def));
        this.baseTexture = b.texture;
        b.position.set(-Math.round(b.width * 0.5), -Math.round(b.height * 0.5));
        this.bmpc.addChild(b);
        this.bmpc.position.set(xx, yy);
        this.bmpc.scale.set(0.7, 0.7);
        this.addChild(this.bmpc);
        if (this.objLnk.id == "players") {
            this.bmpFlag = new canvas.px.Sprite(canvas.ResourceLoader.getImage("world", "user_flag"));
            this.bmpFlag.position.set(b.x + 30, b.y);
            var m = new canvas.px.Mask(30, 30, 0, 0);
            m.position.set(-10, 0);
            this.bmpFlag.addChild(m);
            this.bmpFlag.interactive = true;
            this.mark_bmp = new canvas.px.Sprite(canvas.ResourceLoader.getImage("world", "png_mark2"));
            this.mark_bmp.position.set(this.objLnk.xx - 21, this.objLnk.yy - 21);
            this.mark_tf = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_10_BOLD, 0, 18, 19, "center");
            this.mark_tf.text = "?";
            this.mark_tf.position.set(this.objLnk.xx - 20, this.objLnk.yy - 18);
            this.mark_tf.interactive = false;
            this.addChild(this.mark_tf);
        }
        this.v_scale = 0.7;
        this.bmpc.buttonMode = true;
        this.bmpc.interactive = true;
        this.bmpc.hitArea = new canvas.px.Circle(0, 0, this.bmpc.width * 0.5);
        this.bmpc.mouseover = this.senMouseOverhandler_scale.bind(this);
        this.bmpc.mouseout = this.senMouseOuthandler_scale.bind(this);
        if (this.objLnk.linkage_area_id != null || this.objLnk.linkage_locations != null) {
            this.bmpc.click = this.senMouseClickHandler.bind(this);
            if (!conf.isModule) {
                if (this.objLnk.linkage_area_id != null) {
                    var item = conf.AREAS[this.objLnk.linkage_area_id];
                    if (item != null) {
                        if (!item.swf_ready) {
                            if (item.source == null) {
                                item.source = new canvas.app.world.view.AreaLoader(this.baseLnk, item, null);
                                item.source.init();
                            }
                        }
                    }
                }
            }
        }
        this.addChild(this.bmpc);
        if (this.mark_bmp) {
            this.addChild(this.mark_bmp);
        }
        if (this.mark_tf) {
            this.addChild(this.mark_tf);
        }
    }
};
canvas.app.world.view.InnerObject.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.world.view.InnerObject.prototype.senMouseOverhandler_color = function () {
    var conf = canvas.app.world.model;
    this.filters = [canvas.Functions.getBrightness(1.2)];
    if (this.objLnk.linkage_locations != null) {
        if (this.itemLnk.locations[this.objLnk.linkage_locations[0]] && this.itemLnk.locations[this.objLnk.linkage_locations[1]]) {
            this.baseLnk.label2.set_data(
                canvas.Translator.getText(208) + ":",
                "",
                [this.itemLnk.locations[this.objLnk.linkage_locations[0]].title, this.itemLnk.locations[this.objLnk.linkage_locations[1]].title],
                undefined,
                undefined,
                undefined,
                conf.W_BOTS != undefined ? conf.W_BOTS[this.objLnk.id] : undefined
            );
        }
        this.baseLnk.label2.sender = this;
        if (conf.isModule) {
            conf.SelectWay(this.objLnk.linkage_locations);
        }
    } else if (this.objLnk.linkage_area_id != null) {
        this.baseLnk.label2.set_data(canvas.Translator.getText(209) + ":", conf.AREAS[this.objLnk.linkage_area_id].title, null);
        this.baseLnk.label2.sender = this;
        var arr = [];
        for (var i = 0; i < conf.AREALOC.length; i++) {
            if (conf.AREALOC[i][0] == this.objLnk.linkage_area_id) {
                arr = arr.concat(conf.AREALOC[i][1]);
                break;
            }
        }
        if (conf.isModule) {
            if (this.objLnk.linkage_area_loc) {
                conf.SelectWay(arr, this.objLnk.linkage_area_loc);
            } else {
                conf.SelectWay(arr);
            }
        }
    } else if (this.objLnk.exit_flag == 2) {
        this.baseLnk.label2.set_data(canvas.Translator.getText(1800) + ":", "", [conf.AREA.exit_title]);
        this.baseLnk.label2.sender = this;
    } else if (this.objLnk.exit_flag == 1) {
        this.baseLnk.label2.set_data(canvas.Translator.getText(1801) + ":", "", [conf.AREA.enter_title]);
        this.baseLnk.label2.sender = this;
    }
};
canvas.app.world.view.InnerObject.prototype.senMouseOuthandler_color = function () {
    var conf = canvas.app.world.model;
    this.filters = null;
    if (conf.isModule) {
        conf.UnSelectWay();
    }
    if (this.baseLnk.label2.sender == this) this.baseLnk.label2.deactivate();
};
canvas.app.world.view.InnerObject.prototype.senMouseOverhandler_scale = function () {
    var conf = canvas.app.world.model;
    if (this.objLnk.location_id != null) {
        this.itemLnk.locations[this.objLnk.location_id].lnk.force_over();
        if (conf.isModule) {
            if (this.objLnk.linkage_locations != null) {
                conf.SelectWay(this.objLnk.linkage_locations, "location");
            } else if (this.objLnk.linkage_area_id != null) {
                var arr = [];
                for (var i = 0; i < conf.AREALOC.length; i++) {
                    if ((conf.AREALOC[i][0] == this.objLnk.linkage_area_id, "area")) {
                        arr = arr.concat(conf.AREALOC[i][1]);
                        break;
                    }
                }
                if (conf.isModule) {
                    if (this.objLnk.linkage_area_loc) {
                        conf.SelectWay(arr, this.objLnk.linkage_area_loc);
                    } else {
                        conf.SelectWay(arr);
                    }
                }
            }
        }
    }
    if (this.objLnk.title != null) {
        this.baseLnk.label2.set_data(this.objLnk.title, this.objLnk.text, this.objLnk.items);
        this.baseLnk.label2.sender = this;
    } else if (this.objLnk.id == "players") {
        if (this.pl_list != null) {
            var a = [];
            for (var i = 0; i < this.pl_list.length; i++) {
                a.push(this.pl_list[i].nick);
            }
            this.baseLnk.label2.set_data(canvas.Translator.getText(1802), "", a);
            this.baseLnk.label2.sender = this;
        } else {
        }
    }
    this.frameDelta_scale(0.3 / 3);
};
canvas.app.world.view.InnerObject.prototype.senMouseOuthandler_scale = function () {
    var conf = canvas.app.world.model;
    this.frameDelta_scale(-0.3 / 3);
    if (this.baseLnk.label2.sender == this) this.baseLnk.label2.deactivate();
    if (this.objLnk.location_id != null) {
        this.itemLnk.locations[this.objLnk.location_id].lnk.force_out();
    }
    if (conf.isModule) {
        conf.UnSelectWay();
    }
};
canvas.app.world.view.InnerObject.prototype.frameDelta_scale = function (val) {
    this.v_delta = val;
    canvas.EventManager.addEventListener(canvas.app.world.Event.ENTER_FRAME, null, this.frameHandler_scale, this);
};
canvas.app.world.view.InnerObject.prototype.frameHandler_scale = function () {
    this.v_scale += this.v_delta;
    this.bmpc.scale.set(this.v_scale, this.v_scale);
    if ((this.v_delta < 0 && this.v_scale <= 0.7) || (this.v_delta > 0 && this.v_scale >= 1)) {
        if (this.v_delta < 0) {
            this.v_scale = 0.7;
            this.bmpc.scale.set(0.7, 0.7);
        } else {
            this.v_scale = 1;
            this.bmpc.scale.set(1, 1);
        }
        canvas.EventManager.removeEventListener(canvas.app.world.Event.ENTER_FRAME, null, this.frameHandler_scale, this);
    }
};
canvas.app.world.view.InnerObject.prototype.senMouseClickHandler = function () {
    var conf = canvas.app.world.model;
    if (this.objLnk.linkage_area_id != null) {
        var arr = [];
        for (var i = 0; i < conf.AREALOC.length; i++) {
            if (conf.AREALOC[i][0] == this.objLnk.linkage_area_id) {
                arr = arr.concat(conf.AREALOC[i][1]);
                break;
            }
        }
        if (conf.isModule) {
            if (this.objLnk.linkage_area_loc) {
                conf.GoToWay(arr, this.objLnk.linkage_area_loc);
            } else if (this.objLnk.linkage_location_id) {
                conf.GoToWay(arr, [this.objLnk.linkage_location_id]);
            } else {
                conf.GoToWay(arr);
            }
            return;
        }
        var item = conf.AREAS[this.objLnk.linkage_area_id];
        if (item != null) {
            if (item.swf_ready) {
                conf.focusedLocationId = this.objLnk.linkage_location_id;
                this.baseLnk.area_switch(item);
            } else {
                if (item.source == null) {
                    item.source = new canvas.app.world.view.AreaLoader(this.baseLnk, item, null);
                    item.source.init();
                }
            }
        }
    }
    if (this.objLnk.linkage_locations != null) {
        if (conf.isModule) {
            conf.GoToWay(this.objLnk.linkage_locations);
        }
    }
};
canvas.app.world.view.InnerObject.prototype.pl_update_mark = function () {
    if (this.mark_tf == null || this.pl_list == null) {
        return;
    }
    this.mark_tf.text = this.pl_list.length;
};
canvas.app.world.view.InnerObject.prototype.showFlag = function (group, hide, flagUser) {
    if (group == undefined) group = false;
    if (hide == undefined) hide = false;
    this.flagUser = flagUser;
    if (this.bmpFlag == null) return;
    if (hide) {
        if (this.bmpFlag.parent) {
            this.bmpFlag.parent.removeChild(this.bmpFlag);
        }
    } else {
        if (group) {
            this.bmpc.addChild(this.bmpFlag);
            this.bmpc.getChildAt(0).texture = this.baseTexture;
        } else {
            this.bmpc.getChildAt(0).texture = this.bmpFlag.texture;
        }
    }
};
canvas.app.world.view.MapWorldParts = function (base_lnk, global_w, global_h, part_devisor, pic_prefix, isInst) {
    canvas.px.Container.call(this);
    if (isInst == undefined) isInst = false;
    this.isInst = isInst;
    this.popupsContainer = new canvas.px.Container();
    this.popupsContainer2 = new canvas.px.Container();
    this.container = new canvas.px.Container();
    this.baseLnk = base_lnk;
    this.cells = new canvas.px.Graphics();
    this.addChild(this.cells);
    this.addChild(this.container);
    this.addChild(this.popupsContainer);
    this.gw = global_w;
    this.gh = global_h;
    this.devisor = part_devisor;
    this.prefix = pic_prefix;
    if (this.isInst) {
        this.ww = canvas.app.world.model.ww;
        this.hh = canvas.app.world.model.hh;
    } else {
        this.ww = 20;
        this.hh = 13;
    }
    this.iw = Math.floor(global_w / this.ww);
    this.ih = Math.floor(global_h / this.hh);
    this.parts = {};
    this.cont_parts = new canvas.px.Container();
    this.container.addChild(this.cont_parts);
    this.cont_areas = new canvas.px.Container();
    this.container.addChild(this.cont_areas);
    if (this.devisor == 1) {
        this.inner = new canvas.px.Graphics();
        this.container.addChild(this.inner);
    }
    this.cont_way = new canvas.px.Container();
    this.container.addChild(this.cont_way);
    this.put_pers_flag();
    this.put_pers_finish_flag();
    this.cells.beginFill(0, 1);
    this.cells.drawRect(0, 0, this.gw, this.gh);
    this.cells.endFill();
    this.cells.lineStyle(5, 16777215, 0.5);
    this.cells.moveTo(0, 0);
    this.cells.lineTo(this.gw, this.gh);
    this.cells.moveTo(this.gw, 0);
    this.cells.lineTo(0, this.gh);
    this.cells.lineStyle(1, 16776960, 0.5);
    for (var xx = this.iw; xx < this.gw; xx += this.iw) {
        this.cells.moveTo(xx, 0);
        this.cells.lineTo(xx, this.gh);
    }
    for (var yy = this.ih; yy < this.gh; yy += this.ih) {
        this.cells.moveTo(0, yy);
        this.cells.lineTo(this.gw, yy);
    }
    this.bool_dragger = false;
    this.bool_moving = false;
    this.drag_lx = 1;
    this.drag_ly = 1;
};
canvas.app.world.view.MapWorldParts.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.world.view.MapWorldParts.prototype.put_pers_flag = function () {
    var conf = canvas.app.world.model;
    var item = conf.AREAS[conf.FlagArea];
    if (item == null) {
        return;
    }
    var locI = this.isInst ? item.locations[conf.ActiveLocation] : item.locations[conf.FlagLocation];
    if (locI == null) {
        return;
    }
    this.flag_bmp = new canvas.px.Sprite(canvas.ResourceLoader.getImage("world", "png_flag"));
    if (this.devisor == 1) {
        this.flag_bmp.position.set(item.rect_x1 + locI.flag_pos_x - Math.round(this.flag_bmp.width / 2), item.rect_y1 + locI.flag_pos_y - Math.round(this.flag_bmp.height / 2));
    } else if (this.devisor == 3) {
        this.flag_bmp.position.set(item.rect_x1_3 + Math.round(locI.flag_pos_x / 3) - Math.round(this.flag_bmp.width / 2), item.rect_y1_3 + Math.round(locI.flag_pos_y / 3) - Math.round(this.flag_bmp.height / 2));
    }
    this.container.addChild(this.popupsContainer2);
    this.container.addChild(this.flag_bmp);
    if (this.devisor == 1) {
        this.flag_location = locI;
        this.flag_bmp.hitArea = new canvas.px.Circle(14, 18, 18);
        this.flag_bmp.interactive = true;
        this.flag_bmp.buttonMode = true;
        this.flag_bmp.mouseover = this.flagMouseOverHandler.bind(this);
        this.flag_bmp.mouseout = this.flagMouseOutHandler.bind(this);
    }
};
canvas.app.world.view.MapWorldParts.prototype.refresh_pers_flag_inst = function () {
    var conf = canvas.app.world.model;
    if (conf.ActiveLocation == null) {
        if (this.flag_bmp.parent) this.container.removeChild(this.flag_bmp);
        this.baseLnk.label1.set_line1(canvas.Translator.getText(213) + ":", conf.AREA.title);
        return;
    }
    var item = conf.AREA;
    if (item == null) {
        return;
    }
    var locI = item.locations[conf.ActiveLocation];
    if (locI == null) {
        return;
    }
    if (this.flag_bmp == null) {
        this.put_pers_flag();
    }
    this.flag_bmp.x = locI.flag_pos_x - Math.floor(this.flag_bmp.width / 2);
    this.flag_bmp.y = locI.flag_pos_y - Math.floor(this.flag_bmp.height / 2);
    this.flag_location = locI;
    var cur_area = "unknown area";
    var cur_location = "unknown location";
    cur_area = item.title;
    if (item.locations[conf.ActiveLocation] != null) {
        cur_location = item.locations[conf.ActiveLocation].title;
    }
    this.baseLnk.label1.set_line1(canvas.Translator.getText(213) + ":", cur_area, cur_location);
    this.container.addChild(this.flag_bmp);
};
canvas.app.world.view.MapWorldParts.prototype.put_pers_finish_flag = function () {
    var conf = canvas.app.world.model;
    if (!this.finish_flag_bmp) {
        this.finish_flag_bmp = new canvas.px.Sprite(canvas.ResourceLoader.getImage("world", "png_finish_flag"));
        this.finish_flag_bmp.position.set(-100, -100);
        this.container.addChild(this.finish_flag_bmp);
        if (this.devisor == 1) {
            this.finish_flag_bmp.hitArea = new canvas.px.Circle(14, 18, 18);
            this.finish_flag_bmp.interactive = true;
            this.finish_flag_bmp.buttonMode = true;
            this.finish_flag_bmp.mouseover = this.finishFlagMouseOverHandler.bind(this);
            this.finish_flag_bmp.mouseout = this.finishFlagMouseOutHandler.bind(this);
        }
    }
    if (conf.FinishLocation == conf.FlagLocation || conf.FinishLocation == null) {
        this.cont_way.removeChildren();
        this.baseLnk.main.setPoint(0);
        this.finish_flag_bmp.position.set(-100, -100);
        return;
    }
    var finish_area = this.getArea(conf.FinishLocation);
    if (finish_area == "err") {
        return;
    }
    var item = conf.AREAS[finish_area];
    if (item == null) {
        return;
    }
    var tarI = item.locations[conf.FinishLocation];
    if (tarI == null) {
        return;
    }
    if (this.devisor == 1) {
        this.finish_flag_bmp.position.set(item.rect_x1 + tarI.flag_pos_x - Math.round(this.finish_flag_bmp.width / 2), item.rect_y1 + tarI.flag_pos_y - Math.round(this.finish_flag_bmp.height / 2) + 10);
        this.setWay();
    } else if (this.devisor == 3) {
        this.finish_flag_bmp.position.set(item.rect_x1_3 + Math.round(tarI.flag_pos_x / 3) - Math.round(this.finish_flag_bmp.width / 2), item.rect_y1_3 + Math.round(tarI.flag_pos_y / 3) - Math.round(this.finish_flag_bmp.height / 2) + 3);
        this.setWay();
    }
    this.container.addChild(this.finish_flag_bmp);
    if (this.devisor == 1) {
        this.finish_flag_location = tarI;
    }
};
canvas.app.world.view.MapWorldParts.prototype.refresh_pers_flag = function () {
    if (this.isInst) {
        this.refresh_pers_flag_inst();
        return;
    }
    var conf = canvas.app.world.model;
    var item = conf.AREAS[conf.FlagArea];
    if (item == null) {
        return;
    }
    var locI = item.locations[conf.FlagLocation];
    var tarI = item.locations[conf.FinishLocation];
    if (locI == null) {
        return;
    }
    if (this.flag_bmp == null) {
        return;
    }
    if (this.devisor == 1) {
        this.flag_bmp.position.set(item.rect_x1 + locI.flag_pos_x - Math.round(this.flag_bmp.width / 2), item.rect_y1 + locI.flag_pos_y - Math.round(this.flag_bmp.height / 2));
    } else if (this.devisor == 3) {
        this.flag_bmp.position.set(item.rect_x1_3 + Math.round(locI.flag_pos_x / 3) - Math.round(this.flag_bmp.width / 2), item.rect_y1_3 + Math.round(locI.flag_pos_y / 3) - Math.round(this.flag_bmp.height / 2));
    }
    if (this.devisor == 1) {
        this.flag_location = locI;
    }
};
canvas.app.world.view.MapWorldParts.prototype.refresh_pers_finish_flag = function () {
    var conf = canvas.app.world.model;
    if (conf.FinishLocation == conf.FlagLocation || conf.FinishLocation == null) {
        this.cont_way.removeChildren();
        this.baseLnk.main.setPoint(0);
        this.finish_flag_bmp.position.set(-100, -100);
        return;
    }
    var finish_area = this.getArea(conf.FinishLocation);
    if (finish_area == "err") {
        return;
    }
    var item = conf.AREAS[finish_area];
    if (item == null) {
        return;
    }
    var tarI = item.locations[conf.FinishLocation];
    if (tarI == null) {
        return;
    }
    if (this.finish_flag_bmp == null) {
        return;
    }
    if (this.devisor == 1) {
        this.finish_flag_bmp.position.set(item.rect_x1 + tarI.flag_pos_x - Math.round(this.finish_flag_bmp.width / 2), item.rect_y1 + tarI.flag_pos_y - Math.round(this.finish_flag_bmp.height / 2) + 10);
        this.setWay();
    } else if (this.devisor == 3) {
        this.finish_flag_bmp.position.set(item.rect_x1_3 + Math.round(tarI.flag_pos_x / 3) - Math.round(this.finish_flag_bmp.width / 2), item.rect_y1_3 + Math.round(tarI.flag_pos_y / 3) - Math.round(this.finish_flag_bmp.height / 2) + 3);
        this.setWay();
    }
    if (this.devisor == 1) {
        this.finish_flag_location = tarI;
    }
};
canvas.app.world.view.MapWorldParts.prototype.flagMouseOverHandler = function () {
    this.baseLnk.label2.set_data(canvas.Translator.getText(211), canvas.Translator.getText(212), null);
    if (this.flag_location != null) {
        if (this.flag_location.lnk != null) {
            this.flag_location.lnk.force_over();
        }
    }
};
canvas.app.world.view.MapWorldParts.prototype.finishFlagMouseOverHandler = function () {
    this.baseLnk.label2.set_data(canvas.Translator.getText(217), canvas.Translator.getText(216), null);
    if (this.finish_flag_location != null) {
        if (this.finish_flag_location.lnk != null) {
            this.finish_flag_location.lnk.force_over();
        }
    }
};
canvas.app.world.view.MapWorldParts.prototype.flagMouseOutHandler = function () {
    this.baseLnk.label2.deactivate();
    if (this.flag_location != null) {
        if (this.flag_location.lnk != null) {
            this.flag_location.lnk.force_out();
        }
    }
};
canvas.app.world.view.MapWorldParts.prototype.finishFlagMouseOutHandler = function () {
    this.baseLnk.label2.deactivate();
    if (this.finish_flag_location != null) {
        if (this.finish_flag_location.lnk != null) {
            this.finish_flag_location.lnk.force_out();
        }
    }
};
canvas.app.world.view.MapWorldParts.prototype.check_parts = function (ww, hh) {
    var y1 = Math.floor(-this.y / this.ih);
    var y2 = Math.ceil((-this.y + hh - this.ih) / this.ih);
    var x1 = Math.floor(-this.x / this.iw);
    var x2 = Math.ceil((-this.x + ww - this.iw) / this.iw);
    if (y1 < 0) y1 = 0;
    if (y2 > this.hh - 1) y2 = this.hh - 1;
    if (x1 < 0) x1 = 0;
    if (x2 > this.ww - 1) x2 = this.ww - 1;
    var yy;
    var xx;
    var num;
    var arr = [];
    for (yy = y1; yy <= y2; yy++) {
        for (xx = x1; xx <= x2; xx++) {
            num = yy * this.ww + xx + 1;
            arr.push(num);
            if (this.parts[num] == null) {
                this.parts[num] = new canvas.ui.Image(this.part_link(num));
                this.parts[num].position.set(xx * this.iw, yy * this.ih);
            }
        }
    }
    for (var key in this.parts) {
        num = parseInt(key);
        if (arr.indexOf(num) < 0) {
            this.cont_parts.removeChild(this.parts[num]);
        } else {
            this.cont_parts.addChild(this.parts[num]);
        }
    }
};
canvas.app.world.view.MapWorldParts.prototype.part_link = function (num) {
    var str = String(num);
    if (num < 10) str = "0" + str;
    return this.prefix + str + ".jpg";
};
canvas.app.world.view.MapWorldParts.prototype.add_area_sensor = function (item_lnk) {
    item_lnk.sen = new canvas.app.world.view.WorldSensor(this.baseLnk, item_lnk, "sen_area", 3, null);
    this.cont_areas.addChild(item_lnk.sen);
    this.baseLnk.updateTreasure();
};
canvas.app.world.view.MapWorldParts.prototype.focus_on_active_area = function () {
    var conf = canvas.app.world.model;
    var item = conf.AREAS[conf.focusedAreaId];
    if (item != null) {
        this.baseLnk.label1.deactivate();
        this.baseLnk.label1.set_line1(canvas.Translator.getText(213) + ":", item.title);
        this.baseLnk.label1.redraw_bg();
        if (!this.isInst) {
            var vis_ww = conf.width - (19 + 35);
            var vis_hh = conf.height - (14 + 30);
            var invis_ww = this.gw - vis_ww;
            var invis_hh = this.gh - vis_hh;
            var loc_center_x;
            var loc_center_y;
            if (conf.focusedAreaId != conf.FlagArea) {
                loc_center_x = item.center_x;
                loc_center_y = item.center_y;
            } else {
                var my_locI = item.locations[conf.FlagLocation];
                if (my_locI != null) {
                    loc_center_x = my_locI.flag_pos_x + item.rect_x1;
                    loc_center_y = my_locI.flag_pos_y + item.rect_y1;
                } else {
                    loc_center_x = item.center_x;
                    loc_center_y = item.center_y;
                }
            }
            var nx = -Math.round(loc_center_x / this.devisor - vis_ww / 2);
            var ny = -Math.round(loc_center_y / this.devisor - vis_hh / 2);
            if (nx > 0) {
                nx = 0;
            } else if (nx < -invis_ww) {
                nx = -invis_ww;
            }
            if (ny > 0) {
                ny = 0;
            } else if (ny < -invis_hh) {
                ny = -invis_hh;
            }
            this.baseLnk.scroll_H.current = -nx;
            this.baseLnk.scroll_V.current = -ny;
            this.baseLnk.scrollHandlerV();
            this.baseLnk.scrollHandlerH();
        }
        if (this.devisor == 1) {
            this.init_inner_objects(item);
        }
    }
};
canvas.app.world.view.MapWorldParts.prototype.focus_on_active_area_in_motion = function () {
    var conf = canvas.app.world.model;
    if (conf.AREAS[conf.focusedAreaId] == null) {
        return;
    }
    this.baseLnk.label1.deactivate();
    this.baseLnk.label1.set_line1(canvas.Translator.getText(213) + ":", conf.AREAS[conf.focusedAreaId].title);
    this.baseLnk.label1.redraw_bg();
    if (this.devisor == 1) {
        this.init_inner_objects(conf.AREAS[conf.focusedAreaId]);
    }
    if (!this.bool_moving) {
        this.bool_moving = true;
        canvas.EventManager.addEventListener(canvas.app.world.Event.ENTER_FRAME, null, this.movingHandler, this);
    }
};
canvas.app.world.view.MapWorldParts.prototype.movingHandler = function () {
    var conf = canvas.app.world.model;
    var item = conf.AREAS[conf.focusedAreaId];
    var vis_ww = conf.ls_ww - (19 + 35);
    var vis_hh = conf.ls_hh - (14 + 30);
    var invis_ww = this.gw - vis_ww;
    var invis_hh = this.gh - vis_hh;
    var loc_center_x;
    var loc_center_y;
    if (conf.focusedAreaId != conf.FlagArea) {
        if (item.locations[conf.FlagLocation] != null) {
            var my_locI = item.locations[conf.FlagLocation];
            if (this.devisor == 1) {
                loc_center_x = my_locI.flag_pos_x + item.rect_x1;
                loc_center_y = my_locI.flag_pos_y + item.rect_y1;
            } else {
                loc_center_x = Math.round(my_locI.flag_pos_x / 3) + item.rect_x1_3;
                loc_center_y = Math.round(my_locI.flag_pos_y / 3) + item.rect_y1_3;
            }
        } else {
            if (this.devisor == 1) {
                loc_center_x = item.center_x;
                loc_center_y = item.center_y;
            } else {
                loc_center_x = Math.round(item.center_x / 3);
                loc_center_y = Math.round(item.center_y / 3);
            }
        }
    } else {
        var my_locI1 = item.locations[conf.FlagLocation];
        if (this.devisor == 1) {
            loc_center_x = my_locI1.flag_pos_x + item.rect_x1;
            loc_center_y = my_locI1.flag_pos_y + item.rect_y1;
        } else {
            loc_center_x = Math.round(my_locI1.flag_pos_x / 3) + item.rect_x1_3;
            loc_center_y = Math.round(my_locI1.flag_pos_y / 3) + item.rect_y1_3;
        }
    }
    var nx = -Math.round(loc_center_x - vis_ww / 2);
    var ny = -Math.round(loc_center_y - vis_hh / 2);
    if (nx > 0) {
        nx = 0;
    } else if (nx < -invis_ww) {
        nx = -invis_ww;
    }
    if (ny > 0) {
        ny = 0;
    } else if (ny < -invis_hh) {
        ny = -invis_hh;
    }
    var dx = Math.round((this.baseLnk.scroll_H.current + nx) / 7) + 1;
    var dy = Math.round((this.baseLnk.scroll_V.current + ny) / 7) + 1;
    if (dx * dx > 1 || dy * dy > 1) {
        this.baseLnk.scroll_H.current -= dx;
        this.baseLnk.scroll_V.current -= dy;
        this.baseLnk.scrollHandlerV();
        this.baseLnk.scrollHandlerH();
    } else {
        this.bool_moving = false;
        canvas.EventManager.removeEventListener(canvas.app.world.Event.ENTER_FRAME, null, this.movingHandler, this);
    }
    this.baseLnk.map_state.refresh_xy_pos();
    this.baseLnk.refresh_scrollers();
    this.baseLnk.map_state.map_check();
};
canvas.app.world.view.MapWorldParts.prototype.init_inner_objects = function (item_lnk) {
    if (this.isInst) {
        this.init_inner_objects_inst(item_lnk);
        return;
    }
    var conf = canvas.app.world.model;
    var item = item_lnk;
    if (item == null) {
        item = conf.AREAS[conf.focusedAreaId];
    }
    this.inner.removeChildren();
    this.draw_fog(item.rect_x1, item.rect_y1, item.rect_x2, item.rect_y2);
    if (item.swf_ready) {
        var area_fog = item.source.get_sprite("fog");
        area_fog.x = item.rect_x1;
        area_fog.y = item.rect_y1;
        this.inner.addChild(area_fog);
        var area_borders = item.source.get_sprite("borders");
        area_borders.x = item.rect_x1;
        area_borders.y = item.rect_y1;
        this.inner.addChild(area_borders);
        var locI;
        for (var key in item.locations) {
            locI = item.locations[key];
            if (!locI.lnk) {
                locI.lnk = new canvas.app.world.view.WorldSensor(this.baseLnk, item, "sen_loc_" + String(locI.id), 1, locI.id);
            }
            this.inner.addChild(locI.lnk);
        }
        var skip_object;
        var objI;
        var len = item.objects.length;
        for (var i = 0; i < len; i++) {
            objI = item.objects[i];
            skip_object = false;
            if (objI.linkage_area_id != null) {
                if (conf.AREAS[objI.linkage_area_id] == null) {
                    skip_object = true;
                }
            }
            if (!skip_object) {
                if (!objI.lnk) {
                    objI.lnk = new canvas.app.world.view.InnerObject(this.baseLnk, item, objI);
                }
                this.inner.addChild(objI.lnk);
            }
        }
    } else {
        if (item.source == null) {
            item.source = new canvas.app.world.view.AreaLoader(this.baseLnk, item, this.init_inner_objects.bind(this));
            item.source.init();
        } else {
            item.source.completeFunc = this.init_inner_objects.bind(this);
        }
    }
};
canvas.app.world.view.MapWorldParts.prototype.init_inner_objects_inst = function (item_lnk) {
    var conf = canvas.app.world.model;
    var item = item_lnk;
    if (item == null) {
        item = conf.AREA;
    }
    this.inner.removeChildren();
    var locI;
    var sen;
    if (item.source == undefined) {
        item.source = new canvas.app.world.view.AreaLoader(this.baseLnk, item, this.init_inner_objects_inst.bind(this), this.isInst);
        item.source.init();
        return;
    }
    for (var key in item.locations) {
        locI = item.locations[key];
        sen = new canvas.app.world.view.WorldSensor(this.baseLnk, item, "sen_loc_" + String(locI.id), 1, locI.id);
        locI.lnk = sen;
        this.inner.addChild(sen);
        var pl_obj = {};
        pl_obj.xx = locI.players_x;
        pl_obj.yy = locI.players_y;
        pl_obj.type = "global";
        pl_obj.id = "players";
        pl_obj.location_id = locI.id;
        locI.players_object = new canvas.app.world.view.InnerObject(this.baseLnk, item, pl_obj);
    }
    var len = item.objects.length;
    for (var i = 0; i < len; i++) {
        objI = item.objects[i];
        this.inner.addChild(new canvas.app.world.view.InnerObject(this.baseLnk, item, objI));
    }
    canvas.EventManager.dispatchEvent(canvas.app.inst.Event.UPDATE_USERS);
};
canvas.app.world.view.MapWorldParts.prototype.draw_fog = function (x1, y1, x2, y2) {
    this.inner.clear();
    this.inner.beginFill(0, 0.5);
    this.inner.drawRect(0, 0, this.gw, y1);
    this.inner.drawRect(0, y1, x1, y2 - y1);
    this.inner.drawRect(x2, y1, this.gw, y2 - y1);
    this.inner.drawRect(0, y2, this.gw, this.gh);
    this.inner.endFill();
};
canvas.app.world.view.MapWorldParts.prototype.getArea = function (loc) {
    var conf = canvas.app.world.model;
    var out = "";
    for (var i = conf.AREALOC.length; i--; ) {
        var ar1 = conf.AREALOC[i][1];
        for (var j = ar1.length; j--; ) {
            if (String(ar1[j]) == loc) {
                out = conf.AREALOC[i][0];
            }
        }
    }
    if (out != "") {
        return out;
    }
    return "err";
};
canvas.app.world.view.MapWorldParts.prototype.setWay = function (loc) {
    var conf = canvas.app.world.model;
    this.cont_way.removeChildren();
    var ar1 = conf.findWay.finder(parseInt(conf.FlagLocation), parseInt(conf.FinishLocation));
    var deltaX = 2312;
    var deltaY = 250;
    for (var i = 0; i < ar1.length - 2; i++) {
        var verge;
        if ((ar1[i] == 20 && ar1[i + 2] == 21) || (ar1[i] == 21 && ar1[i + 2] == 20)) {
            verge = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ways", "way_" + ar1[i + 2] + "_" + ar1[i]));
            verge.scale.set(1 / this.devisor, 1 / this.devisor);
            if (conf.way_conf["way_" + ar1[i + 2] + "_" + ar1[i]].xx != undefined) {
                verge.position.set(Math.round(conf.way_conf["way_" + ar1[i + 2] + "_" + ar1[i]].xx / this.devisor + deltaX / this.devisor), conf.way_conf["way_" + ar1[i + 2] + "_" + ar1[i]].yy / this.devisor + deltaY / this.devisor);
            } else {
                return;
            }
        } else {
            var vergeName = ar1[i] > ar1[i + 2] ? "way_" + ar1[i] + "_" + ar1[i + 2] : "way_" + ar1[i + 2] + "_" + ar1[i];
            verge = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ways", vergeName));
            if (verge.texture == canvas.px.TextureEmpty) {
                vergeName = "way_" + ar1[i] + "_" + ar1[i + 2];
                vergeName += "_" + ar1[i + 1];
                verge = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ways", vergeName));
                if (verge.texture == canvas.px.TextureEmpty) {
                    vergeName = "way_" + ar1[i + 2] + "_" + ar1[i];
                    vergeName += "_" + ar1[i + 1];
                    verge = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ways", vergeName));
                }
            }
            verge.scale.set(1 / this.devisor, 1 / this.devisor);
            if (conf.way_conf[vergeName] != undefined) {
                verge.position.set(Math.round(conf.way_conf[vergeName].xx / this.devisor + deltaX / this.devisor), Math.round(conf.way_conf[vergeName].yy / this.devisor + deltaY / this.devisor));
            } else {
                if (ar1[i] > ar1[i + 2]) {
                    if (conf.way_conf["way_" + ar1[i] + "_" + ar1[i + 2]] != undefined) {
                        verge.position.set(
                            Math.round(conf.way_conf["way_" + ar1[i] + "_" + ar1[i + 2]].xx / this.devisor + deltaX / this.devisor),
                            Math.round(conf.way_conf["way_" + ar1[i] + "_" + ar1[i + 2]].yy / this.devisor + deltaY / this.devisor)
                        );
                    } else if (conf.way_conf["way_" + ar1[i] + "_" + ar1[i + 2] + "_" + ar1[i + 1]] != undefined) {
                        verge.position.set(
                            Math.round(conf.way_conf["way_" + ar1[i] + "_" + ar1[i + 2] + "_" + ar1[i + 1]].xx / this.devisor + deltaX / this.devisor),
                            Math.round(conf.way_conf["way_" + ar1[i] + "_" + ar1[i + 2] + "_" + ar1[i + 1]].yy / this.devisor + deltaY / this.devisor)
                        );
                    } else {
                        return;
                    }
                } else {
                    if (conf.way_conf["way_" + ar1[i + 2] + "_" + ar1[i]] != undefined) {
                        verge.position.set(
                            Math.round(conf.way_conf["way_" + ar1[i + 2] + "_" + ar1[i]].xx / this.devisor + deltaX / this.devisor),
                            Math.round(conf.way_conf["way_" + ar1[i + 2] + "_" + ar1[i]].yy / this.devisor + deltaY / this.devisor)
                        );
                    } else if (conf.way_conf["way_" + ar1[i + 2] + "_" + ar1[i] + "_" + ar1[i + 1]] != undefined) {
                        verge.position.set(
                            Math.round(conf.way_conf["way_" + ar1[i + 2] + "_" + ar1[i] + "_" + ar1[i + 1]].xx / this.devisor + deltaX / this.devisor),
                            Math.round(conf.way_conf["way_" + ar1[i + 2] + "_" + ar1[i] + "_" + ar1[i + 1]].yy / this.devisor + deltaY / this.devisor)
                        );
                    } else {
                        return;
                    }
                }
            }
        }
        verge.filters = [canvas.Functions.getDropShadow(90, 2, 1, 5977886, 1)];
        this.cont_way.addChild(verge);
    }
};
canvas.app.world.view.MapWorldParts.prototype.add_inner_object = function (obj) {
    if (obj == null) {
        return;
    }
    this.inner.addChild(obj);
};
canvas.app.world.view.ScrollH = function (map_state_lnk, wheelTarget) {
    this.map_state = map_state_lnk;
    var minus = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("world", "png_scroll_h_left"));
    var plus = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("world", "png_scroll_h_right"));
    var drag = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("world", "png_scroll_h_drag"), [3, 0, 3, 0]);
    drag.setSize(40, 0);
    this.drag = drag;
    var bg = new canvas.px.TilingSprite(canvas.ResourceLoader.getImage("world", "png_scroll_bg"));
    canvas.ui.Scroll.call(this, canvas.ui.ScrollType.HORIZONTAL, minus, plus, bg, drag, wheelTarget, true, false);
    this.padding = 15;
    this.step = 50;
    this.max = 600;
};
canvas.app.world.view.ScrollH.prototype = Object.create(canvas.ui.Scroll.prototype);
canvas.app.world.view.ScrollH.prototype.refresh = function () {
    this.max = this.map_state.map_complete_width - this.map_state.map_visible_width;
    var pc = this.map_state.map_visible_width / this.map_state.map_complete_width;
    this.visible = pc < 1;
    this.drag.setSize(Math.round((this.map_state.map_visible_width - (16 + 16)) * pc), 0);
    this.current = this.current;
};
canvas.app.world.view.ScrollV = function (map_state_lnk, wheelTarget) {
    this.map_state = map_state_lnk;
    var minus = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("world", "png_scroll_v_up"));
    var plus = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("world", "png_scroll_v_down"));
    var drag = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("world", "png_scroll_v_drag"), [0, 3, 0, 3]);
    drag.setSize(0, 40);
    this.drag = drag;
    var bg = new canvas.px.TilingSprite(canvas.ResourceLoader.getImage("world", "png_scroll_bg"));
    canvas.ui.Scroll.call(this, canvas.ui.ScrollType.VERTICAL, minus, plus, bg, drag, wheelTarget, true, true);
    this.padding = 15;
    this.step = 50;
    this.max = 600;
};
canvas.app.world.view.ScrollV.prototype = Object.create(canvas.ui.Scroll.prototype);
canvas.app.world.view.ScrollV.prototype.refresh = function () {
    this.max = this.map_state.map_complete_height - this.map_state.map_visible_height;
    var pc = this.map_state.map_visible_height / this.map_state.map_complete_height;
    this.visible = pc < 1;
    this.drag.setSize(0, Math.round((this.map_state.map_visible_height - (16 + 16)) * pc));
    this.current = this.current;
};
canvas.app.world.view.TopTextLeft = function () {
    canvas.px.Graphics.call(this);
    var conf = canvas.app.world.model;
    this.field = new canvas.ui.HtmlText(
        conf.isModule ? canvas.Const.FONT_TAHOMA_10_BOLD_STROKE : canvas.Const.FONT_TAHOMA_11_BOLD_STROKE,
        conf.isModule ? canvas.Const.FONT_TAHOMA_10_BOLD_STROKE : canvas.Const.FONT_TAHOMA_11_BOLD_STROKE,
        16769442,
        400,
        200,
        "left"
    );
    this.field.lineSpace = 4;
    this.addChild(this.field);
    this.field.position.set(6, 4);
    this.line0 = "";
    this.line1 = "";
    this.line2 = "";
    this.interactiveChildren = false;
};
canvas.app.world.view.TopTextLeft.prototype = Object.create(canvas.px.Graphics.prototype);
canvas.app.world.view.TopTextLeft.prototype.set_line0 = function (head, txt1, txt2) {
    this.line0 = head + " <img src='red_point' yOffset='1' atlas='world'/> <font color='#0xFFC600'>" + txt1 + " <img src='red_point' yOffset='1' atlas='world'/> " + txt2 + "</font>";
    this.update();
};
canvas.app.world.view.TopTextLeft.prototype.set_line1 = function (head, txt) {
    this.line1 = head + " <img src='red_point' yOffset='1' atlas='world'/> <font color='#0xFFC600'>" + txt + "</font>";
    this.update();
};
canvas.app.world.view.TopTextLeft.prototype.set_line2 = function (head, txt) {
    this.line2 = head ? head + " <img src='red_point' yOffset='1' atlas='world'/> <font color='#0xFFC600'>" + txt + "</font>" : "";
    this.update();
};
canvas.app.world.view.TopTextLeft.prototype.update = function () {
    this.field.text = this.line0 + "<br/>" + this.line1 + "<br/>" + this.line2;
    this.redraw_bg();
    if (this.field.text != "") {
        this.addChild(this.field);
        this.visible = true;
    }
};
canvas.app.world.view.TopTextLeft.prototype.deactivate = function () {
    this.removeChild(this.field);
    this.visible = false;
};
canvas.app.world.view.TopTextLeft.prototype.redraw_bg = function () {
    this.clear();
    this.beginFill(0, 1 / 3);
    this.drawRoundedRect(0, 0, this.field.textWidth + 12, this.field.textHeight + 8, 6);
    this.endFill();
};
canvas.app.world.view.TopTextRight = function () {
    canvas.px.Graphics.call(this);
    var conf = canvas.app.world.model;
    this.field = new canvas.ui.HtmlText(
        conf.isModule ? canvas.Const.FONT_TAHOMA_10_BOLD_STROKE : canvas.Const.FONT_TAHOMA_11_BOLD_STROKE,
        conf.isModule ? canvas.Const.FONT_TAHOMA_10_BOLD_STROKE : canvas.Const.FONT_TAHOMA_11_BOLD_STROKE,
        16769442,
        215,
        600,
        "left"
    );
    this.field.lineSpace = 4;
    this.addChild(this.field);
    this.field.position.set(6, 4);
    this.treasureActivated = false;
    this.line0 = "";
    this.line1 = "";
    this.line2 = "";
    this.lineBottom = "";
    this.frontsContent = new canvas.app.world.view.FrontsContent();
    this.interactiveChildren = false;
};
canvas.app.world.view.TopTextRight.prototype = Object.create(canvas.px.Graphics.prototype);
canvas.app.world.view.TopTextRight.prototype.set_data = function (title, txt, list, bottomText, frontID, showFrontsHeader) {
    var conf = canvas.app.world.model;
    if (bottomText == undefined) bottomText = "";
    if (frontID == undefined) frontID = "";
    if (showFrontsHeader == undefined) showFrontsHeader = true;
    if (list != undefined && list.length == 0) list = null;
    this.deactivate();
    this.line0 = title ? (list ? title : "<img src='red_point' yOffset='1' atlas='world'/> <font color='#FFC600'>" + title + "</font>") : "";
    this.line1 = txt ? "     <font color='#" + (list ? "FFC600" : "FFE1A2") + "'>" + txt + "</font>" : "";
    this.line2 = "";
    if (list) {
        for (var i = 0; i < list.length; i++) {
            this.line2 += (i == 0 ? "" : "<br/>") + "<img src='red_point' yOffset='1' atlas='world'/> <font color='#FFC600'>" + list[i] + "</font>";
        }
    }
    if (bottomText) {
        this.lineBottom = "   <font color='#FFC600'>" + bottomText + "</font>";
    } else {
        this.lineBottom = "";
    }
    this.update();
    if (showFrontsHeader) {
        this.frontsContent.showHeader = true;
        this.frontsContent.y = this.field.textHeight + 5;
    } else {
        this.frontsContent.showHeader = false;
        this.frontsContent.y = -10;
    }
    if (conf.frontsData != null) this.frontsContent.fdata = conf.frontsData[frontID];
    if (this.frontsContent.fdata != null) this.addChild(this.frontsContent);
    else if (this.contains(this.frontsContent)) this.removeChild(this.frontsContent);
    if (this.frontsContent.parent) {
        this.x = this.ww - Math.max(this.frontsContent.width, this.field.textWidth) - 52;
        this.visible = true;
    }
    this.redraw_bg();
};
canvas.app.world.view.TopTextRight.prototype.deactivate = function () {
    this.removeChild(this.field);
    this.visible = false;
    this.treasureActivated = false;
};
canvas.app.world.view.TopTextRight.prototype.update = function () {
    this.field.text = this.line0 + (this.line0 ? "<br/>" : "") + this.line1 + (this.line1 ? "<br/>" : "") + this.line2 + (this.line2 ? "<br/>" : "") + this.lineBottom;
    if (this.field.text != "" || this.frontsContent.parent) {
        this.addChild(this.field);
        this.visible = true;
    }
    this.x = this.ww - this.field.textWidth - 52;
};
canvas.app.world.view.TopTextRight.prototype.redraw_bg = function () {
    this.clear();
    this.beginFill(0, 1 / 3);
    if (this.frontsContent.parent) {
        this.drawRoundedRect(0, 0, Math.max(this.frontsContent.width, this.field.textWidth) + 12, this.frontsContent.height + this.field.textHeight + 10, 6);
    } else {
        this.drawRoundedRect(0, 0, this.field.textWidth + 12, this.field.textHeight + 8, 6);
    }
    this.endFill();
};
canvas.app.world.view.TopTextRight.prototype.pos = function (ww) {
    this.ww = ww;
};
canvas.app.world.view.TopTextRight.prototype.showTreasureInfo = function () {
    this.treasureActivated = true;
    this.updateTreasureTime();
};
canvas.app.world.view.TopTextRight.prototype.hideTreasureInfo = function () {
    this.treasureActivated = false;
    this.lineBottom = "";
    this.update();
    if (this.line0 == "" && this.line1 == "" && this.line2 == "" && !this.frontsContent.parent) {
        this.deactivate();
    }
};
canvas.app.world.view.TopTextRight.prototype.updateTreasureTime = function () {
    var conf = canvas.app.world.model;
    if (this.treasureActivated) {
        if (conf.treasureFinishTime * 1e3 <= Date.now()) {
            this.deactivate();
        } else {
            this.lineBottom = canvas.Translator.getText(239) + "<br/>" + canvas.Functions.formatDate(conf.treasureFinishTime * 1e3 - Date.now(), "00:00", 0, true);
            this.update();
            this.redraw_bg();
        }
    }
};
canvas.app.world.view.WorldSensor = function (base_lnk, item_lnk, sen_name, part_devisor, location_id) {
    canvas.px.Container.call(this);
    this.isManorable = false;
    this.selected = false;
    this.baseLnk = base_lnk;
    this.itemLnk = item_lnk;
    this.devisor = part_devisor;
    this.loc_id = location_id;
    this.v_scale = 0.7;
    var locationData = this.itemLnk.locations[this.loc_id];
    this.sen = this.itemLnk.source.get_sprite(sen_name);
    if (this.devisor == 1) {
        this.sen.position.set(this.itemLnk.rect_x1, this.itemLnk.rect_y1);
    } else if (this.devisor == 3) {
        this.sen.x = this.itemLnk.rect_x1_3;
        this.sen.y = this.itemLnk.rect_y1_3;
        this.sen.scale.x = 1 / 3;
        this.sen.scale.y = 1 / 3;
        this.click = this.mouseClickHandler.bind(this);
    }
    this.sen.blendMode = canvas.px.BlendMode.OVERLAY;
    this.sen.alpha = 0;
    this.sen.buttonMode = true;
    this.sen.interactive = true;
    this.addChild(this.sen);
    var rect = this.sen.getBounds(this);
    this.selectionContainer = new canvas.px.Sprite(canvas.px.TextureEmpty);
    this.selectionContainer.x = Math.round((rect.x + Math.round(rect.width * 0.5)) / this.devisor);
    this.selectionContainer.y = Math.round((rect.y + Math.round(rect.height * 0.5)) / this.devisor);
    this.frontsContainer = new canvas.px.Container();
    if (locationData != null) {
        if (locationData.front_pos_x > 0) {
            this.frontsContainer.x = rect.x + locationData.front_pos_x;
        } else {
            this.frontsContainer.x = rect.x + Math.round(rect.width * 0.5) + 30;
        }
        if (locationData.front_pos_y > 0) {
            this.frontsContainer.y = rect.y + locationData.front_pos_y;
        } else {
            this.frontsContainer.y = rect.y + Math.round(rect.height * 0.5) + 30;
        }
    }
    this.frontsContainer.interactive = true;
    this.frontsContainer.buttonMode = true;
    this.frontsImageContainer = new canvas.px.Sprite(canvas.px.TextureEmpty);
    this.frontsContainer.scale.set(0.7, 0.7);
    this.frontsContainer.addChild(this.frontsImageContainer);
    this.mouseover = this.mouseOverHandler.bind(this);
    this.mouseout = this.mouseOutHandler.bind(this);
    this.frontsContainer.mouseover = this._frontsOverHandler.bind(this);
    this.frontsContainer.mouseout = this._frontsOutHandler.bind(this);
    this.interactive = true;
    this.skip_out_event = false;
    this.addChild(this.selectionContainer);
    this.addChild(this.frontsContainer);
    this.frontsContainer.x += this.sen.x;
    this.frontsContainer.y += this.sen.y;
    this.selectionContainer.x += this.sen.x;
    this.selectionContainer.y += this.sen.y;
};
canvas.app.world.view.WorldSensor.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.world.view.WorldSensor.prototype._frontsOverHandler = function () {
    this.baseLnk.label2.set_data("", null, [], "", this.loc_id, false);
    this.force_over();
    this.frameDelta_scale(0.3 / 3);
};
canvas.app.world.view.WorldSensor.prototype._frontsOutHandler = function () {
    this.baseLnk.label2.deactivate();
    this.force_out();
    this.frameDelta_scale(-0.3 / 3);
};
canvas.app.world.view.WorldSensor.prototype.frameDelta_scale = function (val) {
    this.v_delta = val;
    canvas.EventManager.addEventListener(canvas.app.world.Event.ENTER_FRAME, null, this.frameHandler_scale, this);
};
canvas.app.world.view.WorldSensor.prototype.frameHandler_scale = function () {
    this.v_scale += this.v_delta;
    this.frontsContainer.scale.set(this.v_scale, this.v_scale);
    if ((this.v_delta < 0 && this.v_scale <= 0.7) || (this.v_delta > 0 && this.v_scale >= 1)) {
        if (this.v_delta < 0) {
            this.v_scale = 0.7;
            this.frontsContainer.scale.set(0.7, 0.7);
        } else {
            this.v_scale = 1;
            this.frontsContainer.scale.set(1, 1);
        }
        canvas.EventManager.removeEventListener(canvas.app.world.Event.ENTER_FRAME, null, this.frameHandler_scale, this);
    }
};
canvas.app.world.view.WorldSensor.prototype.setSelection = function (b, color, image) {
    if (b == undefined) b = false;
    if (color == undefined) color = 12592164;
    var ct;
    if (b) {
        this.sen.tint = color;
        this.sen.alpha = 1;
        if (image != null) {
            this.selectionContainer.texture = canvas.ResourceLoader.getImage("world", image);
        }
    } else {
        this.sen.tint = 16777215;
        this.sen.alpha = 0;
        this.selectionContainer.texture = canvas.px.TextureEmpty;
    }
    this.selected = b;
};
canvas.app.world.view.WorldSensor.prototype.setFrontsIcon = function (image) {
    if (image != undefined) {
        this.frontsImageContainer.texture = canvas.ResourceLoader.getImage("world", image);
        this.frontsImageContainer.position.set(-Math.round(this.frontsImageContainer.width * 0.5), -Math.round(this.frontsImageContainer.height * 0.5));
    }
};
canvas.app.world.view.WorldSensor.prototype.mouseOverHandler = function () {
    var conf = canvas.app.world.model;
    if ((conf.manorMode && this.isManorable) || this.selected) {
        this.sen.blendMode = canvas.px.BlendMode.ADD;
    } else {
        this.sen.blendMode = canvas.px.BlendMode.ADD;
        this.frameDelta(1 / 3);
    }
    if (this.loc_id != null) {
        this.baseLnk.label1.deactivate();
        this.baseLnk.label1.set_line1(canvas.Translator.getText(213) + ":", this.itemLnk.title);
        this.baseLnk.label1.set_line2(canvas.Translator.getText(214) + ":", this.itemLnk.locations[this.loc_id].title);
        this.baseLnk.label1.redraw_bg();
        if (parseInt(this.loc_id) == conf.treasureLocation) {
            this.baseLnk.label2.set_data("", null, null);
            this.baseLnk.label2.showTreasureInfo();
        }
        conf.overedLocation = this.loc_id;
    } else if (this.devisor == 3) {
        this.baseLnk.label1.deactivate();
        this.baseLnk.label1.set_line1(canvas.Translator.getText(213) + ":", this.itemLnk.title);
        this.baseLnk.label1.redraw_bg();
        this.baseLnk.label2.set_data(canvas.Translator.getText(215) + ":", null, this.itemLnk.locations_list, "", conf.findFrontLoc(this.itemLnk.id));
        if (parseInt(this.itemLnk.id) == conf.treasureArea) {
            this.baseLnk.label2.showTreasureInfo();
        }
        conf.overedLocation = this.itemLnk.id;
    }
};
canvas.app.world.view.WorldSensor.prototype.mouseOutHandler = function () {
    if (this.lockOver) return;
    var conf = canvas.app.world.model;
    if ((conf.manorMode && this.isManorable) || this.selected) {
        this.sen.blendMode = canvas.px.BlendMode.OVERLAY;
    } else {
        this.sen.blendMode = canvas.px.BlendMode.OVERLAY;
        this.frameDelta(-1 / 3);
    }
    if (this.skip_out_event) {
        this.skip_out_event = false;
        return;
    }
    if (this.loc_id != null) {
        this.baseLnk.label1.set_line1(canvas.Translator.getText(213) + ":", this.itemLnk.title);
        if (conf.overedLocation == this.loc_id) {
            this.baseLnk.label1.set_line2("");
            if (parseInt(this.loc_id) == conf.treasureLocation) {
                this.baseLnk.label2.hideTreasureInfo();
            }
        }
    } else if (this.devisor == 3) {
        if (conf.overedLocation == this.itemLnk.id) {
            this.baseLnk.label1.deactivate();
            this.baseLnk.label2.deactivate();
        }
    }
};
canvas.app.world.view.WorldSensor.prototype.frameDelta = function (val) {
    this.delta = val;
    canvas.EventManager.addEventListener(canvas.app.world.Event.ENTER_FRAME, null, this.frameHandler, this);
};
canvas.app.world.view.WorldSensor.prototype.frameHandler = function () {
    this.sen.alpha += this.delta;
    var minAlpha = 0;
    if ((this.delta < 0 && this.sen.alpha <= minAlpha) || (this.delta > 0 && this.sen.alpha >= 1)) {
        this.sen.alpha = this.delta < 0 ? minAlpha : 1;
        canvas.EventManager.removeEventListener(canvas.app.world.Event.ENTER_FRAME, null, this.frameHandler, this);
    }
};
canvas.app.world.view.WorldSensor.prototype.mouseClickHandler = function () {
    if (this.baseLnk.scroll_H.wasDragged || this.baseLnk.scroll_V.wasDragged) return;
    var conf = canvas.app.world.model;
    this.baseLnk.label2.deactivate();
    this.skip_out_event = true;
    this.baseLnk.area_enter(this.itemLnk);
};
canvas.app.world.view.WorldSensor.prototype.force_over = function () {
    this.mouseOverHandler();
    this.lockOver = true;
};
canvas.app.world.view.WorldSensor.prototype.force_out = function () {
    this.mouseOutHandler();
    this.lockOver = false;
};
canvas.app.world.view.ZoomView = function (base_lnk) {
    canvas.px.Container.call(this);
    this.baseLnk = base_lnk;
    this.bg = new canvas.px.Sprite(canvas.ResourceLoader.getImage("world", "png_zoom_bg"));
    this.addChild(this.bg);
    this.buttonsContainer = new canvas.px.Container();
    this.addChild(this.buttonsContainer);
    this.btn_zoom_out = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("world", "png_zoom_off_out"));
    this.btn_zoom_in = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("world", "png_zoom_off_in"));
    this.btn_map = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("world", "map"));
    this.btn_manor = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("world", "manor/manor"));
    this.btn_work = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("world", "work"));
    this.btn_refresh = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("world", "refresh"));
    this.addChild(this.btn_zoom_out);
    this.addChild(this.btn_zoom_in);
    this.buttonsContainer.addChild(this.btn_map);
    this.buttonsContainer.addChild(this.btn_manor);
    this.buttonsContainer.addChild(this.btn_work);
    this.buttonsContainer.addChild(this.btn_refresh);
    this.btn_zoom_out.position.set(17, 6);
    this.btn_zoom_in.position.set(91, 6);
    this.btn_map.position.set(145, 6);
    this.btn_manor.position.set(185, 6);
    this.btn_work.position.set(225, 0);
    this.btn_refresh.position.set(53, 6);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.btn_zoom_out, this.mouseClickZoomOut, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.btn_zoom_in, this.mouseClickZoomIn, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.btn_map, this.mapClickHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.btn_manor, this.manorClickHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.btn_work, this.workClickHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.btn_refresh, this.mouseClickRefreshHandler, this);
    canvas.EventManager.dispatchEvent(canvas.app.world.Event.HINT_ADD, null, { target: this.btn_map, params: new canvas.utils.HintParams(new canvas.app.view.MappingHint(canvas.Translator.getText(221))) });
    canvas.EventManager.dispatchEvent(canvas.app.world.Event.HINT_ADD, null, { target: this.btn_manor, params: new canvas.utils.HintParams(new canvas.app.view.MappingHint(canvas.Translator.getText(222))) });
    canvas.EventManager.dispatchEvent(canvas.app.world.Event.HINT_ADD, null, { target: this.btn_work, params: new canvas.utils.HintParams(new canvas.app.view.MappingHint(canvas.Translator.getText(151))) });
    this.setManorMode(false);
    this.btn_manor.visible = false;
    this.btn_work.visible = false;
};
canvas.app.world.view.ZoomView.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.world.view.ZoomView.prototype.setManorMode = function (b) {
    var conf = canvas.app.world.model;
    conf.manorMode = b;
    if (b) {
        this.btn_manor.enabled = false;
        this.btn_map.enabled = true;
    } else {
        this.btn_manor.enabled = true;
        this.btn_map.enabled = false;
    }
    this.baseLnk.updateManorMode();
};
canvas.app.world.view.ZoomView.prototype.mouseClickZoomOut = function () {
    this.baseLnk.area_exit();
};
canvas.app.world.view.ZoomView.prototype.mouseClickZoomIn = function () {
    var conf = canvas.app.world.model;
    var item = conf.AREAS[conf.focusedAreaId];
    if (item != null) {
        this.baseLnk.area_enter(item);
    }
};
canvas.app.world.view.ZoomView.prototype.mapClickHandler = function () {
    this.setManorMode(false);
};
canvas.app.world.view.ZoomView.prototype.manorClickHandler = function () {
    this.setManorMode(true);
};
canvas.app.world.view.ZoomView.prototype.workClickHandler = function () {
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.OPEN_LABOUR);
};
canvas.app.world.view.ZoomView.prototype.mouseClickRefreshHandler = function () {
    this.baseLnk.refresh_my_flag();
};
canvas.app.world.view.ZoomView.prototype.zoomMode = function (mode) {
    if (mode == 1) {
        this.mouseClickZoomOut();
    } else {
        this.mouseClickZoomIn();
    }
};
canvas.app.world.view.ZoomView.prototype.set_mode = function (num) {
    var conf = canvas.app.world.model;
    if (conf.isModule) {
        conf.ZoomMode(num);
    }
    if (num == 1) {
        this.btn_zoom_out.alpha = 1;
        this.btn_zoom_out.interactiveChildren = false;
        this.btn_zoom_in.alpha = 0;
        this.btn_zoom_in.interactiveChildren = true;
        this.buttonsContainer.visible = false;
        conf.lastManorMode = conf.manorMode;
        this.setManorMode(false);
    } else {
        this.btn_zoom_out.alpha = 0;
        this.btn_zoom_out.interactiveChildren = true;
        this.btn_zoom_in.alpha = 1;
        this.btn_zoom_in.interactiveChildren = false;
        this.buttonsContainer.visible = true;
        this.setManorMode(conf.lastManorMode);
    }
};
canvas.app.hunt.Const = {
    CAPTCHA_WIDTH: 3,
    CAPTCHA_HEIGHT: 2,
    CAPTCHA_CELL_SIZE: 128,
    TREASURE_BEACON_STATUS_NONE: 0,
    TREASURE_BEACON_STATUS_RED: 1,
    TREASURE_BEACON_STATUS_ORANGE: 2,
    TREASURE_BEACON_STATUS_YELLOW: 3,
    TREASURE_BEACON_STATUS_GREEN: 4,
};
canvas.app.hunt.Event = {
    ENTER_FRAME: "Hunt.ENTER_FRAME",
    HINT_ADD: "Hunt.HINT_ADD",
    HINT_REMOVE: "Hunt.HINT_REMOVE",
    TREASURE_DIG: "Hunt.TREASURE_DIG",
    TREASURE_COLLECT: "Hunt.TREASURE_COLLECT",
    COLOR_CHANGE: "Hunt.COLOR_CHANGE",
    COMPLETE_OBJECT: "Hunt.COMPLETE_OBJECT",
};
canvas.app.hunt.Main = function (model, hintManager, windowsManager) {
    canvas.px.Container.call(this);
    this.model = model;
    this.hintManager = hintManager;
    this.windowsManager = windowsManager;
    if (this.model.mapFile) {
        this.model.mapData.parseData(this.model.mapData.TYPE_BOT, canvas.ResourceLoader.get("map_bot").data);
        this.model.mapData.parseData(this.model.mapData.TYPE_PLANT, canvas.ResourceLoader.get("map_plant").data);
        this.model.mapData.parseData(this.model.mapData.TYPE_STONE, canvas.ResourceLoader.get("map_stone").data);
        this.model.mapData.parseData(this.model.mapData.TYPE_FISH, canvas.ResourceLoader.get("map_fish").data);
    }
    canvas.app.location.Event.HINT_ADD = canvas.app.hunt.Event.HINT_ADD;
    canvas.app.location.Event.HINT_REMOVE = canvas.app.hunt.Event.HINT_REMOVE;
    canvas.app.location.Event.ENTER_FRAME = canvas.app.hunt.Event.ENTER_FRAME;
    canvas.EventManager.addEventListener(canvas.app.hunt.Event.HINT_ADD, null, this.handlerHintAdd, this);
    canvas.EventManager.addEventListener(canvas.app.hunt.Event.HINT_REMOVE, null, this.handlerHintRemove, this);
    canvas.EventManager.addEventListener(canvas.Event.STAGE_KEY_DOWN, null, this.handlerKey, this);
    canvas.EventManager.addEventListener(canvas.Event.STAGE_KEY_UP, null, this.handlerKeyUp, this);
    canvas.EventManager.addEventListener(canvas.px.WindowEvent.EVENT_OPEN, null, this.handlerOpenWindow, this);
    this.windowsContainer = new canvas.px.Container();
    this.hintContainer = new canvas.px.Container();
    this.hintContainer.interactive = true;
    this.view = new canvas.app.hunt.View(this);
    this.addChild(this.view);
    this.addChild(this.hintContainer);
    this.addChild(this.windowsContainer);
    canvas.EventManager.addEventListener(canvas.app.hunt.Event.TREASURE_DIG, null, this.treasureDigHandler, this);
    canvas.EventManager.addEventListener(canvas.app.hunt.Event.TREASURE_COLLECT, null, this.treasureColectHandler, this);
    this.timer = setInterval(this.timerHandler.bind(this), 1e3);
    this.treasureRequest = new canvas.utils.URLRequest();
    canvas.EventManager.addEventListener(canvas.utils.URLRequestEvent.EVENT_COMPLETE, this.treasureRequest, this.treasureCompleteHandler, this);
};
canvas.app.hunt.Main.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.hunt.Main.prototype.handlerKey = function (event) {
    if (document.activeElement && document.activeElement.constructor.name == "HTMLInputElement") return;
    var keyCode = event.params.globalKeyCode;
    var altKey = event.params.altKey;
    var ctrlKey = event.params.ctrlKey;
    var shiftKey = event.params.shiftKey;
    switch (keyCode) {
        case canvas.Const.KEYS.ESC:
            canvas.utils.WindowsManager.instance.closeWindow(this.view.popup);
            break;
        case canvas.Const.KEYS.L:
            if (shiftKey) {
                canvas.Log.show(canvas.Log.HUNT);
            }
            break;
    }
    this.view.keyDown(keyCode);
};
canvas.app.hunt.Main.prototype.handlerKeyUp = function (event) {
    if (document.activeElement && document.activeElement.constructor.name == "HTMLInputElement") return;
    event.params.preventDefault();
    var keyCode = event.params.keyCode;
    var altKey = event.params.altKey;
    var ctrlKey = event.params.ctrlKey;
    var shiftKey = event.params.shiftKey;
    this.view.keyUp(keyCode);
};
canvas.app.hunt.Main.prototype.handlerOpenWindow = function () {
    this.hintManager.hide();
};
canvas.app.hunt.Main.prototype.resize = function (w, h) {
    var ww = w;
    var hh = h;
    this.hintManager.init(this.hintContainer, ww, hh);
    this.model.width = ww;
    this.model.height = hh;
    this.view.resize(ww, hh);
};
canvas.app.hunt.Main.prototype.handlerHintAdd = function (e) {
    this.hintManager.add(e.params.target, e.params.params);
};
canvas.app.hunt.Main.prototype.handlerHintRemove = function (e) {
    this.hintManager.remove(e.params.target);
};
canvas.app.hunt.Main.prototype.swfObject = function (data) {
    var str;
    var conf = canvas.app.hunt.model;
    if (data) {
        for (str in data) {
            switch (str) {
                case "fronts":
                    break;
            }
        }
    }
};
canvas.app.hunt.Main.prototype.timerHandler = function () {
    this.view.updateTreasureControl();
};
canvas.app.hunt.Main.prototype.treasureDigHandler = function (event) {
    this.model.treasureLastPoint.x = event.params.x;
    this.model.treasureLastPoint.y = event.params.y;
    this.treasureRequest.name = canvas.app.hunt.Event.TREASURE_DIG;
    this.treasureRequest.load("/entry_point.php?object=farm&action=treasure_dig&json_mode_on=1&x=" + event.params.x + "&y=" + event.params.y);
};
canvas.app.hunt.Main.prototype.treasureColectHandler = function () {
    this.treasureRequest.name = canvas.app.hunt.Event.TREASURE_COLLECT;
    this.treasureRequest.load("/entry_point.php?object=farm&action=treasure_dig&json_mode_on=1&x=" + this.model.treasureLastPoint.x + "&y=" + this.model.treasureLastPoint.y + "&collect=1");
};
canvas.app.hunt.Main.prototype.treasureCompleteHandler = function (event) {
    var status;
    var response = JSON.parse(this.treasureRequest.request.responseText)["farm|treasure_dig"];
    if (response.error != undefined && response.error != "") {
        this.view.popup.set_header(canvas.Translator.getText(4));
        this.view.popup.show_message(response.error, 16711680);
    } else {
        if (this.treasureRequest.name == canvas.app.hunt.Event.TREASURE_COLLECT) {
            this.view.fld_current.showTreasure(false);
            return;
        }
        status = parseInt(response.treasure_status);
        this.model.treasureStatus = status;
        switch (status) {
            case 4:
                this.model.treasureLastPoint.x = parseInt(response.treasure_x);
                this.model.treasureLastPoint.y = parseInt(response.treasure_y);
                this.view.fld_current.showTreasure();
                break;
            default:
                this.view.fld_current.updateTreasureLocator(status);
        }
    }
};
canvas.app.hunt.Model = function (par) {
    this.par = par;
    this._filterValue = 1;
    Object.defineProperty(this, "filterValue", {
        get: function () {
            return this._filterValue;
        },
        set: function (value) {
            if (this._filterValue === value) return;
            this._filterValue = value;
            this.localStorage.set("filterValue", value.toString());
            this.objects_updater.updateFarm();
        },
    });
    this._popupPos = null;
    Object.defineProperty(this, "popupPos", {
        get: function () {
            return this._popupPos;
        },
        set: function (value) {
            this._popupPos = value;
            this.localStorage.set("popupPos", value.x + "," + value.y);
        },
    });
    this.Objects = {};
    this.reqURL = par.reqURL;
    this.reqConfURL = par.reqConfURL;
    this.reqInterval = parseInt(par.reqInterval);
    this.reqConfInterval = parseInt(par.reqConfInterval);
    this.localStorage = new canvas.utils.LocalStorage(canvas.Log.HUNT);
    this.colorManager = new canvas.app.hunt.engine.ColorManager();
    this.mapData = new canvas.app.hunt.engine.MapData();
    this._filterValue = this.localStorage.get("filterValue") ? parseInt(this.localStorage.get("filterValue")) : 31;
    var a,
        str = this.localStorage.get("popupPos");
    if (str) {
        a = str.split(",");
        this._popupPos = new canvas.px.Point(parseFloat(a[0]), parseFloat(a[1]));
    } else {
        this._popupPos = new canvas.px.Point(0.5, 0.5);
    }
    this.FILTER_VALUES = [1, 2, 4, 8, 16];
    this.IsBold = true;
    this.OBJ_EVENT = { tasks: {} };
    this.OBJECTS_DATA = {};
    this.OBJECTS_PICS = {};
    this.NUM_BIG_FIGHT = 0;
    this.max_width = 735;
    this.max_height = 280;
    this.min_width = 735;
    this.min_height = 280;
    this.firstTimeData = null;
    this.MAX_ANIMATION_SIZE = "41775e02da98ddb63c980dee";
    this.selectObjectType = "";
    this.captchaFinishTime = 0;
    this.treasureFinishTime = 0;
    this.treasureLastPoint = new canvas.px.Point();
    this.treasureStatus = 0;
    this.treasureTextTips = false;
    this.needConfirm = false;
    this.startRandom = par["start_random"] == "1";
    if (par.treasureTextTips != undefined) this.treasureTextTips = par.treasureTextTips == "1";
    if (this.reqInterval < 2) this.reqInterval = 2;
    if (this.reqConfInterval < 2) this.reqConfInterval = 2;
    this.sizeX = parseInt(par.sizeX);
    this.sizeY = parseInt(par.sizeY);
    if (this.sizeX == 0) this.sizeX = 1500;
    if (this.sizeY == 0) this.sizeY = 1500;
    this.sizeX = this.clean_val(this.sizeX, this.min_width);
    this.sizeY = this.clean_val(this.sizeY, this.min_height);
    this.BotsPath = par.BotsPath;
    this.PicPath = par.PicPath;
    this.FarmPicPath = par.FarmPicPath;
    this.FarmSwfPath = par.FarmSwfPath;
    this.farming = par.farming;
    if (this.farming == null) this.farming = "0";
    this.mapFile = par.mapFile;
    this.mapName = canvas.Functions.extractSwfName(this.mapFile);
    this.IsBold = par.nobold != null ? (par.nobold == 1 ? false : true) : true;
    this.PksPath = par.PksPath;
    this.needConfirm = parseInt(par.need_confirm) != 0;
    this.half_width = parseInt(this.sizeX / 2);
    this.half_height = parseInt(this.sizeY / 2);
    this.max_width = this.sizeX + 27;
    this.max_height = this.sizeY;
    this.m_time = 0;
    this.m_awardUrl = par.bannerurl;
    this.award_msg = par.bannermsg;
    this.brilliant_msg = par.br_msg;
    this.brilliant_link = par.br_link;
    var d1 = 36;
    this.sector_borders = [{ x1: 0, y1: 0, x2: this.sizeX, y2: this.sizeY, pers_x: this.sizeX - d1, pers_y: this.sizeY - d1, pers_rot: 0, vert_pc: 1 }];
    this.CfgFight = par.fight_conf;
    this.colorManager.init(
        par.bot_color_min ? parseInt(par.bot_color_min) : 0,
        par.bot_color_max ? parseInt(par.bot_color_max) : 0,
        par.bot_transparensy_min ? parseInt(par.bot_transparensy_min) * 0.01 : 1,
        par.bot_transparensy_max ? parseInt(par.bot_transparensy_max) * 0.01 : 1,
        par.bot_period ? parseInt(par.bot_period) : 0
    );
    if (this.CfgFight != null) {
        this.unpackFightConf(this.CfgFight);
    }
};
canvas.app.hunt.Model.prototype.init = function (main) {
    this.objects_updater = new canvas.app.hunt.engine.ObjectsUpdater(main.view, this.Objects);
    this.farm = new canvas.app.hunt.engine.FarmingUpdater(main.view);
};
canvas.app.hunt.Model.prototype.prep_language = function () {
    this.farm_data = {
        0: { header: canvas.Translator.getText(441), success: canvas.Translator.getText(442), faled: canvas.Translator.getText(443) },
        1: { header: canvas.Translator.getText(234), success: canvas.Translator.getText(402), faled: canvas.Translator.getText(403) },
        2: { header: canvas.Translator.getText(234), success: canvas.Translator.getText(402), faled: canvas.Translator.getText(403) },
        4: { header: canvas.Translator.getText(234), success: canvas.Translator.getText(402), faled: canvas.Translator.getText(403) },
    };
    this.agrlevelAr = [canvas.Translator.getText(405), canvas.Translator.getText(406), canvas.Translator.getText(407), canvas.Translator.getText(408), canvas.Translator.getText(409)];
    this.farm_conf = [
        [13421772, canvas.Translator.getText(410)],
        [47872, canvas.Translator.getText(411)],
        [187, canvas.Translator.getText(412)],
        [10027263, canvas.Translator.getText(413)],
        [12255232, canvas.Translator.getText(414)],
    ];
    this.STRINGS_ARR = {};
    this.S_GREAT_FIGHT = "S_GREAT_FIGHT";
    this.S_TO_YOU = "S_TO_YOU";
    this.S_TO_ALL = "S_TO_ALL";
    this.STRINGS_ARR[this.S_GREAT_FIGHT] = canvas.Translator.getText(3e3);
    this.STRINGS_ARR[this.S_TO_YOU] = canvas.Translator.getText(429);
    this.STRINGS_ARR[this.S_TO_ALL] = canvas.Translator.getText(430);
};
canvas.app.hunt.Model.prototype.clean_val = function (val, min_val) {
    if (val < min_val) {
        val = min_val;
    } else if (val % 2 != 0) {
        val += 1;
    }
    return val;
};
canvas.app.hunt.Model.prototype.getBotnameColor = function (agrlevel) {
    var bool = agrlevel < 50;
    var rr = bool ? Math.round(255 * (agrlevel / 50)) : 255;
    var gg = bool ? 255 : Math.round(255 * ((100 - agrlevel) / 50));
    return (rr << 16) ^ (gg << 8);
};
canvas.app.hunt.Model.prototype.getAgrlevelText = function (agrlevel) {
    if (agrlevel >= 100) {
        agrlevel = 99;
    }
    if (this.agrlevelAr == null) {
        return "none";
    }
    return this.agrlevelAr[Math.floor(agrlevel / 20)];
};
canvas.app.hunt.Model.prototype.unpackFightConf = function (xml_data) {
    var doc = new DOMParser().parseFromString(xml_data, "text/xml");
    var a1;
    var a2;
    var i1;
    var i2;
    a1 = doc.childNodes;
    this.NUM_BIG_FIGHT = 0;
    for (i1 = 0; i1 < a1.length; i1++) {
        if (a1[i1].nodeName == "fight") {
            if (a1[i1].attributes.in_process != null) this.NUM_BIG_FIGHT = a1[i1].attributes.in_process.value;
        }
    }
};
canvas.app.hunt.View = function (main) {
    canvas.px.Container.call(this);
    var conf = canvas.app.hunt.model;
    this.main = main;
    this.currentKeys = [];
    this.container = new canvas.px.Container();
    this.frontContainer = new canvas.px.Container();
    this.addChild(this.container);
    this.flds_cont = new canvas.px.Container();
    this.flds_msk = new canvas.px.Mask(100, 100);
    this.prepare_field();
    this.prepare_scroll();
    this.border = new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "border"), 100, 4, 100, 23);
    this.border.y = 60;
    this.addChild(this.border);
    this.bor_T = new canvas.app.hunt.view.FrameBorT(this);
    this.addChild(this.bor_T);
    this.corner_TL = new canvas.app.hunt.view.FrameCornerTL(this);
    this.addChild(this.corner_TL);
    this.corner_TR = new canvas.app.hunt.view.FrameCornerTR(this);
    this.addChild(this.corner_TR);
    this.popupsContainer = new canvas.app.location.view.popups.Popups(canvas.app.hunt.Event);
    this.popupsContainer.position.set(5, 63);
    if (conf.award_msg) {
        this.awardMsg = new canvas.app.hunt.view.elements.AwardMsg(conf.award_msg, conf.m_awardUrl);
        this.frontContainer.addChild(this.awardMsg);
    }
    if (conf.brilliant_msg != null) {
        this.brilliantMsg = new canvas.app.hunt.view.elements.BrilliantMsg(conf.brilliant_msg, conf.brilliant_link);
        this.frontContainer.addChild(this.brilliantMsg);
    }
    canvas.EventManager.addEventListener(canvas.ui.ScrollEvent.EVENT_SCROLL, this.scr_horz, this.scrollHandlerH, this);
    canvas.EventManager.addEventListener(canvas.ui.ScrollEvent.EVENT_SCROLL, this.scr_vert, this.scrollHandlerV, this);
    this.addChild(this.frontContainer);
    this.checkObjects(false);
    this.popup = new canvas.app.hunt.view.FarmWindow(this);
    canvas.EventManager.addEventListener(canvas.px.WindowEvent.EVENT_DRAG_FINISH, this.popup, this.popupDragFinishHandler, this);
    this.buildEvent();
    this.buildFight();
    this.techBtn = new canvas.app.location.view.popups.TechBtn(conf.par, canvas.app.hunt.Event.ENTER_FRAME);
    this.infoBtn = new canvas.app.location.view.popups.InfoBtn(conf.par);
    this.addChild(this.techBtn);
    this.addChild(this.infoBtn);
    this.infoBtn.y = 90;
    this.frontContainer.addChild(this.popupsContainer);
    this.winCaptcha = new canvas.app.hunt.view.WinCaptcha(this);
    this.filterPanel = new canvas.app.hunt.view.FilterPanel();
    this.filterPanel.y = 32;
    this.addChild(this.filterPanel);
    this.listBottomLeft = new canvas.px.Container();
    this.listBottomLeft.x = 10;
    this.addChild(this.listBottomLeft);
    this.treasureControl = new canvas.app.hunt.view.TreasureControl();
    this.updateTreasureControl();
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_DOWN, this.treasureControl, this.treasureDownHandler, this);
    if (conf.par.time_bonus_online != undefined) {
        this.popupsContainer.init(canvas.app.location.Const.POPUP_ZERO_LEVEL, conf.par);
    }
    this.firstResize = true;
};
canvas.app.hunt.View.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.hunt.View.prototype.init = function () {
    var conf = canvas.app.hunt.model;
    if (conf.farming == "1") {
        this.field_lock();
        this.corner_TL.deactivate();
        conf.farm.main_iteration();
    }
};
canvas.app.hunt.View.prototype.resize = function (w, h) {
    var conf = canvas.app.hunt.model;
    if (w == undefined) w = conf.width;
    if (h == undefined) h = conf.height;
    var ww = w;
    var hh = h;
    this.ww = ww;
    this.hh = hh;
    if (ww < conf.min_width) {
        this.x = 0;
        ww = conf.min_width;
    } else if (ww > conf.max_width) {
        ww = conf.max_width;
    }
    this.x = Math.round((w - ww) * 0.5);
    if (hh < conf.min_height) {
        this.y = 0;
        hh = conf.min_height;
    } else if (hh > conf.max_height) {
        this.y = Math.round(hh / 2 - conf.max_height / 2);
        hh = conf.max_height;
    }
    this.wwReal = ww;
    this.hhReal = hh;
    this.bor_T.x = Math.round(ww / 2 - 268 / 2) - (ww > 1050 ? 38 : 38 + Math.round((1050 - ww) * 0.5));
    if (this.eventBtn) {
        this.eventBtn.position.set(ww - this.eventBtn.width - 16, 61);
    }
    if (this.eventPanel) {
        this.eventPanel.position.set(ww - 12 - this.eventPanel.width, 63);
    }
    this.corner_TR.x = this.bor_T.x + 260;
    this.corner_TL.x = this.bor_T.x - 210;
    this.scr_vert.x = ww - 21;
    this.scr_horz.y = hh - 35;
    this.fld_visible_HE = hh - 83 - (ww < conf.max_width ? 16 : 0);
    this.fld_invisible_HE = conf.sizeY - this.fld_visible_HE;
    this.fld_visible_WI = ww - 27;
    this.fld_invisible_WI = conf.sizeX - this.fld_visible_WI;
    this.scr_vert.set_visible_height(this.fld_visible_HE);
    this.scr_horz.set_visible_width(this.fld_visible_WI);
    this.scrollNull.visible = this.scr_horz.visible = ww < conf.max_width;
    this.flds_msk.setSize(ww - 27, hh - 83);
    this.border.width = ww;
    this.border.height = hh - 60;
    if (this.fld_current != null) {
        this.fld_current.check_position();
    }
    if (this.awardMsg) {
        this.awardMsg.position.set(Math.round((ww - this.awardMsg.width) * 0.5) - 20, 62);
    }
    if (this.brilliantMsg) {
        this.brilliantMsg.position.set(Math.round((ww - this.brilliantMsg._width) * 0.5) - 24, 62);
    }
    this.scrollNull.position.set(this.scr_horz._width + 5, this.scr_vert._height + 63);
    this.bor_T.update(this.fld_visible_WI, this.fld_visible_HE);
    this.bor_T.updatePos(this.flds_cont.x, this.flds_cont.y);
    this.techBtn.position.set(ww - 30, hh - 45);
    this.infoBtn.position.set(ww - 12, 100 + (this.eventPanel && this.eventPanel.parent ? this.eventPanel.height : 0));
    this.filterPanel.x = ww - this.filterPanel.width - 30;
    this.updateLists();
    if (this.firstResize) {
        this.firstResize = false;
        this.scr_vert.current = canvas.Functions.random(this.scr_vert.max);
        this.scr_horz.current = canvas.Functions.random(this.scr_horz.max);
    }
    this.scrollHandlerH();
    this.scrollHandlerV();
    this.main.windowsManager.init(this.main.windowsContainer, ww, hh, this.flds_cont);
    this.main.windowsContainer.position.set(this.x, this.y);
};
canvas.app.hunt.View.prototype.popupDragFinishHandler = function () {
    var conf = canvas.app.hunt.model;
    var xPos = this.popup.x + this.popup.width * 0.5;
    var yPos = this.popup.y + this.popup.height * 0.5;
    conf.popupPos = new canvas.px.Point(xPos / this.wwReal, yPos / this.hhReal);
};
canvas.app.hunt.View.prototype.updateTreasureControl = function () {
    var conf = canvas.app.hunt.model;
    if (conf.treasureFinishTime * 1e3 > Date.now() && conf.treasureStatus != 4) {
        this.listBottomLeft.addChild(this.treasureControl);
        this.treasureControl.update();
        this.updateLists();
    } else {
        if (this.listBottomLeft.contains(this.treasureControl)) this.listBottomLeft.removeChild(this.treasureControl);
        this.fld_current.updateTreasureLocator(0);
    }
};
canvas.app.hunt.View.prototype.prepare_field = function () {
    var conf = canvas.app.hunt.model;
    this.full_map = new canvas.px.Container();
    var data = canvas.ResourceLoader.get("map_mci").data;
    var children = data[canvas.px.MovieClipProps.children];
    var len = children.length;
    var sprite;
    var t;
    for (var i = 0; i < len; i++) {
        t = canvas.ResourceLoader.getImage("map", children[i].name);
        t.baseTexture.scaleMode = canvas.px.ScaleMode.NEAREST;
        sprite = new canvas.px.Sprite(t);
        if (children[i][canvas.px.MovieClipProps.matrix]) {
            sprite.transform.localTransform = new canvas.px.Matrix(
                children[i][canvas.px.MovieClipProps.matrix].a,
                children[i][canvas.px.MovieClipProps.matrix].b,
                children[i][canvas.px.MovieClipProps.matrix].c,
                children[i][canvas.px.MovieClipProps.matrix].d,
                children[i][canvas.px.MovieClipProps.matrix].tx,
                children[i][canvas.px.MovieClipProps.matrix].ty
            );
        }
        sprite.alpha = children[i][canvas.px.MovieClipProps.alpha] == undefined ? 1 : children[i][canvas.px.MovieClipProps.alpha];
        this.full_map.addChild(sprite);
    }
    this.fld_north = new canvas.app.hunt.view.Field(this, this.full_map, 0);
    this.flds_cont.addChild(this.fld_north);
    this.fld_locker = new canvas.px.Mask(conf.half_width, conf.half_height, 0, 0.3);
    this.flds_cont.position.set(5, 63);
    this.container.addChild(this.flds_cont);
    this.flds_msk.position.set(5, 63);
    this.addChild(this.flds_msk);
    this.flds_cont.mask = this.flds_msk;
    this.fld_current = this.fld_north;
    this.current_object = null;
    this.current_sector = 0;
};
canvas.app.hunt.View.prototype.prepare_scroll = function () {
    var conf = canvas.app.hunt.model;
    this.scr_vert = new canvas.app.hunt.view.ScrollV(this, this.container);
    this.addChild(this.scr_vert);
    this.scr_vert.y = 63;
    this.scr_vert.set_full_height(conf.sizeY);
    this.scr_horz = new canvas.app.hunt.view.ScrollH(this.flds_cont);
    this.scr_horz.x = 5;
    this.scr_horz.set_full_width(conf.sizeX);
    this.addChild(this.scr_horz);
    this.scrollNull = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "png_scroll_null"));
    this.addChild(this.scrollNull);
};
canvas.app.hunt.View.prototype.scrollHandlerH = function () {
    if (!this.scr_horz.isDisabled()) {
        this.flds_cont.x = 5 - this.scr_horz.current;
        this.bor_T.updatePos(this.flds_cont.x, this.flds_cont.y);
    } else {
        this.flds_cont.x = 5;
    }
    this.updateVisibleObjects();
};
canvas.app.hunt.View.prototype.scrollHandlerV = function () {
    if (!this.scr_vert.isDisabled()) {
        this.flds_cont.y = 63 - this.scr_vert.current;
        this.bor_T.updatePos(this.flds_cont.x, this.flds_cont.y);
    } else {
        this.flds_cont.y = 63;
    }
    this.updateVisibleObjects();
};
canvas.app.hunt.View.prototype.updateVisibleObjects = function () {
    this.fld_current.updateVisibleObjects(new canvas.px.Rectangle(-this.flds_cont.x - 40, -this.flds_cont.y, this.fld_visible_WI + 100, this.fld_visible_HE + 140));
};
canvas.app.hunt.View.prototype.updateLists = function () {
    this.listBottomLeft.y = this.hh - Math.round(this.listBottomLeft.height) - 40;
};
canvas.app.hunt.View.prototype.buildEvent = function () {
    canvas.app.location.View.prototype.buildEvent.call(this);
};
canvas.app.hunt.View.prototype.buildFight = function () {
    canvas.app.location.View.prototype.buildFight.call(this);
    if (this.fightBtn) {
        this.fightBtn.position.set(-3, 53);
    }
};
canvas.app.hunt.View.prototype.refreshEventHandler = function () {
    canvas.app.location.View.prototype.refreshEventHandler.call(this);
};
canvas.app.hunt.View.prototype.field_lock = function () {
    this.flds_cont.interactiveChildren = false;
};
canvas.app.hunt.View.prototype.field_unlock = function () {
    this.flds_cont.interactiveChildren = true;
};
canvas.app.hunt.View.prototype.showCaptcha = function (timeLeft) {
    if (timeLeft < 1) timeLeft = 60;
    var conf = canvas.app.hunt.model;
    conf.captchaFinishTime = Date.now() + timeLeft * 1e3;
    canvas.utils.WindowsManager.instance.openWindow(this.winCaptcha, false, false, true, true);
};
canvas.app.hunt.View.prototype.checkObjects = function (check_old, objectType) {
    if (objectType == undefined) objectType = "";
    var conf = canvas.app.hunt.model;
    var curObj;
    var nx;
    var ny;
    for (var i in conf.Objects) {
        curObj = conf.Objects[i];
        if (objectType && curObj.type != objectType) continue;
        if (check_old) {
            if (curObj.old_flag) {
                if (curObj.mc != null) {
                    curObj.mc.remove();
                }
                continue;
            }
        }
        var curBorders = conf.sector_borders[0];
        if (curObj.x >= curBorders.x1 && curObj.x <= curBorders.x2 && curObj.y >= curBorders.y1 && curObj.y <= curBorders.y2) {
            if (curObj.mc == null) {
                if (curObj.type == "bot") {
                    var new_bot = new canvas.app.hunt.view.FieldObject(this, this.fld_current, curObj);
                } else if (curObj.type == "farm") {
                    var new_farm = new canvas.app.hunt.view.FieldObject(this, this.fld_current, curObj);
                } else {
                }
            } else {
                if (curObj.new_pos) {
                    nx = parseInt(curObj.x);
                    ny = parseInt(curObj.y);
                    curObj.mc.moving(nx, ny);
                    delete curObj.new_pos;
                } else {
                }
                if (curObj.type == "farm") {
                    curObj.mc.update_mark_tf(curObj.farming);
                }
            }
        } else {
            if (curObj.mc != null) {
                curObj.mc.remove();
            } else {
                curObj.old_flag = true;
            }
        }
        if (check_old == true) {
            if (curObj.mc != null) {
                curObj.old_flag = true;
            }
        }
    }
    this.buildEvent();
    this.buildFight();
};
canvas.app.hunt.View.prototype.select_obj = function (curObj) {
    var conf = canvas.app.hunt.model;
    conf.selectObjectType = curObj.type;
    if (this.current_object != null) {
        if (this.current_object.mc != null) {
            this.current_object.mc.unFocus();
        }
    }
    this.current_object = curObj;
    this.current_object.mc.inFocus();
    this.corner_TR.update_obj_info(curObj);
    this.refresh_controls();
};
canvas.app.hunt.View.prototype.refresh_controls = function () {
    this.corner_TL.deactivate();
    if (this.current_object == null) {
        return;
    }
    if (this.current_object.type == "bot") {
        this.corner_TL.activate(3);
    } else if (this.current_object.type == "farm") {
        var prof = this.current_object.prof;
        if ((prof & 0) == 0) this.corner_TL.activate(0, this.current_object.action_title);
        if ((prof & 1) == 1) this.corner_TL.activate(1, this.current_object.action_title);
        if ((prof & 2) == 2) this.corner_TL.activate(2, this.current_object.action_title);
        if ((prof & 4) == 4) this.corner_TL.activate(4, this.current_object.action_title);
    } else {
    }
};
canvas.app.hunt.View.prototype.apply_control_btn = function (id, endType) {
    var conf = canvas.app.hunt.model;
    if (this.current_object == null) {
        return;
    }
    if (id == 3 && this.current_object.type == "bot") {
        this.field_lock();
        this.corner_TL.deactivate();
        if (conf.needConfirm) {
            this.sendHuntCheck(this.current_object.id, endType);
        } else {
            this.sendAttack({ rtype: "bot", rid: this.current_object.id, et: endType });
        }
    } else if (((id >= 0 && id <= 2) || id == 4) && this.current_object.type == "farm") {
        this.field_lock();
        this.corner_TL.deactivate();
        conf.farm.begin_farming(this.current_object.num, this.current_object.t, endType);
    } else {
    }
};
canvas.app.hunt.View.prototype.sendHuntCheck = function (botId, endType) {
    var req = new canvas.utils.URLRequest("/entry_point.php?object=fight&action=HuntCheck&bot_id=" + botId + "&json_mode_on=1");
    req.dat = { botId: botId, endType: endType };
    canvas.EventManager.addEventListener(canvas.utils.URLRequestEvent.EVENT_ERROR, req, this.huntCheckCompleteHandler, this);
    canvas.EventManager.addEventListener(canvas.utils.URLRequestEvent.EVENT_COMPLETE, req, this.huntCheckCompleteHandler, this);
    req.load();
};
canvas.app.hunt.View.prototype.huntCheckCompleteHandler = function (event) {
    canvas.EventManager.removeEventListener(canvas.utils.URLRequestEvent.EVENT_ERROR, event.target, this.huntCheckCompleteHandler, this);
    canvas.EventManager.removeEventListener(canvas.utils.URLRequestEvent.EVENT_COMPLETE, event.target, this.huntCheckCompleteHandler, this);
    var response = JSON.parse(event.target.request.responseText)["fight|HuntCheck"];
    if (response.confirm) {
        this.field_unlock();
        showBotConfirmDialog(String(response.confirm));
    } else {
        this.sendAttack({ rtype: "bot", rid: event.target.dat.botId, et: event.target.dat.endType });
    }
};
canvas.app.hunt.View.prototype.sendAttack = function (actionInfo) {
    canvas.utils.ABController.sendRequest(canvas.utils.ABCAbout.REQUEST_URL_DWAR, actionInfo);
    this.field_unlock();
    huntAttack(String(this.current_object.id));
};
canvas.app.hunt.View.prototype.unselect_obj = function () {
    if (this.current_object != null) {
        if (this.current_object.mc != null) {
            this.current_object.mc.unFocus();
        }
    }
    this.current_object = null;
    this.refresh_controls();
};
canvas.app.hunt.View.prototype.keyDown = function (key) {
    switch (key) {
        case canvas.Const.KEYS.UP_ARROW:
            if (this.currentKeys.indexOf("up") < 0) this.currentKeys.push("up");
            break;
        case canvas.Const.KEYS.RIGHT_ARROW:
            if (this.currentKeys.indexOf("right") < 0) this.currentKeys.push("right");
            break;
        case canvas.Const.KEYS.LEFT_ARROW:
            if (this.currentKeys.indexOf("left") < 0) this.currentKeys.push("left");
            break;
        case canvas.Const.KEYS.DOWN_ARROW:
            if (this.currentKeys.indexOf("down") < 0) this.currentKeys.push("down");
            break;
    }
    this.testFrameListener();
};
canvas.app.hunt.View.prototype.keyUp = function (key) {
    var index;
    switch (key) {
        case canvas.Const.KEYS.UP_ARROW:
            index = this.currentKeys.indexOf("up");
            if (index >= 0) this.currentKeys.splice(index, 1);
            break;
        case canvas.Const.KEYS.RIGHT_ARROW:
            index = this.currentKeys.indexOf("right");
            if (index >= 0) this.currentKeys.splice(index, 1);
            break;
        case canvas.Const.KEYS.LEFT_ARROW:
            index = this.currentKeys.indexOf("left");
            if (index >= 0) this.currentKeys.splice(index, 1);
            break;
        case canvas.Const.KEYS.DOWN_ARROW:
            index = this.currentKeys.indexOf("down");
            if (index >= 0) this.currentKeys.splice(index, 1);
            break;
    }
    this.testFrameListener();
};
canvas.app.hunt.View.prototype.testFrameListener = function () {
    if (this.currentKeys.length > 0) {
        canvas.EventManager.addEventListener(canvas.app.hunt.Event.ENTER_FRAME, null, this.frameHandler, this);
    } else {
        canvas.EventManager.removeEventListener(canvas.app.hunt.Event.ENTER_FRAME, null, this.frameHandler, this);
    }
};
canvas.app.hunt.View.prototype.frameHandler = function () {
    var str;
    var len = this.currentKeys.length;
    var h = false;
    var v = false;
    for (var i = 0; i < len; i++) {
        switch (this.currentKeys[i]) {
            case "up":
                this.scr_vert.current -= 20;
                v = true;
                break;
            case "down":
                this.scr_vert.current += 20;
                v = true;
                break;
            case "left":
                this.scr_horz.current -= 20;
                h = true;
                break;
            case "right":
                this.scr_horz.current += 20;
                h = true;
                break;
        }
    }
    if (h) this.scrollHandlerH();
    if (v) this.scrollHandlerV();
};
canvas.app.hunt.View.prototype.treasureDownHandler = function (event) {
    this.fld_current.startTreasureSearch();
};
canvas.app.hunt.engine.ColorManager = function () {
    this.COLOR_MAX = 255;
    this.ALPHA_MAX = 1;
    this.COLOR_DIFF = 1;
    this.ALPHA_DIFF = 0.01;
    this.colorSign = 1;
    this.alphaSign = 1;
    this.colorMin = 0;
    this.colorMax = 0;
    this.alphaMin = 0;
    this.alphaMax = 0;
    this.period = 1e3;
    this._color = 0;
    Object.defineProperty(this, "color", {
        get: function () {
            return this._color;
        },
        set: function (value) {
            this._color = value > this.colorMax ? this.colorMax : value < this.colorMin ? this.colorMin : value;
        },
    });
    this._alpha = 1;
    Object.defineProperty(this, "alpha", {
        get: function () {
            return this._alpha;
        },
        set: function (value) {
            this._alpha = value > this.alphaMax ? this.alphaMax : value < this.alphaMin ? this.alphaMin : value;
        },
    });
    this._colorIndex = 0;
    Object.defineProperty(this, "colorIndex", {
        get: function () {
            return this._colorIndex;
        },
    });
};
canvas.app.hunt.engine.ColorManager.prototype.init = function (cMin, cMax, aMin, aMax, period) {
    this.colorMin = cMin < 0 ? 0 : cMin > this.COLOR_MAX ? this.COLOR_MAX : cMin;
    this.colorMax = cMax < 0 ? 0 : cMax > this.COLOR_MAX ? this.COLOR_MAX : cMax;
    this.alphaMin = aMin < 0 ? 0 : aMin > this.ALPHA_MAX ? this.ALPHA_MAX : aMin;
    this.alphaMax = aMax < 0 ? 0 : aMax > this.ALPHA_MAX ? this.ALPHA_MAX : aMax;
    this.period = period;
    if (this.timer) {
        clearInterval(this.timer);
    }
    if (this.period > 0 && (this.colorMin != this.colorMax || this.alphaMin != this.alphaMax)) {
        this.timer = setInterval(this.timerHandler.bind(this), this.period);
    }
    this._color = this.colorMin;
    this._alpha = this.alphaMax;
    this._colorIndex = canvas.Functions.random(3);
};
canvas.app.hunt.engine.ColorManager.prototype.timerHandler = function () {
    if (this.colorMin != this.colorMax) {
        this.color += this.COLOR_DIFF * this.colorSign;
        if (this.color == this.colorMax || this.color == this.colorMin) {
            this.colorSign = -this.colorSign;
        }
    }
    if (this.alphaMin != this.alphaMax) {
        this.alpha += this.ALPHA_DIFF * this.alphaSign;
        if (this.alpha == this.alphaMax || this.alpha == this.alphaMin) {
            this.alphaSign = -this.alphaSign;
        }
    }
    canvas.EventManager.dispatchEvent(canvas.app.hunt.Event.COLOR_CHANGE);
};
canvas.app.hunt.engine.FarmingUpdater = function (base_lnk) {
    Object.defineProperty(this, "farmSnum", {
        set: function (value) {
            this._snum = value;
        },
    });
    var conf = canvas.app.hunt.model;
    this.baseLnk = base_lnk;
    this._snum = 0;
    this.reqBegin = conf.reqURL + "?mode=farm&action=chek&xy=%xy%&sig=%sig%&num=%num%";
    this.reqCheck = conf.reqURL + "?mode=farm&action=chek&xy=%xy%&end=1";
    this.reqCancel = conf.reqURL + "?mode=farm&action=cancel";
    this.aLoader = new canvas.utils.URLRequest();
    canvas.EventManager.addEventListener(canvas.utils.URLRequestEvent.EVENT_COMPLETE, this.aLoader, this.completeHandler, this);
    canvas.EventManager.addEventListener(canvas.utils.URLRequestEvent.EVENT_ERROR, this.aLoader, this.errorHandler, this);
    this.tikHandlerBinded = this.tikHandler.bind(this);
};
canvas.app.hunt.engine.FarmingUpdater.prototype.start = function () {
    this.stop();
    this.tik = setTimeout(this.tikHandlerBinded, 2e3);
};
canvas.app.hunt.engine.FarmingUpdater.prototype.stop = function () {
    if (this.tik) clearTimeout(this.tik);
};
canvas.app.hunt.engine.FarmingUpdater.prototype.tikHandler = function () {
    this.stop();
    this.main_iteration();
};
canvas.app.hunt.engine.FarmingUpdater.prototype.completeHandler = function () {
    var dat = this.aLoader.request.responseText;
    if (this.canceling) {
        return;
    }
    var doc = new DOMParser().parseFromString(dat, "text/xml");
    if (doc.firstChild.attributes.time_left) {
        this.baseLnk.field_lock();
        this.baseLnk.showCaptcha(parseInt(doc.firstChild.attributes.time_left.value));
        return;
    }
    var ar1 = doc.childNodes;
    for (var i1 = 0; i1 < ar1.length; i1++) {
        if (ar1[i1].nodeName == "req") {
            this.parse_attr(ar1[i1].attributes);
            break;
        }
    }
};
canvas.app.hunt.engine.FarmingUpdater.prototype.parse_attr = function (attr) {
    var conf = canvas.app.hunt.model;
    if (attr.status == null) {
        return;
    }
    if (attr.status.value == "1") {
        if (!this.checking) {
            if (attr.ctime == null || attr.ftime == null) {
                this.baseLnk.popup.show_message(canvas.Translator.getText(424), 16711680);
                return;
            }
        }
        if (attr.stime == null) {
            attr.stime = attr.ctime;
        }
        if (attr.farm == null) {
            attr.farm = { value: "0" };
        }
        var farm_data = conf.farm_data[attr.prof.value];
        if (farm_data == null) {
            farm_data = conf.farm_data["0"];
        }
        if (attr.farm.value == "0") {
            attr.ctime.value = parseInt(attr.ctime.value) * 1e3;
            attr.ftime.value = parseInt(attr.ftime.value) * 1e3;
            attr.stime.value = parseInt(attr.stime.value) * 1e3;
            if (attr.ctime.value > attr.ftime.value) {
                attr.ctime.value = attr.ftime.value;
            }
            if (attr.stime.value > attr.ftime.value) {
                attr.stime.value = attr.ftime.value;
            }
            if (!this.checking || attr.stime.value != attr.ftime.value) {
                this.baseLnk.popup.set_progress(attr);
            } else {
                this.start();
            }
            this.baseLnk.popup.set_header(farm_data.header);
        } else if (attr.farm.value == "-1") {
            this.baseLnk.unselect_obj();
            this.baseLnk.popup.show_message(farm_data.faled, 16711680);
            return;
        } else if (attr.farm.value == "1") {
            this.baseLnk.unselect_obj();
            if (this.baseLnk.popup.parent) {
                canvas.utils.WindowsManager.instance.closeWindow(this.baseLnk.popup);
            }
            this.baseLnk.field_unlock();
            this.baseLnk.refresh_controls();
            return;
        } else {
            this.baseLnk.popup.set_header(canvas.Translator.toUpperCaseFirstChar(canvas.Translator.getText(4)));
            this.baseLnk.popup.show_message(canvas.Translator.getText(425), 16711680);
            return;
        }
    } else {
        this.baseLnk.popup.set_header(canvas.Translator.toUpperCaseFirstChar(canvas.Translator.getText(4)));
        if (attr.msg != null) {
            this.baseLnk.popup.show_message(attr.msg.value, 16711680);
        } else {
            this.baseLnk.popup.show_message(canvas.Translator.getText(426), 16711680);
        }
    }
};
canvas.app.hunt.engine.FarmingUpdater.prototype.errorHandler = function () {
    this.start();
};
canvas.app.hunt.engine.FarmingUpdater.prototype.main_iteration = function () {
    this.checking = true;
    this.canceling = false;
    var rch = this.reqCheck.replace(/%xy%/g, this._snum.toString());
    this.aLoader.load(rch);
};
canvas.app.hunt.engine.FarmingUpdater.prototype.begin_farming = function (num, t, clickType) {
    var conf = canvas.app.hunt.model;
    this.checking = false;
    this.canceling = false;
    var begin_req = this.reqBegin.replace(/%num%/g, String(num)).replace(/%sig%/g, md5(this._snum.toString() + num.toString() + conf.MAX_ANIMATION_SIZE));
    begin_req = begin_req.replace(/%xy%/g, this._snum.toString());
    begin_req += "&t=" + t;
    this.aLoader.method = "POST";
    this.aLoader.load(begin_req, { m: canvas.utils.ABController.toString({ rtype: "farm", rid: num, et: clickType }) });
    this.aLoader.method = "GET";
};
canvas.app.hunt.engine.FarmingUpdater.prototype.fieldClick = function (target) {};
canvas.app.hunt.engine.FarmingUpdater.prototype.cancel_farming = function () {
    this.stop();
    this.canceling = true;
    this.aLoader.load(this.reqCancel);
};
canvas.app.hunt.engine.MapData = function () {
    this._data = {};
    this.TYPE_BOT = "bot";
    this.TYPE_PLANT = "plant";
    this.TYPE_STONE = "stone";
    this.TYPE_FISH = "fish";
    this.TYPE_USE = "use";
    this.OVERLAY_WIDTH = 75;
};
canvas.app.hunt.engine.MapData.prototype.parseData = function (type, data) {
    var i = 0;
    var j;
    var byte;
    var startPosition;
    var a = [];
    var x;
    var y;
    var binData = new Uint8Array(data);
    if (binData) {
        this._data[type] = a;
        while (i < binData.length) {
            byte = binData[i];
            startPosition = i * 8;
            for (j = 0; j < 8; j++) {
                x = (startPosition + j) % this.OVERLAY_WIDTH;
                y = parseInt((startPosition + j) / this.OVERLAY_WIDTH);
                if (!a[x]) a[x] = [];
                a[x][y] = !((byte >> j) & 1);
            }
            i++;
        }
    }
};
canvas.app.hunt.engine.MapData.prototype.testPoint = function (x, y, type) {
    if (type == this.TYPE_USE) return true;
    var a;
    var i = Math.floor(x / 20);
    var j = Math.floor(y / 20);
    if (this._data[type]) {
        a = this._data[type];
        return a[i] && a[i][j];
    } else {
        return false;
    }
};
canvas.app.hunt.engine.MapData.prototype.getTypeByProf = function (prof) {
    switch (prof) {
        case 1:
            return this.TYPE_PLANT;
        case 2:
            return this.TYPE_STONE;
        case 4:
            return this.TYPE_FISH;
        default:
            return this.TYPE_USE;
    }
};
canvas.app.hunt.engine.ObjLoader = function (src, smoothing) {
    this.src = src;
    this.movies = [];
    this.ready = false;
    this.smoothing = smoothing ? true : false;
    canvas.EventManager.addEventListener(canvas.ResourceLoader.EVENT_COMPLETE, null, this.completeHandler, this);
    canvas.ResourceLoader.add([src + ".mci", src + ".png", src + ".json"]);
};
canvas.app.hunt.engine.ObjLoader.prototype.completeHandler = function () {
    canvas.EventManager.removeEventListener(canvas.ResourceLoader.EVENT_COMPLETE, null, this.completeHandler, this);
    this.ready = true;
    var len = this.movies ? this.movies.length : 0;
    if (len > 0) {
        for (var i = 0; i < len; i++) {
            this.processMovie(this.movies[i]);
        }
    }
    this.movies = null;
    canvas.EventManager.dispatchEvent(canvas.app.hunt.Event.COMPLETE_OBJECT, this);
};
canvas.app.hunt.engine.ObjLoader.prototype.getMovie = function () {
    var mc = new canvas.px.MovieClip(this.src, "", this.smoothing);
    mc.frameEvent = canvas.app.hunt.Event.ENTER_FRAME;
    if (this.ready) {
        this.processMovie(mc);
    } else {
        this.movies.push(mc);
    }
    return mc;
};
canvas.app.hunt.engine.ObjLoader.prototype.processMovie = function (mc) {};
canvas.app.hunt.engine.ObjectsUpdater = function (base_lnk, objects) {
    this.baseLnk = base_lnk;
    this.Objects = objects;
    this.aLoader = new canvas.utils.URLRequest();
    this.aConfLoader = new canvas.utils.URLRequest();
    canvas.EventManager.addEventListener(canvas.utils.URLRequestEvent.EVENT_COMPLETE, this.aLoader, this.completeHandler, this);
    canvas.EventManager.addEventListener(canvas.utils.URLRequestEvent.EVENT_COMPLETE, this.aConfLoader, this.completeHandler, this);
    canvas.EventManager.addEventListener(canvas.utils.URLRequestEvent.EVENT_ERROR, this.aLoader, this.errorHandler, this);
    canvas.EventManager.addEventListener(canvas.utils.URLRequestEvent.EVENT_ERROR, this.aConfLoader, this.errorHandler, this);
    this.send_req_binded = this.send_req.bind(this);
    this.send_req_conf_binded = this.send_req_conf.bind(this);
    this.completeHandler(null);
    this.send_req();
};
canvas.app.hunt.engine.ObjectsUpdater.prototype.send_req = function () {
    this.aLoader.load(canvas.app.hunt.model.reqURL);
};
canvas.app.hunt.engine.ObjectsUpdater.prototype.send_req_conf = function () {
    this.aConfLoader.load(canvas.app.hunt.model.reqConfURL);
};
canvas.app.hunt.engine.ObjectsUpdater.prototype.completeHandler = function (e) {
    var conf = canvas.app.hunt.model;
    var reqFlag = false;
    var reqConfFlag = true;
    if (e != null) {
        reqFlag = e.target == this.aLoader;
        reqConfFlag = e.target == this.aConfLoader;
    }
    if (this.baseLnk.winCaptcha != null && this.baseLnk.winCaptcha.isActive) {
        this.setReqTimeOut(reqFlag, reqConfFlag);
        return;
    }
    var doc = e == null ? new DOMParser().parseFromString(canvas.ResourceLoader.get("first_data").data, "text/xml") : new DOMParser().parseFromString(e.target.request.responseText, "text/xml");
    if (doc.firstChild.attributes.time_left) {
        this.baseLnk.field_lock();
        this.baseLnk.showCaptcha(parseInt(doc.firstChild.attributes.time_left.value));
        this.setReqTimeOut(reqFlag, reqConfFlag);
        return;
    }
    var haveActiveEvents = false;
    var ar0 = doc.childNodes;
    var ar1;
    var nn1;
    for (var i0 = 0; i0 < ar0.length; i0++) {
        if (ar0[i0].nodeName == "hunt") {
            ar1 = ar0[i0].childNodes;
            for (var i1 = 0; i1 < ar1.length; i1++) {
                nn1 = ar1[i1].nodeName;
                if (nn1 == "bots") {
                    this.lastBots = ar1[i1].childNodes;
                } else if (nn1 == "farm") {
                    this.lastFarm = ar1[i1].childNodes;
                } else if (nn1 == "event") {
                    haveActiveEvents = true;
                    var id = ar1[i1].attributes.id != null ? ar1[i1].attributes.id.value : 0;
                    var title = ar1[i1].attributes.title != null ? ar1[i1].attributes.title.value : "";
                    var pointTitle = ar1[i1].attributes.point_title != null ? ar1[i1].attributes.point_title.value : "";
                    this.parse_event(id, title, pointTitle, ar1[i1].childNodes);
                } else if (nn1 == "fight") {
                    conf.NUM_BIG_FIGHT = ar1[i1].attributes.in_process != null ? ar1[i1].attributes.in_process.value : 0;
                } else if (nn1 == "treasure") {
                    conf.treasureFinishTime = ar1[i1].childNodes[0] && ar1[i1].childNodes[0].nodeValue ? Math.round(Date.now() * 0.001) + parseInt(ar1[i1].childNodes[0].nodeValue) : 0;
                }
            }
        }
    }
    if (reqFlag && !haveActiveEvents) conf.OBJ_EVENT = { tasks: {} };
    if (this.lastBots) this.parse_bots(this.lastBots);
    if (this.lastFarm) this.parse_farm(this.lastFarm);
    this.baseLnk.checkObjects(true);
    if (reqFlag) this.baseLnk.updateVisibleObjects();
    this.setReqTimeOut(reqFlag, reqConfFlag);
};
canvas.app.hunt.engine.ObjectsUpdater.prototype.parse_bots = function (ar) {
    var attr;
    var curObj;
    var k;
    var is_new;
    for (var i = 0; i < ar.length; i++) {
        if (ar[i].nodeName == "bot") {
            attr = ar[i].attributes;
            k = "b" + attr.id.value;
            if (this.Objects[k] == null) {
                this.Objects[k] = {};
                this.Objects[k].type = "bot";
                is_new = true;
            } else {
                is_new = false;
            }
            curObj = this.Objects[k];
            if (is_new) {
            } else if (curObj.x != attr.x.value || curObj.y != attr.y.value) {
                curObj.new_pos = true;
            }
            if (curObj.mc != null) {
                if (curObj.fight_id != attr.fight_id.value) {
                    if (attr.fight_id == null || attr.fight_id.value == "0") {
                        curObj.mc.mark.visible = false;
                    } else {
                        curObj.mc.mark.visible = true;
                    }
                }
            }
            delete curObj.fight_id;
            delete curObj.old_flag;
            for (var g in attr) {
                if (attr[g].value != undefined) {
                    curObj[attr[g].name] = attr[g].value;
                }
            }
        }
    }
};
canvas.app.hunt.engine.ObjectsUpdater.prototype.parse_farm = function (ar) {
    var conf = canvas.app.hunt.model;
    var attr;
    var curObj;
    var k;
    var is_new;
    for (var i = 0; i < ar.length; i++) {
        if (ar[i].nodeName == "item") {
            attr = ar[i].attributes;
            var quality = parseInt(attr.quality.value);
            if (!canvas.Functions.testFlag(conf.filterValue, conf.FILTER_VALUES[quality])) {
                continue;
            }
            k = "f" + attr.num.value;
            if (this.Objects[k] == null) {
                this.Objects[k] = {};
                this.Objects[k].type = "farm";
                is_new = true;
            } else {
                is_new = false;
            }
            curObj = this.Objects[k];
            if (is_new) {
            } else if (curObj.mc != null) {
                if (curObj.x != attr.x.value || curObj.y != attr.y.value) {
                    curObj.new_pos = true;
                }
                if (curObj.farming != attr.farming.value) {
                    if (attr.farming == null || attr.farming.value == "0") {
                        curObj.mc.mark.visible = false;
                    } else {
                        curObj.mc.mark.visible = true;
                    }
                }
            }
            delete curObj.farming;
            delete curObj.old_flag;
            for (var g in attr) {
                if (attr[g].value != undefined) {
                    curObj[attr[g].name] = attr[g].value;
                }
            }
        }
    }
};
canvas.app.hunt.engine.ObjectsUpdater.prototype.parse_event = function (id, title, point_title, a1) {
    var conf = canvas.app.hunt.model;
    conf.OBJ_EVENT.id = id;
    conf.OBJ_EVENT.title = title;
    conf.OBJ_EVENT.point_title = point_title;
    var i1;
    var event_uid = 0;
    for (i1 = 0; i1 < a1.length; i1++) {
        if (a1[i1].nodeName == "task") {
            conf.OBJ_EVENT.tasks[event_uid] = {
                title: a1[i1].attributes.title != null ? a1[i1].attributes.title.value : "---",
                max_value: a1[i1].attributes.max_value != null ? a1[i1].attributes.max_value.value : 0,
                max_user_value: a1[i1].attributes.max_user_value != null ? a1[i1].attributes.max_user_value.value : 0,
                user_value: a1[i1].attributes.user_value != null ? a1[i1].attributes.user_value.value : 0,
                value: a1[i1].attributes.value != null ? a1[i1].attributes.value.value : 0,
                noUserValue: a1[i1].attributes.no_user_value && a1[i1].attributes.no_user_value.value == "1",
            };
            event_uid++;
        }
    }
};
canvas.app.hunt.engine.ObjectsUpdater.prototype.errorHandler = function (event) {
    this.setReqTimeOut();
};
canvas.app.hunt.engine.ObjectsUpdater.prototype.updateFarm = function () {
    if (this.lastFarm) this.parse_farm(this.lastFarm);
    this.baseLnk.checkObjects(true, "farm");
};
canvas.app.hunt.engine.ObjectsUpdater.prototype.setReqTimeOut = function (req, reqConf) {
    var conf = canvas.app.hunt.model;
    if (req == undefined) req = true;
    if (reqConf == undefined) reqConf = true;
    if (req) {
        if (this.timer) clearTimeout(this.timer);
        this.timer = setTimeout(this.send_req_binded, conf.reqInterval * 1e3);
    }
    if (reqConf) {
        if (this.timerConf) clearTimeout(this.timerConf);
        this.timerConf = setTimeout(this.send_req_conf_binded, conf.reqConfInterval * 1e3);
    }
};
canvas.app.hunt.view.FarmWindow = function (base_lnk) {
    canvas.app.manor.view.WindowManorBase.call(this, 392, 102);
    this.baseLnk = base_lnk;
    var conf = canvas.app.hunt.model;
    this.cancel_tf = new canvas.ui.Text(conf.IsBold ? canvas.Const.FONT_TAHOMA_11_BOLD : canvas.Const.FONT_TAHOMA_11, 16771494, 73, 18, "center");
    this.cancel_tf.text = canvas.Translator.getText(11);
    this.cancel_tf.position.set(159, 63);
    this.message_tf = new canvas.ui.Text(conf.IsBold ? canvas.Const.FONT_TAHOMA_11_BOLD : canvas.Const.FONT_TAHOMA_11, 1346315, 370, 18, "center");
    this.message_tf.position.set(10, 89);
    this.cont_progress = new canvas.px.Container();
    this.progressBack = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "popup_line_red"));
    this.progressBack.position.set(22, 34);
    this.cont_progress.addChild(this.progressBack);
    this.progress = new canvas.ui.Progress(canvas.ResourceLoader.getImage("ui", "popup_line_green"));
    this.progress.position.set(22, 37);
    this.cont_progress.addChild(this.progress);
    this.cancel_btn = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "popup_close_btn"));
    this.cancel_btn.position.set(150, 62);
    this.cont_progress.addChild(this.cancel_btn);
    this.cont_progress.addChild(this.cancel_tf);
    this.cont_progress.addChild(this.message_tf);
    this.cont_finish = new canvas.px.Container();
    this.body_tf = new canvas.ui.Text(conf.IsBold ? canvas.Const.FONT_TAHOMA_11_BOLD : canvas.Const.FONT_TAHOMA_11, 0, 320, 34, "center");
    this.body_tf.position.set(36, 24);
    this.cont_finish.addChild(this.body_tf);
    this.exit_btn = new canvas.app.view.MainButton();
    this.exit_btn.setTitle(canvas.Translator.getText(310));
    this.cont_finish.addChild(this.exit_btn);
    canvas.EventManager.addEventListener(canvas.px.WindowEvent.EVENT_OPEN, null, this.show, this);
    canvas.EventManager.addEventListener(canvas.px.WindowEvent.EVENT_CLOSE, null, this.hide, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.cancel_btn, this.cancelMouseClickHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.exit_btn, this.exitMouseClickHandler, this);
    this.update();
};
canvas.app.hunt.view.FarmWindow.prototype = Object.create(canvas.app.manor.view.WindowManorBase.prototype);
canvas.app.hunt.view.FarmWindow.prototype.cont_switcher = function (cont_add, cont_rem) {
    var conf = canvas.app.hunt.model;
    if (!this.parent) {
        canvas.utils.WindowsManager.instance.openWindow(this, false, false, false, true);
        this.position.set(Math.round(conf.popupPos.x * this.baseLnk.wwReal - this.width * 0.5), Math.round(conf.popupPos.y * this.baseLnk.hhReal - this.height * 0.5));
    }
    if (this.contains(cont_rem)) {
        this.removeChild(cont_rem);
    }
    if (!this.contains(cont_add)) {
        this.addChild(cont_add);
    }
};
canvas.app.hunt.view.FarmWindow.prototype.switch_progress_mode = function () {
    this.cont_switcher(this.cont_progress, this.cont_finish);
    this.baseLnk.fld_current.pers.visible = false;
};
canvas.app.hunt.view.FarmWindow.prototype.switch_finish_mode = function () {
    this.cont_switcher(this.cont_finish, this.cont_progress);
    this.baseLnk.fld_current.pers.visible = true;
};
canvas.app.hunt.view.FarmWindow.prototype.show = function (event) {
    if (event != undefined && event.params == this) {
    }
};
canvas.app.hunt.view.FarmWindow.prototype.hide = function (event) {
    this.cancelMouseClickHandler(null, true);
    if (event != undefined && event.params == this) {
        this.baseLnk.fld_current.pers.visible = true;
        this.setBackground();
    }
};
canvas.app.hunt.view.FarmWindow.prototype.setBackground = function (type) {
    if (type == undefined) type = 1;
    switch (type) {
        case 2:
            this.setSize(392, 137);
            break;
        default:
            this.setSize(392, 102);
    }
};
canvas.app.hunt.view.FarmWindow.prototype.cancelMouseClickHandler = function (event, force) {
    if (!this.parent && !force) return;
    var conf = canvas.app.hunt.model;
    conf.farm.cancel_farming();
    this.baseLnk.field_unlock();
    this.baseLnk.refresh_controls();
    canvas.EventManager.removeEventListener(canvas.app.hunt.Event.ENTER_FRAME, null, this.frameHandler, this);
    if (!force) canvas.EventManager.dispatchEvent(canvas.px.WindowEvent.EVENT_CLOSE, this);
};
canvas.app.hunt.view.FarmWindow.prototype.exitMouseClickHandler = function () {
    this.baseLnk.field_unlock();
    this.baseLnk.refresh_controls();
    canvas.EventManager.dispatchEvent(canvas.px.WindowEvent.EVENT_CLOSE, this);
};
canvas.app.hunt.view.FarmWindow.prototype.set_header = function (str) {
    this.header.text = str;
};
canvas.app.hunt.view.FarmWindow.prototype.set_progress = function (attr) {
    var current_time = Date.now();
    var delta_time = attr.stime.value - current_time;
    this.ctime = attr.ctime.value - delta_time;
    this.ftime = attr.ftime.value - delta_time;
    this.switch_progress_mode();
    canvas.EventManager.addEventListener(canvas.app.hunt.Event.ENTER_FRAME, null, this.frameHandler, this);
    if (attr.first_farmer != undefined) {
        this.message_tf.color = parseInt(attr.first_farmer.value) == 1 ? 1346315 : 16711680;
        this.message_tf.text = parseInt(attr.first_farmer.value) == 1 ? canvas.Translator.getText(436) : canvas.Translator.getText(437);
        this.setBackground(2);
    } else {
        this.message_tf.text = "";
    }
    this.frameHandler();
};
canvas.app.hunt.view.FarmWindow.prototype.frameHandler = function () {
    var current_time = Date.now();
    var conf = canvas.app.hunt.model;
    this.progress.progress = (current_time - this.ctime) / (this.ftime - this.ctime);
    if (this.progress.progress >= 1) {
        canvas.EventManager.removeEventListener(canvas.app.hunt.Event.ENTER_FRAME, null, this.frameHandler, this);
        conf.farm.main_iteration();
    }
};
canvas.app.hunt.view.FarmWindow.prototype.show_message = function (msg, col) {
    this.switch_finish_mode();
    this.setBackground();
    this.set_body_text(msg, col);
};
canvas.app.hunt.view.FarmWindow.prototype.set_body_text = function (msg, col) {
    this.body_tf.color = col;
    this.body_tf.text = msg;
    this.body_tf.y = 42 - Math.round(this.body_tf.textHeight / 2);
};
canvas.app.hunt.view.FarmWindow.prototype.setSize = function (w, h) {
    canvas.app.manor.view.WindowManorBase.prototype.setSize.call(this, w, h);
    this._width = w;
    this._height = h;
    this.update();
};
canvas.app.hunt.view.FarmWindow.prototype.update = function () {
    if (this.exit_btn) {
        this.exit_btn.position.set(Math.round((this._width - this.exit_btn.width) * 0.5), this._height - 50);
    }
};
canvas.app.hunt.view.Field = function (base_lnk, bmpd_lnk, field_id) {
    canvas.px.Container.call(this);
    var conf = canvas.app.hunt.model;
    this.baseLnk = base_lnk;
    this.interactive = true;
    this.addChild(bmpd_lnk);
    this.obj_cont = new canvas.px.Container();
    this.addChild(this.obj_cont);
    this.pers = new canvas.app.hunt.view.elements.MapPers();
    this.pers.position.set(Math.round(conf.sizeX * 0.5), Math.round(conf.sizeY * 0.5));
    this.addChild(this.pers);
    this.treasureSearch = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "icon_lupa"));
    this.treasureLocator = new canvas.px.Container();
    this.treasureImage = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "treasure_chest"));
    this.treasureField = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_10_BOLD_STROKE, 16777215, 80, 20, "center");
    this.treasureField.position.set(-40, -40);
    canvas.EventManager.addEventListener(canvas.Event.STAGE_MOUSE_MOVE, null, this.moveHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.treasureImage, this.treasureClickHandler, this);
};
canvas.app.hunt.view.Field.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.hunt.view.Field.prototype.treasureClickHandler = function (event) {
    canvas.EventManager.dispatchEvent(canvas.app.hunt.Event.TREASURE_COLLECT);
};
canvas.app.hunt.view.Field.prototype.setPos = function (x, y) {
    var pc;
    if (x > 0) x = 0;
    if (y > 0) y = 0;
    var ny = y;
    if (ny != this.last_Y) {
        this.last_Y = ny;
        pc = -this.last_Y / this.baseLnk.fld_invisible_HE;
        this.baseLnk.scr_vert.current = this.baseLnk.scr_vert.max * pc;
        canvas.EventManager.dispatchEvent(canvas.ui.ScrollEvent.EVENT_SCROLL, this.baseLnk.scr_vert);
    }
    var nx = x;
    if (nx != this.last_X) {
        this.last_X = nx;
        pc = -this.last_X / this.baseLnk.fld_invisible_WI;
        this.baseLnk.scr_horz.current = this.baseLnk.scr_vert.max * pc;
        canvas.EventManager.dispatchEvent(canvas.ui.ScrollEvent.EVENT_SCROLL, this.baseLnk.scr_horz);
    }
};
canvas.app.hunt.view.Field.prototype.moveHandler = function (event) {
    var rt;
    var point = this.pers.toGlobal(new canvas.px.Point(0, 0));
    if (event.params.x >= point.x) {
        rt = 180 + (Math.atan((event.params.y - point.y) / (event.params.x - point.x)) * 180) / Math.PI;
    } else {
        rt = (Math.atan((event.params.y - point.y) / (event.params.x - point.x)) * 180) / Math.PI;
    }
    if (!isNaN(rt)) {
        this.pers.rotation = canvas.Functions.degToRad(rt - 45);
    }
};
canvas.app.hunt.view.Field.prototype.clear_obj_cont = function () {
    var curFldObj;
    while (this.obj_cont.numChildren > 0) {
        curFldObj = this.obj_cont.getChildAt(0);
        curFldObj.remove();
    }
};
canvas.app.hunt.view.Field.prototype.startTreasureSearch = function () {
    this.baseLnk.addChild(this.treasureSearch);
    this.treasureSearch.startDrag(new canvas.px.Point(20, 20), null, canvas.app.CanvasHunt.App.renderer.plugins.interaction.mouse.global);
    canvas.EventManager.addEventListener(canvas.Event.STAGE_MOUSE_UP, null, this.upHandler, this);
    canvas.EventManager.addEventListener(canvas.Event.STAGE_MOUSE_OUT, null, this.upHandler, this);
};
canvas.app.hunt.view.Field.prototype.upHandler = function (event) {
    canvas.EventManager.removeEventListener(canvas.Event.STAGE_MOUSE_UP, null, this.upHandler, this);
    canvas.EventManager.removeEventListener(canvas.Event.STAGE_MOUSE_OUT, null, this.upHandler, this);
    this.treasureSearch.stopDrag();
    if (this.baseLnk.contains(this.treasureSearch)) this.baseLnk.removeChild(this.treasureSearch);
    if (event.name != canvas.Event.STAGE_MOUSE_OUT) {
        var point = this.toLocal(new canvas.px.Point(event.params.x, event.params.y));
        canvas.EventManager.dispatchEvent(canvas.app.hunt.Event.TREASURE_DIG, null, { x: Math.round(point.x), y: Math.round(point.y) });
    }
};
canvas.app.hunt.view.Field.prototype.updateTreasureLocator = function (status) {
    var conf = canvas.app.hunt.model;
    if (this.treasureField.parent) this.treasureLocator.removeChild(this.treasureField);
    canvas.Functions.destroyChildren(this.treasureLocator);
    var mc;
    var colors = [16056320, 16087296, 16113920];
    switch (status) {
        case canvas.app.hunt.Const.TREASURE_BEACON_STATUS_RED:
        case canvas.app.hunt.Const.TREASURE_BEACON_STATUS_ORANGE:
        case canvas.app.hunt.Const.TREASURE_BEACON_STATUS_YELLOW:
            mc = new canvas.px.MovieClip(canvas.Config.effectsPath + "treasure" + status.toString());
            mc.frameEvent = canvas.app.hunt.Event.ENTER_FRAME;
            mc.loop = true;
            this.treasureField.text = canvas.Translator.getText(443 + status);
            this.treasureField.color = colors[status - 1];
            break;
    }
    if (mc != null) {
        this.treasureLocator.addChild(mc);
        if (conf.treasureTextTips) this.treasureLocator.addChild(this.treasureField);
        if (!this.contains(this.treasureLocator)) this.addChild(this.treasureLocator);
        this.treasureLocator.position.set(conf.treasureLastPoint.x, conf.treasureLastPoint.y);
    } else {
        if (this.contains(this.treasureLocator)) this.removeChild(this.treasureLocator);
    }
};
canvas.app.hunt.view.Field.prototype.showTreasure = function (b) {
    var conf = canvas.app.hunt.model;
    if (b == undefined) b = true;
    if (b) {
        if (!this.contains(this.treasureImage)) {
            this.addChild(this.treasureImage);
            canvas.EventManager.dispatchEvent(canvas.app.hunt.Event.HINT_ADD, null, { target: this.treasureImage, params: new canvas.utils.HintParams(new canvas.app.view.MappingHint(canvas.Translator.getText(192))) });
        }
        this.treasureImage.position.set(conf.treasureLastPoint.x, conf.treasureLastPoint.y);
    } else {
        canvas.EventManager.dispatchEvent(canvas.app.hunt.Event.HINT_REMOVE, null, { target: this.treasureImage });
        if (this.contains(this.treasureImage)) this.removeChild(this.treasureImage);
    }
};
canvas.app.hunt.view.Field.prototype.check_position = function () {};
canvas.app.hunt.view.Field.prototype.updateVisibleObjects = function (rect) {
    var conf = canvas.app.hunt.model;
    var obj;
    for (var i in conf.Objects) {
        obj = conf.Objects[i];
        if (obj.mc) {
            if (canvas.Functions.pointInRect(obj.mc.position, rect)) {
                if (!this.obj_cont.contains(obj.mc)) this.obj_cont.addChild(obj.mc);
                obj.mc.locked = false;
            } else {
                if (this.obj_cont.contains(obj.mc)) this.obj_cont.removeChild(obj.mc);
                obj.mc.locked = true;
            }
        }
    }
};
canvas.app.hunt.view.FieldObject = function (base_lnk, root_lnk, curObj_lnk) {
    canvas.px.Container.call(this);
    Object.defineProperty(this, "Bot", {
        get: function () {
            return this.curObj.type == "bot";
        },
    });
    this._locked = false;
    Object.defineProperty(this, "locked", {
        get: function () {
            return this._locked;
        },
        set: function (value) {
            if (this._locked == value) return;
            this._locked = value;
            this.updateLocked();
        },
    });
    var conf = canvas.app.hunt.model;
    this.num = 0;
    this.col_hi = 16777215;
    this.clickTime = Date.now();
    this.baseLnk = base_lnk;
    this.rootLnk = root_lnk;
    this.curObj = curObj_lnk;
    this.position.set(parseInt(this.curObj.x), parseInt(this.curObj.y));
    this.mark = new canvas.px.Container();
    this.mark.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "png_mark2")));
    this.mark_tf = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_10_BOLD, 0, 18, 19, "center");
    this.mark_tf.position.set(1, 3);
    this.mark.addChild(this.mark_tf);
    var src;
    var pic;
    var name;
    var smoothing = false;
    if (this.curObj.type == "bot") {
        name = "bot" + this.curObj.sk + "_sm";
        src = canvas.Config.huntBotsPath + name + "/" + name;
        pic = conf.PicPath + this.curObj.pic;
        this.obj_data_key = "sk_" + this.curObj.sk;
        this.obj_data_pic_key = "pic_" + this.curObj.pic;
        this.col_hi = conf.getBotnameColor(this.curObj.agrlevel);
    } else if (this.curObj.type == "farm") {
        name = this.curObj.swf.split(".")[0];
        src = canvas.Config.huntResPath + name + "/" + name;
        pic = conf.FarmPicPath + this.curObj.pic;
        this.obj_data_key = "swf_" + this.curObj.swf;
        this.obj_data_pic_key = "pic_" + this.curObj.pic;
        this.col_hi = conf.farm_conf[this.curObj.quality][0];
        if (this.curObj.swf == "fish_blue.swf" || this.curObj.swf == "fish_red.swf") {
            var str = "red";
            if (this.col_hi == 10027263) str = "violet";
            else if (this.col_hi == 13421772) str = "gray";
            else if (this.col_hi == 187) str = "blue";
            else if (this.col_hi == 47872) str = "green";
            src = canvas.Config.huntResPath + "fish/" + str + "/" + str;
            this.obj_data_key = "swf_fish_" + str;
            smoothing = true;
        }
    } else {
        return;
    }
    var mc;
    if (this.obj_data_key != null) {
        if (conf.OBJECTS_DATA[this.obj_data_key] == null) {
            conf.OBJECTS_DATA[this.obj_data_key] = new canvas.app.hunt.engine.ObjLoader(src, smoothing);
        }
        if (conf.OBJECTS_DATA[this.obj_data_key].ready) {
            this.complete_object();
        } else {
            canvas.EventManager.addEventListener(canvas.app.hunt.Event.COMPLETE_OBJECT, conf.OBJECTS_DATA[this.obj_data_key], this.complete_object, this);
        }
    }
    this.rootLnk.obj_cont.addChild(this);
    canvas.EventManager.addEventListener(canvas.app.hunt.Event.COLOR_CHANGE, null, this.handlerColorChange);
    this.curObj.mc = this;
};
canvas.app.hunt.view.FieldObject.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.hunt.view.FieldObject.prototype.updateLocked = function () {
    if (this.mc) {
        this.mc.locked = this._locked;
        if (this.mc.mcChildsCache) {
            for (var key in this.mc.mcChildsCache) {
                this.mc.mcChildsCache[key].locked = this._locked;
            }
        }
    }
    if (!this.locked && this.num) this.goFrame(this.num);
};
canvas.app.hunt.view.FieldObject.prototype.handlerColorChange = function () {
    var conf = canvas.app.hunt.model;
    if (this.curObj.type == "bot") {
        var rgb = new canvas.utils.RGB(this.col_hi);
        switch (conf.colorManager.colorIndex) {
            case 0:
                rgb.r = rgb.r + (rgb.r > 128 ? -conf.colorManager.color : conf.colorManager.color);
                break;
            case 1:
                rgb.g = rgb.g + (rgb.g > 128 ? -conf.colorManager.color : conf.colorManager.color);
                break;
            default:
                rgb.b = rgb.b + (rgb.b > 128 ? -conf.colorManager.color : conf.colorManager.color);
        }
        this.name_tf.color = rgb.toHex();
        this.name_tf.alpha = conf.colorManager.alpha;
    }
};
canvas.app.hunt.view.FieldObject.prototype.goFrame = function (num) {
    this.num = num;
    if (this.curObj.type == "bot") {
        this.mc.gotoAndStop(num);
        if (this.mc.mcChildsCache["mc" + num]) {
            this.mc.mcChildsCache["mc" + num].loop = true;
            this.mc.mcChildsCache["mc" + num].play();
            if (!this.mc.mcChildsCache["mc" + num].frameEvent) {
                this.mc.mcChildsCache["mc" + num].frameEvent = canvas.app.hunt.Event.ENTER_FRAME;
            }
        }
    } else if (this.curObj.type == "farm") {
        if (this.mc.maxTotalFrames < 2) {
            this.mc.gotoAndStop(1);
        } else {
            this.mc.loop = true;
            this.mc.play();
            this.mc.stop = function () {};
        }
    }
};
canvas.app.hunt.view.FieldObject.prototype.complete_object = function () {
    var conf = canvas.app.hunt.model;
    canvas.EventManager.removeEventListener(canvas.app.hunt.Event.COMPLETE_OBJECT, conf.OBJECTS_DATA[this.obj_data_key], this.complete_object, this);
    this.mc = conf.OBJECTS_DATA[this.obj_data_key].getMovie();
    this.updateLocked();
    this.goFrame(1);
    if (this.curObj.rndRotation) {
        this.mc.rotation = this.curObj.rndRotation;
    } else {
        this.mc.rotation = this.curObj.rndRotation = canvas.Functions.degToRad(Math.random() * 360);
    }
    var steps = 10;
    if (conf.startRandom) {
        if (this.curObj.rndX && this.curObj.rndY) {
            this.mc.position.set(this.curObj.rndX, this.curObj.rndY);
        } else {
            while (steps--) {
                var angle = Math.PI * 2 * Math.random();
                var radius = Math.sqrt((this.mc.width * this.mc.width) / 4 + (this.mc.height * this.mc.height) / 4);
                this.mc.x = radius * Math.cos(angle);
                this.mc.y = radius * Math.sin(angle);
                if (conf.mapData.testPoint(parseInt(this.curObj.x) + this.mc.x, parseInt(this.curObj.y) + this.mc.y, this.curObj.type == "bot" ? conf.mapData.TYPE_BOT : conf.mapData.getTypeByProf(parseInt(this.curObj.prof)))) {
                    break;
                } else {
                    this.mc.position.set(0, 0);
                }
            }
            this.curObj.rndX = this.mc.x;
            this.curObj.rndY = this.mc.y;
        }
        if (this.curObj.swf == "fish_blue.swf" || this.curObj.swf == "fish_red.swf") {
            this.mc.container.x = -27;
            this.mc.container.y = -27;
        }
    }
    if (this.curObj.ghost == "1") {
        this.mc.container.filters = [canvas.Functions.getGlow(10, 3, 0, 16777215, 0.1), canvas.Functions.getAlpha(0.4)];
    } else if (this.curObj.sk_half_moroc_light == "1") {
        this.mc.filters = [canvas.Functions.getGlow(10, 1.54, 1.81, 6737100, 0.1)];
        this.mc.alpha = 0.6;
    } else if (this.curObj.sk_half_moroc_dark == "1") {
        this.mc.filters = [canvas.Functions.getGlow(10, 1.54, 1.81, 10066176, 0.1)];
        this.mc.alpha = 0.6;
    }
    this.addChild(this.mc);
    this.mc.interactive = true;
    this.mc.buttonMode = true;
    this.mc.click = this.sensorClickHandler.bind(this);
    this.mc.hitArea = new canvas.px.Ellipse(0, 0, Math.round(this.mc.width * 0.4), this.mc.height * 0.4);
    var objSize;
    var objSize2;
    var objSize3;
    objSize = Math.max(this.mc.width, this.mc.height, 55);
    objSize2 = Math.floor(objSize / 2);
    objSize3 = objSize2 + 12;
    this.circle = new canvas.app.hunt.view.elements.CircleBorder(Math.round(objSize * 0.3), Math.round(objSize * 0.06), this.col_hi);
    this.circle.x = Math.round(this.mc.x);
    this.circle.y = Math.round(this.mc.y);
    this.unFocus();
    this.addChild(this.circle);
    if (this.curObj.type == "bot") {
        this.name_tf = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_10_BOLD_STROKE, 16777215, 200, 20, "center");
        this.name_tf.text = this.curObj.name + "[" + this.curObj.level + "]";
        this.name_tf.color = this.col_hi;
        this.name_tf.x = this.name_tf.xBase = Math.round(this.mc.x + Math.floor(-this.name_tf._width / 2));
        this.name_tf.y = this.name_tf.yBase = Math.round(this.mc.y + objSize2 - 10);
        this.addChild(this.name_tf);
    }
    if (this.mark) {
        this.mark.position.set(this.circle.x, this.circle.y);
        this.addChild(this.mark);
    }
    if (this.curObj.type == "bot") {
        this.mark_tf.text = "!";
        if (this.curObj.fight_id == "0") {
            this.mark.visible = false;
        }
    } else {
        this.update_mark_tf(this.curObj.farming);
    }
    this.handlerColorChange();
};
canvas.app.hunt.view.FieldObject.prototype.update_mark_tf = function (val) {
    if (val == "0") {
        this.mark.visible = false;
    } else {
        this.mark_tf.text = String(Math.min(9, Math.max(0, parseInt(val))));
    }
};
canvas.app.hunt.view.FieldObject.prototype.sensorClickHandler = function (event) {
    if (this.baseLnk.scr_horz.wasDragged || this.baseLnk.scr_vert.wasDragged) return;
    canvas.app.hunt.model.farm.fieldClick(this.mc);
    this.select(1);
    if (Date.now() - this.clickTime < 500) {
        this.sensorDoubleClickHandler();
    }
    this.clickTime = Date.now();
};
canvas.app.hunt.view.FieldObject.prototype.select = function (t) {
    this.curObj["t"] = t;
    this.baseLnk.select_obj(this.curObj);
    this.rootLnk.obj_cont.setChildIndex(this, this.rootLnk.obj_cont.numChildren - 1);
};
canvas.app.hunt.view.FieldObject.prototype.sensorDoubleClickHandler = function () {
    if (this.curObj.type == "bot") {
        this.baseLnk.apply_control_btn(3, 2);
    }
    if (this.curObj.type == "farm") {
        this.baseLnk.apply_control_btn(0, 2);
    }
};
canvas.app.hunt.view.FieldObject.prototype.inFocus = function () {
    this.circle.visible = true;
};
canvas.app.hunt.view.FieldObject.prototype.unFocus = function () {
    this.circle.visible = false;
};
canvas.app.hunt.view.FieldObject.prototype.moving = function (xx, yy) {
    var conf = canvas.app.hunt.model;
    if (this.curObj.type == "bot") {
        var dx = this.x - xx;
        var dy = this.y - yy;
        var at2 = Math.atan2(dy, dx);
        var gip = Math.sqrt(dx * dx + dy * dy);
        var ang = at2 + Math.PI;
        this.qi = conf.reqInterval * 25;
        this.qx = Math.cos(ang) * (gip / this.qi);
        this.qy = Math.sin(ang) * (gip / this.qi);
        this.mc.rotation = canvas.Functions.degToRad(at2 * (180 / Math.PI) + 180);
        this.goFrame(2);
        canvas.EventManager.addEventListener(canvas.app.hunt.Event.ENTER_FRAME, null, this.frameMovingHandler, this);
    } else if (this.curObj.type == "farm") {
        this.x = xx;
        this.y = yy;
        this.mc.rotation = canvas.Functions.degToRad(Math.random() * 360);
    } else {
    }
};
canvas.app.hunt.view.FieldObject.prototype.frameMovingHandler = function () {
    if (this.qi > 0) {
        this.x += this.qx;
        this.y += this.qy;
        this.name_tf.position.set(this.name_tf.xBase - (this.x - Math.round(this.x)), this.name_tf.yBase - (this.y - Math.round(this.y)));
        this.qi--;
    } else {
        this.goFrame(1);
        canvas.EventManager.removeEventListener(canvas.app.hunt.Event.ENTER_FRAME, null, this.frameMovingHandler, this);
    }
};
canvas.app.hunt.view.FieldObject.prototype.getHistoryId = function () {
    return this.curObj["type"] == "bot" ? this.curObj["sk"] : this.curObj["artikul_id"];
};
canvas.app.hunt.view.FieldObject.prototype.remove = function () {
    canvas.EventManager.removeEventListener(canvas.app.hunt.Event.ENTER_FRAME, null, this.frameMovingHandler, this);
    canvas.EventManager.removeEventListener(canvas.app.hunt.Event.COLOR_CHANGE, null, this.handlerColorChange);
    this.rootLnk.obj_cont.removeChild(this);
    delete this.curObj.mc;
    canvas.Functions.destroyChildren(this);
};
canvas.app.hunt.view.FilterPanel = function () {
    canvas.px.Container.call(this);
    this.arrows = new Array();
    for (var i = 0; i < 5; i++) {
        this.createButton(i);
        this.createArrow(i);
    }
    canvas.EventManager.dispatchEvent(canvas.app.hunt.Event.HINT_ADD, null, { target: this, params: new canvas.utils.HintParams(new canvas.app.view.MappingHint(canvas.Translator.getText(447))) });
    this.interactive = true;
    this.update();
    this.click = this.clickHandler.bind(this);
};
canvas.app.hunt.view.FilterPanel.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.hunt.view.FilterPanel.prototype.createButton = function (index) {
    var sprite = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "filter_" + index));
    sprite.name = "filter" + index;
    sprite.x = index * 18;
    this.addChild(sprite);
};
canvas.app.hunt.view.FilterPanel.prototype.createArrow = function (index) {
    var b = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "filter_arrow"));
    b.position.set(index * 18 + 2, 15);
    this.addChild(b);
    this.arrows.push(b);
};
canvas.app.hunt.view.FilterPanel.prototype.clickHandler = function (event) {
    var conf = canvas.app.hunt.model;
    if (event.target.parent.name.substr(0, 6) == "filter") {
        var index = parseInt(event.target.parent.name.substr(6));
        if (canvas.Functions.testFlag(conf.filterValue, conf.FILTER_VALUES[index])) {
            conf.filterValue &= ~conf.FILTER_VALUES[index];
        } else {
            conf.filterValue |= conf.FILTER_VALUES[index];
        }
        this.update();
    }
};
canvas.app.hunt.view.FilterPanel.prototype.update = function () {
    var conf = canvas.app.hunt.model;
    for (var i = 0; i < 5; i++) {
        this.arrows[i].visible = canvas.Functions.testFlag(conf.filterValue, conf.FILTER_VALUES[i]);
    }
};
canvas.app.hunt.view.FrameBorT = function (base_lnk) {
    canvas.px.Container.call(this);
    this.baseLnk = base_lnk;
    this.WIDTH = 92;
    this.HEIGHT = 40;
    this._lastW = 0;
    this._lastH = 0;
    this.shiftX = 18;
    this.heightKoeff = 0;
    var decBott = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "bottom_decor"));
    decBott.position.set(20 + this.shiftX, 19);
    var decTop = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "top_decor"));
    decTop.position.set(5 + this.shiftX, 5);
    this.container = new canvas.px.Sprite(canvas.ResourceLoader.getImage("map", "distortMap"));
    this.container.position.set(72, 9);
    this.addChild(decBott);
    this.addChild(this.container);
    this.addChild(decTop);
    this.selector = new canvas.px.Graphics();
    this.addChild(this.selector);
    this.container.interactive = true;
    this.container.buttonMode = true;
    this.container.mousedown = this.downHandler.bind(this);
    this.updatePos(0, 0);
};
canvas.app.hunt.view.FrameBorT.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.hunt.view.FrameBorT.prototype.update = function (ww, hh) {
    var conf = canvas.app.hunt.model;
    this.heightKoeff = this.selector.y / this.HEIGHT;
    this._trapezeSize = hh / 60;
    var h = this.HEIGHT * (hh / conf.sizeY);
    var w = this.WIDTH * (ww / conf.sizeX) + this.heightKoeff * 50;
    this.selector.clear();
    this.selector.lineStyle(1, 16375860);
    this.selector.moveTo(0, 0);
    this.selector.lineTo(w, 0);
    this.selector.lineTo(w + this._trapezeSize, h);
    this.selector.lineTo(-this._trapezeSize, h);
    this.selector.lineTo(0, 0);
    this._lastW = ww;
    this._lastH = hh;
};
canvas.app.hunt.view.FrameBorT.prototype.updatePos = function (xx, yy) {
    var conf = canvas.app.hunt.model;
    this.selector.y = 9 - this.HEIGHT * (yy / conf.sizeY);
    this.heightKoeff = this.selector.y / this.HEIGHT;
    this.selector.x = 87 - this.heightKoeff * 25 + this.shiftX - this.WIDTH * (xx / conf.sizeX);
    this.update(this._lastW, this._lastH);
};
canvas.app.hunt.view.FrameBorT.prototype.downHandler = function (mouseData) {
    canvas.EventManager.addEventListener(canvas.Event.STAGE_MOUSE_MOVE, null, this.moveHandler, this);
    canvas.EventManager.addEventListener(canvas.Event.STAGE_MOUSE_UP, null, this.upHandler, this);
    canvas.EventManager.addEventListener(canvas.Event.STAGE_MOUSE_OUT, null, this.upHandler, this);
    this.moveHandler({ params: { mouseData: mouseData } });
};
canvas.app.hunt.view.FrameBorT.prototype.upHandler = function () {
    canvas.EventManager.removeEventListener(canvas.Event.STAGE_MOUSE_MOVE, null, this.moveHandler, this);
    canvas.EventManager.removeEventListener(canvas.Event.STAGE_MOUSE_UP, null, this.upHandler, this);
    canvas.EventManager.removeEventListener(canvas.Event.STAGE_MOUSE_OUT, null, this.upHandler, this);
};
canvas.app.hunt.view.FrameBorT.prototype.moveHandler = function (event) {
    var point;
    if (event.params.mouseData.data) {
        point = event.params.mouseData.data.getLocalPosition(this.container);
    } else {
        point = this.container.toGlobal(new canvas.px.Point(0, 0));
        point.x = event.params.x - point.x;
        point.y = event.params.y - point.y;
    }
    point.x += 46;
    point.y += 12;
    this._xms = Math.round(point.x - this.selector.width * 0.5) + this._trapezeSize;
    this._yms = Math.round(point.y - this.selector.height * 0.5);
    this.updateFocus();
};
canvas.app.hunt.view.FrameBorT.prototype.updateFocus = function () {
    var conf = canvas.app.hunt.model;
    this.baseLnk.fld_current.setPos(Math.round(((87 - this.heightKoeff * 25 - this._xms) / this.WIDTH) * conf.sizeX), Math.round(((9 - this._yms) / this.HEIGHT) * conf.sizeY));
};
canvas.app.hunt.view.FrameCornerTL = function (base_lnk) {
    canvas.px.Container.call(this);
    this.baseLnk = base_lnk;
    var bg = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "left_corner_back")));
    bg.y = 13;
    this.addChild(bg);
    this.info = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_10_BOLD, 5255716, 170, 18, "center");
    this.info.position.set(52, 36);
    this.addChild(this.info);
    this.button = new canvas.ui.SimpleButton(canvas.px.TextureEmpty);
    this.button.position.set(3, 12);
    this.hint = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD_STROKE, 16770730, 170, 18, "center");
    this.hint.position.set(-60, 62);
    this.hint.alpha = 0;
    this.addChild(this.hint);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.button, this.clickHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_OVER, this.button, this.overHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_OUT, this.button, this.outHandler, this);
    this.deactivate();
};
canvas.app.hunt.view.FrameCornerTL.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.hunt.view.FrameCornerTL.prototype.deactivate = function () {
    if (this.contains(this.button)) this.removeChild(this.button);
    this.info.text = canvas.Translator.getText(417);
    this.id = -1;
    this.outHandler();
};
canvas.app.hunt.view.FrameCornerTL.prototype.activate = function (id, title) {
    if (!this.contains(this.button)) this.addChild(this.button);
    switch (id) {
        case 0:
            this.button.baseTexture = this.button.sprite.texture = canvas.ResourceLoader.getImage("ui", "left_corner_icon_use");
            this.hint.text = this.info.text = title ? title : canvas.Translator.getText(440);
            break;
        case 1:
            this.button.baseTexture = this.button.sprite.texture = canvas.ResourceLoader.getImage("ui", "left_corner_icon_cut");
            this.hint.text = this.info.text = title ? title : canvas.Translator.getText(420);
            break;
        case 2:
            this.button.baseTexture = this.button.sprite.texture = canvas.ResourceLoader.getImage("ui", "left_corner_icon_mine");
            this.hint.text = this.info.text = title ? title : canvas.Translator.getText(419);
            break;
        case 3:
            this.button.baseTexture = this.button.sprite.texture = canvas.ResourceLoader.getImage("ui", "left_corner_icon_attack");
            this.hint.text = this.info.text = title ? title : canvas.Translator.getText(422);
            break;
        case 4:
            this.button.baseTexture = this.button.sprite.texture = canvas.ResourceLoader.getImage("ui", "left_corner_icon_fish");
            this.hint.text = this.info.text = title ? title : canvas.Translator.getText(421);
            break;
        default:
            this.button.baseTexture = this.button.sprite.texture = canvas.px.TextureEmpty;
            this.hint.text = this.info.text = "";
    }
    this.id = id;
};
canvas.app.hunt.view.FrameCornerTL.prototype.overHandler = function () {
    this.direction = true;
    canvas.EventManager.addEventListener(canvas.app.hunt.Event.ENTER_FRAME, null, this.frameHandler, this);
};
canvas.app.hunt.view.FrameCornerTL.prototype.outHandler = function () {
    this.direction = false;
    canvas.EventManager.addEventListener(canvas.app.hunt.Event.ENTER_FRAME, null, this.frameHandler, this);
};
canvas.app.hunt.view.FrameCornerTL.prototype.frameHandler = function () {
    if (this.direction) {
        this.hint.alpha += 0.2;
        if (this.hint.alpha >= 1) {
            this.hint.alpha = 1;
            canvas.EventManager.removeEventListener(canvas.app.hunt.Event.ENTER_FRAME, null, this.frameHandler, this);
        }
    } else {
        this.hint.alpha -= 0.2;
        if (this.hint.alpha <= 0) {
            this.hint.alpha = 0;
            canvas.EventManager.removeEventListener(canvas.app.hunt.Event.ENTER_FRAME, null, this.frameHandler, this);
        }
    }
};
canvas.app.hunt.view.FrameCornerTL.prototype.clickHandler = function () {
    this.baseLnk.apply_control_btn(this.id, 1);
};
canvas.app.hunt.view.FrameCornerTR = function (base_lnk) {
    canvas.px.Container.call(this);
    this.baseLnk = base_lnk;
    this.red = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "right_corner_back_red"));
    this.red.position.set(212, 5);
    this.addChild(this.red);
    this.pic_mask = new canvas.px.Graphics();
    this.pic_mask.beginFill(65535, 1);
    this.pic_mask.drawCircle(239, 32, 26);
    this.addChild(this.pic_mask);
    this.pic_btn = new canvas.ui.SimpleButton(canvas.px.TextureEmpty);
    this.pic_btn.position.set(213, 6);
    this.pic = new canvas.ui.Image();
    this.pic.mask = this.pic_mask;
    this.pic_btn.visible = false;
    this.pic_btn.sprite.addChild(this.pic);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.pic_btn, this.picClickhandler, this);
    this.bg = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "right_corner_back"));
    this.bg.position.set(63, -6);
    this.addChild(this.bg);
    this.button = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "right_corner_back_button"));
    this.button.position.set(this.bg.x + this.bg.width - 25, this.bg.y + 8);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_OVER, this.button, this.mouseOverHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_OUT, this.button, this.mouseOutHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.button, this.exitClickHandler, this);
    this.addChild(this.button);
    this.infoBack = new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "right_corner_info_back"), 12, 0, 0, 0);
    this.infoBack.width = 160;
    this.infoBack.position.set(14, 25);
    this.addChild(this.infoBack);
    this.hint = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD_STROKE, 16770730, 120, 18, "center");
    this.hint.position.set(this.button.x - 40, this.button.y + this.button.height);
    this.hint.text = canvas.Translator.getText(152);
    this.hint.alpha = 0;
    this.name_tf = new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_10_BOLD, canvas.Const.FONT_TAHOMA_10_BOLD, 5255716, 158, 18, "center");
    this.name_tf.position.set(22, 27);
    this.addChild(this.name_tf);
    this.infoWord = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_10, 14130262, 148, 17, "center");
    this.infoWord.position.set(72, 11);
    this.infoWord.text = canvas.Translator.getText(243);
    this.addChild(this.infoWord);
    this.info_tf = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_10_BOLD_STROKE, 16777215, 148, 17, "center");
    this.info_tf.position.set(72, 42);
    this.addChild(this.info_tf);
    this.level_tf = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD, 0, 27, 18, "center");
    this.level_tf.position.set(183, 27);
    this.addChild(this.level_tf);
    this.update_obj_info(null);
    this.addChild(this.pic_btn);
    this.addChild(this.hint);
    canvas.EventManager.addEventListener(canvas.ui.HtmlTextEvent.EVENT_LINK, this.name_tf, this.picClickhandler, this);
};
canvas.app.hunt.view.FrameCornerTR.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.hunt.view.FrameCornerTR.prototype.mouseOverHandler = function () {
    this.direction = true;
    canvas.EventManager.addEventListener(canvas.app.hunt.Event.ENTER_FRAME, null, this.frameHandler, this);
};
canvas.app.hunt.view.FrameCornerTR.prototype.mouseOutHandler = function () {
    this.direction = false;
    canvas.EventManager.addEventListener(canvas.app.hunt.Event.ENTER_FRAME, null, this.frameHandler, this);
};
canvas.app.hunt.view.FrameCornerTR.prototype.exitClickHandler = function () {
    canvas.Functions.navigateToURL("area.php?exit=1", "main");
};
canvas.app.hunt.view.FrameCornerTR.prototype.picClickhandler = function () {
    if (this.curObj.type == "bot") {
        showBotInfo(this.curObj.id);
    } else if (this.curObj.type == "farm") {
        showArtifactInfo(false, this.curObj.artikul_id);
    }
};
canvas.app.hunt.view.FrameCornerTR.prototype.frameHandler = function () {
    if (this.direction) {
        this.hint.alpha += 0.2;
        if (this.hint.alpha >= 1) {
            this.hint.alpha = 1;
            canvas.EventManager.removeEventListener(canvas.app.hunt.Event.ENTER_FRAME, null, this.frameHandler, this);
        }
    } else {
        this.hint.alpha -= 0.2;
        if (this.hint.alpha <= 0) {
            this.hint.alpha = 0;
            canvas.EventManager.removeEventListener(canvas.app.hunt.Event.ENTER_FRAME, null, this.frameHandler, this);
        }
    }
};
canvas.app.hunt.view.FrameCornerTR.prototype.update_obj_info = function (curObj_lnk) {
    var conf = canvas.app.hunt.model;
    this.curObj = curObj_lnk;
    if (this.curObj == null) {
        this.name_tf.text = canvas.Translator.getText(418);
        this.info_tf.text = "";
        this.level_tf.text = "";
        this.pic_btn.visible = false;
        return;
    }
    this.pic_btn.visible = true;
    if (this.curObj.name.length > 24) {
        this.name_tf.text = this.curObj.name.substr(0, 22) + "...";
    } else {
        this.name_tf.text = this.curObj.name;
    }
    this.name_tf.text += " <a href='event:info'><img src='info_button_0' atlas='ui' yOffset='1'/></a>";
    var pic_key;
    if (this.curObj.type == "bot") {
        var agr = parseInt(this.curObj.agrlevel);
        this.info_tf.color = conf.getBotnameColor(agr);
        this.info_tf.text = conf.getAgrlevelText(agr);
        this.level_tf.text = this.curObj.level;
        pic_key = conf.PicPath + this.curObj.pic;
    } else if (this.curObj.type == "farm") {
        var con = conf.farm_conf[this.curObj.quality];
        this.info_tf.color = con[0];
        this.info_tf.text = con[1];
        this.level_tf.text = this.curObj.skill;
        pic_key = conf.FarmPicPath + this.curObj.pic;
    } else {
    }
    if (pic_key) {
        this.pic.setImage(pic_key);
    }
};
canvas.app.hunt.view.ScrollH = function (wheelTarget) {
    var minus = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "png_scroll_h_left"));
    var plus = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "png_scroll_h_right"));
    var drag = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "png_scroll_h_drag"), [3, 0, 3, 0]);
    drag.setSize(40, 0);
    this.drag = drag;
    var bg = new canvas.px.Mask(16, 16, 14401949, 1);
    canvas.ui.Scroll.call(this, canvas.ui.ScrollType.HORIZONTAL, minus, plus, bg, drag, wheelTarget, true, false);
    this.padding = 15;
    this.step = 50;
    this.max = 600;
};
canvas.app.hunt.view.ScrollH.prototype = Object.create(canvas.ui.Scroll.prototype);
canvas.app.hunt.view.ScrollH.prototype.set_full_width = function (he) {
    this.full = he;
};
canvas.app.hunt.view.ScrollH.prototype.set_visible_width = function (he) {
    if (this.he == he) {
        return;
    }
    this.he = he;
    this.setSize(this.he, 16);
    this.max = this.full - this.he;
    var pc = this.he / this.full;
    this.visible = pc < 1;
    this.drag.setSize(Math.round((this.he - (16 + 16)) * pc));
    this.current = this.current;
};
canvas.app.hunt.view.ScrollV = function (wheelTarget, dragTarget) {
    var minus = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "png_scroll_v_up"));
    var plus = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "png_scroll_v_down"));
    var drag = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "png_scroll_v_drag"), [0, 3, 0, 3]);
    drag.setSize(0, 40);
    this.drag = drag;
    var bg = new canvas.px.Mask(16, 16, 14401949, 1);
    canvas.ui.Scroll.call(this, canvas.ui.ScrollType.VERTICAL, minus, plus, bg, drag, wheelTarget, true, true, undefined, undefined, dragTarget);
    this.padding = 15;
    this.step = 50;
    this.max = 600;
};
canvas.app.hunt.view.ScrollV.prototype = Object.create(canvas.ui.Scroll.prototype);
canvas.app.hunt.view.ScrollV.prototype.set_full_height = function (he) {
    this.full = he;
};
canvas.app.hunt.view.ScrollV.prototype.set_visible_height = function (he) {
    if (this.he == he) {
        return;
    }
    this.he = he;
    this.setSize(16, this.he);
    this.max = this.full - this.he;
    var pc = this.he / this.full;
    this.visible = pc < 1;
    this.drag.setSize(0, Math.round((this.he - (16 + 16)) * pc));
    this.current = this.current;
};
canvas.app.hunt.view.TreasureControl = function () {
    canvas.ui.SimpleButton.call(this, canvas.ResourceLoader.getImage("ui", "icon_lupa_back"));
    this.timeField = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD, 16705718, 46, 20, "center");
    this.addChild(this.timeField);
    this.timeField.y = 30;
    canvas.EventManager.dispatchEvent(canvas.app.hunt.Event.HINT_ADD, null, { target: this, params: new canvas.utils.HintParams(new canvas.app.view.MappingHint(canvas.Translator.getText(438))) });
};
canvas.app.hunt.view.TreasureControl.prototype = Object.create(canvas.ui.SimpleButton.prototype);
canvas.app.hunt.view.TreasureControl.prototype.update = function () {
    var conf = canvas.app.hunt.model;
    this.timeField.text = canvas.Functions.formatDate(conf.treasureFinishTime * 1e3 - Date.now(), "00:00", 0, true);
};
canvas.app.hunt.view.WinCaptcha = function (baseLnk) {
    canvas.app.manor.view.WindowManorBase.call(this, 628, 333, canvas.Translator.getText(431));
    this.baseLnk = baseLnk;
    this.doneButton = new canvas.app.view.MainButton();
    this.addChild(this.doneButton);
    this.doneButton.setSize(150);
    this.doneButton.setTitle(canvas.Translator.getText(435));
    this.doneButton.x = 35;
    this.descriptionField = new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_12, canvas.Const.FONT_TAHOMA_12_BOLD, 7092268, 166, 224, "left");
    this.descriptionField.interactive = false;
    this.descriptionField.position.set(31, 80);
    this.addChild(this.descriptionField);
    this.captcha = new canvas.app.hunt.view.elements.Captcha();
    this.addChild(this.captcha);
    this.captcha.position.set(212, 42);
    this.aLoader = new canvas.utils.URLRequest();
    canvas.EventManager.addEventListener(canvas.utils.URLRequestEvent.EVENT_COMPLETE, this.aLoader, this.completeHandler, this);
    canvas.EventManager.addEventListener(canvas.utils.URLRequestEvent.EVENT_ERROR, this.aLoader, this.errorHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.doneButton, this.doneClickHandler, this);
};
canvas.app.hunt.view.WinCaptcha.prototype = Object.create(canvas.app.manor.view.WindowManorBase.prototype);
canvas.app.hunt.view.WinCaptcha.prototype.doneClickHandler = function (event) {
    var conf = canvas.app.hunt.model;
    var url = conf.reqURL + "?mode=farm&action=minigame_check&sequence=" + this.captcha.getResultString();
    this.aLoader.load(url);
    canvas.utils.WindowsManager.instance.closeWindow(this);
};
canvas.app.hunt.view.WinCaptcha.prototype.show = function (event) {
    var conf = canvas.app.hunt.model;
    this._isActive = true;
    if (this.timer) clearInterval(this.timer);
    this.timer = setInterval(this.timerHandler.bind(this), 1e3);
    var url = conf.reqURL + "?mode=farm&action=minigame_get";
    canvas.EventManager.addEventListener(canvas.ResourceLoader.EVENT_COMPLETE, null, this.handlerImageLoaded, this);
    var texture = canvas.ResourceLoader.getTexture("captcha");
    if (texture) {
        texture.destroy(true);
        canvas.ResourceLoader.remove("captcha");
    }
    canvas.ResourceLoader.add([["captcha", url, { xhrType: canvas.px.ResponseType.BLOB, loadType: canvas.px.LoadType.IMAGE }]]);
    this.timerHandler();
    canvas.app.manor.view.WindowManorBase.prototype.show.call(this, event);
};
canvas.app.hunt.view.WinCaptcha.prototype.hide = function (event) {
    canvas.EventManager.removeEventListener(canvas.ResourceLoader.EVENT_COMPLETE, null, this.handlerImageLoaded, this);
    this._isActive = false;
    if (this.timer) clearInterval(this.timer);
    this.captcha.clear();
    this.baseLnk.field_unlock();
    canvas.app.manor.view.WindowManorBase.prototype.hide.call(this, event);
};
canvas.app.hunt.view.WinCaptcha.prototype.handlerImageLoaded = function () {
    canvas.EventManager.removeEventListener(canvas.ResourceLoader.EVENT_COMPLETE, null, this.handlerImageLoaded, this);
    this.initCaptcha();
};
canvas.app.hunt.view.WinCaptcha.prototype.initCaptcha = function () {
    var sprite;
    var a = new Array();
    var b;
    var texture;
    if (this.images) {
        for (var k = 0; k < this.images.length; k++) {
            this.images[k].texture.destroy(true);
        }
    }
    this.images = new Array();
    for (var i = 0; i < canvas.app.hunt.Const.CAPTCHA_HEIGHT; i++) {
        for (var j = 0; j < canvas.app.hunt.Const.CAPTCHA_WIDTH; j++) {
            texture = new canvas.px.Texture(
                canvas.ResourceLoader.getTexture("captcha"),
                new canvas.px.Rectangle(j * canvas.app.hunt.Const.CAPTCHA_CELL_SIZE, i * canvas.app.hunt.Const.CAPTCHA_CELL_SIZE, canvas.app.hunt.Const.CAPTCHA_CELL_SIZE, canvas.app.hunt.Const.CAPTCHA_CELL_SIZE)
            );
            sprite = new canvas.px.Sprite(texture);
            this.images.push(sprite);
            sprite.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "captcha_cell")));
        }
    }
    this.captcha.init(this.images, canvas.app.hunt.Const.CAPTCHA_WIDTH, canvas.app.hunt.Const.CAPTCHA_HEIGHT, canvas.app.hunt.Const.CAPTCHA_CELL_SIZE, canvas.app.hunt.Const.CAPTCHA_CELL_SIZE);
};
canvas.app.hunt.view.WinCaptcha.prototype.updateTime = function () {
    var secondsLeft = 0;
    var conf = canvas.app.hunt.model;
    if (conf.captchaFinishTime > 0) {
        secondsLeft = Math.round((conf.captchaFinishTime - Date.now()) * 0.001);
    }
    if (secondsLeft < 1) {
        canvas.utils.WindowsManager.instance.closeWindow(this);
        return;
    }
    this.descriptionField.text = canvas.Translator.getText(432) + "<br/><br/>" + canvas.Translator.getText(433) + ": <b>" + secondsLeft + "</b> " + canvas.Translator.getText(434);
    this.doneButton.y = this.descriptionField.y + this.descriptionField.textHeight + 20;
};
canvas.app.hunt.view.WinCaptcha.prototype.timerHandler = function () {
    this.updateTime();
};
canvas.app.hunt.view.WinCaptcha.prototype.completeHandler = function () {
    var doc = new DOMParser().parseFromString(this.aLoader.request.responseText, "text/xml");
    if (doc.firstChild.attributes.msg) {
        this.baseLnk.popup.show_message(doc.firstChild.attributes.msg.value, 16711680);
    }
};
canvas.app.hunt.view.WinCaptcha.prototype.errorHandler = function () {};
canvas.app.hunt.view.elements.AwardMsg = function (msg, url) {
    canvas.px.Container.call(this);
    this.msg = msg;
    this.url = url;
    this.m_awardTf = new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_11, canvas.Const.FONT_TAHOMA_11_BOLD, 16705718, 500, 20, "center", "top", 0, 0);
    this.m_awardCnt = new canvas.px.Graphics();
    this.m_awardTf.text = "<b>" + msg + "</b>";
    this.m_awardTf.y = 2;
    this.m_awardCnt.beginFill(1118481, 0.6);
    this.m_awardCnt.drawRoundedRect(Math.round((this.m_awardTf._width - this.m_awardTf.textWidth) * 0.5) - 11, 0, this.m_awardTf.textWidth + 20, this.m_awardTf._height - 2, 6);
    this.m_awardCnt.endFill();
    this.addChild(this.m_awardCnt);
    this.addChild(this.m_awardTf);
    this.interactive = true;
    this.buttonMode = true;
    this.click = this.awardClick.bind(this);
};
canvas.app.hunt.view.elements.AwardMsg.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.hunt.view.elements.AwardMsg.prototype.awardClick = function () {
    if (this.url) {
        canvas.Functions.navigateToURL(this.url, "_blank");
        canvas.Functions.destroyChildren(this);
        this.click = null;
    }
};
canvas.app.hunt.view.elements.BrilliantMsg = function (msg, url) {
    canvas.px.Container.call(this);
    this.m_brContainer = new canvas.px.Container();
    this.addChild(this.m_brContainer);
    this.msg = msg;
    this.url = url;
    this.m_brilliantTf = new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_11, canvas.Const.FONT_TAHOMA_11_BOLD, 16705718, 400, 20, "center");
    this.m_brilliantTf.interactive = false;
    this.unlinkBtn = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "close_ico"));
    this.m_brilliantTf.text = "<b>" + this.msg + " <img yOffset='6' src='" + canvas.app.location.Const.BRILLIANT_IMAGE_PATH + "'/></b>";
    this.unlinkBtn.position.set(Math.round((this.m_brilliantTf._width - this.m_brilliantTf.textWidth) * 0.5) + this.m_brilliantTf.textWidth + 0, 3);
    this.m_brBg = new canvas.px.Graphics();
    this.m_brBg.beginFill(1118481, 0.6);
    this.m_brBg.drawRoundedRect(Math.round((this.m_brilliantTf._width - this.m_brilliantTf.textWidth) * 0.5) - 11, 0, this.m_brilliantTf.textWidth + 30, this.m_brilliantTf._height, 6);
    this.m_brBg.endFill();
    this.m_brContainer.addChildAt(this.m_brBg, 0);
    this.m_brBg.buttonMode = true;
    this.m_brBg.interactive = true;
    this.m_brContainer.addChild(this.m_brilliantTf);
    this.m_brContainer.addChild(this.unlinkBtn);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.unlinkBtn, this.onCloseBrillContainer, this);
    this._width = 400;
    this.m_brBg.click = this.brClick.bind(this);
};
canvas.app.hunt.view.elements.BrilliantMsg.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.hunt.view.elements.BrilliantMsg.prototype.onCloseBrillContainer = function () {
    canvas.Functions.destroyChildren(this);
    this.m_brBg.click = null;
    canvas.EventManager.removeEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.unlinkBtn, this.onCloseBrillContainer, this);
};
canvas.app.hunt.view.elements.BrilliantMsg.prototype.brClick = function () {
    if (this.url) {
        canvas.Functions.navigateToURL(this.url, "_blank");
    }
};
canvas.app.hunt.view.elements.Captcha = function () {
    canvas.px.Container.call(this);
    this._dragIndex = -1;
    this.mousedown = this.downHandler.bind(this);
    this.interactive = true;
};
canvas.app.hunt.view.elements.Captcha.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.hunt.view.elements.Captcha.prototype.init = function (images, sizeX, sizeY, w, h) {
    if (sizeX == undefined) sizeX = 3;
    if (sizeY == undefined) sizeX = 2;
    if (w == undefined) w = 10;
    if (h == undefined) h = 10;
    var i;
    var j;
    var k = 0;
    this.removeChildren();
    this._images = images;
    this._sizeX = sizeX;
    this._sizeY = sizeY;
    this._w = w;
    this._h = h;
    for (i = 0; i < this._sizeY; i++) {
        for (j = 0; j < this._sizeX; j++) {
            if (this._images[k] != undefined) {
                this.addChild(this._images[k]);
                this._images[k].name = k.toString();
                this._images[k].interactive = true;
                this._images[k].buttonMode = true;
                this._images[k].y = i * this._w;
                this._images[k].x = j * this._h;
            }
            k++;
        }
    }
};
canvas.app.hunt.view.elements.Captcha.prototype.getResultString = function () {
    var d;
    var len = this._images.length;
    var i;
    var result = "";
    for (i = 0; i < len; i++) {
        d = this._images[i];
        result += (result == "" ? "" : ",") + d.name;
    }
    return result;
};
canvas.app.hunt.view.elements.Captcha.prototype.downHandler = function (event) {
    var sprite = event.target;
    var i = this._images.indexOf(event.target);
    if (sprite != null && i >= 0) {
        var point = sprite.toLocal(new canvas.px.Point(event.data.global.x, event.data.global.y));
        this._dragIndex = i;
        sprite.startDrag(point, new canvas.px.Rectangle(0, 0, this._w * (this._sizeX - 1), this._h * (this._sizeY - 1)));
        sprite.interactive = false;
        this.setChildIndex(sprite, this.numChildren - 1);
        canvas.EventManager.addEventListener(canvas.Event.STAGE_MOUSE_UP, null, this.upHandler, this);
        this.mouseup = this.upHandler.bind(this);
    }
};
canvas.app.hunt.view.elements.Captcha.prototype.upHandler = function (event) {
    var sprite;
    var target;
    var d;
    var i = -1;
    if (event != null) i = this._images.indexOf(event.target);
    sprite = this._images[this._dragIndex];
    if (i >= 0 && i != this._dragIndex) {
        target = this._images[i];
        this._images[i] = sprite;
        this._images[this._dragIndex] = target;
    }
    canvas.EventManager.removeEventListener(canvas.Event.STAGE_MOUSE_UP, null, this.upHandler, this);
    this.mouseup = null;
    if (sprite != null) {
        sprite.interactive = true;
        sprite.stopDrag();
        this._dragIndex = -1;
    }
    this.updateImages();
};
canvas.app.hunt.view.elements.Captcha.prototype.updateImages = function () {
    var i;
    var j;
    var k = 0;
    for (i = 0; i < this._sizeY; i++) {
        for (j = 0; j < this._sizeX; j++) {
            if (this._images[k] != undefined) {
                if (this._dragIndex != k) {
                    this._images[k].y = i * this._w;
                    this._images[k].x = j * this._h;
                }
            }
            k++;
        }
    }
};
canvas.app.hunt.view.elements.Captcha.prototype.clear = function () {
    if (this._images != null) this.upHandler(null);
    this.removeChildren();
};
canvas.app.hunt.view.elements.CircleBorder = function (size, borderSize, color, alpha, shadow) {
    canvas.px.Graphics.call(this);
    if (size == undefined) size = 20;
    if (borderSize == undefined) borderSize = 4;
    if (color == undefined) color = 16711680;
    if (alpha == undefined) alpha = 1;
    if (shadow == undefined) shadow = true;
    if (shadow) {
        this.lineStyle(borderSize, 0, alpha);
        this.drawCircle(0, 2, size);
    }
    this.lineStyle(borderSize, color, alpha);
    this.drawCircle(0, 0, size);
    var msk = new canvas.px.Graphics();
    msk.lineStyle(borderSize, color, alpha);
    msk.drawCircle(0, 0, size);
    this.addChild(msk);
    this.gradient = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "gradient_circle"));
    this.addChild(this.gradient);
    this.gradient.width = this.gradient.height = Math.round(size * 2.3);
    this.gradient.position.set(-Math.round(this.gradient.width * 0.5), -Math.round(this.gradient.height * 0.5));
    this.gradient.mask = msk;
};
canvas.app.hunt.view.elements.CircleBorder.prototype = Object.create(canvas.px.Graphics.prototype);
canvas.app.hunt.view.elements.MapPers = function () {
    canvas.px.Container.call(this);
    this.bmp_circle = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "png_map_circle"));
    this.bmp_player = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "png_map_player"));
    this.bmp_circle.position.set(-Math.floor(this.bmp_circle.width / 2), -Math.floor(this.bmp_circle.height / 2));
    this.bmp_player.position.set(-Math.floor(this.bmp_player.width / 2), -Math.floor(this.bmp_player.height / 2));
    this.circle = new canvas.px.Container();
    this.circle.addChild(this.bmp_circle);
    this.addChild(this.circle);
    this.addChild(this.bmp_player);
    canvas.EventManager.addEventListener(canvas.app.hunt.Event.ENTER_FRAME, null, this.frameHandler, this);
};
canvas.app.hunt.view.elements.MapPers.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.hunt.view.elements.MapPers.prototype.frameHandler = function () {
    this.circle.rotation += 1;
};
canvas.app.inst.Event = { ENTER_FRAME: "Inst.ENTER_FRAME", HINT_ADD: "Inst.HINT_ADD", HINT_REMOVE: "Inst.HINT_REMOVE", UPDATE_USERS: "Inst.UPDATE_USERS" };
canvas.app.inst.Main = function (model, hintManager) {
    canvas.px.Container.call(this);
    this.model = model;
    this.hintManager = hintManager;
    canvas.EventManager.addEventListener(canvas.app.inst.Event.HINT_ADD, null, this.handlerHintAdd, this);
    canvas.EventManager.addEventListener(canvas.app.inst.Event.HINT_REMOVE, null, this.handlerHintRemove, this);
    canvas.EventManager.addEventListener(canvas.Event.STAGE_KEY_DOWN, null, this.handlerKey, this);
    canvas.EventManager.addEventListener(canvas.Event.STAGE_KEY_UP, null, this.handlerKeyUp, this);
    this.view = new canvas.app.inst.View(this);
    this.hintContainer = new canvas.px.Container();
    this.hintContainer.interactive = true;
    this.addChild(this.view);
    this.addChild(this.hintContainer);
    this.timer = setTimeout(this.refresh_users.bind(this), this.model.UpdInterval);
    this.request = new canvas.utils.URLRequest();
    canvas.EventManager.addEventListener(canvas.utils.URLRequestEvent.EVENT_COMPLETE, this.request, this.completeHandler, this);
    canvas.EventManager.addEventListener(canvas.utils.URLRequestEvent.EVENT_ERROR, this.request, this.errorHandler, this);
    canvas.EventManager.addEventListener(canvas.app.inst.Event.UPDATE_USERS, null, this.update_users, this);
    this.refresh_users();
};
canvas.app.inst.Main.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.inst.Main.prototype.handlerKey = function (event) {
    if (document.activeElement && document.activeElement.constructor.name == "HTMLInputElement") return;
    var keyCode = event.params.globalKeyCode;
    var altKey = event.params.altKey;
    var ctrlKey = event.params.ctrlKey;
    var shiftKey = event.params.shiftKey;
    switch (keyCode) {
        case canvas.Const.KEYS.L:
            if (shiftKey) {
                canvas.Log.show(canvas.Log.INST);
            }
            break;
        case canvas.Const.KEYS.LEFT_ARROW:
        case canvas.Const.KEYS.UP_ARROW:
        case canvas.Const.KEYS.RIGHT_ARROW:
        case canvas.Const.KEYS.DOWN_ARROW:
            this.model.keyData[keyCode] = true;
            if (!this.model.keyProcssor) {
                this.model.keyProcssor = true;
                canvas.EventManager.addEventListener(canvas.app.inst.Event.ENTER_FRAME, null, this.repeatKeyHandler, this);
            }
            break;
    }
};
canvas.app.inst.Main.prototype.handlerKeyUp = function (event) {
    if (document.activeElement && document.activeElement.constructor.name == "HTMLInputElement") return;
    event.params.preventDefault();
    var keyCode = event.params.keyCode;
    var altKey = event.params.altKey;
    var ctrlKey = event.params.ctrlKey;
    var shiftKey = event.params.shiftKey;
    switch (keyCode) {
        case canvas.Const.KEYS.LEFT_ARROW:
        case canvas.Const.KEYS.UP_ARROW:
        case canvas.Const.KEYS.RIGHT_ARROW:
        case canvas.Const.KEYS.DOWN_ARROW:
            if (this.model.keyData[keyCode]) {
                delete this.model.keyData[keyCode];
            }
            break;
    }
};
canvas.app.inst.Main.prototype.resize = function (w, h) {
    var ww = this.get_ww(w);
    var hh = this.get_hh(h);
    this.hintManager.init(this.hintContainer, ww, hh);
    this.model.width = ww;
    this.model.height = hh;
    this.view.resize(ww, hh);
};
canvas.app.inst.Main.prototype.get_ww = function (ww) {
    var conf = this.model;
    if (ww < conf.min_stage_width) {
        this.x = 0;
        return conf.min_stage_width;
    } else if (ww > conf.max_stage_width) {
        this.x = Math.round((ww - conf.max_stage_width) / 2);
        return conf.max_stage_width;
    } else {
        this.x = 0;
    }
    return ww;
};
canvas.app.inst.Main.prototype.get_hh = function (hh) {
    var conf = this.model;
    if (hh < conf.min_stage_height) {
        this.y = 0;
        return conf.min_stage_height;
    } else if (hh > conf.max_stage_height) {
        this.y = Math.round((hh - conf.max_stage_height) / 2);
        return conf.max_stage_height;
    } else {
        this.y = 0;
    }
    return hh;
};
canvas.app.inst.Main.prototype.handlerHintAdd = function (e) {
    this.hintManager.add(e.params.target, e.params.params);
};
canvas.app.inst.Main.prototype.handlerHintRemove = function (e) {
    this.hintManager.remove(e.params.target);
};
canvas.app.inst.Main.prototype.swfObject = function (data) {
    var str;
    var conf = canvas.app.inst.model;
    if (data) {
        for (str in data) {
            switch (str) {
            }
        }
    }
};
canvas.app.inst.Main.prototype.repeatKeyHandler = function () {
    var k;
    var cnt = 0;
    for (k in this.model.keyData) {
        switch (parseInt(k)) {
            case canvas.Const.KEYS.LEFT_ARROW:
                this.view.scroll_H.minusClickHandler();
                cnt++;
                break;
            case canvas.Const.KEYS.UP_ARROW:
                this.view.scroll_V.minusClickHandler();
                cnt++;
                break;
            case canvas.Const.KEYS.RIGHT_ARROW:
                this.view.scroll_H.plusClickHandler();
                cnt++;
                break;
            case canvas.Const.KEYS.DOWN_ARROW:
                this.view.scroll_V.plusClickHandler();
                cnt++;
                break;
            default:
                break;
        }
    }
    if (cnt == 0) {
        this.model.keyProcssor = false;
        canvas.EventManager.removeEventListener(canvas.app.inst.Event.ENTER_FRAME, null, this.repeatKeyHandler, this);
    }
};
canvas.app.inst.Main.prototype.setPoint = function () {};
canvas.app.inst.Main.prototype.refresh_users = function () {
    var conf = this.model;
    if (conf.locked_user_update) {
        return;
    }
    var cur_time = Date.now();
    var delta = cur_time - conf.last_user_update;
    if (delta > 2500) {
        clearTimeout(this.timer);
        conf.last_user_update = cur_time;
        conf.locked_user_update = true;
        this.request.load(conf.UpdLink + conf.UpdAmp + "inst_id=" + conf.ActiveIns);
    } else {
    }
};
canvas.app.inst.Main.prototype.completeHandler = function () {
    var conf = this.model;
    conf.USERS = conf.parse_users(new DOMParser().parseFromString(this.request.request.responseText, "text/xml"));
    if (conf.ActiveLocationChanged) {
        conf.ActiveLocationChanged = false;
        this.view.map.refresh_pers_flag();
    }
    this.update_users();
    this.errorHandler();
};
canvas.app.inst.Main.prototype.errorHandler = function () {
    var conf = this.model;
    conf.locked_user_update = false;
    this.timer = setTimeout(this.refresh_users.bind(this), this.model.UpdInterval);
};
canvas.app.inst.Main.prototype.update_users = function () {
    var conf = this.model;
    if (!conf.USERS) return;
    var g;
    var loc;
    var flagUser = null;
    for (g in conf.AREA.locations) {
        loc = conf.AREA.locations[g];
        if (loc.players_object == null) {
            continue;
        }
        if (conf.USERS[g] != null) {
            if (conf.USERS[g].length > 0) {
                this.view.map.add_inner_object(loc.players_object);
                loc.players_object.pl_list = conf.USERS[g];
                loc.players_object.pl_update_mark();
                flagUser = this.usersHasFlag(conf.USERS[g]);
                if (flagUser != null) {
                    loc.players_object.showFlag(conf.USERS[g].length > 1, false, flagUser);
                } else {
                    loc.players_object.showFlag(false, true);
                }
            } else {
                this.remove_player_object(loc.players_object);
                loc.players_object.pl_list = null;
            }
        } else {
            this.remove_player_object(loc.players_object);
        }
    }
};
canvas.app.inst.Main.prototype.usersHasFlag = function (a) {
    if (a.length < 1) return null;
    var userData;
    var len = a.length;
    for (var i = 0; i < len; i++) {
        userData = a[i];
        if (userData.hasFlag) return userData;
    }
    return null;
};
canvas.app.inst.Main.prototype.remove_player_object = function (obj) {
    if (obj == null) return;
    if (obj.parent == null) return;
    obj.parent.removeChild(obj);
};
canvas.app.inst.Main.prototype.changeInst = function (data) {
    var conf = this.model;
    conf.ActiveIns = parseInt(data[2]);
    var cur_ins = conf.INS_LIST[conf.ActiveIns];
    canvas.EventManager.addEventListener(canvas.ResourceLoader.EVENT_COMPLETE, null, this.instLoaded, this);
    canvas.ResourceLoader.add([["map" + cur_ins.id, conf.LOCALE + "/ins_" + cur_ins.id + ".xml"]]);
};
canvas.app.inst.Main.prototype.instLoaded = function () {
    canvas.EventManager.removeEventListener(canvas.ResourceLoader.EVENT_COMPLETE, null, this.instLoaded, this);
    this.model.init();
    this.view.recreate();
};
canvas.app.inst.Model = function (par) {
    this.ListLink = par.ListLink == undefined ? "ins_list.xml" : par.ListLink;
    this.ResPath = par.ResPath == undefined ? "ins_res/" : par.ResPath;
    this.UpdLink = par.UpdLink == undefined ? "users.xml" : par.UpdLink;
    this.IsBold = true;
    this.UpdAmp = this.UpdLink.search(/\?/) == -1 ? "?" : "&";
    this.UpdInterval = par.UpdInterval == undefined ? 3e3 : parseInt(par.UpdInterval) * 1e3;
    if (this.UpdInterval < 3e3) this.UpdInterval = 3e3;
    this.ActiveIns = par.ActiveIns;
    this.race = par.user_kind == undefined ? 1 : parseInt(par.user_kind);
    this.level = par.user_level == undefined ? 1 : parseInt(par.user_level);
    this.min_stage_width = 199;
    this.min_stage_height = 483;
    this.max_stage_width_c = 54;
    this.max_stage_height_c = 44;
    this.ww = 3;
    this.hh = 3;
    this.map_width = 900;
    this.map_height = 900;
    this.ls_ww = 0;
    this.ls_hh = 0;
    this.isModule = false;
    this.keyData = {};
    this.locked_user_update = false;
    this.last_user_update = 0;
    this.ActiveLocationChanged = true;
};
canvas.app.inst.Model.prototype.initConfig = function () {
    var conf = this;
    conf.INS_LIST = {};
    conf.INS_LIST_AR = [];
    conf.INS_LIST_RT = {};
    var xml = canvas.ResourceLoader.get("config").data;
    var list = xml.getElementsByTagName("item");
    var len = list.length;
    var item;
    for (var i = 0; i < len; i++) {
        var attr = list[i].attributes;
        if (
            attr.id != null &&
            attr.root_id != null &&
            (attr.race == undefined || conf.race == parseInt(attr.race.value)) &&
            (attr.minLevel == undefined || conf.level >= parseInt(attr.minLevel.value)) &&
            (attr.maxLevel == undefined || conf.level <= parseInt(attr.maxLevel.value))
        ) {
            conf.INS_LIST[attr.root_id.value] = {};
            item = conf.INS_LIST[attr.root_id.value];
            item.id = attr.id.value;
            item.root_id = attr.root_id.value;
            item.title = list[i].childNodes[0].nodeValue;
            item.race = attr.race == undefined ? -1 : parseInt(attr.race.value);
            item.minLevel = attr.minLevel == undefined ? -1 : parseInt(attr.minLevel.value);
            item.maxLevel = attr.maxLevel == undefined ? -1 : parseInt(attr.maxLevel.value);
            conf.INS_LIST_RT[item.root_id] = item.id;
            conf.INS_LIST_AR.push([item.id, item.title, item.root_id, attr.hidden != undefined && attr.hidden.value == "1" ? true : false, item.race, item.minLevel, item.maxLevel]);
        }
    }
    var lnk = xml.getElementsByTagName("lnk");
    if (lnk.length > 0) {
        if (lnk[0].attributes.link_xml != undefined) {
            conf.LOCALE = lnk[0].attributes.link_xml.value;
        }
    }
    if (conf.ActiveIns == null || conf.ActiveIns == "0") {
        if (conf.INS_LIST_AR[0] != null) {
            conf.ActiveIns = conf.INS_LIST_AR[0][2];
        }
    }
};
canvas.app.inst.Model.prototype.init = function () {
    var conf = this;
    var cur_ins = conf.INS_LIST[conf.ActiveIns];
    var xml = canvas.ResourceLoader.get("map" + cur_ins.id).data;
    conf.AREA = null;
    conf.W_BOTS = {};
    var ins = xml.getElementsByTagName("ins")[0];
    var attr = ins.attributes;
    if (attr.width != null) {
        conf.ww = parseInt(attr.width.value);
        conf.map_width = conf.ww * 300;
        conf.max_stage_width = conf.max_stage_width_c + conf.map_width;
    } else {
    }
    if (attr.height != null) {
        conf.hh = parseInt(attr.height.value);
        conf.map_height = conf.hh * 300;
        conf.max_stage_height = conf.max_stage_height_c + conf.map_height;
    } else {
    }
    conf.AREA = { locations: {}, objects: [], locationClones: {} };
    conf.AREAS = [];
    conf.FlagArea = 1;
    conf.focusedAreaId = 1;
    conf.AREAS[conf.FlagArea] = conf.AREA;
    conf.AREAS[conf.focusedAreaId] = conf.AREA;
    var item = conf.AREA;
    item.id = conf.ActiveIns;
    item.src = "ins_" + conf.INS_LIST_RT[conf.ActiveIns];
    item.rect_x1 = 0;
    item.rect_y1 = 0;
    item.rect_x2 = 0;
    item.rect_y2 = 0;
    var list = xml.getElementsByTagName("location");
    var len = list.length;
    var inner_flag_pos;
    var locI;
    var a5;
    var a4;
    var a3;
    var i3;
    var i4;
    var nn4;
    for (var i = 0; i < len; i++) {
        var attr_loc = list[i].attributes;
        if (attr_loc.id != null) {
            if (attr_loc.inner_flag_pos != null) {
                inner_flag_pos = attr_loc.inner_flag_pos.value.split(",");
                if (inner_flag_pos.length == 2) {
                    item.locations[attr_loc.id.value] = {};
                    locI = item.locations[attr_loc.id.value];
                    locI.id = attr_loc.id.value;
                    locI.flag_pos_x = parseInt(inner_flag_pos[0]);
                    locI.flag_pos_y = parseInt(inner_flag_pos[1]);
                    if (attr_loc.clones != null) {
                        a5 = attr_loc.clones.value.split(",");
                        for (var cloneID in a5) {
                            item.locationClones[a5[cloneID]] = attr_loc.id.value;
                        }
                    }
                    a4 = list[i].childNodes;
                    for (i4 = 0; i4 < a4.length; i4++) {
                        nn4 = a4[i4].nodeName;
                        if (nn4 == "object") {
                            this.parse_object(item, a4[i4], "global", locI.id);
                        } else if (nn4 == "title") {
                            locI.title = a4[i4].childNodes[0].nodeValue;
                        } else if (nn4 == "players") {
                            if (a4[i4].attributes.inner_pos != null) {
                                var pos = a4[i4].attributes.inner_pos.value.split(",");
                                locI.players_x = parseInt(pos[0]);
                                locI.players_y = parseInt(pos[1]);
                            } else {
                                locI.players_x = 100 + Math.floor(Math.random() * 100);
                                locI.players_y = 100 + Math.floor(Math.random() * 100);
                            }
                        } else if (nn4 != null) {
                        }
                    }
                } else {
                }
            } else {
            }
        }
    }
    list = xml.getElementsByTagName("w_bot");
    var len = list.length;
    for (var i = 0; i < len; i++) {
        var attr_w_bot = list[i].attributes;
        if (attr_w_bot.w_id != null) {
            conf.W_BOTS[attr_w_bot.w_id.value] = [];
            a4 = list[i].childNodes;
            for (i4 = 0; i4 < a4.length; i4++) {
                nn4 = a4[i4].nodeName;
                if (nn4 == "nm") {
                    conf.W_BOTS[attr_w_bot.w_id.value].push(a4[i4].childNodes[0].nodeValue);
                } else if (nn4 != null) {
                }
            }
        } else {
        }
    }
    list = xml.getElementsByTagName("title");
    if (list.length > 0) {
        item.title = list[0].childNodes[0].nodeValue;
    }
    list = xml.getElementsByTagName("exit");
    if (list.length > 0) {
        item.exit_title = list[0].childNodes[0].nodeValue;
    }
    list = xml.getElementsByTagName("enter");
    if (list.length > 0) {
        item.enter_title = list[0].childNodes[0].nodeValue;
    }
    if (item.title == null) {
        item.title = "БЕЗ НАЗВАНИЯ";
    }
};
canvas.app.inst.Model.prototype.parse_object = function (item, dat, type, location_id) {
    var attr_obj = dat.attributes;
    if (attr_obj.id != null) {
        if (attr_obj.inner_pos != null) {
            var inner_pos = attr_obj.inner_pos.value.split(",");
            if (inner_pos.length == 2) {
                var len = item.objects.push({});
                var objI = item.objects[len - 1];
                objI.id = attr_obj.id.value;
                objI.xx = parseInt(inner_pos[0]);
                objI.yy = parseInt(inner_pos[1]);
                objI.type = type;
                objI.location_id = location_id;
                objI.items = [];
                var a4 = dat.childNodes;
                for (var i4 = 0; i4 < a4.length; i4++) {
                    switch (a4[i4].nodeName) {
                        case "title":
                            objI.title = a4[i4].childNodes[0].nodeValue;
                            break;
                        case "text":
                            objI.text = a4[i4].childNodes[0].nodeValue;
                            break;
                        case "item":
                            objI.items.push(a4[i4].childNodes[0].nodeValue);
                            break;
                        case "linkage":
                            var attr_linkage = a4[i4].attributes;
                            if (attr_linkage.locations != null) {
                                objI.linkage_locations = attr_linkage.locations.value.split(",");
                            } else {
                            }
                            objI.linkage_location_id = attr_linkage.location_id.value;
                            break;
                        case null:
                            break;
                        default:
                            break;
                    }
                }
            } else {
            }
        } else {
        }
    }
};
canvas.app.inst.Model.prototype.parse_users = function (xml) {
    var conf = this;
    var list = xml.getElementsByTagName("users");
    var i1;
    var i2;
    var i3;
    var a1;
    var a2;
    var a3;
    var attr;
    var id;
    var root_id;
    var out = {};
    var my_loc_id_found;
    var my_loc_root_id_found;
    var userData;
    a2 = list[0].childNodes;
    for (i2 = 0; i2 < a2.length; i2++) {
        if (a2[i2].nodeName == "my_loc") {
            if (a2[i2].attributes.id != null) {
                id = a2[i2].attributes.id.value;
                if (conf.AREA.locationClones[id] != undefined) id = conf.AREA.locationClones[id];
                my_loc_id_found = true;
                if (conf.ActiveLocation != id) {
                    conf.ActiveLocationChanged = true;
                    conf.ActiveLocation = id;
                }
            } else {
            }
            if (a2[i2].attributes.root_id != null) {
                root_id = a2[i2].attributes.root_id.value;
                my_loc_root_id_found = true;
            } else {
            }
        } else if (a2[i2].nodeName == "loc") {
            if (a2[i2].attributes.id != null) {
                id = a2[i2].attributes.id.value;
                if (conf.AREA.locationClones[id] != undefined) id = conf.AREA.locationClones[id];
                out[id] = [];
                a3 = a2[i2].childNodes;
                for (i3 = 0; i3 < a3.length; i3++) {
                    if (a3[i3].nodeName == "user") {
                        userData = {};
                        userData.nick = a3[i3].childNodes[0].nodeValue;
                        userData.hasFlag = a3[i3].attributes.is_flag != undefined && a3[i3].attributes.is_flag.value == "1";
                        out[id].push(userData);
                    }
                }
            } else {
            }
        }
    }
    if (!my_loc_id_found) {
        if (conf.ActiveLocation != null) {
            conf.ActiveLocationChanged = true;
            conf.ActiveLocation = null;
        }
    }
    if (!my_loc_root_id_found) {
        conf.ActiveInstRootId = null;
    } else {
        conf.ActiveInstRootId = root_id;
    }
    return out;
};
canvas.app.inst.View = function (main) {
    canvas.px.Container.call(this);
    var conf = canvas.app.inst.model;
    this.main = main;
    this.container = new canvas.px.Container();
    this.addChild(this.container);
    this.container.interactive = true;
    this.map_cont = new canvas.px.Container();
    this.map_cont.position.set(19, 14);
    this.container.addChild(this.map_cont);
    this.map_cont.interactive = true;
    this.map = new canvas.app.world.view.MapWorldParts(this, conf.map_width, conf.map_height, 1, conf.ResPath + "ins_" + conf.INS_LIST_RT[conf.ActiveIns] + "/map/ins_", true);
    this.map_state = new canvas.app.world.engine.MapStateObject(this);
    this.map_state.focus_map(this.map, 1);
    this.msk = new canvas.px.Mask(100, 100);
    this.msk.position.set(19, 14);
    this.addChild(this.msk);
    this.map_cont.mask = this.msk;
    this.scroll_V = new canvas.app.world.view.ScrollV(this.map_state, this.container);
    this.addChild(this.scroll_V);
    this.scroll_H = new canvas.app.world.view.ScrollH(this.map_state, this.map_cont);
    this.addChild(this.scroll_H);
    this.scroll_null = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "png_scroll_null"));
    this.addChild(this.scroll_null);
    this.borders = new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "curl"), 100, 142, 100, 142);
    this.addChild(this.borders);
    this.stat = new canvas.app.inst.view.StatView(this);
    this.addChild(this.stat);
    this.stat.x = 33;
    this.combo = new canvas.app.inst.view.combo.Combo();
    this.addChild(this.combo);
    this.set_labels();
    this.init_combo();
    this.map.focus_on_active_area();
    this.firstResize = true;
    canvas.EventManager.addEventListener(canvas.ui.ScrollEvent.EVENT_SCROLL, this.scroll_H, this.scrollHandlerH, this);
    canvas.EventManager.addEventListener(canvas.ui.ScrollEvent.EVENT_SCROLL, this.scroll_V, this.scrollHandlerV, this);
    canvas.EventManager.addEventListener(canvas.ui.ComboBoxEvent.EVENT_SELECT, this.combo, this.comboSelectHandler, this);
};
canvas.app.inst.View.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.inst.View.prototype.recreate = function () {
    var conf = canvas.app.inst.model;
    this.map.destroy({ children: true });
    this.map = new canvas.app.world.view.MapWorldParts(this, conf.map_width, conf.map_height, 1, conf.ResPath + "ins_" + conf.INS_LIST_RT[conf.ActiveIns] + "/map/ins_", true);
    this.map_state.focus_map(this.map, 1);
    this.map.focus_on_active_area();
    this.resize(true);
    this.refresh_scrollers();
};
canvas.app.inst.View.prototype.resize = function (force) {
    if (force == undefined) force = false;
    var conf = canvas.app.inst.model;
    var ww = conf.width;
    var hh = conf.height;
    this.borders.width = ww;
    this.borders.height = hh;
    var bool = false;
    if (conf.ls_ww != ww || force) {
        conf.ls_ww = ww;
        bool = true;
        this.scroll_V.position.set(ww - 35, 14);
        this.scroll_H.setSize(ww - 37, 16);
        this.map_state.set_visible_width(ww - 53);
        this.combo.x = ww - 207;
        this.msk.setSize(this.map_state.map_visible_width);
        this.scroll_H.refresh();
        this.scroll_null.x = ww - 35;
        this.label2.pos(ww);
        this.refresh_scrollers();
    }
    if (conf.ls_hh != hh || force) {
        conf.ls_hh = hh;
        this.stat.y = hh - 99;
        bool = true;
        this.scroll_H.position.set(18, hh - 30);
        this.scroll_V.setSize(16, hh - 28);
        this.map_state.set_visible_height(hh - 28);
        this.combo.y = hh - 54;
        this.msk.setSize(-1, this.map_state.map_visible_height);
        this.scroll_V.refresh();
        this.scroll_null.y = hh - 30;
        this.refresh_scrollers();
    }
    if (bool) {
        this.map_state.map_check();
    }
};
canvas.app.inst.View.prototype.set_labels = function () {
    var conf = canvas.app.inst.model;
    this.label1 = new canvas.app.inst.view.TopTextLeft();
    this.label1.position.set(28, 21);
    this.addChild(this.label1);
    var cur_area = "unknown";
    var cur_location = "unknown";
    var item = conf.AREA;
    if (item != null) {
        cur_area = item.title;
        if (item.locations[conf.ActiveLocation] != null) {
            cur_location = item.locations[conf.ActiveLocation].title;
        }
    }
    this.label1.set_line0(canvas.Translator.getText(207) + ":", cur_area, cur_location);
    this.label2 = new canvas.app.inst.view.TopTextRight();
    this.label2.position.set(400, 21);
    this.addChild(this.label2);
};
canvas.app.inst.View.prototype.init_combo = function () {
    var conf = canvas.app.inst.model;
    var list = [];
    var index = 0;
    for (var i = 0; i < conf.INS_LIST_AR.length; i++) {
        if (parseInt(conf.INS_LIST_AR[i][2]) == conf.ActiveIns) index = i;
        if (!conf.INS_LIST_AR[i][3]) {
            list.push(conf.INS_LIST_AR[i]);
        }
    }
    this.combo.init(list);
    this.combo.selectedIndex = index;
};
canvas.app.inst.View.prototype.testUpdate = function () {};
canvas.app.inst.View.prototype.refresh_scrollers = function () {
    this.scroll_H.refresh();
    this.scroll_V.refresh();
    this.scrollHandlerH();
    this.scrollHandlerV();
};
canvas.app.inst.View.prototype.scrollHandlerH = function () {
    if (!this.scroll_H.isDisabled()) {
        this.map_state.delta_map_x(this.scroll_H.current);
    } else {
        this.map_state.delta_map_x(0);
    }
};
canvas.app.inst.View.prototype.scrollHandlerV = function () {
    if (!this.scroll_V.isDisabled()) {
        this.map_state.delta_map_y(this.scroll_V.current);
    } else {
        this.map_state.delta_map_y(0);
    }
};
canvas.app.inst.View.prototype.comboSelectHandler = function (e) {
    this.main.changeInst(e.params);
};
canvas.app.inst.view.StatView = function (base_lnk) {
    canvas.px.Container.call(this);
    this.baseLnk = base_lnk;
    this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "png_stat_bg")));
    this.interactive = true;
    this.btn_refresh = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "refresh"));
    this.addChild(this.btn_refresh);
    this.btn_refresh.position.set(17, 6);
    this.btn_info = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "list_icon"));
    this.addChild(this.btn_info);
    this.btn_info.position.set(54, 6);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.btn_info, this.infoClickHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.btn_refresh, this.refreshClickHandler, this);
};
canvas.app.inst.view.StatView.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.inst.view.StatView.prototype.infoClickHandler = function () {
    var conf = canvas.app.inst.model;
    if (conf.ActiveInstRootId != null) {
        canvas.Functions.navigateToURL("instance_stat.php?instance_id=" + conf.ActiveInstRootId, "_blank");
    }
};
canvas.app.inst.view.StatView.prototype.refreshClickHandler = function () {
    this.baseLnk.main.refresh_users();
};
canvas.app.inst.view.TopTextLeft = function () {
    canvas.app.world.view.TopTextLeft.call(this);
};
canvas.app.inst.view.TopTextLeft.prototype = Object.create(canvas.app.world.view.TopTextLeft.prototype);
canvas.app.inst.view.TopTextLeft.prototype.set_line0 = function (head, txt1, txt2) {
    var conf = canvas.app.inst.model;
    this.line0 = head + " <img src='red_point' yOffset='1' atlas='world'/> <font color='#0xFFC600'>" + txt1 + "</font>";
    if (txt2 == undefined) {
        var item = conf.AREA;
        var cur_area = item.title;
        if (item.locations[conf.ActiveLocation] != null) {
            txt2 = item.locations[conf.ActiveLocation].title;
        }
    }
    if (txt2 != undefined) {
        this.line0 += " <img src='red_point' yOffset='1' atlas='world'/> <font color='#0xFFC600'>" + txt2 + "</font>";
    }
    this.update();
};
canvas.app.inst.view.TopTextLeft.prototype.set_line1 = function (head, txt, txt2) {
    this.set_line0(canvas.Translator.getText(207), txt, txt2);
};
canvas.app.inst.view.TopTextLeft.prototype.update = function () {
    this.field.text = this.line0 + "<br/>" + this.line2;
    this.redraw_bg();
    if (this.field.text != "") {
        this.addChild(this.field);
        this.visible = true;
    }
};
canvas.app.inst.view.TopTextRight = function () {
    canvas.app.world.view.TopTextRight.call(this);
};
canvas.app.inst.view.TopTextRight.prototype = Object.create(canvas.app.world.view.TopTextRight.prototype);
canvas.app.inst.view.TopTextRight.prototype.set_data = function (title, txt, list, bottomText, frontID, showFrontsHeader, bots) {
    this.sender = null;
    var conf = canvas.app.world.model;
    if (txt != undefined && list == undefined) {
        list = [txt];
        txt = "";
    }
    if (bottomText == undefined) bottomText = "";
    if (frontID == undefined) frontID = "";
    if (showFrontsHeader == undefined) showFrontsHeader = true;
    if (list != undefined && list.length == 0) list = null;
    if (bots == undefined) bots = "";
    this.deactivate();
    this.line0 = title ? title : "";
    this.line1 = txt ? "     <font color='#" + (list ? "FFC600" : "FFE1A2") + "'>" + txt + "</font>" : "";
    this.line2 = "";
    if (list) {
        for (var i = 0; i < list.length; i++) {
            this.line2 += (i == 0 ? "" : "<br/>") + "<img src='red_point' yOffset='1' atlas='world'/> <font color='#FFC600'>" + list[i] + "</font>";
        }
    }
    if (bots != "") {
        if (this.line2 != "") this.line2 += "<br/>";
        this.line2 += "<font color='#" + "FFE1A2" + "'>" + canvas.Translator.getText(100) + "</font><br/>";
        for (var i = 0; i < bots.length; i++) {
            this.line2 += (i == 0 ? "" : "<br/>") + "<img src='red_point' yOffset='1' atlas='world'/> <font color='#FFC600'>" + bots[i] + "</font>";
        }
    }
    if (bottomText) {
        this.lineBottom = "   <font color='#FFC600'>" + bottomText + "</font>";
    } else {
        this.lineBottom = "";
    }
    this.update();
    if (showFrontsHeader) {
        this.frontsContent.showHeader = true;
        this.frontsContent.y = this.field.textHeight + 5;
    } else {
        this.frontsContent.showHeader = false;
        this.frontsContent.y = -10;
    }
    if (conf.frontsData != null) this.frontsContent.fdata = conf.frontsData[frontID];
    if (this.frontsContent.fdata != null) this.addChild(this.frontsContent);
    else if (this.contains(this.frontsContent)) this.removeChild(this.frontsContent);
    if (this.frontsContent.parent) {
        this.x = this.ww - Math.max(this.frontsContent.width, this.field.textWidth) - 52;
        this.visible = true;
    }
    this.redraw_bg();
};
canvas.app.inst.view.combo.Combo = function () {
    var headerBack = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "combo_header"), [4, 0, 18, 0]);
    var headerRenderer = new canvas.app.inst.view.combo.ComboHeaderRenderer();
    var listBack = new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "combo_list_back"), 2, 4, 2, 4);
    canvas.ui.ComboBox.call(this, headerBack, headerRenderer, listBack, canvas.app.inst.view.combo.ComboListRenderer, canvas.ui.ComboBoxType.UP, scroll);
    var minus = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "png_scroll_v2_up"));
    var plus = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "png_scroll_v2_down"));
    var drag = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "png_scroll_v2_drag"), [0, 3, 0, 3]);
    var bg = new canvas.px.TilingSprite(canvas.ResourceLoader.getImage("ui", "png_scroll_bg2"));
    var scroll = new canvas.ui.Scroll(canvas.ui.ScrollType.VERTICAL, minus, plus, bg, drag, this.list.container, true, true);
    scroll.padding = 15;
    scroll.step = 50;
    scroll.setSize(16);
    this.list.scroll = scroll;
    this.setSize(164, 440);
    this.list.paddingV = 0;
    this.list.paddingH = -6;
};
canvas.app.inst.view.combo.Combo.prototype = Object.create(canvas.ui.ComboBox.prototype);
canvas.app.inst.view.combo.ComboHeaderRenderer = function (data) {
    canvas.ui.ListRenderer.call(this, data);
    this.title = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_12_BOLD, 10551296, 100, 16, "left", undefined, undefined, undefined, true);
    this.addChild(this.title);
    this.title.position.set(4, 1);
    this.interactive = false;
    this.msk = new canvas.px.Mask(100, 20);
    this.addChild(this.msk);
    this.mask = this.msk;
};
canvas.app.inst.view.combo.ComboHeaderRenderer.prototype = Object.create(canvas.ui.ListRenderer.prototype);
canvas.app.inst.view.combo.ComboHeaderRenderer.prototype.update = function () {
    if (this.title) {
        this.title.text = this.data ? this.data[1] : "";
        this.title.setSize(this._width);
        this.msk.setSize(this._width - 20);
    }
};
canvas.app.inst.view.combo.ComboListRenderer = function (data) {
    canvas.ui.ListRenderer.call(this, data);
    this.title = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD, 7686706, 100, 14, "left", undefined, undefined, undefined, true);
    this.addChild(this.title);
    this.title.position.set(4, 1);
    this._height = 14;
    this.selector = new canvas.px.Mask(100, 20, 10551296, 1);
    this.buttonMode = true;
};
canvas.app.inst.view.combo.ComboListRenderer.prototype = Object.create(canvas.ui.ListRenderer.prototype);
canvas.app.inst.view.combo.ComboListRenderer.prototype.update = function () {
    if (this.selector) {
        this.selector.setSize(this._width, 16);
    }
    if (this.title) {
        this.title.text = this.data ? this.data[1] : "";
        this.title.setSize(this._width - 10);
    }
};
canvas.app.inst.view.combo.ComboListRenderer.prototype.overHandler = function () {
    this.addChildAt(this.selector, 0);
    this.title.color = 16775626;
};
canvas.app.inst.view.combo.ComboListRenderer.prototype.outHandler = function () {
    if (this.selector.parent) this.removeChild(this.selector);
    this.title.color = 7686706;
};
canvas.app.user.Const = { TOP: 0, LEFT: 0 };
canvas.app.user.Event = {
    ENTER_FRAME: "User.ENTER_FRAME",
    HINT_ADD: "User.HINT_ADD",
    HINT_REMOVE: "User.HINT_REMOVE",
    REMOVE_EFFECT: "User.REMOVE_EFFECT",
    SHOW_EFFECT: "User.SHOW_EFFECT",
    HIDE_EFFECT: "User.HIDE_EFFECT",
    HIDE_ALL_EFFECTS: "User.HIDE_ALL_EFFECTS",
    SHOW_ALL_EFFECTS: "User.SHOW_ALL_EFFECTS",
    ZOOM_IN: "User.ZOOM_IN",
    ZOOM_OUT: "User.ZOOM_OUT",
};
canvas.app.user.Main = function (model, hintManager, windowsManager) {
    canvas.px.Container.call(this);
    this.model = model;
    this.hintManager = hintManager;
    this.windowsManager = windowsManager;
    canvas.EventManager.addEventListener(canvas.app.user.Event.HINT_ADD, null, this.handlerHintAdd, this);
    canvas.EventManager.addEventListener(canvas.app.user.Event.HINT_REMOVE, null, this.handlerHintRemove, this);
    canvas.EventManager.addEventListener(canvas.Event.STAGE_KEY_DOWN, null, this.handlerKey, this);
    canvas.EventManager.addEventListener(canvas.Event.STAGE_KEY_UP, null, this.handlerKeyUp, this);
    this.view = new canvas.app.user.View(this);
    this.hintContainer = new canvas.px.Container();
    this.hintContainer.interactive = true;
    this.addChild(this.view);
    this.addChild(this.hintContainer);
    this.windowsContainer = new canvas.px.Container();
    this.addChild(this.windowsContainer);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.view.effectsButton.button, this.effectsButtonClickHandler, this);
    canvas.EventManager.addEventListener(canvas.app.user.Event.REMOVE_EFFECT, null, this.removeEffectHandler, this);
    canvas.EventManager.addEventListener(canvas.app.user.Event.SHOW_EFFECT, null, this.showEffectHandler, this);
    canvas.EventManager.addEventListener(canvas.app.user.Event.HIDE_EFFECT, null, this.hideEffectHandler, this);
    canvas.EventManager.addEventListener(canvas.app.user.Event.HIDE_ALL_EFFECTS, null, this.hideAllEffectsHandler, this);
    canvas.EventManager.addEventListener(canvas.app.user.Event.SHOW_ALL_EFFECTS, null, this.showAllEffectsHandler, this);
    setInterval(this.timerHandler.bind(this), 500);
    this.request = new canvas.utils.URLRequest();
    canvas.EventManager.addEventListener(canvas.utils.URLRequestEvent.EVENT_COMPLETE, this.request, this.requestCompleteHandler, this);
    canvas.EventManager.addEventListener(canvas.utils.URLRequestEvent.EVENT_ERROR, this.request, this.requestErrorHandler, this);
    canvas.EventManager.addEventListener(canvas.app.user.Event.ZOOM_IN, null, this.zoomInHandler, this);
    canvas.EventManager.addEventListener(canvas.app.user.Event.ZOOM_OUT, null, this.zoomOutHandler, this);
};
canvas.app.user.Main.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.user.Main.prototype.handlerKey = function (event) {
    if (document.activeElement && document.activeElement.constructor.name == "HTMLInputElement") return;
    var keyCode = event.params.globalKeyCode;
    var altKey = event.params.altKey;
    var ctrlKey = event.params.ctrlKey;
    var shiftKey = event.params.shiftKey;
    switch (keyCode) {
        case canvas.Const.KEYS.L:
            if (shiftKey) {
                canvas.Log.show(canvas.Log.USER);
            }
            break;
    }
};
canvas.app.user.Main.prototype.handlerKeyUp = function (event) {
    if (document.activeElement && document.activeElement.constructor.name == "HTMLInputElement") return;
    event.params.preventDefault();
    var keyCode = event.params.keyCode;
    var altKey = event.params.altKey;
    var ctrlKey = event.params.ctrlKey;
    var shiftKey = event.params.shiftKey;
    switch (keyCode) {
    }
};
canvas.app.user.Main.prototype.resize = function (w, h) {
    this.windowsManager.init(this.windowsContainer, w, h, this.view);
    this.hintManager.init(this.hintContainer, w, h);
};
canvas.app.user.Main.prototype.handlerHintAdd = function (e) {
    this.hintManager.add(e.params.target, e.params.params);
};
canvas.app.user.Main.prototype.handlerHintRemove = function (e) {
    this.hintManager.remove(e.params.target);
};
canvas.app.user.Main.prototype.swfObject = function (data) {
    var str;
    var conf = canvas.app.user.model;
    if (data) {
        for (str in data) {
            switch (str) {
                case "user|view":
                    var config = data["user|view"];
                    conf.init(config);
                    this.view.update();
                    break;
            }
        }
    }
};
canvas.app.user.Main.prototype.timerHandler = function () {
    var conf = canvas.app.user.model;
    if (this.view.effectsWindow.parent) {
        this.view.effectsWindow.updateTime();
        if (conf.effects.length == 0) {
            this.view.hideEffects();
        }
    }
    if ((this.view.bars.hp.progress >= 1 || conf.myHPt == 0) && (this.view.bars.mp.progress >= 1 || conf.myMPt == 0)) {
        return;
    }
    conf.calcHpMp();
    this.view.bars.update();
};
canvas.app.user.Main.prototype.effectsButtonClickHandler = function () {
    var conf = canvas.app.user.model;
    if (conf.canputoff == "1") {
        this.view.effectsWindowShowHide(this.view.effectsWindow.parent != null);
    } else {
        showEffectInfo(conf.nick);
    }
};
canvas.app.user.Main.prototype.removeEffectHandler = function (event) {
    this.view.confirmWindow.init(canvas.Translator.getText(803) + " <b>" + event.params.title + "</b> ?", { func: this.removeEffect.bind(this), params: [event.params] });
    this.windowsManager.openWindow(this.view.confirmWindow);
};
canvas.app.user.Main.prototype.showEffectHandler = function (event) {
    var conf = canvas.app.user.model;
    conf.effectInRequest = event.params;
    this.request.name = canvas.app.user.Event.SHOW_EFFECT;
    this.request.load(conf.effectShowUrl + "&artifact_id=" + event.params.id + "&json_mode_on=1");
};
canvas.app.user.Main.prototype.hideEffectHandler = function (event) {
    var conf = canvas.app.user.model;
    conf.effectInRequest = event.params;
    this.request.name = canvas.app.user.Event.HIDE_EFFECT;
    this.request.load(conf.effectHideUrl + "&artifact_id=" + event.params.id + "&json_mode_on=1");
};
canvas.app.user.Main.prototype.hideAllEffectsHandler = function (event) {
    var conf = canvas.app.user.model;
    conf.effectInRequest = event.params;
    this.request.name = canvas.app.user.Event.HIDE_ALL_EFFECTS;
    this.request.load(conf.effectHideUrl + "&artifact_id=&json_mode_on=1");
};
canvas.app.user.Main.prototype.showAllEffectsHandler = function (event) {
    var conf = canvas.app.user.model;
    conf.effectInRequest = event.params;
    this.request.name = canvas.app.user.Event.SHOW_ALL_EFFECTS;
    this.request.load(conf.effectShowUrl + "&artifact_id=&json_mode_on=1");
};
canvas.app.user.Main.prototype.removeEffect = function (data) {
    var conf = canvas.app.user.model;
    conf.effectInRequest = data;
    this.request.name = canvas.app.user.Event.REMOVE_EFFECT;
    this.request.load(conf.effectRemoveUrl + "&artifact_id=" + data.id + "&json_mode_on=1");
};
canvas.app.user.Main.prototype.requestCompleteHandler = function () {
    var conf = canvas.app.user.model;
    var obj = JSON.parse(this.request.request.responseText);
    if (obj["common|action"].status == "100") {
        switch (this.request.name) {
            case canvas.app.user.Event.REMOVE_EFFECT:
                conf.removeEffect(conf.effectInRequest);
                this.view.effectsWindow.update();
                if (conf.effects.length == 0) {
                    this.view.hideEffects();
                }
                break;
        }
    }
    if (obj["user|view"] && obj["user|view"].status == "100") {
        conf.effect = obj["user|view"]["effect_list"];
        conf.parseEffects();
        this.view.effectsWindow.update();
    }
    this.request.name = "";
};
canvas.app.user.Main.prototype.requestErrorHandler = function () {};
canvas.app.user.Main.prototype.zoomInHandler = function () {
    var conf = canvas.app.user.model;
    if (this.view.persContainer.scale.x < conf.PERS_MAX_SCALE) {
        this.view.persContainer.scale.x += conf.PERS_SCALE_STEP;
        this.view.persContainer.scale.y = this.view.persContainer.scale.x;
        this.view.updatePersPos();
        conf.localStorage.set("playerSize", this.view.persContainer.scale.x);
    }
};
canvas.app.user.Main.prototype.zoomOutHandler = function () {
    var conf = canvas.app.user.model;
    if (this.view.persContainer.scale.x > conf.PERS_MIN_SCALE) {
        this.view.persContainer.scale.x -= conf.PERS_SCALE_STEP;
        this.view.persContainer.scale.y = this.view.persContainer.scale.x;
        this.view.updatePersPos();
        conf.localStorage.set("playerSize", this.view.persContainer.scale.x);
    }
};
canvas.app.user.Model = function (par) {
    this.UPDATE_FLAG_PERS = "pers";
    this.UPDATE_FLAG_TROPHY = "trophy";
    this.UPDATE_FLAG_ARTS = "arts";
    this.UPDATE_FLAG_PET = "pet";
    this.ALL_UPDATE_FLAGS = [this.UPDATE_FLAG_PERS, this.UPDATE_FLAG_TROPHY, this.UPDATE_FLAG_ARTS, this.UPDATE_FLAG_PET];
    this.PERS_MIN_SCALE = 0.7;
    this.PERS_MAX_SCALE = 1;
    this.PERS_SCALE_STEP = 0.05;
    this.PLAYER_MC_X = 74;
    this.PLAYER_MC_Y = 104;
    this.SLOTS_COUNT = 26;
    this.def_myFirst1 = [];
    this.def_myFirst2 = [];
    this.last_dat = "";
    this.timeoutID = 0;
    this.alt = "";
    this.delete_art = "";
    this.mySk = "1";
    this.trophySk = "1";
    this.myGender = "M";
    this.trophyGender = "M";
    this.trophyName = "";
    this.trophyLevel = 0;
    this.trophyClan = "";
    this.trophyRank = "";
    this.myHP = 100;
    this.myHPmax = 200;
    this.myHPdlt = 0;
    this.myMP = 10;
    this.myMPmax = 10;
    this.myMPdlt = 0;
    this.myHPt = 0;
    this.myMPt = 0;
    this.myLevel = 1;
    this.myTown = "Town";
    this.myLocation = "Location";
    this.myTitle = "Title";
    this.bott_mc_Y = 0;
    this.townSrc = "";
    this.swf_name = "userinfo";
    this.parts =
        "65551;;;,0;;;,0;;;,0;;;,0;;;,603;;;,65537;;;,0;;;,8;;;body_gold.swf,65537;;;,0;;;,0;;;,65537;;;,0;;;,0;;;,65537;;;,0;;;,0;;;,65537;;;,0;;;,0;;;,65537;;;,0;;;,0;;;,65537;;;,0;;;,0;;;,65537;;;,0;;;,0;;;,65537;;;,0;;;,0;;;,65537;;;,0;;;,0;;;,65537;;;,0;;;,0;;;,65537;;;,0;;;,0;;;,65537;;;,0;;;,0;;;,65537;;;,0;;;,0;;;,0;;;,0;;;,0;;;,0;;;,0;;;,0;;;,0;;;,0;;;,0;;;,0;;;,0;;;,0;;;";
    this.trophy_parts = "";
    this.trophy_name = "";
    this.locale = "ru";
    this.fightId = "";
    this.effect = "";
    this.mount = "";
    this.mountLnk = "";
    this.trophy_mount = "";
    this.dh = "";
    this.bg = "";
    this.arts = "::::0:,52635583:cuir08.gif:::0::1:1,::::0:,::::0:,52635582:cuir4.gif:::0:,::::0:,::::0:,::::0:,::::0:,::::0:,::::0:,::::0:,::::0:,::::0:,::::0:,::::0:,::::0:,::::0:,::::0:,::::0:,::::0:,::::0:,::::0:,::::0:,::::0:";
    this.canputoff = "1";
    this.pet_picture = "";
    this.pet_name = "";
    this.pet_level = "";
    this.pet_color = "";
    this.pet_id = "";
    this.show_button_switch_view = "";
    this.ghost = "";
    this.nobold = "";
    this.farming = "0";
    this.punished = "";
    this.punish_cnt = 0;
    this.nick = "Герой";
    this.take_off = "";
    this.take_off_chant = "";
    this.backImage = "";
    this.showLocation = false;
    this.arkatCount = 2;
    this.updateFlags = new Object();
    this.updateHash = new Object();
    this.init(par);
    this.localStorage = new canvas.utils.LocalStorage(canvas.Log.USER);
};
canvas.app.user.Model.prototype.init = function (par) {
    for (var str in par) {
        if (this.ok(this[str])) this[str] = par[str];
    }
    if (this.ok(par.showlocation)) this.showLocation = par.showlocation == "1";
    if (this.nobold != "1") this.nobold = "";
    if (this.ok(par.sk)) this.mySk = par.sk;
    if (this.ok(par.take_off)) this.take_off = par.take_off;
    if (this.ok(par.take_off_chant)) this.take_off_chant = par.take_off_chant;
    if (this.ok(par.gender)) this.myGender = this.parseGender(par.gender);
    if (this.ok(par.trophy_gender)) this.trophyGender = this.parseGender(par.trophy_gender);
    if (this.ok(par.trophy_level)) this.trophyLevel = par.trophy_level == "" ? 0 : parseInt(par.trophy_level);
    if (this.ok(par.trophy_rank)) this.trophyRank = par.trophy_rank;
    if (this.ok(par.trophy_clan)) this.trophyClan = par.trophy_clan;
    if (this.ok(par.arts)) this.arts = par.arts;
    if (this.ok(par.parts)) this.parts = par.parts;
    if (this.ok(par.trophy_parts)) this.trophy_parts = par.trophy_parts;
    if (this.ok(par.trophy_name)) this.trophy_name = par.trophy_name;
    canvas.app.user.log("parts = " + par.parts);
    if (this.ok(par.hp) && this.ok(par.hpMax) && this.ok(par.hpT)) {
        this.myHP = parseInt(par.hp);
        this.myHPmax = parseInt(par.hpMax);
        this.myHPt = parseInt(par.hpT);
        this.myHPdlt = this.myHPmax - this.myHP;
        this.startTimeHP = Date.now();
        this.finTimeHP = this.startTimeHP + this.myHPt;
        this.curHP = this.myHP;
    }
    if (this.ok(par.mp) && this.ok(par.mpMax) && this.ok(par.mpT)) {
        this.myMP = parseInt(par.mp);
        this.myMPmax = parseInt(par.mpMax);
        this.myMPdlt = this.myMPmax - this.myMP;
        this.myMPt = parseInt(par.mpT);
        this.startTimeMP = Date.now();
        this.finTimeMP = this.startTimeMP + this.myMPt;
        this.curMP = this.myMP;
    }
    if (this.ok(par.lvl)) this.myLevel = parseInt(par.lvl);
    if (this.ok(par.tTown)) this.myTown = par.tTown;
    if (this.ok(par.tLocation)) this.myLocation = par.tLocation;
    if (this.ok(par.tTitle)) this.myTitle = par.tTitle;
    if (this.ok(par.locale)) this.locale = par.locale;
    if (this.ok(par.tSrc)) this.townSrc = par.tSrc;
    if (this.ok(par.fightId)) this.fightId = par.fightId;
    else this.fightId = "0";
    if (this.ok(par.farming)) this.farming = par.farming;
    else this.farming = "0";
    if (this.ok(par.effect_list)) this.effect = par.effect_list;
    if (this.ok(par.mount)) {
        this.mount = par.mount;
    }
    this.trophy_mount = "0";
    if (this.bg == "") this.bg = "1";
    if (this.canputoff == "") this.canputoff = "0";
    if (this.ok(par.picPath)) this.picPath = par.picPath;
    if (this.alt == "") this.alt = "Трофей с";
    if (this.ok(par.pet_picture)) this.pet_picture = par.pet_picture;
    if (this.ok(par.pet_name)) this.pet_name = par.pet_name;
    if (this.ok(par.pet_level)) this.pet_level = par.pet_level;
    if (this.ok(par.pet_color)) this.pet_color = par.pet_color;
    if (this.ok(par.pet_id)) this.pet_id = par.pet_id;
    if (this.ok(par.effectRemoveUrl)) this.effectRemoveUrl = par.effectRemoveUrl;
    if (this.ok(par.effectHideUrl)) this.effectHideUrl = par.effectHideUrl;
    if (this.ok(par.effectShowUrl)) this.effectShowUrl = par.effectShowUrl;
    if (this.ok(par.avatar_background_img)) this.backImage = par.avatar_background_img;
    if (this.ok(par.arkat_count)) this.arkatCount = parseInt(par.arkat_count);
    if (this.ok(par.effectHideMax)) this.effectHideMax = parseInt(par.effectHideMax);
    this.effectHideCur = 0;
    canvas.app.user.log("arts = " + par.arts);
    var len = this.ALL_UPDATE_FLAGS.length;
    for (var i = 0; i < len; i++) {
        str = this.ALL_UPDATE_FLAGS[i];
        if (!this.updateFlags[str]) this.updateFlags[str] = this.getDataHash(str) != this.updateHash[str];
        this.updateHash[str] = this.getDataHash(str);
    }
    this.calcHpMp();
    this.SLOTS_COUNT = this.canputoff == "1" ? 26 : 15;
};
canvas.app.user.Model.prototype.getDataHash = function (type) {
    switch (type) {
        case this.UPDATE_FLAG_PERS:
            return this.parts + this.mySk + this.myGender;
        case this.UPDATE_FLAG_TROPHY:
            return this.trophy_parts + this.trophyGender;
        case this.UPDATE_FLAG_ARTS:
            return this.arts + this.myLevel + this.arkatCount;
        case this.UPDATE_FLAG_PET:
            return this.pet_picture + this.pet_name + this.pet_level + this.pet_color + this.pet_id;
    }
    return "";
};
canvas.app.user.Model.prototype.parseEffects = function () {
    var data = this.effect;
    var effectData;
    var date = Date.now();
    this.effects = [];
    var a;
    var obj;
    a = JSON.parse(data);
    var len = a.length;
    this.effectHideCur = 0;
    for (var i = 0; i < len; i++) {
        obj = a[i];
        effectData = new Object();
        effectData.timeLeft = parseInt(obj.timeLeft) * 1e3;
        effectData.timeLeftStart = date;
        effectData.id = obj.id;
        effectData.removable = obj.removable == "1";
        effectData.hidden = obj.hidden == "1";
        effectData.title = JSON.parse('"' + obj.title + '"');
        effectData.color = obj.color;
        if (effectData.hidden) this.effectHideCur++;
        this.effects.push(effectData);
    }
};
canvas.app.user.Model.prototype.removeEffect = function (effectData) {
    this.effects.splice(this.effects.indexOf(effectData), 1);
    if (effectData.hidden) this.effectHideCur--;
};
canvas.app.user.Model.prototype.ok = function (value) {
    return value != undefined;
};
canvas.app.user.Model.prototype.parseGender = function (value) {
    return value == "1" ? "M" : "F";
};
canvas.app.user.Model.prototype.getSkPath = function () {
    return canvas.Config.skPath + this.myGender + "/sk" + canvas.Functions.setNumberLen(String(this.mySk), 2) + "_UI";
};
canvas.app.user.Model.prototype.getTrophySkPath = function () {
    return canvas.Config.skPath + this.trophyGender + "/sk" + canvas.Functions.setNumberLen(String(this.trophySk), 2) + "_UI";
};
canvas.app.user.Model.prototype.calcHpMp = function () {
    if (this.myHPt == 0) {
        this.myHP = this.myHPmax;
    }
    if (this.myMPt == 0) {
        this.myMP = this.myMPmax;
    }
    var elaTime;
    this.curTime = Date.now();
    if (this.myHPt > 0) {
        elaTime = (this.curTime - this.startTimeHP) / 1e3;
        this.curHP = Math.round(Math.min(this.myHPmax, this.myHP + this.myHPdlt * (elaTime / this.myHPt)));
    }
    if (this.myMPt > 0) {
        elaTime = (this.curTime - this.startTimeMP) / 1e3;
        this.curMP = Math.round(Math.min(this.myMPmax, this.myMP + this.myMPdlt * (elaTime / this.myMPt)));
    }
};
canvas.app.user.Model.prototype.getPetColor = function (value) {
    switch (parseInt(value)) {
        case 1:
            return 6710886;
        case 2:
            return 3381504;
        case 3:
            return 3342591;
        case 4:
            return 10027161;
        case 5:
            return 16711680;
    }
    return 3355443;
};
canvas.app.user.View = function () {
    canvas.px.Container.call(this);
    var conf = canvas.app.user.model;
    this.slots = [];
    this.background = new canvas.app.user.view.Background();
    this.addChild(this.background);
    if (conf.showLocation) {
        this.location = new canvas.app.user.view.LocationView();
        this.addChild(this.location);
        this.location.position.set(4, 391);
    } else {
        this.bottomItems = new canvas.app.user.view.BottomItems(this.slots);
        this.addChild(this.bottomItems);
        this.bottomItems.position.set(17, 377);
    }
    this.persContainer = new canvas.px.Container();
    var scale = conf.localStorage.get("playerSize");
    if (scale) this.persContainer.scale.set(parseFloat(scale), parseFloat(scale));
    this.addChild(this.persContainer);
    this.updatePersPos();
    var sprite = new canvas.px.Sprite(canvas.ResourceLoader.getTexture("user_mask"));
    this.addChild(sprite);
    sprite.position.set(55, 80);
    this.persContainer.mask = sprite;
    this.mountBottom = new canvas.px.Container();
    this.persContainer.addChild(this.mountBottom);
    this.skContainer = new canvas.px.Container();
    this.persContainer.addChild(this.skContainer);
    this.mountTop = new canvas.px.Container();
    this.persContainer.addChild(this.mountTop);
    this.leftButton = new canvas.app.user.view.LeftButton();
    this.addChild(this.leftButton);
    this.leftButton.position.set(81, 83);
    this.rightButton = new canvas.app.user.view.RightButton();
    this.addChild(this.rightButton);
    this.rightButton.position.set(210, 83);
    this.borders = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "main_bg"));
    this.addChild(this.borders);
    this.borders.position.set(10, 0);
    this.bars = new canvas.app.user.view.Bars();
    this.addChild(this.bars);
    this.bars.position.set(1, -7);
    this.levelField = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_18_BOLD_STROKE, 16772526, 32, 28, "center");
    this.addChild(this.levelField);
    this.levelField.position.set(155, 345);
    this.createSlots();
    this.petView = new canvas.app.user.view.PetView();
    this.petView.position.set(209, 14);
    this.addChild(this.petView);
    this.trophyView = new canvas.app.user.view.TrophyView();
    this.trophyView.position.set(82, 35);
    this.addChild(this.trophyView);
    this.switchStyleView = new canvas.app.user.view.SwitchStyleView();
    this.switchStyleView.position.set(32, 38);
    this.zoomView = new canvas.app.user.view.ZoomView();
    this.zoomView.position.set(208, 319);
    this.addChild(this.zoomView);
    this.effectsButton = new canvas.app.user.view.EffectsButton();
    this.effectsButton.position.set(147, 312);
    this.effectsWindow = new canvas.app.user.view.EffectsWindow();
    this.effectsWindow.position.set(41, 70);
    this.confirmWindow = new canvas.app.manor.view.controls.ConfirmWindow();
    this.confirmWindow.dragAvailable = false;
    this.update();
};
canvas.app.user.View.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.user.View.prototype.update = function () {
    var conf = canvas.app.user.model;
    this.background.update();
    if (this.location) this.location.update();
    if (this.bottomItems) this.bottomItems.update();
    if (this.player && this.player.url != conf.getSkPath()) {
        this.player.destroy();
        this.player = null;
    }
    if (!this.player) {
        this.player = new canvas.animation.SkeletonInfo(conf.getSkPath(), new canvas.px.Point(70, 180), this.skContainer, conf.mount);
        this.player.frameEvent = canvas.app.user.Event.ENTER_FRAME;
        this.player.loop = true;
        this.skContainer.addChild(this.player);
    }
    if (!this.player.skeletonData || this.player.skeletonData.source != conf.parts) {
        this.player.skeletonData = new canvas.data.battle.SkeletonData(conf.parts, conf.myGender);
    }
    if (conf.ghost == "1") {
        this.persContainer.filters = [canvas.Functions.getGlow(1, 2, 2, conf.bg == "1" ? 0 : 0, 0.1)];
        this.skContainer.filters = [canvas.Functions.getAlpha(0.25)];
    } else {
        this.persContainer.filters = this.skContainer.filters = [];
    }
    if (conf.farming == "1") {
        this.leftButton.visible = true;
        this.leftButton.mode = "farming";
        this.leftButton.interactiveChildren = false;
    } else if (conf.fightId != "0") {
        this.leftButton.visible = true;
        this.leftButton.mode = "fighting";
        this.leftButton.interactiveChildren = true;
    } else {
        this.leftButton.visible = false;
    }
    if (parseInt(conf.punished) >= 1 && parseInt(conf.punished) <= 5) {
        this.rightButton.punished = conf.punished;
        this.rightButton.visible = true;
        if (parseInt(conf.punished) == 4) {
            this.rightButton.countField.text = conf.punish_cnt;
        }
    } else {
        this.rightButton.visible = false;
    }
    this.bars.update();
    this.levelField.text = conf.myLevel;
    if (conf.updateFlags[conf.UPDATE_FLAG_ARTS]) {
        conf.updateFlags[conf.UPDATE_FLAG_ARTS] = false;
        var len = this.slots.length;
        var arts = conf.arts.split(",");
        for (var i = 0; i < len; i++) {
            this.slots[i].data = arts[i] ? arts[i].split(":") : null;
        }
    }
    if (conf.updateFlags[conf.UPDATE_FLAG_PET]) {
        conf.updateFlags[conf.UPDATE_FLAG_PET] = false;
        this.petView.update();
    }
    if (conf.updateFlags[conf.UPDATE_FLAG_TROPHY]) {
        conf.updateFlags[conf.UPDATE_FLAG_TROPHY] = false;
        this.trophyView.update();
    }
    if (conf.canputoff == "0") {
        this.removeIfExist(this.switchStyleView);
    } else {
        if (conf.show_button_switch_view == "1" || conf.show_button_switch_view == "2") {
            this.addChild(this.switchStyleView);
            this.switchStyleView.type = conf.show_button_switch_view;
        } else {
            this.removeIfExist(this.switchStyleView);
        }
    }
    this.updateEffects();
};
canvas.app.user.View.prototype.createSlots = function () {
    var slot;
    for (var i = 0; i <= 14; i++) {
        slot = new canvas.app.user.view.SlotView(i);
        this.slots[i] = slot;
        this.addChild(slot);
    }
    this.slots[0].position.set(25, 276);
    this.slots[1].position.set(16, 208);
    this.slots[2].position.set(16, 136);
    this.slots[3].position.set(16, 66);
    this.slots[4].position.set(140, 28);
    this.slots[5].position.set(265, 68);
    this.slots[6].position.set(265, 136);
    this.slots[7].position.set(265, 207);
    this.slots[8].position.set(258, 276);
    this.slots[9].position.set(247, 346);
    this.slots[10].position.set(38, 345);
    this.slots[11].position.set(112, 385);
    this.slots[12].position.set(143, 385);
    this.slots[13].position.set(175, 385);
    this.slots[14].position.set(207, 385);
};
canvas.app.user.View.prototype.updateEffects = function () {
    var conf = canvas.app.user.model;
    conf.parseEffects();
    if (conf.effects.length > 0) {
        this.addChild(this.effectsButton);
    } else {
        this.hideEffects();
    }
    this.effectsWindow.update();
};
canvas.app.user.View.prototype.hideEffects = function () {
    this.removeIfExist(this.effectsButton);
    this.effectsWindowShowHide(true);
};
canvas.app.user.View.prototype.effectsWindowShowHide = function (hide) {
    if (hide == undefined) hide = false;
    if (hide) {
        this.removeIfExist(this.effectsWindow);
    } else {
        this.addChildAt(this.effectsWindow, this.getChildIndex(this.effectsButton));
    }
};
canvas.app.user.View.prototype.updatePersPos = function () {
    var conf = canvas.app.user.model;
    this.persContainer.position.set(conf.PLAYER_MC_X + Math.round(90 * (1 - this.persContainer.scale.x)), conf.PLAYER_MC_Y + Math.round(160 * (1 - this.persContainer.scale.y)));
};
canvas.app.user.view.Background = function () {
    canvas.px.Container.call(this);
    this.image = "";
};
canvas.app.user.view.Background.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.user.view.Background.prototype.update = function () {
    if (!this.video) return;
    var conf = canvas.app.user.model;
    var lastImage = this.image;
    if (conf.backImage != "") {
        this.image = conf.backImage;
    } else {
        this.image = conf.bg;
    }
    if (this.image != lastImage) {
        this.removeChildren();
        var sprite;
        if (conf.backImage != "") {
            this.video.src = canvas.Config.userBackgroundsPath + canvas.Functions.extractSwfName(conf.backImage) + ".ogv";
            sprite = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "bg"));
        } else {
            sprite = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "bg_" + (conf.bg == "1" ? "h" : "m")));
        }
        this.addChild(sprite);
        sprite.x = 74;
    }
};
canvas.app.user.view.Bars = function () {
    canvas.px.Container.call(this);
    this.hpLine = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "hp_line"));
    this.hpLine.position.set(92, 6);
    this.addChild(this.hpLine);
    this.mpLine = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "mp_line"));
    this.mpLine.position.set(171, 6);
    this.addChild(this.mpLine);
    this.hp = new canvas.ui.Progress();
    this.hp.setSize(68, 19);
    this.addChild(this.hp);
    this.hp.position.set(102, 9);
    this.mp = new canvas.ui.Progress();
    this.mp.setSize(68, 19);
    this.addChild(this.mp);
    this.mp.position.set(238, 9);
    this.mp.scale.x = -1;
    this.hpLine.mask = this.hp.sprite;
    this.mpLine.mask = this.mp.sprite;
    this.hp.progress = 0;
    this.mp.progress = 0;
    this.hpField = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_9, 16748639, 72, 16, "center");
    this.hpField.position.set(100, 13);
    this.addChild(this.hpField);
    this.mpField = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_9, 9819903, 72, 16, "center");
    this.mpField.position.set(169, 13);
    this.addChild(this.mpField);
    this.update();
};
canvas.app.user.view.Bars.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.user.view.Bars.prototype.update = function () {
    var conf = canvas.app.user.model;
    this.hpField.text = conf.curHP + "/" + conf.myHPmax;
    this.mpField.text = conf.curMP + "/" + conf.myMPmax;
    if (conf.myHPt > 0) {
        this.hp.progress = conf.curHP > 0 ? conf.curHP / conf.myHPmax : 0;
    } else {
        this.hp.progress = conf.myHP == 0 ? 0 : 1;
    }
    if (conf.myMPt > 0) {
        this.mp.progress = conf.curMP > 0 ? conf.curMP / conf.myMPmax : 0;
    } else {
        this.mp.progress = conf.myMP == 0 ? 0 : 1;
    }
};
canvas.app.user.view.BottomItems = function (slots) {
    canvas.px.Container.call(this);
    this.back = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "slots_bg")));
    this.back.position.set(0, 32);
    this.bottomContainer = new canvas.px.Container();
    this.addChild(this.bottomContainer);
    this.bottomContainer.position.set(0, 123);
    this.backRings = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "slot_rings_bg"));
    this.back1 = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "slot_bg"));
    this.back2 = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "slot_bg"));
    this.back3 = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "slot_bg"));
    this.backRings.y = 2;
    this.slots = slots;
    var slot;
    for (var i = 15; i <= 25; i++) {
        slot = new canvas.app.user.view.SlotView(i);
        this.slots[i] = slot;
    }
    this.back.addChild(slots[15]);
    slots[15].position.set(5, 17);
    this.back.addChild(slots[16]);
    slots[16].position.set(86, 17);
    this.back.addChild(slots[17]);
    slots[17].position.set(167, 17);
    this.back.addChild(slots[18]);
    slots[18].position.set(248, 17);
    this.back2.addChild(slots[19]);
    slots[19].position.set(12, 9);
    this.back3.addChild(slots[20]);
    slots[20].position.set(12, 9);
    this.back1.addChild(slots[21]);
    slots[21].position.set(12, 9);
    this.backRings.addChild(slots[24]);
    slots[24].position.set(10, 41);
    this.backRings.addChild(slots[25]);
    slots[25].position.set(41, 41);
    this.backRings.addChild(slots[22]);
    slots[22].position.set(10, 10);
    this.backRings.addChild(slots[23]);
    slots[23].position.set(41, 10);
};
canvas.app.user.view.BottomItems.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.user.view.BottomItems.prototype.update = function () {
    var conf = canvas.app.user.model;
    this.bottomContainer.removeChildren();
    if (conf.myLevel > 2) {
        this.bottomContainer.addChild(this.backRings);
        this.bottomContainer.addChild(this.back1);
        this.bottomContainer.addChild(this.back2);
        this.bottomContainer.addChild(this.back3);
        for (var i = 19; i <= 25; i++) {
            this.slots[i].imgVisible = true;
        }
    } else {
        if (conf.arkatCount > 0) {
            this.bottomContainer.addChild(this.backRings);
            this.bottomContainer.addChild(this.back2);
            this.bottomContainer.addChild(this.back3);
            for (var i = 19; i <= 25; i++) {
                this.slots[i].imgVisible = i != 21;
            }
        } else {
            this.bottomContainer.addChild(this.back2);
            this.bottomContainer.addChild(this.back3);
            for (var i = 19; i <= 25; i++) {
                this.slots[i].imgVisible = i < 21;
            }
        }
    }
    this.updatePositions();
};
canvas.app.user.view.BottomItems.prototype.updatePositions = function () {
    var len = this.bottomContainer.numChildren;
    var tmpX = 0;
    for (var i = 0; i < len; i++) {
        this.bottomContainer.getChildAt(i).x = tmpX;
        tmpX += this.bottomContainer.getChildAt(i).width - 3;
    }
    switch (len) {
        case 2:
            this.bottomContainer.x = 74;
            break;
        case 3:
            this.bottomContainer.x = 38;
            break;
        default:
            this.bottomContainer.x = 0;
    }
};
canvas.app.user.view.EffectRenderer = function (data) {
    canvas.ui.ListRenderer.call(this, data);
    this.click = null;
    this.setSize(193, 25);
    var effectsHideAvailable = this.effectsHideAvailable();
    if (this.data) {
        if (this.data.index % 2 != 0) {
            var b = new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "effect_back"), 2, 0, 2, 0);
            this.addChild(b);
            b.setSize(228, 25);
        }
        this.titleField = new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_11, canvas.Const.FONT_TAHOMA_11_BOLD, 0, 125, 14, "left", "top", 0, 0, true);
        this.addChild(this.titleField);
        this.titleField.text = "<font color='" + this.data.color + "'>" + this.data.title + "</font>";
        this.titleField.position.set(5, 5);
        this.timeField = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11, 6770493, 60, 20, "left");
        this.timeField.text = canvas.Functions.formatDate(this.data.timeLeft);
        this.timeField.position.set(135, 5);
        this.addChild(this.timeField);
        if (this.data.removable) {
            this.removeButton = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "effect_remove_button"));
            this.removeButton.position.set(170, 2);
            this.addChild(this.removeButton);
            canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.removeButton, this.clickHandler, this);
        }
        if (this.data.hidden) {
            this.showButton = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "effect_show"));
            this.showButton.position.set(203, 1);
            this.addChild(this.showButton);
            canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.showButton, this.showClickHandler, this);
            canvas.EventManager.dispatchEvent(canvas.app.user.Event.HINT_ADD, null, { target: this.showButton, params: new canvas.utils.HintParams(new canvas.app.view.MappingHint(canvas.Translator.getText(813))) });
        } else {
            this.hideButton = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", effectsHideAvailable ? "effect_hide" : "effect_hide_disabled"));
            this.hideButton.position.set(203, 1);
            this.hideButton.buttonMode = effectsHideAvailable;
            this.addChild(this.hideButton);
            canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.hideButton, this.hideClickHandler, this);
            canvas.EventManager.dispatchEvent(canvas.app.user.Event.HINT_ADD, null, {
                target: this.hideButton,
                params: new canvas.utils.HintParams(new canvas.app.view.MappingHint(canvas.Translator.getText(811) + " " + canvas.app.user.model.effectHideCur + "/" + canvas.app.user.model.effectHideMax)),
            });
        }
    } else {
        this.hideAllButton = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", canvas.app.user.model.effectHideMax > 0 ? (effectsHideAvailable ? "effect_hide" : "effect_show") : "effect_hide_disabled"));
        this.hideAllButton.position.set(203, 1);
        this.hideAllButton.buttonMode = canvas.app.user.model.effectHideMax > 0;
        this.addChild(this.hideAllButton);
        canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.hideAllButton, this.hideAllClickHandler, this);
        canvas.EventManager.dispatchEvent(canvas.app.user.Event.HINT_ADD, null, {
            target: this.hideAllButton,
            params: new canvas.utils.HintParams(new canvas.app.view.MappingHint(canvas.Translator.getText(effectsHideAvailable || canvas.app.user.model.effectHideMax < 1 ? 812 : 814))),
        });
    }
};
canvas.app.user.view.EffectRenderer.prototype = Object.create(canvas.ui.ListRenderer.prototype);
canvas.app.user.view.EffectRenderer.prototype.clickHandler = function () {
    canvas.EventManager.dispatchEvent(canvas.app.user.Event.REMOVE_EFFECT, null, this.data);
};
canvas.app.user.view.EffectRenderer.prototype.showClickHandler = function () {
    canvas.EventManager.dispatchEvent(canvas.app.user.Event.SHOW_EFFECT, null, this.data);
};
canvas.app.user.view.EffectRenderer.prototype.hideClickHandler = function () {
    if (this.effectsHideAvailable()) {
        canvas.EventManager.dispatchEvent(canvas.app.user.Event.HIDE_EFFECT, null, this.data);
    }
};
canvas.app.user.view.EffectRenderer.prototype.hideAllClickHandler = function () {
    if (this.effectsHideAvailable()) {
        canvas.EventManager.dispatchEvent(canvas.app.user.Event.HIDE_ALL_EFFECTS, null, this.data);
    } else {
        canvas.EventManager.dispatchEvent(canvas.app.user.Event.SHOW_ALL_EFFECTS, null, this.data);
    }
};
canvas.app.user.view.EffectRenderer.prototype.updateTime = function () {
    if (this.data) {
        var now = Date.now();
        this.data.timeLeft -= now - this.data.timeLeftStart;
        this.data.timeLeftStart = now;
        this.timeField.text = this.data.timeLeft > 0 ? canvas.Functions.formatDate(this.data.timeLeft) : "";
    }
};
canvas.app.user.view.EffectRenderer.prototype.effectsHideAvailable = function () {
    return canvas.app.user.model.effectHideCur < canvas.app.user.model.effectHideMax;
};
canvas.app.user.view.EffectRenderer.prototype.destroy = function () {
    if (this.removeButton) {
        canvas.EventManager.removeEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.removeButton, this.clickHandler, this);
    }
    if (this.showButton) {
        canvas.EventManager.dispatchEvent(canvas.app.user.Event.HINT_REMOVE, null, { target: this.showButton });
    }
    if (this.hideButton) {
        canvas.EventManager.dispatchEvent(canvas.app.user.Event.HINT_REMOVE, null, { target: this.hideButton });
    }
    if (this.hideAllButton) {
        canvas.EventManager.dispatchEvent(canvas.app.user.Event.HINT_REMOVE, null, { target: this.hideAllButton });
    }
    canvas.ui.ListRenderer.prototype.destroy.apply(this);
};
canvas.app.user.view.EffectsButton = function () {
    canvas.px.Container.call(this);
    this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "effects_button_back")));
    this.button = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "effects_button_front"));
    this.button.position.set(15, 3);
    this.addChild(this.button);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_OVER, this.button, this.overHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_OUT, this.button, this.outHandler, this);
};
canvas.app.user.view.EffectsButton.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.user.view.EffectsButton.prototype.overHandler = function () {
    effectAltSimple(2);
};
canvas.app.user.view.EffectsButton.prototype.outHandler = function () {
    effectAltSimple(0);
};
canvas.app.user.view.EffectsWindow = function () {
    canvas.px.Container.call(this);
    this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "effects_back")));
    var t = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11, 6770493, 80, 20, "left");
    this.addChild(t);
    t.interactive = false;
    t.position.set(14, 4);
    t.text = canvas.Translator.getText(800).toLowerCase();
    t = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11, 6770493, 40, 20, "left");
    this.addChild(t);
    t.interactive = false;
    t.position.set(142, 4);
    t.text = canvas.Translator.getText(723).toLowerCase();
    t = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11, 6770493, 40, 20, "left");
    this.addChild(t);
    t.interactive = false;
    t.position.set(180, 4);
    t.text = canvas.Translator.getText(802).toLowerCase();
    t = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11, 6770493, 40, 20, "left");
    this.addChild(t);
    t.interactive = false;
    t.position.set(216, 4);
    t.text = canvas.Translator.getText(810).toLowerCase();
    this.list = new canvas.ui.List(canvas.ui.ListType.VERTICAL, 1);
    this.addChild(this.list);
    this.list.position.set(8, 25);
    this.list.paddingV = 0;
    this.list.setSize(244, 220);
    var minus = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "scroll_vertical_arrow"));
    var plus = new canvas.px.Container();
    var drag = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "scroll_vertical_drag"), [0, 7, 0, 5]);
    var btn = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "scroll_vertical_arrow"));
    btn.scale.y = -1;
    btn.position.y = -btn.height + 2;
    plus.addChild(btn);
    drag.setSize(21, 40);
    this.drag = drag;
    var scroll = new canvas.ui.Scroll(canvas.ui.ScrollType.VERTICAL, minus, plus, new canvas.px.Mask(21, 100), drag, this);
    scroll.padding = 13;
    scroll.step = 30;
    scroll.setSize(12);
    this.list.scroll = scroll;
    this.infoButton = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "effects_info_button"));
    this.infoButton.position.set(114, -23);
    this.addChild(this.infoButton);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.infoButton, this.infoClickHandler, this);
};
canvas.app.user.view.EffectsWindow.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.user.view.EffectsWindow.prototype.update = function () {
    var conf = canvas.app.user.model;
    var lastScrollPos = this.list.scroll ? this.list.scroll.current : 0;
    var len = conf.effects.length;
    this.list.clear();
    for (var i = 0; i < len; i++) {
        conf.effects[i].index = i;
        this.list.add(new canvas.app.user.view.EffectRenderer(conf.effects[i]), false);
    }
    this.list.add(new canvas.app.user.view.EffectRenderer(), false);
    this.list.update();
    if (this.list.scroll && lastScrollPos > 0) {
        this.list.scroll.current = lastScrollPos;
        this.list.scrollHandler(null);
    }
};
canvas.app.user.view.EffectsWindow.prototype.updateTime = function () {
    var conf = canvas.app.user.model;
    var len = this.list.items.length;
    var needUpdate = false;
    for (var i = 0; i < len; i++) {
        this.list.items[i].updateTime();
        if (this.list.items[i].data && this.list.items[i].timeField.text == "") {
            conf.removeEffect(this.list.items[i].data);
            needUpdate = true;
        }
    }
    if (needUpdate) this.update();
};
canvas.app.user.view.EffectsWindow.prototype.infoClickHandler = function () {
    var conf = canvas.app.user.model;
    showEffectInfo(conf.nick);
};
canvas.app.user.view.LeftButton = function () {
    this._mode = "fighting";
    Object.defineProperty(this, "mode", {
        get: function () {
            return this._mode;
        },
        set: function (value) {
            this._mode = value;
            this.button.sprite.texture = this.button.baseTexture = canvas.ResourceLoader.getImage("ui", this._mode);
        },
    });
    this._visible = false;
    Object.defineProperty(this, "visible", {
        get: function () {
            return this._visible;
        },
        set: function (value) {
            this._visible = value;
            if (!this.back) return;
            if (this._visible) {
                if (!this.contains(this.back)) this.addChild(this.back);
                if (!this.contains(this.button)) this.addChild(this.button);
            } else {
                if (this.contains(this.back)) this.removeChild(this.back);
                if (this.contains(this.button)) this.removeChild(this.button);
            }
        },
    });
    canvas.px.Container.call(this);
    this.back = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "left_button_back"));
    this.button = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", this._mode));
    this.button.position.set(7, 19);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.button, this.clickHandler, this);
};
canvas.app.user.view.LeftButton.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.user.view.LeftButton.prototype.clickHandler = function () {
    var conf = canvas.app.user.model;
    if (this.mode == "fighting") {
        showFightInfo(conf.fightId);
    }
};
canvas.app.user.view.LocationView = function () {
    canvas.px.Container.call(this);
    this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "bg3_bottom")));
    this.image = new canvas.ui.Image();
    this.addChild(this.image);
    this.image.position.set(28, 19);
    var sprite = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "top1")));
    sprite.position.set(62, 82);
    this.townTitle = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_10_BOLD, 16769466, 160, 17, "center");
    this.addChild(this.townTitle);
    this.townTitle.position.set(91, 87);
    this.locTitle = new canvas.ui.HtmlText(
        canvas.Translator.getLang() == canvas.Const.LANG_RU || canvas.Translator.getLang() == canvas.Const.LANG_EN ? canvas.Const.FONT_RADA_18 : canvas.Const.FONT_TAHOMA_14_BOLD_STROKE,
        canvas.Const.FONT_TAHOMA_14_BOLD,
        16769466,
        264,
        42,
        "center",
        "middle"
    );
    this.locTitle.position.set(38, 42);
    this.interactive = true;
    this.mouseover = this.overHandler.bind(this);
    this.mouseout = this.outHandler.bind(this);
};
canvas.app.user.view.LocationView.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.user.view.LocationView.prototype.update = function () {
    var conf = canvas.app.user.model;
    this.image.setImage(conf.townSrc);
    this.townTitle.text = conf.myTitle;
    this.locTitle.text = conf.myTown.toLowerCase() + (conf.myLocation == conf.myTitle ? "" : "<br/>" + conf.myLocation.toLowerCase());
};
canvas.app.user.view.LocationView.prototype.overHandler = function () {
    if (!this.contains(this.locTitle)) this.addChild(this.locTitle);
};
canvas.app.user.view.LocationView.prototype.outHandler = function () {
    if (this.contains(this.locTitle)) this.removeChild(this.locTitle);
};
canvas.app.user.view.PetView = function () {
    canvas.px.Container.call(this);
    this.container = new canvas.px.Container();
    this.addChild(this.container);
    this.msk = new canvas.px.Mask(60, 70);
    this.addChild(this.msk);
    this.msk.position.set(2, -1);
    this.container.mask = this.msk;
    this.wall = new canvas.px.Mask(50, 60);
    this.addChild(this.wall);
    this.wall.position.set(2, 9);
    this.wall.interactive = true;
    this.wall.buttonMode = true;
    this.levelBack = new canvas.px.Sprite(canvas.px.TextureEmpty);
    this.addChild(this.levelBack);
    this.levelBack.position.set(-4, 46);
    this.levelField = new canvas.ui.Text(canvas.Const.FONT_ARIAL_11_BOLD_STROKE, 15719839, 22, 20, "center");
    this.addChild(this.levelField);
    this.levelField.position.set(-3, 53);
    this.hint = new canvas.app.view.MappingHint("No title", true, 6770493, false, {add_y: -6});
    canvas.EventManager.dispatchEvent(canvas.app.user.Event.HINT_ADD, null, { target: this.wall, params: new canvas.utils.HintParams(this.hint) });
    this.wall.click = this.clickHandler.bind(this);
};
canvas.app.user.view.PetView.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.user.view.PetView.prototype.update = function () {
    var conf = canvas.app.user.model;
    if (this.mc) {
        this.mc.destroy();
    }
    if (conf.pet_picture != "") {
        var name = canvas.Functions.extractSwfName(conf.pet_picture);
        this.mc = new canvas.px.MovieClip(canvas.Config.petsUiPath + name + "/" + name, null, false);
        this.mc.y = -2;
        this.container.addChild(this.mc);
        canvas.EventManager.addEventListener(canvas.px.MovieClipEvent.EVENT_UPDATE, this.mc, this.updateHandler, this);
        this.levelBack.texture = canvas.ResourceLoader.getImage("ui", "pet_level_back_" + (conf.pet_color == "0" ? 1 : parseInt(conf.pet_color)));
        this.levelField.text = conf.pet_level;
        this.hint.update(conf.pet_name + " [" + conf.pet_level + "]", conf.getPetColor(conf.pet_color));
        this.wall.interactive = true;
    } else {
        this.levelBack.texture = canvas.px.TextureEmpty;
        this.levelField.text = "";
        this.wall.interactive = false;
    }
};
canvas.app.user.view.PetView.prototype.updateHandler = function () {
    if (this.mc.mcChildsCache["mc1"]) {
        this.mc.stop();
        this.mc.mcChildsCache["mc1"].loop = true;
        this.mc.mcChildsCache["mc1"].play();
        this.mc.mcChildsCache["mc1"].skipMasks = true;
        if (!this.mc.mcChildsCache["mc1"].frameEvent) {
            this.mc.mcChildsCache["mc1"].frameEvent = canvas.app.user.Event.ENTER_FRAME;
        }
    } else {
        this.mc.loop = true;
        this.mc.gotoAndPlay = function () {};
        this.mc.stop = function () {};
        this.mc.frameEvent = canvas.app.user.Event.ENTER_FRAME;
    }
    canvas.EventManager.removeEventListener(canvas.px.MovieClipEvent.EVENT_UPDATE, this.mc, this.updateHandler, this);
};
canvas.app.user.view.PetView.prototype.clickHandler = function () {
    var conf = canvas.app.user.model;
    showPetInfo(conf.pet_id);
};
canvas.app.user.view.RightButton = function () {
    this._punished = 1;
    Object.defineProperty(this, "punished", {
        get: function () {
            return this._punished;
        },
        set: function (value) {
            this._punished = value;
            this.button.sprite.texture = this.button.baseTexture = canvas.ResourceLoader.getImage("ui", "punished" + this._punished);
        },
    });
    this._visible = false;
    Object.defineProperty(this, "visible", {
        get: function () {
            return this._visible;
        },
        set: function (value) {
            this._visible = value;
            if (!this.button) return;
            if (this._visible) {
                if (!this.contains(this.button)) this.addChild(this.button);
                if (parseInt(this.punished) == 4 && !this.contains(this.countBack)) this.addChild(this.countBack);
            } else {
                if (this.contains(this.countBack)) this.removeChild(this.countBack);
                if (this.contains(this.button)) this.removeChild(this.button);
            }
        },
    });
    canvas.px.Container.call(this);
    this.countBack = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "punished_cnt_back"));
    this.countField = new canvas.ui.Text(canvas.Const.FONT_ARIAL_10_BOLD_STROKE, 15719839, 22, 16, "center");
    this.countField.position.set(-1, 2);
    this.countBack.addChild(this.countField);
    this.countBack.position.set(5, 50);
    this.button = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "punished" + this._punished));
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.button, this.clickHandler, this);
};
canvas.app.user.view.RightButton.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.user.view.RightButton.prototype.clickHandler = function () {
    var conf = canvas.app.user.model;
    showPunishmentInfo(conf.nick);
};
canvas.app.user.view.SlotButton = function () {
    canvas.ui.SimpleButton.call(this, canvas.ResourceLoader.getImage("ui", "slot_button"));
    this.title = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_10_BOLD, 16777215, 60, 16, "center");
    this.addChild(this.title);
    this.title.y = -1;
};
canvas.app.user.view.SlotButton.prototype = Object.create(canvas.ui.SimpleButton.prototype);
canvas.app.user.view.SlotButton.prototype.setTitle = function (title) {
    this.title.text = title;
};
canvas.app.user.view.SlotView = function (id) {
    this._img = null;
    Object.defineProperty(this, "img", {
        get: function () {
            return this._img;
        },
        set: function (value) {
            this._img = value;
            var point = this.toGlobal(new canvas.px.Point(0, 0));
            var conf = canvas.app.user.model;
            this._img.style.left = point.x + 20 + (conf.canputoff == "0" ? -20 : 0) + canvas.app.user.Const.LEFT + (this.isRing ? -2 : 0);
            this._img.style.top = point.y + 34 + (conf.canputoff == "0" ? 20 : 0) + canvas.app.user.Const.TOP + (this.isRing ? -2 : 0);
            if (this.data && this.data[1]) this._img.src = canvas.app.user.model.picPath + this.data[1];
            if (this.isRing) {
                this._img.style.width = this._img.style.height = 30;
            }
            this.updateImg();
        },
    });
    this._imgVisible = true;
    Object.defineProperty(this, "imgVisible", {
        get: function () {
            return this._imgVisible;
        },
        set: function (value) {
            this._imgVisible = value;
            this.updateImg();
        },
    });
    canvas.ui.ListRenderer.call(this);
    this.id = id;
    this.isRing = false;
    this.isArkat = false;
    var str = "item_back_default";
    //$user_body_slots = array('BODY','ARMOR','RHAND','SHOULDER','HEAD','GLOVE','LHAND','LEG','FOOT','BANNER','BOW');, 'QUIVER', 'RING', 'AMULET', 'ACCESSORY', 'BELT'
    switch (this.id) {
        case 0:
            str = "chainmail";
            break;
        case 1:
            str = "armor";
            break;
        case 2:
            str = "hand_right";
            break;
        case 3:
            str = "shoulder";
            break;
        case 4:
            str = "helm";
            break;
        case 5:
            str = "gloves";
            break;
        case 6:
            str = "hand_left";
            break;
        case 7:
            str = "pants";
            break;
        case 8:
            str = "boots";
            break;
        case 9:
            str = "banner";
            break;
        case 10:
            str = "bow";
            break;
        case 15:
        case 16:
            str = "item_back_belt";
            break;
        case 17:
        case 18:
            str = "item_back_bag";
            break;
        case 19:
            str = "item_back_quiver";
            break;
        case 20:
            str = "item_back_chest";
            break;
        case 21:
            str = "item_back_bracelet";
            break;
        case 11:
        case 12:
            str = "ring";
            this.isRing = true;
            break;
        case 13:
        case 14:
            str = "amulet";
            this.isRing = true;
            break;
        case 22:
        case 23:
        case 24:
        case 25:
            str = "item_back_ring";
            this.isRing = true;
            this.isArkat = true;
            break;
    }
    this.back = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", str));
    this.addChild(this.back);
    this.bottomContainer = new canvas.px.Container();
    this.topContainer = new canvas.px.Container();
    this.gravIcon = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "grav_icon"));
    this.gravIcon.position.set(20, 40);
    this.runeHole = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "rune_hole"));
    this.runeHole.position.set(1, 40);
    this.runeOprava = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "rune_oprava"));
    this.runeOprava.position.set(1, 40);
    this.runeIcon = new canvas.px.Sprite(canvas.px.TextureEmpty);
    this.runeIcon.position.set(3, 42);
    this.runeIcon2 = new canvas.px.Sprite(canvas.px.TextureEmpty);
    this.runeIcon2.position.set(3, 42);
    this.addChild(this.bottomContainer);
    if (!this.isRing) {
        this.centerButton = new canvas.app.user.view.SlotButton();
        this.centerButton.position.set(0, 24);
        this.topContainer.addChild(this.centerButton);
    }
    this.infoButton = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", this.isRing ? "ring_info_button" : "info_button"), [0, 0, 0, 0]);
    if (this.isRing) {
        this.infoButton.position.set(2, 24);
    } else {
        this.infoButton.position.set(40, 0);
    }
    this.topContainer.addChild(this.infoButton);
    this.rollButton = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "roll_button"), [0, 0, 0, 0]);
    this.rollButton.position.set(0, 0);
    this.chantButton = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "chant_button"), [0, 0, 0, 0]);
    this.chantButton.position.set(20, 40);
    if (this.id == 6) {
        this.doubleHandWall = new canvas.px.Mask(60, 60, 0, 0.5);
    }
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_OVER, this.chantButton, this.chantOverHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_OUT, this.chantButton, this.chantOutHandler, this);
    this.interactive = true;
    this.buttonMode = true;
    this.update();
};
canvas.app.user.view.SlotView.prototype = Object.create(canvas.ui.ListRenderer.prototype);
canvas.app.user.view.SlotView.prototype.update = function () {
    var conf = canvas.app.user.model;
    if (this.doubleHandWall) this.removeIfExist(this.doubleHandWall);
    if (this.data && this.data[1]) {
        this.aid = this.data[0];
        if (this.data[5] != null && this.data[5] != "" && this.data[5] != undefined) {
            if (this.data[5] < 2 || this.data[5] > 6) {
                this.data[5] = 0;
            } else {
                this.data[5]--;
            }
        }
        this.back.alpha = 0;
        this.interactive = true;
        this.back.interactive = false;
        if (this.img) this.img.src = conf.picPath + this.data[1];
        if (!this.isRing) {
            if (this.data[3] != "") {
                this.bottomContainer.addChild(this.gravIcon);
            } else {
                this.bottomContainer.removeIfExist(this.gravIcon);
            }
            if (this.data[7] != undefined && parseInt(this.data[7]) != 0) {
                this.bottomContainer.addChild(this.runeHole);
                this.bottomContainer.addChild(this.runeIcon);
                this.bottomContainer.addChild(this.runeIcon2);
                this.bottomContainer.addChild(this.runeOprava);
            } else {
                this.bottomContainer.removeIfExist(this.runeHole);
                this.bottomContainer.removeIfExist(this.runeIcon);
                this.bottomContainer.removeIfExist(this.runeIcon2);
                this.bottomContainer.removeIfExist(this.runeOprava);
            }
            if (this.data[2] != "") {
                if (!this.bottomContainer.contains(this.runeIcon)) {
                    this.bottomContainer.addChild(this.runeIcon);
                }
                this.runeIcon.texture = canvas.ResourceLoader.getImage("ui", "rune_" + (parseInt(this.data[2]) * 10 + 1 + parseInt(this.data[5])));
            } else {
                this.bottomContainer.removeIfExist(this.runeIcon);
            }
            if (this.data[8] != "") {
                if (!this.bottomContainer.contains(this.runeIcon2)) {
                    this.bottomContainer.addChild(this.runeIcon2);
                }
                this.runeIcon2.texture = canvas.ResourceLoader.getImage("ui", "rune2_" + (parseInt(this.data[8]) + 1));
            } else {
                this.bottomContainer.removeIfExist(this.runeIcon2);
            }
            if (this.centerButton) this.centerButton.setTitle(conf.take_off);
            if (parseInt(this.data[4]) > 0) {
                this.topContainer.addChild(this.rollButton);
            } else {
                this.topContainer.removeIfExist(this.rollButton);
            }
            if (parseInt(this.data[6]) > 0) {
                this.topContainer.addChild(this.chantButton);
            } else {
                this.topContainer.removeIfExist(this.chantButton);
            }
            if (this.id == 6 && conf.dh == "1") {
                this.addChild(this.doubleHandWall);
            }
        }
    } else {
        this.back.alpha = 1;
        this.interactive = false;
        if (this.isArkat) {
            if (this.id - 21 <= conf.arkatCount) {
                this.back.texture = canvas.ResourceLoader.getImage("ui", "item_back_default_small");
                canvas.EventManager.dispatchEvent(canvas.app.user.Event.HINT_REMOVE, null, { target: this.back });
                this.back.interactive = false;
            } else {
                this.back.texture = canvas.ResourceLoader.getImage("ui", "item_back_ring");
                this.back.interactive = true;
                canvas.EventManager.dispatchEvent(canvas.app.user.Event.HINT_ADD, null, { target: this.back, params: new canvas.utils.HintParams(new canvas.app.view.MappingHint(canvas.Translator.getText(809))) });
            }
        }
        this.outHandler();
        this.bottomContainer.removeChildren();
    }
};
canvas.app.user.view.SlotView.prototype.clickHandler = function (mouseData) {
    var conf = canvas.app.user.model;
    if (conf.canputoff != "1") {
        showArtifactInfo(this.aid);
        return;
    }
    if (canvas.Functions.findParent(this.infoButton, mouseData.target)) {
        showArtifactInfo(this.aid);
        return;
    }
    if (canvas.Functions.findParent(this.rollButton, mouseData.target)) {
        artuse(this.aid);
        return;
    }
    if (canvas.Functions.findParent(this.chantButton, mouseData.target)) {
        art_superstructure_destroy(this.aid);
        return;
    }
    artifact(this.aid);
};
canvas.app.user.view.SlotView.prototype.overHandler = function () {
    var conf = canvas.app.user.model;
    artifactAltSimple(this.aid, 2);
    try{ if(ui_AltHandler !== undefined && typeof ui_AltHandler === "function") ui_AltHandler(this, 2); }catch(e){}
    if (conf.canputoff != "1") return;
    this.addChild(this.topContainer);
};
canvas.app.user.view.SlotView.prototype.outHandler = function () {
    var conf = canvas.app.user.model;
    artifactAltSimple(this.aid, 0);
    try{ if(ui_AltHandler !== undefined && typeof ui_AltHandler === "function") ui_AltHandler(this, 0); }catch(e){}
    if (conf.canputoff != "1") return;
    this.removeIfExist(this.topContainer);
};
canvas.app.user.view.SlotView.prototype.chantOverHandler = function () {
    var conf = canvas.app.user.model;
    this.centerButton.setTitle(conf.take_off_chant);
};
canvas.app.user.view.SlotView.prototype.chantOutHandler = function () {
    var conf = canvas.app.user.model;
    this.centerButton.setTitle(conf.take_off);
};
canvas.app.user.view.SlotView.prototype.updateImg = function () {
    if (this.img) {
        this.img.style.display = this.imgVisible ? "" : "none";
    }
};
canvas.app.user.view.SwitchStyleView = function () {
    this._type = null;
    Object.defineProperty(this, "type", {
        get: function () {
            return this._type;
        },
        set: function (value) {
            this._type = value;
            this.image.texture = canvas.ResourceLoader.getImage("ui", "switcher" + this._type);
            if (this._type == "1") {
                this.image.position.set(10, 8);
            } else {
                this.image.position.set(7, 7);
            }
        },
    });
    canvas.ui.SimpleButton.call(this, canvas.ResourceLoader.getImage("ui", "switcher_back"));
    this.image = new canvas.px.Sprite(canvas.px.TextureEmpty);
    this.addChild(this.image);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this, this.clickHandler, this);
};
canvas.app.user.view.SwitchStyleView.prototype = Object.create(canvas.ui.SimpleButton.prototype);
canvas.app.user.view.SwitchStyleView.prototype.clickHandler = function () {
    switchViewArtifact();
    this.type = this.type == "1" ? "2" : "1";
};
canvas.app.user.view.TrophyView = function () {
    canvas.px.Container.call(this);
    var conf = canvas.app.user.model;
    this.bg = new canvas.px.Sprite(canvas.px.TextureEmpty);
    this.bg.buttonMode = true;
    this.addChild(this.bg);
    this.bg.interactive = true;
    this.bg.hitArea = new canvas.px.Rectangle(0, 0, 46, 49);
    this.wall = new canvas.px.Mask(46, 49);
    this.bg.addChild(this.wall);
    this.wall.interactive = true;
    this.container = new canvas.px.Container();
    this.bg.addChild(this.container);
    this.container.filters = [canvas.Functions.getDropShadow(90, 2)];
    this.bgLevel = new canvas.px.Sprite(canvas.px.TextureEmpty);
    this.addChild(this.bgLevel);
    this.bgLevel.position.set(8, 31);
    this.bgLevel.interactive = false;
    this.levelField = new canvas.ui.Text(canvas.Const.FONT_ARIAL_11_BOLD_STROKE, 15719839, 36, 20, "center");
    this.addChild(this.levelField);
    this.levelField.position.set(23, 38);
    this.deleteButton = conf.canputoff == "0" ? new canvas.px.Container() : new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "trophy_delete_button"));
    this.deleteButton.position.set(4, 35);
    canvas.EventManager.dispatchEvent(canvas.app.user.Event.HINT_ADD, null, { target: this.deleteButton, params: new canvas.utils.HintParams(new canvas.app.view.MappingHint(conf.take_off, undefined, undefined, undefined, {add_y: -6})) });
    this.hint = new canvas.app.view.MappingHint("111", 5140, true, true, {add_y: -6});
    canvas.EventManager.dispatchEvent(canvas.app.user.Event.HINT_ADD, null, { target: this.wall, params: new canvas.utils.HintParams(this.hint) });
    this.bg.click = this.clickHandler.bind(this);
    this.bg.mouseover = this.overHandler.bind(this);
    this.bg.mouseout = this.outHandler.bind(this);
};
canvas.app.user.view.TrophyView.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.user.view.TrophyView.prototype.update = function () {
    var conf = canvas.app.user.model;
    if (this.mc) {
        this.mc.destroy();
    }
    if (conf.trophy_name != "") {
        var bgNum = 1;
        var textColor = 6710886;
        if (conf.trophyLevel == conf.myLevel) {
            conf.textColor = 3381504;
            bgNum = 2;
        } else if (conf.trophyLevel == conf.myLevel + 1) {
            conf.textColor = 3342591;
            bgNum = 3;
        } else if (conf.trophyLevel == conf.myLevel + 2) {
            conf.textColor = 10027161;
            bgNum = 4;
        } else if (conf.trophyLevel >= conf.myLevel + 3) {
            conf.textColor = 16711680;
            bgNum = 5;
        }
        this.bg.texture = conf.trophyLevel == 0 ? canvas.px.TextureEmpty : canvas.ResourceLoader.getImage("ui", "trophy_bg_" + bgNum);
        this.bgLevel.texture = canvas.ResourceLoader.getImage("ui", "trophy_bg_level_" + bgNum);
        this.mc = new canvas.animation.SkeletonInfo(conf.getTrophySkPath());
        this.mc.stop();
        this.mc.position.set(-73, -2);
        this.container.addChild(this.mc);
        this.mc.skeletonData = new canvas.data.battle.SkeletonData(conf.trophy_parts, conf.trophyGender);
        this.levelField.text = conf.trophyLevel == 0 ? "" : conf.trophyLevel;
        this.addChildAt(this.bg, 0);
        var hintText = conf.alt + " ";
        if (conf.trophyClan != "") {
            hintText += "<img yOffset='4' src='" + conf.trophyClan + "'/>";
        }
        if (conf.trophyRank != "") {
            hintText += "<img yOffset='4' src='" + conf.trophyRank + "'/>";
        }
        hintText += conf.trophy_name + " [" + conf.trophyLevel + "]";
        this.hint.update("<b>" + hintText + "</b>", textColor != 0 ? textColor : 3355443);
    } else {
        this.bg.texture = canvas.px.TextureEmpty;
        this.levelField.text = "";
        this.bgLevel.texture = canvas.px.TextureEmpty;
        this.removeIfExist(this.bg);
    }
};
canvas.app.user.view.TrophyView.prototype.clickHandler = function (mouseData) {
    var conf = canvas.app.user.model;
    if (canvas.Functions.findParent(this.deleteButton, mouseData.target)) {
        trophy_drop();
        return;
    }
    showUserInfo(conf.trophy_name);
};
canvas.app.user.view.TrophyView.prototype.overHandler = function () {
    this.bg.addChild(this.deleteButton);
};
canvas.app.user.view.TrophyView.prototype.outHandler = function () {
    this.bg.removeIfExist(this.deleteButton);
};
canvas.app.user.view.ZoomView = function () {
    canvas.px.Container.call(this);
    this.zoomIn = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "zoom_in"));
    this.addChild(this.zoomIn);
    this.zoomIn.position.set(15, 0);
    this.zoomIn.sprite.hitArea = new canvas.px.Circle(12, 12, 12);
    this.zoomOut = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "zoom_out"));
    this.addChild(this.zoomOut);
    this.zoomOut.position.set(0, 15);
    this.zoomOut.sprite.hitArea = new canvas.px.Circle(12, 12, 12);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.zoomIn, this.clickInHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.zoomOut, this.clickOutHandler, this);
};
canvas.app.user.view.ZoomView.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.user.view.ZoomView.prototype.clickInHandler = function () {
    canvas.EventManager.dispatchEvent(canvas.app.user.Event.ZOOM_IN);
};
canvas.app.user.view.ZoomView.prototype.clickOutHandler = function () {
    canvas.EventManager.dispatchEvent(canvas.app.user.Event.ZOOM_OUT);
};
canvas.app.leftMenu.Const = { ON_PAGE: 6, ON_PAGE_MIN: 6, ON_PAGE_MAX: 12, MIN_COOLDOWN: 5, VARIANT_SLOTS_COUNT: 2, SLOT_HEIGHT: 45 };
canvas.app.leftMenu.Event = {
    ENTER_FRAME: "LeftMenu.ENTER_FRAME",
    CHANGE_PAGE: "LeftMenu.CHANGE_PAGE",
    SHOW_VARIANT_SLOTS: "LeftMenu.SHOW_VARIANT_SLOTS",
    SELECT_SLOT: "LeftMenu.SELECT_SLOT",
    UNSET_SLOT: "LeftMenu.UNSET_SLOT",
    SLOT_CHANGED: "LeftMenu.SLOT_CHANGED",
    SLOT_HIDED: "LeftMenu.SLOT_HIDED",
    BATTLE_ACTION: "LeftMenu.BATTLE_ACTION",
    FOCUS_FIRST_FREE_SLOT: "LeftMenu.FOCUS_FIRST_FREE_SLOT",
};
canvas.app.leftMenu.Main = function (model) {
    canvas.px.Container.call(this);
    this.model = model;
    this.view = new canvas.app.leftMenu.View();
    this.addChild(this.view);
    this.unsetTimer = 0;
    canvas.EventManager.addEventListener(canvas.app.leftMenu.Event.CHANGE_PAGE, null, this.pageHandler, this);
    canvas.EventManager.addEventListener(canvas.app.leftMenu.Event.SELECT_SLOT, null, this.selectSlotHandler, this);
    canvas.EventManager.addEventListener(canvas.app.leftMenu.Event.UNSET_SLOT, null, this.unsetSlotHandler, this);
    canvas.EventManager.addEventListener(canvas.app.leftMenu.Event.SHOW_VARIANT_SLOTS, null, this.showVariantSlotHandler, this);
    canvas.EventManager.addEventListener(canvas.app.leftMenu.Event.SLOT_HIDED, null, this.slotHidedHandler, this);
    canvas.EventManager.addEventListener(canvas.app.leftMenu.Event.BATTLE_ACTION, null, this.battleActionHandler, this);
    canvas.EventManager.addEventListener(canvas.app.leftMenu.Event.ENTER_FRAME, null, this.frameHandler, this);
    canvas.EventManager.addEventListener(canvas.app.leftMenu.Event.FOCUS_FIRST_FREE_SLOT, null, this.focusFirstFreeSlot, this);
    this.testSize();
    this.focusFirstFreeSlot();
};
canvas.app.leftMenu.Main.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.leftMenu.Main.prototype.swfObject = function (data) {
    var str;
    var config;
    if (data) {
        for (str in data) {
            switch (str) {
                case "user|effects":
                    config = data["user|effects"];
                    var a = [];
                    var b = [];
                    var str2;
                    for (str2 in config.effects) {
                        a[parseInt(str2)] = config.effects[str2];
                    }
                    for (str2 in config.variant_effects) {
                        b[parseInt(str2)] = config.variant_effects[str2];
                    }
                    var obj = { EffList: a, VariantEffList: b, slotsTotal: config.effect_slot_num_max, VariantSlotsTotal: config.variant_effect_slot_num_max };
                    this.model.parse(obj);
                    canvas.EventManager.addEventListener(canvas.app.leftMenu.Event.SLOT_CHANGED, null, this.slotChangedHandler, this);
                    this.view.update();
                    canvas.EventManager.removeEventListener(canvas.app.leftMenu.Event.SLOT_CHANGED, null, this.slotChangedHandler, this);
                    break;
                case "common|current_slot":
                    this.model.itemWasEquipped = true;
                    break;
            }
        }
    }
};
canvas.app.leftMenu.Main.prototype.swfData = function (data) {
    var a = data.split("@");
    var b;
    var item, slot, i;
    if (a.length == 2) {
        switch (a[0]) {
            case "EffList":
                this.model.parseBattleEffects(a[1]);
                this.view.update();
                break;
            case "update_cnt":
                b = a[1].split(",");
                item = this.model.addCount(b[0], parseInt(b[1]));
                slot = this.view.list.items[(item.slot - 1) % canvas.app.leftMenu.Const.ON_PAGE];
                if (slot.variantSlotsContainer.parent) {
                    slot._disabledVariant = true;
                }
                this.model.addCooldown(item);
                this.view.update();
                break;
            case "swap_slots":
                b = a[1].split(",");
                this.model.swapItems(b[0], b[2]);
                this.view.update();
                break;
            case "PrevPage":
                this.view.pager.currentPage--;
                break;
            case "NextPage":
                this.view.pager.currentPage++;
                break;
            case "HotKey":
                i = parseInt(a[1]) - 1;
                if (this.view.list.items[i]) this.view.list.items[i].items[0].clickHandler();
                break;
            case "cd_dec":
                this.model.deltaTurn(parseInt(a[1]));
                break;
        }
    }
};
canvas.app.leftMenu.Main.prototype.pageHandler = function (event) {
    this.view.update();
};
canvas.app.leftMenu.Main.prototype.selectSlotHandler = function (event) {
    if (!this.model.inBattle) {
        this.model.selectedRow = event.params.row;
        this.model.selectedColumn = event.params.column;
        this.model.selectedSlot = this.view.getSlotNum(this.model.selectedColumn, this.model.selectedRow);
        this.model.selectedSlotIsVariant = this.model.selectedColumn > 0;
        this.view.selectSlot(this.model.selectedSlot, this.model.selectedSlotIsVariant);
        this.slotFocus(this.model.selectedSlot, this.model.selectedSlotIsVariant ? 1 : 0);
    }
};
canvas.app.leftMenu.Main.prototype.focusFirstFreeSlot = function () {
    if (this.model.selectedSlot || this.model.inBattle) return;
    var slotNum = 1;
    var varSlotNum = 1;
    for (var i = 0; i < this.model.slotsCount; i++) {
        for (var j = 0; j < 3; j++) {
            if (j > 0) {
                if (varSlotNum > this.model.variantSlotsCount) continue;
                if (!this.model.variantItems[varSlotNum]) {
                    this.slotFocus(varSlotNum, 1);
                    if (this.model.itemWasEquipped) this.view.pager.currentPage = Math.max(1, Math.ceil((varSlotNum - 1) / (canvas.app.leftMenu.Const.ON_PAGE * 2)));
                    this.model.itemWasEquipped = false;
                    return;
                }
                varSlotNum++;
            } else if (!this.model.items[slotNum]) {
                this.slotFocus(slotNum, 0);
                if (this.model.itemWasEquipped) this.view.pager.currentPage = Math.max(1, Math.ceil((slotNum - 1) / canvas.app.leftMenu.Const.ON_PAGE));
                this.model.itemWasEquipped = false;
                return;
            } else {
                slotNum++;
            }
        }
    }
    if (this.model.itemWasEquipped) {
        if (this.model.slotFocusIsVariant) {
            this.view.pager.currentPage = Math.max(1, Math.ceil(this.model.slotFocusNum / (canvas.app.leftMenu.Const.ON_PAGE * 2)));
        } else {
            this.view.pager.currentPage = Math.max(1, Math.ceil(this.model.slotFocusNum / canvas.app.leftMenu.Const.ON_PAGE));
        }
    }
    this.model.itemWasEquipped = false;
    this.slotFocus(0, 0);
};
canvas.app.leftMenu.Main.prototype.slotFocus = function (slotNum, isVariant) {
    slotFocus(slotNum, isVariant);
    this.model.slotFocusNum = slotNum;
    this.model.slotFocusIsVariant = isVariant;
};
canvas.app.leftMenu.Main.prototype.unsetSlotHandler = function (event) {
    this.model.selectedSlot = null;
    this.model.unsetList.push(event.params);
    if (!this.unsetTimer) {
        this.unsetTimerHandler();
    }
};
canvas.app.leftMenu.Main.prototype.unsetTimerHandler = function (event) {
    if (this.model.unsetList.length > 0) {
        this.unsetSlot(this.model.unsetList.shift());
        this.unsetTimer = setTimeout(this.unsetTimerHandler.bind(this), 500);
    } else {
        this.unsetTimer = 0;
    }
};
canvas.app.leftMenu.Main.prototype.unsetSlot = function (params) {
    var slotNum = this.view.getSlotNum(params.column, params.row);
    if (unsetEffect(params.id, slotNum)) {
        if (params.column > 0) {
            this.model.variantItems[slotNum] = null;
        } else {
            this.model.items[slotNum] = null;
        }
        this.view.update();
    }
};
canvas.app.leftMenu.Main.prototype.showVariantSlotHandler = function (event) {
    for (var i = 0; i < canvas.app.leftMenu.Const.ON_PAGE; i++) {
        if (i != event.params) this.view.list.items[i].hideVariantSlots();
    }
};
canvas.app.leftMenu.Main.prototype.slotChangedHandler = function (event) {
    if (!this.model.inBattle) {
        this.view.list.items[event.params].showVariantSlots();
        this.showVariantSlotHandler(event);
    }
};
canvas.app.leftMenu.Main.prototype.slotHidedHandler = function (event) {
    this.testSize();
};
canvas.app.leftMenu.Main.prototype.testSize = function () {
    var bool = false;
    for (var i = 0; i < canvas.app.leftMenu.Const.ON_PAGE; i++) {
        if (this.view.list.items[i].opened) {
            bool = true;
            break;
        }
    }
    var size = bool ? 0 : -84;
    if (size != this.model.lastCanvasSize) {
        this.model.lastCanvasSize = size;
        this.view.position.set(-size, 0);
        setStyleSWF("left", size);
    }
};
canvas.app.leftMenu.Main.prototype.battleActionHandler = function (event) {
    this.model.swfTransfer("game", event.params);
};
canvas.app.leftMenu.Main.prototype.frameHandler = function (event) {
    if (this.model.inBattle) {
        var len = this.model.groupCooldowns.length;
        var willBreak = false;
        if (len > 0) {
            var cd;
            var now = canvas.Functions.now();
            var item;
            for (var i = 0; i < len; i++) {
                cd = this.model.groupCooldowns[i];
                if (cd.type == 1) {
                    if (now >= cd.finish) {
                        this.model.groupCooldowns.splice(i, 1);
                        willBreak = true;
                    }
                } else {
                    if (cd.current >= cd.finish) {
                        this.model.groupCooldowns.splice(i, 1);
                        willBreak = true;
                    }
                }
                for (var j = 0; j < canvas.app.leftMenu.Const.ON_PAGE; j++) {
                    for (var k = 0; k < 3; k++) {
                        item = this.view.list.items[j].items[k];
                        if (item.data && item.data.cdGroupId == cd.group) {
                            item.updateCooldown(willBreak ? null : cd);
                        }
                    }
                }
                if (willBreak) return;
            }
        }
    }
};
canvas.app.leftMenu.Model = function (par) {
    par.EffList = par.EffList.split(",");
    par.VariantEffList = par.VariantEffList.split(",");
    this.persFlags = par.persFlags != undefined ? parseInt(par.persFlags) : 0;
    this.flagShowBattleHints = par.persFlags != undefined ? canvas.Functions.testFlag(this.persFlags, 262144) : true;
    this.unsetList = [];
    this.lastCanvasSize = 0;
    this.lastOnPageCount = 0;
    this.groupCooldowns = [];
    this.itemWasEquipped = false;
    this.slotFocusNum = 0;
    this.slotFocusIsVariant = 0;
    this.parse(par);
};
canvas.app.leftMenu.Model.prototype.parse = function (par) {
    this.selectedSlot = null;
    this.items = par.EffList ? this.parseItems(par.EffList) : [];
    this.variantItems = par.VariantEffList ? this.parseItems(par.VariantEffList, true) : [];
    this.slotsCount = par.slotsTotal ? parseInt(par.slotsTotal) : 0;
    this.variantSlotsCount = par.VariantSlotsTotal ? parseInt(par.VariantSlotsTotal) : 0;
    this.inBattle = false;
    if (this.groupCooldowns.length > 0) {
        this.groupCooldowns = [];
    }
};
canvas.app.leftMenu.Model.prototype.parseItems = function (a, variant) {
    if (variant == undefined) variant = false;
    var result = [];
    var len = a.length;
    var b;
    var item;
    for (var i = 0; i < len; i++) {
        item = new canvas.data.leftMenu.ItemData(a[i].split(":"));
        item.variant = variant;
        result[item.slot] = item;
    }
    return result;
};
canvas.app.leftMenu.Model.prototype.inBattleFrame = function () {
    return this.swfTransfer("game", "ping@null");
};
canvas.app.leftMenu.Model.prototype.swfTransfer = function (tar, dat) {
    return swfTransfer("item", tar, dat);
};
canvas.app.leftMenu.Model.prototype.parseBattleEffects = function (par) {
    var a = par.split(String.fromCharCode(2));
    canvas.app.leftMenu.Const.MIN_COOLDOWN = parseFloat(a.pop());
    var len = a.length;
    this.items = [];
    this.variantItems = [];
    for (var i = 0; i < len; i++) {
        item = new canvas.data.leftMenu.ItemData(a[i].split(String.fromCharCode(1)));
        if (item.variant) {
            item.slot = (item.slot - 1) * canvas.app.leftMenu.Const.VARIANT_SLOTS_COUNT + (item.variantNum - 1);
            this.variantItems[item.slot] = item;
        } else {
            this.items[item.slot] = item;
        }
        if (item.cdLeft > 0) {
            this.addCooldown(item);
        }
    }
    this.inBattle = true;
};
canvas.app.leftMenu.Model.prototype.addCount = function (id, value) {
    var len = this.items.length;
    var item = this.findItem(id);
    if (item) {
        item.count += value;
        if (item.count < 1) {
            this.items[item.slot] = null;
        }
        return item;
    }
    item = this.findVariantItem(id);
    if (item) {
        item.count += value;
        if (item.count < 1) {
            this.variantItems[item.slot] = null;
        }
        return item;
    }
};
canvas.app.leftMenu.Model.prototype.findItem = function (id) {
    var len = this.items.length;
    var item;
    for (var i = 0; i < len; i++) {
        item = this.items[i];
        if (item && item.id == id) {
            return item;
        }
    }
    return null;
};
canvas.app.leftMenu.Model.prototype.findVariantItem = function (id) {
    var len = this.variantItems.length;
    var item;
    for (var i = 0; i < len; i++) {
        item = this.variantItems[i];
        if (item && item.id == id) {
            return item;
        }
    }
    return null;
};
canvas.app.leftMenu.Model.prototype.swapItems = function (id1, id2) {
    var item1 = this.findVariantItem(id1);
    var item2;
    var tmp;
    if (item1) {
        item2 = this.items[Math.floor((item1.slot - 1) / canvas.app.leftMenu.Const.VARIANT_SLOTS_COUNT) + 1];
        if (item2) {
            tmp = item1.slot;
            item1.slot = item2.slot;
            item2.slot = tmp;
            this.items[item1.slot] = item1;
            this.variantItems[item2.slot] = item2;
            item2.variant = true;
            item1.variant = false;
        }
    }
};
canvas.app.leftMenu.Model.prototype.addCooldown = function (item) {
    var obj = { group: item.cdGroupId, type: item.cdType, finish: item.cdType == 1 ? canvas.Functions.now() + (item.cdLeft > 0 ? item.cdLeft : item.cdTime) : item.cdTime };
    obj.start = item.cdType == 1 ? obj.finish - item.cdTime : 0;
    if (obj.type == 2) {
        obj.current = item.cdLeft > 0 ? obj.finish - item.cdLeft : 0;
    }
    item.cdLeft = 0;
    var len = this.groupCooldowns.length;
    var cd;
    if (len > 0) {
        for (var i = 0; i < len; i++) {
            cd = this.groupCooldowns[i];
            if (cd.group == obj.group) {
                cd.finish = Math.max(cd.finish, obj.finish);
                return;
            }
        }
    }
    this.groupCooldowns.push(obj);
};
canvas.app.leftMenu.Model.prototype.deltaTurn = function (value) {
    var len = this.groupCooldowns.length;
    for (var i = 0; i < len; i++) {
        if (this.groupCooldowns[i].type == 2) {
            this.groupCooldowns[i].current += value;
        }
    }
};
canvas.app.leftMenu.View = function () {
    canvas.px.Container.call(this);
    this.back = this.addChild(new canvas.px.Mask(150, 1e3));
    this.back.interactive = true;
    this.back.click = this.backClickHandler.bind(this);
    this.pager = new canvas.app.leftMenu.view.PagerView();
    this.list = new canvas.ui.List(canvas.ui.ListType.VERTICAL, 1);
    this.list.interactive = false;
    this.addChild(this.list);
    this.list.position.set(0, 2);
    this.initList();
    this.update();
};
canvas.app.leftMenu.View.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.leftMenu.View.prototype.initList = function () {
    this.list.clear(false);
    this.list.setSize(150, canvas.app.leftMenu.Const.ON_PAGE * canvas.app.leftMenu.Const.SLOT_HEIGHT);
    for (var i = 0; i < canvas.app.leftMenu.Const.ON_PAGE; i++) {
        this.list.add(new canvas.app.leftMenu.view.SlotView(i), false);
    }
    this.pager.position.set(0, this.list._height - 7);
    this.list.update();
};
canvas.app.leftMenu.View.prototype.update = function () {
    var conf = canvas.app.leftMenu.model;
    this.pager.numPages = Math.ceil(conf.slotsCount / canvas.app.leftMenu.Const.ON_PAGE);
    var start = (this.pager.currentPage - 1) * canvas.app.leftMenu.Const.ON_PAGE + 1;
    var j = 0;
    var i;
    for (i = start; i < start + canvas.app.leftMenu.Const.ON_PAGE; i++) {
        if (!conf.inBattle) this.list.items[j]._disabledVariant = false;
        this.list.items[j].items[0].data = conf.items[i];
        this.list.items[j].items[0].disabled = i > conf.slotsCount;
        this.list.items[j].items[0].selected = j == conf.selectedRow && conf.selectedColumn == 0;
        j++;
    }
    start = (this.pager.currentPage - 1) * canvas.app.leftMenu.Const.ON_PAGE * 2 + 1;
    var j = 0;
    var index;
    var singleSlot = false;
    for (i = start; i < start + canvas.app.leftMenu.Const.ON_PAGE * 2; i++) {
        index = i % 2 == 0 ? 2 : 1;
        singleSlot = index == 1 && i == conf.variantSlotsCount;
        if (conf.inBattle && !this.list.items[j]._disabledVariant) {
            this.list.items[j]._disabledVariant = conf.variantItems[i] && conf.variantItems[i].disable;
        }
        if (index == 1) this.list.items[j].data = i > conf.variantSlotsCount ? 1 : singleSlot ? 2 : 3;
        if (i <= conf.variantSlotsCount) {
            this.list.items[j].items[singleSlot ? 2 : index].data = conf.variantItems[i];
            this.list.items[j].items[singleSlot ? 2 : index].disabled = i > conf.variantSlotsCount;
            this.list.items[j].items[singleSlot ? 2 : index].selected = j == conf.selectedRow && conf.selectedColumn == index;
        }
        if (index == 2) j++;
    }
    this.selectSlot(conf.selectedSlot, conf.selectedSlotIsVariant);
    canvas.EventManager.dispatchEvent(canvas.app.leftMenu.Event.FOCUS_FIRST_FREE_SLOT);
    if (canvas.app.leftMenu.model.slotsCount > canvas.app.leftMenu.Const.ON_PAGE) {
        this.addChildAt(this.pager, 1);
    } else {
        this.removeIfExist(this.pager);
    }
};
canvas.app.leftMenu.View.prototype.selectSlot = function (slotNum, isVariant) {
    for (var i = 0; i < canvas.app.leftMenu.Const.ON_PAGE; i++) {
        for (var j = 0; j < 3; j++) {
            this.list.items[i].items[j].selected = ((j == 0 && !isVariant) || (j > 0 && isVariant)) && slotNum == this.getSlotNum(j, i);
        }
    }
};
canvas.app.leftMenu.View.prototype.getSlotNum = function (x, y) {
    if (x > 0) {
        return (this.pager.currentPage - 1) * canvas.app.leftMenu.Const.ON_PAGE * 2 + y * 2 + x;
    } else {
        return (this.pager.currentPage - 1) * canvas.app.leftMenu.Const.ON_PAGE + y + 1;
    }
};
canvas.app.leftMenu.View.prototype.backClickHandler = function (e) {
    for (var i = 0; i < canvas.app.leftMenu.Const.ON_PAGE; i++) {
        this.list.items[i].hideVariantSlots();
    }
};
canvas.app.leftMenu.view.ItemView = function (row, column) {
    this._disabled = false;
    Object.defineProperty(this, "disabled", {
        get: function () {
            return this._disabled;
        },
        set: function (value) {
            this._disabled = value;
            if (this.disabled) {
                this.container.addChild(this.disabledImage);
                this.interactive = false;
            } else {
                this.container.removeIfExist(this.disabledImage);
                this.interactive = true;
            }
        },
    });
    canvas.ui.ListRenderer.call(this);
    this.container = this.addChild(new canvas.px.Container());
    this.row = row;
    this.column = column;
    this.back = new canvas.px.Graphics();
    this.back.beginFill(0, 0);
    this.back.drawCircle(25, 23, 20, 20);
    this.back.endFill();
    this.container.addChild(this.back);
    this.selector = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "left/item_select"));
    this.selector.position.set(7, 3);
    this.disabledImage = new canvas.px.Graphics();
    this.disabledImage.beginFill(6684672, 0.4);
    this.disabledImage.drawCircle(25, 23, 20, 20);
    this.disabledImage.endFill();
    this.interactive = true;
    this.buttonMode = true;
    this.image = new canvas.ui.Image(null, null, null, false);
    this.image.scale.set(2 / 3, 2 / 3);
    this.image.position.set(7, 3);
    this.container.addChild(this.image);
    var msk = new canvas.px.Graphics();
    msk.beginFill(0, 1);
    msk.drawCircle(20, 20, 20);
    msk.endFill();
    this.container.addChild(msk);
    msk.position.set(7, 3);
    this.image.mask = msk;
    this.countField = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_9_STROKE, 16777215, 20, 15, "center");
    this.addChild(this.countField);
    if (this.column > 0) {
        this.countField.position.set(16, 18);
    } else {
        this.countField.position.set(26, 27);
    }
    this.cooldown = new canvas.px.RoundProgress(22, 0, 0.8);
    this.container.addChild(this.cooldown);
    this.cooldown.progress = 0;
    this.cooldown.position.set(26, 22);
    this.cooldown.scale.x = -1;
    this.cooldownField = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_9_BOLD_STROKE, 16777215, 32, 15, "center");
    this.cooldownField.position.set(10, 17);
    this.light = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "left/item_over"));
    this.light.position.set(7, 3);
    this.light.blendMode = canvas.px.BlendMode.OVERLAY;
    this.click = this.clickHandler.bind(this);
    this.mouseover = this.overHandler.bind(this);
    this.mouseout = this.outHandler.bind(this);
};
canvas.app.leftMenu.view.ItemView.prototype = Object.create(canvas.ui.ListRenderer.prototype);
canvas.app.leftMenu.view.ItemView.prototype.update = function () {
    var conf = canvas.app.leftMenu.model;
    if (this.data) {
        this.image.setImage(canvas.Config.artifactsPath + this.data.image);
        this.countField.text = this.data.count > 98 ? "99" : this.data.count;
    } else {
        this.image.clear();
        this.countField.text = "";
    }
    if ((this.oldData == null && this.data != null) || (this.oldData != null && this.data == null) || (this.data != null && this.oldData != null && this.data.id != this.oldData.id)) {
        canvas.EventManager.dispatchEvent(canvas.app.leftMenu.Event.SLOT_CHANGED, null, this.row);
        this.updateCooldown(null);
    }
    if (!conf.inBattle) {
        this.updateCooldown(null);
    }
};
canvas.app.leftMenu.view.ItemView.prototype.updateSelection = function () {
    this._selected = !this.data && !this.disabled && this._selected;
    if (this.selected) {
        this.container.addChild(this.selector);
    } else {
        this.container.removeIfExist(this.selector);
    }
};
canvas.app.leftMenu.view.ItemView.prototype.clickHandler = function () {
    var conf = canvas.app.leftMenu.model;
    if (!this.disabled) {
        if (conf.inBattleFrame()) {
            if (this.data && this.cooldown.progress == 0) {
                if (this.column > 0) {
                    canvas.EventManager.dispatchEvent(canvas.app.leftMenu.Event.BATTLE_ACTION, null, "swapSubSlot@" + this.data.id);
                } else {
                    canvas.EventManager.dispatchEvent(canvas.app.leftMenu.Event.BATTLE_ACTION, null, "useEffect@" + this.data.id);
                }
            }
        } else {
            if (this.data) {
                canvas.EventManager.dispatchEvent(canvas.app.leftMenu.Event.UNSET_SLOT, null, { id: this.data.id, row: this.row, column: this.singleSlot ? this.column - 1 : this.column });
            } else {
                canvas.EventManager.dispatchEvent(canvas.app.leftMenu.Event.SELECT_SLOT, null, { row: this.row, column: this.column });
            }
        }
    }
};
canvas.app.leftMenu.view.ItemView.prototype.overHandler = function () {
    var conf = canvas.app.leftMenu.model;
    if (this.data && !this.disabled) {
        this.container.addChild(this.light);
        if (!conf.inBattle || conf.flagShowBattleHints) {
            artifactAltSimple(this.data.id, 2);
            canvas.app.leftMenu.view.ItemView.overedId = this.data.id;
        }
        if (this.column > 0) {
            this.basePos = new canvas.px.Point(this.container.x, this.container.y);
            this.container.scale.set(0.85, 0.85);
            this.container.position.set(this.basePos.x - 4, this.basePos.y - 3);
        }
        if (this.cooldown.progress > 0) {
            this.container.addChild(this.cooldownField);
        }
    }
};
canvas.app.leftMenu.view.ItemView.prototype.outHandler = function () {
    this.container.removeIfExist(this.light);
    this.container.removeIfExist(this.cooldownField);
    if (this.column > 0 && this.basePos) {
        this.container.scale.set(0.7, 0.7);
        this.container.position.set(this.basePos.x, this.basePos.y);
    }
    if (!this.data || this.data.id == canvas.app.leftMenu.view.ItemView.overedId) {
        artifactAltSimple(canvas.app.leftMenu.view.ItemView.overedId, 0);
        canvas.app.leftMenu.view.ItemView.overedId = 0;
    }
};
canvas.app.leftMenu.view.ItemView.prototype.updateCooldown = function (obj) {
    if (obj) {
        var now = Date.now();
        if (obj.type == 1) {
            this.cooldownField.text = obj.finish - canvas.Functions.now();
            this.cooldown.progress = 1 - (now - obj.start * 1e3) / ((obj.finish - obj.start) * 1e3 - 500);
        } else {
            this.cooldownField.text = obj.finish - obj.current;
            this.cooldown.progress = 1 - (obj.current - obj.start) / (obj.finish - obj.start);
        }
    } else {
        this.cooldownField.text = "";
        this.cooldown.progress = 0;
    }
};
canvas.app.leftMenu.view.ItemView.overedId = 0;
canvas.app.leftMenu.view.PagerView = function (index) {
    this._numPages = 1;
    Object.defineProperty(this, "numPages", {
        get: function () {
            return this._numPages;
        },
        set: function (value) {
            this._numPages = value;
            this.currentPage = this.currentPage;
            this.update();
        },
    });
    this._currentPage = 1;
    Object.defineProperty(this, "currentPage", {
        get: function () {
            return this._currentPage;
        },
        set: function (value) {
            var prev = this.currentPage;
            this._currentPage = value < 1 ? 1 : value > this.numPages ? this.numPages : value;
            this.update();
            if (prev != this.currentPage) {
                canvas.EventManager.dispatchEvent(canvas.app.leftMenu.Event.CHANGE_PAGE, null, this.currentPage);
            }
        },
    });
    canvas.px.Container.call(this);
    this.back = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "left/pager_back")));
    this.plusButton = this.addChild(new canvas.ui.Button(canvas.ResourceLoader.getImage("ui", "left/pager_arrow"), canvas.ResourceLoader.getImage("ui", "left/pager_arrow_over")));
    this.plusButton.position.set(46, 11);
    this.minusButton = this.addChild(new canvas.ui.Button(canvas.ResourceLoader.getImage("ui", "left/pager_arrow"), canvas.ResourceLoader.getImage("ui", "left/pager_arrow_over")));
    this.minusButton.scale.x = -1;
    this.minusButton.position.set(15, 11);
    this.field = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD, 16699293, 30, 18, "center"));
    this.field.position.set(16, 9);
    this.field.interactive = false;
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.minusButton, this.minusClickHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.plusButton, this.plusClickHandler, this);
    this.update();
};
canvas.app.leftMenu.view.PagerView.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.leftMenu.view.PagerView.prototype.update = function () {
    this.field.text = this.currentPage;
};
canvas.app.leftMenu.view.PagerView.prototype.minusClickHandler = function () {
    this.currentPage--;
};
canvas.app.leftMenu.view.PagerView.prototype.plusClickHandler = function () {
    this.currentPage++;
};
canvas.app.leftMenu.view.SlotView = function (index) {
    this._disabledVariant = false;
    Object.defineProperty(this, "disabledVariant", {
        get: function () {
            return this._disabledVariant;
        },
        set: function (value) {
            this._disabledVariant = value;
            this.update();
        },
    });
    canvas.ui.ListRenderer.call(this);
    this.index = index;
    this.interactive = false;
    this.startPos = -24;
    this.endPos = 0;
    this.direction = 0;
    this.opened = false;
    this.variantSlotsContainer = this.addChild(new canvas.px.Container());
    this.variantSlotsBack = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "left/variant_slots_back"));
    this.variantSlotsBack.position.set(0, -1);
    this.variantSlotsContainer.addChild(this.variantSlotsBack);
    this.variantSlotsContainer.position.set(this.startPos, 0);
    var msk = new canvas.px.Mask(80, 45);
    msk.position.set(65, 5);
    this.addChild(msk);
    this.variantSlotsContainer.mask = msk;
    this.back = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "left/slot_back")));
    this.back.position.set(11, 7);
    this.items = [];
    for (var i = 0; i < 3; i++) {
        var item = new canvas.app.leftMenu.view.ItemView(this.index, i);
        this.items.push(item);
        if (i == 0) {
            this.addChild(item);
        } else {
            this.variantSlotsContainer.addChild(item);
            item.container.scale.set(0.7, 0.7);
        }
    }
    this.items[0].position.set(5, 5);
    this.items[1].position.set(11, 11);
    this.items[2].position.set(49, 11);
    this.front = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "left/slot_front")));
    this.buttonsContainer = this.addChild(new canvas.px.Container());
    this.showButton = new canvas.ui.Button(
        canvas.ResourceLoader.getImage("ui", "left/slot_arrow_right"),
        canvas.ResourceLoader.getImage("ui", "left/slot_arrow_right_over"),
        canvas.ResourceLoader.getImage("ui", "left/slot_arrow_right_down")
    );
    this.showButton.position.set(51, 12);
    this.hideButton = new canvas.ui.Button(canvas.ResourceLoader.getImage("ui", "left/slot_arrow_left"), canvas.ResourceLoader.getImage("ui", "left/slot_arrow_left_over"), canvas.ResourceLoader.getImage("ui", "left/slot_arrow_left_down"));
    this.hideButton.position.set(51, 12);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.showButton, this.showClickHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.hideButton, this.hideClickHandler, this);
    this.setSize(60, 39);
};
canvas.app.leftMenu.view.SlotView.prototype = Object.create(canvas.ui.ListRenderer.prototype);
canvas.app.leftMenu.view.SlotView.prototype.update = function () {
    if (this.data) {
        this.items[2].singleSlot = false;
        if (this.disabledVariant) {
            this.removeIfExist(this.variantSlotsContainer);
            this.endPos = 0;
        } else {
            switch (this.data) {
                case 1:
                    this.removeIfExist(this.variantSlotsContainer);
                    this.endPos = 0;
                    break;
                case 2:
                    this.addChildAt(this.variantSlotsContainer, 0);
                    this.endPos = 19;
                    this.items[2].singleSlot = true;
                    break;
                case 3:
                    this.addChildAt(this.variantSlotsContainer, 0);
                    this.endPos = 56;
                    break;
            }
        }
        if (!this.variantSlotsContainer.parent || (!this.hideButton.parent && !this.showButton.parent)) this.hideVariantSlots();
    } else {
        this.removeIfExist(this.variantSlotsContainer);
    }
};
canvas.app.leftMenu.view.SlotView.prototype.showVariantSlots = function () {
    if (this.variantSlotsContainer.parent) {
        this.direction = 1;
        canvas.EventManager.addEventListener(canvas.app.leftMenu.Event.ENTER_FRAME, null, this.frameHandler, this);
        this.removeIfExist(this.showButton);
        this.addChild(this.hideButton);
        canvas.EventManager.dispatchEvent(canvas.app.leftMenu.Event.SHOW_VARIANT_SLOTS, null, this.index);
    }
};
canvas.app.leftMenu.view.SlotView.prototype.hideVariantSlots = function () {
    this.direction = -1;
    canvas.EventManager.addEventListener(canvas.app.leftMenu.Event.ENTER_FRAME, null, this.frameHandler, this);
    this.removeIfExist(this.hideButton);
    this.addChild(this.showButton);
    if (!this.variantSlotsContainer.parent) {
        this.removeIfExist(this.showButton);
        this.variantSlotsContainer.x = this.startPos;
    }
};
canvas.app.leftMenu.view.SlotView.prototype.frameHandler = function () {
    try {
        if (this.direction != 0) {
            if (this.direction > 0) {
                this.opened = true;
                if (this.variantSlotsContainer.x < this.endPos) {
                    this.variantSlotsContainer.x = Math.min(this.variantSlotsContainer.x + 15, this.endPos);
                } else {
                    this.variantSlotsContainer.x = this.endPos;
                    this.direction = 0;
                }
            } else {
                if (this.variantSlotsContainer.x > this.startPos) {
                    this.variantSlotsContainer.x -= 15;
                } else {
                    this.variantSlotsContainer.x = this.startPos;
                    this.direction = 0;
                    this.opened = false;
                    canvas.EventManager.dispatchEvent(canvas.app.leftMenu.Event.SLOT_HIDED, null, this.index);
                }
            }
        } else {
            canvas.EventManager.removeEventListener(canvas.app.leftMenu.Event.ENTER_FRAME, null, this.frameHandler, this);
        }
    } catch (e) {
        canvas.EventManager.removeEventListener(canvas.app.leftMenu.Event.ENTER_FRAME, null, this.frameHandler, this);
    }
};
canvas.app.leftMenu.view.SlotView.prototype.showClickHandler = function () {
    this.showVariantSlots();
};
canvas.app.leftMenu.view.SlotView.prototype.hideClickHandler = function () {
    this.hideVariantSlots();
};
canvas.app.avatar.Const = {
    UPDATE_FLAG_PERS: "pers",
    MANOR_FLAG_EXP_DECR: 1,
    MANOR_FLAG_EXP_USE: 2,
    MANOR_FLAG_VALOR_USE: 4,
    USER_PREMIUM_DISPLAY_CURRENCY_GAME: 1,
    USER_PREMIUM_DISPLAY_CURRENCY_SILVER: 2,
    USER_PREMIUM_DISPLAY_CURRENCY_GOLD: 4,
    RESTORE_REFRESH: 0.5,
};
canvas.app.avatar.Event = { ENTER_FRAME: "Avatar.ENTER_FRAME", HINT_ADD: "Avatar.HINT_ADD", HINT_REMOVE: "Avatar.HINT_REMOVE", UP_MANOR_MODE: "Avatar.UP_MANOR_MODE" };
canvas.app.avatar.Main = function (model, hintManager) {
    canvas.px.Container.call(this);
    this.model = model;
    this.hintManager = hintManager;
    this.hintContainer = new canvas.px.Container();
    this.hintContainer.interactive = true;
    this.hintManager.init(this.hintContainer, this.model.width, this.model.height);
    canvas.EventManager.addEventListener(canvas.app.avatar.Event.HINT_ADD, null, this.handlerHintAdd, this);
    canvas.EventManager.addEventListener(canvas.app.avatar.Event.HINT_REMOVE, null, this.handlerHintRemove, this);
    canvas.EventManager.addEventListener(canvas.app.avatar.Event.UP_MANOR_MODE, null, this.handlerUpManorMode, this);
    this.view = new canvas.app.avatar.View();
    this.addChild(this.view);
    this.addChild(this.hintContainer);
    this.timer = setInterval(this.timerHandler.bind(this), canvas.app.avatar.Const.RESTORE_REFRESH * 1e3);
};
canvas.app.avatar.Main.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.avatar.Main.prototype.swfObject = function (data) {
    var str;
    var config;
    if (data) {
        for (str in data) {
            switch (str) {
                case "user|view":
                    config = data["user|view"];
                    this.model.parse(config);
                    this.view.update();
                    break;
            }
        }
    }
};
canvas.app.avatar.Main.prototype.swfData = function (data) {
    var a = data.split("@");
    var b;
    if (a.length == 2) {
        switch (a[0]) {
            case "updHP":
                b = a[1].split(",");
                this.model.hpCur = parseInt(b[0]);
                this.model.hpMax = parseInt(b[1]);
                this.model.hpTime = 0;
                break;
            case "updMP":
                b = a[1].split(",");
                this.model.mpCur = parseInt(b[0]);
                this.model.mpMax = parseInt(b[1]);
                this.model.mpTime = 0;
                break;
        }
    }
};
canvas.app.avatar.Main.prototype.handlerHintAdd = function (e) {
    this.hintManager.add(e.params.target, e.params.params);
};
canvas.app.avatar.Main.prototype.handlerHintRemove = function (e) {
    this.hintManager.remove(e.params.target);
};
canvas.app.avatar.Main.prototype.handlerUpManorMode = function (e) {
    this.model.setEnergyMode(this.model.energyMode + 1);
    this.view.update();
};
canvas.app.avatar.Main.prototype.timerHandler = function (e) {
    var conf = this.model;
    var time = Date.now();
    var diff = time - conf.startTime;
    var elaTime;
    if (conf.hpTime != 0) {
        elaTime = (time - conf.hpStartTime) / 1e3;
        conf.hpCur = Math.round(Math.min(conf.hpMax, conf.hp + (conf.hpMax - conf.hp) * (elaTime / conf.hpTime)));
    }
    if (conf.mpTime != 0) {
        elaTime = (time - conf.mpStartTime) / 1e3;
        conf.mpCur = Math.round(Math.min(conf.mpMax, conf.mp + (conf.mpMax - conf.mp) * (elaTime / conf.mpTime)));
    }
    if (conf.manorExpSpeed > 0) {
        elaTime = (time - conf.manorExpStartTime) / 1e3;
        conf.manorExpCur = Math.floor(Math.min(conf.manorExpMax, conf.manorExp + conf.manorExpSpeed * elaTime));
    }
    if (conf.manorValorSpeed > 0) {
        elaTime = (time - conf.manorValorStartTime) / 1e3;
        conf.manorValorCur = Math.floor(Math.min(conf.manorValorMax, conf.manorValor + conf.manorValorSpeed * elaTime));
    }
    conf.invTime -= diff;
    this.view.updateTitles();
    this.view.updatePremium();
    conf.startTime = time;
};
canvas.app.avatar.Model = function (par) {
    this.startTime = Date.now();
    this.serverTime = new canvas.utils.ServerTime();
    this.localStorage = null;
    this.premiumLevel = 0;
    this.useTahoma = false;
    this.energyMode = 0;
    this.availBotsKills = 0;
    this.updateFlags = {};
    this.updateHash = {};
    this.currencyFlags = 5;
    this.showMaxLevel = 0;
    this.showMaxRank = 0;
    this.parse(par);
};
canvas.app.avatar.Model.prototype.parse = function (data) {
    var money;
    var honorTable;
    var myHonor;
    var myHonorMin;
    var myHonorMax;
    var time = Date.now();
    if (this.ok(data.server_time) && this.ok(data.timezone)) this.serverTime.init(parseInt(data.server_time), parseInt(data.timezone) * 0.6);
    if (this.ok(data.nick)) this.login = data.nick;
    if (this.ok(data.exp)) this.exp = parseInt(data.exp);
    if (this.ok(data.expMax)) this.expMax = parseInt(data.expMax);
    if (this.ok(data.showMaxLevel)) this.showMaxLevel = parseInt(data.showMaxLevel);
    if (this.ok(data.showMaxRank)) this.showMaxRank = parseInt(data.showMaxRank);
    if (this.ok(data.rankHonorTable) && this.ok(data.honor) && this.ok(data.rankHonor)) {
        honorTable = data.rankHonorTable.split("|");
        myHonor = parseInt(data.honor);
        myHonorMin = parseInt(data.rankHonor);
        myHonorMax = 0;
        for (var i = 0; i < honorTable.length; i++) {
            if (honorTable[i] == myHonorMin) {
                if (honorTable[i + 1] != undefined) myHonorMax = honorTable[i + 1];
                else myHonorMax = honorTable[i];
            }
        }
        this.valor = myHonor - myHonorMin;
        this.valorMax = myHonorMax - myHonorMin;
    }
    if (this.ok(data.work)) this.energy = parseInt(data.work);
    if (this.ok(data.workMax)) this.energyMax = parseInt(data.workMax);
    if (this.ok(data.hp) && this.ok(data.hpMax) && this.ok(data.hpT)) {
        this.hp = this.hpCur = parseInt(data.hp);
        this.hpMax = parseInt(data.hpMax);
        this.hpTime = parseInt(data.hpT);
        this.hpStartTime = time;
    }
    if (this.ok(data.mp) && this.ok(data.mpMax) && this.ok(data.mpT)) {
        this.mp = this.mpCur = parseInt(data.mp);
        this.mpMax = parseInt(data.mpMax);
        this.mpTime = parseInt(data.mpT);
        this.mpStartTime = time;
    }
    if (this.ok(data.estateExp) && this.ok(data.exp_limit) && this.ok(data.exp_speed)) {
        this.manorExp = this.manorExpCur = parseInt(data.estateExp);
        this.manorExpMax = parseInt(data.exp_limit);
        this.manorExpSpeed = parseFloat(data.exp_speed);
        this.manorExpStartTime = time;
    }
    if (this.ok(data.estateHonor) && this.ok(data.honor_limit) && this.ok(data.honor_speed)) {
        this.manorValor = this.manorValorCur = parseInt(data.estateHonor);
        this.manorValorMax = parseInt(data.honor_limit);
        this.manorValorSpeed = parseFloat(data.honor_speed);
        this.manorValorStartTime = time;
    }
    if (this.ok(data.lvl)) this.level = parseInt(data.lvl);
    if (this.ok(data.moneyGame)) {
        money = data.moneyGame;
        this.bronze = money.split(".")[1] == undefined ? 0 : parseInt(money.split(".")[1].substr(0, 2));
        money = (Math.floor(parseFloat(money)) * 0.01).toFixed(2);
        this.silver = money.split(".")[1] == undefined ? 0 : parseInt(money.split(".")[1].substr(0, 2));
        this.gold = parseInt(money.split(".")[0]);
    }
    if (this.ok(data.premium_level)) this.premiumLevel = parseInt(data.premium_level);
    if (this.ok(data.hide_premium) && parseInt(data.hide_premium) == 1) this.premiumLevel = 0;
    if (this.ok(data.moneyGold)) this.crystal = parseFloat(data.moneyGold);
    if (this.ok(data.moneySilver)) this.rubin = parseFloat(data.moneySilver);
    if (this.ok(data.effect)) this.effects = parseInt(data.effect) < 0 ? 0 : parseInt(data.effect);
    if (this.ok(data.gender)) this.gender = data.gender == "1" ? "M" : "F";
    if (this.ok(data.kind)) this.race = data.kind == "1" ? "hum" : "mag";
    if (this.ok(data.inv_time)) this.invTime = parseInt(data.inv_time) * 1e3;
    if (this.ok(data.parts)) this.parts = data.parts;
    if (this.ok(data.dead)) this.ghost = data.dead == "1";
    if (this.ok(data.lang)) this.useTahoma = data.lang != "ru";
    if (this.ok(data.estateFlags)) this.manorFlags = parseInt(data.estateFlags);
    if (this.ok(data.avail_bots_kills_amount)) this.availBotsKills = parseInt(data.avail_bots_kills_amount);
    if (this.ok(data.display_currency)) this.currencyFlags = parseInt(data.display_currency);
    if (this.energyMax == 0) {
        if (this.mpMax == 0) this.currentView = 2;
        else this.currentView = 1;
    } else {
        if (this.mpMax == 0) this.currentView = 3;
        else this.currentView = 0;
    }
    if (this.localStorage == null) {
        this.localStorage = new canvas.utils.LocalStorage(canvas.Log.AVATAR);
        this.setEnergyMode(this.localStorage.get("energyMode") == undefined ? 0 : parseInt(this.localStorage.get("energyMode")), false);
    } else {
        this.setEnergyMode(this.energyMode);
    }
    if (!this.updateFlags[canvas.app.avatar.Const.UPDATE_FLAG_PERS]) this.updateFlags[canvas.app.avatar.Const.UPDATE_FLAG_PERS] = this.parts + this.gender != this.updateHash[canvas.app.avatar.Const.UPDATE_FLAG_PERS];
    this.updateHash[canvas.app.avatar.Const.UPDATE_FLAG_PERS] = this.parts + this.gender;
};
canvas.app.avatar.Model.prototype.ok = function (value) {
    return value != undefined;
};
canvas.app.avatar.Model.prototype.setEnergyMode = function (value, save) {
    if (save == undefined) save = true;
    this.energyMode = value > 2 ? 0 : value;
    switch (this.energyMode) {
        case 1:
            if (this.manorExpMax < 1) {
                this.setEnergyMode(this.energyMode + 1);
                return;
            }
            break;
        case 2:
            if (this.manorValorMax < 1) {
                this.setEnergyMode(this.energyMode + 1);
                return;
            }
            break;
    }
    if (save) {
        this.localStorage.set("energyMode", this.energyMode);
    }
};
canvas.app.avatar.Model.prototype.energyIsGrey = function () {
    switch (this.energyMode) {
        case 1:
            return !canvas.Functions.testFlag(this.manorFlags, canvas.app.avatar.Const.MANOR_FLAG_EXP_USE);
        case 2:
            return !canvas.Functions.testFlag(this.manorFlags, canvas.app.avatar.Const.MANOR_FLAG_VALOR_USE);
    }
    return false;
};
canvas.app.avatar.View = function () {
    canvas.px.Container.call(this);
    var conf = canvas.app.avatar.model;
    var sprite = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "avatar/exp_back")));
    sprite.position.set(76, 0);
    sprite = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "avatar/exp_front")));
    sprite.position.set(76, 0);
    this.expProgress = this.addChild(new canvas.ui.Progress());
    this.expProgress.setSize(174, 13);
    this.expProgress.position.set(80, 4);
    this.expProgress.progress = 0;
    sprite.mask = this.expProgress.sprite;
    var sprite = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "avatar/valor_back")));
    sprite.position.set(76, 19);
    sprite = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "avatar/valor_front")));
    sprite.position.set(76, 19);
    this.valorProgress = this.addChild(new canvas.ui.Progress());
    this.valorProgress.setSize(169, 13);
    this.valorProgress.position.set(84, 21);
    this.valorProgress.progress = 0;
    sprite.mask = this.valorProgress.sprite;
    this.hpBack = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "avatar/hp_back")));
    this.hpBack.position.set(76, 36);
    this.hpFront = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "avatar/hp_front")));
    this.hpFront.position.set(76, 36);
    this.hpProgress = this.addChild(new canvas.ui.Progress());
    this.hpProgress.setSize(83, 9);
    this.hpProgress.position.set(89, 37);
    this.hpProgress.progress = 0;
    this.hpFront.mask = this.hpProgress.sprite;
    this.mpBack = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "avatar/mp_back")));
    this.mpBack.position.set(173, 36);
    this.mpFront = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "avatar/mp_front")));
    this.mpFront.position.set(173, 36);
    this.mpProgress = this.addChild(new canvas.ui.Progress());
    this.mpProgress.setSize(76, 9);
    this.mpProgress.position.set(173, 37);
    this.mpProgress.progress = 0;
    this.mpFront.mask = this.mpProgress.sprite;
    this.manorBack = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "avatar/manor_grey_back")));
    this.manorBack.position.set(76, 48);
    this.manorFront = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "avatar/manor_grey_front")));
    this.manorFront.position.set(76, 48);
    this.manorProgress = this.addChild(new canvas.ui.Progress());
    this.manorProgress.setSize(152, 9);
    this.manorProgress.position.set(93, 50);
    this.manorProgress.progress = 0;
    this.manorFront.mask = this.manorProgress.sprite;
    this.expLine = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "avatar/line_big")));
    this.valorLine = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "avatar/line_big")));
    this.hpLine = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "avatar/line_small")));
    this.mpLine = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "avatar/line_small")));
    this.manorLine = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "avatar/line_small")));
    sprite = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "avatar/uzor_right")));
    sprite.position.set(237, 2);
    this.expField = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD_STROKE_BEVEL_SHARP, 16777215, this.expProgress._width - 18, 18, "left", "top", 0, 0));
    this.expField.position.set(this.expProgress.x + 22, 3);
    this.expField.buttonMode = true;
    this.expField.interactive = true;
    this.expField.back.interactive = true;
    this.expField.mouseover = this.expOverHandler.bind(this);
    this.expField.mouseout = this.expOutHandler.bind(this);
    this.expField.click = this.expClickHandler.bind(this);
    this.expField.overed = false;
    this.expField2 = this.addChild(new canvas.ui.Text(conf.useTahoma ? canvas.Const.FONT_TAHOMA_10_STROKE : canvas.Const.FONT_IFLASH, 16777215, this.expProgress._width - 26, 12, "center"));
    this.expField2.position.set(this.expProgress.x + 20, conf.useTahoma ? 5 : 7);
    this.expField2.text = "";
    this.killHint = new canvas.app.view.MappingHint();
    //canvas.EventManager.dispatchEvent(canvas.app.avatar.Event.HINT_ADD, null, { target: this.expField.back, params: new canvas.utils.HintParams(this.killHint) });
    this.valorField = this.addChild(new canvas.ui.Text(conf.useTahoma ? canvas.Const.FONT_TAHOMA_10_STROKE : canvas.Const.FONT_IFLASH, 16777215, this.valorProgress._width, 12, "center", "top", 0, 0));
    this.valorField.position.set(this.valorProgress.x + 6, conf.useTahoma ? 21 : 23);
    this.valorField.interactive = true;
    this.valorField.buttonMode = true;
    this.valorField.mouseover = this.valorOverHandler.bind(this);
    this.valorField.mouseout = this.valorOutHandler.bind(this);
    this.valorField.click = this.valorClickHandler.bind(this);
    this.valorField.overed = false;
    this.hpField = this.addChild(new canvas.ui.Text(conf.useTahoma ? canvas.Const.FONT_TAHOMA_10_STROKE : canvas.Const.FONT_IFLASH, 16777215, 100, 12, "center", "top", 0, 0));
    this.hpField.position.set(this.hpProgress.x, conf.useTahoma ? 35 : 37);
    this.hpField.interactive = true;
    this.hpField.mouseover = this.hpOverHandler.bind(this);
    this.hpField.mouseout = this.hpOutHandler.bind(this);
    this.hpField.overed = false;
    this.mpField = this.addChild(new canvas.ui.Text(conf.useTahoma ? canvas.Const.FONT_TAHOMA_10_STROKE : canvas.Const.FONT_IFLASH, 16777215, 100, 12, "center", "top", 0, 0));
    this.mpField.position.set(this.mpProgress.x, conf.useTahoma ? 35 : 37);
    this.mpField.interactive = true;
    this.mpField.mouseover = this.mpOverHandler.bind(this);
    this.mpField.mouseout = this.mpOutHandler.bind(this);
    this.mpField.overed = false;
    this.mpField.setSize(this.mpProgress._width);
    this.manorField = this.addChild(new canvas.ui.Text(conf.useTahoma ? canvas.Const.FONT_TAHOMA_10_STROKE : canvas.Const.FONT_IFLASH, 16777215, this.manorProgress._width + 10, 12, "center", "top", 0, 0));
    this.manorField.position.set(this.manorProgress.x, conf.useTahoma ? 47 : 49);
    this.manorField.interactive = true;
    this.manorField.mouseover = this.manorOverHandler.bind(this);
    this.manorField.mouseout = this.manorOutHandler.bind(this);
    this.manorField.overed = false;
    this.premiumButton = new canvas.app.avatar.view.PremiumButton();
    this.addChild(this.premiumButton);
    this.premiumButton.position.set(250, 2);
    this.premiumHint = new canvas.app.view.MappingHint();
    canvas.EventManager.dispatchEvent(canvas.app.avatar.Event.HINT_ADD, null, { target: this.premiumButton, params: new canvas.utils.HintParams(this.premiumHint) });
    this.moneyBack = this.addChild(new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "avatar/money_back"), 13, 0, 13, 0));
    this.moneyBack.position.set(78, 50);
    this.moneyBack.interactive = true;
    this.moneyField = new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_10_BOLD_SHARP, canvas.Const.FONT_TAHOMA_10_BOLD_SHARP, 3355392, 300, 20, "left");
    this.addChild(this.moneyField);
    this.moneyField.position.set(96, 62);
    this.moneyButon = this.addChild(new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "avatar/plus_button")));
    this.moneyButon.position.set(269, 60);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.moneyButon, this.moneyClickHandler, this);
    this.switchButton = new canvas.app.avatar.view.SwitchButton(conf.energyMode);
    this.addChild(this.switchButton);
    this.switchButton.position.set(252, 53);
    this.back = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "avatar/back_" + conf.race)));
    this.back.position.set(0, -2);
    this.playerContainer = this.addChild(new canvas.px.Container());
    var msk = new canvas.px.Graphics();
    msk.beginFill(0, 1);
    msk.drawCircle(44, 44, 34);
    msk.endFill();
    this.playerContainer.addChild(msk);
    this.player = this.playerContainer.addChild(new canvas.animation.SkeletonAvatar(conf.gender));
    this.player.frameEvent = canvas.app.avatar.Event.ENTER_FRAME;
    this.player.position.set(-50, 15);
    this.player.mask = msk;
    this.levelButton = this.addChild(new canvas.app.avatar.view.LevelButton());
    this.levelButton.position.set(34, 64);
    this.effectsButton = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "avatar/effects_button"));
    this.effectsButton.position.set(10, 64);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.effectsButton, this.effectsClickHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_OVER, this.effectsButton, this.effectsOverHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_OUT, this.effectsButton, this.effectsOutHandler, this);
    this.update();
};
canvas.app.avatar.View.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.avatar.View.prototype.update = function () {
    var conf = canvas.app.avatar.model;
    if (conf.currentView == 1 || conf.currentView == 2) {
        this.manorBack.texture = canvas.px.TextureEmpty;
        this.manorFront.texture = canvas.px.TextureEmpty;
        this.manorProgress.progress = 0;
        this.manorField.interactive = false;
        this.switchButton.visible = false;
        this.manorAvailable = false;
    } else {
        var color = conf.energyIsGrey() ? "grey" : this.switchButton.getColorByIndex(conf.energyMode);
        this.manorBack.texture = canvas.ResourceLoader.getImage("ui", "avatar/manor_" + color + "_back");
        this.manorFront.texture = canvas.ResourceLoader.getImage("ui", "avatar/manor_" + color + "_front");
        this.manorField.interactive = true;
        this.switchButton.visible = conf.manorExpMax > 0 || conf.manorValorMax > 0;
        this.switchButton.mode = conf.energyMode;
        this.manorAvailable = true;
    }
    if (conf.currentView == 2 || conf.currentView == 3) {
        this.mpBack.texture = canvas.px.TextureEmpty;
        this.mpFront.texture = canvas.px.TextureEmpty;
        this.mpProgress.progress = 0;
        this.hpBack.texture = canvas.ResourceLoader.getImage("ui", "avatar/hp_back");
        this.hpFront.texture = canvas.ResourceLoader.getImage("ui", "avatar/hp_front");
        this.hpProgress.setSize(162, 9);
        this.mpField.interactive = false;
        this.hpField.x = this.hpProgress.x + 4;
        this.manaAvailable = false;
    } else {
        this.mpBack.texture = canvas.ResourceLoader.getImage("ui", "avatar/mp_back");
        this.mpFront.texture = canvas.ResourceLoader.getImage("ui", "avatar/mp_front");
        this.hpBack.texture = canvas.ResourceLoader.getImage("ui", "avatar/hp_back_small");
        this.hpFront.texture = canvas.ResourceLoader.getImage("ui", "avatar/hp_front_small");
        this.hpProgress.setSize(83, 9);
        this.mpField.interactive = true;
        this.hpField.x = this.hpProgress.x + 2;
        this.manaAvailable = true;
    }
    this.hpField.setSize(this.hpProgress._width);
    this.updateTitles();
    this.updatePremium();
    this.killHint.update(canvas.Translator.getText(507) + ": " + conf.availBotsKills);
    if (conf.updateFlags[canvas.app.avatar.Const.UPDATE_FLAG_PERS]) {
        this.player.skeletonData = new canvas.data.battle.SkeletonData(conf.parts, conf.gender);
        conf.updateFlags[canvas.app.avatar.Const.UPDATE_FLAG_PERS] = false;
    }
    if (conf.ghost == "1") {
        this.playerContainer.filters = [canvas.Functions.getGlow(1, 2, 2, conf.race == "hum" ? 0 : 0, 0.1)];
        this.player.filters = [canvas.Functions.getAlpha(0.25)];
    } else {
        this.player.filters = this.playerContainer.filters = [];
    }
    var str = "";
    if (canvas.Functions.testFlag(conf.currencyFlags, canvas.app.avatar.Const.USER_PREMIUM_DISPLAY_CURRENCY_GAME)) {
        str =
            "<img src='avatar/money_gold' xOffset='-2' yOffset='1' atlas='ui'/>" +
            conf.gold +
            "  <img src='avatar/money_silver' xOffset='-2' yOffset='1' atlas='ui'/>" +
            conf.silver +
            "  <img src='avatar/money_bronze' xOffset='-2' yOffset='1' atlas='ui'/>" +
            conf.bronze +
            "  ";
    }
    if (conf.crystal > 0 && canvas.Functions.testFlag(conf.currencyFlags, canvas.app.avatar.Const.USER_PREMIUM_DISPLAY_CURRENCY_GOLD)) {
        str += "<img src='avatar/money_crystal' xOffset='-2' yOffset='1' atlas='ui'/>" + conf.crystal + "  ";
    }
    if (conf.rubin > 0 && canvas.Functions.testFlag(conf.currencyFlags, canvas.app.avatar.Const.USER_PREMIUM_DISPLAY_CURRENCY_SILVER)) {
        str += "<img src='avatar/money_rubin' xOffset='-2' yOffset='1' atlas='ui'/>" + conf.rubin;
    }
    this.moneyField.text = str;
    this.moneyBack.width = Math.max(160, this.moneyField.textWidth + 30);
    this.moneyBack.y = this.manorAvailable ? 59 : 47;
    this.moneyField.y = this.manorAvailable ? 62 : 50;
    this.moneyButon.position.set(this.moneyBack.width + 65, this.manorAvailable ? 60 : 48);
    this.levelButton.level = conf.level;
    if (this.effectsTimer) clearTimeout(this.effectsTimer);
    if (conf.effects > 0) {
        this.addChild(this.effectsButton);
        if (conf.effects < 2e5) {
            this.effectsTimer = setTimeout(this.effectsTimerHandler.bind(this), conf.effects * 1e3);
        }
    } else {
        this.removeIfExist(this.effectsButton);
    }
};
canvas.app.avatar.View.prototype.updateTitles = function () {
    var conf = canvas.app.avatar.model;
    var time = Date.now();
    var finishTime;
    var i;
    var login;
    var b;
    var str;
    var value;
    var tmpNum;
    var tmpNum2;
    if (this.expField.overed) {
        this.expField2.text = canvas.Translator.getText(142).toLowerCase() + " " + (conf.showMaxLevel ? conf.showMaxLevel.toString() : conf.exp.toString() + "/" + conf.expMax.toString());
        this.expField2.hAlign = "center";
        this.expField.text = "";
    } else {
        login = conf.invTime > 0 ? canvas.Translator.getText(3001) + " " + Math.ceil(conf.invTime / 6e4) + " " + canvas.Translator.getText(2016) + "." : conf.login;
        this.expField.text = login;
        if (this.expField.textWidth > 115) {
            i = login.length - 2;
            while (this.expField.textWidth > 115) this.expField.text = login.substr(0, i--) + "...";
        }
        if (conf.showMaxLevel) {
            this.expField2.text = "";
        } else {
            tmpNum = conf.exp / conf.expMax;
            tmpNum2 = tmpNum > 0.5 ? Math.floor(tmpNum * 1e4) : Math.ceil(tmpNum * 1e4);
            this.expField2.text = (tmpNum2 * 0.01).toFixed(2) + "%";
            this.expField2.hAlign = "right";
        }
    }
    value = conf.exp / conf.expMax;
    this.expProgress.progress = conf.showMaxLevel ? 1 : value;
    if (this.valorField.overed) {
        this.valorField.text = conf.showMaxRank ? conf.showMaxRank.toString() : conf.valor.toString() + "/" + conf.valorMax.toString();
    } else {
        if (conf.showMaxRank) {
            this.valorField.text = canvas.Translator.getText(3002);
        } else {
            tmpNum = conf.valor / conf.valorMax;
            tmpNum2 = tmpNum > 0.5 ? Math.floor(tmpNum * 1e4) : Math.ceil(tmpNum * 1e4);
            this.valorField.text = canvas.Translator.getText(3002) + " " + (conf.valorMax == 0 ? "0" : (tmpNum2 * 0.01).toFixed(2) + "%");
        }
    }
    value = conf.valor / conf.valorMax;
    this.valorProgress.progress = conf.showMaxRank ? 1 : value;
    if (this.manorAvailable) {
        if (this.manorField.overed) {
            switch (conf.energyMode) {
                case 1:
                    str = "";
                    if (conf.manorExpSpeed > 0) {
                        finishTime = conf.manorExpStartTime + Math.round((conf.manorExpMax - conf.manorExp) / conf.manorExpSpeed) * 1e3;
                        if (finishTime > time) str = " (" + canvas.Functions.formatDate(finishTime - time, "00", 3, false, false) + ")";
                    }
                    this.manorField.text = Math.floor((conf.manorExpCur / conf.manorExpMax) * 100).toString() + "%" + str;
                    break;
                case 2:
                    str = "";
                    if (conf.manorValorSpeed > 0) {
                        finishTime = conf.manorValorStartTime + Math.round((conf.manorValorMax - conf.manorValor) / conf.manorValorSpeed) * 1e3;
                        if (finishTime > time) str = " (" + canvas.Functions.formatDate(finishTime - time, "00", 3, false, false) + ")";
                    }
                    this.manorField.text = Math.floor((conf.manorValorCur / conf.manorValorMax) * 100).toString() + "%" + str;
                    break;
                default:
                    this.manorField.text = Math.floor((conf.energy / conf.energyMax) * 100).toString() + "%";
            }
        } else {
            switch (conf.energyMode) {
                case 1:
                    this.manorField.text = canvas.Translator.getText(505) + " " + conf.manorExpCur.toString() + "/" + conf.manorExpMax.toString();
                    break;
                case 2:
                    this.manorField.text = canvas.Translator.getText(506) + " " + conf.manorValorCur.toString() + "/" + conf.manorValorMax.toString();
                    break;
                default:
                    this.manorField.text = canvas.Translator.getText(149) + " " + conf.energy.toString() + "/" + conf.energyMax.toString();
            }
        }
        switch (conf.energyMode) {
            case 1:
                value = conf.manorExpCur / conf.manorExpMax;
                break;
            case 2:
                value = conf.manorValorCur / conf.manorValorMax;
                break;
            default:
                value = conf.energy / conf.energyMax;
        }
        this.manorProgress.progress = value;
        this.manorField.alpha = conf.energyIsGrey() ? 0.6 : 1;
    } else {
        this.manorField.text = "";
    }
    if (this.hpField.overed) {
        this.hpField.text = canvas.Translator.getText(3003) + " " + Math.floor((conf.hpCur / conf.hpMax) * 100).toString() + "%";
    } else {
        this.hpField.text = Math.round(conf.hpCur).toString() + "/" + conf.hpMax.toString();
    }
    value = conf.hpCur / conf.hpMax;
    this.hpProgress.progress = value;
    if (this.manaAvailable) {
        if (this.mpField.overed) {
            this.mpField.text = canvas.Translator.getText(49) + " " + Math.floor((conf.mpCur / conf.mpMax) * 100).toString() + "%";
        } else {
            this.mpField.text = Math.round(conf.mpCur).toString() + "/" + conf.mpMax.toString();
        }
        value = conf.mpCur / conf.mpMax;
        this.mpProgress.progress = value;
    } else {
        this.mpField.text = "";
    }
    this.expLine.position.set(this.expProgress.x + Math.round(this.expProgress._width * this.expProgress.progress) - 2, 3);
    this.expLine.visible = this.expProgress.progress > 0 && this.expProgress.progress < 1;
    this.valorLine.position.set(this.valorProgress.x + Math.round(this.valorProgress._width * this.valorProgress.progress) - 2, 20);
    this.valorLine.visible = this.valorProgress.progress > 0 && this.valorProgress.progress < 1;
    this.hpLine.position.set(this.hpProgress.x + Math.round(this.hpProgress._width * this.hpProgress.progress) - 2, 37);
    this.hpLine.visible = this.hpProgress.progress > 0 && this.hpProgress.progress < 1;
    this.mpLine.position.set(this.mpProgress.x + Math.round(this.mpProgress._width * this.mpProgress.progress) - 2, 37);
    this.mpLine.visible = this.manaAvailable && this.mpProgress.progress > 0 && this.mpProgress.progress < 1;
    this.manorLine.position.set(this.manorProgress.x + Math.round(this.manorProgress._width * this.manorProgress.progress) - 2, 49);
    this.manorLine.visible = this.manorAvailable && this.manorProgress.progress > 0 && this.manorProgress.progress < 1;
};
canvas.app.avatar.View.prototype.updatePremium = function () {
    var conf = canvas.app.avatar.model;
    var date1 = conf.serverTime.getDate();
    var date2 = date1.getMonth() == 11 ? new Date(date1.getFullYear() + 1, 0, 1) : new Date(date1.getFullYear(), date1.getMonth() + 1, 1);
    var premiumSeconds = date2.getTime() - date1.getTime();
    var str = canvas.Translator.getText(500);
    if (conf.premiumLevel > 0) {
        str += " " + conf.premiumLevel + " " + canvas.Translator.getText(2025) + ": " + canvas.Functions.formatDate(premiumSeconds, "00", 3, false, true, false);
    }
    this.premiumButton.level = conf.premiumLevel;
    this.premiumHint.update(str);
};
canvas.app.avatar.View.prototype.expOverHandler = function () {
    this.expField.overed = true;
    this.updateTitles();
};
canvas.app.avatar.View.prototype.expOutHandler = function () {
    this.expField.overed = false;
    this.updateTitles();
};
canvas.app.avatar.View.prototype.expClickHandler = function () {
    var obj = { width: 619, height: 350, type: "auto" };
    confirmCenterDiv("#exp_table", obj);
};
canvas.app.avatar.View.prototype.valorOverHandler = function () {
    this.valorField.overed = true;
    this.updateTitles();
};
canvas.app.avatar.View.prototype.valorOutHandler = function () {
    this.valorField.overed = false;
    this.updateTitles();
};
canvas.app.avatar.View.prototype.valorClickHandler = function () {
    var obj = { width: 619, height: 350, type: "auto" };
    confirmCenterDiv("#rank_table", obj);
};
canvas.app.avatar.View.prototype.hpOverHandler = function () {
    this.hpField.overed = true;
    this.updateTitles();
};
canvas.app.avatar.View.prototype.hpOutHandler = function () {
    this.hpField.overed = false;
    this.updateTitles();
};
canvas.app.avatar.View.prototype.mpOverHandler = function () {
    this.mpField.overed = true;
    this.updateTitles();
};
canvas.app.avatar.View.prototype.mpOutHandler = function () {
    this.mpField.overed = false;
    this.updateTitles();
};
canvas.app.avatar.View.prototype.manorOverHandler = function () {
    this.manorField.overed = true;
    this.updateTitles();
};
canvas.app.avatar.View.prototype.manorOutHandler = function () {
    this.manorField.overed = false;
    this.updateTitles();
};
canvas.app.avatar.View.prototype.moneyClickHandler = function () {
    processMenu("b36");
};
canvas.app.avatar.View.prototype.effectsClickHandler = function () {
    var conf = canvas.app.avatar.model;
    showEffectInfo(conf.login);
};
canvas.app.avatar.View.prototype.effectsOverHandler = function () {
    effectAltSimple(2);
};
canvas.app.avatar.View.prototype.effectsOutHandler = function () {
    effectAltSimple(0);
};
canvas.app.avatar.View.prototype.effectsTimerHandler = function () {
    this.removeIfExist(this.effectsButton);
};
canvas.app.avatar.view.LevelButton = function () {
    this._level = 0;
    Object.defineProperty(this, "level", {
        get: function () {
            return this._level;
        },
        set: function (value) {
            this._level = value;
            this.field.text = this._level;
        },
    });
    canvas.ui.SimpleButton.call(this, canvas.ResourceLoader.getImage("ui", "avatar/level_button"));
    this.field = this.sprite.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_10_BOLD_SHARP, 3355392, 21, 16, "center"));
    this.field.position.set(1, 4);
};
canvas.app.avatar.view.LevelButton.prototype = Object.create(canvas.ui.SimpleButton.prototype);
canvas.app.avatar.view.LevelButton.prototype.handlerUp = function (mouseData) {
    canvas.ui.SimpleButton.prototype.handlerUp.call(this, mouseData);
    var conf = canvas.app.avatar.model;
    showUserInfo(conf.login);
};
canvas.app.avatar.view.PremiumButton = function () {
    this._level = 0;
    Object.defineProperty(this, "level", {
        get: function () {
            return this._level;
        },
        set: function (value) {
            this._level = value;
            this.image.texture = canvas.ResourceLoader.getImage("ui", "avatar/premium" + this._level);
        },
    });
    canvas.ui.SimpleButton.call(this, canvas.ResourceLoader.getImage("ui", "avatar/premium_back"));
    this.image = this.sprite.addChild(new canvas.px.Sprite(canvas.px.TextureEmpty));
    this.image.position.set(6, 13);
};
canvas.app.avatar.view.PremiumButton.prototype = Object.create(canvas.ui.SimpleButton.prototype);
canvas.app.avatar.view.PremiumButton.prototype.handlerUp = function (mouseData) {
    canvas.ui.SimpleButton.prototype.handlerUp.call(this, mouseData);
    openPremium();
};
canvas.app.avatar.view.SwitchButton = function (mode) {
    this._mode = mode;
    Object.defineProperty(this, "mode", {
        get: function () {
            return this._mode;
        },
        set: function (value) {
            if (this._mode != value) {
                var i = this._mode;
                var iterations = 0;
                this._mode = value;
                while (i != value) {
                    iterations++;
                    i++;
                    if (i > 2) i = 0;
                }
                this.start(120 * iterations);
            }
        },
    });
    canvas.ui.SimpleButton.call(this, canvas.px.TextureEmpty);
    this.circle = this.sprite.addChild(new canvas.px.Sprite(canvas.px.TextureEmpty));
    this.circle.pivot = new canvas.px.Point(9, 9);
    this.arrow = this.sprite.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "avatar/switch_button_arrow")));
    this.arrow.position.set(-15, -6);
    this.finish();
};
canvas.app.avatar.view.SwitchButton.prototype = Object.create(canvas.ui.SimpleButton.prototype);
canvas.app.avatar.view.SwitchButton.prototype.start = function (rotateValue) {
    if (rotateValue > 0) {
        this.targetRotation = rotateValue;
        this.currentRotation = 0;
        canvas.EventManager.addEventListener(canvas.app.avatar.Event.ENTER_FRAME, null, this.frameHandler, this);
    }
};
canvas.app.avatar.view.SwitchButton.prototype.frameHandler = function () {
    if (this.currentRotation >= this.targetRotation) {
        canvas.EventManager.removeEventListener(canvas.app.avatar.Event.ENTER_FRAME, null, this.frameHandler, this);
        this.finish();
    } else {
        this.currentRotation += 15;
        if (this.currentRotation > this.targetRotation) this.currentRotation = this.targetRotation;
        this.circle.rotation = canvas.Functions.degToRad(this.currentRotation);
    }
};
canvas.app.avatar.view.SwitchButton.prototype.finish = function () {
    this.circle.texture = canvas.ResourceLoader.getImage("ui", "avatar/switch_button_" + this.getColorByIndex(this.mode));
    this.circle.rotation = 0;
};
canvas.app.avatar.view.SwitchButton.prototype.getColorByIndex = function (index) {
    switch (index) {
        case 0:
            return "blue";
        case 1:
            return "green";
        case 2:
            return "yellow";
    }
};
canvas.app.avatar.view.SwitchButton.prototype.handlerUp = function (mouseData) {
    canvas.ui.SimpleButton.prototype.handlerUp.call(this, mouseData);
    if (this.circle.rotation == 0) {
        canvas.EventManager.dispatchEvent(canvas.app.avatar.Event.UP_MANOR_MODE);
    }
};
canvas.app.topMenu.Const = { BRILL_VERSION: 1, ID_LOCATION: 2 };
canvas.app.topMenu.Event = {
    ENTER_FRAME: "TopMenu.ENTER_FRAME",
    ITEM_DOWN: "TopMenu.ITEM_DOWN",
    ITEM_OVER: "TopMenu.ITEM_OVER",
    ITEM_OUT: "TopMenu.ITEM_OUT",
    ITEM_SELECT: "TopMenu.ITEM_SELECT",
    ITEM_DESELECT: "TopMenu.ITEM_DESELECT",
    ITEM_CLICK: "TopMenu.ITEM_CLICK",
};
canvas.app.topMenu.Main = function (model) {
    canvas.px.Container.call(this);
    this.model = model;
    this.view = new canvas.app.topMenu.View();
    this.view.interactive = true;
    this.view.mouseup = this.upHandler.bind(this);
    this.addChild(this.view);
    this.dragItem = null;
    canvas.EventManager.addEventListener(canvas.app.topMenu.Event.ITEM_DOWN, null, this.itemDownHandler, this);
    canvas.EventManager.addEventListener(canvas.app.topMenu.Event.ITEM_OVER, null, this.itemOverHandler, this);
    canvas.EventManager.addEventListener(canvas.app.topMenu.Event.ITEM_SELECT, null, this.itemSelectHandler, this);
    canvas.EventManager.addEventListener(canvas.app.topMenu.Event.ITEM_DESELECT, null, this.itemDeselectHandler, this);
    canvas.EventManager.addEventListener(canvas.app.topMenu.Event.ITEM_CLICK, null, this.itemClickHandler, this);
    canvas.EventManager.addEventListener(canvas.Event.STAGE_MOUSE_OUT, null, this.outHandler, this);
};
canvas.app.topMenu.Main.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.topMenu.Main.prototype.swfObject = function (data) {
    var str;
    var config;
    if (data) {
        for (str in data) {
            switch (str) {
                case "common|top_menu":
                    this.model.dragging = parseInt(data[str].dragDropItems) != 0;
                    break;
                case "bgFilledState":
                    var i = parseInt(data[str]);
                    switch (i) {
                        case 1:
                        case 2:
                            this.view.changeBg((i + 1).toString());
                            break;
                        default:
                            this.view.changeBg("");
                    }
                    break;
            }
        }
    }
};
canvas.app.topMenu.Main.prototype.blinkButton = function (id, status) {
    var conf = this.model;
    if (status) {
        if (conf.blinkIds.indexOf(id) < 0) conf.blinkIds.push(id);
    } else {
        if (conf.blinkIds.indexOf(id) >= 0) conf.blinkIds.splice(conf.blinkIds.indexOf(id), 1);
    }
    this.view.testBlink();
};
canvas.app.topMenu.Main.prototype.itemDownHandler = function (event) {
    this.dragItem = event.params;
};
canvas.app.topMenu.Main.prototype.itemOverHandler = function (event) {
    if (this.model.dragging && this.dragItem && this.dragItem != event.params) {
        this.dragItem.wasChanged = true;
        this.view.replace(this.dragItem, event.params);
        var len = this.view.items.length;
        var str = "";
        for (var i = 0; i < len; i++) {
            str += (str ? "," : "") + this.view.items[i].data.id;
        }
        this.model.localStorage.set("order", str);
        this.view.testSubMenuSides();
    }
};
canvas.app.topMenu.Main.prototype.upHandler = function () {
    this.dragItem = null;
};
canvas.app.topMenu.Main.prototype.outHandler = function () {
    this.dragItem = null;
};
canvas.app.topMenu.Main.prototype.itemSelectHandler = function (event) {
    this.view.selectItem(event.params);
};
canvas.app.topMenu.Main.prototype.itemDeselectHandler = function (event) {
    this.view.deselectItem(event.params);
};
canvas.app.topMenu.Main.prototype.itemClickHandler = function (event) {
    var item = event.params;
    if (this.model.blinkIds.indexOf(item.data.id) >= 0) {
        this.model.blinkIds.splice(this.model.blinkIds.indexOf(item.data.id), 1);
        var request = new canvas.utils.URLRequest("/user_conf.php?mode=button_press&type=top&id=" + item.data.id);
        request.load();
    }
    if (canvas.app.topMenu.model.jsPopup) {
        this.processMenu(item.data);
    } else {
        switch (item.data.id) {
            case 8:
                this.model.localStorage.set("brillVersion", canvas.app.topMenu.Const.BRILL_VERSION);
                this.processMenu(item.data);
                break;
            case 12:
                canvas.Functions.navigateToURL(canvas.Translator.getText(1100), "_blank");
                break;
            case 11:
                setTimeout(help_menu.bind(this, item.x - 25, item.y + 80), 100);
                break;
            case 17:
                canvas.Functions.navigateToURL("recruitment.php", "_blank");
                break;
            case 21:
                canvas.Functions.navigateToURL("info/info/", "_blank");
                break;
            case 22:
                canvas.Functions.navigateToURL("info/library/", "_blank");
                break;
            case 23:
                canvas.Functions.navigateToURL("info/news/", "_blank");
                break;
            default:
                this.processMenu(item.data);
        }
    }
};
canvas.app.topMenu.Main.prototype.processMenu = function (data) {
    try {
        if (data.command) processMenu(data.command);
    } catch (e) {}
};
canvas.app.topMenu.Main.prototype.executeMenuId = function (id) {
    this.itemClickHandler({ params: { data: this.model.itemsById[id] } });
};
canvas.app.topMenu.Model = function (par) {
    this.labels = par.labels.split("|");
    this.localStorage = new canvas.utils.LocalStorage(canvas.Log.TOP_MENU);
    this.dragging = parseInt(par.dragDropItems) != 0;
    this.jsPopup = par.js_popup != undefined && par.js_popup == "1";
    var brillVersion = parseInt(this.localStorage.get("brillVersion"));
    this.showBrillMessage = (!brillVersion || brillVersion != canvas.app.topMenu.Const.BRILL_VERSION) && par.br_msg;
    this.blinkIds = [];
    if (par.blink != undefined) {
        var a = par.blink.split("|");
        if (this.showBrillMessage) a.push(8);
        var len = a.length;
        for (var i = 0; i < len; i++) {
            if (a[i] != "" && this.blinkIds.indexOf(parseInt(a[i])) < 0) {
                this.blinkIds.push(parseInt(a[i]));
            }
        }
    }
    this.items = [];
    this.itemsById = {};
};
canvas.app.topMenu.Model.prototype.parseConfig = function (xml) {
    var doc;
    if (xml) {
        doc = xml.data;
        var list = doc.children[0].children;
        var len = list.length;
        var len2;
        var item;
        var item2;
        var index;
        var order = this.localStorage.get("order");
        var a = order ? order.split(",") : null;
        for (var i = 0; i < len; i++) {
            item = this.parseItem(list[i]);
            if (a) {
                item.index = a.indexOf(item.id.toString());
            }
            this.items.push(item);
            this.itemsById[item.id] = item;
            len2 = list[i].children.length;
            if (len2 > 0) {
                item.items = [];
                for (var j = 0; j < len2; j++) {
                    item2 = this.parseItem(list[i].children[j]);
                    item.items.push(item2);
                }
            }
        }
        if (a) {
            this.items.sort(function (a, b) {
                return a.index - b.index;
            });
        } else {
            this.items.sort(function (a, b) {
                return a.id - b.id;
            });
        }
    } else {
    }
};
canvas.app.topMenu.Model.prototype.parseItem = function (obj) {
    return { id: parseInt(obj.attributes.id.value), label: obj.attributes.label.value, command: obj.attributes.command ? obj.attributes.command.value : "", pict: obj.attributes.pict.value.split(".")[0] };
};
canvas.app.topMenu.View = function () {
    canvas.px.Container.call(this);
    this.container = this.addChild(new canvas.px.Container());
    this.container.position.set(0, 6);
    var conf = canvas.app.topMenu.model;
    var len = conf.items.length;
    this.items = [];
    var item;
    for (var i = 0; i < len; i++) {
        item = this.container.addChild(new canvas.app.topMenu.view.ItemView(conf.items[i]));
        item.position.set(i * 55, 0);
        item.init();
        this.items.push(item);
    }
    this.testSubMenuSides();
    setTimeout(this.testBlink.bind(this), 100);
};
canvas.app.topMenu.View.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.topMenu.View.prototype.update = function () {
    var len = this.items.length;
    var item;
    var pos;
    for (var i = 0; i < len; i++) {
        item = this.items[i];
        pos = i * 55;
        if (item.x != pos) {
            item.go(pos);
        }
    }
};
canvas.app.topMenu.View.prototype.testBlink = function () {
    var len = this.items.length;
    for (var i = 0; i < len; i++) {
        this.items[i].testBlink();
    }
};
canvas.app.topMenu.View.prototype.replace = function (item1, item2) {
    var index1 = this.items.indexOf(item1);
    var index2 = this.items.indexOf(item2);
    this.items[index1] = item2;
    this.items[index2] = item1;
    this.container.addChild(item1);
    item2.interactive = item2.container.interactive = false;
    item2.outHandler();
    this.update();
};
canvas.app.topMenu.View.prototype.selectItem = function (item) {
    var len = this.items.length;
    var tmpItem;
    for (var i = 0; i < len; i++) {
        tmpItem = this.items[i];
        if (item != tmpItem) {
            tmpItem.mode = 2;
        }
    }
    if (item) {
        this.container.addChild(item);
    }
};
canvas.app.topMenu.View.prototype.deselectItem = function (item) {
    var len = this.items.length;
    var tmpItem;
    for (var i = 0; i < len; i++) {
        tmpItem = this.items[i];
        if (item != tmpItem) {
            tmpItem.mode = 0;
        }
    }
};
canvas.app.topMenu.View.prototype.testSubMenuSides = function () {
    var len = this.items.length;
    var item;
    for (var i = 0; i < len; i++) {
        item = this.items[i];
        if (item.items) {
            item.menuSide = i <= len * 0.5;
        }
    }
};
canvas.app.topMenu.View.prototype.changeBg = function (index) {
    var len = this.items.length;
    var item;
    for (var i = 0; i < len; i++) {
        item = this.items[i];
        if (item.data.pict == "battleField") {
            item.image.texture = canvas.ResourceLoader.getImage("ui", "top/battleField" + index);
        }
    }
};
canvas.app.topMenu.view.ItemView = function (data, isSmall) {
    this.data = data;
    this._mode = 0;
    Object.defineProperty(this, "mode", {
        get: function () {
            return this._mode;
        },
        set: function (value) {
            if (this._mode != value) {
                this._mode = value;
                switch (value) {
                    case 0:
                        this.targetArrowRotation = 0;
                        this.targetArrowX = 36;
                        this.targetY = 0;
                        this.targetDarknees = 0;
                        this.targetItemsY = -80;
                        break;
                    case 1:
                        this.targetArrowRotation = canvas.Functions.degToRad(180);
                        this.targetArrowX = 10;
                        this.targetY = 0;
                        this.targetDarknees = 0;
                        this.targetItemsY = 10;
                        break;
                    case 2:
                        this.targetDarknees = 5;
                        this.targetY = -20;
                        this.targetItemsY = -80;
                        break;
                }
                canvas.EventManager.addEventListener(canvas.app.topMenu.Event.ENTER_FRAME, null, this.frameHandler, this);
            }
        },
    });
    this._darknees = 0;
    Object.defineProperty(this, "darknees", {
        get: function () {
            return this._darknees;
        },
        set: function (value) {
            if (this._darknees != value) {
                this._darknees = value;
                if (value > 0) {
                    this.filters = [canvas.Functions.getBrightness(1 - 0.1 * value)];
                } else {
                    this.filters = [];
                }
            }
        },
    });
    this._menuSide = true;
    Object.defineProperty(this, "menuSide", {
        get: function () {
            return this._menuSide;
        },
        set: function (value) {
            if (this._menuSide != value) {
                this._menuSide = value;
                if (this.items) {
                    var len = this.items.length;
                    for (var i = 0; i < len; i++) {
                        this.items[i].x = this.items[i].targetX = value ? i * 50 : -i * 50 - 94;
                    }
                }
            }
        },
    });
    canvas.px.Container.call(this);
    if (isSmall == undefined) isSmall = false;
    this.isSmall = isSmall;
    this.container = this.addChild(new canvas.px.Container());
    this.container.pivot = new canvas.px.Point(30, 30);
    this.container.interactive = true;
    var texture;
    if (this.isSmall) {
        this.container.position.set(30, 30);
        this.back = this.container.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "top/item_back_small")));
        texture = canvas.ResourceLoader.getImage("ui", "top/" + data.pict);
        this.image = this.container.addChild(new canvas.px.Sprite(texture));
        this.front = this.container.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "top/item_front_small")));
        this.back.position.set(8, 8);
        this.image.position.set(8, 0);
        this.hitArea = new canvas.px.Circle(34, 30, 26);
        this.light = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "top/light_small"));
        this.light.position.set(7, 6);
    } else {
        this.container.position.set(30, 30);
        this.back = this.container.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "top/item_back")));
        texture = canvas.ResourceLoader.getImage("ui", "top/" + data.pict);
        this.image = this.container.addChild(new canvas.px.Sprite(texture));
        this.front = this.container.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "top/item_front")));
        this.field = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD_STROKE, 16770731, 70, 17, "center"));
        this.field.position.set(0, 60);
        this.back.position.set(6, 0);
        this.image.position.set(6, 0);
        this.hitArea = new canvas.px.Circle(34, 30, 30);
        this.field.alpha = 0;
        this.field.text = canvas.app.topMenu.model.labels[data.label];
        this.light = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "top/light_big"));
        this.light.position.set(5, 0);
    }
    this.interactive = true;
    this.buttonMode = true;
    this.lightDirection = 0;
    this.mouseover = this.over2Handler.bind(this);
    this.container.mouseover = this.overHandler.bind(this);
    this.mouseout = this.outHandler.bind(this);
    this.mousedown = this.downHandler.bind(this);
    this.mouseup = this.upHandler.bind(this);
    this.click = this.clickHandler.bind(this);
    this.wasChanged = false;
    if (this.data.items) {
        this.arrowBack = this.container.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "top/arrow_back")));
        this.arrow = this.arrowBack.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "top/arrow")));
        this.arrow.pivot = new canvas.px.Point(14, 14);
        this.arrow.position.set(14, 14);
        this.arrowBack.position.set(36, 36);
        this.itemsContainer = new canvas.px.Container();
        this.itemsContainer.position.set(50, -80);
        var len = this.data.items.length;
        this.items = [];
        var item;
        for (var i = 0; i < len; i++) {
            item = this.itemsContainer.addChild(new canvas.app.topMenu.view.ItemView(this.data.items[i], true));
            item.position.set(i * 50, 0);
            item.init();
            this.items.push(item);
        }
        canvas.EventManager.addEventListener(canvas.app.topMenu.Event.ITEM_OVER, null, this.itemOverHandler, this);
        canvas.EventManager.addEventListener(canvas.app.topMenu.Event.ITEM_OUT, null, this.itemOutHandler, this);
    }
};
canvas.app.topMenu.view.ItemView.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.topMenu.view.ItemView.prototype.init = function () {
    this.targetAlpha = 0;
    this.targetScale = 1;
    this.targetArrowRotation = 0;
    this.targetArrowX = 36;
    this.targetX = this.x;
    this.targetY = 0;
    this.targetDarknees = 0;
    this.targetItemsY = -80;
};
canvas.app.topMenu.view.ItemView.prototype.go = function (value) {
    this.targetX = value;
    canvas.EventManager.addEventListener(canvas.app.topMenu.Event.ENTER_FRAME, null, this.frameHandler, this);
};
canvas.app.topMenu.view.ItemView.prototype.overHandler = function () {
    this.targetAlpha = 1;
    this.targetScale = 1.15;
    canvas.EventManager.addEventListener(canvas.app.topMenu.Event.ENTER_FRAME, null, this.frameHandler, this);
    this.over2Handler();
};
canvas.app.topMenu.view.ItemView.prototype.over2Handler = function () {
    if (!this.overedItem && !this.isSmall && this.items) {
        this.field.text = canvas.app.topMenu.model.labels[this.data.label];
    }
    canvas.EventManager.dispatchEvent(canvas.app.topMenu.Event.ITEM_OVER, null, this);
};
canvas.app.topMenu.view.ItemView.prototype.downHandler = function () {
    this.targetAlpha = 1;
    this.targetScale = this.mode == 1 ? 1 : 0.9;
    this.wasChanged = false;
    canvas.EventManager.addEventListener(canvas.app.topMenu.Event.ENTER_FRAME, null, this.frameHandler, this);
    if (this.mode == 0 && !this.isSmall) {
        canvas.EventManager.dispatchEvent(canvas.app.topMenu.Event.ITEM_DOWN, null, this);
    }
};
canvas.app.topMenu.view.ItemView.prototype.upHandler = function () {
    this.targetAlpha = 1;
    this.targetScale = 1;
    canvas.EventManager.addEventListener(canvas.app.topMenu.Event.ENTER_FRAME, null, this.frameHandler, this);
};
canvas.app.topMenu.view.ItemView.prototype.outHandler = function () {
    this.targetAlpha = 0;
    this.targetScale = 1;
    canvas.EventManager.addEventListener(canvas.app.topMenu.Event.ENTER_FRAME, null, this.frameHandler, this);
    canvas.EventManager.dispatchEvent(canvas.app.topMenu.Event.ITEM_OUT, null, this);
};
canvas.app.topMenu.view.ItemView.prototype.frameHandler = function () {
    if (
        (this.field && this.targetAlpha != this.field.alpha) ||
        this.targetScale != this.container.scale.x ||
        this.targetX != this.x ||
        this.targetY != this.y ||
        (this.arrowBack && (this.targetArrowX != this.arrowBack.x || this.targetArrowRotation != this.arrow.rotation)) ||
        this.targetDarknees != this.darknees ||
        (this.itemsContainer && this.targetItemsY != this.itemsContainer.y)
    ) {
        if (this.field) {
            if (this.targetAlpha > this.field.alpha) {
                this.field.alpha = Math.min(this.field.alpha + 0.3, this.targetAlpha);
            } else if (this.targetAlpha < this.field.alpha) {
                this.field.alpha = Math.max(this.field.alpha - 0.1, this.targetAlpha);
            }
        }
        if (this.targetScale > this.container.scale.x) {
            this.container.scale.x = Math.min(this.container.scale.x + 0.05, this.targetScale);
            this.container.scale.y = this.container.scale.x;
        } else if (this.targetScale < this.container.scale.x) {
            this.container.scale.x = Math.max(this.container.scale.x - 0.1, this.targetScale);
            this.container.scale.y = this.container.scale.x;
        }
        var diff;
        if (this.targetX > this.x) {
            diff = Math.round(Math.abs(this.targetX - this.x) * 0.4);
            this.x = Math.min(this.x + Math.max(20, diff), this.targetX);
        } else if (this.targetX < this.x) {
            diff = Math.round(Math.abs(this.targetX - this.x) * 0.4);
            this.x = Math.max(this.x - Math.max(20, diff), this.targetX);
        }
        if (this.targetY > this.y) {
            this.y = Math.min(this.y + 5, this.targetY);
        } else if (this.targetY < this.y) {
            this.y = Math.max(this.y - 5, this.targetY);
        }
        if (this.arrowBack) {
            if (this.targetArrowX > this.arrowBack.x) {
                this.arrowBack.x = Math.min(this.arrowBack.x + 8, this.targetArrowX);
            } else if (this.targetArrowX < this.arrowBack.x) {
                this.arrowBack.x = Math.max(this.arrowBack.x - 8, this.targetArrowX);
            }
            if (this.targetArrowRotation > this.arrow.rotation) {
                this.arrow.rotation = Math.min(this.arrow.rotation + 0.8, this.targetArrowRotation);
            } else if (this.targetArrowRotation < this.arrow.rotation) {
                this.arrow.rotation = Math.max(this.arrow.rotation - 0.8, this.targetArrowRotation);
            }
        }
        if (this.targetDarknees > this.darknees) {
            this.darknees = Math.min(this.darknees + 2, this.targetDarknees);
        } else if (this.targetDarknees < this.darknees) {
            this.darknees = Math.max(this.darknees - 2, this.targetDarknees);
        }
        if (this.itemsContainer) {
            if (this.targetItemsY > this.itemsContainer.y) {
                if (!this.contains(this.itemsContainer)) this.addChild(this.itemsContainer);
                this.itemsContainer.y = Math.min(this.itemsContainer.y + 20, this.targetItemsY);
            } else if (this.targetItemsY < this.itemsContainer.y) {
                if (!this.contains(this.itemsContainer)) this.addChild(this.itemsContainer);
                this.itemsContainer.y = Math.max(this.itemsContainer.y - 20, this.targetItemsY);
            } else {
                if (this.targetItemsY < 0) {
                    this.removeIfExist(this.itemsContainer);
                }
            }
        }
    } else {
        canvas.EventManager.removeEventListener(canvas.app.topMenu.Event.ENTER_FRAME, null, this.frameHandler, this);
        this.interactive = this.container.interactive = true;
    }
};
canvas.app.topMenu.view.ItemView.prototype.clickHandler = function () {
    if (!this.wasChanged) {
        if (this.data.items) {
            if (this.mode == 1) {
                this.mode = 0;
                canvas.EventManager.dispatchEvent(canvas.app.topMenu.Event.ITEM_DESELECT, null, this);
            } else {
                this.mode = 1;
                canvas.EventManager.dispatchEvent(canvas.app.topMenu.Event.ITEM_SELECT, null, this);
            }
        } else {
            canvas.EventManager.dispatchEvent(canvas.app.topMenu.Event.ITEM_DESELECT);
            canvas.EventManager.dispatchEvent(canvas.app.topMenu.Event.ITEM_CLICK, null, this);
            this.stopBlink();
        }
    }
};
canvas.app.topMenu.view.ItemView.prototype.itemOverHandler = function (event) {
    if (this.items.indexOf(event.params) >= 0) {
        this.overedItem = event.params;
        this.field.text = canvas.app.topMenu.model.labels[event.params.data.label];
        this.targetAlpha = 1;
        this.targetScale = 1;
        canvas.EventManager.addEventListener(canvas.app.topMenu.Event.ENTER_FRAME, null, this.frameHandler, this);
    }
};
canvas.app.topMenu.view.ItemView.prototype.itemOutHandler = function (event) {
    if (this.items.indexOf(event.params) >= 0) {
        if (this.overedItem == event.params) {
            this.overedItem = null;
        }
    }
};
canvas.app.topMenu.view.ItemView.prototype.startBlink = function () {
    this.lightDirection = true;
    this.light.alpha = 0;
    this.container.addChild(this.light);
    canvas.EventManager.addEventListener(canvas.app.topMenu.Event.ENTER_FRAME, null, this.blinkFrameHandler, this);
};
canvas.app.topMenu.view.ItemView.prototype.stopBlink = function () {
    this.container.removeIfExist(this.light);
    canvas.EventManager.removeEventListener(canvas.app.topMenu.Event.ENTER_FRAME, null, this.blinkFrameHandler, this);
};
canvas.app.topMenu.view.ItemView.prototype.blinkFrameHandler = function () {
    if (this.lightDirection) {
        this.light.alpha = Math.min(this.light.alpha + 0.04, 1);
        if (this.light.alpha == 1) this.lightDirection = false;
    } else {
        this.light.alpha = Math.max(this.light.alpha - 0.04, 0);
        if (this.light.alpha == 0) this.lightDirection = true;
    }
};
canvas.app.topMenu.view.ItemView.prototype.testBlink = function () {
    var model = canvas.app.topMenu.model;
    var result = false;
    if (model.blinkIds.indexOf(this.data.id) >= 0) {
        this.startBlink();
        result = true;
    }
    if (this.items) {
        var len = this.items.length;
        var res = false;
        for (var i = 0; i < len; i++) {
            if (this.items[i].testBlink()) {
                res = true;
            }
        }
        if (res && this.mode != 1) {
            this.clickHandler();
        }
    }
    return result;
};
canvas.app.rightMenu.Const = { MENU_TYPE_MAIL: 1, MENU_TYPE_BAG: 2, MENU_TYPE_MOUNT: 3, MENU_TYPE_NAV: 4, MENU_TYPE_PROF: 5, MENU_TYPE_QUEST: 6, MENU_TYPE_FRIENDS: 7 };
canvas.app.rightMenu.Event = { ENTER_FRAME: "RightMenu.ENTER_FRAME", MENU_CLICK: "RightMenu.MENU_CLICK", PANEL_CLOSED: "RightMenu.PANEL_CLOSED", ITEM_CLICK: "RightMenu.ITEM_CLICK" };
canvas.app.rightMenu.Main = function (model) {
    canvas.px.Container.call(this);
    this.model = model;
    this.back = this.addChild(new canvas.px.Mask(105, this.model.height));
    this.back.interactive = true;
    this.back.click = this.backClickHandler.bind(this);
    this.view = new canvas.app.rightMenu.View();
    this.addChild(this.view);
    setInterval(this.timerHandler.bind(this), 3e3);
    canvas.EventManager.addEventListener(canvas.Event.STAGE_KEY_DOWN, null, this.handlerKey, this);
    canvas.EventManager.addEventListener(canvas.app.rightMenu.Event.MENU_CLICK, null, this.menuClickHandler, this);
    canvas.EventManager.addEventListener(canvas.app.rightMenu.Event.ITEM_CLICK, null, this.itemClickHandler, this);
    this.request = new canvas.utils.URLRequest("entry_point.php?object=user&json_mode_on=1&action=instapockets");
    canvas.EventManager.addEventListener(canvas.utils.URLRequestEvent.EVENT_COMPLETE, this.request, this.completeHandler, this);
};
canvas.app.rightMenu.Main.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.rightMenu.Main.prototype.swfObject = function (data) {
    var str;
    var config;
    if (data) {
        for (str in data) {
            switch (str) {
                case "user|mount":
                    config = data[str];
                    this.model.mount = config.mount_id > 0 ? (config.is_mount ? 2 : 1) : 0;
                    this.view.mountView.update();
                    break;
                case "instapockets|init":
                    this.request.load();
                    break;
            }
        }
    }
};
canvas.app.rightMenu.Main.prototype.completeHandler = function (event) {
    var obj = JSON.parse(this.request.request.responseText);
    if (obj["user|instapockets"]) {
        var data = obj["user|instapockets"];
        var artifacts = [];
        for (var str in data["instapockets_artifact_list"]) {
            artifacts.push(data["instapockets_artifact_list"][str]);
        }
        this.model.parseSlots(data["instapockets_slot_num_max"], artifacts);
        this.view.update();
    }
};
canvas.app.rightMenu.Main.prototype.blinkButton = function (id, status) {
    var conf = this.model;
    if (status) {
        if (conf.blinkIds.indexOf(id) < 0) conf.blinkIds.push(id);
    } else {
        if (conf.blinkIds.indexOf(id) >= 0) conf.blinkIds.splice(conf.blinkIds.indexOf(id), 1);
    }
    this.view.testBlink();
};
canvas.app.rightMenu.Main.prototype.handlerKey = function (event) {
    if (document.activeElement && document.activeElement.constructor.name == "HTMLInputElement") return;
    var keyCode = event.params.globalKeyCode;
    var altKey = event.params.altKey;
    var ctrlKey = event.params.ctrlKey;
    var shiftKey = event.params.shiftKey;
    if (shiftKey) {
        switch (keyCode) {
            case canvas.Const.KEYS.KEY_1:
                this.view.itemsPanel.useItem(0);
                break;
            case canvas.Const.KEYS.KEY_2:
                this.view.itemsPanel.useItem(1);
                break;
            case canvas.Const.KEYS.KEY_3:
                this.view.itemsPanel.useItem(2);
                break;
            case canvas.Const.KEYS.KEY_4:
                this.view.itemsPanel.useItem(3);
                break;
            case canvas.Const.KEYS.KEY_5:
                this.view.itemsPanel.useItem(4);
                break;
            case canvas.Const.KEYS.KEY_6:
                this.view.itemsPanel.useItem(5);
                break;
            case canvas.Const.KEYS.KEY_7:
                this.view.itemsPanel.useItem(6);
                break;
            case canvas.Const.KEYS.KEY_8:
                this.view.itemsPanel.useItem(7);
                break;
            case canvas.Const.KEYS.KEY_9:
                this.view.itemsPanel.useItem(8);
                break;
        }
    } else if (altKey) {
        switch (keyCode) {
            case canvas.Const.KEYS.L:
                openLocator();
                break;
        }
    }
};
canvas.app.rightMenu.Main.prototype.timerHandler = function () {
    this.model.parseSessTarget();
    this.view.navView.update();
};
canvas.app.rightMenu.Main.prototype.menuClickHandler = function (event) {
    var item = event.params;
    var blinked = false;
    if (this.model.blinkIds.indexOf(item.id) >= 0) {
        blinked = true;
        this.model.blinkIds.splice(this.model.blinkIds.indexOf(item.id), 1);
        var request = new canvas.utils.URLRequest("/user_conf.php?mode=button_press&type=right&id=" + item.id);
        request.load();
    }
    switch (item.id) {
        case canvas.app.rightMenu.Const.MENU_TYPE_MAIL:
            mailPopup(blinked ? 1 : 0);
            break;
        case canvas.app.rightMenu.Const.MENU_TYPE_BAG:
            showExternalBackpack();
            break;
        case canvas.app.rightMenu.Const.MENU_TYPE_MOUNT:
            mountPopup(this.model.mount);
            break;
        case canvas.app.rightMenu.Const.MENU_TYPE_NAV:
            var ls = new canvas.utils.LocalStorage(canvas.Log.COMPASS);
            var w = ls.get("width") || 0;
            var h = ls.get("height") || 0;
            showExternalNavigate(true, w, h);
            break;
        case canvas.app.rightMenu.Const.MENU_TYPE_PROF:
            openServiceCraft();
            break;
        case canvas.app.rightMenu.Const.MENU_TYPE_QUEST:
            openQuests();
            break;
        case canvas.app.rightMenu.Const.MENU_TYPE_FRIENDS:
            processMenu("b20");
            break;
    }
};
canvas.app.rightMenu.Main.prototype.itemClickHandler = function (event) {
    _top().frames["main_frame"].instapocketUse(event.params.id);
};
canvas.app.rightMenu.Main.prototype.backClickHandler = function (event) {
    if (this.view.switchButton.opened) {
        this.view.switchClickHandler();
    }
};
canvas.app.rightMenu.Model = function (par) {
    this.blinkIds = [];
    this.items = [];
    this.itemsCapacity = 0;
    this.serverTime = new canvas.utils.ServerTime(par.serverTime);
    this.socGift = par.soc_gift ? parseInt(par.soc_gift) : 0;
    this.mount = par.mount ? parseInt(par.mount) : 0;
    this.friendsVisible = par.friendsVisible ? parseInt(par.friendsVisible) == 1 : true;
    this.width = par.width;
    this.height = par.height;
    var i = 0;
    var a = new Array();
    var b;
    while (true) {
        if (par["instapockets[" + i + "]"]) {
            b = par["instapockets[" + i + "]"].split(":");
            a.push({ slot_num: b[0], id: b[1], cnt: b[2], picture: b[3], time_expire: b[4] });
            i++;
        } else {
            break;
        }
    }
    this.parseSlots(par.instapockets_slot_num_max ? par.instapockets_slot_num_max : 0, a);
    var num;
    if (par.blink != undefined) {
        a = par.blink.split("|");
        var len = a.length;
        for (i = 0; i < len; i++) {
            num = parseInt(a[i]);
            if (this.blinkIds.indexOf(num) < 0) this.blinkIds.push(num);
        }
    }
    this.parseSessTarget();
};
canvas.app.rightMenu.Model.prototype.parseSessTarget = function () {
    var obj = canvas.Functions.getSessTarget();
    this.finishLocation = obj.target;
    this.autoPenalty = obj.autoPenalty;
};
canvas.app.rightMenu.Model.prototype.parseSlots = function (slotsMax, artifacts) {
    this.itemsCapacity = slotsMax;
    this.items = new Array();
    var obj;
    var len = artifacts.length;
    for (var i = 0; i < len; i++) {
        obj = artifacts[i];
        this.items[obj["slot_num"] - 1] = obj;
    }
};
canvas.app.rightMenu.View = function () {
    canvas.px.Container.call(this);
    this.menuContainer = this.addChild(new canvas.px.Container());
    this.itemsContainer = this.addChild(new canvas.px.Container());
    this.items = [];
    var model = canvas.app.rightMenu.model;
    this.createMenuItem(canvas.app.rightMenu.Const.MENU_TYPE_MAIL);
    this.createMenuItem(canvas.app.rightMenu.Const.MENU_TYPE_BAG);
    this.createMenuItem(canvas.app.rightMenu.Const.MENU_TYPE_MOUNT);
    this.createMenuItem(canvas.app.rightMenu.Const.MENU_TYPE_NAV);
    this.createMenuItem(canvas.app.rightMenu.Const.MENU_TYPE_PROF);
    this.createMenuItem(canvas.app.rightMenu.Const.MENU_TYPE_QUEST);
    if (model.friendsVisible) {
        this.createMenuItem(canvas.app.rightMenu.Const.MENU_TYPE_FRIENDS);
    }
    var len = this.items.length;
    for (var i = 0; i < len; i++) {
        this.items[i].y = i * 46;
    }
    this.switchButton = new canvas.app.rightMenu.view.SwitchButton();
    this.switchButton.position.set(-1, 56);
    this.itemsPanel = this.addChildAt(new canvas.app.rightMenu.view.ItemsPanel(), 0);
    this.itemsPanel.position.set(-40, 50);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.switchButton, this.switchClickHandler, this);
    canvas.EventManager.addEventListener(canvas.app.rightMenu.Event.PANEL_CLOSED, null, this.panelClosedHandler, this);
    this.update();
    this.testBlink();
};
canvas.app.rightMenu.View.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.rightMenu.View.prototype.createMenuItem = function (type) {
    switch (type) {
        case canvas.app.rightMenu.Const.MENU_TYPE_MOUNT:
            this.mountView = this.menuContainer.addChildAt(new canvas.app.rightMenu.view.menu.MenuItemMount(), 0);
            this.items.push(this.mountView);
            break;
        case canvas.app.rightMenu.Const.MENU_TYPE_NAV:
            this.navView = this.menuContainer.addChildAt(new canvas.app.rightMenu.view.menu.MenuItemNav(), 0);
            this.items.push(this.navView);
            break;
        default:
            this.items.push(this.menuContainer.addChildAt(new canvas.app.rightMenu.view.MenuItemView(type), 0));
    }
};
canvas.app.rightMenu.View.prototype.update = function () {
    canvas.EventManager.addEventListener(canvas.app.rightMenu.Event.ENTER_FRAME, null, this.updateHandler, this);
};
canvas.app.rightMenu.View.prototype.updateHandler = function () {
    canvas.EventManager.removeEventListener(canvas.app.rightMenu.Event.ENTER_FRAME, null, this.updateHandler, this);
    var model = canvas.app.rightMenu.model;
    this.itemsPanel.update();
    if (model.itemsCapacity > 0) {
        this.addChild(this.switchButton);
        if (this.switchButton.opened) {
            this.x = 40;
            this.itemsPanel.show();
        } else {
            this.itemsPanel.hide();
        }
    } else {
        this.removeIfExist(this.switchButton);
        this.switchButton.opened = false;
        this.itemsPanel.hide();
        this.itemsContainer.removeIfExist(this.itemsPanel);
    }
};
canvas.app.rightMenu.View.prototype.panelClosedHandler = function () {
    this.x = 0;
};
canvas.app.rightMenu.View.prototype.testBlink = function () {
    var len = this.items.length;
    var model = canvas.app.rightMenu.model;
    for (var i = 0; i < len; i++) {
        if (model.blinkIds.indexOf(this.items[i].id) >= 0) {
            this.items[i].startBlink();
        }
    }
};
canvas.app.rightMenu.View.prototype.switchClickHandler = function () {
    if (this.switchButton.parent) {
        this.switchButton.opened = !this.switchButton.opened;
        this.update();
    }
};
canvas.app.rightMenu.view.ItemView = function () {
    canvas.ui.ListRenderer.call(this);
    this.image = this.addChild(new canvas.ui.Image());
    this.image.position.set(10, 10);
    this.image.scale.set(0.45, 0.45);
    this.back = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "right/slot_empty")));
    this.field = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_9_STROKE, 16777215, 20, 14, "center"));
    this.field.position.set(20, 22);
    this.light = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "right/slot_over"));
    this.light.position.set(4, 4);
    this.setSize(47, 40);
    this.hitArea = new canvas.px.Circle(22, 22, 22);
};
canvas.app.rightMenu.view.ItemView.prototype = Object.create(canvas.ui.ListRenderer.prototype);
canvas.app.rightMenu.view.ItemView.prototype.update = function () {
    if (this.data) {
        this.back.texture = canvas.ResourceLoader.getImage("ui", "right/slot_transparent");
        this.buttonMode = true;
        this.image.setImage(canvas.Config.artifactsPath + this.data.picture);
        this.field.text = this.data.cnt > 1 ? this.data.cnt : "";
    } else {
        this.back.texture = canvas.ResourceLoader.getImage("ui", "right/slot_empty");
        this.buttonMode = false;
        this.image.clear();
        this.outHandler();
        this.field.text = "";
    }
};
canvas.app.rightMenu.view.ItemView.prototype.overHandler = function () {
    if (this.data) {
        this.addChild(this.light);
        artifactAltSimple(this.data.id, 2);
        canvas.app.rightMenu.view.ItemView.overedItem = this;
    }
};
canvas.app.rightMenu.view.ItemView.prototype.outHandler = function () {
    this.removeIfExist(this.light);
    if (this.data && canvas.app.rightMenu.view.ItemView.overedItem == this) {
        artifactAltSimple(this.data.id, 0);
    }
};
canvas.app.rightMenu.view.ItemView.prototype.clickHandler = function () {
    if (this.data) {
        canvas.EventManager.dispatchEvent(canvas.app.rightMenu.Event.ITEM_CLICK, null, this.data);
    }
};
canvas.app.rightMenu.view.ItemsPanel = function () {
    canvas.px.Container.call(this);
    this.xPos = 40;
    this.container = new canvas.px.Container();
    this.hide();
    this.interactive = false;
    setInterval(this.timerHandler.bind(this), 1e3);
    this.list = this.container.addChild(new canvas.ui.List(canvas.ui.ListType.VERTICAL, 1));
    this.list.setSize(45, 500);
    this.list.paddingV = 0;
    this.list.interactive = false;
    this.container.x = 40;
};
canvas.app.rightMenu.view.ItemsPanel.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.rightMenu.view.ItemsPanel.prototype.update = function () {
    var conf = canvas.app.rightMenu.model;
    var len = Math.max(conf.itemsCapacity, this.list.items.length);
    for (var i = 0; i < len; i++) {
        if (i >= this.list.items.length) {
            this.list.add(new canvas.app.rightMenu.view.ItemView());
        }
        if (i >= conf.itemsCapacity) {
            this.list.removeAt(i);
        } else {
            this.list.items[i].data = i >= conf.items.length ? null : conf.items[i];
        }
    }
};
canvas.app.rightMenu.view.ItemsPanel.prototype.useItem = function (index) {
    if (this.list.items[index]) {
        this.list.items[index].clickHandler();
    }
};
canvas.app.rightMenu.view.ItemsPanel.prototype.hide = function () {
    this.interactiveChildren = false;
    this.direction = false;
    canvas.EventManager.addEventListener(canvas.app.rightMenu.Event.ENTER_FRAME, null, this.updateHandler, this);
};
canvas.app.rightMenu.view.ItemsPanel.prototype.show = function () {
    this.addChild(this.container);
    this.direction = true;
    this.interactiveChildren = false;
    canvas.EventManager.addEventListener(canvas.app.rightMenu.Event.ENTER_FRAME, null, this.updateHandler, this);
    setStyleSWF("right", 0, "items_right_cont");
};
canvas.app.rightMenu.view.ItemsPanel.prototype.updateHandler = function () {
    if (this.direction) {
        if (this.container.x > 0) {
            this.container.x -= 10;
        } else {
            canvas.EventManager.removeEventListener(canvas.app.rightMenu.Event.ENTER_FRAME, null, this.updateHandler, this);
            this.interactiveChildren = true;
        }
    } else {
        if (this.container.x < this.xPos) {
            this.container.x += 10;
        } else {
            this.removeIfExist(this.container);
            canvas.EventManager.removeEventListener(canvas.app.rightMenu.Event.ENTER_FRAME, null, this.updateHandler, this);
            setStyleSWF("right", -40, "items_right_cont");
            canvas.EventManager.dispatchEvent(canvas.app.rightMenu.Event.PANEL_CLOSED);
        }
    }
};
canvas.app.rightMenu.view.ItemsPanel.prototype.timerHandler = function () {
    var conf = canvas.app.rightMenu.model;
    var len = conf.items.length;
    var obj;
    var needUpdate = false;
    var time = conf.serverTime.getTime();
    for (var i = 0; i < len; i++) {
        obj = conf.items[i];
        if (obj && obj.time_expire > 0 && obj.time_expire < time) {
            conf.items[i] = null;
            needUpdate = true;
        }
    }
    if (needUpdate) {
        this.update();
    }
};
canvas.app.rightMenu.view.MenuItemView = function (id) {
    this.id = id;
    canvas.px.Container.call(this);
    this.defaultAlpha = 1;
    this.back = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "right/menu_back")));
    this.field = new canvas.ui.Text(canvas.Const.FONT_ARIAL_9_BOLD_STROKE, 16770731, 68, 12, "center");
    this.createImage();
    this.front = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "right/menu_front")));
    this.fieldBack = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "right/field_back")));
    this.light = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "right/menu_light"));
    this.back.position.set(14, 5);
    this.light.position.set(15, 7);
    this.fieldBack.position.set(0, 27);
    this.addChild(this.field);
    this.field.position.set(0, 37);
    this.image.alpha = this.defaultAlpha;
    this.interactive = true;
    this.buttonMode = true;
    this.hitArea = new canvas.px.Circle(34, 26, 20);
    this.click = this.clickHandler.bind(this);
    this.mouseover = this.overHandler.bind(this);
    this.mouseout = this.outHandler.bind(this);
};
canvas.app.rightMenu.view.MenuItemView.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.rightMenu.view.MenuItemView.prototype.createImage = function () {
    switch (this.id) {
        case canvas.app.rightMenu.Const.MENU_TYPE_MAIL:
            this.image = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "right/mail_image")));
            this.field.text = canvas.Translator.getText(3004);
            this.defaultAlpha = 0.4;
            break;
        case canvas.app.rightMenu.Const.MENU_TYPE_BAG:
            this.image = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "right/bag_image")));
            this.field.text = canvas.Translator.getText(102).toLowerCase();
            break;
        case canvas.app.rightMenu.Const.MENU_TYPE_MOUNT:
            this.image = this.addChild(new canvas.px.Sprite(canvas.px.TextureEmpty));
            this.field.text = canvas.Translator.getText(3006);
            break;
        case canvas.app.rightMenu.Const.MENU_TYPE_NAV:
            this.image = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "right/nav_image_1")));
            this.field.text = canvas.Translator.getText(3007);
            break;
        case canvas.app.rightMenu.Const.MENU_TYPE_PROF:
            this.image = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "right/prof_image")));
            this.field.text = canvas.Translator.getText(3008);
            break;
        case canvas.app.rightMenu.Const.MENU_TYPE_QUEST:
            this.image = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "right/quest_image")));
            this.field.text = canvas.Translator.getText(3005);
            break;
        case canvas.app.rightMenu.Const.MENU_TYPE_FRIENDS:
            this.image = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "right/friends_image")));
            this.field.text = canvas.Translator.getText(3009);
            this.defaultAlpha = 0.4;
            break;
        default:
            this.image = this.addChild(new canvas.px.Sprite(canvas.px.TextureEmpty));
    }
    this.image.position.set(14, 5);
};
canvas.app.rightMenu.view.MenuItemView.prototype.clickHandler = function () {
    this.stopBlink();
    canvas.EventManager.dispatchEvent(canvas.app.rightMenu.Event.MENU_CLICK, null, this);
};
canvas.app.rightMenu.view.MenuItemView.prototype.overHandler = function () {
    this.addChild(this.light);
};
canvas.app.rightMenu.view.MenuItemView.prototype.outHandler = function () {
    this.removeIfExist(this.light);
};
canvas.app.rightMenu.view.MenuItemView.prototype.startBlink = function () {
    this.direction = true;
    this.image.alpha = this.defaultAlpha;
    canvas.EventManager.addEventListener(canvas.app.rightMenu.Event.ENTER_FRAME, null, this.blinkFrameHandler, this);
};
canvas.app.rightMenu.view.MenuItemView.prototype.stopBlink = function () {
    canvas.EventManager.removeEventListener(canvas.app.rightMenu.Event.ENTER_FRAME, null, this.blinkFrameHandler, this);
    this.image.alpha = this.defaultAlpha;
};
canvas.app.rightMenu.view.MenuItemView.prototype.blinkFrameHandler = function () {
    if (this.direction) {
        this.image.alpha = Math.min(this.image.alpha + 0.1, 1);
        if (this.image.alpha == 1) this.direction = false;
    } else {
        this.image.alpha = Math.max(this.image.alpha - 0.1, 0);
        if (this.image.alpha == 0) this.direction = true;
    }
};
canvas.app.rightMenu.view.SwitchButton = function () {
    this._opened = false;
    Object.defineProperty(this, "opened", {
        get: function () {
            return this._opened;
        },
        set: function (value) {
            if (this._opened != value) {
                this._opened = value;
                if (value) {
                    this.baseTexture = canvas.ResourceLoader.getImage("ui", "right/slot_arrow_right");
                    this.overTexture = canvas.ResourceLoader.getImage("ui", "right/slot_arrow_right_over");
                    this.downTexture = canvas.ResourceLoader.getImage("ui", "right/slot_arrow_right_down");
                } else {
                    this.baseTexture = canvas.ResourceLoader.getImage("ui", "right/slot_arrow_left");
                    this.overTexture = canvas.ResourceLoader.getImage("ui", "right/slot_arrow_left_over");
                    this.downTexture = canvas.ResourceLoader.getImage("ui", "right/slot_arrow_left_down");
                }
                this.handlerOver();
            }
        },
    });
    canvas.ui.Button.call(this, canvas.ResourceLoader.getImage("ui", "right/slot_arrow_left"), canvas.ResourceLoader.getImage("ui", "right/slot_arrow_left_over"), canvas.ResourceLoader.getImage("ui", "right/slot_arrow_left_down"));
};
canvas.app.rightMenu.view.SwitchButton.prototype = Object.create(canvas.ui.Button.prototype);
canvas.app.rightMenu.view.menu.MenuItemMount = function () {
    this._state = -1;
    Object.defineProperty(this, "state", {
        get: function () {
            return this._state;
        },
        set: function (value) {
            if (this._state != value) {
                this._state = value;
                this.image.texture = canvas.ResourceLoader.getImage("ui", "right/mount_image_" + (value == 1 || value == 2 ? value : 3));
            }
        },
    });
    canvas.app.rightMenu.view.MenuItemView.call(this, canvas.app.rightMenu.Const.MENU_TYPE_MOUNT);
    this.update();
};
canvas.app.rightMenu.view.menu.MenuItemMount.prototype = Object.create(canvas.app.rightMenu.view.MenuItemView.prototype);
canvas.app.rightMenu.view.menu.MenuItemMount.prototype.update = function () {
    this.state = canvas.app.rightMenu.model.mount;
};
canvas.app.rightMenu.view.menu.MenuItemNav = function () {
    this._state = 1;
    Object.defineProperty(this, "state", {
        get: function () {
            return this._state;
        },
        set: function (value) {
            if (this._state != value) {
                this._state = value;
                this.image.texture = canvas.ResourceLoader.getImage("ui", "right/nav_image_" + value);
                if (value == 2) {
                    canvas.EventManager.addEventListener(canvas.app.rightMenu.Event.ENTER_FRAME, null, this.frameHandler, this);
                    this.targetRotation = 0;
                } else {
                    canvas.EventManager.removeEventListener(canvas.app.rightMenu.Event.ENTER_FRAME, null, this.frameHandler, this);
                    this.arrow.rotation = 0;
                }
            }
        },
    });
    canvas.app.rightMenu.view.MenuItemView.call(this, canvas.app.rightMenu.Const.MENU_TYPE_NAV);
    this.arrow = this.image.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "right/nav_arrow")));
    this.arrow.pivot = new canvas.px.Point(3, 10);
    this.arrow.position.set(21, 17);
    this.update();
};
canvas.app.rightMenu.view.menu.MenuItemNav.prototype = Object.create(canvas.app.rightMenu.view.MenuItemView.prototype);
canvas.app.rightMenu.view.menu.MenuItemNav.prototype.update = function () {
    this.state = canvas.app.rightMenu.model.finishLocation ? 2 : 1;
    this.arrow.filters = this.state == 2 && canvas.app.rightMenu.model.autoPenalty >= 0 ? [canvas.Functions.getGlow(15, 8, 0, 12944691, 0.1)] : null;
};
canvas.app.rightMenu.view.menu.MenuItemNav.prototype.frameHandler = function () {
    if (this.targetRotation == 0) {
        this.targetRotation = 1 + canvas.Functions.degToRad(canvas.Functions.random(180));
        this.rotateSpeed = canvas.Functions.degToRad(5 + canvas.Functions.random(10));
    } else {
        if (this.arrow.rotation < this.targetRotation) {
            this.arrow.rotation = Math.min(this.arrow.rotation + this.rotateSpeed, this.targetRotation);
        } else if (this.arrow.rotation > this.targetRotation) {
            this.arrow.rotation = Math.max(this.arrow.rotation - this.rotateSpeed, this.targetRotation);
        } else {
            this.targetRotation = 0;
        }
    }
};
canvas.app.compass.Const = { SIZE: 580, TYPE_LOC: 0, TYPE_RES: 1, TYPE_MON: 2, TYPE_PERS: 3, TYPE_INST: 4, TYPE_COUNT: 5, TITLES: [3011, 3012, 3013, 1255, 3014] };
canvas.app.compass.Element = function (root, type) {
    this._visible = true;
    Object.defineProperty(this, "visible", {
        get: function () {
            return this._visible;
        },
        set: function (value) {
            this._visible = value;
            this.root.style.display = value ? "block" : "none";
        },
    });
    if (type == undefined) type = "div";
    this.root = document.createElement(type);
    root.appendChild(this.root);
    this.root.style.position = "absolute";
    this.root.style.left = this.root.style.right = 0;
};
canvas.app.compass.Event = {
    ENTER_FRAME: "Compass.ENTER_FRAME",
    SHOW_LIST: "Compass.SHOW_LIST",
    HIDE_LIST: "Compass.HIDE_LIST",
    LIST_SELECT: "Compass.LIST_SELECT",
    CHECK_CHANGED: "Compass.CHECK_CHANGED",
    SEARCH: "Compass.SEARCH",
    READY: "Compass.READY",
};
canvas.app.compass.Main = function (model, root) {
    this.model = model;
    this.root = root;
    this.root.onclick = this.upHandler.bind(this);
    this.back = new canvas.app.compass.view.TileBackView(this.root, canvas.app.compass.Const.SIZE, 280);
    this.back.setTitle(canvas.Translator.toUpperCaseFirstChar(canvas.Translator.getText(3007)) + (this.model.FinishLocation ? " - " + this.model.LOC_BY_ID[this.model.FinishLocation] : ""));
    new canvas.app.compass.view.TitleView(this.root, canvas.Translator.getText(3010));
    this.combo = new canvas.app.compass.view.ComboView(root, canvas.app.compass.Const.SIZE - 80);
    this.checksContainer = new canvas.app.compass.Element(root);
    this.checksContainer.root.style.top = 100;
    this.checks = [];
    var element, i, len, len2;
    for (i = 0; i < canvas.app.compass.Const.TYPE_COUNT; i++) {
        element = new canvas.app.compass.view.CheckView(this.checksContainer.root, canvas.Translator.getText(canvas.app.compass.Const.TITLES[i]), i);
        element.selected = this.model.checks[i];
    }
    this.titleBottom = new canvas.app.compass.view.TitleBottomView(this.root, canvas.app.compass.Const.SIZE - 80);
    this.titleBottom.setTitle(5);
    this.button = new canvas.app.compass.view.ButtonView(this.titleBottom.root);
    this.button.x = 220;
    this.button.y = -25;
    this.buttonAuto = new canvas.app.compass.view.ButtonView(this.titleBottom.root, 160, canvas.Translator.getText(3032));
    this.buttonAuto.x = 370;
    this.buttonAuto.y = -35;
    this.titleMiddle = new canvas.app.compass.Element(root);
    this.titleMiddle.root.innerText = canvas.Translator.getText(3017);
    this.titleMiddle.root.style.top = 140;
    this.comboMiddle = new canvas.app.compass.view.ComboBox(root, canvas.app.compass.Const.SIZE - 80);
    this.comboMiddle.root.style.top = 160;
    this.list = new canvas.app.compass.view.ObjectsList(root, canvas.app.compass.Const.SIZE - 80);
    this.list.visible = false;
    canvas.EventManager.addEventListener(canvas.app.compass.Event.SHOW_LIST, null, this.showListHandler, this);
    canvas.EventManager.addEventListener(canvas.app.compass.Event.HIDE_LIST, null, this.hideListHandler, this);
    canvas.EventManager.addEventListener(canvas.app.compass.Event.LIST_SELECT, null, this.listSelectHandler, this);
    canvas.EventManager.addEventListener(canvas.app.compass.Event.CHECK_CHANGED, null, this.checkHandler, this);
    canvas.EventManager.addEventListener(canvas.app.compass.Event.SEARCH, null, this.searchHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ComboBoxEvent.EVENT_SELECT, this.comboMiddle, this.comboHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.button, this.clickHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.buttonAuto, this.clickHandler, this);
    this.update();
    if (this.model.FinishLocation) {
        var state = this.model.localStorage.get("state");
        if (state) {
            var a = state.split(",");
            this.combo.data = { id: a[0], name: a[1], type: parseInt(a[2]) };
            this.update();
            if (a[3] != "") {
                len = this.comboMiddle.items.length;
                for (i = 0; i < len; i++) {
                    if (parseInt(this.comboMiddle.items[i].id) == parseInt(a[3])) {
                        this.comboMiddle.selectedIndex = i;
                        this.comboHandler();
                        break;
                    }
                }
            }
            this.setClearMode(true);
        }
    }
    if (this.model.targetName) {
        this.combo.input.value = this.model.targetName;
        this.combo.changeHandler();
        len = this.model.SEARCH_DATA.length;
        for (i = 0; i < len; i++) {
            len2 = this.model.SEARCH_DATA[i].length;
            if (len2 > 0) {
                this.listSelectHandler({ params: this.model.SEARCH_DATA[i][0] });
                break;
            }
        }
        this.model.targetName = null;
    }
};
canvas.app.compass.Main.prototype.upHandler = function (e) {
    this.hideListHandler();
    this.comboMiddle.opened = false;
};
canvas.app.compass.Main.prototype.clickHandler = function (e) {
    if (this.model.clearMode && e.target == this.button) {
        this.model.setPoint(0);
    } else {
        this.model.setPoint(this.model.TARGET + (e.target == this.buttonAuto ? "_" + this.model.autoPenalty + (parseInt(this.combo.data.id) == 0 ? "_1" : "") : ""));
        this.model.MEMORY_AR = [this.combo.data.id, this.combo.data.name, this.combo.data.type, this.comboMiddle.visible ? this.comboMiddle.selectedItem.id : ""];
        this.model.localStorage.set("state", this.model.MEMORY_AR.join(","));
        if (e.target == this.buttonAuto && window.opener && window.opener.getSWF && !window.opener.getSWF("estate")) {
            var topMenu = window.opener.getSWF("top_mnu");
            if (topMenu) topMenu.executeMenuId(canvas.app.topMenu.Const.ID_LOCATION);
        }
    }
    windowClose();
};
canvas.app.compass.Main.prototype.comboHandler = function () {
    this.applySearch(this.model.WAY_LIST_AR[this.comboMiddle.selectedIndex]);
    this.setClearMode(false);
};
canvas.app.compass.Main.prototype.showListHandler = function () {
    this.list.visible = true;
    this.combo.opened = true;
};
canvas.app.compass.Main.prototype.hideListHandler = function () {
    this.list.visible = false;
    this.combo.opened = false;
};
canvas.app.compass.Main.prototype.listSelectHandler = function (e) {
    this.hideListHandler();
    this.combo.data = e.params;
    this.update();
};
canvas.app.compass.Main.prototype.searchHandler = function (e) {
    this.update(e.params);
};
canvas.app.compass.Main.prototype.checkHandler = function (e) {
    this.model.checks[e.params.index] = e.params.selected ? 1 : 0;
    this.model.saveChecks();
    this.update();
};
canvas.app.compass.Main.prototype.update = function (searchValue) {
    this.titleMiddle.visible = false;
    this.comboMiddle.visible = false;
    this.comboMiddle.opened = false;
    this.titleBottom.visible = false;
    this.button.visible = false;
    if (this.combo.data) {
        this.model.searchWays(this.combo.data);
        this.button.visible = true;
        this.setClearMode(false);
        var len = this.model.WAY_LIST_AR.length;
        if (len > 0) {
            if (len > 1) {
                var items = [];
                for (var i = 0; i < len; i++) {
                    items.push({ id: this.model.WAY_LIST_AR[i].value, value: this.model.WAY_LIST_AR[i].title });
                }
                this.comboMiddle.items = items;
                this.titleMiddle.visible = true;
                this.comboMiddle.visible = true;
            }
            this.applySearch(this.model.WAY_LIST_AR[0]);
        } else {
            this.titleBottom.visible = true;
            this.titleBottom.setNotFoundTitle();
            this.button.visible = false;
        }
    } else {
        this.model.search(searchValue);
        this.list.update();
    }
};
canvas.app.compass.Main.prototype.applySearch = function (data) {
    this.titleBottom.visible = true;
    if (data.steps > 0) {
        this.titleBottom.setTitle(data.steps, this.model.getWaysChain(data.locs));
        this.model.TARGET = data.value;
        this.button.visible = true;
    } else {
        this.titleBottom.setNotFoundTitle(canvas.Translator.getText(3023));
        this.button.visible = false;
        this.buttonAuto.visible = false;
    }
};
canvas.app.compass.Main.prototype.setClearMode = function (value) {
    this.model.clearMode = value;
    if (this.model.autoPenalty < 0 || this.model.autoPenaltyCur >= 0) {
        this.button.title = value ? canvas.Translator.getText(193) : canvas.Translator.getText(3022);
        this.button.width = 260;
        this.button.x = 235;
        this.buttonAuto.visible = false;
    } else {
        this.button.width = 160;
        this.button.x = 70;
        this.button.title = value ? canvas.Translator.getText(193) : canvas.Translator.getText(3024);
        this.buttonAuto.visible = true;
    }
};
canvas.app.compass.Model = function (par) {
    this.allChecksSelected = false;
    this.initChecks();
    this.findWay = new canvas.app.world.engine.FindWay();
    this.CfgLink = par.CfgLink ? par.CfgLink : "images/locale/ru/compass_conf.xml";
    this.CfgWorldLink = par.CfgWorldLink ? par.CfgWorldLink : "images/data/locale/ru/world_conf.xml?ux=1507796560";
    this.AreasXML_Path = par.AreasXML_Path ? par.AreasXML_Path : "images/data/locale/ru/xml_map/";
    this.race = par.race != undefined ? (par.race == "1" ? "hum" : "mag") : "hum";
    this.manorLocationId = par.EstateLocationId == undefined ? 0 : parseInt(par.EstateLocationId);
    this.autoPenalty = par.autoPenalty == undefined ? -1 : parseInt(par.autoPenalty);
    this.myLocVerge = {};
    this.SEARCH_DATA = [[], [], [], [], []];
    this.LOC_BY_ID = {};
    this.LOC_LIST_AR = [];
    this.MAIN_LIST_AR = [];
    this.MON_LIST_AR = [];
    this.RES_LIST_AR = [];
    this.PERS_LIST_AR = [];
    this.INST_LIST_AR = [];
    this.PATH_LIST_AR = [];
    this.WAY_LIST_AR = [[0, 0]];
    this.MEMORY_AR = [];
    this.COMBOBOX_TITLE = [];
    this.FlagLocation = "303";
    this.areas_xml = [];
    this.TARGET = 0;
    this.targetName = par.GmNav ? par.GmNav.replace(/'/g, "`") : null;
    if (getCookie != undefined) {
        var mFlag = getCookie("sess_location");
        this.parse_my_flag(mFlag);
        var target = canvas.Functions.getSessTarget();
        this.autoPenaltyCur = target.autoPenalty;
        if (target.target) {
            this.FinishLocation = target.target.split("|")[0];
        } else {
            this.FinishLocation = target.target;
        }
        this.mMem = getCookie("sess_navigate_memory");
        this.mArr = getCookie("sess_navigate_array");
    }
};
canvas.app.compass.Model.prototype.initChecks = function () {
    this.localStorage = new canvas.utils.LocalStorage(canvas.Log.COMPASS);
    var w = this.localStorage.get("width") || 0;
    var h = this.localStorage.get("height") || 0;
    if (w && h) {
        window.resizeTo(w, h);
    }
    var str = this.localStorage.get("checks"),
        len;
    if (str) {
        this.checks = str.split(",");
        len = this.checks.length;
        for (var i = 0; i < len; i++) {
            this.checks[i] = parseInt(this.checks[i]);
        }
    } else {
        this.checks = [1, 1, 1, 1, 1];
    }
    this.testChecks();
};
canvas.app.compass.Model.prototype.saveChecks = function () {
    this.localStorage.set("checks", this.checks.join(","));
    this.testChecks();
};
canvas.app.compass.Model.prototype.saveWindowSize = function (w, h) {
    if (this.localStorage) {
        this.localStorage.set("width", w);
        this.localStorage.set("height", h);
    }
};
canvas.app.compass.Model.prototype.testChecks = function () {
    var len = this.checks.length;
    this.allChecksSelected = true;
    for (var i = 0; i < len; i++) {
        if (this.checks[i]) {
            this.allChecksSelected = false;
            return;
        }
    }
};
canvas.app.compass.Model.prototype.parse_my_flag = function (mData) {
    if (mData == null) {
        return;
    }
    var mData_arr = mData.split("|");
    var mData_area;
    var mData_location;
    if (mData_arr.length == 2) {
        mData_area = mData_arr[0];
        mData_location = mData_arr[1];
    } else {
        return;
    }
    this.FlagLocation = mData_location;
    this.P1 = parseInt(this.FlagLocation);
};
canvas.app.compass.Model.prototype.initConfig = function () {
    var xml = new DOMParser().parseFromString("<root>" + canvas.ResourceLoader.get("config").xhr.responseText + "</root>", "text/xml");
    this.parse_compass_config(xml);
};
canvas.app.compass.Model.prototype.parse_world_confing = function (doc) {
    var i1;
    var i2;
    var i3;
    var a1;
    var a2;
    var a3;
    var attr;
    var lng_id;
    a1 = doc.childNodes;
    for (i1 = 0; i1 < a1.length; i1++) {
        if (a1[i1].nodeName == "world") {
            a2 = a1[i1].childNodes;
            for (i2 = 0; i2 < a2.length; i2++) {
                switch (a2[i2].nodeName) {
                    case "areas_xml":
                        a3 = a2[i2].childNodes;
                        for (i3 = 0; i3 < a3.length; i3++) {
                            if (a3[i3].nodeName == "file") {
                                if (a3[i3].attributes.src != null) {
                                    this.areas_xml.push(this.AreasXML_Path + a3[i3].attributes.src.value);
                                }
                            }
                        }
                        break;
                }
            }
        }
    }
};
canvas.app.compass.Model.prototype.parse_compass_config = function (doc) {
    var a1;
    var a2;
    var a3;
    var i1;
    var i2;
    var i3;
    a1 = doc.firstChild.childNodes;
    for (i1 = 0; i1 < a1.length; i1++) {
        if (a1[i1].nodeName == "selection") {
            a2 = a1[i1].childNodes;
            for (i2 = 0; i2 < a2.length; i2++) {
                if (a2[i2].nodeName == "title") {
                    if (a2[i2].attributes.name != null) {
                        this.MAIN_LIST_AR.push([a2[i2].nodeName, a2[i2].attributes.name.value]);
                    }
                }
                if (a2[i2].nodeName == "item") {
                    if (a2[i2].attributes.id != null && a2[i2].attributes.name != null) {
                        this.MAIN_LIST_AR.push([parseInt(a2[i2].attributes.id.value), a2[i2].attributes.name.value]);
                    }
                }
            }
        }
        if (a1[i1].nodeName == "locations") {
            a2 = a1[i1].childNodes;
            for (i2 = 0; i2 < a2.length; i2++) {
                if (a2[i2].nodeName == "title") {
                    if (a2[i2].attributes.name != null) {
                        this.LOC_LIST_AR.push([a2[i2].nodeName, a2[i2].attributes.name.value]);
                    }
                }
                if (a2[i2].nodeName == "loc") {
                    if (a2[i2].attributes.id != null && a2[i2].attributes.name != null && a2[i2].attributes.verges != null) {
                        var fl = true;
                        if (a2[i2].attributes.race != null) {
                            if (a2[i2].attributes.race.value != this.race) {
                                fl = false;
                            }
                        }
                        if (fl) {
                            var ar2 = [];
                            var ar1 = a2[i2].attributes.verges.value.split("|");
                            var pair = [];
                            var neighbors = [];
                            for (var i0 = 0; i0 < ar1.length; i0++) {
                                pair = ar1[i0].split(",");
                                if (pair.length == 2) {
                                    ar2[i0] = [pair[0], pair[1]];
                                    if (neighbors.indexOf(pair[0]) == -1) {
                                        neighbors.push(pair[0]);
                                    }
                                    if (neighbors.indexOf(pair[1]) == -1) {
                                        neighbors.push(pair[1]);
                                    }
                                }
                            }
                            this.myLocVerge[a2[i2].attributes.id.value] = ar2;
                            this.LOC_LIST_AR.push([parseInt(a2[i2].attributes.id.value), a2[i2].attributes.name.value]);
                            for (var it = 0; it < ar2.length; it++) {
                                this.PATH_LIST_AR.push(ar2[it]);
                                this.PATH_LIST_AR[this.PATH_LIST_AR.length - 1].push(parseInt(a2[i2].attributes.id.value));
                            }
                        }
                    }
                }
            }
        }
        if (a1[i1].nodeName == "resurses") {
            a2 = a1[i1].childNodes;
            for (i2 = 0; i2 < a2.length; i2++) {
                if (a2[i2].nodeName == "title") {
                    if (a2[i2].attributes.name != null) {
                        this.RES_LIST_AR.push([a2[i2].nodeName, a2[i2].attributes.name.value]);
                    }
                }
            }
        }
        if (a1[i1].nodeName == "monsters") {
            a2 = a1[i1].childNodes;
            for (i2 = 0; i2 < a2.length; i2++) {
                if (a2[i2].nodeName == "title") {
                    if (a2[i2].attributes.name != null) {
                        this.MON_LIST_AR.push([a2[i2].nodeName, a2[i2].attributes.name.value]);
                    }
                }
            }
        }
        if (a1[i1].nodeName == "pers") {
            a2 = a1[i1].childNodes;
            for (i2 = 0; i2 < a2.length; i2++) {
                if (a2[i2].nodeName == "title") {
                    if (a2[i2].attributes.name != null) {
                        this.PERS_LIST_AR.push([a2[i2].nodeName, a2[i2].attributes.name.value]);
                    }
                }
            }
        }
        if (a1[i1].nodeName == "inst") {
            a2 = a1[i1].childNodes;
            for (i2 = 0; i2 < a2.length; i2++) {
                if (a2[i2].nodeName == "title") {
                    if (a2[i2].attributes.name != null) {
                        this.INST_LIST_AR.push([a2[i2].nodeName, a2[i2].attributes.name.value]);
                    }
                }
            }
        }
    }
    if (this.manorLocationId > 0) {
        this.MAIN_LIST_AR.push([this.manorLocationId, canvas.Translator.getText(148)]);
        this.manorComboIndex = this.MAIN_LIST_AR.length - 1;
        this.LOC_LIST_AR[0] = [this.manorLocationId, canvas.Translator.getText(148)];
    } else {
        this.LOC_LIST_AR[0] = null;
    }
};
canvas.app.compass.Model.prototype.parse_areas = function () {
    var len = this.areas_xml.length;
    var doc;
    var a1;
    var a2;
    var i1;
    var i2;
    for (var i = 0; i < len; i++) {
        doc = canvas.ResourceLoader.get(this.areas_xml[i]).data;
        a1 = doc.childNodes;
        for (i1 = 0; i1 < a1.length; i1++) {
            if (a1[i1].nodeName == "areas") {
                a2 = a1[i1].childNodes;
                for (i2 = 0; i2 < a2.length; i2++) {
                    if (a2[i2].nodeName == "area") {
                        this.parse_area(a2[i2]);
                    }
                }
            }
        }
    }
    this.LOC_LIST_AR = this.sortLocArr(this.LOC_LIST_AR);
    this.PERS_LIST_AR = this.sortLocArr(this.PERS_LIST_AR);
    this.RES_LIST_AR = this.sortLocArr(this.RES_LIST_AR);
    this.MON_LIST_AR = this.sortLocArr(this.MON_LIST_AR);
    var len = this.LOC_LIST_AR.length;
    for (var i = 0; i < len; i++) {
        if (this.LOC_LIST_AR[i]) {
            this.LOC_BY_ID[this.LOC_LIST_AR[i][0]] = this.LOC_LIST_AR[i][1];
        }
    }
};
canvas.app.compass.Model.prototype.parse_area = function (node) {
    var i3;
    var i4;
    var i5;
    var a3;
    var a4;
    var a5;
    var attr;
    var attr_loc;
    var attr_obj;
    var arr_loc_id = [];
    var lng_id;
    attr = node.attributes;
    a3 = node.childNodes;
    for (i3 = 0; i3 < a3.length; i3++) {
        if (a3[i3].nodeName == "location") {
            attr_loc = a3[i3].attributes;
            if (attr_loc.id != null) {
                a4 = a3[i3].childNodes;
                for (i4 = 0; i4 < a4.length; i4++) {
                    if (a4[i4].nodeName == "object") {
                        a5 = a4[i4].childNodes;
                        for (i5 = 1; i5 < a5.length; i5++) {
                            if (a5[i5].nodeName == "item" || (a4[i4].attributes.id.value == "star_2" && a5[i5].nodeName == "title")) {
                                this.addObjLoc(a4[i4].attributes.id.value, a5[i5].childNodes[0].nodeValue, attr_loc.id.value, a4[i4].attributes.race);
                            }
                        }
                    } else if (a4[i4].nodeName == "title") {
                        this.setLocName(attr_loc.id.value, a4[i4].childNodes[0].nodeValue);
                    }
                }
            }
        }
    }
};
canvas.app.compass.Model.prototype.setLocName = function (loc_id, loc_name) {
    if (loc_name == null) {
        return;
    }
    for (var i = 1; i < this.LOC_LIST_AR.length; i++) {
        if (this.LOC_LIST_AR[i][0] == loc_id) {
            this.LOC_LIST_AR[i][1] = loc_name;
        }
    }
};
canvas.app.compass.Model.prototype.addObjLoc = function (type_obj, name_obj, loc_id, _race) {
    switch (type_obj) {
        case "chel_blue":
        case "chel_red":
        case "chel_gray":
        case "group_red":
        case "group_blue":
        case "group_gray":
        case "tower":
            if ((this.race == "hum" && type_obj == "chel_red") || (this.race == "mag" && type_obj == "chel_blue")) break;
            if ((this.race == "hum" && type_obj == "group_red") || (this.race == "mag" && type_obj == "group_blue")) break;
            this.addObjToArr(this.PERS_LIST_AR, name_obj, loc_id);
            break;
        case "farm_fish":
        case "farm_floor":
        case "farm_rock":
            this.addObjToArr(this.RES_LIST_AR, name_obj, loc_id);
            break;
        case "monster":
        case "boss":
            if (this.race == "hum" && loc_id == 37) break;
            if (this.race == "mag" && loc_id == 36) break;
            this.addObjToArr(this.MON_LIST_AR, name_obj, loc_id);
            break;
        case "star_2":
            if (_race == null || _race.value == this.race) {
                this.addObjToArr(this.INST_LIST_AR, name_obj, loc_id);
            }
            break;
    }
};
canvas.app.compass.Model.prototype.addObjToArr = function (arr, name_obj, loc_id) {
    var fl = false;
    for (var i = 1; i < arr.length; i++) {
        if (arr[i][1] == name_obj) {
            fl = true;
            arr[i][0].push(loc_id);
        }
    }
    if (!fl) {
        arr.push([[loc_id], name_obj]);
    }
};
canvas.app.compass.Model.prototype.sortLocArr = function (arr) {
    var ar1 = arr.shift();
    var ar2 = [];
    ar2.push(ar1);
    arr.sort(function (a, b) {
        if (a[1] > b[1]) {
            return 1;
        }
        if (a[1] < b[1]) {
            return -1;
        }
        return 0;
    });
    return ar2.concat(arr);
};
canvas.app.compass.Model.prototype.getCorrectInfoText = function (NumTransfers) {
    var num = NumTransfers % 10;
    var txt;
    if (NumTransfers == 11 || NumTransfers == 12 || NumTransfers == 13 || NumTransfers == 14) {
        txt = String(NumTransfers) + " " + canvas.Translator.getText(3016);
    } else {
        switch (num) {
            case 1:
                txt = String(NumTransfers) + " " + canvas.Translator.getText(3020);
                break;
            case 2:
            case 3:
            case 4:
                txt = String(NumTransfers) + " " + canvas.Translator.getText(3021);
                break;
            case 0:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
                txt = String(NumTransfers) + " " + canvas.Translator.getText(3016);
                break;
            default:
                break;
        }
    }
    return txt;
};
canvas.app.compass.Model.prototype.setPoint = function (p2) {
    if (p2 == 0) {
        canvas.Functions.deleteSessTarget();
    } else {
        setCookie("sess_target", p2.toString());
    }
};
canvas.app.compass.Model.prototype.getLocationsPaths = function (data) {
    var len = data.length;
    var steps;
    this.WAY_LIST_AR = [];
    for (var i = 0; i < len; i++) {
        steps = this.findWay.finder(this.P1, data[i]);
        if (steps.length > 0 && steps[0] >= 0) {
            this.WAY_LIST_AR.push({ value: data[i], title: this.LOC_BY_ID[data[i]] + " (" + (steps.length - 1) + ")", steps: steps.length - 1, locs: steps.reverse() });
        }
    }
    this.WAY_LIST_AR.sort(function (a, b) {
        return a.steps - b.steps;
    });
};
canvas.app.compass.Model.prototype.findObjectByName = function (arr, name) {
    var len = arr.length;
    for (var i = 0; i < len; i++) {
        if (arr[i][1].toLowerCase().search(name.toLowerCase()) >= 0) {
            return i;
        }
    }
    return -1;
};
canvas.app.compass.Model.prototype.search = function (str) {
    var str2 = canvas.Functions.getCyrillicInput(str);
    this.SEARCH_DATA = [[], [], [], [], []];
    var len, i, obj;
    var allChecks = this.targetName ? true : this.allChecksSelected;
    if (allChecks || this.checks[canvas.app.compass.Const.TYPE_LOC]) {
        len = this.LOC_LIST_AR.length;
        for (i = 0; i < len; i++) {
            if (!this.LOC_LIST_AR[i]) continue;
            obj = { id: i, name: this.LOC_LIST_AR[i][1], type: canvas.app.compass.Const.TYPE_LOC };
            if (i == 0) obj.skipSort = true;
            if (!str || obj.name.toLowerCase().indexOf(str.toLowerCase()) >= 0 || obj.name.toLowerCase().indexOf(str2.toLowerCase()) >= 0) {
                this.SEARCH_DATA[canvas.app.compass.Const.TYPE_LOC].push(obj);
            }
        }
        this.SEARCH_DATA[canvas.app.compass.Const.TYPE_LOC].sort(this.sortByTitle);
    }
    if (allChecks || this.checks[canvas.app.compass.Const.TYPE_RES]) {
        len = this.RES_LIST_AR.length;
        for (i = 1; i < len; i++) {
            obj = { id: i, name: this.RES_LIST_AR[i][1], type: canvas.app.compass.Const.TYPE_RES };
            if (!str || obj.name.toLowerCase().indexOf(str.toLowerCase()) >= 0 || obj.name.toLowerCase().indexOf(str2.toLowerCase()) >= 0) {
                this.SEARCH_DATA[canvas.app.compass.Const.TYPE_RES].push(obj);
            }
        }
        this.SEARCH_DATA[canvas.app.compass.Const.TYPE_RES].sort(this.sortByTitle);
    }
    if (allChecks || this.checks[canvas.app.compass.Const.TYPE_MON]) {
        len = this.MON_LIST_AR.length;
        for (i = 1; i < len; i++) {
            obj = { id: i, name: this.MON_LIST_AR[i][1], type: canvas.app.compass.Const.TYPE_MON };
            if (!str || obj.name.toLowerCase().indexOf(str.toLowerCase()) >= 0 || obj.name.toLowerCase().indexOf(str2.toLowerCase()) >= 0) {
                this.SEARCH_DATA[canvas.app.compass.Const.TYPE_MON].push(obj);
            }
        }
        this.SEARCH_DATA[canvas.app.compass.Const.TYPE_MON].sort(this.sortByTitle);
    }
    if (allChecks || this.checks[canvas.app.compass.Const.TYPE_PERS]) {
        len = this.PERS_LIST_AR.length;
        for (i = 1; i < len; i++) {
            obj = { id: i, name: this.PERS_LIST_AR[i][1], type: canvas.app.compass.Const.TYPE_PERS };
            if (!str || obj.name.toLowerCase().indexOf(str.toLowerCase()) >= 0 || obj.name.toLowerCase().indexOf(str2.toLowerCase()) >= 0) {
                this.SEARCH_DATA[canvas.app.compass.Const.TYPE_PERS].push(obj);
            }
        }
        this.SEARCH_DATA[canvas.app.compass.Const.TYPE_PERS].sort(this.sortByTitle);
    }
    if (allChecks || this.checks[canvas.app.compass.Const.TYPE_INST]) {
        len = this.INST_LIST_AR.length;
        for (i = 1; i < len; i++) {
            obj = { id: i, name: this.INST_LIST_AR[i][1], type: canvas.app.compass.Const.TYPE_INST };
            if (!str || obj.name.toLowerCase().indexOf(str.toLowerCase()) >= 0 || obj.name.toLowerCase().indexOf(str2.toLowerCase()) >= 0) {
                this.SEARCH_DATA[canvas.app.compass.Const.TYPE_INST].push(obj);
            }
        }
        this.SEARCH_DATA[canvas.app.compass.Const.TYPE_INST].sort(this.sortByTitle);
    }
};
canvas.app.compass.Model.prototype.sortByTitle = function (a, b) {
    if (a.skipSort) {
        return -1;
    } else if (b.skipSort) {
        return 1;
    } else if (a.name > b.name) {
        return 1;
    } else if (a.name < b.name) {
        return -1;
    } else {
        return 0;
    }
};
canvas.app.compass.Model.prototype.searchWays = function (data) {
    var locIds = [];
    switch (data.type) {
        case canvas.app.compass.Const.TYPE_LOC:
            locIds.push(parseInt(this.LOC_LIST_AR[data.id][0]));
            break;
        case canvas.app.compass.Const.TYPE_RES:
            locIds = this.RES_LIST_AR[data.id][0];
            break;
        case canvas.app.compass.Const.TYPE_MON:
            locIds = this.MON_LIST_AR[data.id][0];
            break;
        case canvas.app.compass.Const.TYPE_PERS:
            locIds = this.PERS_LIST_AR[data.id][0];
            break;
        case canvas.app.compass.Const.TYPE_INST:
            locIds = this.INST_LIST_AR[data.id][0];
            break;
    }
    this.getLocationsPaths(locIds);
};
canvas.app.compass.Model.prototype.getWaysChain = function (data) {
    var result = [];
    var len = data.length;
    for (var i = 0; i < len; i++) {
        result.push(this.LOC_BY_ID[data[i]]);
    }
    return result;
};
canvas.app.compass.Model.prototype.getColorByWayLen = function (len) {
    if (len < 4) {
        return "red";
    } else if (len < 9) {
        return "blue";
    } else {
        return "grey";
    }
};
canvas.app.compass.view.ButtonView = function (root, w, title) {
    this._title = "";
    Object.defineProperty(this, "title", {
        get: function () {
            return this._title;
        },
        set: function (value) {
            if (this._title === value) return;
            this._title = value;
            this.field.innerText = value;
        },
    });
    this._textColor = "#000000";
    Object.defineProperty(this, "textColor", {
        get: function () {
            return this._textColor;
        },
        set: function (value) {
            if (this._textColor === value) return;
            this._textColor = value;
            this.field.style.color = value;
        },
    });
    this._visible = true;
    Object.defineProperty(this, "visible", {
        get: function () {
            return this._visible;
        },
        set: function (value) {
            this._visible = value;
            this.root.style.display = value ? "block" : "none";
        },
    });
    this._width = 220;
    Object.defineProperty(this, "width", {
        get: function () {
            return this._width;
        },
        set: function (value) {
            if (this._width === value) return;
            this._width = value;
            this.root.style.width = value;
            this.button.style.width = value - 66;
        },
    });
    this._x = 0;
    Object.defineProperty(this, "x", {
        get: function () {
            return this._x;
        },
        set: function (value) {
            if (this._x === value) return;
            this._x = value;
            this.root.style.marginLeft = value;
        },
    });
    this._y = 0;
    Object.defineProperty(this, "y", {
        get: function () {
            return this._y;
        },
        set: function (value) {
            if (this._y === value) return;
            this._y = value;
            this.root.style.marginTop = value;
        },
    });
    if (w == undefined) w = 220;
    var div = document.createElement("div");
    div.className = "popup_center";
    div.style.height = 35;
    root.appendChild(div);
    this.root = div;
    var div2 = document.createElement("div");
    div2.className = "popup_btn";
    div.appendChild(div2);
    var div3 = document.createElement("div");
    div2.appendChild(div3);
    var button = document.createElement("button");
    button.type = "button";
    div3.appendChild(button);
    button.onclick = this.clickHandler.bind(this);
    button.style.outline = "none";
    this.button = button;
    this.field = document.createElement("span");
    this.button.appendChild(this.field);
    this.title = title;
    this.textColor = "#F9DFA1";
    this.width = w;
};
canvas.app.compass.view.ButtonView.prototype.clickHandler = function () {
    canvas.EventManager.dispatchEvent(canvas.ui.ButtonEvent.EVENT_CLICK, this);
};
canvas.app.compass.view.CheckView = function (root, title, index) {
    this._selected = false;
    Object.defineProperty(this, "selected", {
        get: function () {
            return this._selected;
        },
        set: function (value) {
            this._selected = value;
            this.outHandler();
        },
    });
    this.index = index;
    this.root = document.createElement("span");
    root.appendChild(this.root);
    this.img = document.createElement("span");
    this.root.appendChild(this.img);
    this.img.style.display = "inline-block";
    this.img.style.width = 23;
    this.img.style.height = 23;
    this.img.style.background = "url('../images/gui/gui-checkbox.png') no-repeat";
    this.img.style.backgroundPosition = "0px -23px";
    this.img.style.verticalAlign = "middle";
    var span = document.createElement("span");
    this.root.appendChild(span);
    span.innerText = " " + title.toLowerCase();
    span.style.display = "inline";
    this.root.style.margin = 5;
    this.root.style.cursor = "pointer";
    this.root.onmouseover = this.overHandler.bind(this);
    this.root.onmouseout = this.outHandler.bind(this);
    this.root.onclick = this.clickHandler.bind(this);
};
canvas.app.compass.view.CheckView.prototype.overHandler = function () {
    this.img.style.backgroundPosition = this.selected ? "0px -92px" : "0px -115px";
};
canvas.app.compass.view.CheckView.prototype.outHandler = function () {
    this.img.style.backgroundPosition = this.selected ? "0px 0px" : "0px -23px";
};
canvas.app.compass.view.CheckView.prototype.clickHandler = function () {
    this.selected = !this.selected;
    this.overHandler();
    canvas.EventManager.dispatchEvent(canvas.app.compass.Event.CHECK_CHANGED, null, { index: this.index, selected: this.selected });
};
canvas.app.compass.view.ComboBox = function (root, w) {
    this._items = null;
    Object.defineProperty(this, "items", {
        get: function () {
            return this._items;
        },
        set: function (value) {
            this._items = value;
            this.update();
            this.selectedIndex = 0;
        },
    });
    this._selectedIndex = 0;
    Object.defineProperty(this, "selectedIndex", {
        get: function () {
            return this._selectedIndex;
        },
        set: function (value) {
            this._selectedIndex = value;
            this.updateValue();
        },
    });
    Object.defineProperty(this, "selectedItem", {
        get: function () {
            return this.items[this.selectedIndex];
        },
    });
    this._opened = false;
    Object.defineProperty(this, "opened", {
        get: function () {
            return this._opened;
        },
        set: function (value) {
            this._opened = value;
            this.list.style.display = value ? "block" : "none";
            this.img.style.backgroundPosition = value ? "-47px" : "0px";
        },
    });
    canvas.app.compass.Element.call(this, root);
    if (w == undefined) w = 400;
    this.width = w;
    var div = document.createElement("div");
    div.style.width = w;
    div.style.height = 23;
    div.style.position = "relative";
    div.style.background = "url('../images/gui/input.png') no-repeat";
    div.style.backgroundPosition = w - 1e3 + "px -23px";
    div.style.cursor = "pointer";
    div.onclick = this.clickHandler.bind(this);
    div.onmouseover = this.overHandler.bind(this);
    div.onmouseout = this.outHandler.bind(this);
    this.root.appendChild(div);
    this.divCenter = div;
    var div2 = document.createElement("div");
    div.appendChild(div2);
    div2.style.background = "url('../images/gui/input.png') no-repeat";
    div2.style.backgroundPosition = "0px 0px";
    div2.style.width = 10;
    div2.style.height = 22;
    div2.style.left = -6;
    div2.style.position = "absolute";
    this.divLeft = div2;
    div2 = document.createElement("div");
    div.appendChild(div2);
    div2.style.background = "url('../images/gui/btn-select.png') no-repeat";
    div2.style.width = 24;
    div2.style.height = 24;
    div2.style.right = 0;
    div2.style.position = "absolute";
    this.img = div2;
    this.list = document.createElement("div");
    this.list.style.width = w;
    this.list.style.height = "auto";
    this.list.style.maxHeight = 108;
    this.list.style.position = "relative";
    this.list.style.background = "#f8e5a8";
    this.list.style.border = "#e3b360 1px solid";
    this.list.style.borderRadius = "4px";
    this.list.style.boxShadow = "0px 3px 3px 1px rgba(41, 13, 5, 0.4)";
    this.list.style.overflow = "auto";
    this.list.style.marginRight = 4;
    this.root.appendChild(this.list);
    this.title = document.createElement("div");
    this.divCenter.appendChild(this.title);
    this.title.style.textAlign = "left";
    this.title.style.height = 12;
    this.title.style.paddingTop = 4;
    this.opened = false;
};
canvas.app.compass.view.ComboBox.prototype = Object.create(canvas.app.compass.Element.prototype);
canvas.app.compass.view.ComboBox.prototype.update = function () {
    var item;
    while (this.list.hasChildNodes()) {
        item = this.list.removeChild(this.list.lastChild);
        item.onmouseover = null;
        item.onmouseout = null;
        item.onclick = null;
    }
    var len = this.items.length;
    for (var i = 0; i < len; i++) {
        item = document.createElement("div");
        item.innerText = this.items[i].value;
        item.align = "left";
        item.style.padding = 4;
        item.style.paddingLeft;
        item.style.cursor = "pointer";
        item.onmouseover = this.itemOverHandler;
        item.onmouseout = this.itemOutHandler;
        item.onclick = this.itemClickHandler.bind(this);
        item.index = i;
        this.list.appendChild(item);
    }
};
canvas.app.compass.view.ComboBox.prototype.updateValue = function () {
    this.title.innerText = this.items[this.selectedIndex].value;
};
canvas.app.compass.view.ComboBox.prototype.clickHandler = function (e) {
    this.opened = !this.opened;
    e.stopPropagation();
};
canvas.app.compass.view.ComboBox.prototype.overHandler = function () {
    this.divCenter.style.backgroundPosition = this.width - 1e3 + "px -69px";
    this.divLeft.style.backgroundPosition = "0px -46px";
};
canvas.app.compass.view.ComboBox.prototype.outHandler = function () {
    this.divCenter.style.backgroundPosition = this.width - 1e3 + "px -23px";
    this.divLeft.style.backgroundPosition = "0px 0px";
};
canvas.app.compass.view.ComboBox.prototype.itemClickHandler = function (e) {
    this.selectedIndex = e.target.index;
    this.opened = false;
    canvas.EventManager.dispatchEvent(canvas.ui.ComboBoxEvent.EVENT_SELECT, this, this.items[this.selectedIndex]);
};
canvas.app.compass.view.ComboBox.prototype.itemOverHandler = function () {
    this.style.background = "#eccf93";
};
canvas.app.compass.view.ComboBox.prototype.itemOutHandler = function () {
    this.style.background = 0;
};
canvas.app.compass.view.ComboView = function (root, w) {
    this._resetMode = false;
    Object.defineProperty(this, "resetMode", {
        get: function () {
            return this._resetMode;
        },
        set: function (value) {
            this._resetMode = value;
            if (value) {
                this.button.style.background = "url('../images/gui/btn-clear.png') no-repeat";
                this.button.style.backgroundPosition = "2px 0px";
                this.button.style.height = 17;
                this.button.style.top = 2;
            } else {
                this.opened = this._opened;
                this.button.style.top = 0;
            }
        },
    });
    this._opened = false;
    Object.defineProperty(this, "opened", {
        get: function () {
            return this._opened;
        },
        set: function (value) {
            this._opened = value;
            if (this.resetMode) return;
            this.button.style.background = "url('../images/gui/btn-select.png') no-repeat";
            this.button.style.backgroundPosition = value ? "-47px 0px" : "0px 0px";
            this.button.style.height = 19;
        },
    });
    this._data = null;
    Object.defineProperty(this, "data", {
        get: function () {
            return this._data;
        },
        set: function (value) {
            this._data = value;
            if (this.data) {
                this.input.value = this.data.name;
            }
            this.update();
        },
    });
    canvas.app.compass.Element.call(this, root);
    if (w == undefined) w = 400;
    this.width = w;
    this.root.style.top = 70;
    var div = document.createElement("div");
    div.style.width = w;
    div.style.height = 23;
    div.style.position = "relative";
    div.style.background = "url('../images/gui/input.png') no-repeat";
    div.style.backgroundPosition = w - 1e3 + "px -23px";
    this.root.appendChild(div);
    this.divCenter = div;
    var div2 = document.createElement("div");
    div.appendChild(div2);
    div2.style.background = "url('../images/btn-filter-search.png') no-repeat";
    div2.style.width = 24;
    div2.style.height = 24;
    div2.style.left = -10;
    div2.style.top = -1;
    div2.style.position = "absolute";
    div2 = document.createElement("div");
    div.appendChild(div2);
    div2.style.background = "url('../images/gui/btn-select.png') no-repeat";
    div2.style.width = 24;
    div2.style.height = 19;
    div2.style.right = 0;
    div2.style.cursor = "pointer";
    div2.style.position = "absolute";
    div2.onclick = this.clickHandler.bind(this);
    this.button = div2;
    this.label1 = document.createElement("label");
    div.appendChild(this.label1);
    this.label1.style.width = 200;
    this.label1.style.height = 24;
    this.label1.style.left = 17;
    this.label1.style.top = 4;
    this.label1.style.color = "#b69372";
    this.label1.style.position = "absolute";
    this.label1.htmlFor = "compassInput";
    this.label1.style.cursor = "text";
    this.label1.style.textAlign = "left";
    this.label1.innerText = canvas.Translator.getText(3040);
    this.label2 = document.createElement("label");
    div.appendChild(this.label2);
    this.label2.style.width = 150;
    this.label2.style.height = 24;
    this.label2.style.right = 25;
    this.label2.style.top = 4;
    this.label2.style.color = "#b69372";
    this.label2.style.position = "absolute";
    this.label2.style.cursor = "pointer";
    this.label2.style.textAlign = "right";
    this.label2.innerText = canvas.Translator.getText(3041);
    this.label2.onclick = this.clickHandler.bind(this);
    this.input = document.createElement("input");
    div.appendChild(this.input);
    this.input.style.width = w - 50;
    this.input.style.height = 24;
    this.input.style.paddingBottom = 2;
    this.input.style.marginRight = 20;
    this.input.type = "text";
    this.input.style.border = 0;
    this.input.style.outline = 0;
    this.input.style.background = 0;
    this.input.id = this.input.name = "compassInput";
    this.input.oninput = this.changeHandler.bind(this);
    var fover = this.overHandler.bind(this);
    var fout = this.outHandler.bind(this);
    this.input.onmouseover = fover;
    this.input.onmouseout = fout;
    this.label1.onmouseover = fover;
    this.label1.onmouseout = fout;
    this.label2.onmouseover = fover;
    this.label2.onmouseout = fout;
    this.button.onmouseover = this.buttonOverHandler.bind(this);
    this.button.onmouseout = this.buttonOutHandler.bind(this);
    this.opened = false;
};
canvas.app.compass.view.ComboView.prototype = Object.create(canvas.app.compass.Element.prototype);
canvas.app.compass.view.ComboView.prototype.update = function () {
    this.label1.style.display = this.label2.style.display = this.input.value == "" ? "block" : "none";
    this.resetMode = this.data || this.input.value.length > 2;
};
canvas.app.compass.view.ComboView.prototype.changeHandler = function () {
    this.data = null;
    if (this.input.value.length > 2) {
        canvas.EventManager.dispatchEvent(canvas.app.compass.Event.SEARCH, null, this.input.value);
        canvas.EventManager.dispatchEvent(canvas.app.compass.Event.SHOW_LIST);
    } else {
        canvas.EventManager.dispatchEvent(canvas.app.compass.Event.SEARCH, null, "");
        canvas.EventManager.dispatchEvent(canvas.app.compass.Event.HIDE_LIST);
    }
};
canvas.app.compass.view.ComboView.prototype.overHandler = function () {
    this.divCenter.style.backgroundPosition = this.width - 1e3 + "px -69px";
};
canvas.app.compass.view.ComboView.prototype.outHandler = function () {
    this.divCenter.style.backgroundPosition = this.width - 1e3 + "px -23px";
};
canvas.app.compass.view.ComboView.prototype.buttonOverHandler = function () {
    if (this.resetMode) {
        this.button.style.backgroundPosition = "2px -17px";
    } else {
        this.overHandler();
    }
};
canvas.app.compass.view.ComboView.prototype.buttonOutHandler = function () {
    if (this.resetMode) {
        this.button.style.backgroundPosition = "2px 0px";
    } else {
        this.outHandler();
    }
};
canvas.app.compass.view.ComboView.prototype.clickHandler = function (e) {
    if (this.resetMode) {
        this.input.value = "";
        this.changeHandler();
    } else {
        canvas.EventManager.dispatchEvent(this.opened ? canvas.app.compass.Event.HIDE_LIST : canvas.app.compass.Event.SHOW_LIST);
    }
    e.stopPropagation();
};
canvas.app.compass.view.ObjectsList = function (root, w) {
    canvas.app.compass.Element.call(this, root);
    if (w == undefined) w = 400;
    this.root.style.top = 93;
    var div = document.createElement("div");
    div.style.width = w - 16;
    div.style.height = "auto";
    div.style.maxHeight = 150;
    div.style.position = "relative";
    div.style.background = "#f8e5a8";
    div.style.border = "#e3b360 1px solid";
    div.style.borderRadius = "4px";
    div.style.boxShadow = "0px 3px 3px 1px rgba(41, 13, 5, 0.4)";
    div.style.padding = 8;
    div.style.overflow = "auto";
    this.root.appendChild(div);
    this.container = div;
};
canvas.app.compass.view.ObjectsList.prototype = Object.create(canvas.app.compass.Element.prototype);
canvas.app.compass.view.ObjectsList.prototype.update = function () {
    var model = canvas.app.compass.model;
    var item, div, i, j, len;
    while (this.container.hasChildNodes()) {
        item = this.container.removeChild(this.container.lastChild);
        item.onmouseover = null;
        item.onmouseout = null;
        item.onclick = null;
    }
    for (i = 0; i < canvas.app.compass.Const.TYPE_COUNT; i++) {
        len = model.SEARCH_DATA[i].length;
        if (len > 0) {
            div = document.createElement("div");
            div.innerText = canvas.Translator.getText(canvas.app.compass.Const.TITLES[i]);
            div.align = "left";
            div.style.padding = 2;
            div.style.fontSize = 14;
            div.style.fontWeight = "bold";
            this.container.appendChild(div);
            for (j = 0; j < len; j++) {
                item = model.SEARCH_DATA[i][j];
                div = document.createElement("div");
                div.innerText = item.name;
                div.align = "left";
                div.style.margin = 2;
                div.style.paddingLeft = 8;
                div.style.cursor = "pointer";
                div.onmouseover = this.overHandler;
                div.onmouseout = this.outHandler;
                div.onclick = this.clickHandler;
                div.id = item.id;
                div.type = i;
                this.container.appendChild(div);
            }
        }
    }
    if (!this.container.hasChildNodes()) {
        div = document.createElement("div");
        div.innerText = canvas.Translator.getText(3018);
        div.align = "left";
        div.style.margin = 2;
        div.style.paddingLeft = 8;
        this.container.appendChild(div);
    }
};
canvas.app.compass.view.ObjectsList.prototype.overHandler = function () {
    this.style.background = "#eccf93";
    this.style.color = "#b80504";
};
canvas.app.compass.view.ObjectsList.prototype.outHandler = function () {
    this.style.background = 0;
    this.style.color = null;
};
canvas.app.compass.view.ObjectsList.prototype.clickHandler = function () {
    canvas.EventManager.dispatchEvent(canvas.app.compass.Event.LIST_SELECT, null, { id: this.id, type: this.type, name: this.innerText });
};
canvas.app.compass.view.TileBackView = function (root, w, h) {
    canvas.app.compass.Element.call(this, root);
    var divLeft = document.createElement("div");
    divLeft.className = "popup-top-left";
    divLeft.style.width = w;
    divLeft.style.height = 36;
    this.root.appendChild(divLeft);
    var divRight = document.createElement("div");
    divRight.className = "popup-top-right";
    divRight.style.backgroundImage = "url('../images/popup-top-right-2.png')";
    divRight.style.height = 36;
    divLeft.appendChild(divRight);
    var divCenter = document.createElement("div");
    divCenter.className = "popup-top-center";
    divCenter.style.height = 36;
    divRight.appendChild(divCenter);
    var divHeader = document.createElement("div");
    divHeader.style.paddingTop = 5;
    divHeader.style.paddingLeft = 18;
    divHeader.style.color = "#ffffff";
    divHeader.style.fontWeight = "normal";
    divHeader.style.fontSize = 16;
    divCenter.appendChild(divHeader);
    this.field = divHeader;
    var divLeftCenter = document.createElement("div");
    divLeftCenter.className = "popup-left-center";
    divLeftCenter.style.width = w;
    divLeftCenter.style.height = h - 53;
    this.root.appendChild(divLeftCenter);
    var divRightCenter = document.createElement("div");
    divRightCenter.className = "popup-right-center";
    divRightCenter.style.height = h - 53;
    divLeftCenter.appendChild(divRightCenter);
    var divCenter = document.createElement("div");
    divCenter.className = "popup_global_content";
    divCenter.style.height = h - 53;
    divRightCenter.appendChild(divCenter);
    var divLeftBottom = document.createElement("div");
    divLeftBottom.className = "popup-left-bottom";
    divLeftBottom.style.width = w;
    divLeftBottom.style.height = 17;
    this.root.appendChild(divLeftBottom);
    var divRightBottom = document.createElement("div");
    divRightBottom.className = "popup-right-bottom";
    divRightBottom.style.height = 17;
    divLeftBottom.appendChild(divRightBottom);
    var divCenterBottom = document.createElement("div");
    divCenterBottom.className = "popup-bottom-center";
    divCenterBottom.style.height = 17;
    divRightBottom.appendChild(divCenterBottom);
    this.container = divCenter;
};
canvas.app.compass.view.TileBackView.prototype = Object.create(canvas.app.compass.Element.prototype);
canvas.app.compass.view.TileBackView.prototype.setTitle = function (title) {
    this.field.innerText = title.length > 45 ? title.substr(0, 45) + "..." : title;
};
canvas.app.compass.view.TitleBottomView = function (root, w) {
    canvas.app.compass.Element.call(this, root);
    this._root = root;
    if (w == undefined) w = 400;
    this.width = w;
    this.root.style.top = 225;
    this.field = document.createElement("div");
    this.root.appendChild(this.field);
    this.field.style.color = "#6b382d";
    this.field.style.fontWeight = "bold";
    this.field.style.fontSize = 14;
    this.field.style.width = w;
    this.field.style.marginRight = 10;
    this.field.style.textAlign = "left";
    this.link = document.createElement("span");
    this.field.appendChild(this.link);
    this.link.style.color = "#6b382d";
    this.link.style.borderBottom = "1px dashed";
    this.link.style.fontSize = 14;
    this.link.onmouseover = this.overHandler.bind(this);
    this.link.onmouseout = this.outHandler.bind(this);
    this.link.onmousemove = this.moveHandler.bind(this);
    this.alt = document.createElement("div");
    this.alt.style.maxWidth = w;
    this.alt.style.position = "absolute";
    this.alt.style.textAlign = "left";
    this.alt.style.fontWeight = "normal";
    this.alt.style.background = "#f8e5a8";
    this.alt.style.border = "#e3b360 1px solid";
    this.alt.style.borderRadius = "4px";
    this.alt.style.boxShadow = "0px 3px 3px 1px rgba(41, 13, 5, 0.4)";
    this.alt.style.padding = 8;
    this.alt.style.lineHeight = 2;
    this.alt.style.top = 20;
    this.outHandler();
};
canvas.app.compass.view.TitleBottomView.prototype = Object.create(canvas.app.compass.Element.prototype);
canvas.app.compass.view.TitleBottomView.prototype.setTitle = function (count, ways) {
    var model = canvas.app.compass.model;
    this.field.innerText = canvas.Translator.getText(3015) + " ";
    this.field.appendChild(this.link);
    this.field.appendChild(this.alt);
    this.link.innerText = model.getCorrectInfoText(count);
    if (ways) {
        var len = ways.length;
        var str = "";
        for (var i = 0; i < len; i++) {
            if (str) str += " " + String.fromCharCode(8594) + " ";
            str += ways[i];
        }
        this.alt.innerText = str;
    } else {
        this.alt.innerText = "";
    }
};
canvas.app.compass.view.TitleBottomView.prototype.setNotFoundTitle = function (title) {
    this.field.innerText = title ? title : canvas.Translator.getText(3019);
    this.link.innerText = "";
};
canvas.app.compass.view.TitleBottomView.prototype.overHandler = function (e) {
    this.alt.style.display = "block";
    this.alt.style.minWidth = this.alt.clientHeight > 50 ? this.width : 0;
    this.moveHandler(e);
    this._root.appendChild(this.alt);
};
canvas.app.compass.view.TitleBottomView.prototype.outHandler = function () {
    this.alt.style.display = "none";
};
canvas.app.compass.view.TitleBottomView.prototype.moveHandler = function (e) {
    var diff, target;
    target = e.layerX + 10;
    diff = target + this.alt.clientWidth - window.innerWidth + 5;
    if (diff >= 0) target -= diff;
    if (target <= 0) target = 5;
    this.alt.style.left = target;
    target = 225 + e.layerY + 20;
    diff = target + this.alt.clientHeight - window.innerHeight + 5;
    if (diff >= 0) target = target - this.alt.clientHeight - 30;
    if (target <= 0) target = 5;
    this.alt.style.top = target;
};
canvas.app.compass.view.TitleView = function (root, title) {
    canvas.app.compass.Element.call(this, root);
    this.root.style.color = "#6b382d";
    this.root.style.fontWeight = "bold";
    this.root.style.fontSize = 14;
    this.root.style.top = 40;
    this.root.innerText = title;
};
canvas.app.compass.view.TitleView.prototype = Object.create(canvas.app.compass.Element.prototype);
canvas.app.magic.Const = { TYPE_MAGIC: "magic", TYPE_AURA: "aura", TYPE_SHADOW: "shadow" };
canvas.app.magic.Event = { ENTER_FRAME: "Magic.ENTER_FRAME", HINT_ADD: "Magic.HINT_ADD", HINT_REMOVE: "Magic.HINT_REMOVE", DESELECT_ALL: "Magic.DESELECT_ALL" };
canvas.app.magic.Main = function (model, hintManager) {
    canvas.px.Container.call(this);
    this.model = model;
    this.hintManager = hintManager;
    this.hintContainer = new canvas.px.Container();
    this.hintContainer.interactive = true;
    this.hintManager.init(this.hintContainer, this.model.width, this.model.height);
    canvas.EventManager.addEventListener(canvas.app.magic.Event.HINT_ADD, null, this.handlerHintAdd, this);
    canvas.EventManager.addEventListener(canvas.app.magic.Event.HINT_REMOVE, null, this.handlerHintRemove, this);
    switch (this.model.type) {
        case canvas.app.magic.Const.TYPE_AURA:
            this.view = new canvas.app.magic.view.ViewAura();
            break;
        case canvas.app.magic.Const.TYPE_SHADOW:
            this.view = new canvas.app.magic.view.ViewShadow();
            break;
        default:
            this.view = new canvas.app.magic.view.ViewMagic();
    }
    this.addChild(this.view);
    this.addChild(this.hintContainer);
};
canvas.app.magic.Main.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.magic.Main.prototype.handlerHintAdd = function (e) {
    this.hintManager.add(e.params.target, e.params.params);
};
canvas.app.magic.Main.prototype.handlerHintRemove = function (e) {
    this.hintManager.remove(e.params.target);
};
canvas.app.magic.Model = function (par) {
    this.picPath = par.PicPath ? par.PicPath : "images/data/artifacts/";
    this.parse(par.EffList ? par.EffList : "");
    this.slotsTotal = par.slotsTotal ? parseInt(par.slotsTotal) : 8;
};
canvas.app.magic.Model.prototype.parse = function (str) {
    this.items = [];
    var a = str.split(",");
    var b;
    var len = a.length;
    var item;
    for (var i = 0; i < len; i++) {
        b = a[i].split(":");
        item = {};
        item.slot = parseInt(b[0]);
        item.id = b[1];
        item.title = b[2];
        item.level = parseInt(b[3]);
        item.mp = parseInt(b[4]);
        item.picture = b[5];
        this.items[item.slot] = item;
    }
};
canvas.app.magic.View = function () {
    canvas.px.Container.call(this);
    this.createBack();
    this.createSlots();
    this.createFront();
    var len = this.slots.length;
    for (var i = 0; i < len; i++) this.addChild(this.slots[i].numImage);
    canvas.EventManager.addEventListener(canvas.app.magic.Event.DESELECT_ALL, null, this.deselectAllHandler, this);
};
canvas.app.magic.View.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.magic.View.prototype.createBack = function () {
    this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "back")));
};
canvas.app.magic.View.prototype.createFront = function () {
    var sprite = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "front_slots")));
    sprite.position.set(32, 7);
    sprite = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "front_numbers")));
    sprite.position.set(62, 37);
};
canvas.app.magic.View.prototype.createSlots = function () {
    var model = canvas.app.magic.modelMagic;
    this.slots = [];
    var pos = [
        [90, 8],
        [125, 19],
        [146, 50],
        [147, 86],
        [125, 115],
        [90, 127],
        [55, 115],
        [33, 86],
        [33, 50],
        [55, 20],
    ];
    var posNumbers = [
        [101, 44],
        [124, 52],
        [136, 72],
        [136, 95],
        [123, 113],
        [101, 119],
        [78, 113],
        [66, 93],
        [65, 70],
        [78, 52],
    ];
    var slot;
    var image;
    for (var i = 0; i < 10; i++) {
        image = new canvas.px.Sprite(canvas.px.TextureEmpty);
        image.position.set(posNumbers[i][0], posNumbers[i][1]);
        slot = new canvas.app.magic.view.slots.SlotMagic(i, image);
        slot.position.set(pos[i][0], pos[i][1]);
        this.addChild(slot);
        this.slots.push(slot);
        slot.data = model.items[i + 1];
    }
};
canvas.app.magic.View.prototype.deselectAllHandler = function () {
    var len = this.slots.length;
    for (var i = 0; i < len; i++) {
        this.slots[i].selected = false;
    }
};
canvas.app.magic.view.SlotView = function (index, numImage, textureName) {
    this._data = null;
    Object.defineProperty(this, "data", {
        get: function () {
            return this._data;
        },
        set: function (value) {
            this._data = value;
            this.update();
        },
    });
    this._selected = false;
    Object.defineProperty(this, "selected", {
        get: function () {
            return this._selected;
        },
        set: function (value) {
            this._selected = value;
            if (value) {
                this.addChild(this.selector);
            } else {
                this.removeIfExist(this.selector);
            }
        },
    });
    canvas.ui.SimpleButton.call(this, canvas.ResourceLoader.getImage("ui", textureName));
    this.index = index;
    this.numImage = numImage;
    this.msk = this.createMask();
    this.sprite.addChild(this.msk);
    this.image = this.createImage();
    this.sprite.addChild(this.image);
    this.image.mask = this.msk;
    this.selector = this.createSelector();
    this.hint = new canvas.app.view.PxHint();
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this, this.clickHandler, this);
};
canvas.app.magic.view.SlotView.prototype = Object.create(canvas.ui.SimpleButton.prototype);
canvas.app.magic.view.SlotView.prototype.createSelector = function () {
    return new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "slot_selector"));
};
canvas.app.magic.view.SlotView.prototype.update = function () {
    var model = canvas.app.magic.model;
    if (this.data) {
        this.selected = false;
        this.hint.text = this.data.title + "\n" + canvas.Translator.getText(49) + " " + this.data.mp;
        canvas.EventManager.dispatchEvent(canvas.app.magic.Event.HINT_ADD, null, { target: this, params: new canvas.utils.HintParams(this.hint) });
        this.image.setImage(model.picPath + this.data.picture);
        this.numImage.texture = canvas.ResourceLoader.getImage("ui", "num_" + this.data.level);
    } else {
        canvas.EventManager.dispatchEvent(canvas.app.magic.Event.HINT_REMOVE, null, { target: this });
        this.image.clear();
        this.numImage.texture = canvas.px.TextureEmpty;
    }
};
canvas.app.magic.view.SlotView.prototype.clickHandler = function () {
    if (this.data) {
        spell_take_off(this.data.id);
    } else {
        canvas.EventManager.dispatchEvent(canvas.app.magic.Event.DESELECT_ALL);
        this.selected = true;
        spell_slot(this.index + 1);
    }
};
canvas.app.magic.view.SlotView.prototype.createMask = function () {
    var shape = new canvas.px.Graphics();
    shape.beginFill(0, 1);
    shape.drawCircle(19, 19, 18);
    shape.endFill();
    this.sprite.hitArea = new canvas.px.Circle(19, 19, 18);
    return shape;
};
canvas.app.magic.view.SlotView.prototype.createImage = function () {
    var image = new canvas.ui.Image();
    image.scale.set(0.63, 0.63);
    return image;
};
canvas.app.magic.view.ViewAura = function () {
    canvas.app.magic.View.call(this);
};
canvas.app.magic.view.ViewAura.prototype = Object.create(canvas.app.magic.View.prototype);
canvas.app.magic.view.ViewAura.prototype.createFront = function () {
    var sprite = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "aura_front_slots")));
    sprite.position.set(46, 22);
    sprite = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "aura_front_numbers")));
    sprite.position.set(75, 53);
};
canvas.app.magic.view.ViewAura.prototype.createSlots = function () {
    var model = canvas.app.magic.modelAura;
    this.slots = [];
    var pos = [
        [122, 24],
        [122, 98],
        [48, 98],
        [48, 24],
    ];
    var posNumbers = [
        [123, 60],
        [123, 103],
        [78, 103],
        [78, 60],
    ];
    var slot;
    var image;
    for (var i = 0; i < 4; i++) {
        image = new canvas.px.Sprite(canvas.px.TextureEmpty);
        image.position.set(posNumbers[i][0], posNumbers[i][1]);
        slot = new canvas.app.magic.view.slots.SlotAura(i, image);
        slot.position.set(pos[i][0], pos[i][1]);
        this.addChild(slot);
        this.slots.push(slot);
        slot.data = model.items[i + 1];
    }
};
canvas.app.magic.view.ViewMagic = function () {
    canvas.app.magic.View.call(this);
};
canvas.app.magic.view.ViewMagic.prototype = Object.create(canvas.app.magic.View.prototype);
canvas.app.magic.view.ViewShadow = function () {
    canvas.app.magic.View.call(this);
};
canvas.app.magic.view.ViewShadow.prototype = Object.create(canvas.app.magic.View.prototype);
canvas.app.magic.view.ViewShadow.prototype.createBack = function () {
    this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "shadow_back")));
};
canvas.app.magic.view.ViewShadow.prototype.createFront = function () {
    var sprite = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "shadow_top")));
    sprite.position.set(50, 50);
};
canvas.app.magic.view.ViewShadow.prototype.createSlots = function () {
    var model = canvas.app.magic.modelShadow;
    this.slots = [];
    var pos = [
        [79, 23],
        [119, 40],
        [136, 80],
        [119, 119],
        [79, 136],
        [40, 119],
        [23, 80],
        [40, 40],
    ];
    var posNumbers = [
        [85, 50],
        [108, 59],
        [119, 85],
        [108, 110],
        [85, 120],
        [60, 110],
        [50, 85],
        [60, 59],
    ];
    var slot;
    var image;
    for (var i = 0; i < 8; i++) {
        image = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "shadow_disabled_slot"));
        image.position.set(posNumbers[i][0], posNumbers[i][1]);
        slot = new canvas.app.magic.view.slots.SlotShadow(i, image);
        slot.position.set(pos[i][0], pos[i][1]);
        this.addChild(slot);
        this.slots.push(slot);
        slot.data = model.items[i + 1];
    }
};
canvas.app.magic.view.slots.SlotAura = function (index, numImage) {
    canvas.app.magic.view.SlotView.call(this, index, numImage, "aura_slot");
};
canvas.app.magic.view.slots.SlotAura.prototype = Object.create(canvas.app.magic.view.SlotView.prototype);
canvas.app.magic.view.slots.SlotAura.prototype.createSelector = function () {
    return new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "aura_slot_selector"));
};
canvas.app.magic.view.slots.SlotAura.prototype.createMask = function () {
    var shape = new canvas.px.Graphics();
    shape.beginFill(16777215, 1);
    shape.drawCircle(26, 26, 25);
    shape.endFill();
    this.sprite.hitArea = new canvas.px.Circle(26, 26, 25);
    return shape;
};
canvas.app.magic.view.slots.SlotAura.prototype.createImage = function () {
    var image = new canvas.ui.Image();
    image.scale.set(0.8, 0.8);
    return image;
};
canvas.app.magic.view.slots.SlotMagic = function (index, numImage) {
    canvas.app.magic.view.SlotView.call(this, index, numImage, "slot");
};
canvas.app.magic.view.slots.SlotMagic.prototype = Object.create(canvas.app.magic.view.SlotView.prototype);
canvas.app.magic.view.slots.SlotShadow = function (index, numImage) {
    canvas.app.magic.view.SlotView.call(this, index, numImage, "shadow_circle");
    this.lockImage = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "shadow_lock"));
    this.lockImage.position.set(-3, -2);
};
canvas.app.magic.view.slots.SlotShadow.prototype = Object.create(canvas.app.magic.view.SlotView.prototype);
canvas.app.magic.view.slots.SlotShadow.prototype.update = function () {
    var model = canvas.app.magic.modelShadow;
    if (this.data) {
        this.selected = false;
        this.hint.text = this.data.title + "\n" + canvas.Translator.getText(49) + " " + this.data.mp;
        canvas.EventManager.dispatchEvent(canvas.app.magic.Event.HINT_ADD, null, { target: this, params: new canvas.utils.HintParams(this.hint) });
        this.image.setImage(model.picPath + this.data.picture);
        this.numImage.texture = canvas.px.TextureEmpty;
    } else {
        canvas.EventManager.dispatchEvent(canvas.app.magic.Event.HINT_REMOVE, null, { target: this });
        this.image.clear();
        if (this.index >= model.slotsTotal) {
            this.numImage.texture = canvas.ResourceLoader.getImage("ui", "shadow_disabled_slot");
            this.addChild(this.lockImage);
            this.interactiveChildren = false;
        } else {
            this.numImage.texture = canvas.px.TextureEmpty;
            this.interactiveChildren = true;
            this.removeIfExist(this.lockImage);
        }
    }
};
canvas.app.birthday.Const = { configUrl: "entry_point.php?object=friend&json_mode_on=1&action=birthday_conf" };
canvas.app.birthday.Event = { ENTER_FRAME: "Birthday.ENTER_FRAME", GIFT_USER: "Birthday.GIFT_USER", GIFT_GIFT: "Birthday.GIFT_GIFT", UPDATE: "Birthday.UPDATE" };
canvas.app.birthday.Main = function (model) {
    canvas.px.Container.call(this);
    this.model = model;
    this.windowsManager = new canvas.utils.WindowsManager();
    this.view = new canvas.app.birthday.View();
    this.addChild(this.view);
    this.windowsContainer = new canvas.px.Container();
    this.addChild(this.windowsContainer);
    this.windowsManager.init(this.windowsContainer, this.model.width, this.model.height, this.view);
    canvas.EventManager.addEventListener(canvas.app.birthday.Event.GIFT_USER, null, this.giftUserHandler, this);
    canvas.EventManager.addEventListener(canvas.app.birthday.Event.GIFT_GIFT, null, this.giftHandler, this);
    canvas.EventManager.addEventListener(canvas.app.birthday.Event.UPDATE, null, this.update, this);
    this.model.init();
};
canvas.app.birthday.Main.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.birthday.Main.prototype.giftUserHandler = function (event) {
    if (canvas.ResourceLoader.inProgress) return;
    this.model.selectedUser = event.params.id;
    canvas.ResourceLoader.remove("birthday_conf");
    canvas.EventManager.addEventListener(canvas.ResourceLoader.EVENT_COMPLETE, null, this.completeHandler, this);
    canvas.ResourceLoader.add([["birthday_conf", canvas.app.birthday.Const.configUrl]]);
};
canvas.app.birthday.Main.prototype.giftHandler = function (event) {
    this.model.gift(event.params.id);
    canvas.utils.WindowsManager.instance.closeWindow(this.view.itemsWindow);
};
canvas.app.birthday.Main.prototype.completeHandler = function () {
    canvas.EventManager.removeEventListener(canvas.ResourceLoader.EVENT_COMPLETE, null, this.completeHandler, this);
    this.model.init();
};
canvas.app.birthday.Main.prototype.update = function () {
    this.view.update();
    if (this.model.selectedUser) canvas.utils.WindowsManager.instance.openWindow(this.view.itemsWindow);
};
canvas.app.birthday.Model = function (par) {
    this.selectedUser = par.userId && parseInt(par.userId) ? par.userId : "";
};
canvas.app.birthday.Model.prototype.init = function () {
    var json = JSON.parse(canvas.ResourceLoader.get("birthday_conf").data)["friend|birthday_conf"];
    this.users = new Array();
    var userData, obj, i, itemData;
    var len = json.users.length;
    var i;
    for (i = 0; i < len; i++) {
        obj = json.users[i];
        userData = new Object();
        userData.id = obj.id;
        userData.nick = obj.nick;
        userData.parts = obj.parts;
        userData.background = obj.background;
        userData.gender = parseInt(obj.gender) == 2 ? canvas.Const.GENDER.FEMALE : canvas.Const.GENDER.MALE;
        userData.kind = parseInt(obj.kind);
        userData.sk = 1;
        this.users.push(userData);
    }
    this.items = new Array();
    var a = new Array();
    len = json.items.length;
    for (i = 0; i < len; i++) {
        obj = json.items[i];
        itemData = new Object();
        itemData.id = obj.id;
        itemData.artikul = obj.artikul_id;
        this.items.push(itemData);
        a.push(obj.artikul_id);
    }
    canvas.EventManager.addEventListener(canvas.Event.ARTIKULS_LOADED, null, this.artikulsLoaded, this);
    if (canvas.data.Artikuls.get(a)) {
        this.artikulsLoaded();
    }
};
canvas.app.birthday.Model.prototype.artikulsLoaded = function () {
    canvas.EventManager.removeEventListener(canvas.Event.ARTIKULS_LOADED, null, this.artikulsLoaded, this);
    var len = this.items.length;
    var obj;
    for (var i = 0; i < len; i++) {
        obj = canvas.data.Artikuls.get(this.items[i].artikul);
        if (obj) {
            this.items[i].picture = obj.picture;
        }
    }
    canvas.EventManager.dispatchEvent(canvas.app.birthday.Event.UPDATE);
};
canvas.app.birthday.Model.prototype.closeBirthdayWindow = function () {
    closeBirthdayWindow(this.selectedUser);
};
canvas.app.birthday.Model.prototype.openPremiumStore = function (mode) {
    if (mode == undefined) mode = "gifts";
    openPremiumStore(mode);
};
canvas.app.birthday.Model.prototype.gift = function (artifactID) {
    var userData;
    var nick;
    var len = this.users.length;
    for (var i = 0; i < len; i++) {
        userData = this.users[i];
        if (userData.id == this.selectedUser) {
            nick = userData.nick;
        }
    }
    showMsg("action_form.php?artifact_id=" + artifactID + "&in[nick]=" + nick);
};
canvas.app.birthday.View = function () {
    canvas.px.Container.call(this);
    this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("birthday", "window_back")));
    var sprite = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("locale", "birthday")));
    sprite.position.set(115, 70);
    this.headerField = this.addChild(new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_12, canvas.Const.FONT_TAHOMA_12_BOLD, 7158283, 300, 50, "center"));
    this.headerField.position.set(210, 222);
    this.list = this.addChild(new canvas.ui.List(canvas.ui.ListType.HORIZONTAL, 1));
    this.list.y = 260;
    this.list.setSize(420, 165);
    var minus = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("birthday", "arrow"));
    var plus = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("birthday", "arrow"));
    plus.scale.x = -1;
    this.scroll = new canvas.ui.Scroll(canvas.ui.ScrollType.HORIZONTAL, minus, plus);
    this.addChild(this.scroll);
    this.scroll.setSize(425, 50);
    this.scroll.position.set(135, 313);
    canvas.EventManager.addEventListener(canvas.ui.ScrollEvent.EVENT_SCROLL, this.scroll, this.scrollHandler, this);
    this.listTargetX = 0;
    this.closeButton = this.addChild(
        new canvas.ui.Button(canvas.ResourceLoader.getImage("birthday", "main_window_close_base"), canvas.ResourceLoader.getImage("birthday", "main_window_close_over"), canvas.ResourceLoader.getImage("birthday", "main_window_close_down"))
    );
    this.closeButton.position.set(582, 142);
    this.itemsWindow = new canvas.app.birthday.view.ItemsWindow();
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.closeButton, this.closeHandler, this);
};
canvas.app.birthday.View.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.birthday.View.prototype.update = function () {
    var conf = canvas.app.birthday.model;
    var len = conf.users.length;
    this.headerField.text = canvas.Translator.getText(len > 1 ? 1509 : 1515, [len]);
    this.list.clear(false);
    for (var i = 0; i < len; i++) {
        this.list.add(new canvas.app.birthday.view.UserListRenderer(conf.users[i], false));
    }
    this.list.update();
    if (len == 1) this.list.x = 294;
    else if (len == 2) this.list.x = 222;
    else this.list.x = 151;
    this.scroll.max = len - 3;
    this.scrollHandler();
};
canvas.app.birthday.View.prototype.scrollHandler = function () {
    if (this.scroll.max == 0) {
        this.scroll.minusView.visible = false;
        this.scroll.plusView.visible = false;
    } else if (this.scroll.current == 0) {
        this.scroll.minusView.visible = false;
        this.scroll.plusView.visible = true;
    } else if (this.scroll.current == this.scroll.max) {
        this.scroll.minusView.visible = true;
        this.scroll.plusView.visible = false;
    } else {
        this.scroll.minusView.visible = true;
        this.scroll.plusView.visible = true;
    }
    this.listTargetX = -this.scroll.current * 140;
    canvas.EventManager.addEventListener(canvas.app.birthday.Event.ENTER_FRAME, null, this.frameHandler, this);
};
canvas.app.birthday.View.prototype.frameHandler = function () {
    var target;
    if (this.listTargetX > this.list.container.x) {
        target = this.list.container.x + 20;
        this.list.container.x = target > this.listTargetX ? this.listTargetX : target;
    } else if (this.listTargetX < this.list.container.x) {
        target = this.list.container.x - 20;
        this.list.container.x = target < this.listTargetX ? this.listTargetX : target;
    } else {
        canvas.EventManager.removeEventListener(canvas.app.birthday.Event.ENTER_FRAME, null, this.frameHandler, this);
    }
};
canvas.app.birthday.View.prototype.closeHandler = function () {
    canvas.app.birthday.model.closeBirthdayWindow();
};
canvas.app.birthday.view.ItemListRenderer = function (data) {
    this.image = new canvas.ui.Image();
    canvas.ui.ListRenderer.call(this, data, 67, 67);
    this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("birthday", "item_back")));
    this.addChild(this.image);
    this.image.position.set(6, 5);
    this.buttonMode = true;
    this.hint = new canvas.px.Sprite(canvas.ResourceLoader.getImage("birthday", "item_plane"));
    this.hint.position.set(6, 29);
    var field = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_9, 6507828, 60, 16, "center");
    this.hint.addChild(field);
    field.text = canvas.Translator.getText(115).toLowerCase();
    this.data = data;
};
canvas.app.birthday.view.ItemListRenderer.prototype = Object.create(canvas.ui.ListRenderer.prototype);
canvas.app.birthday.view.ItemListRenderer.prototype.update = function () {
    if (this.data) {
        this.image.setImage(this.data.picture);
    } else {
        this.image.clear();
    }
};
canvas.app.birthday.view.ItemListRenderer.prototype.overHandler = function () {
    if (this.data) {
        this.addChild(this.hint);
        _top().artifactAltSimple(this.data.artikul, 2);
    }
};
canvas.app.birthday.view.ItemListRenderer.prototype.outHandler = function () {
    this.removeIfExist(this.hint);
    if (this.data) {
        _top().artifactAltSimple(this.data.artikul, 0);
    }
};
canvas.app.birthday.view.ItemListRenderer.prototype.clickHandler = function () {
    this.outHandler();
    canvas.EventManager.dispatchEvent(canvas.app.birthday.Event.GIFT_GIFT, null, this.data);
};
canvas.app.birthday.view.ItemListRenderer.prototype.destroy = function () {
    canvas.ui.ListRenderer.prototype.destroy.call(this);
};
canvas.app.birthday.view.ItemsWindow = function () {
    canvas.app.manor.view.WindowManorBase.call(this, 360, 305, canvas.Translator.getText(1511));
    this.dragAvailable = false;
    this.list = this.addChild(new canvas.ui.List(canvas.ui.ListType.VERTICAL, 4));
    this.list.position.set(25, 35);
    this.list.setSize(290, 215);
    this.list.scrollPadding = 20;
    var minus = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "scroll_vertical_arrow"));
    var plus = new canvas.px.Container();
    var drag = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "scroll_vertical_drag"), [0, 7, 0, 5]);
    var btn = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "scroll_vertical_arrow"));
    btn.scale.y = -1;
    btn.position.y = -btn.height + 2;
    plus.addChild(btn);
    drag.setSize(21, 40);
    var scroll = new canvas.ui.Scroll(canvas.ui.ScrollType.VERTICAL, minus, plus, new canvas.px.Mask(21, 100), drag, this.list.container, true, true);
    scroll.padding = 13;
    scroll.step = 30;
    scroll.setSize(16);
    this.list.scroll = scroll;
    this.buyButton = this.addChild(new canvas.app.view.MainButton());
    this.buyButton.setSize(180);
    this.buyButton.setTitle(canvas.Translator.getText(1512));
    this.buyButton.position.set(92, 249);
};
canvas.app.birthday.view.ItemsWindow.prototype = Object.create(canvas.app.manor.view.WindowManorBase.prototype);
canvas.app.birthday.view.ItemsWindow.prototype.update = function () {
    var model = canvas.app.birthday.model;
    this.list.clear(false);
    var len = model.items.length;
    var renderer;
    for (var i = 0; i < len; i++) {
        renderer = new canvas.app.birthday.view.ItemListRenderer(model.items[i]);
        this.list.add(renderer);
    }
    this.list.update();
};
canvas.app.birthday.view.ItemsWindow.prototype.clickHandler = function (mouseData) {
    var model = canvas.app.birthday.model;
    if (canvas.Functions.findParent(this.buyButton, mouseData.target)) {
        model.closeBirthdayWindow();
        model.openPremiumStore();
        return;
    }
    canvas.px.Window.prototype.clickHandler.call(this, mouseData);
};
canvas.app.birthday.view.ItemsWindow.prototype.hide = function () {
    canvas.app.manor.view.WindowManorBase.prototype.hide.call(this);
    canvas.app.birthday.model.selectedUser = "";
};
canvas.app.birthday.view.UserListRenderer = function (data) {
    canvas.ui.ListRenderer.call(this, data, 135, 165);
    this.container = this.addChild(new canvas.px.Container());
    this.container.x = 15;
    this.back = this.container.addChild(new canvas.px.Sprite(canvas.px.TextureEmpty));
    this.back.y = 29;
    var sprite = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("birthday", "user_back")));
    sprite.position.set(15, 25);
    this.fieldNick = this.container.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_14_BOLD, 7092268, 100, 20, "center"));
    this.fieldNick.x = 4;
    this.button = this.container.addChild(new canvas.app.view.MainButton());
    this.button.setSize(136);
    this.button.setTitle(canvas.Translator.getText(1510));
    this.button.position.set(-15, 130);
    this.msk = new canvas.px.Graphics();
    this.msk.beginFill(0, 1);
    this.msk.drawCircle(53, 79, 34);
    this.msk.endFill();
    this.container.addChild(this.msk);
    this.update();
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.button, this.clickHandler, this);
};
canvas.app.birthday.view.UserListRenderer.prototype = Object.create(canvas.ui.ListRenderer.prototype);
canvas.app.birthday.view.UserListRenderer.prototype.update = function () {
    if (this.data && this.fieldNick) {
        this.back.texture = canvas.ResourceLoader.getImage("birthday", "back_" + (this.data.gender == canvas.Const.KIND.HUM ? "h" : "m"));
        this.fieldNick.text = this.data.nick;
        if (this.fieldNick.height > this.fieldNick._height) {
            var i = this.fieldNick.text.length - 1;
            while (this.fieldNick.height > this.fieldNick._height) {
                this.fieldNick.text = this.fieldNick.text.substr(0, i--) + "...";
            }
        }
        if (this.player) {
            this.player.destroy();
        }
        this.player = new canvas.animation.SkeletonAvatar(this.data.gender, this.data.parts);
        this.player.frameEvent = canvas.app.birthday.Event.ENTER_FRAME;
        this.container.addChild(this.player);
        this.player.position.set(-41, 50);
        this.player.mask = this.msk;
    }
};
canvas.app.birthday.view.UserListRenderer.prototype.clickHandler = function () {
    canvas.EventManager.dispatchEvent(canvas.app.birthday.Event.GIFT_USER, null, this.data);
};
canvas.app.birthday.view.UserListRenderer.prototype.destroy = function () {
    canvas.ui.ListRenderer.prototype.destroy.call(this);
    canvas.EventManager.removeEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.button, this.clickHandler, this);
    if (this.player) {
        this.player.destroy();
    }
};
canvas.app.cube.Const = { NUM_SLOTS: 9 };
canvas.app.cube.Event = { ENTER_FRAME: "Cube.ENTER_FRAME", HINT_ADD: "Cube.HINT_ADD", HINT_REMOVE: "Cube.HINT_REMOVE" };
canvas.app.cube.Main = function (model) {
    canvas.px.Container.call(this);
    this.model = model;
    this.view = new canvas.app.cube.View();
    this.addChild(this.view);
    this.hintManager = new canvas.utils.HintManager();
    this.hintContainer = this.addChild(new canvas.px.Container());
    this.hintContainer.interactive = true;
    this.hintManager.init(this.hintContainer, this.model.width, this.model.height);
    canvas.EventManager.addEventListener(canvas.app.cube.Event.HINT_ADD, null, this.handlerHintAdd, this);
    canvas.EventManager.addEventListener(canvas.app.cube.Event.HINT_REMOVE, null, this.handlerHintRemove, this);
    this.update();
};
canvas.app.cube.Main.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.cube.Main.prototype.handlerHintAdd = function (e) {
    this.hintManager.add(e.params.target, e.params.params);
};
canvas.app.cube.Main.prototype.handlerHintRemove = function (e) {
    this.hintManager.remove(e.params.target);
};
canvas.app.cube.Main.prototype.update = function () {
    this.view.update();
};
canvas.app.cube.Main.prototype.swfObject = function (data) {
    var str;
    var obj;
    if (data) {
        for (str in data) {
            obj = data[str];
            if (!this.model.testStatus(obj)) continue;
            switch (str) {
                case "cube|puton":
                    this.model.putOn(obj.cube_artifact);
                    this.update();
                    break;
                case "cube|putoff":
                    this.model.putOff(obj.cube_artifact);
                    this.update();
                    break;
                case "cube|craft":
                    this.model.craft(obj.result_artifact);
                    this.view.showAnimation();
                    break;
                case "cube|use_recipe":
                    this.model.useRecipe(obj.cube_artifacts);
                    this.update();
                    break;
            }
        }
    }
};
canvas.app.cube.Model = function (par) {
    this.parse(par.artifacts);
    this.resultArtifact = null;
};
canvas.app.cube.Model.prototype.parse = function (artifacts) {
    var a, b, len;
    this.items = new Array();
    if (artifacts) {
        a = artifacts.split(",");
        len = a.length;
        for (var i = 0; i < len; i++) {
            b = a[i].split(":");
            this.items.push(new canvas.data.cube.ItemData(b[0], b[2], b[1], b[3]));
        }
    }
};
canvas.app.cube.Model.prototype.putOn = function (data) {
    this.clearResult();
    var item, len;
    len = this.items.length;
    for (var i = 0; i < len; i++) {
        item = this.items[i];
        if (item.id == data.id) {
            item.count = data.cnt;
            return;
        }
    }
    this.items.push(new canvas.data.cube.ItemData(data.id, data.picture, data.title, data.cnt));
};
canvas.app.cube.Model.prototype.putOff = function (id) {
    var item, len;
    len = this.items.length;
    for (var i = 0; i < len; i++) {
        item = this.items[i];
        if (item && item.id == id) {
            this.items.splice(i, 1);
            return;
        }
    }
    this.clearResult();
};
canvas.app.cube.Model.prototype.craft = function (data) {
    this.resultArtifact = new canvas.data.cube.ItemData(data.id, data.picture, data.title, data.cnt);
    this.items = new Array();
    this.items[canvas.app.cube.Const.NUM_SLOTS - 1] = this.resultArtifact;
};
canvas.app.cube.Model.prototype.useRecipe = function (data) {
    this.clearResult(true);
    var obj, i;
    var len = data.length;
    for (i = 0; i < len; i++) {
        obj = data[i];
        this.items.push(new canvas.data.cube.ItemData(obj.id, obj.picture, obj.title, obj.cnt));
    }
};
canvas.app.cube.Model.prototype.clearResult = function (force) {
    if (force == undefined) force = false;
    if (this.resultArtifact != null || force) {
        this.resultArtifact = null;
        this.items = new Array();
    }
};
canvas.app.cube.Model.prototype.testStatus = function (obj) {
    if (obj && obj.hasOwnProperty("status") && obj.status != 100 && obj.error != undefined) return false;
    return true;
};
canvas.app.cube.View = function () {
    canvas.px.Container.call(this);
    this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "back")));
    this.transformButton = this.addChild(new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "button_back")));
    this.transformButton.position.set(19, 258);
    var sprite = this.transformButton.sprite.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("locale", "cube")));
    sprite.position.set(Math.round((220 - sprite.width) * 0.5), Math.round((36 - sprite.height) * 0.5));
    this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "front")));
    this.items = [];
    this.container = this.addChild(new canvas.px.Container());
    var item;
    var positions = [
        [14, 13],
        [93, 13],
        [173, 13],
        [173, 99],
        [173, 185],
        [93, 185],
        [14, 185],
        [14, 99],
        [94, 99],
    ];
    var model = canvas.app.cube.model;
    for (var i = 0; i < canvas.app.cube.Const.NUM_SLOTS; i++) {
        item = this.container.addChild(new canvas.app.cube.view.ItemRenderer(i, model.items[i]));
        this.items.push(item);
        item.position.set(positions[i][0], positions[i][1]);
    }
    this.container.setChildIndex(this.items[canvas.app.cube.Const.NUM_SLOTS - 1], 0);
    this.anim = new canvas.px.MovieClip(canvas.Config.effectsPath + "cube");
    this.anim.stop();
    this.anim.frameEvent = canvas.app.cube.Event.ENTER_FRAME;
    this.anim.position.set(0, 5);
    canvas.EventManager.addEventListener(canvas.px.MovieClipEvent.EVENT_UPDATE, this.anim, this.frameHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.transformButton, this.clickHandler, this);
};
canvas.app.cube.View.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.cube.View.prototype.update = function () {
    var model = canvas.app.cube.model;
    var enable = false;
    for (var i = 0; i < canvas.app.cube.Const.NUM_SLOTS; i++) {
        this.items[i].data = model.items[i];
        if (!enable && this.items[i].data && i < canvas.app.cube.Const.NUM_SLOTS - 1) {
            enable = true;
        }
    }
    this.transformButton.enabled = enable;
};
canvas.app.cube.View.prototype.frameHandler = function () {
    if (this.anim.currentFrame == 22) {
        this.update();
        this.transformButton.enabled = false;
    } else if (this.anim.currentFrame == 40) {
        this.removeIfExist(this.anim);
        this.interactiveChildren = true;
        this.update();
    }
};
canvas.app.cube.View.prototype.showAnimation = function () {
    this.transformButton.enabled = false;
    this.addChild(this.anim);
    this.anim.gotoAndPlay(1);
    this.interactiveChildren = false;
};
canvas.app.cube.View.prototype.clickHandler = function () {
    craft_cube_artifacts();
};
canvas.app.cube.view.ItemRenderer = function (index, data) {
    this.index = index;
    this.image = new canvas.ui.Image();
    this.front = this.createFront();
    this.countContainer = new canvas.px.Mask(34, 16, 7230284, 1);
    this.countContainer.position.set(6, 46);
    this.countField = this.countContainer.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_12, 16177574, 34, 20, "center"));
    this.countField.y = 1;
    this.hintView = new canvas.app.view.MappingHint();
    canvas.ui.ListRenderer.call(this, data, 67, 67);
    this.addChild(this.image);
    this.image.position.set(4, 4);
    this.hitArea = new canvas.px.Rectangle(0, 0, 60, 60);
    this.hint = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "slot_hint_back"));
    this.hint.position.set(6, 29);
    var field = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_10, 6507828, 60, 16, "center");
    this.hint.addChild(field);
    field.text = canvas.Translator.getText(1e3).toLowerCase();
    field.y = -1;
    this.infoButton = this.hint.addChild(new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "info")));
    this.infoButton.position.set(37, -24);
    this.data = data;
};
canvas.app.cube.view.ItemRenderer.prototype = Object.create(canvas.ui.ListRenderer.prototype);
canvas.app.cube.view.ItemRenderer.prototype.createFront = function () {
    var result;
    switch (this.index) {
        case 0:
            sprite = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "slot1"));
            break;
        case 1:
            sprite = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "slot2"));
            break;
        case 2:
            sprite = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "slot1"));
            sprite.scale.x = -1;
            sprite.x = 70;
            break;
        case 3:
            sprite = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "slot3"));
            sprite.scale.x = -1;
            sprite.x = 70;
            break;
        case 4:
            sprite = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "slot1"));
            sprite.scale.set(-1, -1);
            sprite.position.set(70, 68);
            break;
        case 5:
            sprite = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "slot2"));
            sprite.scale.y = -1;
            sprite.y = 68;
            break;
        case 6:
            sprite = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "slot1"));
            sprite.scale.y = -1;
            sprite.y = 68;
            break;
        case 7:
            sprite = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "slot3"));
            break;
        default:
            sprite = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "slot0"));
    }
    return sprite;
};
canvas.app.cube.view.ItemRenderer.prototype.update = function () {
    if (this.data) {
        this.image.setImage(this.data.image);
        this.hintView.update(this.data.title);
        canvas.EventManager.dispatchEvent(canvas.app.cube.Event.HINT_ADD, null, { target: this.image, params: new canvas.utils.HintParams(this.hintView, true) });
        if (this.data.count > 1) {
            this.addChild(this.countContainer);
            this.countField.text = this.data.count;
        }
        this.addChild(this.front);
        this.buttonMode = true;
    } else {
        canvas.EventManager.dispatchEvent(canvas.app.cube.Event.HINT_REMOVE, null, { target: this.image });
        this.image.clear();
        this.removeIfExist(this.countContainer);
        this.removeIfExist(this.front);
        this.buttonMode = false;
        this.outHandler();
    }
};
canvas.app.cube.view.ItemRenderer.prototype.overHandler = function () {
    if (this.data) {
        this.addChildAt(this.hint, this.numChildren - 1);
    }
};
canvas.app.cube.view.ItemRenderer.prototype.outHandler = function () {
    this.removeIfExist(this.hint);
};
canvas.app.cube.view.ItemRenderer.prototype.clickHandler = function (mouseData) {
    if (!this.data) return;
    if (canvas.Functions.findParent(this.infoButton, mouseData.target)) {
        showArtifactInfo(this.data.id);
        return;
    }
    artifactAct(this.data.id, "4");
};
canvas.app.cube.view.ItemRenderer.prototype.destroy = function () {
    canvas.ui.ListRenderer.prototype.destroy.call(this);
};
canvas.app.casino.Const = {
    LINES_COUNT: 5,
    REQUEST_SPIN: "spin",
    REQUEST_OPEN_CARD: "open_card",
    LINES_INDEXES: [
        [5, 6, 7, 8, 9],
        [0, 1, 2, 3, 4],
        [10, 11, 12, 13, 14],
        [0, 6, 12, 8, 4],
        [10, 6, 2, 8, 14],
    ],
};
canvas.app.casino.Event = {
    ENTER_FRAME: "Casino.ENTER_FRAME",
    HINT_ADD: "Casino.HINT_ADD",
    HINT_REMOVE: "Casino.HINT_REMOVE",
    SHOW_LINES: "Casino.SHOW_LINES",
    HIDE_LINES: "Casino.HIDE_LINES",
    DRUM_COMPLETE: "Casino.DRUM_COMPLETE",
    SHOW_MESSAGE: "Casino.SHOW_MESSAGE",
    UPDATE_BET: "Casino.UPDATE_BET",
    OPEN_CARD: "Casino.OPEN_CARD",
};
canvas.app.casino.Main = function (model) {
    canvas.px.Container.call(this);
    this.model = model;
    this.hintManager = new canvas.utils.HintManager();
    this.hintContainer = new canvas.px.Container();
    this.hintContainer.interactive = true;
    this.hintManager.init(this.hintContainer, this.model.width, this.model.height);
    canvas.EventManager.addEventListener(canvas.app.casino.Event.HINT_ADD, null, this.handlerHintAdd, this);
    canvas.EventManager.addEventListener(canvas.app.casino.Event.HINT_REMOVE, null, this.handlerHintRemove, this);
    this.windowsManager = new canvas.utils.WindowsManager();
    this.windowsContainer = new canvas.px.Container();
    this.view = this.addChild(new canvas.app.casino.View());
    this.windowsManager.init(this.windowsContainer, this.model.width, this.model.height, this.view);
    this.addChild(this.windowsContainer);
    this.addChild(this.hintContainer);
    this.request = new canvas.utils.URLRequest();
    this.update();
    this.view.init();
    this.updateBetHandler();
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.view.playButton, this.playClickHandler, this);
    canvas.EventManager.addEventListener(canvas.app.casino.Event.SHOW_LINES, null, this.showLinesHandler, this);
    canvas.EventManager.addEventListener(canvas.app.casino.Event.HIDE_LINES, null, this.hideLinesHandler, this);
    canvas.EventManager.addEventListener(canvas.app.casino.Event.DRUM_COMPLETE, null, this.drumCompleteHandler, this);
    canvas.EventManager.addEventListener(canvas.app.casino.Event.SHOW_MESSAGE, null, this.showMessageHandler, this);
    canvas.EventManager.addEventListener(canvas.app.casino.Event.UPDATE_BET, null, this.updateBetHandler, this);
    canvas.EventManager.addEventListener(canvas.app.casino.Event.OPEN_CARD, null, this.openCardHandler, this);
    canvas.EventManager.addEventListener(canvas.utils.URLRequestEvent.EVENT_COMPLETE, this.request, this.requestCompleteHandler, this);
    canvas.EventManager.addEventListener(canvas.utils.URLRequestEvent.EVENT_ERROR, this.request, this.requestErrorHandler, this);
};
canvas.app.casino.Main.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.casino.Main.prototype.handlerHintAdd = function (e) {
    this.hintManager.add(e.params.target, e.params.params);
};
canvas.app.casino.Main.prototype.handlerHintRemove = function (e) {
    this.hintManager.remove(e.params.target);
};
canvas.app.casino.Main.prototype.update = function () {
    this.view.update();
};
canvas.app.casino.Main.prototype.swfObject = function (data) {
    var str;
    var obj;
    if (data) {
        for (str in data) {
            obj = data[str];
            switch (str) {
                case "casino|puton":
                    break;
            }
        }
    }
};
canvas.app.casino.Main.prototype.requestCompleteHandler = function () {
    this.model.parseResponse(this.request.request.responseText);
    if (this.model.error) {
        canvas.EventManager.dispatchEvent(canvas.app.casino.Event.SHOW_MESSAGE, null, this.model.error);
        this.model.error = "";
        return;
    }
    switch (this.request.type) {
        case canvas.app.casino.Const.REQUEST_SPIN:
            this.view.spin();
            break;
        case canvas.app.casino.Const.REQUEST_OPEN_CARD:
            this.view.updateSuperGame();
            setTimeout(this.updateExternalMoney.bind(this), 1e3);
            break;
    }
};
canvas.app.casino.Main.prototype.requestErrorHandler = function () {
    canvas.EventManager.dispatchEvent(canvas.app.casino.Event.SHOW_MESSAGE, null, canvas.Translator.getText(426));
    this.update();
};
canvas.app.casino.Main.prototype.sendRequest = function (type, params) {
    var url = "casino_conf.php?mode=slots&is_gold=" + (this.model.isGold ? "1" : "0") + "&bandit=" + this.model.bandit + "&action=" + type;
    if (params != undefined) url += params;
    this.request.type = type;
    switch (type) {
        case canvas.app.casino.Const.REQUEST_SPIN:
            url += "&bet=" + (this.view.betStepper.selectedIndex + 1) + "&type=" + (this.view.lineStepper.selectedIndex + 1);
            break;
        default:
    }
    this.request.load(url);
};
canvas.app.casino.Main.prototype.playClickHandler = function () {
    if (this.model.isSuperGame || this.view.superGame.active) {
        this.model.clear();
        this.view.closeSuperGame();
    } else {
        this.sendRequest(canvas.app.casino.Const.REQUEST_SPIN);
        this.view.playButton.enabled = false;
    }
};
canvas.app.casino.Main.prototype.showLinesHandler = function () {
    this.view.showActiveLines();
};
canvas.app.casino.Main.prototype.hideLinesHandler = function () {
    this.view.hideActiveLines();
};
canvas.app.casino.Main.prototype.drumCompleteHandler = function () {
    if (this.view.isDrumsStopped()) {
        this.view.updateAfterSpin();
        this.updateExternalMoney();
        this.model.clear();
    }
};
canvas.app.casino.Main.prototype.showMessageHandler = function (e) {
    this.view.messageWindow.init(e.params);
    this.windowsManager.openWindow(this.view.messageWindow);
};
canvas.app.casino.Main.prototype.updateBetHandler = function () {
    this.model.linesCount = this.view.lineStepper.values[this.view.lineStepper.selectedIndex];
    this.model.betValue = this.view.betStepper.values[this.view.betStepper.selectedIndex];
    this.model.localStorage.set("selectedLine", this.view.lineStepper.selectedIndex);
    this.model.localStorage.set("selectedBet", this.view.betStepper.selectedIndex);
    this.view.update();
};
canvas.app.casino.Main.prototype.openCardHandler = function (e) {
    this.model.cards.push(e.params);
    this.sendRequest(canvas.app.casino.Const.REQUEST_OPEN_CARD, "&card=" + e.params);
};
canvas.app.casino.Main.prototype.updateExternalMoney = function () {
    if (this.model.deltaMoney != 0) {
        casino_user_money_update(this.model.deltaMoney);
    }
};
canvas.app.casino.Model = function (par) {
    canvas.Config.initLang(par.GrPack.split("/")[2]);
    this.localStorage = new canvas.utils.LocalStorage(canvas.Log.CASINO);
    this.linesCount = 1;
    this.betValue = 100;
    this.type = par.type == undefined ? 1 : parseInt(par.type);
    this.bet = par.bet == undefined ? 1 : parseInt(par.bet);
    this.bets = par.bets == undefined ? [1, 2, 3, 4, 5] : par.bets.split(",");
    var len, i;
    len = this.bets.length;
    for (i = 0; i < len; i++) {
        this.bets[i] = parseFloat(this.bets[i]);
    }
    this.types = par.types == undefined ? [1, 2, 3, 4, 5] : par.types.split(",");
    len = this.types.length;
    for (i = 0; i < len; i++) {
        this.types[i] = parseInt(this.types[i]);
    }
    this.cardTypes = par.card_types == undefined || par.card_types == "" ? [] : par.card_types.split(",");
    len = this.cardTypes.length;
    for (i = 0; i < len; i++) {
        this.cardTypes[i] = parseInt(this.cardTypes[i]);
    }
    this.cards = par.cards == undefined || par.cards == "" ? [] : par.cards.split(",");
    len = this.cards.length;
    for (i = 0; i < len; i++) {
        this.cards[i] = parseInt(this.cards[i]);
    }
    this.freeSpins = par.free_spins == undefined ? 0 : parseInt(par.free_spins);
    this.isGold = par.is_gold == undefined ? false : parseInt(par.is_gold) != 0;
    this.jackpot = par.jackpot == undefined ? 0 : parseFloat(par.jackpot);
    this.money = par.money == undefined ? 0 : parseFloat(par.money);
    this.isSuperGame = par.super_game == undefined ? false : parseInt(par.super_game) != 0;
    this.bandit = par.bandit == undefined ? 1 : parseInt(par.bandit);
    this.figs = [];
    this.combos = [];
    this.prize = 0;
    this.currentPrize = 0;
    this.deltaMoney = 0;
    this.error = "";
};
canvas.app.casino.Model.prototype.parseResponse = function (data) {
    var xml = new DOMParser().parseFromString(data, "text/xml");
    var root = xml.firstChild;
    var action = root.attributes.action.value;
    if (root.attributes.prize) {
        this.prize = parseFloat(root.attributes.prize.value);
    } else {
        this.prize = 0;
        if (root.attributes.current_prize) {
            this.currentPrize = parseFloat(root.attributes.current_prize.value);
        } else {
            this.currentPrize = 0;
        }
    }
    if (root.attributes.super_game) {
        this.isSuperGame = parseInt(root.attributes.super_game.value) != 0;
    }
    var list = root.childNodes;
    var len = list.length;
    var tmp, len2, tmp2, len3, a, index;
    for (var i = 0; i < len; i++) {
        switch (list[i].nodeName) {
            case "user":
                tmp = this.money;
                if (list[i].attributes.money) this.money = parseFloat(list[i].attributes.money.value);
                if (list[i].attributes.jackpot) this.jackpot = parseFloat(list[i].attributes.jackpot.value);
                if (list[i].attributes.free_spins) {
                    this.freeSpins = parseInt(list[i].attributes.free_spins.value);
                } else {
                    this.freeSpins = 0;
                }
                this.deltaMoney = this.money - tmp;
                break;
            case "error":
                this.error = list[i].firstChild.nodeValue;
                break;
            case "figs":
                tmp = list[i].childNodes;
                this.figs = [
                    [parseInt(tmp[0].firstChild.nodeValue), parseInt(tmp[5].firstChild.nodeValue), parseInt(tmp[10].firstChild.nodeValue)],
                    [parseInt(tmp[1].firstChild.nodeValue), parseInt(tmp[6].firstChild.nodeValue), parseInt(tmp[11].firstChild.nodeValue)],
                    [parseInt(tmp[2].firstChild.nodeValue), parseInt(tmp[7].firstChild.nodeValue), parseInt(tmp[12].firstChild.nodeValue)],
                    [parseInt(tmp[3].firstChild.nodeValue), parseInt(tmp[8].firstChild.nodeValue), parseInt(tmp[13].firstChild.nodeValue)],
                    [parseInt(tmp[4].firstChild.nodeValue), parseInt(tmp[9].firstChild.nodeValue), parseInt(tmp[14].firstChild.nodeValue)],
                ];
                break;
            case "combos":
                tmp = list[i].childNodes;
                len = tmp.length;
                if (len > 0) {
                    this.combos = [];
                    for (var j = 0; j < len; j++) {
                        tmp2 = tmp[j].childNodes;
                        len3 = tmp2.length;
                        a = [];
                        for (var k = 0; k < len3; k++) {
                            a.push(parseInt(tmp2[k].firstChild.nodeValue));
                        }
                        index = this.getLineByCombo(a);
                        if (index >= 0) {
                            this.combos[index] = [];
                            for (var k = 0; k < len3; k++) {
                                this.combos[index].push(canvas.app.casino.Const.LINES_INDEXES[index].indexOf(a[k]));
                            }
                        }
                    }
                }
                break;
            case "card":
                if (list[i].attributes.type && list[i].attributes.result && list[i].attributes.result.value == "1") {
                    this.cardTypes.push(parseInt(list[i].attributes.type.value));
                }
                break;
        }
    }
};
canvas.app.casino.Model.prototype.getLineByCombo = function (combo) {
    var len = canvas.app.casino.Const.LINES_INDEXES.length;
    var len2 = combo.length;
    var i, j, res;
    for (i = 0; i < len; i++) {
        res = true;
        for (j = 0; j < len2; j++) {
            if (canvas.app.casino.Const.LINES_INDEXES[i].indexOf(combo[j]) < 0) {
                res = false;
                break;
            }
        }
        if (res) {
            return i;
        }
    }
    return -1;
};
canvas.app.casino.Model.prototype.clear = function () {
    this.prize = this.currentPrize = 0;
    this.combos = [];
    this.figs = [];
    this.deltaMoney = 0;
    this.cards = [];
    this.cardTypes = [];
};
canvas.app.casino.View = function () {
    canvas.px.Container.call(this);
    var msk, sprite, i, len;
    var model = canvas.app.casino.model;
    this.anims = [];
    this._curAnimIndex = 0;
    Object.defineProperty(this, "curAnimIndex", {
        get: function () {
            return this._curAnimIndex;
        },
        set: function (value) {
            this._curAnimIndex = value >= this.anims.length ? 0 : value;
            setTimeout(this.playAnim.bind(this), 1e3 + Math.random() * 2e3);
        },
    });
    this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "back")));
    this.drumsContainer = this.addChild(new canvas.px.Container());
    this.drumsContainer.position.set(56, 60);
    sprite = this.addChild(new canvas.px.Mask(430, 220));
    sprite.position.set(this.drumsContainer.x - 20, this.drumsContainer.y - 10);
    this.drumsContainer.mask = sprite;
    this.drums = [];
    for (i = 0; i < 5; i++) {
        sprite = this.drumsContainer.addChild(new canvas.app.casino.view.DrumView());
        sprite.position.set(i * 79, 0);
        this.drums.push(sprite);
    }
    sprite = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "gradient")));
    sprite.position.set(48, 50);
    sprite = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "front")));
    sprite.y = 5;
    this.animFront = this.addChild(new canvas.px.MovieClip(canvas.Config.effectsPath + "gradient1"));
    this.animFront.frameEvent = canvas.app.casino.Event.ENTER_FRAME;
    msk = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getTexture("front_mask")));
    msk.position.set(0, 3);
    this.animFront.mask = msk;
    this.anims.push(this.animFront);
    sprite = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getTexture("title_jackpot")));
    sprite.position.set(65, 16);
    this.animJackpot = this.addChild(new canvas.px.MovieClip(canvas.Config.effectsPath + "gradient2"));
    this.animJackpot.frameEvent = canvas.app.casino.Event.ENTER_FRAME;
    this.animJackpot.position.set(sprite.x, sprite.y - 25);
    msk = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getTexture("title_jackpot")));
    msk.position.set(sprite.x, sprite.y);
    this.animJackpot.mask = msk;
    this.anims.push(this.animJackpot);
    sprite = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getTexture("title_prize")));
    sprite.position.set(420 - sprite.width, 16);
    this.animPrize = this.addChild(new canvas.px.MovieClip(canvas.Config.effectsPath + "gradient2"));
    this.animPrize.frameEvent = canvas.app.casino.Event.ENTER_FRAME;
    this.animPrize.position.set(sprite.x, sprite.y - 25);
    msk = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getTexture("title_prize")));
    msk.position.set(sprite.x, sprite.y);
    this.animPrize.mask = msk;
    this.anims.push(this.animPrize);
    sprite = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getTexture("dragon_mask")));
    sprite.position.set(198, 0);
    this.animDragon = this.addChild(new canvas.px.MovieClip(canvas.Config.effectsPath + "gradient3"));
    this.animDragon.frameEvent = canvas.app.casino.Event.ENTER_FRAME;
    this.animDragon.position.set(sprite.x - 20, sprite.y);
    msk = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getTexture("dragon_mask")));
    msk.position.set(sprite.x, sprite.y);
    this.animDragon.mask = msk;
    this.anims.push(this.animDragon);
    this.playButton = this.addChild(new canvas.ui.SimpleButton(canvas.ResourceLoader.getTexture("play_button_mask")));
    this.playButton.position.set(376, 276);
    this.animPlayButton = this.addChild(new canvas.px.MovieClip(canvas.Config.effectsPath + "gradient4"));
    this.animPlayButton.frameEvent = canvas.app.casino.Event.ENTER_FRAME;
    this.animPlayButton.position.set(this.playButton.x, this.playButton.y);
    msk = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getTexture("play_button_mask")));
    msk.position.set(this.playButton.x, this.playButton.y);
    this.animPlayButton.mask = msk;
    sprite = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("locale", "title_play")));
    sprite.position.set(this.playButton.x + Math.round((this.playButton.width - sprite.width) * 0.5), this.playButton.y + 20);
    this.anims.push(this.animPlayButton);
    sprite = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("locale", "title_lines")));
    sprite.position.set(50 + Math.round((68 - sprite.width) * 0.5), 289);
    sprite = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("locale", "title_bet")));
    sprite.position.set(140 + Math.round((80 - sprite.width) * 0.5), 289);
    sprite = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("locale", "title_sum")));
    sprite.position.set(259 + Math.round((80 - sprite.width) * 0.5), 289);
    this.moneyJackpot = this.addChild(new canvas.app.view.Money(16699904, canvas.Const.FONT_MYRIAD_PRO_15_BOLD_STROKE, !model.isGold, 70, 20, "center", "top", false));
    this.moneyJackpot.position.set(130, 14);
    this.moneyWin = this.addChild(new canvas.app.view.Money(16699904, canvas.Const.FONT_MYRIAD_PRO_15_BOLD_STROKE, !model.isGold, 70, 20, "center", "top", false));
    this.moneyWin.displayBronze = false;
    this.moneyWin.numbersCount = 2;
    this.moneyWin.position.set(280, 14);
    this.moneySum = this.addChild(new canvas.app.view.Money(16699904, canvas.Const.FONT_MYRIAD_PRO_15_BOLD_STROKE, !model.isGold, 80, 20, "center", "top", false));
    this.moneySum.position.set(260, 301);
    this.freeSpinsField = new canvas.ui.Text(canvas.Const.FONT_ARIAL_11, 0, 80, 20, "center");
    this.freeSpinsField.position.set(260, 304);
    this.lineStepper = this.addChild(new canvas.app.casino.view.LineStepper(65));
    this.lineStepper.position.set(51, 301);
    this.betStepper = this.addChild(new canvas.app.casino.view.BetStepper(91));
    this.betStepper.position.set(137, 301);
    this.linesContainer = this.addChild(new canvas.px.Container());
    this.lines = [];
    for (i = 0; i < canvas.app.casino.Const.LINES_COUNT; i++) {
        sprite = this.linesContainer.addChild(new canvas.app.casino.view.SelectorView(i));
        this.lines.push(sprite);
        switch (i) {
            case 3:
                sprite.position.set(10, 48);
                break;
            case 1:
                sprite.position.set(10, 90);
                break;
            case 0:
                sprite.position.set(10, 140);
                break;
            case 2:
                sprite.position.set(10, 189);
                break;
            case 4:
                sprite.position.set(10, 236);
                break;
        }
    }
    this.winAnimation = new canvas.px.MovieClip(canvas.Config.langPath + "mci/casino_win");
    this.winAnimation.stop();
    this.winAnimation.frameEvent = canvas.app.casino.Event.ENTER_FRAME;
    this.winAnimation.position.set(-10, 10);
    this.hint = new canvas.app.casino.view.HintView("");
    this.messageWindow = new canvas.app.manor.view.controls.MessageWindow();
    this.messageWindow.dragAvailable = false;
    len = this.anims.length;
    for (i = 0; i < this.anims.length; i++) {
        this.anims[i].stop();
    }
    this.playAnim();
    this.superGame = new canvas.app.casino.view.SuperGame();
    this.superGame.position.set(83, 90);
    canvas.EventManager.addEventListener(canvas.px.MovieClipEvent.EVENT_COMPLETE, this.winAnimation, this.winAnimationCompleteHandler, this);
};
canvas.app.casino.View.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.casino.View.prototype.update = function () {
    var model = canvas.app.casino.model;
    this.lineStepper.values = model.types;
    this.betStepper.values = model.bets;
    if (model.isGold) {
        this.moneyJackpot.gems = model.jackpot;
        this.moneySum.gems = model.linesCount * model.betValue;
    } else {
        this.moneyJackpot.gold = canvas.Functions.getMoneyGold(model.jackpot);
        this.moneySum.money = canvas.Functions.getMoney(model.linesCount * model.betValue);
    }
    if (!model.isSuperGame) {
        if (model.money < model.linesCount * model.betValue) {
            this.playButton.enabled = false;
            this.hint.setText(canvas.Translator.getText(3025));
            canvas.EventManager.dispatchEvent(canvas.app.casino.Event.HINT_ADD, null, { target: this.playButton, params: new canvas.utils.HintParams(this.hint, false, canvas.utils.HintPos.LEFT_TOP) });
        } else {
            this.playButton.enabled = true;
            canvas.EventManager.dispatchEvent(canvas.app.casino.Event.HINT_REMOVE, null, { target: this.playButton });
        }
    }
    if (model.freeSpins > 0) {
        if (!model.isSuperGame) {
            this.playButton.enabled = true;
        }
        this.addChild(this.freeSpinsField);
        this.freeSpinsField.text = model.freeSpins + " " + canvas.Translator.getText(1601);
        this.removeIfExist(this.moneySum);
        canvas.EventManager.dispatchEvent(canvas.app.casino.Event.HINT_REMOVE, null, { target: this.playButton });
    } else {
        this.addChild(this.moneySum);
        this.removeIfExist(this.freeSpinsField);
    }
};
canvas.app.casino.View.prototype.init = function () {
    var model = canvas.app.casino.model;
    var selectedLine = model.localStorage.get("selectedLine");
    var selectedBet = model.localStorage.get("selectedBet");
    if (selectedLine != undefined) this.lineStepper.selectedIndex = parseInt(selectedLine);
    if (selectedBet != undefined) this.betStepper.selectedIndex = parseInt(selectedBet);
    if (model.freeSpins > 0) {
        this.lineStepper.selectedIndex = model.type - 1;
        this.betStepper.selectedIndex = model.bet - 1;
    }
    this.testSuperGame();
};
canvas.app.casino.View.prototype.testSuperGame = function () {
    var model = canvas.app.casino.model;
    if (model.isSuperGame) {
        this.openSuperGame();
    }
};
canvas.app.casino.View.prototype.updateAfterSpin = function () {
    var model = canvas.app.casino.model;
    this.blink(false);
    if (model.prize > 0) {
        this.playWinAnimation();
        this.setWinValue(model.prize);
        var len = this.lines.length;
        for (var i = 0; i < len; i++) {
            this.lines[i].resultValues = model.combos[i] || [];
        }
    }
    this.update();
    this.testSuperGame();
};
canvas.app.casino.View.prototype.playAnim = function () {
    this.anims[this.curAnimIndex].gotoAndPlay(1);
    this.curAnimIndex++;
};
canvas.app.casino.View.prototype.showActiveLines = function () {
    var len = this.lines.length;
    var max = this.lineStepper.values[this.lineStepper.selectedIndex];
    for (var i = 0; i < len; i++) {
        if (i < max) {
            this.lines[i].overHandler();
        } else {
            this.lines[i].outHandler();
        }
    }
};
canvas.app.casino.View.prototype.hideActiveLines = function () {
    var len = this.lines.length;
    for (var i = 0; i < len; i++) {
        this.lines[i].outHandler();
    }
};
canvas.app.casino.View.prototype.playWinAnimation = function () {
    this.addChild(this.winAnimation);
    this.winAnimation.gotoAndPlay(2);
};
canvas.app.casino.View.prototype.winAnimationCompleteHandler = function () {
    this.removeIfExist(this.winAnimation);
};
canvas.app.casino.View.prototype.blink = function (flag) {
    if (flag == undefined) flag = true;
    var len = this.lines.length;
    for (var i = 0; i < len; i++) {
        this.lines[i].blink = flag;
    }
};
canvas.app.casino.View.prototype.isDrumsStopped = function () {
    var len = this.drums.length;
    for (var i = 0; i < len; i++) {
        if (this.drums[i].active) return false;
    }
    return true;
};
canvas.app.casino.View.prototype.spin = function () {
    var model = canvas.app.casino.model;
    var len = this.drums.length,
        i;
    for (i = 0; i < len; i++) {
        if (model.figs[i]) this.drums[i].result = model.figs[i];
    }
    len = this.lines.length;
    for (i = 0; i < len; i++) {
        this.lines[i].resultValues = [];
    }
    this.moneyWin.reset();
    this.blink(true);
};
canvas.app.casino.View.prototype.openSuperGame = function () {
    this.addChild(this.superGame);
    this.superGame.show();
    this.updateSuperGame();
    this.removeIfExist(this.linesContainer);
    this.addChild(this.winAnimation);
    this.hideDrums();
};
canvas.app.casino.View.prototype.updateSuperGame = function () {
    var model = canvas.app.casino.model;
    this.superGame.update();
    this.playButton.enabled = model.cards.length >= canvas.app.casino.Const.LINES_COUNT;
    if (model.prize > 0) {
        this.setWinValue(model.prize);
    } else if (model.currentPrize > 0) {
        this.setWinValue(model.currentPrize);
    }
};
canvas.app.casino.View.prototype.setWinValue = function (value) {
    var model = canvas.app.casino.model;
    this.moneyWin.displaySilver = true;
    this.moneyWin.animateToValue(model.isGold ? null : canvas.Functions.getMoney(value), model.isGold ? value : null);
};
canvas.app.casino.View.prototype.closeSuperGame = function () {
    this.superGame.hide();
    this.addChild(this.linesContainer);
    this.showDrums();
};
canvas.app.casino.View.prototype.showDrums = function () {
    var len = this.drums.length;
    for (var i = 0; i < len; i++) {
        this.drums[i].show();
    }
};
canvas.app.casino.View.prototype.hideDrums = function () {
    var len = this.drums.length;
    for (var i = 0; i < len; i++) {
        this.drums[i].hide();
    }
};
canvas.app.casino.view.CardView = function (index) {
    canvas.px.Container.call(this);
    this.index = index;
    this._result = 0;
    Object.defineProperty(this, "result", {
        get: function () {
            return this._result;
        },
        set: function (value) {
            this._result = value;
            this.resultImage.texture = canvas.ResourceLoader.getImage("ui", "card_result_" + this._result);
        },
    });
    this._state = 0;
    Object.defineProperty(this, "state", {
        get: function () {
            return this._state;
        },
        set: function (value) {
            this._state = value;
            this.update();
        },
    });
    this._targetFrame = 0;
    Object.defineProperty(this, "targetFrame", {
        get: function () {
            return this._targetFrame;
        },
        set: function (value) {
            this._targetFrame = value;
            canvas.EventManager.addEventListener(canvas.app.casino.Event.ENTER_FRAME, null, this.frameHandler, this);
        },
    });
    this.image = this.addChild(new canvas.px.Sprite(canvas.px.TextureEmpty));
    this.image.pivot = new canvas.px.Point(45, 46);
    this.questionImage = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "icon_question"));
    this.questionImage.position.set(-Math.round(this.questionImage.width * 0.5), -Math.round(this.questionImage.height * 0.5) + 5);
    this.resultImage = new canvas.px.Sprite(canvas.px.TextureEmpty);
    this.resultImage.pivot = new canvas.px.Point(45, 46);
    this.blink = new canvas.px.MovieClip(canvas.Config.effectsPath + "casino_blink");
    this.blink.frameEvent = canvas.app.casino.Event.ENTER_FRAME;
    this.currentFrame = 0;
    this.scaleArray = [0.99, 0.98, 0.97, 0.96, 0.97, 0.98, 0.99, 1, 1.01, 1.02, 1.03, 1.04, 1.03, 1.02, 1.01, 1];
    this.scaleIndex = 0;
    this.buttonMode = true;
    this.mouseover = this.overHandler.bind(this);
    this.mouseout = this.outHandler.bind(this);
    this.click = this.clickHandler.bind(this);
    this.hitArea = new canvas.px.Rectangle(-32, -32, 64, 64);
    this.delay = 0;
};
canvas.app.casino.view.CardView.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.casino.view.CardView.prototype.update = function () {
    canvas.EventManager.removeEventListener(canvas.app.casino.Event.ENTER_FRAME, null, this.frame2Handler, this);
    this.image.scale.set(1, 1);
    this.interactive = false;
    this.removeIfExist(this.questionImage);
    this.removeIfExist(this.blink);
    this.removeIfExist(this.resultImage);
    switch (this.state) {
        case 0:
            this.currentFrame = 0;
            this.targetFrame = 3;
            this.scaleIndex = 0;
            this.image.texture = canvas.px.TextureEmpty;
            break;
        case 1:
            this.targetFrame = 3;
            break;
        case 2:
            this.targetFrame = 3;
            break;
        case 3:
            this.currentFrame = 0;
            this.targetFrame = 4;
            break;
        case 4:
            this.currentFrame = 0;
            this.targetFrame = 5;
            break;
        case 5:
            this.currentFrame = 0;
            this.targetFrame = 4;
            break;
    }
    this.outHandler();
};
canvas.app.casino.view.CardView.prototype.updateAfterAnim = function () {
    switch (this.state) {
        case 0:
            this.interactive = true;
            canvas.EventManager.addEventListener(canvas.app.casino.Event.ENTER_FRAME, null, this.frame2Handler, this);
            break;
        case 1:
            this.addChild(this.questionImage);
            break;
        case 3:
            this.addChild(this.resultImage);
            this.addChild(this.blink);
            this.blink.gotoAndPlay(1);
            break;
        case 4:
            this.parent.removeChild(this);
            break;
        case 5:
            this.addChild(this.resultImage);
            break;
    }
};
canvas.app.casino.view.CardView.prototype.frameHandler = function () {
    if (this.delay-- > 0) return;
    this.image.texture = canvas.ResourceLoader.getImage("ui", "card_frame_" + (this.currentFrame >= 4 && this.targetFrame == 5 ? 4 : this.currentFrame));
    if (this.targetFrame > this.currentFrame) {
        this.currentFrame++;
    } else if (this.targetFrame < this.currentFrame) {
        this.currentFrame++;
    } else {
        canvas.EventManager.removeEventListener(canvas.app.casino.Event.ENTER_FRAME, null, this.frameHandler, this);
        this.updateAfterAnim();
    }
};
canvas.app.casino.view.CardView.prototype.frame2Handler = function () {
    this.image.scale.set(this.scaleArray[this.scaleIndex], this.scaleArray[this.scaleIndex]);
    this.scaleIndex++;
    if (this.scaleIndex >= this.scaleArray.length) {
        this.scaleIndex = 0;
    }
};
canvas.app.casino.view.CardView.prototype.overHandler = function () {
    this.filters = [canvas.Functions.getBrightness(1.3)];
};
canvas.app.casino.view.CardView.prototype.light = function () {
    this.filters = [canvas.Functions.getBrightness(1.5)];
};
canvas.app.casino.view.CardView.prototype.outHandler = function () {
    this.filters = [];
};
canvas.app.casino.view.CardView.prototype.clickHandler = function () {
    canvas.EventManager.dispatchEvent(canvas.app.casino.Event.OPEN_CARD, null, this.index);
    this.interactive = false;
    this.outHandler();
};
canvas.app.casino.view.DrumImage = function (index) {
    canvas.px.Container.call(this);
    this._index = 1;
    Object.defineProperty(this, "index", {
        get: function () {
            return this._index;
        },
        set: function (value) {
            this._index = value;
            this.imageBlur.texture = canvas.ResourceLoader.getImage("ui", "image" + this.index + "_blur");
            this.image.texture = canvas.ResourceLoader.getImage("ui", "image" + this.index);
        },
    });
    this._blur = false;
    Object.defineProperty(this, "blur", {
        get: function () {
            return this._blur;
        },
        set: function (value) {
            this._blur = value;
            canvas.EventManager.addEventListener(canvas.app.casino.Event.ENTER_FRAME, null, this.frameHandler, this);
        },
    });
    this.imageBlur = this.addChild(new canvas.px.Sprite(canvas.px.TextureEmpty));
    this.imageBlur.position.set(-10, -10);
    this.image = this.addChild(new canvas.px.Sprite(canvas.px.TextureEmpty));
    this.imageBlur.alpha = 0;
    this.index = index;
};
canvas.app.casino.view.DrumImage.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.casino.view.DrumImage.prototype.frameHandler = function () {
    if (this.blur && this.imageBlur.alpha != 1) {
        this.imageBlur.alpha += 0.1;
        if (this.imageBlur.alpha > 1) this.imageBlur.alpha = 1;
        this.image.alpha = 1 - this.imageBlur.alpha;
    } else if (!this.blur && this.imageBlur.alpha != 0) {
        this.imageBlur.alpha -= 0.4;
        if (this.imageBlur.alpha < 0) this.imageBlur.alpha = 0;
        this.image.alpha = 1 - this.imageBlur.alpha;
    } else {
        canvas.EventManager.removeEventListener(canvas.app.casino.Event.ENTER_FRAME, null, this.frameHandler, this);
    }
};
canvas.app.casino.view.DrumView = function (images) {
    canvas.px.Container.call(this);
    Object.defineProperty(this, "images", {
        get: function () {
            return this._images;
        },
        set: function (value) {
            this._images = value;
            canvas.Functions.randomArray(this._images);
            this.update();
        },
    });
    this._result = [1, 2, 3];
    Object.defineProperty(this, "result", {
        get: function () {
            return this._result;
        },
        set: function (value) {
            this._result = value;
            this.play();
        },
    });
    this.container = this.addChild(new canvas.px.Container());
    this.images = images == undefined ? [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] : images;
    this.animFrames = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0];
    this.animIndex = 0;
    this.active = false;
    this.startY = 0;
    this.targetY = 0;
};
canvas.app.casino.view.DrumView.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.casino.view.DrumView.prototype.update = function () {
    canvas.Functions.destroyChildren(this.container);
    var len = this.images.length,
        i,
        item;
    this.items = [];
    for (i = 0; i < len; i++) {
        item = this.container.addChild(new canvas.app.casino.view.DrumImage(this.images[i]));
        item.y = 70 * i;
        this.items.push(item);
    }
    for (i = len; i < len + 3; i++) {
        item = this.container.addChild(new canvas.app.casino.view.DrumImage(this.images[i - len]));
        item.y = 70 * i;
        this.items.push(item);
    }
};
canvas.app.casino.view.DrumView.prototype.play = function () {
    this.active = true;
    this.index = 0;
    this.animIndex = 0;
    this.finishIndex = 20 + Math.round(Math.random() * 50);
    var len = this.items.length;
    for (var i = 0; i < len; i++) {
        this.items[i].blur = true;
    }
    canvas.EventManager.addEventListener(canvas.app.casino.Event.ENTER_FRAME, null, this.frameHandler, this);
};
canvas.app.casino.view.DrumView.prototype.frameHandler = function () {
    if (this.container.y >= 0) {
        this.container.y = -this.images.length * 70;
    }
    this.container.y += this.index > 20 ? 50 : this.index * 2;
    this.index++;
    if (this.index > this.finishIndex) {
        canvas.EventManager.removeEventListener(canvas.app.casino.Event.ENTER_FRAME, null, this.frameHandler, this);
        var len = this.items.length;
        var len2 = this.result.length;
        var len3 = this.images.length;
        var replaceIndex;
        for (var j = 0; j < len2; j++) {
            replaceIndex = this.items[j].index;
            this.items[j].index = this.result[j];
            this.items[j + len3].index = this.result[j];
            for (var i = j + 1; i < len3; i++) {
                if (this.items[i].index == this.items[j].index) {
                    this.items[i].index = replaceIndex;
                }
            }
        }
        canvas.EventManager.addEventListener(canvas.app.casino.Event.ENTER_FRAME, null, this.frame2Handler, this);
    }
};
canvas.app.casino.view.DrumView.prototype.frame2Handler = function () {
    if (this.container.y < 0) {
        this.container.y += 40;
        if (this.container.y > 0) this.container.y = 0;
    } else {
        if (this.animIndex == 0) {
            var len = this.items.length;
            for (var i = 0; i < len; i++) {
                this.items[i].blur = false;
            }
        }
        if (this.animFrames[this.animIndex] != undefined) {
            this.container.y = this.animFrames[this.animIndex++];
        } else {
            this.active = false;
            canvas.EventManager.removeEventListener(canvas.app.casino.Event.ENTER_FRAME, null, this.frame2Handler, this);
            canvas.EventManager.dispatchEvent(canvas.app.casino.Event.DRUM_COMPLETE);
        }
    }
};
canvas.app.casino.view.DrumView.prototype.hide = function () {
    this.startY = this.container.y;
    this.targetY = -1e3;
    canvas.EventManager.addEventListener(canvas.app.casino.Event.ENTER_FRAME, null, this.frame3Handler, this);
};
canvas.app.casino.view.DrumView.prototype.show = function () {
    this.targetY = this.startY;
    canvas.EventManager.addEventListener(canvas.app.casino.Event.ENTER_FRAME, null, this.frame3Handler, this);
};
canvas.app.casino.view.DrumView.prototype.frame3Handler = function () {
    var trg;
    if (this.container.y > this.targetY) {
        trg = this.container.y - 40;
        if (trg < this.targetY) {
            trg = this.targetY;
        }
        this.container.y = trg;
    } else if (this.container.y < this.targetY) {
        trg = this.container.y + 40;
        if (trg > this.targetY) {
            trg = this.targetY;
        }
        this.container.y = trg;
    } else {
        canvas.EventManager.removeEventListener(canvas.app.casino.Event.ENTER_FRAME, null, this.frame3Handler, this);
    }
};
canvas.app.casino.view.HintView = function (text) {
    canvas.px.Container.call(this);
    this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "big_alt")));
    this.field = this.addChild(new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_13, canvas.Const.FONT_TAHOMA_13_BOLD, 6770493, 200, 62, "center", "middle"));
    this.field.position.set(19, 12);
    if (text != undefined) this.setText(text);
    this.interactiveChildren = false;
};
canvas.app.casino.view.HintView.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.casino.view.HintView.prototype.setText = function (text) {
    this.field.text = text;
};
canvas.app.casino.view.LineStepper = function (w) {
    canvas.px.Container.call(this);
    this._values = [1];
    Object.defineProperty(this, "values", {
        get: function () {
            return this._values;
        },
        set: function (value) {
            this._values = value;
            this.update();
        },
    });
    this._selectedIndex = 0;
    Object.defineProperty(this, "selectedIndex", {
        get: function () {
            return this._selectedIndex;
        },
        set: function (value) {
            this._selectedIndex = value >= this.values.length ? 0 : value < 0 ? this.values.length - 1 : value;
            this.update();
            canvas.EventManager.dispatchEvent(canvas.app.casino.Event.UPDATE_BET);
        },
    });
    this._width = w ? w : 100;
    this.arrowLeft = this.addChild(new canvas.ui.Button(canvas.ResourceLoader.getImage("ui", "arrow_base"), canvas.ResourceLoader.getImage("ui", "arrow_over"), canvas.ResourceLoader.getImage("ui", "arrow_down")));
    this.arrowLeft.scale.x = -1;
    this.arrowLeft.x = -this.arrowLeft.width;
    this.arrowRight = this.addChild(new canvas.ui.Button(canvas.ResourceLoader.getImage("ui", "arrow_base"), canvas.ResourceLoader.getImage("ui", "arrow_over"), canvas.ResourceLoader.getImage("ui", "arrow_down")));
    this.arrowRight.x = this._width - this.arrowRight.width;
    this.createField();
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.arrowLeft, this.leftClickHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.arrowRight, this.rightClickHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_OVER, this.arrowRight, this.overHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_OVER, this.arrowLeft, this.overHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_OUT, this.arrowRight, this.outHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_OUT, this.arrowLeft, this.outHandler, this);
};
canvas.app.casino.view.LineStepper.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.casino.view.LineStepper.prototype.update = function () {
    this.field.text = this.values[this.selectedIndex];
};
canvas.app.casino.view.LineStepper.prototype.createField = function () {
    this.field = this.addChild(new canvas.ui.Text(canvas.Const.FONT_MYRIAD_PRO_15_BOLD_STROKE, 15786161, this._width - 35, 20, "center"));
    this.field.position.set(18, 0);
};
canvas.app.casino.view.LineStepper.prototype.leftClickHandler = function () {
    var model = canvas.app.casino.model;
    if (model.freeSpins > 0) return;
    this.selectedIndex--;
    this.overHandler();
};
canvas.app.casino.view.LineStepper.prototype.rightClickHandler = function () {
    var model = canvas.app.casino.model;
    if (model.freeSpins > 0) return;
    this.selectedIndex++;
    this.overHandler();
};
canvas.app.casino.view.LineStepper.prototype.overHandler = function () {
    canvas.EventManager.dispatchEvent(canvas.app.casino.Event.SHOW_LINES);
};
canvas.app.casino.view.LineStepper.prototype.outHandler = function () {
    canvas.EventManager.dispatchEvent(canvas.app.casino.Event.HIDE_LINES);
};
canvas.app.casino.view.SelectorView = function (index) {
    canvas.px.Container.call(this);
    this._values = [];
    Object.defineProperty(this, "values", {
        get: function () {
            return this._values;
        },
        set: function (value) {
            this._values = value;
            this.update();
        },
    });
    this._resultValues = [];
    Object.defineProperty(this, "resultValues", {
        get: function () {
            return this._resultValues;
        },
        set: function (value) {
            this._resultValues = this.values = value;
        },
    });
    this._blink = false;
    Object.defineProperty(this, "blink", {
        get: function () {
            return this._blink;
        },
        set: function (value) {
            this._blink = value;
            if (this.blink) {
                this.blinkContainer.alpha = Math.random();
                this.addChild(this.blinkContainer);
                canvas.EventManager.addEventListener(canvas.app.casino.Event.ENTER_FRAME, null, this.blinkFrameHandler, this);
            } else {
                canvas.EventManager.removeEventListener(canvas.app.casino.Event.ENTER_FRAME, null, this.blinkFrameHandler, this);
                this.container.addChild(this.blinkContainer);
                this.blinkContainer.alpha = 1;
            }
        },
    });
    this.blinkDirection = true;
    this.index = index;
    switch (this.index) {
        case 0:
            this.color = "yellow";
            break;
        case 1:
            this.color = "blue";
            break;
        case 2:
            this.color = "red";
            break;
        case 3:
            this.color = "orange";
            break;
        case 4:
            this.color = "green";
            break;
    }
    this.container = this.addChild(new canvas.px.Container());
    this.backContainer = this.addChild(new canvas.px.Container());
    this.selectorsContainer = this.addChild(new canvas.px.Container());
    this.arrowLeft = this.container.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "arrow_" + this.color)));
    this.arrowRight = this.container.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "arrow_" + this.color)));
    this.arrowLeft.pivot = this.arrowRight.pivot = new canvas.px.Point(30, 10);
    this.button = this.addChild(new canvas.px.Graphics());
    this.button.beginFill(0, 0);
    this.button.drawCircle(18, 18, 18);
    this.button.endFill();
    this.button.interactive = true;
    this.button.buttonMode = true;
    var sprite = this.button.addChild(new canvas.px.Graphics());
    sprite.beginFill(0, 0);
    sprite.drawCircle(18, 18, 18);
    sprite.endFill();
    sprite.x = 436;
    this.blinkContainer = this.container.addChild(new canvas.px.Container());
    sprite = this.blinkContainer.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "circle_" + this.color)));
    sprite = this.blinkContainer.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "circle_" + this.color)));
    sprite.x = 436;
    sprite = this.blinkContainer.addChild(new canvas.ui.Text(canvas.Const.FONT_MYRIAD_PRO_15_BOLD_STROKE, 16777215, 20, 20, "center"));
    sprite.text = this.index + 1;
    sprite.position.set(7, 7);
    sprite = this.blinkContainer.addChild(new canvas.ui.Text(canvas.Const.FONT_MYRIAD_PRO_15_BOLD_STROKE, 16777215, 20, 20, "center"));
    sprite.text = this.index + 1;
    sprite.position.set(443, 7);
    switch (this.index) {
        case 0:
            this.back = this.backContainer.addChild(new canvas.px.TilingSprite(canvas.ResourceLoader.getImage("ui", "back_" + this.color)));
            this.back.width = 370;
            this.back.height = 7;
            this.back.position.set(48, 16);
            this.arrowLeft.scale.x = -1;
            this.arrowLeft.position.set(25, 20);
            this.arrowRight.position.set(445, 20);
            break;
        case 1:
            this.back = this.backContainer.addChild(new canvas.px.TilingSprite(canvas.ResourceLoader.getImage("ui", "back_" + this.color)));
            this.back.width = 370;
            this.back.height = 7;
            this.back.position.set(48, -3);
            this.arrowLeft.scale.x = -1;
            this.arrowLeft.position.set(25, 20);
            this.arrowRight.position.set(445, 20);
            break;
        case 2:
            this.back = this.backContainer.addChild(new canvas.px.TilingSprite(canvas.ResourceLoader.getImage("ui", "back_" + this.color)));
            this.back.width = 370;
            this.back.height = 7;
            this.back.position.set(48, 32);
            this.arrowLeft.scale.x = -1;
            this.arrowLeft.position.set(25, 20);
            this.arrowRight.position.set(445, 20);
            break;
        case 3:
            this.back = this.backContainer.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "back_" + this.color)));
            this.back.position.set(48, 16);
            this.arrowLeft.scale.x = -1;
            this.arrowLeft.position.set(25, 10);
            this.arrowRight.position.set(445, 10);
            break;
        case 4:
            this.back = this.backContainer.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "back_" + this.color)));
            this.back.position.set(48, -146);
            this.arrowLeft.scale.x = -1;
            this.arrowLeft.position.set(25, 8);
            this.arrowRight.position.set(445, 8);
            break;
    }
    this.backMask = new canvas.px.Graphics();
    this.backContainer.addChild(this.backMask);
    this.back.mask = this.backMask;
    this.selectors = [];
    for (var i = 0; i < 5; i++) {
        sprite = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "selector_" + this.color));
        this.selectors.push(sprite);
        this.selectorsContainer.addChild(sprite);
        sprite.position.set(38 + i * 80, 0);
        switch (this.index) {
            case 0:
                sprite.x += i == 0 ? 4 : 2;
                sprite.y = -11;
                break;
            case 1:
                sprite.x += i == 0 ? 4 : 2;
                sprite.y = -30;
                break;
            case 2:
                sprite.x += i == 0 ? 4 : 2;
                sprite.y = 5;
                break;
            case 3:
                switch (i) {
                    case 0:
                        sprite.y = 5;
                        break;
                    case 1:
                        sprite.y = 70;
                        break;
                    case 2:
                        sprite.y = 140;
                        break;
                    case 3:
                        sprite.y = 70;
                        break;
                    case 4:
                        sprite.y = 5;
                        break;
                }
                break;
            case 4:
                switch (i) {
                    case 0:
                        sprite.y = -45;
                        break;
                    case 1:
                        sprite.y = -115;
                        break;
                    case 2:
                        sprite.y = -180;
                        break;
                    case 3:
                        sprite.y = -115;
                        break;
                    case 4:
                        sprite.y = -45;
                        break;
                }
                break;
            default:
        }
    }
    this.animArr = [4, 8, 4, 0, -4, -8, -4, 0];
    this.animIndex = 0;
    this.button.mouseover = this.overHandler.bind(this);
    this.button.mouseout = this.outHandler.bind(this);
    this.values = [];
};
canvas.app.casino.view.SelectorView.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.casino.view.SelectorView.prototype.update = function () {
    var playAnim = false;
    this.backMask.clear();
    this.selectorsContainer.removeChildren();
    if (!this.container.parent) {
        playAnim = true;
    }
    this.removeIfExist(this.container);
    if (this.values.length == 0) return;
    if (playAnim) {
        this.playAnim();
    }
    this.addChild(this.container);
    this.backMask.beginFill(0, 1);
    var i;
    var dy = 0;
    switch (this.index) {
        case 0:
            dy = 10;
            break;
        case 1:
            dy = -10;
            break;
        case 2:
            dy = 20;
            break;
        case 3:
            this.backMask.drawCircle(113, 73, 20);
            this.backMask.drawCircle(193, 140, 20);
            this.backMask.drawCircle(270, 138, 20);
            this.backMask.drawCircle(352, 73, 20);
            for (i = 0; i < 5; i++) {
                if (this.values.indexOf(i) < 0) {
                    switch (i) {
                        case 0:
                            this.backMask.drawCircle(72, 40, 32);
                            break;
                        case 1:
                            this.backMask.drawCircle(153, 106, 32);
                            break;
                        case 2:
                            this.backMask.drawCircle(232, 175, 32);
                            break;
                        case 3:
                            this.backMask.drawCircle(310, 105, 32);
                            break;
                        case 4:
                            this.backMask.drawCircle(392, 40, 32);
                            break;
                    }
                }
            }
            break;
        case 4:
            this.backMask.drawCircle(113, -45, 20);
            this.backMask.drawCircle(193, -112, 20);
            this.backMask.drawCircle(271, -111, 20);
            this.backMask.drawCircle(352, -47, 20);
            for (i = 0; i < 5; i++) {
                if (this.values.indexOf(i) < 0) {
                    switch (i) {
                        case 0:
                            this.backMask.drawCircle(73, -11, 32);
                            break;
                        case 1:
                            this.backMask.drawCircle(153, -79, 32);
                            break;
                        case 2:
                            this.backMask.drawCircle(232, -145, 32);
                            break;
                        case 3:
                            this.backMask.drawCircle(311, -79, 32);
                            break;
                        case 4:
                            this.backMask.drawCircle(390, -11, 32);
                            break;
                    }
                }
            }
            break;
        default:
    }
    if (dy != 0) {
        this.backMask.drawRect(102, dy, 20, 20);
        this.backMask.drawRect(182, dy, 20, 20);
        this.backMask.drawRect(262, dy, 20, 20);
        this.backMask.drawRect(342, dy, 20, 20);
        for (i = 0; i < 5; i++) {
            if (this.values.indexOf(i) < 0) {
                switch (i) {
                    case 0:
                        this.backMask.drawRect(46, dy - 10, 56, 40);
                        break;
                    case 1:
                        this.backMask.drawRect(122, dy - 10, 60, 40);
                        break;
                    case 2:
                        this.backMask.drawRect(202, dy - 10, 60, 40);
                        break;
                    case 3:
                        this.backMask.drawRect(282, dy - 10, 60, 40);
                        break;
                    case 4:
                        this.backMask.drawRect(362, dy - 10, 60, 40);
                        break;
                }
            }
        }
    }
    this.backMask.endFill();
    var len = this.values.length;
    for (i = 0; i < len; i++) {
        this.selectorsContainer.addChild(this.selectors[this.values[i]]);
    }
};
canvas.app.casino.view.SelectorView.prototype.overHandler = function () {
    var model = canvas.app.casino.model;
    if (this.blink || model.isSuperGame) return;
    this.values = [0, 1, 2, 3, 4];
};
canvas.app.casino.view.SelectorView.prototype.outHandler = function () {
    this.values = this.resultValues;
};
canvas.app.casino.view.SelectorView.prototype.playAnim = function () {
    this.animIndex = 0;
    canvas.EventManager.addEventListener(canvas.app.casino.Event.ENTER_FRAME, null, this.frameHandler, this);
};
canvas.app.casino.view.SelectorView.prototype.frameHandler = function () {
    if (this.animIndex >= this.animArr.length) {
        canvas.EventManager.removeEventListener(canvas.app.casino.Event.ENTER_FRAME, null, this.frameHandler, this);
        this.arrowLeft.rotation = this.arrowRight.rotation = 0;
    } else {
        this.arrowLeft.rotation = this.arrowRight.rotation = canvas.Functions.degToRad(this.animArr[this.animIndex++]);
    }
};
canvas.app.casino.view.SelectorView.prototype.blinkFrameHandler = function () {
    if (this.blinkDirection) {
        this.blinkContainer.alpha += 0.2;
        if (this.blinkContainer.alpha >= 1) {
            this.blinkContainer.alpha = 1;
            this.blinkDirection = !this.blinkDirection;
        }
    } else {
        this.blinkContainer.alpha -= 0.2;
        if (this.blinkContainer.alpha <= 0) {
            this.blinkContainer.alpha = 0;
            this.blinkDirection = !this.blinkDirection;
        }
    }
};
canvas.app.casino.view.SuperGame = function () {
    canvas.px.Container.call(this);
    this.cards = [];
    var card;
    for (var i = 0; i < 15; i++) {
        card = new canvas.app.casino.view.CardView(i);
        card.position.set((i % 5) * 80, Math.floor(i / 5) * 69);
        if (!(i % 5)) card.x += 2;
        this.cards.push(card);
    }
    this.animArray = [0, 4, 5, 9, 10, 14, 1, 3, 6, 8, 11, 13, 2, 7, 12];
    this.active = false;
};
canvas.app.casino.view.SuperGame.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.casino.view.SuperGame.prototype.show = function () {
    var len = this.animArray.length;
    var card;
    for (var i = 0; i < len; i++) {
        card = this.cards[this.animArray[i]];
        this.addChild(card);
        card.delay = i;
        card.state = 0;
    }
    this.active = true;
};
canvas.app.casino.view.SuperGame.prototype.update = function () {
    var model = canvas.app.casino.model;
    var column,
        columnArr,
        rnd,
        card,
        index,
        len = this.cards.length,
        len2 = model.cards.length;
    var gameOver = len2 >= canvas.app.casino.Const.LINES_COUNT;
    if (gameOver) {
        columnArr = new Array();
        for (var i = 0; i < len; i++) {
            column = i % 5;
            if (!columnArr[column]) columnArr[column] = [0, 1, 2];
            index = model.cards.indexOf(i);
            if (index >= 0) {
                columnArr[column].splice(columnArr[column].indexOf(model.cardTypes[index] - 1), 1);
            }
        }
    }
    for (var i = 0; i < len; i++) {
        card = this.cards[i];
        if (card.state == 3) {
            if (gameOver) {
                card.light();
            }
            continue;
        }
        column = i % 5;
        index = model.cards.indexOf(i);
        if (index >= 0) {
            card.result = model.cardTypes[index] - 1;
            card.state = 3;
            if (gameOver) {
                card.light();
            }
        } else if (column < len2) {
            if (gameOver) {
                rnd = canvas.Functions.random(columnArr[column].length);
                card.result = columnArr[column][rnd];
                columnArr[column].splice(rnd, 1);
                card.state = 5;
            } else {
                card.state = 2;
            }
        } else if (column == len2) {
            card.state = 0;
        } else {
            card.state = 1;
        }
    }
};
canvas.app.casino.view.SuperGame.prototype.hide = function () {
    var len = this.animArray.length;
    var card;
    for (var i = 0; i < len; i++) {
        card = this.cards[this.animArray[i]];
        this.addChild(card);
        card.delay = i;
        card.state = 4;
    }
    this.active = false;
};
canvas.app.casino.view.BetStepper = function (w) {
    canvas.app.casino.view.LineStepper.call(this, w);
};
canvas.app.casino.view.BetStepper.prototype = Object.create(canvas.app.casino.view.LineStepper.prototype);
canvas.app.casino.view.BetStepper.prototype.update = function () {
    var model = canvas.app.casino.model;
    if (model.isGold) {
        this.field.gems = this.values[this.selectedIndex];
    } else {
        this.field.money = canvas.Functions.getMoney(this.values[this.selectedIndex]);
    }
};
canvas.app.casino.view.BetStepper.prototype.createField = function () {
    var model = canvas.app.casino.model;
    this.field = this.addChild(new canvas.app.view.Money(16699904, canvas.Const.FONT_MYRIAD_PRO_15_BOLD_STROKE, !model.isGold, this._width - 40, 20, "center", "top", false));
    this.field.position.set(20, 0);
};
canvas.app.casino.view.BetStepper.prototype.overHandler = function () {};
canvas.app.casino.view.BetStepper.prototype.outHandler = function () {};
canvas.app.diceGame.Const = { REQUEST_INIT: "Init", REQUEST_THROW: "Throw", REQUEST_THROW_SUPER: "ThrowSuper", REQUEST_OBJECT: "HeavensGift", DICE_COUNT: 5, PRICE_TYPE_SILVER: 1, PRICE_TYPE_BRILLIANT: 3 };
canvas.app.diceGame.Event = { ENTER_FRAME: "DiceGame.ENTER_FRAME", HINT_ADD: "DiceGame.HINT_ADD", HINT_REMOVE: "DiceGame.HINT_REMOVE", THROW_COMPLETE: "DiceGame.THROW_COMPLETE" };
canvas.app.diceGame.Main = function (model) {
    canvas.px.Container.call(this);
    this.model = model;
    this.hintManager = new canvas.utils.HintManager();
    this.hintContainer = new canvas.px.Container();
    this.hintContainer.interactive = true;
    this.hintManager.init(this.hintContainer, this.model.width, this.model.height);
    canvas.EventManager.addEventListener(canvas.app.diceGame.Event.HINT_ADD, null, this.handlerHintAdd, this);
    canvas.EventManager.addEventListener(canvas.app.diceGame.Event.HINT_REMOVE, null, this.handlerHintRemove, this);
    this.view = new canvas.app.diceGame.View();
    this.addChild(this.view);
    this.addChild(this.hintContainer);
    this.request = new canvas.utils.URLRequest();
    canvas.EventManager.addEventListener(canvas.utils.URLRequestEvent.EVENT_COMPLETE, this.request, this.requestCompleteHandler, this);
    canvas.EventManager.addEventListener(canvas.utils.URLRequestEvent.EVENT_ERROR, this.request, this.requestErrorHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.view.closeButton, this.closeClickHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.view.playButton, this.playClickHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.view.playButton2, this.play2ClickHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.HtmlTextEvent.EVENT_LINK, this.view.infoField, this.infoClickHandler, this);
    canvas.EventManager.addEventListener(canvas.app.diceGame.Event.THROW_COMPLETE, null, this.throwCompleteHandler, this);
};
canvas.app.diceGame.Main.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.diceGame.Main.prototype.handlerHintAdd = function (e) {
    this.hintManager.add(e.params.target, e.params.params);
};
canvas.app.diceGame.Main.prototype.handlerHintRemove = function (e) {
    this.hintManager.remove(e.params.target);
};
canvas.app.diceGame.Main.prototype.requestCompleteHandler = function () {
    this.model.parse(JSON.parse(this.request.request.responseText)[canvas.app.diceGame.Const.REQUEST_OBJECT + "|" + this.request.type]);
    this.view.dicesAnim.start();
};
canvas.app.diceGame.Main.prototype.requestErrorHandler = function () {};
canvas.app.diceGame.Main.prototype.sendRequest = function (type) {
    var url = this.model.entryPoint + "?object=" + canvas.app.diceGame.Const.REQUEST_OBJECT + "&action=" + type + "&json_mode_on=1";
    this.request.type = type;
    this.request.load(url);
    this.view.lockButtons();
};
canvas.app.diceGame.Main.prototype.closeClickHandler = function () {
    closeHeavensGift();
};
canvas.app.diceGame.Main.prototype.infoClickHandler = function () {
    canvas.Functions.navigateToURL(canvas.Translator.getText(609), "_blank");
};
canvas.app.diceGame.Main.prototype.playClickHandler = function () {
    this.sendRequest(canvas.app.diceGame.Const.REQUEST_THROW);
};
canvas.app.diceGame.Main.prototype.play2ClickHandler = function () {
    this.sendRequest(canvas.app.diceGame.Const.REQUEST_THROW_SUPER);
};
canvas.app.diceGame.Main.prototype.throwCompleteHandler = function () {
    this.view.update();
};
canvas.app.diceGame.Model = function (par) {
    this.entryPoint = par.dice_game_controller_url ? par.dice_game_controller_url : canvas.Config.entryPoint;
};
canvas.app.diceGame.Model.prototype.parse = function (data) {
    var a, obj, itemData, i, len;
    if (data.state != undefined) {
        if (data.state.user_id != undefined) this.userID = data.state.user_id;
        if (data.state.today_game_cnt != undefined) this.gameIndex = parseInt(data.state.today_game_cnt);
        if (data.state.progress_super_game_cnt != undefined) this.superGameProgress = parseInt(data.state.progress_super_game_cnt);
        if (data.state.prize_num != undefined) this.selectedItemIndex = data.state.prize_num;
    }
    if (data.progress_super_game_max != undefined) this.superGameMax = parseInt(data.progress_super_game_max);
    if (data.prize_list != undefined) {
        this.items = new Array();
        len = data.prize_list.length;
        for (i = 0; i < len; i++) {
            obj = data.prize_list[i];
            itemData = new Object();
            itemData.id = obj.artikul_id;
            itemData.image = obj.picture;
            itemData.title = "Item" + itemData.id;
            this.items.push(itemData);
        }
    }
    if (data.butt != undefined || data.butt == null) {
        this.buttonEnabled = data.butt != null;
    }
    if (data.butt_cost != undefined) {
        if (data.butt_cost.money != undefined) {
            this.buttonPrice = data.butt_cost.money;
        }
        if (data.butt_cost.money_type != undefined) {
            this.buttonPriceType = parseInt(data.butt_cost.money_type);
        }
    }
    if (data.butt_super != undefined || data.butt_super == null) {
        this.button2Enabled = data.butt_super != null;
    }
    if (data.dice_res != undefined) {
        this.dicesResult = data.dice_res;
        if (this.dicesResult != null) {
            this.dicesCount = this.dicesResult.length;
        }
    }
};
canvas.app.diceGame.View = function () {
    canvas.px.Container.call(this);
    var model = canvas.app.diceGame.model;
    this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("diceGame", "back")));
    this.closeButton = this.addChild(
        new canvas.ui.Button(
            canvas.ResourceLoader.getImage("diceGame", "main_window_close_base"),
            canvas.ResourceLoader.getImage("diceGame", "main_window_close_over"),
            canvas.ResourceLoader.getImage("diceGame", "main_window_close_down"),
            null
        )
    );
    this.closeButton.position.set(422, 0);
    canvas.EventManager.dispatchEvent(canvas.app.diceGame.Event.HINT_ADD, null, { target: this.closeButton, params: new canvas.utils.HintParams(new canvas.app.view.MappingHint(canvas.Translator.getText(608))) });
    var sprite = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_15_BOLD_STROKE, 16118721, this.width - 20, 20, "center"));
    sprite.position.set(0, 6);
    sprite.text = canvas.Translator.getText(600);
    sprite = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_13, 7158283, 270, 22, "center"));
    sprite.position.set(91, 45);
    sprite.text = canvas.Translator.getText(601);
    sprite = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_13, 7158283, 340, 22, "center"));
    sprite.position.set(54, 132);
    sprite.text = canvas.Translator.getText(602);
    sprite = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_13, 7158283, 340, 22, "center"));
    sprite.position.set(54, 132);
    sprite.text = canvas.Translator.getText(602);
    sprite = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_13, 7158283, 85, 22, "center"));
    sprite.position.set(72, 219);
    sprite.text = canvas.Translator.getText(603);
    sprite = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_13, 7158283, 103, 22, "center"));
    sprite.position.set(260, 219);
    sprite.text = canvas.Translator.getText(604);
    this.infoField = this.addChild(new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_11, canvas.Const.FONT_TAHOMA_11_BOLD, 7158283, 394, 90, "left"));
    this.infoField.position.set(26, 409);
    this.infoField.text = canvas.Translator.getText(605);
    var diceItem,
        tmpX = 28,
        i,
        j,
        k,
        item;
    this.dices = new Array();
    for (i = 0; i < canvas.app.diceGame.Const.DICE_COUNT; i++) {
        diceItem = this.addChild(new canvas.app.diceGame.view.DiceItem(i < 4, i < 2 ? 1 : i < 4 ? 2 : 3));
        this.dices.push(diceItem);
        diceItem.position.set(tmpX, 68);
        tmpX += 45;
    }
    this.progressor = this.addChild(new canvas.app.diceGame.view.ProgressView());
    this.progressor.position.set(33, 155);
    this.playButton = this.addChild(new canvas.app.view.MainButton(null, null, null, null, null, true));
    this.playButton.setSize(170);
    this.playButton.position.set(255, 75);
    this.playButton2 = this.addChild(new canvas.app.view.MainButton());
    this.playButton2.setSize(185);
    this.playButton2.position.set(240, 160);
    this.playButton2.setTitle(canvas.Translator.getText(606));
    this.list = this.addChild(new canvas.ui.List(canvas.ui.ListType.VERTICAL, 6));
    this.list.setSize(220, 150);
    this.list.position.set(206, 250);
    this.list._paddingV = this.list._paddingH = 2;
    for (i = 0; i < 24; i++) {
        item = new canvas.app.diceGame.view.ItemRenderer(i + 1);
        this.list.add(item, false);
        item.data = model.items[i];
    }
    this.list.update();
    this.dicesAnim = this.addChild(new canvas.app.diceGame.view.DicesAnim());
    this.dicesAnim.position.set(35, 250);
    this.update();
};
canvas.app.diceGame.View.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.diceGame.View.prototype.update = function () {
    var model = canvas.app.diceGame.model;
    var item,
        len = this.list.items.length,
        i;
    for (i = 0; i < len; i++) {
        item = this.list.items[i];
        item.selector.visible = item.id == model.selectedItemIndex;
        if (item.selector.visible) {
            item.startFlicking(5);
        }
    }
    len = this.dices.length;
    for (i = 0; i < len; i++) {
        this.dices[i].selector.visible = model.gameIndex == i + 1;
    }
    this.progressor.progress = model.superGameProgress / model.superGameMax;
    this.progressor.field.text = model.superGameProgress + "/" + model.superGameMax;
    if (parseFloat(model.buttonPrice) > 0) {
        this.playButton.setTitle(
            canvas.Translator.getText(607) +
            " " +
            parseFloat(model.buttonPrice).toString() +
            " <img src='" +
            (model.buttonPriceType == canvas.app.diceGame.Const.PRICE_TYPE_BRILLIANT ? "money_crystal" : "money_silver") +
            "' xOffset='0' yOffset='2' atlas='diceGame'/>"
        );
    } else {
        this.playButton.setTitle(canvas.Translator.getText(606));
    }
    this.playButton.enabled = model.buttonEnabled;
    this.playButton2.enabled = model.button2Enabled;
};
canvas.app.diceGame.View.prototype.lockButtons = function () {
    this.playButton.enabled = false;
    this.playButton2.enabled = false;
};
canvas.app.diceGame.view.DiceItem = function (arrow, image) {
    canvas.px.Container.call(this);
    var sprite;
    this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("diceGame", "dice_back")));
    this.selector = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("diceGame", "dice_selector")));
    this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("diceGame", "dice" + image)));
    this.selector.visible = false;
    if (arrow) {
        sprite = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("diceGame", "dice_arrow")));
        sprite.position.set(38, 15);
    }
};
canvas.app.diceGame.view.DiceItem.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.diceGame.view.DicesAnim = function () {
    canvas.px.Container.call(this);
    this.container = this.addChild(new canvas.px.Container());
    this.DICE_SIZE = 35;
};
canvas.app.diceGame.view.DicesAnim.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.diceGame.view.DicesAnim.prototype.start = function () {
    var model = canvas.app.diceGame.model;
    this.dices = new Array();
    canvas.Functions.destroyChildren(this.container);
    this.cells = [
        new canvas.px.Rectangle(0, 0, 72 - this.DICE_SIZE, 68 - this.DICE_SIZE),
        new canvas.px.Rectangle(72, 0, 72 - this.DICE_SIZE, 68 - this.DICE_SIZE),
        new canvas.px.Rectangle(0, 68, 72 - this.DICE_SIZE, 68 - this.DICE_SIZE),
        new canvas.px.Rectangle(72, 68, 72 - this.DICE_SIZE, 68 - this.DICE_SIZE),
    ];
    canvas.EventManager.addEventListener(canvas.app.diceGame.Event.ENTER_FRAME, null, this.frameHandler, this);
    this.index = model.dicesCount + 7;
    this.delayIndex = 0;
    this.animIndex = 0;
};
canvas.app.diceGame.view.DicesAnim.prototype.throwDice = function (result) {
    var mc = new canvas.px.MovieClip(canvas.Config.effectsPath + "dice" + result, null, false);
    mc.frameEvent = canvas.app.diceGame.Event.ENTER_FRAME;
    var index = canvas.Functions.random(this.cells.length);
    var r = this.cells[index];
    this.cells.splice(index, 1);
    mc.position.set(Math.round(mc.width * 0.5 + r.x + Math.random() * r.width), Math.round(mc.height * 0.5 + r.y + Math.random() * r.height));
    this.container.addChild(mc);
    this.dices.push(mc);
    mc.scale.set(3, 3);
    mc.gotoAndPlay(1);
};
canvas.app.diceGame.view.DicesAnim.prototype.frameHandler = function () {
    var model = canvas.app.diceGame.model;
    var len = this.dices.length,
        d;
    for (var i = 0; i < len; i++) {
        d = this.dices[i];
        if (d.scale.x > 1) d.scale.x -= 0.1;
        else d.scale.x = 1;
        if (d.scale.y > 1) d.scale.y -= 0.1;
        else d.scale.y = 1;
    }
    if (this.index > 0) {
        if (this.delayIndex > 0) {
            this.delayIndex--;
        } else {
            if (this.animIndex < model.dicesCount) {
                this.throwDice(model.dicesResult[this.animIndex++]);
            }
            this.delayIndex = 10;
            this.index--;
        }
    } else {
        this.finish();
    }
};
canvas.app.diceGame.view.DicesAnim.prototype.finish = function () {
    canvas.EventManager.removeEventListener(canvas.app.diceGame.Event.ENTER_FRAME, null, this.frameHandler, this);
    canvas.EventManager.dispatchEvent(canvas.app.diceGame.Event.THROW_COMPLETE);
};
canvas.app.diceGame.view.ItemRenderer = function (id) {
    canvas.ui.ListRenderer.call(this);
    this.id = id;
    var sprite;
    this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("diceGame", "item_back")));
    this.setSize(this.width, this.height);
    this.selector = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("diceGame", "item_selector")));
    this.selector.position.set(-1, -1);
    this.selector.visible = false;
    this.image = this.addChild(new canvas.ui.Image());
    this.image.position.set(2, 2);
    this.image.scale.set(0.5, 0.5);
    sprite = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("diceGame", "item_count")));
    sprite.position.set(16, 19);
    this.countField = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_9, 16765254, 16, 16, "center"));
    this.countField.position.set(17, 21);
    this.countField.text = this.id;
    this.mouseover = this.overHandler.bind(this);
    this.mouseout = this.outHandler.bind(this);
    this.interactive = true;
};
canvas.app.diceGame.view.ItemRenderer.prototype = Object.create(canvas.ui.ListRenderer.prototype);
canvas.app.diceGame.view.ItemRenderer.prototype.update = function () {
    if (this.data) {
        this.image.setImage(this.data.image);
    }
};
canvas.app.diceGame.view.ItemRenderer.prototype.overHandler = function () {
    if (this.data) {
        canvas.app.diceGame.view.ItemRenderer.overedItem = this;
        _top().showAltInHeavensGift(this.data.id, 2);
    }
};
canvas.app.diceGame.view.ItemRenderer.prototype.outHandler = function () {
    if (this.data && canvas.app.diceGame.view.ItemRenderer.overedItem == this) {
        _top().showAltInHeavensGift(this.data.id, 0);
    }
};
canvas.app.diceGame.view.ItemRenderer.prototype.startFlicking = function () {
    canvas.EventManager.addEventListener(canvas.app.diceGame.Event.ENTER_FRAME, null, this.frameHandler, this);
    this.index = 5;
    this.direction = true;
    this.selector.visible = true;
    this.selector.alpha = 0;
};
canvas.app.diceGame.view.ItemRenderer.prototype.frameHandler = function () {
    if (this.index > 0) {
        if (this.direction && this.selector.alpha >= 1) {
            this.index--;
            this.direction = false;
            return;
        }
        this.selector.alpha += this.direction ? 0.2 : -0.2;
        if (this.selector.alpha <= 0 && !this.direction) this.direction = true;
    } else {
        canvas.EventManager.removeEventListener(canvas.app.diceGame.Event.ENTER_FRAME, null, this.frameHandler, this);
    }
};
canvas.app.diceGame.view.ProgressView = function (arrow, image) {
    canvas.ui.Progress.call(this);
    this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("diceGame", "progress_back")));
    var sprite = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("diceGame", "progress_full")));
    sprite.position.set(5, 11);
    this.sprite.position.set(5, 11);
    this.setSize(sprite.width, sprite.height);
    sprite.mask = this.sprite;
    sprite = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("diceGame", "progress_icon")));
    sprite.position.set(157, -4);
    this.field = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_12_BOLD_STROKE, 16511686, 151, 20, "center"));
    this.field.position.set(7, 15);
};
canvas.app.diceGame.view.ProgressView.prototype = Object.create(canvas.ui.Progress.prototype);
canvas.app.diceGame.view.ProgressView.prototype.update = function () {
    canvas.ui.Progress.prototype.update.call(this);
};
canvas.app.treasure.Const = { BASE_ROTATIONS: [90, -90, 0, -180, -90] };
canvas.app.treasure.Event = { ENTER_FRAME: "Treasure.ENTER_FRAME", CRACK_GEMS_CONFIRM: "Treasure.CRACK_GEMS_CONFIRM" };
canvas.app.treasure.Main = function (model) {
    canvas.px.Container.call(this);
    this.model = model;
    this.model.halfWidth = Math.round(this.model.width * 0.5);
    this.view = new canvas.app.treasure.View();
    this.addChild(this.view);
    this.view.y = 6;
    this.windowsManager = new canvas.utils.WindowsManager();
    this.windowsContainer = this.addChild(new canvas.px.Container());
    this.windowsManager.init(this.windowsContainer, this.model.width, this.model.height, this.view);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.view.closeButton, this.closeClickHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.view.crackGemButton, this.crackGemClickHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.view.crackProfButton, this.crackProfClickHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.view.openButton, this.openClickHandler, this);
    var len = this.view.circles.length;
    for (var i = 0; i < len; i++) {
        canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.view.circles[i].getChildAt(0), this.clickHandler, this);
    }
    canvas.EventManager.addEventListener(canvas.app.treasure.Event.CRACK_GEMS_CONFIRM, null, this.crackGemConfirmHandler, this);
    this.view.circlesContainer.mouseover = this.overHandler.bind(this);
    this.view.circlesContainer.mouseout = this.outHandler.bind(this);
};
canvas.app.treasure.Main.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.treasure.Main.prototype.closeClickHandler = function () {
    closePuzzle();
};
canvas.app.treasure.Main.prototype.crackGemClickHandler = function () {
    this.windowsManager.openWindow(this.view.confirmWin);
    this.view.confirmWin.init(canvas.Translator.getText(905), { name: canvas.app.treasure.Event.CRACK_GEMS_CONFIRM }, canvas.Translator.getText(900), canvas.Translator.getText(2019));
};
canvas.app.treasure.Main.prototype.crackProfClickHandler = function () {
    openPuzzle("breakopen");
};
canvas.app.treasure.Main.prototype.openClickHandler = function () {
    openPuzzle("solve", this.model.logTurns.join(","));
};
canvas.app.treasure.Main.prototype.crackGemConfirmHandler = function () {
    openPuzzle("purchase");
};
canvas.app.treasure.Main.prototype.overHandler = function (e) {
    this.view.circlesContainer.mousemove = this.moveHandler.bind(this);
    this.moveHandler(e);
};
canvas.app.treasure.Main.prototype.outHandler = function () {
    this.view.circlesContainer.mousemove = null;
    this.view.leftArrow.visible = this.view.rightArrow.visible = false;
};
canvas.app.treasure.Main.prototype.moveHandler = function (e) {
    this.model.direction = e.data.global.x < this.model.halfWidth;
    this.view.leftArrow.visible = this.model.direction;
    this.view.rightArrow.visible = !this.model.direction;
};
canvas.app.treasure.Main.prototype.clickHandler = function (e) {
    if (e.target.circleIndex != undefined) {
        var index = e.target.circleIndex - 1;
        var relations = this.model.relationsMatrix[index];
        var len = this.view.circles.length;
        if (relations != null) {
            this.model.puzzleComplete = true;
            for (var i = 0; i < len; i++) {
                if (relations[i]) {
                    this.model.targetRotations[i] += this.model.direction ? 90 : -90;
                }
                if (this.model.puzzleComplete && this.model.targetRotations[i] % 360 != 0) this.model.puzzleComplete = false;
            }
        }
        this.model.logTurns.push(this.model.direction ? index + 1 : -(index + 1));
        this.view.update();
    }
};
canvas.app.treasure.Main.prototype.destroy = function () {
    canvas.EventManager.removeEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.view.closeButton, this.closeClickHandler, this);
    canvas.EventManager.removeEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.view.crackGemButton, this.crackGemClickHandler, this);
    canvas.EventManager.removeEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.view.crackProfButton, this.crackProfClickHandler, this);
    canvas.EventManager.removeEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.view.openButton, this.openClickHandler, this);
    var len = this.view.circles.length;
    for (var i = 0; i < len; i++) {
        canvas.EventManager.removeEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.view.circles[i].getChildAt(0), this.clickHandler, this);
    }
    canvas.EventManager.removeEventListener(canvas.app.treasure.Event.CRACK_GEMS_CONFIRM, null, this.crackGemConfirmHandler, this);
    this.view.circlesContainer.mouseover = null;
    this.view.circlesContainer.mouseout = null;
    canvas.px.Container.prototype.destroy.apply(this, [{ children: true }]);
};
canvas.app.treasure.Model = function (par) {
    this.baseState = par.puzzle == undefined ? [1, 0, 2, 3, 1] : par.puzzle.split("-");
    this.maxTurns = par.steps == undefined ? 24 : parseInt(par.steps);
    this.canBreakOpen = par.can_breakopen == undefined ? 0 : parseFloat(par.can_breakopen);
    this.canPurchase = par.can_purchase == undefined ? 0 : parseFloat(par.can_purchase);
    var matrix = par.matrix == undefined ? "1010111101101011011110001" : parseInt(par.matrix).toString(2);
    this.relationsMatrix = new Array();
    this.logTurns = new Array();
    var a = new Array(),
        i,
        len = matrix.length;
    for (i = 1; i <= len; i++) {
        a.push(matrix.charAt(i - 1) == "1");
        if (i % 5 == 0) {
            this.relationsMatrix.push(a);
            a = new Array();
        }
    }
    this.targetRotations = [0, 0, 0, 0, 0];
    this.puzzleComplete = false;
};
canvas.app.treasure.View = function () {
    canvas.px.Container.call(this);
    var model = canvas.app.treasure.model;
    this.confirmWin = new canvas.app.manor.view.controls.ConfirmWindow();
    this.confirmWin.dragAvailable = false;
    this.circles = new Array();
    this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("treasure", "back")));
    this.leftArrow = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("treasure", "arrow_left")));
    this.leftArrow.position.set(50, 165);
    this.leftArrow.visible = false;
    this.rightArrow = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("treasure", "arrow_right")));
    this.rightArrow.position.set(515, 165);
    this.rightArrow.visible = false;
    this.circlesContainer = this.addChild(new canvas.px.Container());
    this.circlesContainer.interactive = true;
    var i, sprite, tmp, circle;
    for (i = 1; i <= 5; i++) {
        circle = this.circlesContainer.addChild(new canvas.px.Container());
        sprite = circle.addChild(new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("treasure", "circle" + i)));
        sprite.pivot = new canvas.px.Point(Math.round(sprite.width * 0.5), Math.round(sprite.height * 0.5));
        sprite.rotation = canvas.Functions.degToRad(canvas.app.treasure.Const.BASE_ROTATIONS[i - 1]);
        this.circles.push(circle);
        circle.position.set(306, 214);
        tmp = Math.round(sprite.width * 0.5);
        sprite.sprite.hitArea = new canvas.px.Circle(tmp, tmp, tmp);
        circle.rotation = canvas.Functions.degToRad(90 * model.baseState[i - 1]);
        sprite.circleIndex = i;
        model.targetRotations[i - 1] = canvas.Functions.radToDeg(circle.rotation);
    }
    sprite = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("treasure", "arrow_center")));
    sprite.position.set(282, -10);
    this.progressBar = this.addChild(new canvas.app.treasure.view.ProgressBar());
    this.progressBar.position.set(85, 391);
    this.closeButton = this.addChild(new canvas.ui.Button(canvas.ResourceLoader.getImage("treasure", "cross_base"), canvas.ResourceLoader.getImage("treasure", "cross_over")));
    this.closeButton.position.set(524, 40);
    this.crackGemButton = this.addChild(new canvas.app.treasure.view.Button());
    this.crackGemButton.position.set(53, 433);
    this.crackProfButton = this.addChild(new canvas.app.treasure.view.Button());
    this.crackProfButton.position.set(218, 433);
    this.crackProfButton.field.y -= 10;
    this.openButton = this.addChild(new canvas.app.treasure.view.Button());
    this.openButton.setTitle(canvas.Translator.getText(901));
    this.openButton.position.set(384, 433);
    this.openButton.enabled = false;
    this.update();
};
canvas.app.treasure.View.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.treasure.View.prototype.update = function () {
    var model = canvas.app.treasure.model;
    this.crackGemButton.enabled = model.canPurchase > 0;
    this.crackGemButton.setTitle(canvas.Translator.getText(900) + (model.canPurchase == 0 ? "" : " " + model.canPurchase.toString()) + " <img src='money_crystal' xOffset='0' yOffset='3' atlas='treasure'/>");
    this.crackProfButton.enabled = model.canBreakOpen > 0;
    this.crackProfButton.setTitle(canvas.Translator.getText(900) + (model.canBreakOpen == 0 ? "" : " " + model.canBreakOpen.toString()) + " <img src='key' xOffset='0' yOffset='4' atlas='treasure'/>");
    this.progressBar.setTitle(canvas.Translator.getText(902) + ": " + model.logTurns.length + "/" + model.maxTurns);
    this.progressBar.progress = model.logTurns.length / model.maxTurns;
    if (model.puzzleComplete) {
        this.circlesContainer.interactiveChildren = false;
        this.openButton.enabled = true;
    } else if (this.progressBar.progress == 1) {
        this.progressBar.setTitle(canvas.Translator.getText(903));
        this.circlesContainer.interactiveChildren = false;
    }
    canvas.EventManager.addEventListener(canvas.app.treasure.Event.ENTER_FRAME, null, this.frameHandler, this);
};
canvas.app.treasure.View.prototype.frameHandler = function () {
    var i,
        len = this.circles.length,
        sprite,
        rot,
        target;
    var model = canvas.app.treasure.model;
    var needUpdate = false;
    for (i = 0; i < len; i++) {
        sprite = this.circles[i];
        if (sprite != null) {
            rot = canvas.Functions.degToRad(model.targetRotations[i]);
            if (sprite.rotation > rot) {
                target = sprite.rotation - 0.05;
                if (target < rot) target = rot;
                sprite.rotation = target;
                needUpdate = true;
            } else if (sprite.rotation < rot) {
                target = sprite.rotation + 0.05;
                if (target > rot) target = rot;
                sprite.rotation = target;
                needUpdate = true;
            }
        }
    }
    if (!needUpdate) {
        canvas.EventManager.removeEventListener(canvas.app.treasure.Event.ENTER_FRAME, null, this.frameHandler, this);
    }
};
canvas.app.treasure.view.Button = function () {
    canvas.ui.Button.call(this, canvas.ResourceLoader.getImage("treasure", "button_base"), canvas.ResourceLoader.getImage("treasure", "button_over"), null, canvas.ResourceLoader.getImage("treasure", "button_disabled"));
    this.field = this.addChild(new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_14_BOLD_STROKE, canvas.Const.FONT_TAHOMA_14_BOLD_STROKE, 15848845, 151, 20, "center"));
    this.field.position.set(10, 16);
    this.field.interactive = false;
};
canvas.app.treasure.view.Button.prototype = Object.create(canvas.ui.Button.prototype);
canvas.app.treasure.view.Button.prototype.setTitle = function (title) {
    this.field.text = title;
};
canvas.app.treasure.view.ProgressBar = function () {
    canvas.ui.Progress.call(this);
    this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("treasure", "progress_back")));
    var sprite = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("treasure", "progress")));
    sprite.position.set(11, 8);
    this.sprite.position.set(sprite.x, sprite.y);
    this.setSize(sprite.width, sprite.height);
    sprite.mask = this.sprite;
    this.field = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_14_BOLD_STROKE, 15848845, this._width, 20, "center"));
    this.field.position.set(sprite.x, 13);
};
canvas.app.treasure.view.ProgressBar.prototype = Object.create(canvas.ui.Progress.prototype);
canvas.app.treasure.view.ProgressBar.prototype.setTitle = function (title) {
    this.field.text = title;
};
canvas.app.wheel.Const = { ROTATE_DELTA: 45, NUM_SECTORS: 8, OBJECT_NAME: "wheelfortune", REQUEST_INIT: "init", REQUEST_SPIN: "spin", REQUEST_NEWGAME: "new_game", REQUEST_USE: "use", REQUEST_RESET: "reset" };
canvas.app.wheel.Event = { ENTER_FRAME: "Wheel.ENTER_FRAME", HINT_ADD: "Wheel.HINT_ADD", HINT_REMOVE: "Wheel.HINT_REMOVE", COMPLETE: "Wheel.COMPLETE", NEW_GAME: "Wheel.NEW_GAME", USE: "Wheel.USE" };
canvas.app.wheel.Main = function (model) {
    canvas.px.Container.call(this);
    this.model = model;
    this.view = this.addChild(new canvas.app.wheel.View());
    this.windowsManager = new canvas.utils.WindowsManager();
    this.windowsContainer = this.addChild(new canvas.px.Container());
    this.hintManager = new canvas.utils.HintManager();
    this.hintContainer = this.addChild(new canvas.px.Container());
    this.hintContainer.interactive = true;
    this.hintManager.init(this.hintContainer, this.model.width, this.model.height);
    canvas.EventManager.addEventListener(canvas.app.wheel.Event.HINT_ADD, null, this.handlerHintAdd, this);
    canvas.EventManager.addEventListener(canvas.app.wheel.Event.HINT_REMOVE, null, this.handlerHintRemove, this);
    canvas.EventManager.addEventListener(canvas.app.wheel.Event.COMPLETE, null, this.wheelCompleteHandler, this);
    canvas.EventManager.addEventListener(canvas.app.wheel.Event.NEW_GAME, null, this.newGameHandler, this);
    canvas.EventManager.addEventListener(canvas.app.wheel.Event.USE, null, this.useHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.view.button, this.buttonClickHandler, this);
    this.sendRequest(canvas.app.wheel.Const.REQUEST_INIT);
};
canvas.app.wheel.Main.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.wheel.Main.prototype.handlerHintAdd = function (e) {
    this.hintManager.add(e.params.target, e.params.params);
};
canvas.app.wheel.Main.prototype.handlerHintRemove = function (e) {
    this.hintManager.remove(e.params.target);
};
canvas.app.wheel.Main.prototype.resize = function () {
    this.windowsManager.init(this.windowsContainer, this.model.width, this.model.height, this.view);
};
canvas.app.wheel.Main.prototype.swfObject = function (data) {
    var str;
    var obj;
    if (data) {
        for (str in data) {
            obj = data[str];
            if (!canvas.Functions.testStatus(obj)) {
                showError(obj.error);
            }
            switch (str) {
                case canvas.app.wheel.Const.OBJECT_NAME + "|" + canvas.app.wheel.Const.REQUEST_INIT:
                case canvas.app.wheel.Const.OBJECT_NAME + "|" + canvas.app.wheel.Const.REQUEST_NEWGAME:
                case canvas.app.wheel.Const.OBJECT_NAME + "|" + canvas.app.wheel.Const.REQUEST_SPIN:
                    this.parseData(obj, str.split("|")[1]);
                    break;
                case canvas.app.wheel.Const.OBJECT_NAME + "|" + canvas.app.wheel.Const.REQUEST_RESET:
                    this.sendRequest(canvas.app.wheel.Const.REQUEST_INIT);
                    break;
            }
        }
    }
};
canvas.app.wheel.Main.prototype.parseData = function (data, reqName) {
    this.model.data = data;
    this.model.update();
    var error = data["error"];
    if (error) {
        switch (reqName) {
            case canvas.app.wheel.Const.REQUEST_SPIN:
                break;
        }
        if (reqName != canvas.app.wheel.Const.REQUEST_NEWGAME) this.view.wheel.stopRotate({});
        return;
    }
    this.view.wheel.stopRotate(data);
    this.view.timer.update(data);
    switch (reqName) {
        case canvas.app.wheel.Const.REQUEST_INIT:
            this.view.init();
            this.update(false);
            break;
        case canvas.app.wheel.Const.REQUEST_NEWGAME:
            this.update(false);
            break;
    }
};
canvas.app.wheel.Main.prototype.requestCompleteHandler = function () {
    this.model.parse(JSON.parse(this.request.request.responseText)[canvas.app.wheel.Const.REQUEST_OBJECT + "|" + this.request.type]);
};
canvas.app.wheel.Main.prototype.requestErrorHandler = function () {};
canvas.app.wheel.Main.prototype.sendRequest = function (type) {
    if (type != canvas.app.wheel.Const.REQUEST_NEWGAME && type != canvas.app.wheel.Const.REQUEST_USE) this.view.wheel.startRotate();
    wheelFortuneAction(type);
};
canvas.app.wheel.Main.prototype.wheelCompleteHandler = function () {
    this.update(true);
};
canvas.app.wheel.Main.prototype.update = function (animated) {
    this.view.update(animated);
};
canvas.app.wheel.Main.prototype.buttonClickHandler = function () {
    if (!this.view.button.buttonMode) return;
    this.sendRequest(canvas.app.wheel.Const.REQUEST_SPIN);
    this.view.button.enabled = false;
};
canvas.app.wheel.Main.prototype.newGameHandler = function () {
    this.sendRequest(canvas.app.wheel.Const.REQUEST_NEWGAME);
};
canvas.app.wheel.Main.prototype.useHandler = function () {
    this.sendRequest(canvas.app.wheel.Const.REQUEST_USE);
};
canvas.app.wheel.Model = function (par) {
    this.urlInit = par["init_url"] ? par["init_url"] : "/mini_game_conf.php?mode=wheel_fortune&action=init";
    this.urlSpin = par["spin_url"] ? par["spin_url"] : "/mini_game_conf.php?mode=wheel_fortune&action=spin";
    this.urlNewGame = par["newgame_url"] ? par["newgame_url"] : "/mini_game_conf.php?mode=wheel_fortune&action=new_game";
    this.gamePrce = par.game_price ? parseInt(par.game_price) : 100;
    this.gamePriceUrl = par.game_price_url;
    this.maxPrize = parseInt(par["highest[WF_MAX_PRIZE]"]) || 0;
    this.maxUserPrize = parseInt(par["highest[WF_MAX_USER]"]) || 0;
};
canvas.app.wheel.Model.prototype.update = function () {
    if (this.data["prize"] != undefined) {
        this.maxUserPrize = Math.max(parseInt(this.data["prize"]), this.maxUserPrize);
        this.maxPrize = Math.max(this.maxPrize, this.maxUserPrize);
    }
};
canvas.app.wheel.View = function () {
    canvas.px.Container.call(this);
    this.wheel = new canvas.app.wheel.view.WheelView();
    this.wheel.position.set(163, 163);
    this.button = new canvas.app.wheel.view.SpinButton();
    this.button.position.set(103, 103);
    this.infoView = new canvas.app.wheel.view.GameInfoView();
    this.timer = this.addChild(new canvas.app.wheel.view.TimerView());
};
canvas.app.wheel.View.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.wheel.View.prototype.init = function () {
    this.addChild(this.wheel);
    this.addChild(this.button);
    this.addChild(this.infoView);
    this.addChild(this.timer);
};
canvas.app.wheel.View.prototype.update = function (animated) {
    var model = canvas.app.wheel.model;
    this.button.update(model.data);
    this.infoView.update(model.data, animated);
};
canvas.app.wheel.view.GameInfoView = function () {
    canvas.px.Container.call(this);
    var model = canvas.app.wheel.model;
    var label = this.addChild(new canvas.ui.Text(canvas.Const.FONT_CUPRUM_22_BOLD, 5913896, 300, 35, "center"));
    label.position.set(310, 122);
    label.text = canvas.Translator.getText(1516);
    this.fieldContainer = this.addChild(new canvas.px.Container());
    this.fieldContainer.position.set(460, 170);
    this.field = this.fieldContainer.addChild(new canvas.ui.Text(canvas.Const.FONT_CUPRUM_40_BOLD, 5913896, 100, 40, "center"));
    this.field.text = "0%";
    this.field.position.set(-50, -20);
    this.maxWinValue = this.addChild(new canvas.ui.HtmlText(canvas.Const.FONT_CUPRUM_12_BOLD, canvas.Const.FONT_CUPRUM_12_BOLD, 5913896, 240, 70, "center", "middle"));
    this.maxWinValue.position.set(340, 50);
    this.maxDailyWinValue = this.addChild(new canvas.ui.HtmlText(canvas.Const.FONT_CUPRUM_12_BOLD, canvas.Const.FONT_CUPRUM_12_BOLD, 5913896, 240, 70, "center", "middle"));
    this.maxDailyWinValue.position.set(340, 195);
    this.useBonus = this.addChild(new canvas.app.view.MainButton());
    this.useBonus.setSize(200);
    this.useBonus.setTitle(canvas.Translator.getText(1517));
    this.useBonus.position.set(361, 260);
    this.newGame = this.addChild(new canvas.app.view.MainButton(null, null, null, null, null, true));
    this.newGame.setSize(200);
    this.newGame.setTitle(canvas.Translator.getText(1518) + " " + model.gamePrce + " <img src='" + model.gamePriceUrl + "' xOffset='0' yOffset='2'/>");
    this.newGame.position.set(361, 295);
    this.window = new canvas.app.manor.view.controls.ConfirmWindow();
    this.window.dragAvailable = false;
    this.window.messageField.color = 10027008;
    this.window.init(canvas.Translator.getText(1519), { name: canvas.app.wheel.Event.NEW_GAME });
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.useBonus, this.useBonusHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.newGame, this.newGameHandler, this);
};
canvas.app.wheel.view.GameInfoView.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.wheel.view.GameInfoView.prototype.useBonusHandler = function () {
    canvas.EventManager.dispatchEvent(canvas.app.wheel.Event.USE);
};
canvas.app.wheel.view.GameInfoView.prototype.newGameHandler = function () {
    if (this.data["prize"] > 0) {
        canvas.utils.WindowsManager.instance.openWindow(this.window);
    } else {
        this.newGame.enabled = false;
        canvas.EventManager.dispatchEvent(canvas.app.wheel.Event.NEW_GAME);
    }
};
canvas.app.wheel.view.GameInfoView.prototype.update = function (data, animated) {
    var model = canvas.app.wheel.model;
    if (animated == undefined) animated = true;
    this.data = data;
    this.field.color = 5913896;
    if (animated) {
        this.fieldContainer.scale.set(1.5, 1.5);
        canvas.EventManager.addEventListener(canvas.app.wheel.Event.ENTER_FRAME, null, this.frameHandler, this);
    } else {
        this.field.text = this.data["prize"] + "%";
    }
    this.useBonus.visible = data["useButtonVisible"];
    this.useBonus.enabled = data["useButtonEnabled"];
    this.newGame.visible = data["newGameButtonVisible"];
    this.newGame.enabled = data["newGameButtonEnabled"];
    var price = parseInt(data["game_price"]);
    this.newGame.setTitle(canvas.Translator.getText(1518) + (price > 0 ? " " + price + " <img src='" + model.gamePriceUrl + "' xOffset='0' yOffset='2'/>" : ""));
    this.maxDailyWinValue.text = canvas.Translator.getText(1528) + ": <br/><font face='" + canvas.Const.FONT_CUPRUM_22_BOLD + "'>" + model.maxUserPrize + "%</font>";
    this.maxWinValue.text = canvas.Translator.getText(1527) + ": <br/><font face='" + canvas.Const.FONT_CUPRUM_22_BOLD + "'>" + model.maxPrize + "%</font>";
};
canvas.app.wheel.view.GameInfoView.prototype.frameHandler = function () {
    var target;
    if (this.fieldContainer.scale.x > 1) {
        target = this.fieldContainer.scale.x - 0.05;
        if (target <= 1) {
            target = 1;
        }
        this.fieldContainer.scale.set(target, target);
        if (target <= 1.4 && target >= 1.3 && this.field.color != 12532224) {
            this.field.text = this.data.prize + "%";
            this.field.color = 12532224;
        }
    } else {
        this.field.color = 5913896;
        canvas.EventManager.removeEventListener(canvas.app.wheel.Event.ENTER_FRAME, null, this.frameHandler, this);
    }
};
canvas.app.wheel.view.PlayAddBonus = function () {
    canvas.px.MovieClip.call(this, canvas.Config.effectsPath + "wheel_bonus");
    this.stop();
    this.frameEvent = canvas.app.wheel.Event.ENTER_FRAME;
    this.removeIfExist(this.container);
    this.field = new canvas.ui.Text(canvas.Const.FONT_CUPRUM_24_BOLD_STROKE_BROWN, 16774656, 53, 32, "center", "middle");
    this.field.position.set(15, 25);
};
canvas.app.wheel.view.PlayAddBonus.prototype = Object.create(canvas.px.MovieClip.prototype);
canvas.app.wheel.view.PlayAddBonus.prototype.stop = function () {
    canvas.px.MovieClip.prototype.stop.call(this);
    this.removeIfExist(this.container);
};
canvas.app.wheel.view.PlayAddBonus.prototype.render = function () {
    canvas.px.MovieClip.prototype.render.call(this);
    if (this.currentFrame == 2) {
        this.addChild(this.container);
    }
    if (this.field && !this.field.parent) {
        var sprite = this.container.getChildByName("im_0001");
        if (sprite) {
            sprite.addChild(this.field);
        }
    }
};
canvas.app.wheel.view.PlayAddBonus.prototype.start = function (data) {
    this.gotoAndPlay(1);
    this.field.text = data["value"] + "%";
};
canvas.app.wheel.view.SpinButton = function () {
    this._hintEnabled = true;
    Object.defineProperty(this, "hintEnabled", {
        get: function () {
            return this._hintEnabled;
        },
        set: function (value) {
            this._hintEnabled = value;
            this.enabled = this._enabled;
        },
    });
    canvas.ui.SimpleButton.call(this, canvas.ResourceLoader.getImage("wheel", "play_button_empty"));
    this._enabled = true;
    Object.defineProperty(this, "enabled", {
        get: function () {
            return this._enabled;
        },
        set: function (value) {
            this.field.font = canvas.Const.FONT_CUPRUM_22_BOLD_STROKE;
            this.field.text = canvas.Translator.getText(1521);
            if (this.isGameOver) return;
            this._enabled = value;
            this.buttonMode = value;
            if (this.isOver) {
                this.handlerOver();
            } else {
                this.handlerOut();
            }
            this.sprite.texture = this.baseTexture = canvas.ResourceLoader.getImage("wheel", value ? "play_button_empty" : "play_button_disabled_empty");
            this.field.font = canvas.Const.FONT_CUPRUM_34_BOLD_STROKE;
            this.field.text = canvas.Translator.getText(1522);
            if (this._enabled) {
                canvas.EventManager.dispatchEvent(canvas.app.wheel.Event.HINT_REMOVE, null, { target: this });
            } else {
                if (this.hintEnabled) {
                    canvas.EventManager.dispatchEvent(canvas.app.wheel.Event.HINT_ADD, null, { target: this, params: new canvas.utils.HintParams(this.hint) });
                }
            }
        },
    });
    this.field = this.addChild(new canvas.ui.Text(canvas.Const.FONT_CUPRUM_22_BOLD_STROKE, 16777215, 110, 100, "center", "middle"));
    this.field.position.set(7, 10);
    this.hint = new canvas.app.view.MappingHint(canvas.Translator.getText(1526));
    this.isGameOver = false;
};
canvas.app.wheel.view.SpinButton.prototype = Object.create(canvas.ui.SimpleButton.prototype);
canvas.app.wheel.view.SpinButton.prototype.handlerOver = function (mouseData) {
    this.isOver = true;
    this.filters = [canvas.Functions.getBrightness(1.2)];
};
canvas.app.wheel.view.SpinButton.prototype.handlerOut = function (mouseData) {
    this.isOver = false;
    this.filters = null;
};
canvas.app.wheel.view.SpinButton.prototype.gameOver = function (isOver) {
    this.isGameOver = isOver;
    if (isOver) {
        this.buttonMode = false;
        this.sprite.texture = this.baseTexture = canvas.ResourceLoader.getImage("wheel", "play_button_disabled_empty");
        this.field.font = canvas.Const.FONT_CUPRUM_22_BOLD_STROKE;
        this.field.text = canvas.Translator.getText(1521);
    } else {
        this.field.font = canvas.Const.FONT_CUPRUM_34_BOLD_STROKE;
        this.field.text = canvas.Translator.getText(1522);
    }
};
canvas.app.wheel.view.SpinButton.prototype.update = function (data) {
    this.gameOver(data["game_over"]);
    this.enabled = data["spinButtonEnabled"];
    this.hintEnabled = data["hintEnabled"];
};
canvas.app.wheel.view.TimerView = function () {
    canvas.px.Container.call(this);
    this.position.set(300, 15);
    this.field = new canvas.ui.Text(canvas.Const.FONT_CUPRUM_16_BOLD, 5913896, 290, 30, "center");
};
canvas.app.wheel.view.TimerView.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.wheel.view.TimerView.prototype.timerHandler = function () {
    this.timeLeft = this.timeEnd - Date.now() / 1e3;
    this.leftH = Math.floor(this.timeLeft / 3600);
    this.timeLeft -= this.leftH * 3600;
    this.leftM = Math.floor(this.timeLeft / 60);
    this.timeLeft -= this.leftM * 60;
    this.leftS = Math.floor(this.timeLeft);
    this.field.text = canvas.Translator.getText(1520) + " " + this.timeToStr(this.leftH) + ":" + this.timeToStr(this.leftM) + ":" + this.timeToStr(this.leftS);
};
canvas.app.wheel.view.TimerView.prototype.timeToStr = function (t) {
    var s = "00" + t;
    return s.slice(s.length - 2);
};
canvas.app.wheel.view.TimerView.prototype.update = function (data) {
    this.timeEnd = Date.now() / 1e3 + data["time_end"] - data["time"];
    if (this.timeEnd < 0) this.timeEnd = 0;
    if (this.timeEnd) {
        this.addChild(this.field);
        if (this.timer) clearInterval(this.timer);
        this.timer = setInterval(this.timerHandler.bind(this), 500);
    } else {
        this.removeIfExist(this.field);
        if (this.timer) clearInterval(this.timer);
    }
};
canvas.app.wheel.view.WheelItem = function (index) {
    canvas.px.Container.call(this);
    this.index = index;
    this.image = this.addChild(new canvas.px.Sprite());
    this.image.position.set(-33, -33);
    this.field = new canvas.ui.Text(canvas.Const.FONT_CUPRUM_24_BOLD_STROKE_BROWN, 16774656, 53, 32, "center");
    this.field.position.set(-26, -14);
};
canvas.app.wheel.view.WheelItem.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.wheel.view.WheelItem.prototype.update = function (data) {
    this.data = data ? data : {};
    var mode = this.data["mode"] ? this.data["mode"] : "empty";
    this.image.texture = canvas.ResourceLoader.getImage("wheel", "bonus_" + mode);
    if (mode == "plus") {
        this.field.text = this.data["value"] + "%";
        this.addChild(this.field);
    } else {
        this.removeIfExist(this.field);
    }
};
canvas.app.wheel.view.WheelView = function () {
    canvas.px.Container.call(this);
    this.rotateCont = this.addChild(new canvas.px.Container());
    var sprite = this.rotateCont.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("wheel", "wheel_back")));
    sprite.position.set(-Math.round(sprite.width * 0.5), -Math.round(sprite.height * 0.5));
    this.rotate = 0;
    this.items = [];
    var i,
        item,
        d = (Math.PI * 2) / canvas.app.wheel.Const.NUM_SECTORS;
    for (i = 0; i < canvas.app.wheel.Const.NUM_SECTORS; i++) {
        item = new canvas.app.wheel.view.WheelItem(i);
        this.items.push(item);
        item.update({ mode: "empty" });
        this.rotateCont.addChild(item);
        item.position.set(116 * Math.cos(d * i), 116 * Math.sin(d * i));
    }
    this.playAdd = this.addChild(new canvas.app.wheel.view.PlayAddBonus());
    canvas.EventManager.addEventListener(canvas.px.MovieClipEvent.EVENT_COMPLETE, this.playAdd, this.playAddCompleteHandler, this);
};
canvas.app.wheel.view.WheelView.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.wheel.view.WheelView.prototype.playAddCompleteHandler = function () {
    this.dropComplete();
};
canvas.app.wheel.view.WheelView.prototype.dropComplete = function () {
    canvas.EventManager.dispatchEvent(canvas.app.wheel.Event.COMPLETE, null, this.data);
};
canvas.app.wheel.view.WheelView.prototype.applyRotate = function () {
    this.rotateCont.rotation = canvas.Functions.degToRad(this.rotate);
    var i, item;
    for (i = 0; i < canvas.app.wheel.Const.NUM_SECTORS; i++) {
        item = this.items[i];
        item.rotation = -canvas.Functions.degToRad(this.rotate);
    }
};
canvas.app.wheel.view.WheelView.prototype.startFrameHandler = function () {
    if (this.speed < 20) {
        this.speed += 1;
    }
    this.rotate += this.speed;
    this.applyRotate();
};
canvas.app.wheel.view.WheelView.prototype.stopFrameHandler = function () {
    this.rotate += (this.endRotate - this.rotate) * 0.2;
    if (Math.abs(this.rotate - this.endRotate) < 1 && !this.aplayedBonus) {
        this.applyBonuses();
    }
    if (Math.abs(this.rotate - this.endRotate) < 0.1) {
        this.rotate = this.endRotate;
        this.rotate -= Math.floor(this.rotate / 360) * 360;
        this.endRotate = this.rotate;
        canvas.EventManager.removeEventListener(canvas.app.wheel.Event.ENTER_FRAME, null, this.stopFrameHandler, this);
    }
    this.applyRotate();
};
canvas.app.wheel.view.WheelView.prototype.startRotate = function () {
    this.speed = 1;
    canvas.EventManager.addEventListener(canvas.app.wheel.Event.ENTER_FRAME, null, this.startFrameHandler, this);
    canvas.EventManager.removeEventListener(canvas.app.wheel.Event.ENTER_FRAME, null, this.stopFrameHandler, this);
};
canvas.app.wheel.view.WheelView.prototype.stopRotate = function (data) {
    this.oldData = this.data;
    this.data = data;
    this.aplayedBonus = false;
    if (data["cur_sector"] || 1) {
        var cur_sector = data["cur_sector"] ? data["cur_sector"] : 0;
        this.endRotate = Math.ceil(this.rotate / 360) * 360 + 360 * 3 - canvas.app.wheel.Const.ROTATE_DELTA * cur_sector;
        canvas.EventManager.removeEventListener(canvas.app.wheel.Event.ENTER_FRAME, null, this.startFrameHandler, this);
        canvas.EventManager.addEventListener(canvas.app.wheel.Event.ENTER_FRAME, null, this.stopFrameHandler, this);
    } else {
        canvas.EventManager.removeEventListener(canvas.app.wheel.Event.ENTER_FRAME, null, this.startFrameHandler, this);
        canvas.EventManager.removeEventListener(canvas.app.wheel.Event.ENTER_FRAME, null, this.stopFrameHandler, this);
        this.rotate = 0;
        this.applyRotate();
        this.applyBonuses();
    }
};
canvas.app.wheel.view.WheelView.prototype.applyBonuses = function () {
    this.aplayedBonus = true;
    var sectors = this.data["sectors"];
    if (!sectors) return;
    if (this.data.hasOwnProperty("cur_sector")) {
        this.bonusData = this.oldData["sectors"][this.data["cur_sector"]];
        if (this.bonusData["mode"] == "plus") {
            this.playAdd.start(this.bonusData);
        } else {
            this.dropComplete();
        }
    } else {
        this.bonusData = null;
        this.dropComplete();
    }
    if (this.data["game_over"] && this.data["spin_cnt"] > 0) return;
    var i, sectorData;
    for (i = 0; i < canvas.app.wheel.Const.NUM_SECTORS; i++) {
        sectorData = sectors[i];
        this.items[i].update(sectorData);
    }
};
canvas.app.mirror.Const = { OBJECT_NAME: "magic_mirror", REQUEST_CONF: "conf", REQUEST_PLAY: "play", REQUEST_SUBMIT: "submit" };
canvas.app.mirror.Event = { ENTER_FRAME: "Mirror.ENTER_FRAME", HINT_ADD: "Mirror.HINT_ADD", HINT_REMOVE: "Mirror.HINT_REMOVE", SELECT_MIRROR: "Mirror.SELECT_MIRROR" };
canvas.app.mirror.Main = function (model) {
    canvas.px.Container.call(this);
    this.model = model;
    this.hintManager = new canvas.utils.HintManager();
    this.hintContainer = new canvas.px.Container();
    this.hintContainer.interactive = true;
    this.hintManager.init(this.hintContainer, this.model.width, this.model.height);
    canvas.EventManager.addEventListener(canvas.app.mirror.Event.HINT_ADD, null, this.handlerHintAdd, this);
    canvas.EventManager.addEventListener(canvas.app.mirror.Event.HINT_REMOVE, null, this.handlerHintRemove, this);
    this.view = new canvas.app.mirror.View();
    this.addChild(this.view);
    this.addChild(this.hintContainer);
    this.windowsManager = new canvas.utils.WindowsManager();
    this.windowsContainer = this.addChild(new canvas.px.Container());
    this.windowsManager.init(this.windowsContainer, this.model.width, this.model.height, this.view);
    this.request = new canvas.utils.URLRequest();
    canvas.EventManager.addEventListener(canvas.utils.URLRequestEvent.EVENT_COMPLETE, this.request, this.requestCompleteHandler, this);
    canvas.EventManager.addEventListener(canvas.utils.URLRequestEvent.EVENT_ERROR, this.request, this.requestErrorHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.view.closeButton, this.closeClickHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.view.questionButton, this.questionClickHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.view.playButton, this.playClickHandler, this);
    canvas.EventManager.addEventListener(canvas.app.mirror.Event.SELECT_MIRROR, null, this.selectMirrorHandler, this);
    this.sendRequest(canvas.app.mirror.Const.REQUEST_CONF);
    this.timer10 = 0;
    this.timer = setInterval(this.timerHandler.bind(this), 1e3);
};
canvas.app.mirror.Main.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.mirror.Main.prototype.handlerHintAdd = function (e) {
    this.hintManager.add(e.params.target, e.params.params);
};
canvas.app.mirror.Main.prototype.handlerHintRemove = function (e) {
    this.hintManager.remove(e.params.target);
};
canvas.app.mirror.Main.prototype.requestCompleteHandler = function () {
    this.model.parseConf(JSON.parse(this.request.request.responseText), this.request.type);
    if (this.model.status != 100) {
        this.view.messageWindow.init(this.model.error == "" ? canvas.Translator.getText(426) : this.model.error);
        this.windowsManager.openWindow(this.view.messageWindow);
        return;
    }
    this.view.update();
    var a, i, len, str;
    switch (this.request.type) {
        case canvas.app.mirror.Const.REQUEST_CONF:
            if (this.model.gameData.active) {
                str = this.model.localStorage.get("turns");
                if (str) {
                    a = str.split(",");
                    len = a.length;
                    for (i = 0; i < len; i++) {
                        this.view.mirrors.items[parseInt(a[i])].handlerUp();
                    }
                }
            }
            break;
        case canvas.app.mirror.Const.REQUEST_PLAY:
            this.model.gameData.currentPrizeIndex = -1;
            this.view.reset();
            this.view.finishAnimation();
            break;
        case canvas.app.mirror.Const.REQUEST_SUBMIT:
            this.view.startAnimation();
            this.model.turnsHistory = "";
            break;
    }
};
canvas.app.mirror.Main.prototype.requestErrorHandler = function () {};
canvas.app.mirror.Main.prototype.sendRequest = function (type) {
    var url = "entry_point.php?object=" + canvas.app.mirror.Const.OBJECT_NAME + "&action=" + type + "&json_mode_on=1";
    this.request.type = type;
    this.request.load(url);
};
canvas.app.mirror.Main.prototype.closeClickHandler = function () {
    this.click();
    _top().closeMagicMirror();
};
canvas.app.mirror.Main.prototype.questionClickHandler = function () {
    this.click();
    canvas.Functions.navigateToURL(canvas.Translator.getText(1407), "_blank");
};
canvas.app.mirror.Main.prototype.playClickHandler = function () {
    this.click();
    if (!this.model.gameData.active && this.model.money >= this.model.gameData.price) {
        this.view.playButton.enabled = false;
        this.sendRequest(canvas.app.mirror.Const.REQUEST_PLAY);
    }
};
canvas.app.mirror.Main.prototype.selectMirrorHandler = function (event) {
    this.click();
    this.view.mirrors.openNext(parseInt(event.params));
    this.model.turnsHistory = this.model.turnsHistory + (this.model.turnsHistory == "" ? "" : ",") + event.params;
    this.model.calcPoints(this.view.mirrors.step);
    this.view.currentPoints.update();
    this.model.calcCurrentPrize();
    this.view.selectCurrentPrize();
    if (this.view.mirrors.step >= 3) {
        this.view.mirrors.interactiveChildren = false;
        this.sendRequest(canvas.app.mirror.Const.REQUEST_SUBMIT);
    }
};
canvas.app.mirror.Main.prototype.click = function () {
    this.view.playButton.blicking.stop();
    this.timer10 = 0;
};
canvas.app.mirror.Main.prototype.timerHandler = function () {
    this.timer10++;
    if (this.timer10 > 10) {
        this.timer10 = 0;
        if (this.model.gameData.active) {
            this.view.mirrors.blicking.start(1);
        } else {
            this.view.playButton.blicking.start(1);
        }
    }
    if (this.timer10 > 5) {
        this.view.finishAnimation();
    }
    if (this.model.serverTime.getTime() >= this.model.gameData.finishTime) {
        this.closeClickHandler();
    }
};
canvas.app.mirror.Main.prototype.destroy = function () {
    this.view.destroy();
    canvas.EventManager.removeEventListener(canvas.app.mirror.Event.HINT_ADD, null, this.handlerHintAdd, this);
    canvas.EventManager.removeEventListener(canvas.app.mirror.Event.HINT_REMOVE, null, this.handlerHintRemove, this);
    canvas.EventManager.removeEventListener(canvas.utils.URLRequestEvent.EVENT_COMPLETE, this.request, this.requestCompleteHandler, this);
    canvas.EventManager.removeEventListener(canvas.utils.URLRequestEvent.EVENT_ERROR, this.request, this.requestErrorHandler, this);
    canvas.EventManager.removeEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.view.closeButton, this.closeClickHandler, this);
    canvas.EventManager.removeEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.view.questionButton, this.questionClickHandler, this);
    canvas.EventManager.removeEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.view.playButton, this.playClickHandler, this);
    canvas.EventManager.removeEventListener(canvas.app.mirror.Event.SELECT_MIRROR, null, this.selectMirrorHandler, this);
    canvas.px.Container.prototype.destroy.apply(this, [{ children: true }]);
    clearInterval(this.timer);
};
canvas.app.mirror.Model = function (par) {
    this._turnsHistory = "";
    Object.defineProperty(this, "turnsHistory", {
        get: function () {
            return this._turnsHistory;
        },
        set: function (value) {
            this._turnsHistory = value;
            this.localStorage.set("turns", value);
        },
    });
    this.localStorage = new canvas.utils.LocalStorage(canvas.Log.MIRROR);
    this.serverTime = new canvas.utils.ServerTime();
    this.serverRandomizer = new canvas.utils.ServerRandomizer();
    this.gameData = new Object();
    this.gameData.prizePool = new Array();
    this.gameData.active = false;
    this.gameData.firstGame = true;
    this.gameData.price = 100;
};
canvas.app.mirror.Model.prototype.parseConf = function (data, action) {
    if (action == undefined) action = "conf";
    this.serverTime.init(data.state.server_time);
    this.money = parseFloat(data.state.money);
    var mirrorData = data[canvas.app.mirror.Const.OBJECT_NAME + "|" + canvas.app.mirror.Const.REQUEST_CONF];
    this.status = mirrorData.status;
    this.error = mirrorData.error ? mirrorData.error : "";
    this.gameData.luck = mirrorData.luck;
    this.gameData.total = mirrorData.total;
    this.gameData.superGame = mirrorData["super"];
    this.gameData.max_luck = mirrorData.max_luck;
    this.gameData.finishTime = mirrorData.ftime;
    this.gameData.price = mirrorData.price ? parseFloat(mirrorData.price) : 100;
    this.gameData.guaranteedPrizes = new Array();
    var obj;
    var itemData;
    var str;
    var a;
    for (str in mirrorData.guaranteed_prizes) {
        obj = mirrorData.guaranteed_prizes[str];
        itemData = new Object();
        itemData.count = parseInt(obj.total_score);
        itemData.itemCount = parseInt(obj.artikul_cnt);
        itemData.title = obj.title;
        itemData.image = obj.picture;
        itemData.articulID = obj.artikul_id;
        itemData.luck = parseInt(obj.luck);
        itemData.points = parseInt(obj.points);
        this.gameData.guaranteedPrizes.push(itemData);
    }
    this.gameData.guaranteedPrizes.sort(function (a, b) {
        return a.count - b.count;
    });
    if (mirrorData.prize_pool) {
        this.gameData.prizePool = new Array();
        for (str in mirrorData.prize_pool) {
            obj = mirrorData.prize_pool[str];
            itemData = new Object();
            itemData.count = parseInt(str);
            itemData.itemCount = parseInt(obj.artikul_cnt);
            itemData.title = obj.title;
            itemData.image = obj.picture;
            itemData.articulID = obj.artikul_id;
            itemData.luck = parseInt(obj.luck);
            itemData.points = parseInt(obj.points);
            this.gameData.prizePool.push(itemData);
        }
        this.gameData.prizePool.sort(function (a, b) {
            return a.count - b.count;
        });
    }
    this.gameData.step = 0;
    this.gameData.active = mirrorData.active;
    this.serverRandomizer.init(parseInt(mirrorData.seed), 48271, 0, (1 << 30) * 2 - 1);
    this.gameData.mirrors = [1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 5, 5, 5];
    if (this.gameData.active) {
        this.gameData.mirrors = this.serverRandomizer.lcgShuffle(this.gameData.mirrors);
    }
};
canvas.app.mirror.Model.prototype.calcPoints = function (step) {
    var sum = 0,
        i;
    for (i = 0; i < step; i++) {
        sum += this.gameData.mirrors[i];
    }
    this.gameData.points = sum;
};
canvas.app.mirror.Model.prototype.calcCurrentPrize = function () {
    var itemData,
        result = 0,
        i = 0,
        len = this.gameData.prizePool.length;
    for (i = 0; i < len; i++) {
        itemData = this.gameData.prizePool[i];
        if (itemData.count <= this.gameData.points && itemData.count > result) {
            result = itemData.count;
            this.gameData.currentPrizeIndex = i;
        }
    }
};
canvas.app.mirror.Model.prototype.calcGuaranteedPrize = function () {
    var itemData;
    var result = 0;
    var i = 0;
    var index = -1;
    var len = this.gameData.guaranteedPrizes.length;
    for (i = 0; i < len; i++) {
        itemData = this.gameData.guaranteedPrizes[i];
        if (itemData.count <= this.gameData.total && itemData.count > result) {
            result = itemData.count;
            index = i;
        }
    }
    return index;
};
canvas.app.mirror.View = function () {
    canvas.px.Container.call(this);
    var model = canvas.app.mirror.model;
    var i, itemBig, itemSmall, sprite;
    this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("mirror", "back")));
    this.closeButton = this.addChild(
        new canvas.ui.Button(canvas.ResourceLoader.getImage("mirror", "main_window_close_base"), canvas.ResourceLoader.getImage("mirror", "main_window_close_over"), canvas.ResourceLoader.getImage("mirror", "main_window_close_down"), null)
    );
    this.closeButton.position.set(497, -2);
    this.questionButton = this.addChild(
        new canvas.ui.Button(
            canvas.ResourceLoader.getImage("mirror", "button_question"),
            canvas.ResourceLoader.getImage("mirror", "button_question_over"),
            canvas.ResourceLoader.getImage("mirror", "button_question_down"),
            canvas.ResourceLoader.getImage("mirror", "button_question_disabled")
        )
    );
    this.questionButton.position.set(450, 27);
    this.questionButton.sprite.hitArea = new canvas.px.Circle(34, 19, 16);
    this.headerField = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_15_BOLD_STROKE, 16118721, this.width - 20, 20, "center"));
    this.headerField.text = canvas.Translator.getText(1400);
    this.headerField.y = 6;
    this.titleField1 = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_12, 7158283, 300, 40, "center"));
    this.titleField1.text = canvas.Translator.getText(1401);
    this.titleField1.position.set(116, 46);
    this.titleField2 = this.addChild(new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_12, canvas.Const.FONT_TAHOMA_12, 7158283, 230, 40, "center"));
    this.titleField2.text = canvas.Translator.getText(1404);
    this.titleField2.position.set(255, 305);
    this.titleField3 = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_13, 7158283, 60, 40, "center"));
    this.titleField3.text = canvas.Translator.getText(1405);
    this.titleField3.position.set(65, 364);
    this.titleField3 = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_13, 7158283, 220, 40, "center"));
    this.titleField3.text = canvas.Translator.getText(1406);
    this.titleField3.position.set(157, 426);
    this.currentPoints = this.addChild(new canvas.app.mirror.view.CurrentPoints());
    this.currentPoints.position.set(423, 60);
    this.topItems = new Array();
    for (i = 0; i < 5; i++) {
        itemBig = this.addChild(new canvas.app.mirror.view.ItemBig());
        itemBig.position.set(48 + 77 * i, 78);
        this.topItems.push(itemBig);
    }
    this.bottomContainer = this.addChild(new canvas.px.Container());
    this.bottomContainerBlicking = new canvas.app.mirror.view.Blicking(this.bottomContainer, 16777215, 40, 3);
    this.bottomItems = new Array();
    for (i = 0; i < 8; i++) {
        itemSmall = new canvas.app.mirror.view.ItemSmall();
        this.bottomContainer.addChild(itemSmall);
        itemSmall.position.set(100 + 50 * i, 456);
        if (i < 7) {
            sprite = this.bottomContainer.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("mirror", "arrow")));
            sprite.position.set(itemSmall.x + 38, itemSmall.y + 7);
        }
        this.bottomItems.push(itemSmall);
    }
    this.mirrors = this.addChild(new canvas.app.mirror.view.Mirrors());
    this.mirrors.position.set(14 - this.mirrors.container.x, 152 - this.mirrors.container.y);
    this.playButton = this.addChild(new canvas.app.view.MainButton());
    this.playButton.setSize(170);
    this.playButton.enabled = false;
    this.playButton.position.set(40 + Math.round((240 - this.playButton._width) * 0.5), 302);
    this.playButton.blicking = new canvas.app.mirror.view.Blicking(this.playButton, 16777215, 40, 2);
    this.coins = this.addChild(new canvas.app.view.Money(16375713, canvas.Const.FONT_TAHOMA_11_BOLD, null, null, null, null, null, false));
    this.coins.interactiveChildren = false;
    this.luckProgress = this.addChild(new canvas.app.mirror.view.LuckProgress());
    this.luckProgress.position.set(158, 354);
    this.luckProgress.interactive = true;
    this.prizeIcon = this.bottomContainer.addChild(new canvas.app.mirror.view.PrizeIcon());
    this.prizeIcon.position.set(43, 453);
    this.prizeIcon.interactive = true;
    this.messageWindow = new canvas.app.manor.view.controls.MessageWindow();
    this.messageWindow.dragAvailable = false;
    canvas.EventManager.dispatchEvent(canvas.app.mirror.Event.HINT_ADD, null, {
        target: this.prizeIcon,
        params: new canvas.utils.HintParams(new canvas.app.view.BigHint("", canvas.Translator.getText(1409)), true, canvas.utils.HintPos.RIGHT_TOP),
    });
    canvas.EventManager.dispatchEvent(canvas.app.mirror.Event.HINT_ADD, null, { target: this.luckProgress, params: new canvas.utils.HintParams(new canvas.app.view.BigHint("", canvas.Translator.getText(1408)), true) });
    canvas.EventManager.addEventListener(canvas.app.mirror.Event.ENTER_FRAME, null, this.frameHandler, this);
};
canvas.app.mirror.View.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.mirror.View.prototype.update = function () {
    var model = canvas.app.mirror.model;
    if (!model.gameData.active && model.gameData.firstGame) {
        this.playButton.blicking.start(1);
    }
    this.coins.money = model.gameData.price * 100;
    this.playButton.setSize(130 + this.coins.width);
    if (this.playButton._width < 170) this.playButton.setSize(170);
    this.playButton.setTitle(canvas.Translator.getText(1403));
    this.coins.position.set(this.playButton.x + this.playButton._width - this.coins.width - 34, this.playButton.y + 9);
    this.playButton.field.x = 23 - Math.round(this.coins.width * 0.5);
    this.playButton.enabled = !model.gameData.active && model.money >= model.gameData.price;
    this.mirrors.interactiveChildren = model.gameData.active;
    var itemData;
    var len = this.bottomItems.length;
    var i;
    for (i = 0; i < len; i++) {
        this.bottomItems[i].data = model.gameData.guaranteedPrizes[i];
    }
    len = this.topItems.length;
    for (i = 0; i < len; i++) {
        this.topItems[i].data = model.gameData.prizePool[i];
    }
    this.luckProgress.progress = Math.round((model.gameData.luck / model.gameData.max_luck) * 100);
    this.luckProgress.progressField.text = model.gameData.luck.toString();
    this.prizeIcon.field.text = model.gameData.total.toString();
    if (model.gameData.active && this.mirrors.step < model.gameData.step) {
        for (i = 0; i < model.gameData.step - this.mirrors.step; i++) {
            this.mirrors.openNext(i);
        }
    }
    this.selectGuaranteedPrize();
};
canvas.app.mirror.View.prototype.frameHandler = function () {
    this.luckProgress.frameUpdate();
    this.mirrors.frameUpdate();
};
canvas.app.mirror.View.prototype.reset = function () {
    var model = canvas.app.mirror.model;
    this.mirrors.reset();
    this.selectCurrentPrize();
    this.currentPoints.pointsField.text = "0";
    model.turnsHistory = "";
};
canvas.app.mirror.View.prototype.selectCurrentPrize = function () {
    var model = canvas.app.mirror.model;
    var itemBig,
        i,
        len = this.topItems.length;
    for (i = 0; i < len; i++) {
        this.topItems[i].selected = false;
    }
    itemBig = this.topItems[model.gameData.currentPrizeIndex];
    if (itemBig) itemBig.selected = true;
};
canvas.app.mirror.View.prototype.selectGuaranteedPrize = function () {
    var model = canvas.app.mirror.model;
    var index = model.calcGuaranteedPrize();
    var itemSmall,
        i,
        len = this.bottomItems.length;
    for (i = 0; i < len; i++) {
        this.bottomItems[i].selected = false;
    }
    itemSmall = this.bottomItems[index];
    if (itemSmall) itemSmall.selected = true;
};
canvas.app.mirror.View.prototype.startAnimation = function () {
    var model = canvas.app.mirror.model;
    var itemBig = this.topItems[model.gameData.currentPrizeIndex];
    if (itemBig) itemBig.blicking.start(1);
    this.luckProgress.blicking.start(1);
    this.bottomContainerBlicking.start(1);
};
canvas.app.mirror.View.prototype.finishAnimation = function () {
    var i,
        len = this.topItems.length;
    for (i = 0; i < len; i++) {
        this.topItems[i].blicking.stop();
    }
    this.luckProgress.blicking.stop();
    this.bottomContainerBlicking.stop();
};
canvas.app.mirror.View.prototype.destroy = function () {
    canvas.EventManager.dispatchEvent(canvas.app.mirror.Event.HINT_REMOVE, null, { target: this.prizeIcon });
    canvas.EventManager.dispatchEvent(canvas.app.mirror.Event.HINT_REMOVE, null, { target: this.luckProgress });
    canvas.EventManager.removeEventListener(canvas.app.mirror.Event.ENTER_FRAME, null, this.frameHandler, this);
    canvas.px.Container.prototype.destroy.apply(this, [{ children: true }]);
};
canvas.app.mirror.view.Blicking = function (view, color, frequency, step, frameEvent) {
    this.view = view;
    this.color = color ? color : 0;
    this.frequency = frequency == undefined ? 70 : frequency;
    this.step = step == undefined ? 3 : step;
    this.frameEvent = frameEvent == undefined ? canvas.app.mirror.Event.ENTER_FRAME : frameEvent;
    this.n = 1;
};
canvas.app.mirror.view.Blicking.prototype.start = function (count) {
    if (count == undefined) count = -1;
    this.count = count - 1;
    canvas.EventManager.addEventListener(this.frameEvent, null, this.frameHandler, this);
    this.blur = 1;
    if (this.view) this.view.filters = [canvas.Functions.getGlow(10, 0, 1.8, this.color, 0.1)];
};
canvas.app.mirror.view.Blicking.prototype.stop = function () {
    this.n = 1;
    canvas.EventManager.removeEventListener(this.frameEvent, null, this.frameHandler, this);
    if (this.view) this.view.filters = [];
};
canvas.app.mirror.view.Blicking.prototype.frameHandler = function () {
    this.blur += this.n;
    if (this.blur >= this.frequency) {
        this.n = -this.step;
    } else if (this.blur <= 8) {
        if (this.n < 0) {
            if (this.count > 0) {
                this.count--;
            } else if (this.count == 0) {
                this.stop();
                return;
            }
        }
        this.n = this.step;
    }
    if (this.view) this.view.filters = [canvas.Functions.getGlow(10, 0, this.blur * 0.1, this.color, 0.1)];
};
canvas.app.mirror.view.CurrentPoints = function () {
    canvas.px.Container.call(this);
    this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("mirror", "points_back")));
    var t = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_10, 7158283, 60, 40, "center"));
    t.text = canvas.Translator.getText(1402);
    t.position.set(10, 63);
    this.pointsField = this.addChild(new canvas.ui.Text(canvas.Const.FONT_AMERICAN_TEXT_40_SHADOW_GRADIENT, undefined, 60, 40, "center"));
    this.pointsField.position.set(8, 17);
    this.pointsField.text = "0";
};
canvas.app.mirror.view.CurrentPoints.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.mirror.view.CurrentPoints.prototype.update = function () {
    var model = canvas.app.mirror.model;
    this.pointsField.text = model.gameData.points || 0;
};
canvas.app.mirror.view.ItemBig = function () {
    canvas.ui.ListRenderer.call(this);
    var sprite;
    this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("mirror", "item_big_back")));
    this.image = this.addChild(new canvas.ui.Image());
    this.image.position.set(4, 4);
    this.selector = new canvas.px.Sprite(canvas.ResourceLoader.getImage("mirror", "item_big_selector"));
    sprite = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("mirror", "item_big_count_back")));
    sprite.position.set(43, 43);
    this.countField = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_18, 16765254, 30, 20, "center"));
    this.countField.position.set(43, 47);
    sprite = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("mirror", "gradient")));
    sprite.position.set(43, 43);
    this.blicking = new canvas.app.mirror.view.Blicking(this, 16777215, 40, 3);
    this.hint = new canvas.app.view.MappingHint();
    this.image.buttonMode = true;
    this.click = this.clickHandler.bind(this);
};
canvas.app.mirror.view.ItemBig.prototype = Object.create(canvas.ui.ListRenderer.prototype);
canvas.app.mirror.view.ItemBig.prototype.update = function () {
    if (!this.data) {
        this.countField.text = "?";
        canvas.EventManager.dispatchEvent(canvas.app.mirror.Event.HINT_REMOVE, null, { target: this.image });
        this.interactive = false;
        return;
    }
    this.interactive = true;
    this.image.setImage(this.data.image);
    this.countField.text = this.data.count;
    this.hint.update(this.data.title + (this.data.itemCount > 1 ? " x" + this.data.itemCount : ""));
    canvas.EventManager.dispatchEvent(canvas.app.mirror.Event.HINT_ADD, null, { target: this.image, params: new canvas.utils.HintParams(this.hint, true) });
};
canvas.app.mirror.view.ItemBig.prototype.updateSelection = function () {
    if (this.selected) {
        this.addChildAt(this.selector, this.getChildIndex(this.countField) - 1);
    } else {
        this.removeIfExist(this.selector);
    }
};
canvas.app.mirror.view.ItemBig.prototype.clickHandler = function () {
    canvas.Functions.navigateToURL("/artifact_info.php?artikul_id=" + this.data.articulID, "_blank");
};
canvas.app.mirror.view.ItemMirror = function () {
    this._points = 0;
    Object.defineProperty(this, "points", {
        get: function () {
            return this._points;
        },
        set: function (value) {
            this._points = value;
            this.interactive = this.interactiveChildren = false;
            switch (this._points) {
                case 1:
                    this.sprite.texture = this.baseTexture = canvas.ResourceLoader.getImage("mirror", "item_mirror_blue");
                    break;
                case 2:
                    this.sprite.texture = this.baseTexture = canvas.ResourceLoader.getImage("mirror", "item_mirror_green");
                    break;
                case 5:
                    this.sprite.texture = this.baseTexture = canvas.ResourceLoader.getImage("mirror", "item_mirror_red");
                    break;
                default:
                    this.sprite.texture = this.baseTexture = canvas.ResourceLoader.getImage("mirror", "item_mirror_back");
                    this.interactive = this.interactiveChildren = true;
            }
        },
    });
    canvas.ui.SimpleButton.call(this, canvas.px.TextureEmpty);
    this.points = 0;
    this.hitArea = new canvas.px.Circle(34, 44, 30);
};
canvas.app.mirror.view.ItemMirror.prototype = Object.create(canvas.ui.SimpleButton.prototype);
canvas.app.mirror.view.ItemMirror.prototype.handlerUp = function (mouseData) {
    canvas.ui.SimpleButton.prototype.handlerUp.call(this, mouseData);
    canvas.EventManager.dispatchEvent(canvas.app.mirror.Event.SELECT_MIRROR, null, this.name);
};
canvas.app.mirror.view.ItemSmall = function () {
    canvas.ui.ListRenderer.call(this);
    var sprite;
    this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("mirror", "item_small_back")));
    this.image = this.addChild(new canvas.ui.Image());
    this.image.position.set(2, 2);
    this.image.scale.set(0.5, 0.5);
    this.selector = new canvas.px.Sprite(canvas.ResourceLoader.getImage("mirror", "item_small_selector"));
    sprite = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("mirror", "item_small_count_back")));
    sprite.position.set(2, 27);
    this.countField = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_9, 16765254, 30, 20, "center"));
    this.countField.position.set(1, 31);
    this.hint = new canvas.app.view.MappingHint();
    this.image.buttonMode = true;
    this.click = this.clickHandler.bind(this);
};
canvas.app.mirror.view.ItemSmall.prototype = Object.create(canvas.ui.ListRenderer.prototype);
canvas.app.mirror.view.ItemSmall.prototype.update = function () {
    if (!this.data) {
        this.countField.text = "";
        canvas.EventManager.dispatchEvent(canvas.app.mirror.Event.HINT_REMOVE, null, { target: this.image });
        this.interactive = false;
        return;
    }
    this.interactive = true;
    this.image.setImage(this.data.image);
    this.countField.text = this.data.count;
    this.hint.update(this.data.title + (this.data.itemCount > 1 ? " x" + this.data.itemCount : ""));
    canvas.EventManager.dispatchEvent(canvas.app.mirror.Event.HINT_ADD, null, { target: this.image, params: new canvas.utils.HintParams(this.hint, true) });
};
canvas.app.mirror.view.ItemSmall.prototype.updateSelection = function () {
    if (this.selected) {
        this.addChildAt(this.selector, this.getChildIndex(this.countField) - 1);
    } else {
        this.removeIfExist(this.selector);
    }
};
canvas.app.mirror.view.ItemSmall.prototype.clickHandler = function () {
    canvas.Functions.navigateToURL("/artifact_info.php?artikul_id=" + this.data.articulID, "_blank");
};
canvas.app.mirror.view.LuckProgress = function () {
    this._progress = 0;
    Object.defineProperty(this, "progress", {
        get: function () {
            return this._progress;
        },
        set: function (value) {
            this._progress = value < 0 ? 0 : value > 100 ? 100 : value;
            var model = canvas.app.mirror.model;
            this.luckIcon.texture = canvas.ResourceLoader.getImage("mirror", "luck_icon" + (this._progress == 100 || model.gameData.superGame ? "2" : ""));
        },
    });
    canvas.px.Container.call(this);
    this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("mirror", "luck_progress_back")));
    this.line = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("mirror", "luck_progress_line")));
    this.line.position.set(2, 14);
    var sprite = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("mirror", "luck_progress_top")));
    this.luckIcon = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("mirror", "luck_icon")));
    this.luckIcon.position.set(257, -18);
    this.lineMask = this.addChild(new canvas.px.Mask(this.line.width - 15, this.line.height));
    this.lineMask.position.set(this.line.x, this.line.y);
    this.line.mask = this.lineMask;
    this.progressField = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_16_BOLD_STROKE, 16511686, 40, 20, "center"));
    this.progressField.position.set(284, 18);
    this.blicking = new canvas.app.mirror.view.Blicking(this, 16777215, 40, 3);
    this.lineMask.scale.x = 0;
};
canvas.app.mirror.view.LuckProgress.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.mirror.view.LuckProgress.prototype.frameUpdate = function () {
    var targetValue = this.progress * 0.01;
    var step = targetValue > this.lineMask.scale.x ? 0.01 : targetValue < this.lineMask.scale.x ? -0.01 : 0;
    step *= Math.abs(targetValue - this.lineMask.scale.x) * 10;
    this.lineMask.scale.x += step;
    if ((step > 0 && this.lineMask.scale.x > targetValue) || (step < 0 && this.lineMask.scale.x < targetValue)) this.lineMask.scale.x = targetValue;
};
canvas.app.mirror.view.Mirrors = function () {
    canvas.px.Container.call(this);
    this.step = 0;
    this.animation = false;
    this.container = this.addChild(new canvas.px.Container());
    this.items = new Array();
    var tmpX = 32;
    var tmpY = 0;
    var i;
    var itemMirror;
    for (i = 0; i < 15; i++) {
        itemMirror = this.container.addChild(new canvas.app.mirror.view.ItemMirror());
        itemMirror.position.set(tmpX, tmpY);
        tmpX += 62;
        if (i == 6) {
            tmpY += 60;
            tmpX = 0;
        }
        itemMirror.name = i;
        this.items.push(itemMirror);
    }
    this.container.position.set(-Math.round(this.width * 0.5), -Math.round(this.height * 0.5));
    this.blicking = new canvas.app.mirror.view.Blicking(this, 16777215, 40, 3);
};
canvas.app.mirror.view.Mirrors.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.mirror.view.Mirrors.prototype.reset = function () {
    var model = canvas.app.mirror.model;
    if (model.gameData.firstGame) {
        this.reset2();
        model.gameData.firstGame = false;
    } else {
        this.animation = true;
    }
};
canvas.app.mirror.view.Mirrors.prototype.reset2 = function () {
    var itemMirror,
        len = this.items.length;
    for (i = 0; i < len; i++) {
        itemMirror = this.items[i];
        itemMirror.points = 0;
        itemMirror.filters = [];
    }
    this.step = 0;
    clearTimeout(this.timer);
};
canvas.app.mirror.view.Mirrors.prototype.openNext = function (index) {
    var model = canvas.app.mirror.model;
    this.items[index].points = model.gameData.mirrors[this.step];
    this.items[index].filters = [canvas.Functions.getGlow(10, 2, 1.8, 16777150, 0.1)];
    this.step++;
    if (this.step == 3) {
        this.lastMirrors = model.gameData.mirrors;
        clearTimeout(this.timer);
        this.timer = setTimeout(this.timerHandler.bind(this), 1e3);
    }
};
canvas.app.mirror.view.Mirrors.prototype.frameUpdate = function () {
    if (this.animation) {
        this.scale.x -= 0.05;
        this.scale.y = this.scale.x;
        if (this.scale.x <= 0) {
            this.animation = false;
            this.scale.x = this.scale.y = 1;
            this.reset2();
        }
    }
};
canvas.app.mirror.view.Mirrors.prototype.openAll = function () {
    var itemMirror;
    var i;
    var k = 0;
    for (i = 3; i < 15; i++) {
        while ((itemMirror = this.items[k]).points != 0) k++;
        itemMirror.points = this.lastMirrors[i];
    }
};
canvas.app.mirror.view.Mirrors.prototype.timerHandler = function () {
    this.openAll();
};
canvas.app.mirror.view.PrizeIcon = function () {
    canvas.px.Container.call(this);
    this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("mirror", "prize_icon")));
    this.field = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_14_BOLD_STROKE, 16511686, 50, 20, "center"));
    this.field.position.set(-2, 33);
};
canvas.app.mirror.view.PrizeIcon.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.clanCitadel.Const = {
    MAP_ORIGINAL_WIDTH: 1050,
    MAP_ORIGINAL_HEIGHT: 1e3,
    MAP_WIDTH: 1074,
    MAP_HEIGHT: 1024,
    MAP_DIFF: 12,
    MAP_POINTS: [
        [334, 338],
        [852, 293],
        [606, 391],
        [691, 209],
        [143, 603],
        [559, 124],
        [289, 496],
        [703, 505],
        [924, 435],
        [839, 677],
        [248, 678],
        [477, 731],
        [492, 909],
        [878, 853],
        [960, 169],
        [170, 863],
    ],
    TYPE_ID_SANCTUARY: 5,
    SANCTUARY_ON_PAGE: 3,
};
canvas.app.clanCitadel.Event = {
    ENTER_FRAME: "ClanCitadel.ENTER_FRAME",
    ENTER_FRAME_WIN: "ClanCitadel.ENTER_FRAME_WIN",
    HINT_ADD: "ClanCitadel.HINT_ADD",
    HINT_REMOVE: "ClanCitadel.HINT_REMOVE",
    SELECT: "ClanCitadel.SELECT",
    CHANGE_BUILD_MODE: "ClanCitadel.CHANGE_BUILD_MODE",
    BUILD: "ClanCitadel.BUILD",
    EXIT: "ClanCitadel.EXIT",
    SANCTUARY_SELECT: "ClanCitadel.SANCTUARY_SELECT",
};
canvas.app.clanCitadel.Main = function (model) {
    canvas.px.Container.call(this);
    this.model = model;
    this.hintManager = new canvas.utils.HintManager();
    this.hintContainer = new canvas.px.Container();
    this.hintContainer.interactive = true;
    canvas.EventManager.addEventListener(canvas.app.clanCitadel.Event.HINT_ADD, null, this.handlerHintAdd, this);
    canvas.EventManager.addEventListener(canvas.app.clanCitadel.Event.HINT_REMOVE, null, this.handlerHintRemove, this);
    this.windowsContainer = new canvas.px.Container();
    this.view = this.addChild(new canvas.app.clanCitadel.View());
    this.addChild(this.windowsContainer);
    this.addChild(this.hintContainer);
    this.update();
    this.windowsManager = new canvas.utils.WindowsManager(this.view.wall);
    this.request = new canvas.utils.URLRequest();
    canvas.EventManager.addEventListener(canvas.app.clanCitadel.Event.SELECT, null, this.selectHandler, this);
    canvas.EventManager.addEventListener(canvas.app.clanCitadel.Event.CHANGE_BUILD_MODE, null, this.changeBuildModeHandler, this);
    canvas.EventManager.addEventListener(canvas.app.clanCitadel.Event.BUILD, null, this.buildHandler, this);
    canvas.EventManager.addEventListener(canvas.app.clanCitadel.Event.EXIT, null, this.exitHandler, this);
    canvas.EventManager.addEventListener(canvas.utils.URLRequestEvent.EVENT_COMPLETE, this.request, this.completeHandler, this);
    canvas.EventManager.addEventListener(canvas.utils.URLRequestEvent.EVENT_ERROR, this.request, this.errorHandler, this);
    canvas.EventManager.addEventListener(canvas.px.WindowEvent.EVENT_OPEN, null, this.openWinHandler, this);
    canvas.EventManager.addEventListener(canvas.px.WindowEvent.EVENT_CLOSE, null, this.closeWinHandler, this);
};
canvas.app.clanCitadel.Main.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.clanCitadel.Main.prototype.handlerHintAdd = function (e) {
    this.hintManager.add(e.params.target, e.params.params);
};
canvas.app.clanCitadel.Main.prototype.handlerHintRemove = function (e) {
    this.hintManager.remove(e.params.target);
};
canvas.app.clanCitadel.Main.prototype.update = function () {
    this.view.update();
};
canvas.app.clanCitadel.Main.prototype.resize = function (w, h) {
    this.view.resize();
    this.windowsManager.init(this.windowsContainer, w, h, this.view);
    this.hintManager.init(this.hintContainer, w, h);
    this.view.position.set(Math.round((w - this.model.width) * 0.5), Math.round((h - this.model.height) * 0.5));
};
canvas.app.clanCitadel.Main.prototype.selectHandler = function (event) {
    if (this.view.map.scrollV.wasDragged || this.view.map.scrollH.wasDragged) return;
    if (this.model.buildMode) {
        this.windowsManager.openWindow(this.view.buildWindow, false);
        this.view.buildWindow.data = event.params;
    } else {
        if (event.params.url) {
            canvas.Functions.navigateToURL(event.params.url, "_self");
        } else {
            switch (event.params.type_id) {
                case canvas.app.clanCitadel.Const.TYPE_ID_SANCTUARY:
                    this.view.sanctuaryWindow = new canvas.app.clanCitadel.view.sanctuary.SanctuaryWindow();
                    this.windowsManager.openWindow(this.view.sanctuaryWindow);
                    break;
            }
        }
    }
};
canvas.app.clanCitadel.Main.prototype.changeBuildModeHandler = function (event) {
    this.model.buildMode = !this.model.buildMode;
    this.update();
};
canvas.app.clanCitadel.Main.prototype.buildHandler = function (event) {
    this.request.load(canvas.Config.entryPoint + "?object=clan&action=building_create&building_artikul_id=" + event.params.id + "&json_mode_on=1");
};
canvas.app.clanCitadel.Main.prototype.exitHandler = function (event) {
    canvas.Functions.navigateToURL("/area.php?exit=1", "_self");
};
canvas.app.clanCitadel.Main.prototype.completeHandler = function (event) {
    var json = JSON.parse(this.request.request.response);
    var data;
    for (var str in json) {
        data = json[str];
        if (data.error) {
            this.view.messageWindow.init(data.error);
            this.windowsManager.openWindow(this.view.messageWindow, false);
            return;
        }
        switch (str) {
            case "clan|building_list":
                this.model.parseConfig(data);
                this.update();
                break;
            case "state":
                this.model.parseState(data);
                break;
        }
    }
};
canvas.app.clanCitadel.Main.prototype.errorHandler = function (event) {
    this.view.messageWindow.init(canvas.Translator.getText(426));
    this.windowsManager.openWindow(this.view.messageWindow, false);
};
canvas.app.clanCitadel.Main.prototype.openWinHandler = function (event) {
    this.hintManager.hide();
    if (event.params == this.view.sanctuaryWindow) {
        this.model.paused = true;
    }
};
canvas.app.clanCitadel.Main.prototype.closeWinHandler = function (event) {
    this.model.paused = false;
    if (this.view.sanctuaryWindow && event.params == this.view.sanctuaryWindow) {
        this.view.sanctuaryWindow.destroy();
        this.view.sanctuaryWindow = null;
    }
};
canvas.app.clanCitadel.Model = function (par) {
    this.guestMode = par.Guest != undefined ? par.Guest == "1" : false;
    this.clanId = par.clan_id != undefined ? parseInt(par.clan_id) : 0;
    this.clanBuildingsAmf = par.amf_url || "images/data/locale/ru/amf/clan_buildings.amf";
    this.clanResourcesAmf = par.resources_amf || "images/data/locale/ru/amf/clan_resources.amf";
    this.sanctuaryAmf = par.sanctuaryAmfPath || "images/data/locale/ru/amf/clan_sanctuary.amf";
    this.configUrl = canvas.Config.entryPoint + "?object=clan&sq=1&action=building_list&json_mode_on=1" + (this.guestMode ? "&Guest=1&clan_id=" + this.clanId : "");
    this.configSanctuaryUrl = canvas.Config.entryPoint + "?object=clan&action=building_action&building_type_id=" + canvas.app.clanCitadel.Const.TYPE_ID_SANCTUARY + "&building_action=conf&json_mode_on=1";
    this.buildMode = false;
    this.localStorage = new canvas.utils.LocalStorage(canvas.Log.CLAN_CITADEL);
    this.sanctuary = {};
    this.paused = false;
};
canvas.app.clanCitadel.Model.prototype.init = function () {
    this.buildingsData = [];
    var data = canvas.ResourceLoader.get("buildings");
    var i,
        item,
        len = data.length;
    for (i = 0; i < len; i++) {
        item = data[i];
        if (!this.buildingsData[item.type_id]) this.buildingsData[item.type_id] = [];
        this.buildingsData[item.type_id][item.level] = item;
    }
    this.resourcesData = {};
    data = canvas.ResourceLoader.get("resources");
    len = data.length;
    for (i = 0; i < len; i++) {
        item = data[i];
        this.resourcesData[item.id] = item;
    }
    this.resourcesData["energy"] = { id: "energy", title: canvas.Translator.getText(107), ord: 0 };
    if (!this.guestMode) {
        this.parseState(JSON.parse(canvas.ResourceLoader.get("config").data)["state"]);
        this.parseConfigSanctuary(JSON.parse(canvas.ResourceLoader.get("configSanctuary").data)["clan|building_action|" + canvas.app.clanCitadel.Const.TYPE_ID_SANCTUARY + "|conf"]);
    }
    this.parseConfig(JSON.parse(canvas.ResourceLoader.get("config").data)["clan|building_list"]);
};
canvas.app.clanCitadel.Model.prototype.parseSanctuary = function () {
    var data = canvas.ResourceLoader.get("sanctuary");
    this.sanctuary.items = new Array();
    this.sanctuary.allItemsByID = new Object();
    var tmp,
        a,
        i,
        j,
        len,
        itemData,
        npc,
        buildingLevel = this.buildings[canvas.app.clanCitadel.Const.TYPE_ID_SANCTUARY].level;
    for (i = buildingLevel; i <= buildingLevel + 1; i++) {
        item = data[i];
        if (item != null) {
            if (i == buildingLevel) {
                itemData = new Object();
                itemData.id = "";
                itemData.image = item["cup"]["pic_small"];
                itemData.comment = "";
                itemData.title = canvas.Translator.getText(1255);
                a = new Array();
                itemData.list = a;
                this.sanctuary.items.push(itemData);
            }
            tmp = item["cup"]["npc_list_" + (this.race == 1 ? "hum" : "mag")];
            len = tmp.length;
            for (j = 0; j < len; j++) {
                npc = tmp[j];
                if (!npc) continue;
                if (this.sanctuary.allItemsByID[npc.id] != undefined) continue;
                itemData = new Object();
                itemData.id = npc.id;
                itemData.image = npc.picture;
                itemData.comment = i > buildingLevel ? canvas.Translator.getText(1252) + " " + i : canvas.Translator.getText(1254);
                itemData.locked = i > buildingLevel;
                itemData.title = npc.title;
                if (this.sanctuary.npcLinks != null) itemData.url = this.sanctuary.npcLinks[itemData.id];
                if (a) a.push(itemData);
                this.sanctuary.allItemsByID[itemData.id] = itemData;
            }
            tmp = item["npc_list"];
            len = tmp.length;
            for (j = 0; j < len; j++) {
                npc = tmp[j];
                if (!npc) continue;
                if (this.sanctuary.allItemsByID[npc.id] != undefined) continue;
                itemData = new Object();
                itemData.id = npc.id;
                itemData.image = npc.picture;
                itemData.comment = i > buildingLevel ? canvas.Translator.getText(1252) + " " + i : canvas.Translator.getText(1253);
                itemData.locked = i > buildingLevel;
                itemData.title = npc.title;
                if (this.sanctuary.npcLinks != null) itemData.url = this.sanctuary.npcLinks[itemData.id];
                this.sanctuary.items.push(itemData);
                this.sanctuary.allItemsByID[itemData.id] = itemData;
            }
        }
    }
};
canvas.app.clanCitadel.Model.prototype.parseState = function (data) {
    this.race = data.kind == undefined ? 1 : parseInt(data.kind);
};
canvas.app.clanCitadel.Model.prototype.parseConfig = function (data) {
    this.buildMode = false;
    this.resources = data.resources;
    this.schemes = data.schemes || {};
    var list = data.buildings;
    var listByType = [];
    var i,
        item,
        typeId,
        len = list.length;
    for (i = 0; i < len; i++) {
        listByType[list[i].type_id] = list[i];
    }
    this.buildings = [];
    len = canvas.app.clanCitadel.Const.MAP_POINTS.length;
    for (i = 0; i < len; i++) {
        typeId = i + 1;
        item = listByType[typeId] || { type_id: typeId, level: 0 };
        item.data = this.buildingsData[typeId] ? this.buildingsData[typeId][item.level] : null;
        item.dataNext = this.buildingsData[typeId] ? this.buildingsData[typeId][parseInt(item.level) + 1] : null;
        this.buildings[typeId] = item;
    }
    this.parseSanctuary();
};
canvas.app.clanCitadel.Model.prototype.testRequirements = function (data) {
    if (!data) return false;
    if (!data.cost && !data.scheme_artikul_id) return true;
    if (data.cost) {
        var item,
            list = data.cost.costs;
        var i,
            len = list.length;
        for (i = 0; i < len; i++) {
            item = list[i];
            if (!this.resources[item.type] || item.cnt > parseInt(this.resources[item.type].value)) return false;
        }
    }
    if (data.scheme_artikul_id && (!this.schemes[data.scheme_artikul_id] || parseInt(this.schemes[data.scheme_artikul_id]) < parseInt(data.scheme_cnt))) {
        return false;
    }
    return true;
};
canvas.app.clanCitadel.Model.prototype.parseConfigSanctuary = function (data) {
    this.sanctuary.npcLinks = data.npc_urls;
};
canvas.app.clanCitadel.View = function () {
    canvas.px.Container.call(this);
    this.map = this.addChild(new canvas.app.clanCitadel.view.Map());
    if (!canvas.app.clanCitadel.model.guestMode) {
        this.map.position.set(canvas.app.clanCitadel.Const.MAP_DIFF, canvas.app.clanCitadel.Const.MAP_DIFF);
        this.resourcesPanel = this.addChild(new canvas.app.clanCitadel.view.ResourcesPanel());
        this.buildingsPanel = this.addChild(new canvas.app.clanCitadel.view.BuildingsPanel());
        this.wall = this.addChild(new canvas.px.Mask(100, 100, 0, 0.7));
        this.wall.position.set(10, 10);
        this.wall.active = false;
        this.contour = this.addChild(new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "contour"), 49, 49, 49, 49));
        this.header = this.addChild(new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "tile_header"), 30, 0, 30, 0));
        this.header.width = 150;
        this.header.y = -6;
        this.title = this.header.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_13_BOLD, 16118721, 150, 20, "center"));
        this.title.text = canvas.Translator.getText(1202);
        this.title.y = 8;
        this.closeButton = this.addChild(new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "close_button")));
        this.closeButton.y = -2;
        this.buildButton = this.addChild(new canvas.app.clanCitadel.view.BuildButton());
        this.buildWindow = new canvas.app.clanCitadel.view.BuildWindow();
        this.messageWindow = new canvas.app.manor.view.controls.MessageWindow();
        canvas.EventManager.dispatchEvent(canvas.app.clanCitadel.Event.HINT_ADD, null, { target: this.closeButton, params: new canvas.utils.HintParams(new canvas.app.view.MappingHint(canvas.Translator.getText(150))) });
        canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.closeButton, this.closeClickHandler, this);
    }
};
canvas.app.clanCitadel.View.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.clanCitadel.View.prototype.resize = function () {
    var model = canvas.app.clanCitadel.model;
    if (!model.guestMode) {
        this.map.setSize(model.width - canvas.app.clanCitadel.Const.MAP_DIFF * 2, model.height - canvas.app.clanCitadel.Const.MAP_DIFF * 2);
        this.contour.width = model.width;
        this.contour.height = model.height;
        this.header.x = Math.round((model.width - this.header.width) * 0.5);
        this.closeButton.x = model.width - 45;
        this.buildButton.position.set(model.width - 66, model.height - 65);
        this.buildingsPanel.x = model.width - this.buildingsPanel._width;
        this.wall.setSize(model.width - 20, model.height - 20);
    } else {
        this.map.setSize(model.width, model.height);
    }
};
canvas.app.clanCitadel.View.prototype.update = function () {
    var model = canvas.app.clanCitadel.model;
    this.map.update();
    if (!model.guestMode) {
        this.resourcesPanel.update();
        this.buildingsPanel.update();
        this.buildButton.buildMode = model.buildMode;
    }
};
canvas.app.clanCitadel.View.prototype.closeClickHandler = function () {
    canvas.EventManager.dispatchEvent(canvas.app.clanCitadel.Event.EXIT);
};
canvas.app.clanCitadel.view.Back = function () {
    canvas.px.Container.call(this);
    this.mc = this.addChild(new canvas.px.MovieClip(canvas.Config.effectsPath + "citadel_back"));
    this.mc.frameEvent = canvas.app.clanCitadel.Event.ENTER_FRAME;
    for (var str in this.mc.mcChildsCache) {
        this.mc.mcChildsCache[str].loop = true;
        this.mc.mcChildsCache[str].frameEvent = canvas.app.clanCitadel.Event.ENTER_FRAME;
        this.mc.mcChildsCache[str].play();
    }
};
canvas.app.clanCitadel.view.Back.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.clanCitadel.view.BuildButton = function () {
    this._buildMode = false;
    Object.defineProperty(this, "buildMode", {
        get: function () {
            return this._buildMode;
        },
        set: function (value) {
            this._buildMode = value;
            this.hint.update(canvas.Translator.toUpperCaseFirstChar(canvas.Translator.getText(value ? 1201 : 1299)));
            this.sprite.texture = this.baseTexture = canvas.ResourceLoader.getImage("ui", value ? "exit_button" : "build_button");
        },
    });
    canvas.ui.SimpleButton.call(this, canvas.px.TextureEmpty);
    this.hint = new canvas.app.view.MappingHint();
    canvas.EventManager.dispatchEvent(canvas.app.clanCitadel.Event.HINT_ADD, null, { target: this, params: new canvas.utils.HintParams(this.hint, false, canvas.utils.HintPos.LEFT_TOP) });
    this.buildMode = false;
    this.click = this.clickHandler.bind(this);
};
canvas.app.clanCitadel.view.BuildButton.prototype = Object.create(canvas.ui.SimpleButton.prototype);
canvas.app.clanCitadel.view.BuildButton.prototype.clickHandler = function () {
    canvas.EventManager.dispatchEvent(canvas.app.clanCitadel.Event.CHANGE_BUILD_MODE);
};
canvas.app.clanCitadel.view.BuildWindow = function () {
    this._data = null;
    Object.defineProperty(this, "data", {
        get: function () {
            return this._data;
        },
        set: function (value) {
            this._data = value;
            this.update();
        },
    });
    this._width = 400;
    canvas.app.manor.view.WindowManorBase.call(this, this._width, 300, canvas.Translator.getText(178));
    this.headField = this.addChild(new canvas.app.view.MacroHtmlText(canvas.Const.FONT_TAHOMA_12, canvas.Const.FONT_TAHOMA_12_BOLD, 7026733, 320, 300, "center", "top"));
    this.headField.position.set(40, 30);
    this.list = this.addChild(new canvas.ui.List(canvas.ui.ListType.VERTICAL, 3));
    this.list.setSize(300, 200);
    this.list._paddingV = 0;
    this.list.x = 50;
    this.bottomField = this.addChild(new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_12, canvas.Const.FONT_TAHOMA_12_BOLD, 7026733, 320, 300, "center", "top"));
    this.bottomField.position.set(40, 0);
    this.buildButton = this.addChild(new canvas.app.view.MainButton());
    this.buildButton.x = 48;
    this.buildButton.setTitle(canvas.Translator.getText(178));
    this.cancelButton = this.addChild(new canvas.app.view.MainButton());
    this.cancelButton.x = 202;
    this.cancelButton.setTitle(canvas.Translator.getText(2019));
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.cancelButton, this.cancelClickHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.buildButton, this.buildClickHandler, this);
};
canvas.app.clanCitadel.view.BuildWindow.prototype = Object.create(canvas.app.manor.view.WindowManorBase.prototype);
canvas.app.clanCitadel.view.BuildWindow.prototype.update = function () {
    var model = canvas.app.clanCitadel.model;
    if (this.data) {
        this.headField.text = "<b>" + this.data.title + "</b><br/><br/>" + this.data.description + "<br/><br/><b>" + canvas.Translator.getText(121) + "</b>";
        this.list.clear();
        this.list.y = this.headField.y + this.headField.textHeight + 10;
        var i,
            len = 0;
        if (this.data.cost) {
            len = this.data.cost.costs.length;
            for (i = 0; i < len; i++) {
                this.list.add(new canvas.app.clanCitadel.view.ResourceCostRenderer(this.data.cost.costs[i]), false);
            }
            this.list.update();
        }
        if (this.data.scheme_artikul_id) {
            this.bottomField.text =
                "<b>" +
                canvas.Translator.getText(1203) +
                "</b><br/><br/><a normal='1' href='artifact_info.php?artikul_id=" +
                this.data.scheme_artikul_id +
                "'>" +
                this.data.scheme_artikul_title +
                " [" +
                (model.schemes[this.data.scheme_artikul_id] ? model.schemes[this.data.scheme_artikul_id] : "0") +
                "/" +
                this.data.scheme_cnt +
                "]</a>";
        } else {
            this.bottomField.text = "";
        }
        this.bottomField.y = this.list.y + Math.ceil(len / 3) * 20 + 5;
        this.buildButton.y = this.cancelButton.y = this.bottomField.y + this.bottomField.textHeight + 5;
        this.setSize(this._width, this.buildButton.y + 60);
        this.buildButton.enabled = model.testRequirements(this.data);
    }
};
canvas.app.clanCitadel.view.BuildWindow.prototype.cancelClickHandler = function () {
    canvas.utils.WindowsManager.instance.closeWindow(this);
};
canvas.app.clanCitadel.view.BuildWindow.prototype.buildClickHandler = function () {
    canvas.EventManager.dispatchEvent(canvas.app.clanCitadel.Event.BUILD, null, this.data);
    this.cancelClickHandler();
};
canvas.app.clanCitadel.view.BuildingRenderer = function () {
    canvas.ui.ListRenderer.call(this);
    this.hint = new canvas.app.view.MappingHint();
    this.mouseover = this.overHandler.bind(this);
    this.mouseout = this.outHandler.bind(this);
    this.click = this.clickHandler.bind(this);
};
canvas.app.clanCitadel.view.BuildingRenderer.prototype = Object.create(canvas.ui.ListRenderer.prototype);
canvas.app.clanCitadel.view.BuildingRenderer.prototype.update = function () {
    if (this.data != this.oldData) {
        this.clear();
        if (this.data) {
            var name = canvas.Functions.extractSwfName(this.data.building_swfs[0].swf);
            this.mc = this.addChild(new canvas.px.MovieClip(canvas.Config.clanBuildingsPath + name + "/" + name));
            this.mc.frameEvent = canvas.app.clanCitadel.Event.ENTER_FRAME;
            this.mc.interactive = false;
            this.mc.interactiveChildren = false;
            if (!this.mc.ready) {
                canvas.EventManager.addEventListener(canvas.px.MovieClipEvent.EVENT_READY, this.mc, this.readyHandler, this);
            } else {
                this.readyHandler();
            }
        }
    }
    var model = canvas.app.clanCitadel.model;
    if (model.buildMode && this.data) {
        if (this.mc) this.mc.filters = [canvas.Functions.getGlow(10, 0.8, 0, model.testRequirements(this.data) ? 65382 : 16711680, 0.1)];
    } else {
        if (this.mc) this.mc.filters = null;
    }
};
canvas.app.clanCitadel.view.BuildingRenderer.prototype.readyHandler = function () {
    canvas.EventManager.removeEventListener(canvas.px.MovieClipEvent.EVENT_READY, this.mc, this.readyHandler, this);
    if (this.mc.totalFrames > 1) {
        this.mc.loop = true;
    }
    if (this.mc.mcChildsCache) {
        for (var str in this.mc.mcChildsCache) {
            this.mc.mcChildsCache[str].frameEvent = this.mc.frameEvent;
            this.mc.mcChildsCache[str].play();
        }
    }
    this.polygon = this.addChild(new canvas.px.Polygon(this.mc.data.data.polygon));
    this.polygon.position.set(this.mc.data.data.x, this.mc.data.data.y);
    this.polygon.interactive = true;
    this.polygon.buttonMode = true;
    canvas.EventManager.dispatchEvent(canvas.app.clanCitadel.Event.HINT_ADD, null, { target: this.polygon, params: new canvas.utils.HintParams(this.hint) });
    this.hint.update(this.data.title + " [" + this.data.level + "]");
};
canvas.app.clanCitadel.view.BuildingRenderer.prototype.clear = function () {
    if (this.mc) {
        canvas.EventManager.removeEventListener(canvas.px.MovieClipEvent.EVENT_READY, this.mc, this.readyHandler, this);
        this.mc.destroy();
    }
    if (this.polygon) {
        this.removeIfExist(this.polygon);
        canvas.EventManager.dispatchEvent(canvas.app.clanCitadel.Event.HINT_REMOVE, null, { target: this.polygon });
        this.polygon.destroy();
        this.polygon = null;
    }
};
canvas.app.clanCitadel.view.BuildingRenderer.prototype.overHandler = function () {
    this.filters = [canvas.Functions.getBrightness()];
};
canvas.app.clanCitadel.view.BuildingRenderer.prototype.outHandler = function () {
    this.filters = null;
};
canvas.app.clanCitadel.view.BuildingRenderer.prototype.clickHandler = function () {
    if (!canvas.app.clanCitadel.model.guestMode) canvas.EventManager.dispatchEvent(canvas.app.clanCitadel.Event.SELECT, null, this.data);
};
canvas.app.clanCitadel.view.BuildingTitleRenderer = function (data, isExit) {
    canvas.ui.ListRenderer.call(this);
    this.setSize(200, 20);
    this.field = this.addChild(new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_11_BOLD_STROKE, canvas.Const.FONT_TAHOMA_11_BOLD_STROKE, 15250952, this._width, this._height, "left"));
    this.buttonMode = true;
    this.isExit = isExit;
    this.data = data;
};
canvas.app.clanCitadel.view.BuildingTitleRenderer.prototype = Object.create(canvas.ui.ListRenderer.prototype);
canvas.app.clanCitadel.view.BuildingTitleRenderer.prototype.update = function () {
    var model = canvas.app.clanCitadel.model;
    if (this.data) {
        var image = model.buildMode ? (model.testRequirements(this.data) ? "icon_build_green" : "icon_build_red") : "icon_enter";
        this.field.text = "<img src='" + image + "' atlas='ui' yOffset='" + (this.isExit ? 2 : 0) + "'/>  " + this.data.title + (this.data.level ? " [" + this.data.level + "]" : "");
    }
};
canvas.app.clanCitadel.view.BuildingTitleRenderer.prototype.clickHandler = function () {
    if (this.isExit) {
        canvas.EventManager.dispatchEvent(canvas.app.clanCitadel.Event.EXIT);
    } else {
        canvas.EventManager.dispatchEvent(canvas.app.clanCitadel.Event.SELECT, null, this.data);
    }
};
canvas.app.clanCitadel.view.BuildingTitleRenderer.prototype.overHandler = function () {
    this.filters = [canvas.Functions.getBrightness(1.2)];
};
canvas.app.clanCitadel.view.BuildingTitleRenderer.prototype.outHandler = function () {
    this.filters = null;
};
canvas.app.clanCitadel.view.BuildingTitleRenderer.prototype.destroy = function () {
    canvas.ui.ListRenderer.prototype.destroy.call(this);
};
canvas.app.clanCitadel.view.BuildingsPanel = function () {
    this._showed = true;
    Object.defineProperty(this, "showed", {
        get: function () {
            return this._showed;
        },
        set: function (value) {
            this._showed = value;
            this.updatePos();
        },
    });
    canvas.px.Container.call(this);
    var model = canvas.app.clanCitadel.model;
    this._width = 200;
    this.container = this.addChild(new canvas.px.Container());
    this.container.position.set(-10, 10);
    this.button = this.addChild(new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "panel_button_back")));
    this.button.position.set(this._width - 45, 80);
    this.arrow = this.button.sprite.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "panel_button_arrow")));
    this.arrow.position.set(14, 21);
    this.hint = new canvas.app.view.MappingHint();
    canvas.EventManager.dispatchEvent(canvas.app.clanCitadel.Event.HINT_ADD, null, { target: this.button, params: new canvas.utils.HintParams(this.hint) });
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.button, this.buttonClickHandler, this);
    this.back = this.container.addChild(new canvas.px.RoundRect(0, 0.5, 200, 200, 10, 10));
    this.msk = this.addChild(new canvas.px.Mask(this.back.width, this.back.height));
    this.msk.position.set(this.container.x, this.container.y);
    this.container.mask = this.msk;
    this.list = this.container.addChild(new canvas.ui.List(canvas.ui.ListType.VERTICAL, 1));
    this.list.position.set(6, 10);
    this.list.setSize(this._width, 1e3);
    this.list._paddingV = 0;
    var value = canvas.app.clanCitadel.model.localStorage.get("rightShowed");
    this.showed = value == undefined || value == "1";
    this.container.x = this.targetPos;
};
canvas.app.clanCitadel.view.BuildingsPanel.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.clanCitadel.view.BuildingsPanel.prototype.updatePos = function () {
    if (!this.button) return;
    if (this.showed) {
        this.arrow.scale.x = 1;
        this.arrow.x = 14;
        this.hint.update(canvas.Translator.getText(188));
        this.targetPos = -10;
    } else {
        this.arrow.scale.x = -1;
        this.arrow.x = 29;
        this.hint.update(canvas.Translator.getText(189));
        this.targetPos = 200;
    }
    canvas.EventManager.addEventListener(canvas.app.clanCitadel.Event.ENTER_FRAME, null, this.frameHandler, this);
};
canvas.app.clanCitadel.view.BuildingsPanel.prototype.update = function () {
    var model = canvas.app.clanCitadel.model;
    this.list.clear();
    var i,
        item,
        renderer,
        len = model.buildings.length - 1;
    for (i = 0; i < len; i++) {
        item = model.buildings[i + 1];
        if (model.buildMode) {
            item = item && item.dataNext ? item.dataNext : null;
        } else {
            item = item && item.data ? item.data : null;
        }
        if (item) {
            renderer = new canvas.app.clanCitadel.view.BuildingTitleRenderer(item);
            this.list.add(renderer, false);
        }
    }
    if (!model.buildMode) {
        renderer = new canvas.app.clanCitadel.view.BuildingTitleRenderer();
        renderer.setSize(0, 10);
        this.list.add(renderer, false);
        renderer = new canvas.app.clanCitadel.view.BuildingTitleRenderer({ title: canvas.Translator.getText(152) }, true);
        this.list.add(renderer, false);
    }
    this.list.update();
    this.back.h = this.list.container.height + 18;
    this.msk.setSize(-1, this.back.h);
    this.button.y = Math.round(this.back.h * 0.5) - 20;
};
canvas.app.clanCitadel.view.BuildingsPanel.prototype.buttonClickHandler = function () {
    this.showed = !this.showed;
    canvas.app.clanCitadel.model.localStorage.set("rightShowed", this.showed ? "1" : "0");
};
canvas.app.clanCitadel.view.BuildingsPanel.prototype.frameHandler = function () {
    if (this.container.x != this.targetPos) {
        if (this.container.x < this.targetPos) {
            this.container.x = Math.min(this.container.x + 20, this.targetPos);
        } else {
            this.container.x = Math.max(this.container.x - 20, this.targetPos);
        }
    } else {
        canvas.EventManager.removeEventListener(canvas.app.clanCitadel.Event.ENTER_FRAME, null, this.frameHandler, this);
    }
};
canvas.app.clanCitadel.view.Map = function () {
    canvas.px.Container.call(this);
    this._width = 0;
    this._height = 0;
    this.container = this.addChild(new canvas.px.Container());
    this.msk = this.addChild(new canvas.px.Mask(100, 100));
    this.container.mask = this.msk;
    this.back = this.container.addChild(new canvas.app.clanCitadel.view.Back());
    this.buildingsContainer = this.container.addChild(new canvas.px.Container());
    var i,
        building,
        len = canvas.app.clanCitadel.Const.MAP_POINTS.length;
    for (i = 0; i < len; i++) {
        building = this.buildingsContainer.addChild(new canvas.app.clanCitadel.view.BuildingRenderer());
        building.position.set(canvas.app.clanCitadel.Const.MAP_POINTS[i][0], canvas.app.clanCitadel.Const.MAP_POINTS[i][1]);
    }
    this.scrollV = this.addChild(new canvas.ui.Scroll(canvas.ui.ScrollType.VERTICAL, null, null, new canvas.px.Sprite(canvas.px.TextureEmpty), new canvas.px.Sprite(canvas.px.TextureEmpty), this.container, true));
    this.scrollV.step = 40;
    canvas.EventManager.addEventListener(canvas.ui.ScrollEvent.EVENT_SCROLL, this.scrollV, this.scrollHandler, this);
    this.scrollH = this.addChild(new canvas.ui.Scroll(canvas.ui.ScrollType.HORIZONTAL, null, null, new canvas.px.Sprite(canvas.px.TextureEmpty), new canvas.px.Sprite(canvas.px.TextureEmpty), this, true, false));
    canvas.EventManager.addEventListener(canvas.ui.ScrollEvent.EVENT_SCROLL, this.scrollH, this.scrollHandler, this);
    this.firstResize = true;
};
canvas.app.clanCitadel.view.Map.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.clanCitadel.view.Map.prototype.setSize = function (w, h) {
    this._width = w;
    this._height = h;
    this.msk.setSize(this._width, this._height);
    this.scrollV.max = canvas.app.clanCitadel.Const.MAP_ORIGINAL_HEIGHT - this._height;
    this.scrollH.max = canvas.app.clanCitadel.Const.MAP_ORIGINAL_WIDTH - this._width;
    if (this.firstResize) {
        this.firstResize = false;
        var mapX = canvas.app.clanCitadel.model.localStorage.get("mapX") || 0;
        var mapY = canvas.app.clanCitadel.model.localStorage.get("mapY") || 10;
        this.scrollH.current = Math.round(this.scrollH.max * parseInt(mapX) * 0.01);
        this.scrollV.current = Math.round(this.scrollV.max * parseInt(mapY) * 0.01);
    }
    this.updateScrollPos();
};
canvas.app.clanCitadel.view.Map.prototype.update = function () {
    var model = canvas.app.clanCitadel.model;
    var i,
        item,
        renderer,
        len = model.buildings.length - 1;
    for (i = 0; i < len; i++) {
        item = model.buildings[i + 1];
        renderer = this.buildingsContainer.getChildAt(i);
        if (model.buildMode) {
            renderer.data = item && item.dataNext ? item.dataNext : null;
        } else {
            renderer.data = item && item.data ? item.data : null;
        }
    }
};
canvas.app.clanCitadel.view.Map.prototype.scrollHandler = function () {
    this.updateScrollPos();
    canvas.app.clanCitadel.model.localStorage.set("mapX", Math.round((this.scrollH.current / Math.max(1, this.scrollH.max)) * 100));
    canvas.app.clanCitadel.model.localStorage.set("mapY", Math.round((this.scrollV.current / Math.max(1, this.scrollV.max)) * 100));
};
canvas.app.clanCitadel.view.Map.prototype.updateScrollPos = function () {
    this.container.position.set(-this.scrollH.current, -this.scrollV.current);
};
canvas.app.clanCitadel.view.ResourceCostRenderer = function (data) {
    canvas.ui.ListRenderer.call(this);
    this.setSize(100, 20);
    this.field = this.addChild(new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_12_BOLD_STROKE, canvas.Const.FONT_TAHOMA_12_BOLD_STROKE, 11534336, this._width, this._height, "center"));
    this.hint = new canvas.app.view.MappingHint();
    canvas.EventManager.dispatchEvent(canvas.app.clanCitadel.Event.HINT_ADD, null, { target: this, params: new canvas.utils.HintParams(this.hint) });
    this.data = data;
};
canvas.app.clanCitadel.view.ResourceCostRenderer.prototype = Object.create(canvas.ui.ListRenderer.prototype);
canvas.app.clanCitadel.view.ResourceCostRenderer.prototype.update = function () {
    if (this.data) {
        var value = parseInt(canvas.app.clanCitadel.model.resources[this.data.type].value);
        this.field.text = "<img src='res_" + this.data.type + "' atlas='ui'/> <font color='#" + (value < this.data.cnt ? "ff3333" : "00ff66") + "'>" + value + "/" + this.data.cnt + "</font>";
        var res = canvas.app.clanCitadel.model.resourcesData[this.data.type];
        this.hint.update(res ? res.title : "");
    }
};
canvas.app.clanCitadel.view.ResourceCostRenderer.prototype.destroy = function () {
    canvas.ui.ListRenderer.prototype.destroy.call(this);
    canvas.EventManager.dispatchEvent(canvas.app.clanCitadel.Event.HINT_REMOVE, null, { target: this });
};
canvas.app.clanCitadel.view.ResourceCountRenderer = function (type, title, infoLink) {
    canvas.ui.ListRenderer.call(this);
    this.setSize(100, 20);
    this.field = this.addChild(new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_11_BOLD, canvas.Const.FONT_TAHOMA_12_BOLD_STROKE, 3394611, this._width, this._height, "left"));
    this.hint = new canvas.app.view.MappingHint(title);
    canvas.EventManager.dispatchEvent(canvas.app.clanCitadel.Event.HINT_ADD, null, { target: this, params: new canvas.utils.HintParams(this.hint, true) });
    this.type = type;
    this.infoLink = infoLink;
    if (this.infoLink) this.buttonMode = true;
};
canvas.app.clanCitadel.view.ResourceCountRenderer.prototype = Object.create(canvas.ui.ListRenderer.prototype);
canvas.app.clanCitadel.view.ResourceCountRenderer.prototype.update = function () {
    if (this.data) {
        var value = parseInt(this.data.value);
        this.field.text = "<img src='res_" + this.type + "' atlas='ui'/> " + value + (parseInt(this.data.limit) ? "/" + this.data.limit : "");
    }
};
canvas.app.clanCitadel.view.ResourceCountRenderer.prototype.clickHandler = function () {
    if (this.infoLink) {
        canvas.Functions.navigateToURL(this.infoLink, "_blank");
    }
};
canvas.app.clanCitadel.view.ResourceCountRenderer.prototype.destroy = function () {
    canvas.ui.ListRenderer.prototype.destroy.call(this);
    canvas.EventManager.dispatchEvent(canvas.app.clanCitadel.Event.HINT_REMOVE, null, { target: this });
};
canvas.app.clanCitadel.view.ResourcesPanel = function () {
    this._showed = true;
    Object.defineProperty(this, "showed", {
        get: function () {
            return this._showed;
        },
        set: function (value) {
            this._showed = value;
            this.updatePos();
        },
    });
    canvas.px.Container.call(this);
    var model = canvas.app.clanCitadel.model;
    this.container = this.addChild(new canvas.px.Container());
    this.container.position.set(10, 10);
    this.button = this.addChild(new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "panel_button_back")));
    this.button.scale.x = -1;
    this.button.position.set(44, 80);
    this.arrow = this.button.sprite.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "panel_button_arrow")));
    this.arrow.position.set(14, 21);
    this.hint = new canvas.app.view.MappingHint();
    canvas.EventManager.dispatchEvent(canvas.app.clanCitadel.Event.HINT_ADD, null, { target: this.button, params: new canvas.utils.HintParams(this.hint) });
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.button, this.buttonClickHandler, this);
    this.back = this.container.addChild(new canvas.px.RoundRect(0, 0.5, 200, 200, 10, 10));
    this.msk = this.addChild(new canvas.px.Mask(this.back.width, this.back.height));
    this.msk.position.set(this.container.x, this.container.y);
    this.container.mask = this.msk;
    var tmpX = 32;
    var tmpY = 10;
    this.items = {};
    this.moneyView = this.container.addChild(new canvas.app.view.Money(3394611, canvas.Const.FONT_TAHOMA_11_BOLD));
    this.moneyView.position.set(tmpX, tmpY);
    tmpY += 20;
    var item,
        i,
        len,
        str,
        a = [];
    for (str in model.resourcesData) {
        a.push(model.resourcesData[str]);
    }
    a.sort(function (a, b) {
        return parseInt(a.ord) - parseInt(b.ord);
    });
    len = a.length;
    for (i = 0; i < len; i++) {
        item = a[i];
        this.items[item.id] = this.container.addChild(new canvas.app.clanCitadel.view.ResourceCountRenderer(item.id, item.title, item.id == "energy" ? "" : "artifact_info.php?artikul_id=" + item.artikul_id));
        this.items[item.id].position.set(tmpX, tmpY);
        tmpY += 20;
    }
    var value = canvas.app.clanCitadel.model.localStorage.get("leftShowed");
    this.showed = value == undefined || value == "1";
    this.container.x = this.targetPos;
};
canvas.app.clanCitadel.view.ResourcesPanel.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.clanCitadel.view.ResourcesPanel.prototype.updatePos = function () {
    if (!this.button) return;
    if (this.showed) {
        this.arrow.scale.x = 1;
        this.arrow.x = 14;
        this.hint.update(canvas.Translator.getText(188));
        this.targetPos = 10;
    } else {
        this.arrow.scale.x = -1;
        this.arrow.x = 29;
        this.hint.update(canvas.Translator.getText(189));
        this.targetPos = -200;
    }
    canvas.EventManager.addEventListener(canvas.app.clanCitadel.Event.ENTER_FRAME, null, this.frameHandler, this);
};
canvas.app.clanCitadel.view.ResourcesPanel.prototype.update = function () {
    var model = canvas.app.clanCitadel.model;
    this.moneyView.money = parseFloat(model.resources.money.value) * 100;
    for (var str in this.items) {
        this.items[str].data = model.resources[str];
    }
};
canvas.app.clanCitadel.view.ResourcesPanel.prototype.buttonClickHandler = function () {
    this.showed = !this.showed;
    canvas.app.clanCitadel.model.localStorage.set("leftShowed", this.showed ? "1" : "0");
};
canvas.app.clanCitadel.view.ResourcesPanel.prototype.frameHandler = function () {
    if (this.container.x != this.targetPos) {
        if (this.container.x < this.targetPos) {
            this.container.x = Math.min(this.container.x + 20, this.targetPos);
        } else {
            this.container.x = Math.max(this.container.x - 20, this.targetPos);
        }
    } else {
        canvas.EventManager.removeEventListener(canvas.app.clanCitadel.Event.ENTER_FRAME, null, this.frameHandler, this);
    }
};
canvas.app.clanCitadel.view.sanctuary.ListItem = function () {
    this._data = null;
    Object.defineProperty(this, "data", {
        get: function () {
            return this._data;
        },
        set: function (value) {
            this._data = value;
            if (!this._data) {
                if (this.parent) {
                    this.parent.removeChild(this);
                    this.targetAlpha = 0;
                    this.targetScale = 0;
                }
            } else {
                this.update();
            }
        },
    });
    canvas.px.Container.call(this);
    this.targetPoint = new canvas.px.Point(300);
    this.targetAlpha = 0;
    this.targetScale = 0;
    this.container = this.addChild(new canvas.px.Container());
    this.container.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "sanctuary_window")));
    this.topField = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_13, 7092753, this.container.width, 20, "center"));
    this.bottomField = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_13, 7092753, this.topField._width, 20, "center"));
    this.image = this.container.addChild(new canvas.ui.Image());
    this.image.position.set(26, 57);
    this.image.interactive = false;
    this.lockedImage = this.container.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "sanctuary_lock")));
    this.lockedImage.position.set(200, 200);
    this.container.pivot = new canvas.px.Point(Math.round(this.container.width * 0.5), Math.round(this.container.height * 0.5));
    this.topField.position.set(-4 - this.container.pivot.x, 11 - this.container.pivot.y);
    this.topField.baseY = this.topField.y;
    this.bottomField.position.set(-4 - this.container.pivot.x, 244 - this.container.pivot.y);
    this.bottomField.baseY = this.bottomField.y;
    this.interactive = true;
};
canvas.app.clanCitadel.view.sanctuary.ListItem.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.clanCitadel.view.sanctuary.ListItem.prototype.update = function () {
    this.topField.text = this.data.title ? this.data.title : "No title";
    this.bottomField.text = this.data.comment ? this.data.comment : "";
    this.bottomField.color = this.data.locked ? 7929856 : 2931200;
    this.lockedImage.visible = this.data.locked;
    if (this.data.image) this.image.setImage(this.data.image);
};
canvas.app.clanCitadel.view.sanctuary.ListItem.prototype.updateScale = function () {
    if (this.container.scale.x != 1) {
        this.topField.y = this.topField.baseY + 25;
        this.bottomField.y = this.bottomField.baseY - 23;
    } else {
        this.topField.y = this.topField.baseY;
        this.bottomField.y = this.bottomField.baseY;
    }
};
canvas.app.clanCitadel.view.sanctuary.ListView = function () {
    this._data = null;
    Object.defineProperty(this, "data", {
        get: function () {
            return this._data;
        },
        set: function (value) {
            var firstInit = !this._data;
            this._data = value;
            if (!this._data) return;
            var i,
                listItem,
                len = this._data.length;
            if (len > this.items.length) {
                for (i = this.items.length; i < len; i++) {
                    listItem = new canvas.app.clanCitadel.view.sanctuary.ListItem();
                    listItem.y = 150;
                    listItem.alpha = 0;
                    this.items.push(listItem);
                }
            }
            len = this.items.length;
            for (i = 0; i < len; i++) this.items[i].data = this._data[i];
            this.update(firstInit);
        },
    });
    this._currentIndex = 0;
    Object.defineProperty(this, "currentIndex", {
        get: function () {
            return this._currentIndex;
        },
        set: function (value) {
            var len = this.data.length;
            this._currentIndex = value < 0 ? 0 : value >= len ? len - 1 : value;
            this.leftArrow.visible = len > canvas.app.clanCitadel.Const.SANCTUARY_ON_PAGE - 2 && this._currentIndex > 0;
            this.rightArrow.visible = len > canvas.app.clanCitadel.Const.SANCTUARY_ON_PAGE - 2 && this._currentIndex < len - 1;
            this.update();
            canvas.EventManager.dispatchEvent(canvas.app.clanCitadel.Event.SANCTUARY_SELECT, null, this.data[this.currentIndex]);
        },
    });
    canvas.px.Container.call(this);
    this.items = new Array();
    this.container = this.addChild(new canvas.px.Container());
    this.leftArrow = this.addChild(new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "sanctuary_arrow")));
    this.leftArrow.y = 135;
    this.rightArrow = this.addChild(new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "sanctuary_arrow")));
    this.rightArrow.position.set(600, 135);
    this.rightArrow.scale.x = -1;
    canvas.EventManager.addEventListener(canvas.app.clanCitadel.Event.ENTER_FRAME_WIN, null, this.updateHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.leftArrow, this.leftArrowClickHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.rightArrow, this.rightArrowClickHandler, this);
    this.interactive = true;
    this.click = this.clickHandler.bind(this);
};
canvas.app.clanCitadel.view.sanctuary.ListView.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.clanCitadel.view.sanctuary.ListView.prototype.update = function (init) {
    var i,
        listItem,
        len = this.data.length;
    if (len == 0) return;
    for (i = 0; i < len; i++) {
        listItem = this.items[i];
        if (i < this.currentIndex - 1) {
            listItem.targetAlpha = 0;
            listItem.targetScale = 0;
            listItem.targetPoint.x = 40;
            listItem.targetPoint.y = 165;
            if (listItem.alpha > 0) this.container.addChildAt(listItem, 0);
        } else if (i == this.currentIndex - 1) {
            listItem.targetAlpha = 1;
            listItem.targetScale = 0.8;
            listItem.targetPoint.x = 140;
            listItem.targetPoint.y = 165;
            this.container.addChild(listItem);
        } else if (i == this.currentIndex) {
            listItem.targetAlpha = 1;
            listItem.targetScale = 1;
            listItem.targetPoint.x = 300;
            listItem.targetPoint.y = 150;
        } else if (i == this.currentIndex + 1) {
            listItem.targetAlpha = 1;
            listItem.targetScale = 0.8;
            listItem.targetPoint.x = 464;
            listItem.targetPoint.y = 165;
            this.container.addChild(listItem);
        } else {
            listItem.targetAlpha = 0;
            listItem.targetScale = 0;
            listItem.targetPoint.x = 564;
            listItem.targetPoint.y = 165;
            if (listItem.alpha > 0) this.container.addChildAt(listItem, 0);
        }
        if (init) {
            listItem.alpha = listItem.targetAlpha;
            listItem.container.scale.x = listItem.container.scale.y = listItem.targetScale;
            listItem.position.set(listItem.targetPoint.x, listItem.targetPoint.y);
            listItem.updateScale();
        }
    }
    this.container.addChild(this.items[this.currentIndex]);
};
canvas.app.clanCitadel.view.sanctuary.ListView.prototype.updateHandler = function () {
    var listItem,
        direction,
        i,
        len = this.items.length;
    for (i = 0; i < len; i++) {
        listItem = this.items[i];
        if (listItem.targetAlpha != listItem.alpha) {
            direction = listItem.targetAlpha > listItem.alpha;
            listItem.alpha += direction ? 0.15 : -0.15;
            if (listItem.targetAlpha > listItem.alpha != direction) listItem.alpha = listItem.targetAlpha;
        } else {
            if (listItem.alpha == 0 && this.container.contains(listItem)) this.container.removeChild(listItem);
        }
        if (listItem.targetPoint.x != listItem.x) {
            direction = listItem.targetPoint.x > listItem.x;
            listItem.x += direction ? 20 : -20;
            if (listItem.targetPoint.x > listItem.x != direction) listItem.x = listItem.targetPoint.x;
        }
        if (listItem.targetPoint.y != listItem.y) {
            direction = listItem.targetPoint.y > listItem.y;
            listItem.y += direction ? 3 : -3;
            if (listItem.targetPoint.y > listItem.y != direction) listItem.y = listItem.targetPoint.y;
        }
        if (listItem.targetScale != listItem.container.scale.x) {
            direction = listItem.targetScale > listItem.container.scale.x;
            listItem.container.scale.x += direction ? 0.1 : -0.1;
            if (listItem.targetScale > listItem.container.scale.x != direction) listItem.container.scale.x = listItem.targetScale;
            listItem.container.scale.y = listItem.container.scale.x;
            listItem.updateScale();
        }
    }
};
canvas.app.clanCitadel.view.sanctuary.ListView.prototype.clickHandler = function (event) {
    if (event.target instanceof canvas.app.clanCitadel.view.sanctuary.ListItem) {
        this.currentIndex = this.items.indexOf(event.target);
    }
};
canvas.app.clanCitadel.view.sanctuary.ListView.prototype.leftArrowClickHandler = function () {
    this.currentIndex--;
};
canvas.app.clanCitadel.view.sanctuary.ListView.prototype.rightArrowClickHandler = function () {
    this.currentIndex++;
};
canvas.app.clanCitadel.view.sanctuary.ListView.prototype.destroy = function () {
    canvas.px.Container.prototype.destroy.apply(this, [{ children: true }]);
    canvas.EventManager.removeEventListener(canvas.app.clanCitadel.Event.ENTER_FRAME_WIN, null, this.updateHandler, this);
    canvas.EventManager.removeEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.leftArrow, this.leftArrowClickHandler, this);
    canvas.EventManager.removeEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.rightArrow, this.rightArrowClickHandler, this);
    this.click = null;
};
canvas.app.clanCitadel.view.sanctuary.SanctuaryWindow = function () {
    canvas.px.Window.call(this);
    this.addChild(new canvas.px.Mask(300, 300));
    this.container = this.addChild(new canvas.px.Container());
    this.goButton = this.container.addChild(new canvas.app.view.MainButton());
    this.goButton.setTitle(canvas.Translator.getText(1250));
    this.goButton.setSize(200);
    this.goButton.position.set(200, 300);
    this.backButton = this.container.addChild(new canvas.app.view.MainButton());
    this.backButton.setTitle(canvas.Translator.getText(232));
    this.backButton.setSize(200);
    this.backButton.position.set(100, 300);
    this.backButton.visible = false;
    this.list = this.container.addChild(new canvas.app.clanCitadel.view.sanctuary.ListView());
    this.closeButton = this.container.addChild(new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "sanctuary_close")));
    this.closeButton.x = 575;
    var model = canvas.app.clanCitadel.model.sanctuary;
    model.prevItems = null;
    if (model.items != null) {
        this.list.data = model.items;
        model.currentItem = model.items[0];
        this.list.currentIndex = 0;
    }
    this.update();
    canvas.EventManager.addEventListener(canvas.app.clanCitadel.Event.SANCTUARY_SELECT, null, this.selectHandler, this);
};
canvas.app.clanCitadel.view.sanctuary.SanctuaryWindow.prototype = Object.create(canvas.px.Window.prototype);
canvas.app.clanCitadel.view.sanctuary.SanctuaryWindow.prototype.update = function () {
    var model = canvas.app.clanCitadel.model.sanctuary;
    if (model.prevItems == null) {
        this.backButton.visible = false;
        this.goButton.x = 200;
    } else {
        this.backButton.visible = true;
        this.goButton.x = 300;
    }
    this.goButton.enabled = model.currentItem != null && !model.currentItem.locked;
};
canvas.app.clanCitadel.view.sanctuary.SanctuaryWindow.prototype.clickHandler = function (event) {
    canvas.px.Window.prototype.clickHandler.call(this, event);
    var model = canvas.app.clanCitadel.model.sanctuary;
    if (canvas.Functions.findParent(this.goButton, event.target)) {
        if (model.currentItem != null) {
            if (model.currentItem.url && model.currentItem.url != "") {
                canvas.Functions.navigateToURL(model.currentItem.url, "_self");
            } else if (model.currentItem.list != null && model.currentItem.list.length > 0) {
                model.prevItems = this.list.data;
                model.prevIndex = this.list.currentIndex;
                this.list.data = model.currentItem.list;
                this.list.currentIndex = 0;
            }
        }
    } else if (canvas.Functions.findParent(this.backButton, event.target)) {
        if (model.prevItems != null) {
            this.list.data = model.prevItems;
            model.prevItems = null;
            this.list.currentIndex = model.prevIndex;
        }
    }
};
canvas.app.clanCitadel.view.sanctuary.SanctuaryWindow.prototype.selectHandler = function (event) {
    var model = canvas.app.clanCitadel.model.sanctuary;
    model.currentItem = event.params;
    this.update();
};
canvas.app.clanCitadel.view.sanctuary.SanctuaryWindow.prototype.destroy = function () {
    canvas.px.Window.prototype.destroy.call(this);
    canvas.EventManager.removeEventListener(canvas.app.clanCitadel.Event.SANCTUARY_SELECT, null, this.selectHandler, this);
};
canvas.app.clanWar.Const = { MODE_CLAN_WAR: 1, MODE_CLAN_FORTRESS: 2, WIDTH: 800, HEIGHT: 200, NUM_ISLANDS: 5 };
canvas.app.clanWar.Event = { ENTER_FRAME: "ClanWar.ENTER_FRAME", HINT_ADD: "ClanWar.HINT_ADD", HINT_REMOVE: "ClanWar.HINT_REMOVE", RESIZE: "ClanWar.RESIZE", SHOW_BATTLE: "ClanWar.SHOW_BATTLE", SHOW_POPUP: "ClanWar.SHOW_POPUP" };
canvas.app.clanWar.Main = function (model) {
    canvas.px.Container.call(this);
    this.model = model;
    this.hintManager = new canvas.utils.HintManager();
    this.hintContainer = new canvas.px.Container();
    this.hintContainer.interactive = true;
    canvas.EventManager.addEventListener(canvas.app.clanWar.Event.HINT_ADD, null, this.handlerHintAdd, this);
    canvas.EventManager.addEventListener(canvas.app.clanWar.Event.HINT_REMOVE, null, this.handlerHintRemove, this);
    this.windowsManager = new canvas.utils.WindowsManager();
    this.windowsManager.dx = 8;
    this.windowsManager.dy = 8;
    this.windowsContainer = new canvas.px.Container();
    this.view = this.addChild(new canvas.app.clanWar.View());
    this.addChild(this.windowsContainer);
    this.addChild(this.hintContainer);
    this.mainRequest = new canvas.utils.URLRequest();
    canvas.EventManager.addEventListener(canvas.utils.URLRequestEvent.EVENT_COMPLETE, this.mainRequest, this.mainRequestCompleteHandler, this);
    canvas.EventManager.addEventListener(canvas.utils.URLRequestEvent.EVENT_ERROR, this.mainRequest, this.requestErrorHandler, this);
    this.request = new canvas.utils.URLRequest();
    canvas.EventManager.addEventListener(canvas.utils.URLRequestEvent.EVENT_COMPLETE, this.request, this.requestCompleteHandler, this);
    canvas.EventManager.addEventListener(canvas.utils.URLRequestEvent.EVENT_ERROR, this.request, this.requestErrorHandler, this);
    canvas.EventManager.addEventListener(canvas.app.clanWar.Event.RESIZE, null, this.resize, this);
    this.view.mousedown = this.downHandler.bind(this);
    this.view.mouseup = this.upHandler.bind(this);
    this.view.click = this.clickHandler.bind(this);
    this.view.interactive = true;
    this.timer = setInterval(this.timerHandler.bind(this), 5e3);
    this.timerHandler();
    this.timer1000 = setInterval(this.timer1000Handler.bind(this), 1e3);
    this.timer1000Handler();
    canvas.EventManager.addEventListener(canvas.app.clanWar.Event.SHOW_BATTLE, null, this.eventsHandler, this);
    canvas.EventManager.addEventListener(canvas.app.clanWar.Event.SHOW_POPUP, null, this.eventsHandler, this);
};
canvas.app.clanWar.Main.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.clanWar.Main.prototype.handlerHintAdd = function (e) {
    this.hintManager.add(e.params.target, e.params.params);
};
canvas.app.clanWar.Main.prototype.handlerHintRemove = function (e) {
    this.hintManager.remove(e.params.target);
};
canvas.app.clanWar.Main.prototype.swfObject = function (data) {
    var str;
    var obj;
    if (data) {
        for (str in data) {
            obj = data[str];
            switch (str) {
                case "clanWar|puton":
                    break;
            }
        }
    }
};
canvas.app.clanWar.Main.prototype.update = function (xml) {
    this.model.parse(xml);
    this.view.update();
};
canvas.app.clanWar.Main.prototype.mainRequestCompleteHandler = function () {
    var xml = new DOMParser().parseFromString(this.mainRequest.request.response.replace(/&/g, "&amp;"), "text/xml");
    if (xml.firstChild.nodeName == "battle") {
        this.update(xml.firstChild);
    }
};
canvas.app.clanWar.Main.prototype.requestCompleteHandler = function () {
    var result = new DOMParser().parseFromString(this.request.request.response, "text/xml").firstChild;
    if (canvas.Functions.getAttribute(result, "redirect_url")) {
        canvas.Functions.navigateToURL(canvas.Functions.getAttribute(result, "redirect_url"), "_self");
        return;
    }
    if (canvas.Functions.getAttribute(result, "msg")) {
        this.hintManager.hide();
        this.view.showMessage(canvas.Functions.getAttribute(result, "msg"));
    }
    if (canvas.Functions.getAttribute(result, "status") == "1") this.update(this.model.lastXML);
    this.timerHandler();
};
canvas.app.clanWar.Main.prototype.requestErrorHandler = function () {};
canvas.app.clanWar.Main.prototype.sendRequest = function (mode, params) {
    var url = (canvas.Config.isLocal ? "use_buff.xml" : this.model.requestURL) + "?mode=" + mode + (params ? "&" + params : "");
    this.request.load(url);
};
canvas.app.clanWar.Main.prototype.resize = function () {
    this.view.resize();
    this.windowsManager.init(this.windowsContainer, this.model.width, this.model.height, this.view);
    this.hintManager.init(this.hintContainer, this.model.width, this.model.height);
};
canvas.app.clanWar.Main.prototype.timerHandler = function () {
    var url =
        (canvas.Config.isLocal ? "clan_battle_conf.xml" : this.model.requestURL) + "?mode=clan_battle_info&" + this.model.requestIDTitle + "=" + this.model.battleID + (this.model.currentRoom > 0 ? "&room=" + this.model.currentRoom : "");
    this.mainRequest.load(url);
};
canvas.app.clanWar.Main.prototype.timer1000Handler = function () {
    this.view.clocks.update();
};
canvas.app.clanWar.Main.prototype.downHandler = function (event) {
    var userLine, bafIcon, element;
    if (!this.model.supervisor) return;
    if (event.target.name == "login") {
        userLine = event.target.parent;
        element = this.model.findByAttributeValue(this.model.lastXML, ["users", "user"], "id", userLine.data.id);
        if (!element) return;
        if (this.model.fightStarted && parseInt(element.attributes.room.value) > 0) return;
        this.model.dragUserID = userLine.data.id;
        this.view.dragLine(userLine, event.data.global.x, event.data.global.y);
        this.view.map.update();
        return;
    }
    if (event.target.name && event.target.name.substr(0, 4) == "baf_") {
        bafIcon = event.target.parent;
        if (bafIcon.enabled) {
            this.model.dragBaffID = bafIcon.name.substr(4);
            this.view.dragBaf(bafIcon, event.data.global.x, event.data.global.y);
            this.view.map.update();
            return;
        }
    }
};
canvas.app.clanWar.Main.prototype.upHandler = function (event) {
    var target = this.view.dragLine(null, event.data.global.x, event.data.global.y);
    var userData;
    if (target != "") {
        if (this.model.users[this.model.dragUserID] != undefined && this.model.users[this.model.dragUserID].room != parseInt(target)) {
            userData = this.model.users[this.model.dragUserID];
            if (this.model.confirmVoivoda && userData && userData.id == this.model.myId) {
                this.view.showPopup(canvas.Translator.getText(323), this.assignMemberAction.bind(this), [target]);
            } else {
                this.assignMemberAction(target);
            }
        }
    }
    target = this.view.dragBaf(null, event.data.global.x, event.data.global.y);
    if (target != "") {
        this.useBuffAction(target);
    }
};
canvas.app.clanWar.Main.prototype.assignMemberAction = function (target) {
    var element = this.model.findByAttributeValue(this.model.lastXML, ["users", "user"], "id", this.model.dragUserID);
    if (element) {
        element.attributes.room.value = "-1";
        this.update(this.model.lastXML);
        element.attributes.room.value = target;
    }
    this.sendRequest("assign_member", this.model.requestIDTitle + "=" + this.model.battleID + "&room=" + target + "&user_id=" + this.model.dragUserID);
    if (this.model.dragUserID != "") {
        this.model.dragUserID = "";
        this.view.map.update();
    }
};
canvas.app.clanWar.Main.prototype.clickHandler = function (event) {
    var userLine;
    switch (event.target.name) {
        case "private":
            userLine = event.target.parent.parent;
            userPrvTag(userLine.data.login.replace(/ \[\d*\]$/, ""));
            break;
        case "exit":
            this.hintManager.hide();
            if (!this.model.warFinished) {
                this.view.showPopup(canvas.Translator.getText(320), this.exit.bind(this));
            } else {
                this.exit();
            }
            break;
        case "reserv":
            if (!event.target.parent.enabled) return;
            this.reservAction();
            break;
        case "ready":
            if (!event.target.parent.enabled) return;
            this.readyAction();
            break;
        default:
    }
};
canvas.app.clanWar.Main.prototype.exit = function () {
    this.sendRequest("leave", this.model.requestIDTitle + "=" + this.model.battleID);
};
canvas.app.clanWar.Main.prototype.reservAction = function () {
    this.model.lastXML.setAttribute("reserv", "1");
    this.model.lastXML.setAttribute("reservTimeLeft", "1000000");
    this.update(this.model.lastXML);
    this.sendRequest("use_reserv", this.model.requestIDTitle + "=" + this.model.battleID);
};
canvas.app.clanWar.Main.prototype.readyAction = function () {
    this.model.lastXML.setAttribute("ready", "1");
    this.update(this.model.lastXML);
    this.sendRequest("ready", this.model.requestIDTitle + "=" + this.model.battleID);
};
canvas.app.clanWar.Main.prototype.useBuffAction = function (target) {
    var element = this.model.findByAttributeValue(this.model.lastXML, ["buffs", "buff"], "id", this.model.dragBaffID);
    if (element) {
        element.attributes.cd_left.value = "100";
        this.update(this.model.lastXML);
    }
    this.sendRequest("use_buff", this.model.requestIDTitle + "=" + this.model.battleID + "&room=" + target + "&buff_id=" + this.model.dragBaffID);
    if (this.model.dragBaffID != "") {
        this.model.dragBaffID = "";
        this.view.map.update();
    }
};
canvas.app.clanWar.Main.prototype.eventsHandler = function (event) {
    switch (event.name) {
        case canvas.app.clanWar.Event.SHOW_BATTLE:
            if (this.model.fightStarted) {
                if (event.params && event.params.substr(0, 5) == "list_") {
                    this.model.currentRoom = parseInt(event.params.substr(5));
                } else {
                    this.update(this.model.lastXML);
                    this.model.currentRoom = 0;
                }
                this.view.map.showBattle();
                this.timerHandler();
            }
            break;
        case canvas.app.clanWar.Event.SHOW_POPUP:
            this.view.showPopup(event.params);
            break;
    }
};
canvas.app.clanWar.Model = function (par) {
    this.w = 400;
    this.h = 400;
    this.fightStarted = true;
    this.warFinished = true;
    this.reservUsed = true;
    this.ready = false;
    this.readyEnemy = false;
    this.reservTimeLeft = 0;
    this.reserv2TimeLeft = 0;
    this.useReservTimeLeft = 0;
    this.useLeaderTimeLeft = 0;
    this.battleID = "";
    this.requestURL = "";
    this.requestIDTitle = "";
    this.currentRoom = 0;
    this.logsURL = new Array();
    this.baffs = new Object();
    this.rooms = new Array();
    this.roomsStatus = new Array();
    this.dragUserID = "";
    this.dragBaffID = "";
    this.timeToStart = 0;
    this.date = new Date();
    this.lastXML = null;
    this.mode = 1;
    this.supervisor = par.supervisor == undefined ? true : parseInt(par.supervisor) == 1;
    this.myId = par.my_id;
    if (par.fort != undefined && parseInt(par.fort) == 1) {
        this.mode = canvas.app.clanWar.Const.MODE_CLAN_FORTRESS;
        this.mapBackURL = par.backImage;
    } else {
        this.mode = canvas.app.clanWar.Const.MODE_CLAN_WAR;
        this.mapBackURL = "back.jpg";
    }
    switch (this.mode) {
        case canvas.app.clanWar.Const.MODE_CLAN_FORTRESS:
            canvas.app.clanWar.Const.NUM_ISLANDS = 3;
            this.battleID = par.clan_fort_id == undefined ? "" : par.clan_fort_id;
            this.requestURL = "clan_fort_conf.php";
            this.requestIDTitle = "clan_fort_id";
            break;
        default:
            canvas.app.clanWar.Const.NUM_ISLANDS = 5;
            this.battleID = par.clan_battle_id == undefined ? "" : par.clan_battle_id;
            this.requestURL = "clan_battle_conf.php";
            this.requestIDTitle = "clan_battle_id";
    }
    var i, obj;
    for (i = 0; i <= canvas.app.clanWar.Const.NUM_ISLANDS; i++) {
        this.rooms.push({ team1: [], team2: [] });
    }
    for (i = 1; i <= 3; i++) {
        obj = new Object();
        obj.id = par["buff_" + i.toString() + "_id"] == undefined ? i.toString() : par["buff_" + i.toString() + "_id"];
        obj.desc = par["buff_" + i.toString() + "_descr"] == undefined ? "" : par["buff_" + i.toString() + "_descr"];
        obj.cd = par["buff_" + i.toString() + "_cd"] == undefined ? 0 : parseInt(par["buff_" + i.toString() + "_cd"]);
        obj.cdLeft = 100;
        this.baffs[obj.id] = obj;
    }
};
canvas.app.clanWar.Model.prototype.parse = function (xml) {
    if (!this.warFinished && parseInt(xml.attributes.status.value) == 2 && xml.attributes.info && xml.attributes.info.value != "") {
        canvas.Functions.navigateToURL(xml.attributes.info.value, "_self");
        return;
    }
    this.ready = xml.attributes.ready ? parseInt(xml.attributes.ready.value) == 1 : false;
    this.fightStarted = parseInt(xml.attributes.status.value) >= 1;
    this.warFinished = parseInt(xml.attributes.status.value) == 2;
    this.reservUsed = parseInt(xml.attributes.status.value) != 1 || parseInt(xml.attributes.reserv.value) == 1;
    this.reservTimeLeft = xml.attributes.reservTimeLeft ? parseInt(xml.attributes.reservTimeLeft.value) : 0;
    this.reserv2TimeLeft = xml.attributes.reserv2TimeLeft ? parseInt(xml.attributes.reserv2TimeLeft.value) : 0;
    this.useReservTimeLeft = xml.attributes.startReservTimeLeft ? parseInt(xml.attributes.startReservTimeLeft.value) : 0;
    this.useLeaderTimeLeft = xml.attributes.useLeaderTimeLeft ? parseInt(xml.attributes.useLeaderTimeLeft.value) : 0;
    this.timeToStart = xml.attributes.time_before_fight ? parseInt(xml.attributes.time_before_fight.value) : 0;
    if (this.fightStarted) this.ready = true;
    this.readyEnemy = xml.attributes.ready_enemy ? parseInt(xml.attributes.ready_enemy.value) == 1 : false;
    this.confirmVoivoda = xml.attributes.confirm_voivoda && parseInt(xml.attributes.confirm_voivoda.value) == 1;
    this.date = new Date();
    var list = canvas.Functions.getChildNodeByName(xml, "users");
    if (list) this.parseUsers(list[0]);
    if (this.fightStarted) {
        list = canvas.Functions.getChildNodeByName(xml, "buffs");
        if (list) this.parseBaffs(list[0]);
        list = canvas.Functions.getChildNodeByName(xml, "rooms");
        if (list) this.parseRooms(list[0]);
        list = canvas.Functions.getChildNodeByName(xml, "room");
        if (list) this.parseRoomUsers(list[0]);
    }
    this.lastXML = xml;
};
canvas.app.clanWar.Model.prototype.parseUsers = function (xml) {
    var obj;
    var room;
    var i;
    var len;
    var userData;
    this.myTeamIds = new Array();
    this.users = new Object();
    for (i = 0; i <= canvas.app.clanWar.Const.NUM_ISLANDS; i++) {
        this.rooms[i].team1 = new Array();
    }
    var list = xml.getElementsByTagName("user");
    len = list.length;
    for (i = 0; i < len; i++) {
        obj = list[i];
        room = parseInt(canvas.Functions.getAttribute(obj, "room"));
        if (room < 0) continue;
        userData = new canvas.data.clanWar.UserData(
            canvas.Functions.getAttribute(obj, "nick"),
            false,
            true,
            canvas.Functions.getAttribute(obj, "id"),
            canvas.Functions.getAttribute(obj, "hp") ? parseInt(canvas.Functions.getAttribute(obj, "hp")) : -1,
            canvas.Functions.getAttribute(obj, "mp") ? parseInt(canvas.Functions.getAttribute(obj, "mp")) : -1,
            parseInt(canvas.Functions.getAttribute(obj, "voivoda")) == 1,
            room,
            parseInt(canvas.Functions.getAttribute(obj, "delayed")) == 1
        );
        this.rooms[room].team1.push(userData);
        this.myTeamIds.push(parseInt(canvas.Functions.getAttribute(obj, "id")));
        this.users[userData.id] = userData;
    }
};
canvas.app.clanWar.Model.prototype.parseRoomUsers = function (xml) {
    var obj, obj2;
    var room = parseInt(canvas.Functions.getAttribute(xml, "num"));
    this.roomsStatus[room] = parseInt(canvas.Functions.getAttribute(xml, "status"));
    this.logsURL[room] = canvas.Functions.getAttribute(xml, "fight_info");
    this.rooms[room].team1 = new Array();
    this.rooms[room].team2 = new Array();
    var list = xml.getElementsByTagName("team"),
        list2;
    var i,
        len = list.length,
        j,
        len2;
    for (i = 0; i < len; i++) {
        obj = list[i];
        if (canvas.Functions.getAttribute(obj, "num") == "1") {
            list2 = obj.getElementsByTagName("user");
            len2 = list2.length;
            for (j = 0; j < len2; j++) {
                obj2 = list2[j];
                this.rooms[room].team1.push(
                    new canvas.data.clanWar.UserData(
                        canvas.Functions.getAttribute(obj2, "nick"),
                        false,
                        true,
                        canvas.Functions.getAttribute(obj2, "id"),
                        canvas.Functions.getAttribute(obj2, "hp") ? parseInt(canvas.Functions.getAttribute(obj2, "hp")) : -1,
                        canvas.Functions.getAttribute(obj2, "mp") ? parseInt(canvas.Functions.getAttribute(obj2, "mp")) : -1,
                        undefined,
                        undefined,
                        parseInt(canvas.Functions.getAttribute(obj2, "delayed")) == 1
                    )
                );
            }
        } else if (canvas.Functions.getAttribute(obj, "num") == "2") {
            list2 = obj.getElementsByTagName("user");
            len2 = list2.length;
            for (j = 0; j < len2; j++) {
                obj2 = list2[j];
                this.rooms[room].team2.push(
                    new canvas.data.clanWar.UserData(
                        canvas.Functions.getAttribute(obj2, "nick"),
                        false,
                        true,
                        canvas.Functions.getAttribute(obj2, "id"),
                        canvas.Functions.getAttribute(obj2, "hp") ? parseInt(canvas.Functions.getAttribute(obj2, "hp")) : -1,
                        canvas.Functions.getAttribute(obj2, "mp") ? parseInt(canvas.Functions.getAttribute(obj2, "mp")) : -1,
                        undefined,
                        undefined,
                        parseInt(canvas.Functions.getAttribute(obj2, "delayed")) == 1
                    )
                );
            }
        }
    }
};
canvas.app.clanWar.Model.prototype.parseBaffs = function (xml) {
    var obj;
    var list = xml.getElementsByTagName("buff");
    var i,
        len = list.length,
        obj;
    for (i = 0; i < len; i++) {
        obj = list[i];
        if (this.baffs[canvas.Functions.getAttribute(obj, "id")] != undefined) this.baffs[canvas.Functions.getAttribute(obj, "id")].cdLeft = parseInt(canvas.Functions.getAttribute(obj, "cd_left"));
    }
};
canvas.app.clanWar.Model.prototype.parseRooms = function (xml) {
    var obj;
    var list = xml.getElementsByTagName("room");
    var i,
        len = list.length,
        obj;
    for (i = 0; i < len; i++) {
        obj = list[i];
        this.roomsStatus[parseInt(canvas.Functions.getAttribute(obj, "num"))] = parseInt(canvas.Functions.getAttribute(obj, "status"));
    }
};
canvas.app.clanWar.Model.prototype.findByAttributeValue = function (xml, tagsArr, attributeName, attributeValue) {
    var len = tagsArr.length,
        i,
        list = xml;
    for (i = 0; i < len; i++) {
        list = list.getElementsByTagName(tagsArr[i]);
        if (i < len - 1) list = list[0];
    }
    len = list.length;
    for (i = 0; i < len; i++) {
        if (list[i].attributes[attributeName] && list[i].attributes[attributeName].value == attributeValue) {
            return list[i];
        }
    }
    return null;
};
canvas.app.clanWar.View = function () {
    canvas.px.Container.call(this);
    this.wall = this.addChild(new canvas.px.Mask(100, 100, 1654101, 1));
    this.wall.position.set(10, 10);
    this.msk = this.addChild(new canvas.px.Mask(100, 100));
    this.msk.position.set(10, 10);
    this.container = this.addChild(new canvas.px.Container());
    this.background = this.addChild(new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "curl"), 95, 130, 95, 130));
    this.map = this.container.addChild(new canvas.app.clanWar.view.Map());
    this.map.y = 10;
    this.map.mask = this.msk;
    this.users = this.addChild(new canvas.app.clanWar.view.UsersList("list_0", true));
    this.users.position.set(30, 30);
    this.baffs = this.container.addChild(new canvas.app.clanWar.view.Baffs());
    this.baffs.x = 10;
    this.clocks = this.container.addChild(new canvas.app.clanWar.view.Clocks());
    this.clocks.y = 60;
    this.exitButton = this.container.addChild(new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "exit_button")));
    this.exitButton.sprite.name = "exit";
    this.exitButton.y = 24;
    this.confirmWindow = new canvas.app.manor.view.controls.ConfirmWindow();
    this.messageWindow = new canvas.app.manor.view.controls.MessageWindow();
    this.update();
    this.resize();
    canvas.EventManager.dispatchEvent(canvas.app.clanWar.Event.HINT_ADD, null, { target: this.exitButton, params: new canvas.utils.HintParams(new canvas.app.view.MappingHint(canvas.Translator.getText(300))) });
};
canvas.app.clanWar.View.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.clanWar.View.prototype.resize = function () {
    var model = canvas.app.clanWar.model;
    this.users.updateView();
    this.map.x = Math.round((model.w - this.map.width) * 0.5) + 30;
    this.wall.setSize(model.w - 20, model.h - 20);
    this.msk.setSize(model.w - 20, model.h - 20);
    this.background.width = model.w;
    this.background.height = model.h;
    this.baffs.y = model.h - 79;
    this.clocks.x = model.w - this.clocks.width - 20;
    this.exitButton.x = model.w - this.exitButton.width - 20;
};
canvas.app.clanWar.View.prototype.update = function () {
    var model = canvas.app.clanWar.model;
    this.users.title = canvas.Translator.getText(301) + " - " + model.rooms[0].team1.length + ":";
    this.users.users = model.rooms[0].team1;
    this.users.updateView();
    this.users.enabled = (!model.fightStarted && !model.ready) || model.reservUsed;
    this.map.update();
    this.baffs.update();
    this.clocks.update();
};
canvas.app.clanWar.View.prototype.dragLine = function (userLine, mouseX, mouseY) {
    var model = canvas.app.clanWar.model;
    var a,
        d,
        result = "",
        len,
        i;
    if (this.currentDragLine != null) {
        a = this.getObjectsUnderPoint(new canvas.px.Point(mouseX, mouseY));
        len = a.length;
        for (i = 0; i < len; i++) {
            d = a[i];
            if (d.name && d.name.substr(0, 5) == "list_") {
                result = d.name.substr(5);
            }
        }
        this.currentDragLine.stopDrag();
        this.removeChild(this.currentDragLine);
        this.currentDragLine = null;
    }
    if (userLine) {
        this.currentDragLine = userLine.cloneLogin();
        this.addChild(this.currentDragLine);
        var p = new canvas.px.Point(Math.round(this.currentDragLine.spriteLogin.textWidth * 0.5), 20);
        this.currentDragLine.startDrag(p, new canvas.px.Rectangle(0, 0, model.w, model.h), new canvas.px.Point(mouseX, mouseY));
        this.currentDragLine.interactive = false;
        this.currentDragLine.interactiveChildren = false;
    }
    return result;
};
canvas.app.clanWar.View.prototype.dragBaf = function (bafIcon, mouseX, mouseY) {
    var model = canvas.app.clanWar.model;
    var a,
        d,
        result = "",
        len,
        i;
    if (this.currentDragBaf != null) {
        a = this.getObjectsUnderPoint(new canvas.px.Point(mouseX, mouseY));
        len = a.length;
        for (i = 0; i < len; i++) {
            d = a[i];
            if (d.name && d.name.substr(0, 5) == "list_" && d.name.substr(5) != "0") {
                result = d.name.substr(5);
            }
        }
        this.currentDragBaf.stopDrag();
        this.removeChild(this.currentDragBaf);
        this.currentDragBaf = null;
    }
    if (bafIcon) {
        this.currentDragBaf = bafIcon.clone();
        this.addChild(this.currentDragBaf);
        var p = new canvas.px.Point(Math.round(this.currentDragBaf.width * 0.5) + 3, Math.round(this.currentDragBaf.height * 0.5) + 3);
        this.currentDragBaf.startDrag(p, new canvas.px.Rectangle(0, 0, model.w, model.h), new canvas.px.Point(mouseX + 8, mouseY + 8));
        this.currentDragBaf.interactive = false;
        this.currentDragBaf.interactiveChildren = false;
    }
    return result;
};
canvas.app.clanWar.View.prototype.showPopup = function (message, func, params) {
    this.confirmWindow.init(message, { func: func, params: params });
    canvas.utils.WindowsManager.instance.openWindow(this.confirmWindow);
};
canvas.app.clanWar.View.prototype.showMessage = function (message) {
    this.messageWindow.init(message);
    canvas.utils.WindowsManager.instance.openWindow(this.messageWindow);
};
canvas.app.clanWar.view.BafIcon = function (imageName, popup) {
    this._popup = "";
    Object.defineProperty(this, "popup", {
        get: function () {
            return this._popup;
        },
        set: function (value) {
            this._popup = value;
            if (this._popup) {
                this.hint.update(this._popup);
                canvas.EventManager.dispatchEvent(canvas.app.clanWar.Event.HINT_ADD, null, { target: this, params: new canvas.utils.HintParams(this.hint) });
            } else {
                canvas.EventManager.dispatchEvent(canvas.app.clanWar.Event.HINT_REMOVE, null, { target: this });
            }
        },
    });
    this._showBorder = false;
    Object.defineProperty(this, "showBorder", {
        get: function () {
            return this._showBorder;
        },
        set: function (value) {
            this._showBorder = value;
            if (this._showBorder) {
                if (!this.border) {
                    this.border = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "baf_border"));
                    this.border.position.set(-4, -3);
                }
                this.addChildAt(this.border, 0);
            } else if (this.border) {
                this.removeIfExist(this.border);
            }
        },
    });
    canvas.ui.SimpleButton.call(this, canvas.ResourceLoader.getImage("ui", imageName));
    Object.defineProperty(this, "enabled", {
        get: function () {
            return this._enabled;
        },
        set: function (value) {
            this._enabled = value;
            this.buttonMode = this.sprite.interactive = value;
            if (value) {
                this.sprite.filters = null;
            } else {
                this.sprite.filters = [canvas.Functions.getBlackAndWhite()];
            }
        },
    });
    this.hint = new canvas.app.view.BigHint2(250);
    this.imageName = imageName;
    this.popup = popup || "";
};
canvas.app.clanWar.view.BafIcon.prototype = Object.create(canvas.ui.SimpleButton.prototype);
canvas.app.clanWar.view.BafIcon.prototype.clone = function () {
    return new canvas.app.clanWar.view.BafIcon(this.imageName);
};
canvas.app.clanWar.view.Baffs = function () {
    canvas.px.Container.call(this);
    this.items = {};
    this.back = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "bafs_back")));
    this.back.x = 12;
    var model = canvas.app.clanWar.model;
    var a = ["baf1", "baf2", "baf3"];
    var icon;
    var i = 0;
    var str;
    var tmpX = 19;
    var obj;
    for (str in model.baffs) {
        obj = model.baffs[str];
        icon = this.addChild(new canvas.app.clanWar.view.BafIcon(a[i], obj.desc));
        icon.name = icon.sprite.name = "baf_" + obj.id;
        icon.position.set(tmpX, 11);
        tmpX += icon.width;
        icon.enabled = false;
        this.items[obj.id] = icon;
        i++;
    }
    this.reservIcon = this.addChild(new canvas.app.clanWar.view.BafIcon("baf4", canvas.Translator.getText(308)));
    this.reservIcon.name = this.reservIcon.sprite.name = "reserv";
    this.reservIcon.position.set(tmpX, 11);
    tmpX += this.reservIcon.width;
    this.reservIcon.enabled = false;
    this.readyIcon = this.addChild(new canvas.app.clanWar.view.BafIcon("baf5", canvas.Translator.getText(309)));
    this.readyIcon.name = this.readyIcon.sprite.name = "ready";
    this.readyIcon.position.set(tmpX, 11);
    tmpX += this.readyIcon.width;
    this.readyIcon.enabled = false;
};
canvas.app.clanWar.view.Baffs.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.clanWar.view.Baffs.prototype.update = function () {
    var icon;
    var str;
    var model = canvas.app.clanWar.model;
    for (str in this.items) {
        icon = this.items[str];
        icon.enabled = model.supervisor && model.baffs[icon.name.substr(4)].cdLeft == 0 && model.fightStarted && !model.warFinished;
    }
    this.reservIcon.enabled = model.supervisor && !model.reservUsed && model.fightStarted && !model.warFinished;
    this.readyIcon.enabled = model.supervisor && !model.fightStarted && !model.ready;
    this.readyIcon.showBorder = model.readyEnemy;
};
canvas.app.clanWar.view.Clocks = function () {
    canvas.px.Container.call(this);
    this.back = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "clocks_back")));
    this.back.alpha = 0.4;
    this.title = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD, 14540253, 92, 16, "center"));
    this.title.position.set(0, 6);
    this.time = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD, 14540253, 92, 16, "center"));
    this.time.position.set(0, 22);
};
canvas.app.clanWar.view.Clocks.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.clanWar.view.Clocks.prototype.update = function () {
    var model = canvas.app.clanWar.model;
    var date = new Date();
    var timeToStart;
    var type = 0;
    this.visible = true;
    if (!model.fightStarted) {
        type = 1;
    } else if (model.reservUsed) {
        if (model.reservTimeLeft > 0 && model.reservTimeLeft < 1e6) type = 2;
        else if (model.reserv2TimeLeft > 0 && model.reserv2TimeLeft < 1e6) type = 5;
        else if (model.useLeaderTimeLeft > 0 && model.useLeaderTimeLeft < 1e6) type = 4;
    } else if (model.useReservTimeLeft > 0 && model.useReservTimeLeft < 1e6) {
        type = 3;
    }
    switch (type) {
        case 1:
            this.title.text = canvas.Translator.getText(314) + ":";
            timeToStart = model.timeToStart - (Math.round(date.getTime() * 0.001) - Math.round(model.date.getTime() * 0.001));
            if (timeToStart > 0) {
                this.time.text = this.formatDate(timeToStart);
                this.visible = true;
                this.back.texture = canvas.ResourceLoader.getImage("ui", "clocks_back");
            } else this.visible = false;
            break;
        case 2:
            this.title.text = canvas.Translator.getText(321) + ":";
            timeToStart = model.reservTimeLeft - (Math.round(date.getTime() * 0.001) - Math.round(model.date.getTime() * 0.001));
            if (timeToStart > 0) {
                this.time.text = this.formatDate(timeToStart);
                this.visible = true;
                this.back.texture = canvas.ResourceLoader.getImage("ui", "clocks_back");
            } else this.visible = false;
            break;
        case 3:
            this.title.text = canvas.Translator.getText(315) + ":";
            timeToStart = model.useReservTimeLeft - (Math.round(date.getTime() * 0.001) - Math.round(model.date.getTime() * 0.001));
            if (timeToStart > 0) {
                this.time.text = this.formatDate(timeToStart);
                this.visible = true;
                this.back.texture = canvas.ResourceLoader.getImage("ui", "clocks_back_green");
            } else this.visible = false;
            break;
        case 4:
            this.title.text = canvas.Translator.getText(322) + ":";
            timeToStart = model.useLeaderTimeLeft - (Math.round(date.getTime() * 0.001) - Math.round(model.date.getTime() * 0.001));
            if (timeToStart > 0) {
                this.time.text = this.formatDate(timeToStart);
                this.visible = true;
                this.back.texture = canvas.ResourceLoader.getImage("ui", "clocks_back_red");
            } else this.visible = false;
            break;
        case 5:
            this.title.text = canvas.Translator.getText(340) + ":";
            timeToStart = model.reserv2TimeLeft - (Math.round(date.getTime() * 0.001) - Math.round(model.date.getTime() * 0.001));
            if (timeToStart > 0) {
                this.time.text = this.formatDate(timeToStart);
                this.visible = true;
                this.back.texture = canvas.ResourceLoader.getImage("ui", "clocks_back_yellow");
            } else this.visible = false;
            break;
        default:
            this.visible = false;
            break;
    }
};
canvas.app.clanWar.view.Clocks.prototype.formatDate = function (time) {
    var seconds = time % 60;
    var minutes = Math.floor(time / 60);
    return canvas.Functions.setNumberLen(minutes) + ":" + canvas.Functions.setNumberLen(seconds);
};
canvas.app.clanWar.view.FightList = function (id) {
    canvas.px.Container.call(this);
    this.back = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "fight_back")));
    this.back.alpha = 0.4;
    this.back.name = id;
    this.titleField = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD_STROKE, 16769442, 150, 16, "left"));
    this.titleField.position.set(40, 4);
    this.closeButton = this.addChild(new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "close_button")));
    this.closeButton.x = 265;
    var sprite = this.closeButton.sprite.addChild(new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_11, canvas.Const.FONT_TAHOMA_11, 16769442, 50, 20, "left", "top", 0));
    sprite.text = "<a>" + canvas.Translator.getText(310) + "</a>";
    sprite.position.set(24, 2);
    this.logButton = this.addChild(new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "log_button")));
    var sprite = this.logButton.sprite.addChild(new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_11, canvas.Const.FONT_TAHOMA_11, 16769442, 50, 20, "left", "top", 0));
    sprite.text = "<a>" + canvas.Translator.getText(311) + "</a>";
    sprite.position.set(24, 2);
    this.logButton.x = this.closeButton.x - this.logButton.width - 5;
    sprite = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD_STROKE, 16769442, 60, 16, "left"));
    sprite.position.set(30, 25);
    sprite.text = canvas.Translator.getText(312) + "1";
    sprite = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD_STROKE, 16769442, 60, 16, "left"));
    sprite.position.set(200, 25);
    sprite.text = canvas.Translator.getText(312) + "2";
    this.list1 = this.addChild(new canvas.ui.List(canvas.ui.ListType.VERTICAL, 1));
    this.list1.position.set(0, 40);
    this.list1.paddingV = -5;
    this.list1.setSize(130, 108);
    this.list1.scroll = new canvas.app.clanWar.view.ScrollView(this.list1);
    this.list1.scroll.setSize(20, this.list1._height);
    this.list2 = this.addChild(new canvas.ui.List(canvas.ui.ListType.VERTICAL, 1));
    this.list2.position.set(170, 40);
    this.list2.paddingV = -5;
    this.list2.setSize(130, 108);
    this.list2.scroll = new canvas.app.clanWar.view.ScrollView(this.list2);
    this.list2.scroll.setSize(20, this.list2._height);
    this.currentIcon = this.addChild(new canvas.px.Sprite(canvas.px.TextureEmpty));
    this.currentIcon.position.set(-4, -4);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.closeButton, this.closeClickHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.logButton, this.logClickHandler, this);
};
canvas.app.clanWar.view.FightList.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.clanWar.view.FightList.prototype.closeClickHandler = function () {
    canvas.EventManager.dispatchEvent(canvas.app.clanWar.Event.SHOW_BATTLE);
};
canvas.app.clanWar.view.FightList.prototype.logClickHandler = function () {
    var model = canvas.app.clanWar.model;
    canvas.Functions.navigateToURL(model.logsURL[model.currentRoom], "_blank");
};
canvas.app.clanWar.view.FightList.prototype.setIcon = function (name) {
    this.currentIcon.texture = name ? canvas.ResourceLoader.getImage("ui", "icon_" + name) : canvas.px.TextureEmpty;
};
canvas.app.clanWar.view.FightList.prototype.update = function () {
    this.titleField.text = this.title + ":";
    this.clear();
    var len, i;
    len = this.team1.length;
    for (i = 0; i < len; i++) {
        this.list1.add(new canvas.app.clanWar.view.UserLine(this.team1[i], false, false), false);
    }
    this.list1.update();
    if (this.list1.scroll && this.list1.scroll.parent) {
        this.list1.setSize(130, 108);
    } else {
        this.list1.setSize(166, 108);
    }
    this.list1.scroll.position.set(140, 0);
    len = this.team2.length;
    for (i = 0; i < len; i++) {
        this.list2.add(new canvas.app.clanWar.view.UserLine(this.team2[i], false, false), false);
    }
    this.list2.update();
    if (this.list2.scroll && this.list2.scroll.parent) {
        this.list2.setSize(130, 108);
    } else {
        this.list2.setSize(166, 108);
    }
    this.list2.scroll.position.set(140, 0);
};
canvas.app.clanWar.view.FightList.prototype.clear = function () {
    this.list1.clear(false);
    this.list2.clear(false);
};
canvas.app.clanWar.view.HpMpProgress = function (hpProgress, mpProgress) {
    canvas.px.Container.call(this);
    this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "progress_back")));
    var sprite = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "progress_hp")));
    var msk = this.addChild(new canvas.px.Mask(sprite.width, sprite.height));
    sprite.mask = msk;
    msk.scale.x = hpProgress;
    sprite = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "progress_mp")));
    msk = this.addChild(new canvas.px.Mask(sprite.width, sprite.height));
    sprite.mask = msk;
    msk.scale.x = mpProgress;
    sprite.y = msk.y = 3;
};
canvas.app.clanWar.view.HpMpProgress.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.clanWar.view.Map = function () {
    canvas.px.Container.call(this);
    this.lists = new Array();
    this.battles = new Array();
    var titles;
    var points;
    var model = canvas.app.clanWar.model;
    this.background = this.addChild(new canvas.px.Container());
    switch (model.mode) {
        case canvas.app.clanWar.Const.MODE_CLAN_FORTRESS:
            this.image = new canvas.ui.Image(model.mapBackURL);
            canvas.EventManager.addEventListener(canvas.ui.ImageEvent.EVENT_LOADED, this.image, this.completeHandler, this);
            points = [new canvas.px.Point(355, 10), new canvas.px.Point(533, 146), new canvas.px.Point(666, 7)];
            titles = [canvas.Translator.getText(317), canvas.Translator.getText(319), canvas.Translator.getText(318)];
            break;
        default:
            this.image = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "back"));
            points = [new canvas.px.Point(165, 10), new canvas.px.Point(476, 7), new canvas.px.Point(343, 146), new canvas.px.Point(165, 158), new canvas.px.Point(539, 157)];
            titles = [canvas.Translator.getText(302), canvas.Translator.getText(303), canvas.Translator.getText(304), canvas.Translator.getText(305), canvas.Translator.getText(306)];
    }
    this.background.addChild(this.image);
    this.listContainer = this.background.addChild(new canvas.px.Container());
    this.battleContainer = this.background.addChild(new canvas.px.Container());
    var fightList;
    var userList;
    var sprite;
    var i;
    for (i = 0; i < canvas.app.clanWar.Const.NUM_ISLANDS; i++) {
        userList = this.listContainer.addChild(new canvas.app.clanWar.view.UsersList("list_" + (i + 1), false));
        userList.title = titles[i];
        userList.position.set(points[i].x, points[i].y);
        this.lists.push(userList);
    }
    for (i = 0; i < canvas.app.clanWar.Const.NUM_ISLANDS; i++) {
        fightList = new canvas.app.clanWar.view.FightList("list_" + (i + 1));
        fightList.title = titles[i];
        this.battles.push(fightList);
    }
    this.showBattle();
};
canvas.app.clanWar.view.Map.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.clanWar.view.Map.prototype.completeHandler = function () {
    canvas.EventManager.removeEventListener(canvas.ui.ImageEvent.EVENT_LOADED, this.image, this.completeHandler, this);
    canvas.EventManager.dispatchEvent(canvas.app.clanWar.Event.RESIZE);
};
canvas.app.clanWar.view.Map.prototype.update = function () {
    var i, j;
    var fightList;
    var userList;
    var icon;
    var a;
    var userData;
    var len;
    var model = canvas.app.clanWar.model;
    for (i = 1; i <= canvas.app.clanWar.Const.NUM_ISLANDS; i++) {
        userList = this.lists[i - 1];
        a = new Array();
        len = model.rooms[i].team1.length;
        for (j = 0; j < len; j++) {
            userData = model.rooms[i].team1[j];
            if (model.myTeamIds.indexOf(parseInt(userData.id)) >= 0) a.push(userData);
        }
        userList.users = a;
        userList.updateView();
        fightList = this.battles[i - 1];
        fightList.team1 = model.rooms[i].team1;
        fightList.team2 = model.rooms[i].team2;
        fightList.update();
        if (model.fightStarted) {
            switch (model.roomsStatus[i]) {
                case 0:
                    icon = "fight";
                    userList.light(0);
                    break;
                case 1:
                    icon = "victory";
                    userList.light(1503090);
                    break;
                case 2:
                    icon = "defeat";
                    userList.light(16711680);
                    break;
                default:
                    icon = "";
                    userList.light(0);
                    break;
            }
            userList.setIcon(icon);
            fightList.setIcon(icon);
        }
        userList.back.alpha = 0.4;
    }
    if (model.dragBaffID != "" || model.dragUserID != "") {
        canvas.EventManager.addEventListener(canvas.Event.STAGE_MOUSE_MOVE, null, this.mouseMoveHandler, this);
        this.mouseMoveHandler(this.lastMoveEvent);
    } else {
        canvas.EventManager.removeEventListener(canvas.Event.STAGE_MOUSE_MOVE, null, this.mouseMoveHandler, this);
    }
};
canvas.app.clanWar.view.Map.prototype.showBattle = function () {
    var model = canvas.app.clanWar.model;
    this.battleContainer.removeChildren();
    if (model.currentRoom > 0) {
        this.battles[model.currentRoom - 1].clear();
        this.battleContainer.addChild(this.battles[model.currentRoom - 1]);
        this.listContainer.visible = false;
        this.battleContainer.visible = true;
        this.battleContainer.position.set(Math.round((this.background.width - this.battleContainer.width) * 0.5), 60);
    } else {
        this.listContainer.visible = true;
        this.battleContainer.visible = false;
    }
};
canvas.app.clanWar.view.Map.prototype.mouseMoveHandler = function (event) {
    if (!event || canvas.utils.WindowsManager.instance.haveActiveWindows) return;
    this.lastMoveEvent = event;
    var len = this.lists.length,
        i,
        userList;
    for (i = 0; i < len; i++) {
        userList = this.lists[i];
        userList.back.alpha = userList
            .getBounds()
            .intersectsPoint(new canvas.px.Point(canvas.app.CanvasClanWar.App.renderer.plugins.interaction.mouse.global.x - 10, canvas.app.CanvasClanWar.App.renderer.plugins.interaction.mouse.global.y - 10))
            ? 0.4
            : 0.6;
    }
};
canvas.app.clanWar.view.ScrollView = function (wheelTarget) {
    var minus = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "scroll_arrow"));
    var plus = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "scroll_arrow"));
    plus.scale.y = -1;
    plus.pivot = new canvas.px.Point(0, plus.height);
    var drag = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "scroll_drag"));
    drag.setSize = function () {};
    var bg = new canvas.px.Mask(16, 16, 0, 0.5);
    canvas.ui.Scroll.call(this, canvas.ui.ScrollType.VERTICAL, minus, plus, bg, drag, wheelTarget, false, true, true, true);
    this.padding = 13;
    this.backPadding = 10;
    this.step = 10;
    var sprite = this.addChildAt(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "scroll_uzor"), 0));
    sprite.position.set(-5, -6);
    this.bottomUzor = this.addChildAt(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "scroll_uzor"), 0));
    this.bottomUzor.scale.y = -1;
    var sprite = this.addChildAt(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "scroll_arrow_grey"), 0));
    sprite.position.set(5, 0);
    this.bottomArrow = this.addChildAt(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "scroll_arrow_grey"), 0));
    this.bottomArrow.scale.y = -1;
};
canvas.app.clanWar.view.ScrollView.prototype = Object.create(canvas.ui.Scroll.prototype);
canvas.app.clanWar.view.ScrollView.prototype.setSize = function (width, height) {
    canvas.ui.Scroll.prototype.setSize.call(this, width, height);
    this.bottomUzor.position.set(-5, this._height + 6);
    this.bottomArrow.position.set(5, this._height);
};
canvas.app.clanWar.view.UserLine = function (data, onlyLogin, inReserv) {
    canvas.ui.ListRenderer.call(this);
    this.onlyLogin = onlyLogin ? onlyLogin : false;
    this.inReserv = inReserv ? inReserv : false;
    this.data = data;
    this.setSize(150, 20);
    var sprite,
        tmpX = 0;
    if (!this.onlyLogin) {
        sprite = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "green_check"));
        if (this.data.ready) {
            this.addChild(sprite);
            sprite.position.set(tmpX, 4);
        }
        tmpX += sprite.width + 3;
        sprite = this.addChild(new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "red_arrow")));
        sprite.sprite.name = "private";
        sprite.position.set(tmpX, 4);
        tmpX += sprite.width + 3;
        sprite.enabled = this.data.online;
    }
    sprite = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD_STROKE, this.data.online ? 16762368 : 7829104, 160, 14, "left", "top", 0, 0, true));
    sprite.name = "login";
    sprite.text = this.data.login;
    sprite.position.set(tmpX, 2);
    sprite.buttonMode = true;
    this.spriteLogin = sprite;
    sprite.interactive = this.data.online;
    sprite.alpha = this.data.delayed ? 0.7 : 1;
    this.spriteLogin.mouseover = this.overHandler.bind(this);
    this.spriteLogin.mouseout = this.outHandler.bind(this);
    this.interactive = false;
    if (!this.inReserv && !this.onlyLogin && this.data.hp >= 0 && this.data.mp >= 0) {
        sprite = this.addChild(new canvas.app.clanWar.view.HpMpProgress(this.data.hp * 0.01, this.data.mp * 0.01));
        sprite.position.set(Math.round(tmpX + 2), Math.round(this.spriteLogin.textHeight + 5));
        this.setSize(150, 30);
    }
};
canvas.app.clanWar.view.UserLine.prototype = Object.create(canvas.ui.ListRenderer.prototype);
canvas.app.clanWar.view.UserLine.prototype.overHandler = function () {
    this.spriteLogin.color = 16777215;
};
canvas.app.clanWar.view.UserLine.prototype.outHandler = function () {
    this.spriteLogin.color = this.data.online ? 16762368 : 7829104;
};
canvas.app.clanWar.view.UserLine.prototype.cloneLogin = function () {
    return new canvas.app.clanWar.view.UserLine(this.data, true);
};
canvas.app.clanWar.view.UserLine.prototype.destroy = function () {
    canvas.ui.ListRenderer.prototype.destroy.call(this);
    this.spriteLogin.mouseover = null;
    this.spriteLogin.mouseout = null;
};
canvas.app.clanWar.view.UserListTitleRenderer = function (title) {
    canvas.ui.ListRenderer.call(this);
    this.field = this.addChild(new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_11_BOLD_STROKE, canvas.Const.FONT_TAHOMA_11_BOLD_STROKE, 16762368, 150, 20, "left"));
    this.field.text = "<a href='#'>" + title + "</a>";
    this.field.position.set(17, 0);
    this.setSize(150, 20);
    this.interactiveChildren = false;
};
canvas.app.clanWar.view.UserListTitleRenderer.prototype = Object.create(canvas.ui.ListRenderer.prototype);
canvas.app.clanWar.view.UsersList = function (id, isReserv) {
    this._enabled = true;
    Object.defineProperty(this, "enabled", {
        get: function () {
            return this._enabled;
        },
        set: function (value) {
            this._enabled = value;
            this.interactiveChildren = this._enabled;
            this.alpha = this._enabled ? 1 : 0.7;
        },
    });
    canvas.ui.List.call(this, canvas.ui.ListType.VERTICAL, 1);
    this._paddingV = -5;
    this.isReserv = false;
    this.isReserv = isReserv == undefined ? false : isReserv;
    this.backName = this.isReserv ? "list_back_1" : "list_back_2";
    this.back = this.addChildAt(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", this.backName)), 0);
    this.back.alpha = 0.4;
    this.back.name = id;
    this.w = this.back.width - 40;
    this.h = this.back.height;
    this.setSize(this.w, this.h - 40);
    this.titleField = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD_STROKE, 16769442, 100, 20, this.isReserv ? "center" : "left"));
    this.titleField.position.set(this.isReserv ? 0 : 40, 7);
    this.scroll = new canvas.app.clanWar.view.ScrollView(this);
    this.scroll.setSize(20, this._height);
    this.mainContainer.position.set(0, this.isReserv ? 30 : 34);
    this.currentIcon = this.addChild(new canvas.ui.SimpleButton(canvas.px.TextureEmpty));
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.currentIcon, this.clickHandler, this);
};
canvas.app.clanWar.view.UsersList.prototype = Object.create(canvas.ui.List.prototype);
canvas.app.clanWar.view.UsersList.prototype.clickHandler = function () {
    canvas.EventManager.dispatchEvent(canvas.app.clanWar.Event.SHOW_BATTLE, null, this.back.name);
};
canvas.app.clanWar.view.UsersList.prototype.setIcon = function (name) {
    this.currentIcon.sprite.texture = this.currentIcon.baseTexture = name ? canvas.ResourceLoader.getImage("ui", "icon_" + name) : canvas.px.TextureEmpty;
};
canvas.app.clanWar.view.UsersList.prototype.light = function (color) {
    switch (color) {
        case 1503090:
            this.back.texture = canvas.ResourceLoader.getImage("ui", this.backName + "_green");
            break;
        case 16711680:
            this.back.texture = canvas.ResourceLoader.getImage("ui", this.backName + "_red");
            break;
        default:
            this.back.texture = canvas.ResourceLoader.getImage("ui", this.backName);
    }
};
canvas.app.clanWar.view.UsersList.prototype.updateView = function () {
    var model = canvas.app.clanWar.model;
    this.titleField.text = this.title;
    this.titleField.setSize(this.w);
    this.clear(false);
    var userData;
    var userLine;
    var flag = false;
    var contentHeight = this.h - 40;
    this.users.sort(this.sortByTitle);
    var hasVoivods = this.users.length > 0 && this.users[0].voivoda;
    if (hasVoivods) {
        this.add(new canvas.app.clanWar.view.UserListTitleRenderer(canvas.Translator.getText(316)), false);
    }
    var len = this.users.length;
    for (var i = 0; i < len; i++) {
        userData = this.users[i];
        if (hasVoivods && !userData.voivoda) {
            hasVoivods = false;
            this.add(new canvas.app.clanWar.view.UserListTitleRenderer(canvas.Translator.getText(307)), false);
        }
        if (!this.isReserv && model.fightStarted) userData.ready = false;
        this.add(new canvas.app.clanWar.view.UserLine(userData, false, this.isReserv), false);
        if (userData.ready) flag = true;
    }
    this.container.x = flag ? 10 : -5;
    if (this.scroll && this.scroll.parent) {
        this._width = this.w;
    } else {
        this._width = this.w + 36;
    }
    this.update();
};
canvas.app.clanWar.view.UsersList.prototype.update = function () {
    canvas.ui.List.prototype.update.call(this);
    if (this.scroll) {
        this.scroll.position.set(this.back.width - 30, this.mainContainer.y);
    }
};
canvas.app.clanWar.view.UsersList.prototype.sortByTitle = function (a, b) {
    if (a.voivoda != b.voivoda) {
        return a.voivoda ? -1 : 1;
    } else if (a.login > b.login) {
        return 1;
    } else if (a.login < b.login) {
        return -1;
    } else {
        return 0;
    }
};
canvas.app.barber.Barber = function (par, main) {
    canvas.px.Container.call(this);
    this.model = new canvas.app.barber.Model(par);
    var tmpY = 0;
    if (!this.model.withoutGender) {
        this.createLine("bb9", "bb10", 291, tmpY);
        tmpY += 26;
    }
    this.createLine("bb7", "bb8", 291, tmpY);
    tmpY += 26;
    this.createLine("bb3", "bb4", 291, tmpY);
    tmpY += 26;
    this.createLine("bb1", "bb2", 291, tmpY);
    tmpY += 26;
    this.createLine("bb5", "bb6", 291, tmpY);
    tmpY += 26;
    this.randomButton = this.addChild(new canvas.app.view.OldButton(9722697));
    this.randomButton.setTitle(canvas.Translator.getText(3026));
    this.randomButton.position.set(258, tmpY);
    this.randomButton.setSize(200);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.randomButton, this.randomClickHandler, this);
    this.playersContainer = this.addChild(new canvas.px.Container());
    this.playersContainer.position.set(30, -5);
    this.playerM = new canvas.animation.SkeletonInfo(canvas.Config.skPath + "M/sk01_UI", new canvas.px.Point(70, 180), this);
    this.playerF = new canvas.animation.SkeletonInfo(canvas.Config.skPath + "F/sk01_UI", new canvas.px.Point(70, 180), this);
    this.playerM.frameEvent = canvas.app.barber.Event.ENTER_FRAME;
    this.playerF.frameEvent = canvas.app.barber.Event.ENTER_FRAME;
    this.playerM.loop = true;
    this.playerF.loop = true;
    if (main) {
        main.action_bb1 = this.bb1Action.bind(this);
        main.action_bb2 = this.bb2Action.bind(this);
        main.action_bb3 = this.bb3Action.bind(this);
        main.action_bb4 = this.bb4Action.bind(this);
        main.action_bb5 = this.bb5Action.bind(this);
        main.action_bb6 = this.bb6Action.bind(this);
        main.action_bb7 = this.bb7Action.bind(this);
        main.action_bb8 = this.bb8Action.bind(this);
        main.action_bb9 = this.bb9Action.bind(this);
        main.action_bb10 = this.bb10Action.bind(this);
        main.action_bb11 = this.bb11Action.bind(this);
        main.action_bb12 = this.bb12Action.bind(this);
        main.action_randomBtn = this.randomClickHandler.bind(this);
    }
    this.interactive = true;
    this.click = this.clickHandler.bind(this);
    this.bigChange();
    this.refreshPlayer(true);
};
canvas.app.barber.Barber.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.barber.Barber.prototype.createLine = function (leftName, rightName, xPos, yPos) {
    var container = this.addChild(new canvas.px.Container());
    var button = container.addChild(new canvas.ui.Button(canvas.ResourceLoader.getImage("ui", "arrow_red"), canvas.ResourceLoader.getImage("ui", "arrow_yellow")));
    button.scale.x = -1;
    button.name = leftName;
    button = container.addChild(new canvas.ui.Button(canvas.ResourceLoader.getImage("ui", "arrow_red"), canvas.ResourceLoader.getImage("ui", "arrow_yellow")));
    button.name = rightName;
    button.x = 129;
    container.position.set(xPos, yPos);
};
canvas.app.barber.Barber.prototype.randomClickHandler = function () {
    var Conf = this.model;
    Conf.myHairColorVal[Conf.myRaceVal] = Conf.myHairColorAr[Conf.myRaceVal][Math.floor(Math.random() * Conf.myHairColorAr[Conf.myRaceVal].length)];
    Conf.parts[3] = Conf.myHairColorVal[Conf.myRaceVal];
    Conf.myBodyColorVal[Conf.myRaceVal] = Conf.myBodyColorAr[Conf.myRaceVal][Math.floor(Math.random() * Conf.myBodyColorAr[Conf.myRaceVal].length)];
    for (var i = 7; i < 6 * 15; i += 6) {
        Conf.parts[i] = Conf.myBodyColorVal[Conf.myRaceVal];
    }
    Conf.parts[1] = Conf.myBodyColorVal[Conf.myRaceVal];
    Conf.myHairPaksVal[Conf.mySexVal][Conf.myRaceVal] = Conf.myHairPaksAr[Conf.mySexVal][Conf.myRaceVal][Math.floor(Math.random() * Conf.myHairPaksAr[Conf.mySexVal][Conf.myRaceVal].length)];
    Conf.parts[2] = Conf.myHairPaksVal[Conf.mySexVal][Conf.myRaceVal];
    Conf.myHeadPaksVal[Conf.mySexVal][Conf.myRaceVal] = Conf.myHeadPaksAr[Conf.mySexVal][Conf.myRaceVal][Math.floor(Math.random() * Conf.myHeadPaksAr[Conf.mySexVal][Conf.myRaceVal].length)];
    Conf.parts[0] = Conf.myHeadPaksVal[Conf.mySexVal][Conf.myRaceVal];
    this.refreshPlayer();
};
canvas.app.barber.Barber.prototype.clickHandler = function (event) {
    if (event.target && event.target.parent && event.target.parent.name) {
        switch (event.target.parent.name) {
            case "bb1":
                this.bb1Action();
                break;
            case "bb2":
                this.bb2Action();
                break;
            case "bb3":
                this.bb3Action();
                break;
            case "bb4":
                this.bb4Action();
                break;
            case "bb5":
                this.bb5Action();
                break;
            case "bb6":
                this.bb6Action();
                break;
            case "bb7":
                this.bb7Action();
                break;
            case "bb8":
                this.bb8Action();
                break;
            case "bb9":
                this.bb9Action();
                break;
            case "bb10":
                this.bb10Action();
                break;
            case "bb11":
                this.bb11Action();
                break;
            case "bb12":
                this.bb12Action();
                break;
        }
    }
};
canvas.app.barber.Barber.prototype.bb1Action = function () {
    var Conf = this.model;
    if (Conf.myHairPaksVal[Conf.mySexVal][Conf.myRaceVal] == "0") return;
    if (Conf.myHairColorIndex[Conf.myRaceVal] == 0) Conf.myHairColorIndex[Conf.myRaceVal] = Conf.myHairColorAr[Conf.myRaceVal].length;
    Conf.myHairColorIndex[Conf.myRaceVal]--;
    Conf.myHairColorVal[Conf.myRaceVal] = Conf.myHairColorAr[Conf.myRaceVal][Conf.myHairColorIndex[Conf.myRaceVal]];
    Conf.parts[3] = Conf.myHairColorVal[Conf.myRaceVal];
    this.refreshPlayer();
};
canvas.app.barber.Barber.prototype.bb2Action = function () {
    var Conf = this.model;
    if (Conf.myHairPaksVal[Conf.mySexVal][Conf.myRaceVal] == "0") return;
    if (Conf.myHairColorIndex[Conf.myRaceVal] == Conf.myHairColorAr[Conf.myRaceVal].length - 1) Conf.myHairColorIndex[Conf.myRaceVal] = -1;
    Conf.myHairColorIndex[Conf.myRaceVal]++;
    Conf.myHairColorVal[Conf.myRaceVal] = Conf.myHairColorAr[Conf.myRaceVal][Conf.myHairColorIndex[Conf.myRaceVal]];
    Conf.parts[3] = Conf.myHairColorVal[Conf.myRaceVal];
    this.refreshPlayer();
};
canvas.app.barber.Barber.prototype.bb3Action = function () {
    var Conf = this.model;
    if (Conf.myBodyColorIndex[Conf.myRaceVal] == 0) Conf.myBodyColorIndex[Conf.myRaceVal] = Conf.myBodyColorAr[Conf.myRaceVal].length;
    Conf.myBodyColorIndex[Conf.myRaceVal]--;
    Conf.myBodyColorVal[Conf.myRaceVal] = Conf.myBodyColorAr[Conf.myRaceVal][Conf.myBodyColorIndex[Conf.myRaceVal]];
    for (var i = 7; i < 6 * 15; i += 6) {
        Conf.parts[i] = Conf.myBodyColorVal[Conf.myRaceVal];
    }
    Conf.parts[1] = Conf.myBodyColorVal[Conf.myRaceVal];
    this.refreshPlayer();
};
canvas.app.barber.Barber.prototype.bb4Action = function () {
    var Conf = this.model;
    if (Conf.myBodyColorIndex[Conf.myRaceVal] == Conf.myBodyColorAr[Conf.myRaceVal].length) Conf.myBodyColorIndex[Conf.myRaceVal] = 0;
    Conf.myBodyColorIndex[Conf.myRaceVal]++;
    Conf.myBodyColorVal[Conf.myRaceVal] = Conf.myBodyColorAr[Conf.myRaceVal][Conf.myBodyColorIndex[Conf.myRaceVal]];
    for (var i = 7; i < 6 * 15; i += 6) {
        Conf.parts[i] = Conf.myBodyColorVal[Conf.myRaceVal];
    }
    Conf.parts[1] = Conf.myBodyColorVal[Conf.myRaceVal];
    this.refreshPlayer();
};
canvas.app.barber.Barber.prototype.bb5Action = function () {
    var Conf = this.model;
    if (Conf.myHairPaksIndex[Conf.mySexVal][Conf.myRaceVal] == 0) Conf.myHairPaksIndex[Conf.mySexVal][Conf.myRaceVal] = Conf.myHairPaksAr[Conf.mySexVal][Conf.myRaceVal].length;
    Conf.myHairPaksIndex[Conf.mySexVal][Conf.myRaceVal]--;
    Conf.myHairPaksVal[Conf.mySexVal][Conf.myRaceVal] = Conf.myHairPaksAr[Conf.mySexVal][Conf.myRaceVal][Conf.myHairPaksIndex[Conf.mySexVal][Conf.myRaceVal]];
    Conf.parts[2] = Conf.myHairPaksVal[Conf.mySexVal][Conf.myRaceVal];
    this.refreshPlayer();
};
canvas.app.barber.Barber.prototype.bb6Action = function () {
    var Conf = this.model;
    if (Conf.myHairPaksIndex[Conf.mySexVal][Conf.myRaceVal] == Conf.myHairPaksAr[Conf.mySexVal][Conf.myRaceVal].length - 1) Conf.myHairPaksIndex[Conf.mySexVal][Conf.myRaceVal] = -1;
    Conf.myHairPaksIndex[Conf.mySexVal][Conf.myRaceVal]++;
    Conf.myHairPaksVal[Conf.mySexVal][Conf.myRaceVal] = Conf.myHairPaksAr[Conf.mySexVal][Conf.myRaceVal][Conf.myHairPaksIndex[Conf.mySexVal][Conf.myRaceVal]];
    Conf.parts[2] = Conf.myHairPaksVal[Conf.mySexVal][Conf.myRaceVal];
    this.refreshPlayer();
};
canvas.app.barber.Barber.prototype.bb7Action = function () {
    var Conf = this.model;
    if (Conf.myHeadPaksIndex[Conf.mySexVal][Conf.myRaceVal] == 0) Conf.myHeadPaksIndex[Conf.mySexVal][Conf.myRaceVal] = Conf.myHeadPaksAr[Conf.mySexVal][Conf.myRaceVal].length;
    Conf.myHeadPaksIndex[Conf.mySexVal][Conf.myRaceVal]--;
    Conf.myHeadPaksVal[Conf.mySexVal][Conf.myRaceVal] = Conf.myHeadPaksAr[Conf.mySexVal][Conf.myRaceVal][Conf.myHeadPaksIndex[Conf.mySexVal][Conf.myRaceVal]];
    Conf.parts[0] = Conf.myHeadPaksVal[Conf.mySexVal][Conf.myRaceVal];
    this.refreshPlayer();
};
canvas.app.barber.Barber.prototype.bb8Action = function () {
    var Conf = this.model;
    if (Conf.myHeadPaksIndex[Conf.mySexVal][Conf.myRaceVal] == Conf.myHeadPaksAr[Conf.mySexVal][Conf.myRaceVal].length - 1) Conf.myHeadPaksIndex[Conf.mySexVal][Conf.myRaceVal] = -1;
    Conf.myHeadPaksIndex[Conf.mySexVal][Conf.myRaceVal]++;
    Conf.myHeadPaksVal[Conf.mySexVal][Conf.myRaceVal] = Conf.myHeadPaksAr[Conf.mySexVal][Conf.myRaceVal][Conf.myHeadPaksIndex[Conf.mySexVal][Conf.myRaceVal]];
    Conf.parts[0] = Conf.myHeadPaksVal[Conf.mySexVal][Conf.myRaceVal];
    this.refreshPlayer();
};
canvas.app.barber.Barber.prototype.bb9Action = function () {
    var Conf = this.model;
    if (Conf.mySexIndex == 0) Conf.mySexIndex = Conf.mySexAr.length;
    Conf.mySexIndex--;
    Conf.mySexVal = Conf.mySexAr[Conf.mySexIndex];
    canvas.EventManager.dispatchEvent(canvas.app.barber.Event.GENDER_CHANGE, null, Conf.mySexVal);
    this.bigChange();
    this.refreshPlayer(true);
};
canvas.app.barber.Barber.prototype.bb10Action = function () {
    var Conf = this.model;
    if (Conf.mySexIndex == Conf.mySexAr.length - 1) Conf.mySexIndex = -1;
    Conf.mySexIndex++;
    Conf.mySexVal = Conf.mySexAr[Conf.mySexIndex];
    canvas.EventManager.dispatchEvent(canvas.app.barber.Event.GENDER_CHANGE, null, Conf.mySexVal);
    this.bigChange();
    this.refreshPlayer(true);
};
canvas.app.barber.Barber.prototype.bb11Action = function () {
    var Conf = this.model;
    if (Conf.myRaceIndex != 0) {
        Conf.myRaceIndex = 0;
        Conf.myRaceVal = Conf.myRaceAr[0];
        canvas.EventManager.dispatchEvent(canvas.app.barber.Event.RACE_CHANGE, null, Conf.myRaceVal);
        this.bigChange();
        this.refreshPlayer();
    }
};
canvas.app.barber.Barber.prototype.bb12Action = function () {
    var Conf = this.model;
    if (Conf.myRaceIndex != 1) {
        Conf.myRaceIndex = 1;
        Conf.myRaceVal = Conf.myRaceAr[1];
        canvas.EventManager.dispatchEvent(canvas.app.barber.Event.RACE_CHANGE, null, Conf.myRaceVal);
        this.bigChange();
        this.refreshPlayer();
    }
};
canvas.app.barber.Barber.prototype.refreshPlayer = function (updateSkeleton) {
    var Conf = this.model;
    if (Conf.flag) {
        if (!Conf.dontSendUpdate) {
            persUpdate(
                Conf.mySexVal,
                Conf.myRaceVal,
                Conf.myHeadPaksVal[Conf.mySexVal][Conf.myRaceVal],
                Conf.myHairPaksVal[Conf.mySexVal][Conf.myRaceVal],
                Conf.myBodyPaksAr[Conf.mySexVal][Conf.myRaceVal],
                Conf.myHairColorVal[Conf.myRaceVal],
                Conf.myBodyColorVal[Conf.myRaceVal]
            );
        }
    } else {
        Conf.flag = true;
    }
    var player;
    if (updateSkeleton) {
        var player = Conf.mySexAr2[Conf.mySexIndex] == "M" ? this.playerM : this.playerF;
        if (!player.parent) {
            if (this.playersContainer.numChildren > 0) this.playersContainer.removeChildAt(0).stop();
            this.playersContainer.addChild(player);
            player.play();
        }
    } else {
        player = this.playersContainer.getChildAt(0);
    }
    player.skeletonData = new canvas.data.battle.SkeletonData(Conf.getUIParts(), Conf.mySexAr2[Conf.mySexIndex]);
};
canvas.app.barber.Barber.prototype.bigChange = function () {
    var Conf = this.model;
    var i;
    Conf.parts[3] = Conf.myHairColorVal[Conf.myRaceVal];
    for (i = 7; i < 6 * 15; i += 6) {
        Conf.parts[i] = Conf.myBodyColorVal[Conf.myRaceVal];
    }
    Conf.parts[1] = Conf.myBodyColorVal[Conf.myRaceVal];
    Conf.parts[0] = Conf.myHeadPaksVal[Conf.mySexVal][Conf.myRaceVal];
    Conf.parts[2] = Conf.myHairPaksVal[Conf.mySexVal][Conf.myRaceVal];
    for (i = 6; i < 6 * 15; i += 6) {
        Conf.parts[i] = Conf.myBodyPaksAr[Conf.mySexVal][Conf.myRaceVal];
    }
};
canvas.app.barber.Event = { ENTER_FRAME: "Barber.ENTER_FRAME", RACE_CHANGE: "Barber.RACE_CHANGE", GENDER_CHANGE: "Barber.GENDER_CHANGE" };
canvas.app.barber.Model = function (par) {
    var i, str;
    this.kindBonus = 0;
    this.parts = [];
    this.mySexVal = "1";
    this.mySexIndex = 0;
    this.mySexAr = ["1", "2"];
    this.mySexAr2 = ["M", "F"];
    this.myRaceAr = ["1", "2"];
    this.myRaceVal = "1";
    this.myRaceIndex = 0;
    this.myBodyColorAr = [];
    this.myBodyColorVal = [];
    this.myBodyColorIndex = [];
    this.myHairColorAr = [];
    this.myHairColorVal = [];
    this.myHairColorIndex = [];
    this.myHeadPaksAr = [];
    this.myHeadPaksVal = [];
    this.myHeadPaksIndex = [];
    this.myHairPaksAr = [];
    this.myHairPaksVal = [];
    this.myHairPaksIndex = [];
    this.myBodyPaksAr = [];
    this.flag = false;
    this.dontSendUpdate = false;
    if (this.ok(par.kind_bonus)) this.kindBonus = parseInt(par.kind_bonus);
    if (this.ok(par.withoutGender)) this.withoutGender = par.withoutGender == "1";
    if (this.ok(par.dontSendUpdate)) this.dontSendUpdate = par.dontSendUpdate == "1";
    this.parts.push(5, 0, 6, 0, 0, 0);
    this.parts.push(1, 0, 0, 0, 0, 0);
    this.parts.push(1, 0, 0, 0, 0, 0);
    this.parts.push(1, 0, 0, 0, 0, 0);
    this.parts.push(1, 0, 0, 0, 0, 0);
    this.parts.push(1, 0, 0, 0, 0, 0);
    this.parts.push(1, 0, 0, 0, 0, 0);
    this.parts.push(1, 0, 0, 0, 0, 0);
    this.parts.push(1, 0, 0, 0, 0, 0);
    this.parts.push(1, 0, 0, 0, 0, 0);
    this.parts.push(1, 0, 0, 0, 0, 0);
    this.parts.push(1, 0, 0, 0, 0, 0);
    this.parts.push(1, 0, 0, 0, 0, 0);
    this.parts.push(1, 0, 0, 0, 0, 0);
    this.parts.push(1, 0, 0, 0, 0, 0);
    this.parts.push(0, 0, 0, 0, 0, 0);
    this.parts.push(0, 0, 0, 0, 0, 0);
    this.parts.push(0, 0, 0, 0, 0, 0);
    if (this.ok(par.hairCol)) this.parts[3] = par.hairCol;
    if (this.ok(par.bodyCol)) {
        for (i = 7; i < 13 * 6; i += 6) {
            this.parts[i] = par.bodyCol;
        }
        this.parts[1] = par.bodyCol;
    }
    str = this.ok(par.cfg) ? par.cfg : "1,1,5,30,1,11,0";
    var myCfg = str.split(",");
    if (myCfg[0] == "1") {
        this.mySexVal = "1";
        this.mySexIndex = 0;
    } else if (myCfg[0] == "2") {
        this.mySexVal = "2";
        this.mySexIndex = 1;
    }
    if (myCfg[1] == "1") {
        this.myRaceVal = "1";
        this.myRaceIndex = 0;
    } else if (myCfg[1] == "2") {
        this.myRaceVal = "2";
        this.myRaceIndex = 1;
    }
    var cbodyH = this.ok(par.cbodyH) ? par.cbodyH : "0:1:2:3:4:5";
    var cbodyM = this.ok(par.cbodyM) ? par.cbodyM : "0:6:7:8:9:10";
    var chairH = this.ok(par.chairH) ? par.chairH : "11:12:13:14:15";
    var chairM = this.ok(par.chairM) ? par.chairM : "16:17:18:19:20";
    this.myBodyColorAr["1"] = cbodyH.split(":");
    this.myBodyColorVal["1"] = this.myBodyColorAr["1"][0];
    this.myBodyColorIndex["1"] = 0;
    this.myBodyColorAr["2"] = cbodyM.split(":");
    this.myBodyColorVal["2"] = this.myBodyColorAr["2"][0];
    this.myBodyColorIndex["2"] = 0;
    this.myBodyColorVal[this.myRaceVal] = myCfg[6];
    this.myBodyColorIndex[this.myRaceVal] = this.getIndex(this.myBodyColorAr[this.myRaceVal], myCfg[6]);
    for (i = 7; i < 6 * 15; i += 6) {
        this.parts[i] = this.myBodyColorVal[this.myRaceVal];
    }
    this.parts[1] = this.myBodyColorVal[this.myRaceVal];
    this.myHairColorAr["1"] = chairH.split(":");
    this.myHairColorVal["1"] = this.myHairColorAr["1"][0];
    this.myHairColorIndex["1"] = 0;
    this.myHairColorAr["2"] = chairM.split(":");
    this.myHairColorVal["2"] = this.myHairColorAr["2"][0];
    this.myHairColorIndex["2"] = 0;
    this.myHairColorVal[this.myRaceVal] = myCfg[5];
    this.myHairColorIndex[this.myRaceVal] = this.getIndex(this.myHairColorAr[this.myRaceVal], myCfg[5]);
    this.parts[3] = this.myHairColorVal[this.myRaceVal];
    var phead11 = this.ok(par.phead11) ? par.phead11 : "5:6:13:14:15";
    var phead12 = this.ok(par.phead12) ? par.phead12 : "505:506:507:508:509";
    var phead21 = this.ok(par.phead21) ? par.phead21 : "5:6:13:14:15";
    var phead22 = this.ok(par.phead22) ? par.phead22 : "505:506:507:508:509";
    var phair11 = this.ok(par.phair11) ? par.phair11 : "30:31:32:33:34:0";
    var phair12 = this.ok(par.phair12) ? par.phair12 : "530:531:532:533:534:0";
    var phair21 = this.ok(par.phair21) ? par.phair21 : "30:31:32:33:34";
    var phair22 = this.ok(par.phair22) ? par.phair22 : "530:531:532:533";
    var pbody11 = this.ok(par.pbody11) ? par.pbody11 : "1";
    var pbody12 = this.ok(par.pbody12) ? par.pbody12 : "501";
    var pbody21 = this.ok(par.pbody21) ? par.pbody21 : "1";
    var pbody22 = this.ok(par.pbody22) ? par.pbody22 : "501";
    this.myHeadPaksAr["1"] = [];
    this.myHeadPaksAr["1"]["1"] = phead11.split(":");
    this.myHeadPaksAr["1"]["2"] = phead12.split(":");
    this.myHeadPaksVal["1"] = [];
    this.myHeadPaksVal["1"]["1"] = this.myHeadPaksAr["1"]["1"][0];
    this.myHeadPaksVal["1"]["2"] = this.myHeadPaksAr["1"]["2"][0];
    this.myHeadPaksIndex["1"] = [];
    this.myHeadPaksIndex["1"]["1"] = 0;
    this.myHeadPaksIndex["1"]["2"] = 0;
    this.myHeadPaksAr["2"] = [];
    this.myHeadPaksAr["2"]["1"] = phead21.split(":");
    this.myHeadPaksAr["2"]["2"] = phead22.split(":");
    this.myHeadPaksVal["2"] = [];
    this.myHeadPaksVal["2"]["1"] = this.myHeadPaksAr["2"]["1"][0];
    this.myHeadPaksVal["2"]["2"] = this.myHeadPaksAr["2"]["2"][0];
    this.myHeadPaksIndex["2"] = [];
    this.myHeadPaksIndex["2"]["1"] = 0;
    this.myHeadPaksIndex["2"]["2"] = 0;
    this.myHeadPaksVal[this.mySexVal][this.myRaceVal] = myCfg[2];
    this.myHeadPaksIndex[this.mySexVal][this.myRaceVal] = this.getIndex(this.myHeadPaksAr[this.mySexVal][this.myRaceVal], myCfg[2]);
    this.myHairPaksAr["1"] = [];
    this.myHairPaksAr["1"]["1"] = phair11.split(":");
    this.myHairPaksAr["1"]["2"] = phair12.split(":");
    this.myHairPaksVal["1"] = [];
    this.myHairPaksVal["1"]["1"] = this.myHairPaksAr["1"]["1"][0];
    this.myHairPaksVal["1"]["2"] = this.myHairPaksAr["1"]["2"][0];
    this.myHairPaksIndex["1"] = [];
    this.myHairPaksIndex["1"]["1"] = 0;
    this.myHairPaksIndex["1"]["2"] = 0;
    this.myHairPaksAr["2"] = [];
    this.myHairPaksAr["2"]["1"] = phair21.split(":");
    this.myHairPaksAr["2"]["2"] = phair22.split(":");
    this.myHairPaksVal["2"] = [];
    this.myHairPaksVal["2"]["1"] = this.myHairPaksAr["2"]["1"][0];
    this.myHairPaksVal["2"]["2"] = this.myHairPaksAr["2"]["2"][0];
    this.myHairPaksIndex["2"] = [];
    this.myHairPaksIndex["2"]["1"] = 0;
    this.myHairPaksIndex["2"]["2"] = 0;
    this.myHairPaksVal[this.mySexVal][this.myRaceVal] = myCfg[3];
    this.myHairPaksIndex[this.mySexVal][this.myRaceVal] = this.getIndex(this.myHairPaksAr[this.mySexVal][this.myRaceVal], myCfg[3]);
    this.myBodyPaksAr["1"] = [];
    this.myBodyPaksAr["1"]["1"] = pbody11;
    this.myBodyPaksAr["1"]["2"] = pbody12;
    this.myBodyPaksAr["2"] = [];
    this.myBodyPaksAr["2"]["1"] = pbody21;
    this.myBodyPaksAr["2"]["2"] = pbody22;
};
canvas.app.barber.Model.prototype.getIndex = function (ar, val) {
    var len = ar.length;
    for (var i = 0; i < len; i++) {
        if (ar[i] == val) {
            return i;
        }
    }
    return 0;
};
canvas.app.barber.Model.prototype.ok = function (value) {
    return value != undefined;
};
canvas.app.barber.Model.prototype.getUIParts = function () {
    var len = this.parts.length;
    var result = "";
    for (var i = 0; i < len; i += 2) {
        result += (result == "" ? "" : ",") + String(this.parts[i] | (this.parts[i + 1] << 16)) + ";;;";
        if (i == 4) result += ",0;;;,0;;;,0;;;";
    }
    return result;
};
canvas.app.mem.Event = {
    ENTER_FRAME: "Mem.ENTER_FRAME",
    HINT_ADD: "Mem.HINT_ADD",
    HINT_REMOVE: "Mem.HINT_REMOVE",
    TOGGLE_BUTTON_CLICK: "Mem.TOGGLE_BUTTON_CLICK",
    INPUT: "Mem.INPUT",
    PERS_SELECT: "Mem.PERS_SELECT",
    UPDATE_VISIBLE_IDS: "Mem.UPDATE_VISIBLE_IDS",
    GET_EFFECTS: "Mem.GET_EFFECTS",
    WATCH_SELECT: "Mem.WATCH_SELECT",
};
canvas.app.mem.Main = function (model, root) {
    this.model = model;
    this.view = new canvas.app.mem.View(root);
    this.fullReqInterval = setInterval(this.fullReqFunc.bind(this), 2e3);
    this.fullReqFunc();
    canvas.EventManager.addEventListener(canvas.app.mem.Event.PERS_SELECT, null, this.persSelectHandler, this);
    canvas.EventManager.addEventListener(canvas.app.mem.Event.UPDATE_VISIBLE_IDS, null, this.updateVisibleIdsHandler, this);
    canvas.EventManager.addEventListener(canvas.app.mem.Event.GET_EFFECTS, null, this.getEffectsHandler, this);
    canvas.EventManager.addEventListener(canvas.app.mem.Event.WATCH_SELECT, null, this.watchSelectHandler, this);
    canvas.EventManager.addEventListener(canvas.app.mem.Event.TOGGLE_BUTTON_CLICK, this.view.leftButton, this.toggleDeadHandler, this);
    canvas.EventManager.addEventListener(canvas.app.mem.Event.TOGGLE_BUTTON_CLICK, this.view.rightButton, this.toggleHPMPHandler, this);
    canvas.EventManager.addEventListener(canvas.app.mem.Event.INPUT, this.view.input, this.inputHandler, this);
};
canvas.app.mem.Main.prototype.resize = function () {
    this.view.resize();
};
canvas.app.mem.Main.prototype.persSelectHandler = function (event) {
    this.model.selectedPers = event.params;
    if (this.model.selectedPers) {
        this.getEffects();
    }
    this.view.update();
};
canvas.app.mem.Main.prototype.swfData = function (name, data) {
    var a = data.split("@");
    var b;
    var p;
    if (a.length != 2) {
        return;
    }
    switch (a[0]) {
        case "stopReq":
            clearInterval(this.fullReqInterval);
            break;
        case "pak1":
            this.model.persCreate(a[1]);
            break;
        case "pak1s":
            if (a[1] != "done") {
                this.model.persCreateUnparsedBuffer += a[1];
            } else {
                this.model.persCreate(this.model.persCreateUnparsedBuffer);
                this.model.persCreateUnparsedBuffer = "";
            }
            break;
        case "pak2":
            this.model.persUpdate(a[1]);
            break;
        case "pak2s":
            if (a[1] != "done") {
                this.model.persUpdateUnparsedBuffer += a[1];
            } else {
                this.model.persUpdate(this.model.persUpdateUnparsedBuffer);
                this.model.persUpdateUnparsedBuffer = "";
            }
            break;
        case "pers_bafs":
            this.model.parseEffects(a[1]);
            break;
        case "watchFightActive":
            this.model.parseWatchFight(a[1]);
            break;
        case "dead_cnt":
            this.model.parseDeadCount(a[1]);
            break;
        case "opp_id":
            this.model.setOppId(parseInt(a[1]));
            break;
        case "pers_focus":
            if (!a[1] || a[1] == "0") {
                this.persSelectHandler({ params: 0 });
            } else {
                this.persSelectHandler({ params: parseInt(a[1]) });
                this.model.autoScrollToSelected = true;
            }
            return;
        default:
            canvas.app.mem.log('WARN: unhandled event "' + a[0] + '"', 16711680);
            break;
    }
    this.view.update();
};
canvas.app.mem.Main.prototype.sendData = function (tar, data) {
    if (typeof swfTransfer != "undefined") swfTransfer("game", tar, data);
};
canvas.app.mem.Main.prototype.getEffects = function () {
    if (this.effectsReqInterval) clearInterval(this.effectsReqInterval);
    this.effectsReqInterval = setInterval(this.effectsReqFunc.bind(this), 2500);
    this.effectsReqFunc(true);
};
canvas.app.mem.Main.prototype.effectsReqFunc = function (force) {
    if (force || this.model.selectedPers) {
        var persData = this.model.persById[this.model.selectedPers];
        if (persData) {
            this.sendData("game", "persFocus@" + String(this.model.selectedPers));
        } else {
            this.model.resetEffects();
        }
    }
};
canvas.app.mem.Main.prototype.fullReqFunc = function () {
    this.sendData("game", "FullReq@null");
};
canvas.app.mem.Main.prototype.toggleDeadHandler = function (e) {
    this.model.deadHidded = !e.params;
    this.view.update();
};
canvas.app.mem.Main.prototype.toggleHPMPHandler = function (e) {
    this.model.showHPMP = e.params;
    var val = this.model.showHPMP ? 1 : 0;
    this.sendData("game", "showHPMP@" + val);
    this.view.persList.updateBarsVisible();
};
canvas.app.mem.Main.prototype.inputHandler = function (e) {
    this.model.filterText = e.params;
    this.view.update();
};
canvas.app.mem.Main.prototype.updateVisibleIdsHandler = function (e) {
    if (this.model.visibleIds != e.params) {
        this.model.visibleIds = e.params;
        this.sendData("game", "persVisible@" + this.model.visibleIds);
    }
};
canvas.app.mem.Main.prototype.getEffectsHandler = function (e) {
    this.getEffects();
};
canvas.app.mem.Main.prototype.watchSelectHandler = function (e) {
    this.model.watchId = e.params;
    this.view.update();
    this.sendData("game", "watchFightPID@" + this.model.watchId);
};
canvas.app.mem.Model = function (par) {
    this._deadHidded = false;
    Object.defineProperty(this, "deadHidded", {
        get: function () {
            return this._deadHidded;
        },
        set: function (value) {
            this._deadHidded = value;
            this.localStorage.set("deadHidded", value);
        },
    });
    this._showHPMP = true;
    Object.defineProperty(this, "showHPMP", {
        get: function () {
            return this._showHPMP;
        },
        set: function (value) {
            this._showHPMP = value;
            this.localStorage.set("showHPMP", value);
        },
    });
    this._selectedPers = 0;
    Object.defineProperty(this, "selectedPers", {
        get: function () {
            return this._selectedPers;
        },
        set: function (value) {
            if (this._selectedPers == value) return;
            this._selectedPers = value;
            this.effectsWasChanged = true;
            this.resetEffects();
        },
    });
    this.localStorage = new canvas.utils.LocalStorage(canvas.Log.MEM);
    if (this.localStorage.get("deadHidded") != undefined) this._deadHidded = this.localStorage.get("deadHidded") == "true" ? true : false;
    if (this.localStorage.get("showHPMP") != undefined) this._showHPMP = this.localStorage.get("showHPMP") == "true" ? true : false;
    this.invisibleInfoUrl = par.invisible_info_url ? par.invisible_info_url : "";
    this.fightFlags = par.fight_flags ? parseInt(par.fight_flags) : 0;
    this.fightServerId = par.fight_server_id ? par.fight_server_id : 0;
    this.team1serverUrl = par.team1_server_url ? par.team1_server_url : "";
    this.team2serverUrl = par.team2_server_url ? par.team2_server_url : "";
    this.persList = [[], []];
    this.persById = {};
    this.oppId = 0;
    this.myId = 0;
    this.myTeam = 1;
    this.deadCount = [0, 0];
    this.userCount = [0, 0];
    this.effects = [];
    this.effectsDeltaTime = 0;
    this.persCreateUnparsedBuffer = "";
    this.persUpdateUnparsedBuffer = "";
    this.effectsWasChanged = true;
    this.autoScrollToSelected = false;
    this.filterText = "";
    this.visibleIds = "";
    this.watchEnabled = false;
    this.watchTeam = 0;
    this.watchId = 0;
};
canvas.app.mem.Model.prototype.setOppId = function (value) {
    var persData;
    for (var str in this.persById) {
        persData = this.persById[str];
        if (persData.id == value || persData.id == this.oppId) {
            persData.wasChanged = true;
        }
    }
    this.oppId = value;
};
canvas.app.mem.Model.prototype.persCreate = function (value) {
    var a = value.split(String.fromCharCode(2));
    var b,
        persData,
        len = a.length;
    this.myId = parseInt(a[len - 1]);
    for (var i = 0; i < len - 1; i++) {
        b = a[i].split(String.fromCharCode(1));
        if (this.persById[parseInt(b[0])]) {
            canvas.app.mem.log("Warning: pers id=" + b[0] + " already exists in list", 6710886);
            continue;
        }
        persData = new canvas.data.battle.PersData();
        persData.id = parseInt(b[0]);
        persData.nick = b[1];
        persData.team = parseInt(b[2]);
        if (persData.team < 1 || persData.team > 2) continue;
        persData.status = parseInt(b[3]);
        persData.setRatios(parseInt(b[4]), parseInt(b[5]), parseInt(b[6]), parseInt(b[7]));
        persData.clanImage = b[8];
        persData.level = parseInt(b[9]);
        persData.isBot = b[10] != "false";
        persData.flags = parseInt(b[11]);
        persData.fightId = parseInt(b[12]);
        persData.isShadow = b[13] != "false";
        if (this.myId == persData.id) this.myTeam = persData.team;
        this.persById[persData.id] = persData;
        this.persList[persData.team - 1].push(persData);
        if (!persData.isBot) this.userCount[persData.team - 1]++;
    }
};
canvas.app.mem.Model.prototype.persUpdate = function (value) {
    var a = value.split(String.fromCharCode(2));
    var b,
        persData,
        len = a.length;
    for (var i = 0; i < len; i++) {
        b = a[i].split(String.fromCharCode(1));
        persData = this.persById[parseInt(b[0])];
        if (!persData) continue;
        persData.status = parseInt(b[1]);
        persData.setRatios(parseInt(b[2]), parseInt(b[3]), parseInt(b[4]), parseInt(b[5]));
        persData.flags = parseInt(b[6]);
    }
};
canvas.app.mem.Model.prototype.parseDeadCount = function (value) {
    var a = value.split(",");
    this.deadCount[0] = parseInt(a[0]);
    this.deadCount[1] = parseInt(a[1]);
};
canvas.app.mem.Model.prototype.resetEffects = function () {
    this.effects = [];
};
canvas.app.mem.Model.prototype.parseEffects = function (value) {
    var oldEffects = this.effects;
    this.resetEffects();
    if (!this.selectedPers) return;
    var sp1 = "|";
    var sp2 = ";";
    var a = value.split(sp1);
    var persId = parseInt(a.shift());
    if (persId != this.selectedPers) return;
    this.effectsDeltaTime = parseInt(a.shift());
    var effectsById = {};
    for (var i = 0; i < a.length; i++) {
        if (!a[i]) continue;
        var b = a[i].split(sp2);
        var effectData = new canvas.data.battle.EffectInfoData(parseInt(b[0]), b[1], parseInt(b[2]), b[3], parseInt(b[4]), parseInt(b[5]));
        if (effectsById[effectData.id]) {
            effectsById[effectData.id].add(effectData);
            continue;
        }
        this.effects.push(effectData);
        effectsById[effectData.id] = effectData;
    }
    if (!this.effectsWasChanged) {
        if (this.effects.length != oldEffects.length) {
            this.effectsWasChanged = true;
        } else {
            for (var i = 0; i < this.effects.length; i++) {
                if (!oldEffects[i] || !oldEffects[i].equals(this.effects[i])) {
                    this.effectsWasChanged = true;
                    break;
                }
            }
        }
    }
};
canvas.app.mem.Model.prototype.parseWatchFight = function (value) {
    var a = value.split(String.fromCharCode(1));
    this.watchEnabled = a[0] == "false" ? false : true;
    this.watchTeam = parseInt(a[1]);
    this.watchId = this.watchEnabled ? (a[2] ? parseInt(a[2]) : this.watchId) : this.myId;
};
canvas.app.mem.View = function (root) {
    this.root = $(root);
    this.border = $(document.createElement("div"));
    this.border.addClass("mem_border");
    var uzor = $(document.createElement("div"));
    uzor.addClass("mem_uzor");
    this.background = $(document.createElement("div"));
    this.background.addClass("mem_background");
    this.container = $(document.createElement("div"));
    this.container.addClass("mem_container");
    this.root.append(this.background);
    this.root.append(uzor);
    this.root.append(this.border);
    this.root.append(this.container);
    this.leftButton = new canvas.app.mem.view.ToggleButton(canvas.Translator.getText(1300), canvas.Translator.getText(1301));
    this.container.append(this.leftButton.root);
    this.leftButton.selected = !canvas.app.mem.model.deadHidded;
    this.rightButton = new canvas.app.mem.view.ToggleButton(canvas.Translator.getText(1302), canvas.Translator.getText(1303));
    this.container.append(this.rightButton.root);
    this.rightButton.selected = canvas.app.mem.model.showHPMP;
    this.headerBlock = $(document.createElement("div"));
    this.headerBlock.addClass("mem_header_block");
    this.container.append(this.headerBlock);
    this.headers = new Array();
    var div;
    for (var i = 0; i < 2; i++) {
        div = $(document.createElement("div"));
        div.addClass("mem_header_container");
        this.headerBlock.append(div);
        this.headers[i] = new canvas.app.mem.view.HeaderView(i);
        div.append(this.headers[i].root);
    }
    this.input = new canvas.app.mem.view.InputView(canvas.Translator.getText(1306));
    this.container.append(this.input.root);
    this.persList = new canvas.app.mem.view.PersList();
    this.container.append(this.persList.root);
    this.resize();
};
canvas.app.mem.View.prototype.resize = function () {
    this.container.css("width", this.border.width() + 92);
    this.container.css("height", this.border.height() + 92);
    this.background.css("width", this.border.width() + 70);
    this.background.css("height", this.border.height() + 70);
    this.persList.root.css("height", this.border.height() - 50);
};
canvas.app.mem.View.prototype.update = function () {
    var model = canvas.app.mem.model;
    for (var i = 0; i < 2; i++) {
        this.headers[i].update();
    }
    this.updateList();
};
canvas.app.mem.View.prototype.updateList = function () {
    this.persList.update();
    if (canvas.app.mem.model.effectsWasChanged) canvas.app.mem.model.effectsWasChanged = false;
};
canvas.app.mem.view.EffectView = function () {
    this._data = null;
    Object.defineProperty(this, "data", {
        get: function () {
            return this._data;
        },
        set: function (value) {
            this._data = value;
            this.update();
        },
    });
    this.root = $(document.createElement("div"));
    this.root.addClass("mem_effect_item");
    this.countSpan = $(document.createElement("span"));
    this.root.append(this.countSpan);
    this.img = $(document.createElement("img"));
    this.root.append(this.img);
    this.img.addClass("mem_pers_view_button");
    this.root.on("remove", this.removedHandler.bind(this));
    this.img.on("mouseenter", this.overHandler.bind(this)).on("mousemove", this.moveHandler.bind(this)).on("mouseleave", this.outHandler.bind(this)).on("click", this.clickHandler.bind(this));
};
canvas.app.mem.view.EffectView.prototype.update = function () {
    if (this.data) {
        this.countSpan.text(this.data.count);
        this.img.attr("src", this.data.image);
    }
};
canvas.app.mem.view.EffectView.prototype.clickHandler = function (e) {
    showArtifactInfo(false, this.data.id);
};
canvas.app.mem.view.EffectView.prototype.overHandler = function (e) {
    this.root.append('<span class="mem_hint"></span>');
    this.startHintUpdate();
    $(".mem_hint").css({ left: e.pageX + 10, top: e.pageY + 10 });
};
canvas.app.mem.view.EffectView.prototype.moveHandler = function (e) {
    $(".mem_hint").css({ left: e.pageX + 10, top: e.pageY + 10 });
};
canvas.app.mem.view.EffectView.prototype.outHandler = function (e) {
    this.root.children(".mem_hint").remove();
    this.stopHintUpdate();
};
canvas.app.mem.view.EffectView.prototype.startHintUpdate = function () {
    this.stopHintUpdate();
    this.updateHint();
    this.hintUpdateInterval = setInterval(this.updateHint.bind(this), 1e3);
};
canvas.app.mem.view.EffectView.prototype.stopHintUpdate = function () {
    if (this.hintUpdateInterval) clearInterval(this.hintUpdateInterval);
};
canvas.app.mem.view.EffectView.prototype.updateHint = function () {
    $(".mem_hint").html(this.getHintText());
};
canvas.app.mem.view.EffectView.prototype.getHintText = function () {
    var model = canvas.app.mem.model;
    var txt = this.data.title;
    var timeFlag = false;
    var time = Math.floor(this.data.finishTime - Date.now() / 1e3 - model.effectsDeltaTime);
    if (time < 0) {
    }
    var tmpTimeStr = "";
    var tmpTimeStrEng = "";
    var timeStr = String(Math.max(0, 1 + time));
    if (time < 3600) {
        switch (canvas.Translator.getLang()) {
            case "turk":
            case "de":
            case "cn":
            case "ru":
                if (this.data.turnsLeft == 1) txt += "<br/>" + canvas.Translator.getText(44) + " ";
                else txt += "<br/>" + canvas.Translator.getText(43) + " ";
                tmpTimeStr += timeStr + " " + canvas.Translator.getText(2003);
                timeFlag = true;
                break;
            case "en":
                txt += "<br/>" + " ";
                tmpTimeStrEng += canvas.Translator.getText(43);
                tmpTimeStr += timeStr + " " + canvas.Translator.getText(2003);
                timeFlag = true;
                break;
            default:
                txt += "<br/>" + timeStr;
                timeFlag = true;
                break;
        }
    }
    if (!timeFlag) {
        if (this.data.turnsLeft == 1) txt += "<br/>" + canvas.Translator.getText(44) + " ";
        else txt += "<br/>" + canvas.Translator.getText(43) + " ";
    }
    if (this.data.turnsLeft > 0 && this.data.turnsLeft < 3600) {
        var turns = this.data.turnsLeft;
        if (turns >= 10) {
            turns = turns % 10;
        }
        if (turns == 1) {
            if (timeFlag) txt += this.data.turnsLeft + this.getRightPhraseForTurns(this.data.turnsLeft) + tmpTimeStrEng + canvas.Translator.getText(53) + " ";
            else txt += this.data.turnsLeft + this.getRightPhraseForTurns(this.data.turnsLeft);
        }
        if (turns > 1 || turns == 0) {
            if (timeFlag) txt += this.data.turnsLeft + this.getRightPhraseForTurns(this.data.turnsLeft) + tmpTimeStrEng + canvas.Translator.getText(53) + " ";
            else txt += this.data.turnsLeft + this.getRightPhraseForTurns(this.data.turnsLeft);
        }
    }
    if (!timeFlag && (this.data.turnsLeft <= 0 || this.data.turnsLeft >= 3600)) {
        txt = this.data.title;
    } else txt += tmpTimeStr;
    return txt;
};
canvas.app.mem.view.EffectView.prototype.getRightPhraseForTurns = function (val) {
    var conf = canvas.app.mem.model;
    if (this.isPhraseManyTurns(val)) return " " + canvas.Translator.getText(52);
    if (this.isPhraseTurn(val)) return " " + canvas.Translator.getText(50);
    if (this.isPhraseOneTurn(val)) return " " + canvas.Translator.getText(51);
    return "--:--";
};
canvas.app.mem.view.EffectView.prototype.isPhraseManyTurns = function (val) {
    var modulo = val % 100;
    if (modulo >= 11 && modulo <= 20) return true;
    modulo = val % 10;
    if (modulo >= 5 && modulo <= 9) return true;
    if (modulo == 0) return true;
    return false;
};
canvas.app.mem.view.EffectView.prototype.isPhraseTurn = function (val) {
    var modulo = val % 10;
    if (modulo >= 2 && modulo <= 4) return true;
    return false;
};
canvas.app.mem.view.EffectView.prototype.isPhraseOneTurn = function (val) {
    var modulo = val % 10;
    if (modulo == 1) return true;
    return false;
};
canvas.app.mem.view.EffectView.prototype.removedHandler = function (e) {
    this.outHandler();
};
canvas.app.mem.view.HeaderView = function (index) {
    this._my = undefined;
    Object.defineProperty(this, "my", {
        get: function () {
            return this._my;
        },
        set: function (value) {
            if (this._my === value) return;
            this._my = value;
            if (value) {
                this.root.removeClass("mem_header_grey");
                this.root.addClass("mem_header_green");
            } else {
                this.root.removeClass("mem_header_green");
                this.root.addClass("mem_header_grey");
            }
        },
    });
    this.index = index;
    this.root = $(document.createElement("div"));
    this.root.addClass("mem_header");
    this.labelTop = $(document.createElement("div"));
    this.labelTop.attr("id", "label_top");
    this.root.append(this.labelTop);
    this.labelBottom = $(document.createElement("div"));
    this.labelBottom.attr("id", "label_bottom");
    this.root.append(this.labelBottom);
    this.labelTitle = $(document.createElement("div"));
    this.labelTitle.attr("id", "label_title");
    this.root.append(this.labelTitle);
    this.setTitleLabel(canvas.Translator.getText(index ? 1305 : 1304));
    var hintTitle = canvas.Translator.getText(71);
    this.root
        .on("mouseenter", function (e) {
            if (hintTitle) {
                $(this).append('<span class="mem_hint">' + hintTitle + "</span>");
                $(".mem_hint").css({ left: e.pageX + 10, top: e.pageY + 10 });
            }
        })
        .on("mousemove", function (e) {
            $(".mem_hint").css({ left: e.pageX + 10, top: e.pageY + 10 });
        })
        .on("mouseleave", function () {
            $(this).children(".mem_hint").remove();
        });
    this.update();
};
canvas.app.mem.view.HeaderView.prototype.update = function () {
    var model = canvas.app.mem.model;
    this.my = model.myTeam == this.index + 1;
    this.setTopLabel(model.persList[this.index].length + " (" + model.userCount[this.index] + ")");
    this.setBottomLabel(model.deadCount[this.index]);
};
canvas.app.mem.view.HeaderView.prototype.setTopLabel = function (str) {
    this.labelTop.text(str);
};
canvas.app.mem.view.HeaderView.prototype.setBottomLabel = function (str) {
    this.labelBottom.text(str);
};
canvas.app.mem.view.HeaderView.prototype.setTitleLabel = function (str) {
    this.labelTitle.text(str);
};
canvas.app.mem.view.InputView = function (defaultText) {
    this.defaultText = defaultText;
    this.root = $(document.createElement("div"));
    this.root.addClass("mem_input");
    var container = $(document.createElement("div"));
    this.root.append(container);
    this.input = $(document.createElement("input"));
    this.input.attr("type", "text");
    this.input.attr("maxlength", 20);
    container.append(this.input);
    this.input.on("input", this.changeHandler.bind(this));
    this.input.focusin(this.focusInHandler.bind(this));
    this.input.focusout(this.focusOutHandler.bind(this));
    this.focusOutHandler();
};
canvas.app.mem.view.InputView.prototype.changeHandler = function () {
    canvas.EventManager.dispatchEvent(canvas.app.mem.Event.INPUT, this, this.input.val());
};
canvas.app.mem.view.InputView.prototype.focusInHandler = function () {
    if (this.input.val() == this.defaultText) this.input.val("");
};
canvas.app.mem.view.InputView.prototype.focusOutHandler = function () {
    if (this.input.val() == "") this.input.val(this.defaultText);
};
canvas.app.mem.view.PersList = function () {
    this.root = $(document.createElement("div"));
    this.root.addClass("mem_pers_list");
    this.containers = new Array();
    this.persList = new Array();
    for (var i = 0; i < 2; i++) {
        this.persList[i] = new Array();
        this.containers[i] = $(document.createElement("div"));
        this.containers[i].addClass("mem_pers_list_container");
        this.root.append(this.containers[i]);
    }
    this.update();
};
canvas.app.mem.view.PersList.prototype.update = function () {
    var model = canvas.app.mem.model;
    var persView, i, j, len;
    for (i = 0; i < 2; i++) {
        if (this.persList[i].length < model.persList[i].length) {
            for (j = this.persList[i].length; j < model.persList[i].length; j++) {
                persView = new canvas.app.mem.view.PersView();
                persView.data = model.persList[i][j];
                this.persList[i][j] = persView;
                this.containers[i].append(persView.root);
            }
        }
    }
    for (i = 0; i < 2; i++) {
        len = this.persList[i].length;
        for (j = 0; j < len; j++) {
            this.persList[i][j].update();
        }
    }
    canvas.EventManager.dispatchEvent(canvas.app.mem.Event.UPDATE_VISIBLE_IDS, null, this.getVisibleIds());
};
canvas.app.mem.view.PersList.prototype.updateBarsVisible = function () {
    for (var i = 0; i < 2; i++) {
        var len = this.persList[i].length;
        for (var j = 0; j < len; j++) {
            this.persList[i][j].updateBarsVisible();
        }
    }
};
canvas.app.mem.view.PersList.prototype.getVisibleIds = function () {
    var result = [];
    for (var i = 0; i < 2; i++) {
        var len = this.persList[i].length;
        for (var j = 0; j < len; j++) {
            if (this.isElementInView(this.persList[i][j].root.context, true)) {
                result.push(this.persList[i][j].data.id);
            }
        }
    }
    return result
        .sort(function (a, b) {
            return a - b;
        })
        .join(",");
};
canvas.app.mem.view.PersList.prototype.isElementInView = function (element, fullyInView) {
    return true;
};
canvas.app.mem.view.PersView = function () {
    this._data = null;
    Object.defineProperty(this, "data", {
        get: function () {
            return this._data;
        },
        set: function (value) {
            this._data = value;
            this.update();
        },
    });
    this._hpmpVisible = true;
    Object.defineProperty(this, "hpmpVisible", {
        get: function () {
            return this._hpmpVisible;
        },
        set: function (value) {
            if (this._hpmpVisible != value) {
                this._hpmpVisible = value;
                if (value) {
                    this.hpmpContainer.show();
                    this.hpmpBr.show();
                } else {
                    this.hpmpContainer.hide();
                    this.hpmpBr.hide();
                }
            }
        },
    });
    this._visible = true;
    Object.defineProperty(this, "visible", {
        get: function () {
            return this._visible;
        },
        set: function (value) {
            if (this._visible != value) {
                this._visible = value;
                if (value) {
                    this.root.show();
                } else {
                    this.root.hide();
                }
            }
        },
    });
    this._nickEnabled = true;
    Object.defineProperty(this, "nickEnabled", {
        get: function () {
            return this._nickEnabled;
        },
        set: function (value) {
            if (this._nickEnabled != value) {
                this._nickEnabled = value;
                if (value) {
                    this.nickDiv.addClass("mem_pers_view_button");
                } else {
                    this.nickDiv.removeClass("mem_pers_view_button");
                }
            }
        },
    });
    this._watchSelected = false;
    Object.defineProperty(this, "watchSelected", {
        get: function () {
            return this._watchSelected;
        },
        set: function (value) {
            if (this._watchSelected != value) {
                this._watchSelected = value;
                this.watchImg.attr("src", value ? "../images/mem_watch_fight_dis.png" : "../images/mem_watch_fight.png");
                if (value) {
                    this.watchImg.removeClass("mem_pers_view_button");
                } else {
                    this.watchImg.addClass("mem_pers_view_button");
                }
            }
        },
    });
    this.inited = false;
    this.root = $(document.createElement("div"));
    this.root.addClass("mem_pers_view");
    var obj = this;
    this.watchImg = $(document.createElement("img"));
    this.watchImg.attr("src", "../images/mem_watch_fight.png");
    this.watchImg.addClass("mem_pers_view_button");
    this.watchImg.mouseover(function () {
        if (!obj.watchSelected) $(this).attr("src", "../images/mem_watch_fight_over.png");
    });
    this.watchImg.mouseout(function () {
        if (!obj.watchSelected) $(this).attr("src", "../images/mem_watch_fight.png");
    });
    this.watchImg.click(this.watchClickHandler.bind(this));
    this.root.append(this.watchImg);
    this.watchImg.hide();
    this.prvImg = $(document.createElement("img"));
    this.prvImg.attr("src", "../images/users-arrow.gif");
    this.prvImg.addClass("mem_pers_view_button");
    this.prvImg.mouseover(function () {
        $(this).attr("src", "../images/users-arrow-org.gif");
    });
    this.prvImg.mouseout(function () {
        $(this).attr("src", "../images/users-arrow.gif");
    });
    this.prvImg.click(this.prvClickHandler.bind(this));
    this.root.append(this.prvImg);
    this.clanImg = $(document.createElement("img"));
    this.root.append(this.clanImg);
    this.nickDiv = $(document.createElement("div"));
    this.nickDiv.addClass("mem_pers_view_button");
    this.nickDiv.click(this.nickClickHandler.bind(this));
    this.nickDiv.dblclick(this.nickDoubleClickHandler.bind(this));
    this.root.append(this.nickDiv);
    this.infoImg = $(document.createElement("img"));
    this.infoImg.attr("src", "../images/player_info.gif");
    this.infoImg.addClass("mem_pers_view_button");
    this.infoImg.mouseover(function () {
        $(this).attr("src", "../images/player_info_over.gif");
    });
    this.infoImg.mouseout(function () {
        $(this).attr("src", "../images/player_info.gif");
    });
    this.infoImg.click(this.infoClickHandler.bind(this));
    this.root.append(this.infoImg);
    this.hpmpBr = $(document.createElement("br"));
    this.root.append(this.hpmpBr);
    this.hpmpContainer = $(document.createElement("div"));
    this.root.append(this.hpmpContainer);
    var div = $(document.createElement("div"));
    div.addClass("mem_bar_back");
    this.hpmpContainer.append(div);
    this.hpDiv = $(document.createElement("div"));
    this.hpDiv.addClass("mem_bar_hp");
    div.append(this.hpDiv);
    div = $(document.createElement("br"));
    this.hpmpContainer.append(div);
    div = $(document.createElement("div"));
    div.addClass("mem_bar_back");
    this.hpmpContainer.append(div);
    this.mpDiv = $(document.createElement("div"));
    this.mpDiv.addClass("mem_bar_mp");
    div.append(this.mpDiv);
    div = $(document.createElement("br"));
    this.root.append(div);
    this.effectsContainer = $(document.createElement("div"));
    this.effectsContainer.addClass("mem_effects_container");
    this.effects = [];
    this.root.append(this.effectsContainer);
};
canvas.app.mem.view.PersView.prototype.update = function () {
    var model = canvas.app.mem.model;
    if (this.data) {
        var flee = this.isFlee();
        if (this.data.wasChanged) {
            var model = canvas.app.mem.model;
            this.data.wasChanged = false;
            if (!this.inited) {
                this.inited = true;
                this.init();
            }
            this.nickDiv.css("color", this.getNickColor());
            this.nickEnabled = !flee;
            this.hpDiv.css("width", Math.round(this.data.hpRatio * 100) + "%");
            this.mpDiv.css("width", Math.round(this.data.mpRatio * 100) + "%");
        }
        if (model.effectsWasChanged || flee) this.clearEffects();
        if (model.selectedPers == this.data.id && !flee) {
            this.root.addClass("mem_pers_view_selected");
            if (model.effectsWasChanged) this.renderEffects();
            if (model.autoScrollToSelected) {
                this.root.context.scrollIntoView(false);
                model.autoScrollToSelected = false;
            }
        } else {
            this.root.removeClass("mem_pers_view_selected");
        }
        this.updateVisible();
        this.updateWatch();
    }
};
canvas.app.mem.view.PersView.prototype.updateVisible = function () {
    var model = canvas.app.mem.model;
    this.visible = (!model.deadHidded || this.data.status != canvas.app.battle.Const.STATUS_DEAD) && (!model.filterText || this.data.nick.toLowerCase().indexOf(model.filterText.toLowerCase()) >= 0);
};
canvas.app.mem.view.PersView.prototype.updateWatch = function () {
    var model = canvas.app.mem.model;
    if (!this.data.isBot && model.watchEnabled && model.watchTeam == this.data.team && (this.data.status != canvas.app.battle.Const.STATUS_DEAD || this.data.id == model.myId)) {
        this.watchImg.show();
        this.watchSelected = this.data.id == model.watchId;
    } else {
        this.watchImg.hide();
    }
};
canvas.app.mem.view.PersView.prototype.updateBarsVisible = function () {
    this.hpmpVisible = canvas.app.mem.model.showHPMP;
};
canvas.app.mem.view.PersView.prototype.init = function () {
    if (this.data.nick.length > 10) {
        this.nickDiv.text(this.data.nick.substr(0, 10) + "..." + "[" + this.data.level + "]");
    } else {
        this.nickDiv.text(this.data.nick + "[" + this.data.level + "]");
    }
    if (this.data.clanImage) {
        this.clanImg.attr("src", "../images/data/clans/" + this.data.clanImage);
        this.clanImg.show();
    } else {
        this.clanImg.hide();
    }
    this.updateBarsVisible();
};
canvas.app.mem.view.PersView.prototype.clearEffects = function () {
    this.effectsContainer.empty();
    for (var i = 0; i < this.effects.length; i++) {
        this.effects[i].removedHandler();
    }
    this.effects = [];
};
canvas.app.mem.view.PersView.prototype.renderEffects = function () {
    var model = canvas.app.mem.model;
    for (var i = 0; i < model.effects.length; i++) {
        var effectView = new canvas.app.mem.view.EffectView();
        effectView.data = model.effects[i];
        this.effectsContainer.append(effectView.root);
        this.effects.push(effectView);
    }
};
canvas.app.mem.view.PersView.prototype.getNickColor = function () {
    var model = canvas.app.mem.model;
    if (model.oppId == this.data.id) return "#074cb4";
    if (this.isFlee()) return "#FA9B4E";
    switch (this.data.status) {
        case canvas.app.battle.Const.STATUS_CREATED:
            return "#B89880";
        case canvas.app.battle.Const.STATUS_WAIT:
        case canvas.app.battle.Const.STATUS_ACTIVE:
        case canvas.app.battle.Const.STATUS_PASSIVE:
            return model.myId != this.data.id ? "#674F3D" : "#006600";
        case canvas.app.battle.Const.STATUS_DEAD:
            return "#FF0000";
        default:
            return "#674F3D";
    }
};
canvas.app.mem.view.PersView.prototype.isFlee = function () {
    return canvas.Functions.testFlag(this.data.flags, canvas.app.battle.Const.FS_PF_FLEE);
};
canvas.app.mem.view.PersView.prototype.nickClickHandler = function () {
    if (this.data && canvas.app.mem.model.selectedPers != this.data.id && !this.isFlee()) {
        canvas.EventManager.dispatchEvent(canvas.app.mem.Event.PERS_SELECT, null, this.data.id);
    }
};
canvas.app.mem.view.PersView.prototype.nickDoubleClickHandler = function () {
    if (!this.isFlee()) this.watchClickHandler();
};
canvas.app.mem.view.PersView.prototype.prvClickHandler = function () {
    userPrvTag(this.data.nick);
};
canvas.app.mem.view.PersView.prototype.infoClickHandler = function () {
    var model = canvas.app.mem.model;
    if (canvas.Functions.testFlag(model.fightFlags, canvas.app.battle.Const.FIGHT_FLAG_BLIND) || (canvas.Functions.testFlag(this.data.flags, canvas.app.battle.Const.FS_PF_INVISIBLE) && model.invisibleInfoUrl))
        canvas.Functions.navigateToURL(model.invisibleInfoUrl, "_blank");
    else if (this.data.isShadow) showShadowInfo(false, String(this.data.id), false, this.data.fightId, model.fightServerId ? model.fightServerId : false);
    else if (this.data.isBot) showBotInfo(String(this.data.id), "0", this.data.fightId, model.fightServerId ? model.fightServerId : false);
    else showUserInfo(this.data.nick, model["team" + this.data.team + "serverUrl"] ? model["team" + this.data.team + "serverUrl"] : false);
};
canvas.app.mem.view.PersView.prototype.watchClickHandler = function () {
    if (!this.watchSelected && this.watchImg.is(":visible")) {
        canvas.EventManager.dispatchEvent(canvas.app.mem.Event.WATCH_SELECT, null, this.data.id);
    }
};
canvas.app.mem.view.ToggleButton = function (label1, label2) {
    this._selected = false;
    Object.defineProperty(this, "selected", {
        get: function () {
            return this._selected;
        },
        set: function (value) {
            this._selected = value;
            if (value) {
                this.label.text(this.label1);
                this.root.removeClass("mem_button_white");
                this.root.addClass("mem_button_red");
            } else {
                this.label.text(this.label2);
                this.root.removeClass("mem_button_red");
                this.root.addClass("mem_button_white");
            }
        },
    });
    this.root = $(document.createElement("div"));
    this.root.addClass("mem_button");
    this.label = $(document.createElement("div"));
    this.root.append(this.label);
    this.label1 = label1;
    this.label2 = label2;
    this.selected = true;
    this.root.click(this.clickHandler.bind(this));
};
canvas.app.mem.view.ToggleButton.prototype.clickHandler = function () {
    this.selected = !this.selected;
    canvas.EventManager.dispatchEvent(canvas.app.mem.Event.TOGGLE_BUTTON_CLICK, this, this.selected);
};
canvas.app.firstBattle.Const = { WIDTH: 464, HEIGHT: 359, STATE_SELECT_GENDER: 1, STATE_BATTLE: 2, STATE_BATTLE_FINISH: 3 };
canvas.app.firstBattle.Event = {
    ENTER_FRAME: "FirstBattle.ENTER_FRAME",
    HINT_ADD: "FirstBattle.HINT_ADD",
    HINT_REMOVE: "FirstBattle.HINT_REMOVE",
    GENDER_CHANGE: "FirstBattle.GENDER_CHANGE",
    GENDER_SELECT: "FirstBattle.GENDER_SELECT",
    BLOCK_CHANGE: "FirstBattle.BLOCK_CHANGE",
    PERS_ATTACK: "FirstBattle.PERS_ATTACK",
    PERS_DAMAGE: "FirstBattle.PERS_DAMAGE",
    PERS_EFFECT_DAMAGE: "FirstBattle.PERS_EFFECT_DAMAGE",
    PERS_ATTACK_SPELL: "FirstBattle.PERS_ATTACK_SPELL",
    ENEMY_ATTACK: "FirstBattle.ENEMY_ATTACK",
    ENEMY_DAMAGE: "FirstBattle.ENEMY_DAMAGE",
    ENEMY_DEAD: "FirstBattle.ENEMY_DEAD",
    FINISH: "FirstBattle.FINISH",
};
canvas.app.firstBattle.Main = function (model, hintManager) {
    canvas.px.Container.call(this);
    this.model = model;
    this.hintManager = hintManager;
    this.hintContainer = new canvas.px.Container();
    this.hintContainer.interactive = true;
    this.hintManager.init(this.hintContainer, this.model.width, this.model.height);
    canvas.EventManager.addEventListener(canvas.app.firstBattle.Event.HINT_ADD, null, this.handlerHintAdd, this);
    canvas.EventManager.addEventListener(canvas.app.firstBattle.Event.HINT_REMOVE, null, this.handlerHintRemove, this);
    canvas.EventManager.addEventListener(canvas.app.firstBattle.Event.GENDER_CHANGE, null, this.genderChangeHandler, this);
    canvas.EventManager.addEventListener(canvas.app.firstBattle.Event.GENDER_SELECT, null, this.genderSelectHandler, this);
    canvas.EventManager.addEventListener(canvas.app.firstBattle.Event.BLOCK_CHANGE, null, this.blockChangeHandler, this);
    canvas.EventManager.addEventListener(canvas.app.firstBattle.Event.PERS_ATTACK, null, this.persAttackHandler, this);
    canvas.EventManager.addEventListener(canvas.app.firstBattle.Event.PERS_ATTACK_SPELL, null, this.persAttackSpellHandler, this);
    canvas.EventManager.addEventListener(canvas.app.firstBattle.Event.PERS_DAMAGE, null, this.persDamageHandler, this);
    canvas.EventManager.addEventListener(canvas.app.firstBattle.Event.ENEMY_ATTACK, null, this.enemyAttackHandler, this);
    canvas.EventManager.addEventListener(canvas.app.firstBattle.Event.ENEMY_DAMAGE, null, this.enemyDamageHandler, this);
    canvas.EventManager.addEventListener(canvas.app.firstBattle.Event.PERS_EFFECT_DAMAGE, null, this.persEffectDamageHandler, this);
    canvas.EventManager.addEventListener(canvas.app.firstBattle.Event.ENEMY_DEAD, null, this.enemyDeadHandler, this);
    canvas.EventManager.addEventListener(canvas.app.firstBattle.Event.FINISH, null, this.finishHandler, this);
    this.view = new canvas.app.firstBattle.View();
    this.addChild(this.view);
    this.addChild(this.hintContainer);
};
canvas.app.firstBattle.Main.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.firstBattle.Main.prototype.handlerHintAdd = function (e) {
    this.hintManager.add(e.params.target, e.params.params);
};
canvas.app.firstBattle.Main.prototype.handlerHintRemove = function (e) {
    this.hintManager.remove(e.params.target);
};
canvas.app.firstBattle.Main.prototype.genderChangeHandler = function (e) {
    this.model.gender = this.model.gender == canvas.Const.GENDER.MALE ? canvas.Const.GENDER.FEMALE : canvas.Const.GENDER.MALE;
    this.view.update();
};
canvas.app.firstBattle.Main.prototype.genderSelectHandler = function (e) {
    this.model.state = canvas.app.firstBattle.Const.STATE_BATTLE;
    this.view.update();
};
canvas.app.firstBattle.Main.prototype.blockChangeHandler = function (e) {
    this.model.blockOn = !this.model.blockOn;
    this.view.update();
    this.view.battleView.persIdle();
};
canvas.app.firstBattle.Main.prototype.persAttackHandler = function (e) {
    this.model.myTurn = false;
    this.view.battleView.persAttack(e.params);
};
canvas.app.firstBattle.Main.prototype.persAttackSpellHandler = function (e) {
    this.model.myTurn = false;
    this.model.persCastSpell();
    this.view.battleView.persAttackSpell(e.params);
    this.view.update();
};
canvas.app.firstBattle.Main.prototype.persDamageHandler = function (e) {
    this.model.myTurn = true;
    var damage = this.model.persDamage();
    this.view.update();
    this.view.battleView.persDamage(damage);
};
canvas.app.firstBattle.Main.prototype.persEffectDamageHandler = function (e) {
    var damage = this.model.persEffectDamage();
    this.view.update();
    this.view.battleView.persEffectDamage(damage);
};
canvas.app.firstBattle.Main.prototype.enemyAttackHandler = function (e) {};
canvas.app.firstBattle.Main.prototype.enemyDamageHandler = function (e) {
    var damage = this.model.enemyDamage(e.params);
    this.view.update();
    this.view.battleView.enemyDamage(damage);
};
canvas.app.firstBattle.Main.prototype.enemyDeadHandler = function (e) {
    this.model.state = canvas.app.firstBattle.Const.STATE_BATTLE_FINISH;
    this.view.update();
};
canvas.app.firstBattle.Main.prototype.finishHandler = function (e) {
    canvas.Functions.navigateToURL(this.model.link, "_blank");
};
canvas.app.firstBattle.Model = function (par) {
    this.gender = canvas.Const.GENDER.MALE;
    this.state = canvas.app.firstBattle.Const.STATE_SELECT_GENDER;
    this.blockOn = false;
    this.spells = {};
    this.spells[1] = { effId: 1, title: canvas.Translator.getText(1706), picture: "spell_fire" };
    this.spells[2] = { effId: 2, title: canvas.Translator.getText(1707), picture: "spell_air" };
    this.spells[3] = { effId: 3, title: canvas.Translator.getText(1708), picture: "spell_light" };
    this.spells[4] = { effId: 4, title: canvas.Translator.getText(1709), picture: "spell_earth" };
    this.spells[5] = { effId: 5, title: canvas.Translator.getText(1710), picture: "spell_dark" };
    this.mode = canvas.app.battle.Const.MODE_ATTACK;
    this.totalDamage = 0;
    this.myTurn = true;
    this.persNumAttacks = 0;
    this.enemyNumAttacks = 0;
    this.effectUsed = false;
    this.spellsUsed = false;
    this.parse(par);
};
canvas.app.firstBattle.Model.prototype.parse = function (par) {
    this.persParams = {};
    this.persParams[canvas.Const.GENDER.MALE] = {
        nick: this.ok(par.fight_user_male_nick) ? par.fight_user_male_nick : "Warrior",
        sk: this.ok(par.fight_user_male_skeleton) ? par.fight_user_male_skeleton : 1,
        parts: this.ok(par.fight_user_male_parts)
            ? par.fight_user_male_parts
            : "590330;;;,0,0;;;,0;;;,0;;;,404;;;,590325;;;,275;;;,271;;;,590325;;;,275;;;,271;;;,590325;;;,275;;;,271;;;,590325;;;,275;;;,271;;;,590325;;;,0;;;,271;;;,590325;;;,275;;;,271;;;,590325;;;,275;;;,271;;;,590325;;;,0;;;,271;;;,590325;;;,275;;;,271;;;,590325;;;,275;;;,271;;;,590325;;;,0;;;,271;;;,590325;;;,275;;;,271;;;,590325;;;,275;;;,271;;;,590325;;;,0;;;,271;;;,0;;;,0;;;,1186;;;,0;;;,0;;;,1368;;;,0;;;,0;;;,0;;;,0;;;,0;;;,0;;;,0;;;,0;;;,0;;;",
        level: 5,
        curHp: 200,
        maxHp: 200,
        curMp: 100,
        maxMp: 100,
    };
    this.persParams[canvas.Const.GENDER.FEMALE] = {
        nick: this.ok(par.fight_user_female_nick) ? par.fight_user_female_nick : "Warrior",
        sk: this.ok(par.fight_user_female_skeleton) ? par.fight_user_female_skeleton : 1,
        parts: this.ok(par.fight_user_female_parts)
            ? par.fight_user_female_parts
            : "262159;;;,0,0;;;,0;;;,0;;;,407;;;,262145;;;,274;;;,270;;;,262145;;;,274;;;,270;;;,262145;;;,274;;;,270;;;,262145;;;,274;;;,270;;;,262145;;;,0;;;,270;;;,262145;;;,274;;;,270;;;,262145;;;,274;;;,270;;;,262145;;;,0;;;,270;;;,262145;;;,274;;;,270;;;,262145;;;,274;;;,270;;;,262145;;;,0;;;,270;;;,262145;;;,274;;;,270;;;,262145;;;,274;;;,270;;;,262145;;;,0;;;,270;;;,0;;;,0;;;,1187;;;,0;;;,0;;;,1369;;;,0;;;,0;;;,0;;;,0;;;,0;;;,0;;;,0;;;,0;;;,0;;;",
        level: 5,
        curHp: 200,
        maxHp: 200,
        curMp: 100,
        maxMp: 100,
    };
    this.enemyParams = {
        nick: this.ok(par.fight_enemy_nick) ? par.fight_enemy_nick : "Enemy",
        sk: this.ok(par.fight_enemy_skeleton) ? par.fight_enemy_skeleton : 1160,
        parts: this.ok(par.fight_enemy_parts) ? par.fight_enemy_parts : "",
        level: 6,
        curHp: 250,
        maxHp: 250,
        curMp: 150,
        maxMp: 150,
    };
    this.link = this.ok(par.link) ? par.link : "https://w1.dwar.ru/";
};
canvas.app.firstBattle.Model.prototype.getPersParams = function () {
    return this.persParams[this.gender];
};
canvas.app.firstBattle.Model.prototype.enemyIsDead = function () {
    return this.enemyParams.curHp < 1;
};
canvas.app.firstBattle.Model.prototype.ok = function (value) {
    return value != undefined;
};
canvas.app.firstBattle.Model.prototype.getAnimationNameByZone = function (value) {
    switch (parseInt(value)) {
        case 1:
            return "a_up_1";
        case 2:
            return "a_mid_1";
        case 3:
            return "a_bot_1";
    }
    return "a_mid_1";
};
canvas.app.firstBattle.Model.prototype.getSpellBySlot = function (value) {
    switch (parseInt(value)) {
        case 1:
            return "_SP2";
        case 2:
            return "_SP1";
        case 3:
            return "_SP5";
        case 4:
            return "_SP4";
        case 5:
            return "_SP6";
    }
    return "_SP1";
};
canvas.app.firstBattle.Model.prototype.persCastSpell = function () {
    this.getPersParams().curMp -= 12;
};
canvas.app.firstBattle.Model.prototype.persDamage = function () {
    this.enemyNumAttacks++;
    var damage = 20 + Math.floor(Math.random() * 10);
    if (this.getPersParams().curHp < 70 || Math.random() >= this.getPersParams().curHp / this.getPersParams().maxHp) damage = 0;
    if (this.blockOn) damage = Math.ceil(damage * 0.5);
    this.getPersParams().curHp -= damage;
    if (this.getPersParams().curHp <= 0) {
        this.getPersParams().curHp = this.getPersParams().curMp = 0;
    }
    return damage;
};
canvas.app.firstBattle.Model.prototype.persEffectDamage = function () {
    var damage = 5 + Math.floor(Math.random() * 4);
    this.getPersParams().curHp -= damage;
    if (this.getPersParams().curHp <= 0) {
        this.getPersParams().curHp = this.getPersParams().curMp = 0;
    }
    return damage;
};
canvas.app.firstBattle.Model.prototype.enemyDamage = function (spell) {
    this.persNumAttacks++;
    var damage = (spell ? 40 : 30) + Math.floor(Math.random() * 10);
    if (this.persNumAttacks == 2) damage = 0;
    if (this.persNumAttacks == 3) damage *= 2;
    if (this.blockOn) damage = Math.ceil(damage * 0.5);
    this.enemyParams.curHp -= damage;
    if (this.enemyParams.curHp <= 0) {
        this.enemyParams.curHp = this.enemyParams.curMp = 0;
    }
    this.totalDamage += damage;
    return damage;
};
canvas.app.firstBattle.View = function () {
    canvas.px.Container.call(this);
    var conf = canvas.app.firstBattle.model;
    var sprite = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "back")));
    sprite.position.set(14, 10);
    sprite = this.addChild(new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "battle_contour"), 49, 49, 49, 49));
    sprite.width = canvas.app.firstBattle.Const.WIDTH;
    sprite.height = canvas.app.firstBattle.Const.HEIGHT;
    sprite = this.addChild(new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "header"), 31, 0, 31, 0));
    sprite.width = 150;
    sprite.y = 345;
    sprite.x = Math.round((canvas.app.firstBattle.Const.WIDTH - sprite.width) * 0.5);
    sprite = sprite.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD, 15660470, sprite.width - 20, 20, "center"));
    sprite.position.set(10, 2);
    sprite.text = canvas.Translator.getText(1700);
    this.infoField = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_12_BOLD, 7158057, canvas.app.firstBattle.Const.WIDTH - 20, 50, "center"));
    this.infoField.position.set(10, 370);
    this.infoField.text = canvas.Translator.getText(1701);
    conf.gender = canvas.Const.GENDER.MALE;
    this.persPreviewMale = new canvas.animation.Skeleton(canvas.Config.skPath + "M/sk0" + conf.getPersParams().sk);
    this.addChild(this.persPreviewMale);
    this.persPreviewMale.position.set(120, 15);
    this.persPreviewMale.skeletonData = new canvas.data.battle.SkeletonData(conf.getPersParams().parts, "M");
    this.persPreviewMale.frameEvent = canvas.app.firstBattle.Event.ENTER_FRAME;
    this.persPreviewMale.scale.x = this.persPreviewMale.scale.y = 0.85;
    this.persPreviewMale.visible = false;
    conf.gender = canvas.Const.GENDER.FEMALE;
    this.persPreviewFemale = new canvas.animation.Skeleton(canvas.Config.skPath + "F/sk0" + conf.getPersParams().sk);
    this.addChild(this.persPreviewFemale);
    this.persPreviewFemale.position.set(120, 15);
    this.persPreviewFemale.skeletonData = new canvas.data.battle.SkeletonData(conf.getPersParams().parts, "F");
    this.persPreviewFemale.scale.x = this.persPreviewFemale.scale.y = 0.85;
    this.persPreviewFemale.visible = false;
    conf.gender = canvas.Const.GENDER.MALE;
    this.selectGenderWindow = this.addChild(new canvas.app.firstBattle.view.SelectGenderWindow());
    this.selectGenderWindow.position.set(Math.round((canvas.app.firstBattle.Const.WIDTH - this.selectGenderWindow.width) * 0.5), 20);
    if (!this.persPreviewMale.ready) {
        canvas.EventManager.addEventListener(canvas.px.MovieClipEvent.EVENT_READY, this.persPreviewMale, this.completeHandler, this);
    } else {
        this.update();
    }
};
canvas.app.firstBattle.View.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.firstBattle.View.prototype.completeHandler = function () {
    canvas.EventManager.removeEventListener(canvas.px.MovieClipEvent.EVENT_READY, this.persPreviewMale, this.completeHandler, this);
    this.update();
};
canvas.app.firstBattle.View.prototype.update = function () {
    var model = canvas.app.firstBattle.model;
    switch (model.state) {
        case canvas.app.firstBattle.Const.STATE_SELECT_GENDER:
            if (this.selectGenderWindow) this.selectGenderWindow.update();
            if (canvas.app.firstBattle.model.gender == canvas.Const.GENDER.MALE) {
                this.persPreviewMale.frameEvent = canvas.app.firstBattle.Event.ENTER_FRAME;
                this.persPreviewMale.gotoAndPlay("idle");
                this.persPreviewMale.visible = true;
                this.persPreviewFemale.frameEvent = "";
                this.persPreviewFemale.visible = false;
            } else {
                this.persPreviewFemale.frameEvent = canvas.app.firstBattle.Event.ENTER_FRAME;
                this.persPreviewFemale.gotoAndPlay("idle");
                this.persPreviewFemale.visible = true;
                this.persPreviewMale.frameEvent = "";
                this.persPreviewMale.visible = false;
            }
            break;
        case canvas.app.firstBattle.Const.STATE_BATTLE:
            if (this.selectGenderWindow) this.selectGenderWindow.destroy({ children: true });
            if (this.persPreviewMale) this.persPreviewMale.destroy();
            if (this.persPreviewFemale) this.persPreviewFemale.destroy();
            if (!this.battleView) {
                this.battleView = this.addChild(new canvas.app.firstBattle.view.BattleView());
                this.battleView.x = 10;
            }
            if (this.battleView) this.battleView.update();
            this.infoField.text = canvas.Translator.getText(model.persNumAttacks >= 3 ? 1718 : 1717);
            break;
        case canvas.app.firstBattle.Const.STATE_BATTLE_FINISH:
            if (!this.finishView) {
                var mask = this.addChild(new canvas.px.Mask(canvas.app.firstBattle.Const.WIDTH - 20, canvas.app.firstBattle.Const.HEIGHT - 20, 0, 0.7));
                mask.position.set(10, 10);
                this.finishView = this.addChild(new canvas.app.firstBattle.view.FinishView());
                this.finishView.position.set(5, 0);
                this.infoField.text = canvas.Translator.getText(1715);
            }
            break;
    }
};
canvas.app.firstBattle.view.BattleView = function () {
    canvas.px.Container.call(this);
    var model = canvas.app.firstBattle.model;
    this.container = this.addChild(new canvas.px.Container());
    this.wall = this.addChild(new canvas.px.Mask(436, 331, 1, 1));
    this.wall.position.set(4, 13);
    this.container.mask = this.wall;
    this.topImage = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_top"));
    this.damageText = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_9, 16697738, 100, 16, "center");
    this.damageText.text = canvas.Translator.getText(30);
    this.hpmp = new canvas.app.firstBattle.view.HpMpView();
    this.persNick = new canvas.app.firstBattle.view.NickView();
    this.persNick.update(model.getPersParams().nick);
    this.oppNick = new canvas.app.firstBattle.view.NickView();
    this.oppNick.update(model.enemyParams.nick);
    this.persLevel = new canvas.app.firstBattle.view.LevelView();
    this.persLevel.setLevel(model.getPersParams().level);
    this.oppLevel = new canvas.app.firstBattle.view.LevelView();
    this.oppLevel.setLevel(model.enemyParams.level);
    this.totalDamage = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_9, 16697738, 70, 17, "center");
    this.addChild(this.topImage);
    this.topImage.position.set(20, -4);
    this.addChild(this.damageText);
    this.damageText.position.set(172, 38);
    this.addChild(this.hpmp);
    this.addChild(this.persNick);
    this.persNick.position.set(133, 14);
    this.addChild(this.oppNick);
    this.oppNick.position.set(312, 14);
    this.addChild(this.persLevel);
    this.persLevel.position.set(36, 4);
    this.addChild(this.oppLevel);
    this.oppLevel.position.set(374, 4);
    this.addChild(this.totalDamage);
    this.totalDamage.position.set(188, 52);
    this.pers = new canvas.animation.Skeleton(canvas.Config.skPath + model.gender + "/sk0" + model.getPersParams().sk);
    this.pers.TURN = this.persTurn.bind(this);
    this.container.addChild(this.pers);
    this.persBasePos = new canvas.px.Point(-10, 10);
    this.pers.position.set(this.persBasePos.x, this.persBasePos.y);
    this.pers.skeletonData = new canvas.data.battle.SkeletonData(model.getPersParams().parts, model.gender);
    this.pers.frameEvent = canvas.app.firstBattle.Event.ENTER_FRAME;
    this.pers.scale.x = this.pers.scale.y = 0.85;
    this.pers.gotoAndPlay("idle");
    this.enemy = new canvas.animation.Bot(canvas.Config.botsPath + "img" + model.enemyParams.sk + "/img" + model.enemyParams.sk);
    this.container.addChild(this.enemy);
    this.enemy.position.set(465, 20);
    this.enemy.frameEvent = canvas.app.firstBattle.Event.ENTER_FRAME;
    this.enemy.scale.x = -1;
    this.enemy.TURN = this.enemyTurn.bind(this);
    this.centerView = new canvas.app.firstBattle.view.CenterView(this);
    this.addChild(this.centerView);
    this.centerView.buildSpells();
    this.centerView.position.set(222, 226);
    this.setCenterVisible(true);
    this.centerView.cDot.switchDot(true);
};
canvas.app.firstBattle.view.BattleView.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.firstBattle.view.BattleView.prototype.update = function (value) {
    var model = canvas.app.firstBattle.model;
    this.centerView.activeBlock(model.blockOn);
    this.totalDamage.text = model.totalDamage;
    this.hpmp.setHpPers(model.getPersParams().curHp, model.getPersParams().maxHp);
    this.hpmp.setMpPers(model.getPersParams().curMp, model.getPersParams().maxMp);
    this.hpmp.setHpOpp(model.enemyParams.curHp, model.enemyParams.maxHp);
    this.hpmp.setMpOpp(model.enemyParams.curMp, model.enemyParams.maxMp);
};
canvas.app.firstBattle.view.BattleView.prototype.persIdle = function () {
    var model = canvas.app.firstBattle.model;
    this.pers.gotoAndPlay(model.blockOn ? "protected" : "idle");
};
canvas.app.firstBattle.view.BattleView.prototype.setCenterVisible = function (value) {
    this.centerView.setVisible(value);
};
canvas.app.firstBattle.view.BattleView.prototype.playComboHit = function () {
    var comboHint = new canvas.app.firstBattle.view.ComboHint();
    this.addChild(comboHint);
    comboHint.position.set(222, 110);
};
canvas.app.firstBattle.view.BattleView.prototype.showDmg = function (par) {
    this.addChild(new canvas.app.firstBattle.view.DmgFly(par, 0));
};
canvas.app.firstBattle.view.BattleView.prototype.persAttack = function (zone) {
    var model = canvas.app.firstBattle.model;
    this.pers.gotoAndPlay(model.persNumAttacks == 2 ? "combo_1" : model.getAnimationNameByZone(zone));
    this.moveInterval = setInterval(this.persMoveIntervalHandler.bind(this), 60);
    this.moveIndex = 0;
    this.setCenterVisible(false);
};
canvas.app.firstBattle.view.BattleView.prototype.persAttackSpell = function (slot) {
    var model = canvas.app.firstBattle.model;
    this.pers.gotoAndPlay("spell_1");
    this.setCenterVisible(false);
    var spellName = model.getSpellBySlot(slot);
    var mc = new canvas.px.MovieClip(canvas.Config.spellsPath + spellName);
    this.sndPlay(spellName);
    mc.autoDestroy = true;
    mc.frameEvent = canvas.app.firstBattle.Event.ENTER_FRAME;
    this.container.addChild(mc);
    mc.position.set(220, 200);
    setTimeout(this.persAttackSpellDamage.bind(this), 1e3);
    setTimeout(this.enemyAttack.bind(this), 3e3);
};
canvas.app.firstBattle.view.BattleView.prototype.persAttackSpellDamage = function () {
    canvas.EventManager.dispatchEvent(canvas.app.firstBattle.Event.ENEMY_DAMAGE, null, { spell: true });
};
canvas.app.firstBattle.view.BattleView.prototype.persMoveIntervalHandler = function () {
    this.pers.x = this.persBasePos.x + Math.abs(this.moveIndex) * 10;
    this.moveIndex += this.moveIndex > 0 ? 1 : 2;
    if (this.moveIndex == 12) {
        this.moveIndex = -12;
        canvas.EventManager.dispatchEvent(canvas.app.firstBattle.Event.ENEMY_DAMAGE);
    }
    if (this.moveIndex == 0) {
        clearInterval(this.moveInterval);
        this.pers.x = this.persBasePos.x;
        setTimeout(this.enemyAttack.bind(this), 2e3);
    }
};
canvas.app.firstBattle.view.BattleView.prototype.enemyDamage = function (value) {
    var model = canvas.app.firstBattle.model;
    if (model.persNumAttacks == 3) this.playComboHit();
    this.enemy.gotoAndPlay(value > 0 ? (model.enemyIsDead() ? "die" : "wound") : "block");
    this.sndPlay(value < 1 ? "block_weapon_1" : "wound_punch_" + (canvas.Functions.random(3) + 1));
    if (model.enemyIsDead()) this.sndPlay("body_fall");
    this.showDmg({ tar: "opp", kick: value > 0 ? (model.persNumAttacks == 3 ? canvas.app.battle.Const.DMG_KICK_CRIT : canvas.app.battle.Const.DMG_KICK_WOUND) : canvas.app.battle.Const.DMG_KICK_BLOCK, val: -value });
};
canvas.app.firstBattle.view.BattleView.prototype.persDamage = function (value) {
    var model = canvas.app.firstBattle.model;
    this.pers.gotoAndPlay(value > 0 ? "wound_1" : "dodge_1");
    this.sndPlay(value < 1 ? "dodge" : "wound_punch_" + (canvas.Functions.random(3) + 1));
    this.showDmg({ tar: "pers", kick: value > 0 ? canvas.app.battle.Const.DMG_KICK_WOUND : canvas.app.battle.Const.DMG_KICK_DODGE, val: -value });
    if (!model.effectUsed && model.enemyNumAttacks >= 2 && value > 0) {
        this.effectView = this.addChild(new canvas.app.firstBattle.view.EffectView());
        this.effectView.position.set(45, 76);
        model.effectUsed = true;
    }
};
canvas.app.firstBattle.view.BattleView.prototype.persEffectDamage = function (value) {
    this.showDmg({ tar: "pers", kick: canvas.app.battle.Const.DMG_KICK_WOUND, val: -value });
};
canvas.app.firstBattle.view.BattleView.prototype.enemyAttack = function () {
    var model = canvas.app.firstBattle.model;
    if (model.enemyIsDead()) return;
    this.enemy.gotoAndPlay(model.getAnimationNameByZone(canvas.Functions.random(3) + 1));
    setTimeout(this.enemyAttackDamage.bind(this), 700);
};
canvas.app.firstBattle.view.BattleView.prototype.enemyAttackDamage = function () {
    canvas.EventManager.dispatchEvent(canvas.app.firstBattle.Event.PERS_DAMAGE);
};
canvas.app.firstBattle.view.BattleView.prototype.persTurn = function () {
    var model = canvas.app.firstBattle.model;
    this.persIdle();
    if (model.myTurn && !model.enemyIsDead()) {
        if (!model.spellsUsed && model.persNumAttacks == 3) {
            this.tipView = this.addChild(new canvas.app.firstBattle.view.TipView());
            this.tipView.position.set(-10, 76);
            this.centerView.cDot.startBlicking();
        }
        this.setCenterVisible(true);
    }
};
canvas.app.firstBattle.view.BattleView.prototype.enemyTurn = function () {
    var model = canvas.app.firstBattle.model;
    if (model.enemyIsDead()) {
        canvas.EventManager.dispatchEvent(canvas.app.firstBattle.Event.ENEMY_DEAD);
        this.sndPlay("fightover_victory");
    } else {
        this.enemy.gotoAndPlay("idle");
    }
};
canvas.app.firstBattle.view.BattleView.prototype.sndPlay = function (sndName) {
    canvas.SoundManager.play(canvas.Config.soundsPath + "default/" + sndName + ".mp3");
};
canvas.app.firstBattle.view.CenterView = function () {
    this._mode;
    Object.defineProperty(this, "mode", {
        get: function () {
            return this._mode;
        },
        set: function (value) {
            this._mode = value;
            canvas.EventManager.dispatchEvent(canvas.app.battle.Event.CENTER_CHANGE_MODE, null, value);
        },
    });
    canvas.px.Container.call(this);
    this.controls = new canvas.px.Container();
    this.addChild(this.controls);
    this.cDot = new canvas.app.firstBattle.view.CenterDotView(this);
    this.addChild(this.cDot);
    this.cDot.setIcon(canvas.app.battle.Const.MODE_ATTACK);
    this.cAttack = new canvas.app.firstBattle.view.CenterAttackView(this);
    this.cAttack.activate();
    this.hotkeyShowersCont = new canvas.px.Container();
    this.addChild(this.hotkeyShowersCont);
    this.hotkeyShowersCont.position.set(-Math.round(canvas.app.battle.Const.SPELLS_CONT_WIDTH / 2), -Math.round(canvas.app.battle.Const.SPELLS_CONT_HEIGHT / 2));
    this.hotkeyShowersCont.visible = false;
    this.cSpells = new canvas.app.firstBattle.view.CenterSpellsView(this, this.hotkeyShowersCont);
    this.mode = canvas.app.battle.Const.MODE_ATTACK;
};
canvas.app.firstBattle.view.CenterView.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.firstBattle.view.CenterView.prototype.activeBlock = function (switchFlg) {
    canvas.app.battle.log("cCenter:active_block " + switchFlg);
    this.cAttack.activeBlock(switchFlg);
};
canvas.app.firstBattle.view.CenterView.prototype.applyMask = function (msk) {
    this.cAttack.applyMask(msk);
};
canvas.app.firstBattle.view.CenterView.prototype.changeControlMode = function (withoutSendToServ) {
    if (typeof withoutSendToServ == "undefined") withoutSendToServ = false;
    switch (this.mode) {
        case canvas.app.battle.Const.MODE_ATTACK:
            this.mode = canvas.app.battle.Const.MODE_SPELLS;
            if (!withoutSendToServ) {
                canvas.EventManager.dispatchEvent(canvas.app.battle.Event.EVENT_MY_FUNC, null, [canvas.app.battle.Const.MY_FUNC_CHANGE_MODE, 1, canvas.app.battle.Const.TO_FS_PF_MAGIC]);
            }
            this.cAttack.deactivate();
            break;
        case canvas.app.battle.Const.MODE_SPELLS:
            this.mode = canvas.app.battle.Const.MODE_ATTACK;
            if (!withoutSendToServ) {
                canvas.EventManager.dispatchEvent(canvas.app.battle.Event.EVENT_MY_FUNC, null, [canvas.app.battle.Const.MY_FUNC_CHANGE_MODE, 0, canvas.app.battle.Const.TO_FS_PF_MAGIC]);
                canvas.EventManager.dispatchEvent(canvas.app.battle.Event.EVENT_MY_FUNC, null, [canvas.app.battle.Const.MY_FUNC_CHANGE_MODE, 0, canvas.app.battle.Const.TO_FS_PF_DEFENDED]);
            }
            this.cSpells.deactivate();
            this.hotkeyShowersCont.visible = false;
            break;
        default:
            canvas.app.battle.log('ERR: unknown mode "' + this.mode + '"', 16711680);
            break;
    }
    this.cDot.setIcon(this.mode, withoutSendToServ);
    canvas.app.firstBattle.model.mode = this.mode;
};
canvas.app.firstBattle.view.CenterView.prototype.controlDeactivated = function () {
    switch (this.mode) {
        case canvas.app.battle.Const.MODE_ATTACK:
            this.cAttack.activate();
            break;
        case canvas.app.battle.Const.MODE_SPELLS:
            this.cSpells.activate();
            break;
        default:
            canvas.app.battle.log('ERR: unknown mode "' + this.mode + '"', 16711680);
            break;
    }
};
canvas.app.firstBattle.view.CenterView.prototype.addControl = function (controlSpr) {
    if (controlSpr.parent != this.controls) {
        this.controls.addChild(controlSpr);
    } else {
        canvas.app.battle.log('WARN: "' + controlSpr + '" already contains in controls', 10027008);
    }
};
canvas.app.firstBattle.view.CenterView.prototype.removeControl = function (controlSpr) {
    if (controlSpr.parent == this.controls) {
        this.controls.removeChild(controlSpr);
    } else {
        canvas.app.battle.log('WARN: "' + controlSpr + '" not contains in controls', 10027008);
    }
};
canvas.app.firstBattle.view.CenterView.prototype.buildSpells = function (controlSpr) {
    canvas.app.battle.log("cCenter:build_spells ** ");
    this.cDot.check();
    this.cSpells.buildSpells();
};
canvas.app.firstBattle.view.CenterView.prototype.turnOnKeyCallbacks = function () {
    this.cDot.turnOnKeyCallbacks();
};
canvas.app.firstBattle.view.CenterView.prototype.turnOffKeyCallbacks = function () {
    this.cDot.turnOffKeyCallbacks();
};
canvas.app.firstBattle.view.CenterView.prototype.useEffect = function (effId) {
    canvas.EventManager.dispatchEvent(canvas.app.battle.Event.EVENT_MY_FUNC, null, [canvas.app.battle.Const.MY_FUNC_USE_EFFECT, effId]);
    var conf = canvas.app.battle.model;
    if (conf.memDat[conf.oppId] != null) {
        var mMD = conf.memDat[conf.oppId];
        var curPersFlg = mMD.persFlags;
        this.coolDownStart(curPersFlg);
    }
};
canvas.app.firstBattle.view.CenterView.prototype.useSlotConfirmed = function (slotId) {
    this.cSpells.useSlotConfirmed(slotId);
};
canvas.app.firstBattle.view.CenterView.prototype.setDefCooldown = function () {
    this.cSpells.setDefCooldown();
};
canvas.app.firstBattle.view.CenterView.prototype.spellsUnlockOnError = function (effId) {
    this.cSpells.spellsUnlockOnError(effId);
};
canvas.app.firstBattle.view.CenterView.prototype.coolDownStart = function (rid) {
    if (canvas.app.battle.model.testFlag(rid, canvas.app.battle.Const.FS_PF_STUNNED)) {
        this.cAttack.coolDownStart();
    }
};
canvas.app.firstBattle.view.CenterView.prototype.checkSpells = function (rid) {
    this.cSpells.checkSpells(rid);
};
canvas.app.firstBattle.view.CenterView.prototype.addSpellCoolDown = function (time, withoutNeedTurn) {
    if (typeof withoutNeedTurn == "undefined") withoutNeedTurn = false;
    this.cSpells.addSpellCoolDown(time, withoutNeedTurn);
};
canvas.app.firstBattle.view.CenterView.prototype.turnBowPanel = function (b) {};
canvas.app.firstBattle.view.CenterView.prototype.setVisible = function (value) {
    this.visible = value;
    if (!this.visible) {
        this.cDot.externalMouseOut();
    }
};
canvas.app.firstBattle.view.CenterView.prototype.attackFunc = function (id) {
    canvas.EventManager.dispatchEvent(canvas.app.firstBattle.Event.PERS_ATTACK, null, id);
};
canvas.app.firstBattle.view.CenterView.prototype.blockSwitch = function () {
    canvas.EventManager.dispatchEvent(canvas.app.battle.Event.BLOCK_SWITCH);
};
canvas.app.firstBattle.view.CenterDotView = function (rtLink) {
    canvas.px.Container.call(this);
    this.rt = rtLink;
    this.bg = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_center_dot"));
    this.bg.position.set(-Math.round(this.bg.width / 2), -Math.round(this.bg.height / 2));
    this.bgTop = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_center_dot_top"));
    this.bgTop.position.set(-Math.round(this.bgTop.width / 2), -Math.round(this.bgTop.height / 2));
    this.bgLight = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_center_dot_light"));
    this.bgLight.position.set(this.bg.x, this.bg.y);
    this.bgLight.alpha = 0;
    this.icon = new canvas.px.Sprite(canvas.px.TextureEmpty);
    this.bt = new canvas.px.Graphics();
    this.bt.beginFill(0, 0);
    this.bt.drawCircle(0, 0, 34);
    this.bt.endFill();
    this.bt.interactive = true;
    this.bt.buttonMode = true;
    this.interactive = true;
    this.hint = new canvas.app.view.PxHint(canvas.Translator.getText(1711));
    canvas.EventManager.dispatchEvent(canvas.app.firstBattle.Event.HINT_ADD, null, { target: this, params: new canvas.utils.HintParams(this.hint) });
    this.dotClickTime = 0;
    this.light = new canvas.px.Graphics();
    this.light.beginFill(16777215, 0.3);
    this.light.drawCircle(0, 0, 25);
    this.light.endFill();
    this.light.blendMode = canvas.px.BlendMode.OVERLAY;
    this.addChild(this.bg);
    this.addChild(this.bgLight);
    this.addChild(this.icon);
    this.addChild(this.bt);
    this.rad = Math.round(this.bg.width / 2 - 6);
    this.msk = new canvas.px.Graphics();
    this.msk.beginFill(0, 1);
    this.msk.drawCircle(0, 0, this.rad - 1);
    this.msk.endFill();
    this.har = [
        [this.rad, -this.rad],
        [this.rad, this.rad],
        [-this.rad, this.rad],
        [-this.rad, -this.rad],
        [0, -this.rad],
    ];
    this.shp = new canvas.px.Graphics();
    this.shp.mask = this.msk;
    this.addChild(this.shp);
    this.addChild(this.msk);
    this.addChild(this.bgTop);
};
canvas.app.firstBattle.view.CenterDotView.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.firstBattle.view.CenterDotView.prototype.startBlicking = function () {
    this.blickValue = 0;
    this.interval = setInterval(this.intervalHandler.bind(this), 20);
};
canvas.app.firstBattle.view.CenterDotView.prototype.intervalHandler = function () {
    var val = Math.floor(this.blickValue);
    var val2 = this.blickValue - val;
    this.bgLight.alpha = val % 2 == 0 ? val2 : 1 - val2;
    this.blickValue += 0.05;
    if (this.blickValue > 6) {
        clearInterval(this.interval);
        this.bgLight.alpha = 0;
        this.bgLight.visible = false;
    }
};
canvas.app.firstBattle.view.CenterDotView.prototype.check = function () {
    if (!this.btActivated) {
        this.btActivated = true;
        this.bt.interactive = true;
        this.btIsOn = true;
        this.bt.mouseover = this.handlerBtnOver.bind(this);
        this.bt.mouseout = this.handlerBtnOut.bind(this);
        this.bt.mouseup = this.handlerBtnClick.bind(this);
    }
};
canvas.app.firstBattle.view.CenterDotView.prototype.checkDot = function () {
    var now = Date.now();
    return now >= this.dotClickTime + canvas.app.battle.Const.CENTER_DOT_TIME_CD && canvas.app.battle.model.oppId != 0;
};
canvas.app.firstBattle.view.CenterDotView.prototype.switchDot = function (fl) {
    canvas.app.battle.log("CenterDot: switch, fl=" + fl);
    if (fl) {
        if (!this.btIsOn) {
            this.btIsOn = true;
            this.bt.interactive = true;
            this.bt.mouseover = this.handlerBtnOver.bind(this);
            this.bt.mouseout = this.handlerBtnOut.bind(this);
            this.bt.mouseup = this.handlerBtnClick.bind(this);
        }
    } else {
        if (this.btIsOn && !this.checkDot()) {
            this.btIsOn = false;
            this.bt.interactive = false;
            this.bt.mouseover = null;
            this.bt.mouseout = null;
            this.bt.mouseup = null;
        }
    }
    canvas.utils.HintManager.instance.hide();
};
canvas.app.firstBattle.view.CenterDotView.prototype.handlerBtnOver = function () {
    if (this.light.parent != this) {
        this.addChild(this.light);
    }
};
canvas.app.firstBattle.view.CenterDotView.prototype.handlerBtnOut = function () {
    if (this.light.parent == this) {
        this.removeChild(this.light);
    }
};
canvas.app.firstBattle.view.CenterDotView.prototype.handlerBtnClick = function () {
    this.handlerBtnOut();
    var curTime = Date.now();
    this.dotClickTime = curTime;
    this.rt.changeControlMode();
    this.switchDot(true);
    this.shp.clear();
    this.hint.text = canvas.Translator.getText(canvas.app.firstBattle.model.mode == canvas.app.battle.Const.MODE_ATTACK ? 1711 : 1712);
    canvas.app.firstBattle.model.spellsUsed = true;
};
canvas.app.firstBattle.view.CenterDotView.prototype.externalMouseOut = function () {
    this.handlerBtnOut();
};
canvas.app.firstBattle.view.CenterDotView.prototype.setIcon = function (mode, withoutSendToServ) {
    switch (mode) {
        case canvas.app.battle.Const.MODE_ATTACK:
        case canvas.app.battle.Const.MODE_SPELLS:
            this.icon.texture = canvas.ResourceLoader.getImage("ui", "battle_center_icon_" + (mode == canvas.app.battle.Const.MODE_ATTACK ? "1" : !withoutSendToServ ? "2" : "3"));
            this.icon.x = -Math.round(this.icon.width / 2);
            this.icon.y = -Math.round(this.icon.height / 2);
            break;
        default:
            canvas.app.battle.log('WARN: unknown mode "' + mode + '"', 10027008);
            break;
    }
};
canvas.app.firstBattle.view.CenterDotView.prototype.turnOnKeyCallbacks = function () {
    this.initKeyCallbacks(true);
};
canvas.app.firstBattle.view.CenterDotView.prototype.turnOffKeyCallbacks = function () {
    this.initKeyCallbacks(false);
};
canvas.app.firstBattle.view.CenterDotView.prototype.initKeyCallbacks = function (isOn) {
    if (isOn && canvas.app.battle.model.hasSpells) {
        canvas.EventManager.addEventListener(canvas.Event.STAGE_KEY_DOWN, null, this.handlerKey, this);
    } else {
        canvas.EventManager.removeEventListener(canvas.Event.STAGE_KEY_DOWN, null, this.handlerKey, this);
    }
};
canvas.app.firstBattle.view.CenterDotView.prototype.handlerKey = function (event) {
    if (event.params.globalKeyCode == canvas.Const.TAB && canvas.app.battle.model.centerVisible && canvas.app.battle.model.hasSpells) {
        this.handlerBtnClick();
    }
};
canvas.app.firstBattle.view.CenterClsView = function () {
    canvas.px.Container.call(this);
    this.showVals = [0.47, 0.67, 1];
    this.hideVals = [0.67, 0.47, 0.4];
};
canvas.app.firstBattle.view.CenterClsView.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.firstBattle.view.CenterClsView.prototype.activate = function () {
    this.rt.addControl(this);
    this.scale.set(0.4, 0.4);
    this.frameIndex = 0;
    canvas.EventManager.addEventListener(canvas.app.firstBattle.Event.ENTER_FRAME, null, this.handlerShow, this);
};
canvas.app.firstBattle.view.CenterClsView.prototype.deactivate = function () {
    this.scale.set(1, 1);
    this.frameIndex = 0;
    canvas.EventManager.addEventListener(canvas.app.firstBattle.Event.ENTER_FRAME, null, this.handlerHide, this);
};
canvas.app.firstBattle.view.CenterClsView.prototype.handlerShow = function () {
    this.scale.set(this.showVals[this.frameIndex]);
    if (this.frameIndex < this.showVals.length - 1) {
        this.frameIndex++;
    } else {
        canvas.EventManager.removeEventListener(canvas.app.firstBattle.Event.ENTER_FRAME, null, this.handlerShow, this);
    }
};
canvas.app.firstBattle.view.CenterClsView.prototype.handlerHide = function () {
    this.scale.set(this.hideVals[this.frameIndex], this.hideVals[this.frameIndex]);
    if (this.frameIndex < this.showVals.length - 1) {
        this.frameIndex++;
    } else {
        canvas.EventManager.removeEventListener(canvas.app.firstBattle.Event.ENTER_FRAME, null, this.handlerHide, this);
        this.rt.removeControl(this);
        this.rt.controlDeactivated();
    }
};
canvas.app.firstBattle.view.CenterAttackView = function (rtLink) {
    canvas.app.firstBattle.view.CenterClsView.call(this);
    this.isCooldown = false;
    this.rt = rtLink;
    this.rad1 = 25;
    this.rad2 = 105;
    this.bg = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_center"));
    this.bgGrey = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_center_grey"));
    this.bg.x = this.bgGrey.x = -Math.round(this.bg.width / 2);
    this.bg.y = this.bgGrey.y = -Math.round(this.bg.height / 2);
    this.bgMask = new canvas.px.Graphics();
    this.setBgMask(this.rad2);
    this.bg.mask = this.bgMask;
    this.bladeUp = new canvas.app.firstBattle.view.CenterBladeView(this.rt, 9, -41, -55);
    this.bladeMid = new canvas.app.firstBattle.view.CenterBladeView(this.rt, 39, -11, 0);
    this.bladeBot = new canvas.app.firstBattle.view.CenterBladeView(this.rt, 31, 28, 55);
    this.sectorUp = new canvas.app.firstBattle.view.CenterSectorView(0, 0, -60, canvas.app.battle.Const.TOP_ATTACK_ID, this.bladeUp, this.rt.attackFunc, canvas.Translator.getText(33), canvas.Translator.getText(60));
    this.sectorMid = new canvas.app.firstBattle.view.CenterSectorView(0, 0, 0, canvas.app.battle.Const.MIDDLE_ATTACK_ID, this.bladeMid, this.rt.attackFunc, canvas.Translator.getText(34), canvas.Translator.getText(61));
    this.sectorBot = new canvas.app.firstBattle.view.CenterSectorView(0, 0, 60, canvas.app.battle.Const.BOTTOM_ATTACK_ID, this.bladeBot, this.rt.attackFunc, canvas.Translator.getText(35), canvas.Translator.getText(62));
    this.blockOn = new canvas.px.Sprite(canvas.ResourceLoader.getImage("locale", "battle_center_block1"));
    this.blockOn.position.set(-62, -22);
    this.blockOn.visible = false;
    this.blockOff = new canvas.px.Sprite(canvas.ResourceLoader.getImage("locale", "battle_center_block2"));
    this.blockOff.position.set(-62, -22);
    this.blockBtn = new canvas.px.Graphics();
    this.blockBtn.position.set(-62, -22);
    this.blockBtn.beginFill(0, 0);
    this.blockBtn.drawRect(0, 0, 18, 44);
    this.blockBtn.endFill();
    this.blockBtn.interactive = true;
    this.blockBtn.buttonMode = true;
    canvas.EventManager.dispatchEvent(canvas.app.firstBattle.Event.HINT_ADD, null, { target: this.blockBtn, params: new canvas.utils.HintParams(new canvas.app.view.PxHint(canvas.Translator.getText(36), canvas.Translator.getText(63))) });
    this.blockBtn.click = this.handlerBlockClick.bind(this);
    this.addChild(this.bgGrey);
    this.addChild(this.bg);
    this.addChild(this.bgMask);
    this.addChild(this.bladeUp);
    this.addChild(this.bladeMid);
    this.addChild(this.bladeBot);
    this.addChild(this.sectorUp);
    this.addChild(this.sectorMid);
    this.addChild(this.sectorBot);
    this.addChild(this.blockOn);
    this.addChild(this.blockOff);
    this.addChild(this.blockBtn);
};
canvas.app.firstBattle.view.CenterAttackView.prototype = Object.create(canvas.app.firstBattle.view.CenterClsView.prototype);
canvas.app.firstBattle.view.CenterAttackView.prototype.handlerBlockClick = function () {
    canvas.EventManager.dispatchEvent(canvas.app.firstBattle.Event.BLOCK_CHANGE);
};
canvas.app.firstBattle.view.CenterAttackView.prototype.activeBlock = function (switchFlg) {
    this.blockOn.visible = switchFlg;
    this.blockOff.visible = !switchFlg;
};
canvas.app.firstBattle.view.CenterAttackView.prototype.applyMask = function (msk) {
    var bool_UP = (msk & 1) == 1;
    var bool_MID = (msk & 2) >> 1 == 1;
    var bool_BOT = (msk & 4) >> 2 == 1;
    this.sectorUp.visible = bool_UP;
    this.bladeUp.visible = bool_UP;
    this.sectorMid.visible = bool_MID;
    this.bladeMid.visible = bool_MID;
    this.sectorBot.visible = bool_BOT;
    this.bladeBot.visible = bool_BOT;
};
canvas.app.firstBattle.view.CenterAttackView.prototype.setBgMask = function (rad) {
    this.bgMask.clear();
    this.bgMask.beginFill(255, 1);
    this.bgMask.drawCircle(0, 0, rad);
    this.bgMask.endFill();
};
canvas.app.firstBattle.view.CenterAttackView.prototype.coolDownStart = function () {};
canvas.app.firstBattle.view.CenterAttackView.prototype.setCooldown = function (b) {};
canvas.app.firstBattle.view.CenterAttackView.prototype.refreshBgMask = function () {
    if (Date.now() - canvas.app.battle.model.attackTime > 2050) {
        this.setBgMask(this.rad2);
        this.sectorUp.visible = this.bladeUp.visible = true;
        this.sectorMid.visible = this.bladeMid.visible = true;
        this.sectorBot.visible = this.bladeBot.visible = true;
        this.applyMask(canvas.app.battle.model.oppMask);
        if (this.rt.mode == canvas.app.battle.Const.MODE_ATTACK) {
            this.rt.cDot.switchDot(true);
        }
        if (this.mInterval) {
            clearInterval(this.mInterval);
            this.setCooldown(false);
        }
        this.rt.turnBowPanel(true);
    } else {
        var rad = this.rad1 + ((this.rad2 - this.rad1) * (Date.now() - this.vTime)) / this.sTime;
        this.setBgMask(rad);
    }
};
canvas.app.firstBattle.view.CenterBladeView = function (rt, xx, yy, rr) {
    canvas.px.Container.call(this);
    this.mv = [0, 2.7, 4.8, 6.3, 7.2, 7.5, 7.2, 6.3, 4.8, 2.7];
    this.mvLen = 10;
    this.rt = rt;
    this.position.set(xx, yy);
    this.rotation = canvas.Functions.degToRad(rr);
    this.bmp = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_center_blade"));
    this.addChild(this.bmp);
};
canvas.app.firstBattle.view.CenterBladeView.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.firstBattle.view.CenterBladeView.prototype.handlerFrame = function () {
    this.mvIndex++;
    if (this.mvIndex == this.mvLen) {
        this.mvIndex = 0;
    }
    this.bmp.x = this.mv[this.mvIndex];
};
canvas.app.firstBattle.view.CenterBladeView.prototype.over = function () {
    this.mvIndex = 0;
    canvas.EventManager.addEventListener(canvas.app.firstBattle.Event.ENTER_FRAME, null, this.handlerFrame, this);
};
canvas.app.firstBattle.view.CenterBladeView.prototype.out = function () {
    this.bmp.x = 0;
    canvas.EventManager.removeEventListener(canvas.app.firstBattle.Event.ENTER_FRAME, null, this.handlerFrame, this);
};
canvas.app.firstBattle.view.CenterSectorView = function (xx, yy, rr, id, bladeLnk, attackFunc, str, hotkey) {
    canvas.px.Graphics.call(this);
    this.position.set(xx, yy);
    this.rotation = canvas.Functions.degToRad(rr);
    this.r1 = 28;
    this.r2 = 76;
    this.ang = Math.PI / 3;
    this.shape = new canvas.px.Graphics();
    this.shape.interactive = true;
    this.addChild(this.shape);
    this.drawSector();
    this.bladeId = id;
    this.bladeLnk = bladeLnk;
    this.attackFunc = attackFunc;
    this.interactive = true;
    this.buttonMode = true;
    this.mouseover = this.handlerOver.bind(this);
    this.mouseup = this.handlerClick.bind(this);
    canvas.EventManager.dispatchEvent(canvas.app.firstBattle.Event.HINT_ADD, null, { target: this.shape, params: new canvas.utils.HintParams(new canvas.app.view.PxHint(str)) });
};
canvas.app.firstBattle.view.CenterSectorView.prototype = Object.create(canvas.px.Graphics.prototype);
canvas.app.firstBattle.view.CenterSectorView.prototype.drawSector = function () {
    this.shape.moveTo(this.r1 * Math.sin(this.ang), this.r1 * Math.cos(this.ang));
    this.shape.beginFill(0, 0);
    this.shape.lineTo(this.r2 * Math.sin(this.ang), this.r2 * Math.cos(this.ang));
    this.shape.lineTo(this.r2 * Math.sin((this.ang * 3) / 2), this.r2 * Math.cos((this.ang * 3) / 2));
    this.shape.lineTo(this.r2 * Math.sin(this.ang * 2), this.r2 * Math.cos(this.ang * 2));
    this.shape.lineTo(this.r1 * Math.sin(this.ang * 2), this.r1 * Math.cos(this.ang * 2));
    this.shape.lineTo(this.r1 * Math.sin((this.ang * 3) / 2), this.r1 * Math.cos((this.ang * 3) / 2));
    this.endFill();
};
canvas.app.firstBattle.view.CenterSectorView.prototype.handlerOver = function () {
    this.bladeLnk.over();
    this.mouseout = this.handlerOut.bind(this);
};
canvas.app.firstBattle.view.CenterSectorView.prototype.handlerOut = function () {
    this.bladeLnk.out();
    this.mouseout = null;
};
canvas.app.firstBattle.view.CenterSectorView.prototype.handlerClick = function () {
    if (this.attackFunc) {
        this.attackFunc(this.bladeId);
    }
};
canvas.app.firstBattle.view.CenterSpellsView = function (rtLink, hotkeyShowersCont) {
    canvas.app.firstBattle.view.CenterClsView.call(this);
    this.rt = rtLink;
    this.hotkeyShowersCont = hotkeyShowersCont;
    this.hotkeysPoints = [
        new canvas.px.Point(69, 38),
        new canvas.px.Point(91, 45),
        new canvas.px.Point(104, 62),
        new canvas.px.Point(104, 84),
        new canvas.px.Point(90, 101),
        new canvas.px.Point(69, 109),
        new canvas.px.Point(48, 102),
        new canvas.px.Point(35, 85),
        new canvas.px.Point(34, 62),
        new canvas.px.Point(47, 45),
    ];
    this.slotsPos = [
        [-18, -78],
        [17, -67],
        [38, -36],
        [39, 0],
        [17, 29],
        [-18, 41],
        [-53, 29],
        [-75, 0],
        [-75, -36],
        [-53, -66],
    ];
    this.spellsCont = new canvas.px.Container();
    this.tgBmp = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_center_spells"));
    this.tgBmp.position.set(-Math.round(canvas.app.battle.Const.SPELLS_CONT_WIDTH / 2), -Math.round(canvas.app.battle.Const.SPELLS_CONT_HEIGHT / 2));
    this.addChild(this.spellsCont);
    this.addChild(this.tgBmp);
    this.slots = {};
};
canvas.app.firstBattle.view.CenterSpellsView.prototype = Object.create(canvas.app.firstBattle.view.CenterClsView.prototype);
canvas.app.firstBattle.view.CenterSpellsView.prototype.buildSpells = function () {
    canvas.Functions.destroyChildren(this.spellsCont);
    this.removeAllSpellHotkeyShowers();
    canvas.Functions.destroyChildren(this.tgBmp);
    var slot_id;
    var obj;
    var pos;
    for (slot_id in canvas.app.firstBattle.model.spells) {
        obj = canvas.app.firstBattle.model.spells[slot_id];
        pos = this.slotsPos[parseInt(slot_id) - 1];
        if (pos) {
            if (this.slots[slot_id]) {
                this.slots[slot_id].remove();
                delete this.slots[slot_id];
            }
            this.slots[slot_id] = new canvas.app.firstBattle.view.CenterSpellItemRenderer(this, slot_id, pos, obj);
        } else {
            canvas.app.battle.log("ERR: positions for slotId=" + slot_id + " is null", 16711680);
        }
    }
    for (var spellIndex = 0; spellIndex < canvas.app.battle.Const.CENTER_SPELL_ITEMS_COUNT; spellIndex++) {
        if (!this.slots[spellIndex + 1]) {
            pos = this.slotsPos[spellIndex];
            var empty = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_center_spell_empty"));
            this.tgBmp.addChild(empty);
            empty.position.set(pos[0] + Math.round(canvas.app.battle.Const.SPELLS_CONT_WIDTH / 2) - 1, pos[1] + Math.round(canvas.app.battle.Const.SPELLS_CONT_HEIGHT / 2) - 1);
        }
    }
};
canvas.app.firstBattle.view.CenterSpellsView.prototype.useSpellItem = function (slot_id) {
    canvas.EventManager.dispatchEvent(canvas.app.firstBattle.Event.PERS_ATTACK_SPELL, null, slot_id);
};
canvas.app.firstBattle.view.CenterSpellsView.prototype.useSlotConfirmed = function (slot_id) {
    var obj = canvas.app.battle.model.spells[slot_id];
    var now = Date.now();
    var ftime = canvas.app.battle.model.spells[slot_id]["cdTime"] * 1e3 + now;
    for (var g in this.slots) {
        if (canvas.app.battle.model.spells[g]["cdGripId"] == obj["cdGripId"]) {
            this.slots[g].cooldownStart(now, ftime);
        } else {
            this.slots[g].cooldownStart(now, now + canvas.app.battle.Const.DEFAULT_SPELLS_COOLDOWN);
        }
    }
    this.unlock();
};
canvas.app.firstBattle.view.CenterSpellsView.prototype.setDefCooldown = function () {
    var now = Date.now();
    var ftime = now + canvas.app.battle.Const.DEFAULT_SPELLS_COOLDOWN;
    for (var g in this.slots) {
        this.slots[g].cooldownStart(now, ftime);
    }
};
canvas.app.firstBattle.view.CenterSpellsView.prototype.spellsUnlockOnError = function (eff_id) {
    canvas.app.battle.log("CenterSpellsView: spellsUnlockOnError " + eff_id);
    for (var g in canvas.app.battle.model.spells) {
        if (canvas.app.battle.model.spells[g]["effId"] == eff_id) {
            canvas.app.battle.log("spells unlocked on error");
            this.unlock();
            break;
        }
    }
};
canvas.app.firstBattle.view.CenterSpellsView.prototype.restoreCooldowns = function () {
    for (var g in this.slots) this.slots[g].restoreCooldown();
};
canvas.app.firstBattle.view.CenterSpellsView.prototype.switchDot = function (fl) {
    this.rt.cDot.switchDot(fl);
};
canvas.app.firstBattle.view.CenterSpellsView.prototype.checkSpells = function (rid) {
    for (var g1 in this.slots) {
        this.slots[g1].checkSpells(rid);
    }
};
canvas.app.firstBattle.view.CenterSpellsView.prototype.addSpellCoolDown = function (time, without_need_turn) {
    if (typeof without_need_turn == "undefined") without_need_turn = false;
    for (var g1 in this.slots) {
        this.slots[g1].addSpellCoolDown(time, true, without_need_turn);
    }
};
canvas.app.firstBattle.view.CenterSpellsView.prototype.unlock = function () {
    this.locked = false;
};
canvas.app.firstBattle.view.CenterSpellsView.prototype.createSpellHotkeyShowers = function () {
    var shower;
    var showerPoint;
    var hotkeyText;
    var spellItem;
    for (var spellIndex = 0; spellIndex < canvas.app.battle.Const.CENTER_SPELL_ITEMS_COUNT; spellIndex++) {
        hotkeyText = "";
        spellItem = this.slots[spellIndex + 1];
        if (spellItem) {
            hotkeyText = spellItem.getHotkeyText();
        }
        showerPoint = this.hotkeysPoints[spellIndex];
        shower = new canvas.app.firstBattle.view.CenterSpellHotkeyRenderer(hotkeyText);
        this.hotkeyShowersCont.addChild(shower);
        shower.x = showerPoint.x;
        shower.y = showerPoint.y;
    }
};
canvas.app.firstBattle.view.CenterSpellsView.prototype.removeSpellHotkeyShower = function (shower) {
    var len = this.hotkeyShowersCont.children.length;
    for (var i = 0; i < len; i++) {
        if (this.hotkeyShowersCont.getChildAt(i) == shower) {
            this.hotkeyShowersCont.removeChildAt(i);
            break;
        }
    }
};
canvas.app.firstBattle.view.CenterSpellsView.prototype.removeAllSpellHotkeyShowers = function () {
    canvas.Functions.destroyChildren(this.hotkeyShowersCont);
};
canvas.app.firstBattle.view.CenterSpellHotkeyRenderer = function (hotkeyText) {
    canvas.px.Container.call(this);
    this.bg = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_center_dot"));
    this.bg.width = 16;
    this.bg.height = 16;
    this.addChild(this.bg);
    this.textTF = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_9, 16509576, this.bg.width, this.bg.height, "center");
    this.addChild(this.textTF);
    this.textTF.position.set(0, 2);
    this.textTF.text = hotkeyText;
};
canvas.app.firstBattle.view.CenterSpellHotkeyRenderer.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.firstBattle.view.CenterSpellItemRenderer = function (rt, slotId, pos, obj) {
    canvas.px.Container.call(this);
    this.spellsHotkeys = ["Q", "W", "E", "R", "T", "A", "S", "D", "F", "G"];
    this.spellsHotkeyCodes = [canvas.Const.KEYS.Q, canvas.Const.KEYS.W, canvas.Const.KEYS.E, canvas.Const.KEYS.R, canvas.Const.KEYS.T, canvas.Const.KEYS.A, canvas.Const.KEYS.S, canvas.Const.KEYS.D, canvas.Const.KEYS.F, canvas.Const.KEYS.G];
    this.rt = rt;
    this.slotId = slotId;
    this.obj = obj;
    this.position.set(pos[0] - 1, pos[1] - 1);
    var rad = 19;
    this.bmpMsk = new canvas.px.Graphics();
    this.bmpMsk.beginFill(0, 0);
    this.bmpMsk.drawCircle(rad, rad, rad);
    this.bmpMsk.endFill();
    this.bmp = new canvas.px.Sprite(canvas.px.TextureEmpty);
    this.bmp.mask = this.bmpMsk;
    this.bmp.scale.set(38 / 60, 38 / 60);
    this.light = new canvas.px.Graphics();
    this.light.beginFill(16777215, 0.3);
    this.light.drawCircle(rad, rad, rad);
    this.light.endFill();
    this.light.visible = false;
    this.light.blendMode = canvas.px.BlendMode.OVERLAY;
    this.btn = new canvas.px.Graphics();
    this.btn.beginFill(0, 0);
    this.btn.drawCircle(rad, rad, rad);
    this.btn.endFill();
    this.btn.buttonMode = true;
    this.btn.interactive = true;
    this.btn.mouseover = this.handlerOver.bind(this);
    this.btn.click = this.handlerClick.bind(this);
    this.cooldown = new canvas.app.firstBattle.view.CenterSpellItemCdRenderer(this);
    this.addChild(this.bmp);
    this.addChild(this.bmpMsk);
    this.addChild(this.light);
    this.addChild(this.btn);
    this.rt.spellsCont.addChild(this);
    this.addChild(this.cooldown);
    if (obj["cdTime"] > 0) {
        if (obj["cdLeft"] > 0) {
            var now = Date.now();
            this.cooldown.activate(now - (obj["cdTime"] - obj["cdLeft"]), 1e3 * obj["cdLeft"] + now);
        }
    }
    this.initKeyCallbacks();
    canvas.EventManager.dispatchEvent(canvas.app.firstBattle.Event.HINT_ADD, null, { target: this, params: new canvas.utils.HintParams(new canvas.app.view.PxHint(this.obj["title"])) });
    this.bmp.texture = canvas.ResourceLoader.getImage("ui", this.obj.picture);
    this.interactive = true;
};
canvas.app.firstBattle.view.CenterSpellItemRenderer.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.firstBattle.view.CenterSpellItemRenderer.prototype.handlerClick = function () {
    if (this.cooldown.active()) {
        return;
    }
    this.rt.useSpellItem(this.slotId);
    this.cooldown.showTxt();
};
canvas.app.firstBattle.view.CenterSpellItemRenderer.prototype.handlerOver = function () {
    this.btn.mouseout = this.handlerOut.bind(this);
    this.light.visible = true;
    if (this.cooldown.active()) {
        this.cooldown.showTxt();
    }
};
canvas.app.firstBattle.view.CenterSpellItemRenderer.prototype.handlerOut = function () {
    this.light.visible = false;
    this.btn.mouseout = null;
    if (this.cooldown.active()) {
        this.cooldown.hideTxt();
    }
};
canvas.app.firstBattle.view.CenterSpellItemRenderer.prototype.cooldownStart = function (now, ftime) {
    if (this.cooldown.parent != this) {
        this.addChild(this.cooldown);
    }
    this.cooldown.activate(now, ftime);
};
canvas.app.firstBattle.view.CenterSpellItemRenderer.prototype.restoreCooldown = function () {
    this.cooldown.restore();
};
canvas.app.firstBattle.view.CenterSpellItemRenderer.prototype.cooldownCancel = function () {
    if (this.cooldown.parent == this) {
        this.removeChild(this.cooldown);
    }
    if (canvas.app.battle.model.oppId != 0) {
        this.rt.switchDot(true);
    }
};
canvas.app.firstBattle.view.CenterSpellItemRenderer.prototype.remove = function () {
    if (this.parent == this.rt.spellsCont) {
        this.rt.spellsCont.removeChild(this);
    } else {
        canvas.app.battle.log("ERR: this slot is not contains", 16711680);
    }
    this.rt = null;
};
canvas.app.firstBattle.view.CenterSpellItemRenderer.prototype.checkSpells = function (rid) {
    if (this.cooldown.forStep()) {
        this.cooldown.cooldownDone();
        if (canvas.app.battle.model.testFlag(rid, canvas.app.battle.Const.FS_PF_STUNNED)) {
            this.addSpellCoolDown(3050);
        }
    }
};
canvas.app.firstBattle.view.CenterSpellItemRenderer.prototype.addSpellCoolDown = function (time, from_dot, without_need_turn) {
    if (typeof from_dot == "undefined") from_dot = false;
    if (typeof without_need_turn == "undefined") without_need_turn = false;
    var now = Date.now();
    if (!from_dot) {
        if (now - canvas.app.battle.model.attackTime < time) {
            this.cooldownStart(now, canvas.app.battle.model.attackTime + time);
        }
    } else {
        var abil_flgs = canvas.app.battle.model.abilsFlags[canvas.app.battle.model.spells[this.slotId].effId];
        if (without_need_turn && canvas.app.battle.model.testFlag(abil_flgs, canvas.app.battle.Const.FS_PEF_PASSTURN)) time = 12e5;
        this.cooldownStart(now, now + time);
    }
};
canvas.app.firstBattle.view.CenterSpellItemRenderer.prototype.initKeyCallbacks = function () {
    canvas.EventManager.addEventListener(canvas.Event.STAGE_KEY_DOWN, null, this.handlerKey, this);
};
canvas.app.firstBattle.view.CenterSpellItemRenderer.prototype.handlerKey = function (event) {
    if (canvas.app.battle.model.centerMode == canvas.app.battle.Const.MODE_ATTACK) return;
    if (event.params.globalKeyCode == this.getHotkeyCode()) {
        this.handlerClick();
    }
};
canvas.app.firstBattle.view.CenterSpellItemRenderer.prototype.getHotkeyCode = function () {
    return this.spellsHotkeyCodes[this.slotId - 1];
};
canvas.app.firstBattle.view.CenterSpellItemRenderer.prototype.getHotkeyText = function () {
    return this.spellsHotkeys[this.slotId - 1];
};
canvas.app.firstBattle.view.CenterSpellItemCdRenderer = function (rt) {
    canvas.px.Container.call(this);
    this.rt = rt;
    this.realFT = -1;
    this.realST = -1;
    this.forStepFl = false;
    this.rad = 19;
    var rad = this.rad;
    this.har = [
        [rad, -rad],
        [rad, rad],
        [-rad, rad],
        [-rad, -rad],
        [0, -rad],
    ];
    this.shp = new canvas.px.Graphics();
    this.shp.position.set(rad, rad);
    this.msk = new canvas.px.Graphics();
    this.msk.position.set(rad, rad);
    this.msk.beginFill(0, 1);
    this.msk.drawCircle(0, 0, rad - 1);
    this.msk.endFill();
    this.tf = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_9_STROKE, 16777215, 24, 16, "center");
    this.tf.position.set(rad - 12, rad - 8);
    this.shp.mask = this.msk;
    this.addChild(this.shp);
    this.addChild(this.msk);
};
canvas.app.firstBattle.view.CenterSpellItemCdRenderer.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.firstBattle.view.CenterSpellItemCdRenderer.prototype.restore = function () {
    if (this.realFT > 0) {
        this.activate(0, 0);
    }
};
canvas.app.firstBattle.view.CenterSpellItemCdRenderer.prototype.activate = function (now, ftime_new) {
    if (ftime_new - now >= 12e5) {
        this.realFT = this.ftime;
        this.realST = this.stime;
    } else if (this.realFT > 0) {
        now = this.realST;
        ftime_new = this.realFT;
        this.realFT = -1;
        this.activated = false;
    }
    if (this.activated) {
        var dtime = this.ftime - now;
        var dtime_new = ftime_new - now;
        if (dtime < dtime_new) {
            this.stime = now;
            this.ftime = ftime_new;
        }
    } else {
        this.forStepFl = ftime_new - now == canvas.app.battle.Const.DEFAULT_SPELLS_COOLDOWN || ftime_new - now > 1e6;
        this.activated = true;
        this.stime = now;
        this.ftime = ftime_new;
        canvas.EventManager.addEventListener(canvas.app.firstBattle.Event.ENTER_FRAME, null, this.handlerFrame, this);
    }
};
canvas.app.firstBattle.view.CenterSpellItemCdRenderer.prototype.handlerFrame = function () {
    try {
        var now = Date.now();
        if (this.har && now < this.ftime) {
            var pc;
            if (this.ftime - this.stime > 1e6) {
                pc = 100;
                this.ftime = now + 12e5;
                this.tf.text = "";
            } else {
                this.tf.text = Math.round((this.ftime - now) / 1e3);
                pc = ((now - this.stime) / (this.ftime - this.stime)) * 100;
            }
            this.shp.clear();
            this.shp.beginFill(0, 0.6);
            this.shp.moveTo(0, 0);
            var rr = pc * (360 / 100 / 57.2958) - 1.57;
            var xx = this.rad * Math.cos(rr);
            var yy = this.rad * Math.sin(rr);
            this.shp.lineTo(xx, yy);
            var i = Math.round((pc % 100) / 25);
            while (i < this.har.length) {
                this.shp.lineTo(this.har[i][0], this.har[i][1]);
                i++;
            }
            this.shp.endFill();
        } else {
            this.cooldownDone();
        }
    } catch (e) {}
};
canvas.app.firstBattle.view.CenterSpellItemCdRenderer.prototype.cooldownDone = function () {
    this.activated = this.forStepFl = false;
    canvas.EventManager.removeEventListener(canvas.app.firstBattle.Event.ENTER_FRAME, null, this.handlerFrame, this);
    this.hideTxt();
    this.rt.cooldownCancel();
};
canvas.app.firstBattle.view.CenterSpellItemCdRenderer.prototype.showTxt = function () {
    if (this.tf.parent != this) {
        this.addChild(this.tf);
    }
};
canvas.app.firstBattle.view.CenterSpellItemCdRenderer.prototype.hideTxt = function () {
    if (this.tf.parent == this) {
        this.removeChild(this.tf);
    }
};
canvas.app.firstBattle.view.CenterSpellItemCdRenderer.prototype.active = function () {
    return this.activated;
};
canvas.app.firstBattle.view.CenterSpellItemCdRenderer.prototype.setActive = function (b) {
    this.activated = b;
};
canvas.app.firstBattle.view.CenterSpellItemCdRenderer.prototype.forStep = function () {
    return this.forStepFl;
};
canvas.app.firstBattle.view.CenterSpellItemCdRenderer.prototype.setForStep = function (b) {
    this.forStepFl = b;
};
canvas.app.firstBattle.view.ComboHint = function () {
    canvas.px.Container.call(this);
    this.image = new canvas.px.Sprite(canvas.ResourceLoader.getImage("locale", "battle_combo_hint"));
    this.image.scale.set(0, 0);
    this.image.anchor.set(0.5, 0.5);
    this.addChild(this.image);
    this.state = false;
    this.delayIndex = 0;
    canvas.EventManager.addEventListener(canvas.app.firstBattle.Event.ENTER_FRAME, null, this.frameHandler, this);
};
canvas.app.firstBattle.view.ComboHint.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.firstBattle.view.ComboHint.prototype.frameHandler = function () {
    if (this.state) {
        if (this.delayIndex > 15) {
            if (this.image.alpha <= 0) {
                this.finish();
            } else {
                this.image.y += 4;
                this.image.alpha -= 0.15;
            }
        } else {
            this.delayIndex++;
        }
    } else {
        if (this.image.scale.x >= 1) {
            this.state = true;
            this.image.scale.set(1, 1);
        } else {
            var targetX = this.image.scale.x + 0.1;
            targetX = targetX > 1 ? 1 : targetX;
            this.image.scale.set(targetX, targetX);
        }
    }
};
canvas.app.firstBattle.view.ComboHint.prototype.finish = function () {
    canvas.EventManager.removeEventListener(canvas.app.firstBattle.Event.ENTER_FRAME, null, this.frameHandler, this);
    this.parent.removeChild(this);
    this.destroy({ children: true });
};
canvas.app.firstBattle.view.DmgFly = function (par, cnt) {
    canvas.px.Container.call(this);
    this.ARR_Y = [
        70,
        61.3,
        54.55,
        49.7,
        46.8,
        45.85,
        45.85,
        45.7,
        45.6,
        45.35,
        44.95,
        44.65,
        44.15,
        43.6,
        43,
        42.3,
        41.6,
        40.8,
        39.85,
        38.95,
        37.9,
        36.8,
        35.65,
        34.45,
        33.1,
        31.75,
        30.3,
        28.75,
        27.2,
        25.45,
        23.75,
        21.95,
        20.1,
        18.1,
        16.15,
        14.05,
        11.85,
        9.6,
        7.3,
        4.95,
        2.5,
        0,
    ];
    this.ARR_A = [
        0,
        0.36,
        0.64,
        0.84,
        0.96,
        1,
        1,
        1,
        0.99,
        0.99,
        0.98,
        0.97,
        0.96,
        0.95,
        0.94,
        0.92,
        0.91,
        0.89,
        0.87,
        0.85,
        0.83,
        0.8,
        0.78,
        0.75,
        0.72,
        0.69,
        0.66,
        0.63,
        0.59,
        0.55,
        0.52,
        0.48,
        0.44,
        0.39,
        0.35,
        0.3,
        0.26,
        0.21,
        0.16,
        0.11,
        0.05,
        0,
    ];
    if (canvas.app.battle.Const.PERS_POS_X[par.tar]) {
        this.x = canvas.app.battle.Const.PERS_POS_X[par.tar];
        this.dX = this.x + Math.floor(Math.random() * 90 - 25) * (par.tar == "pers" ? 1 : -1);
        this.dX_mir = this.x + Math.floor(Math.random() * 40 + 25) * (par.tar == "pers" ? -1 : 1);
        this.whose_dmg = par.tar;
    } else {
        canvas.app.battle.log("DmgFly WARN: dmg_fly, unknown target = " + par.tar, 16711680);
        this.dX = this.x;
    }
    this.y = 20 * cnt + 60;
    this.yy = this.y;
    this.dV = Math.random() * 0.7 + 0.65;
    this.dVx = 0.065;
    var dmg_col;
    var dmg_txt;
    if (par.crit == 1) {
        par.kick = canvas.app.battle.Const.DMG_KICK_CRIT;
    }
    switch (par.kick) {
        case canvas.app.battle.Const.DMG_KICK_DODGE:
            dmg_col = 39168;
            dmg_txt = canvas.Translator.getText(16);
            this.dX = this.x;
            break;
        case canvas.app.battle.Const.DMG_KICK_WOUND:
            dmg_col = 16777215;
            dmg_txt = this.val2str(par.val);
            break;
        case canvas.app.battle.Const.DMG_KICK_CRIT:
            dmg_col = 16711680;
            dmg_txt = this.val2str(par.val);
            break;
        case canvas.app.battle.Const.DMG_KICK_BLOCK:
            dmg_col = 170;
            dmg_txt = canvas.Translator.getText(31);
            this.dX = this.x;
            break;
        case canvas.app.battle.Const.DMG_KICK_CURE:
            dmg_col = 39168;
            dmg_txt = this.val2str(par.val);
            this.dX = this.dX_mir;
            break;
        case canvas.app.battle.Const.DMG_KICK_MANA:
            dmg_col = 4605695;
            dmg_txt = this.val2str(par.val);
            this.dX = this.dX_mir;
            break;
        case canvas.app.battle.Const.DMG_KICK_ABSORB:
            dmg_col = 16776960;
            dmg_txt = canvas.Translator.getText(17) + " " + String(par.val);
            this.dX = this.x;
            break;
        case canvas.app.battle.Const.DMG_KICK_RESIST:
            dmg_col = 16711935;
            dmg_txt = canvas.Translator.getText(18) + " " + String(par.val) + "%";
            this.dX = this.x;
            break;
        case canvas.app.battle.Const.DMG_KICK_IMMUNITY:
            dmg_col = 65535;
            dmg_txt = canvas.Translator.getText(46);
            this.dX = this.x;
            break;
        case canvas.app.battle.Const.DMG_KICK_NOCHANCE:
            dmg_col = 65535;
            dmg_txt = canvas.Translator.getText(47);
            this.dX = this.x;
            break;
        case canvas.app.battle.Const.DMG_KICK_FULLRES:
            dmg_col = 65535;
            dmg_txt = canvas.Translator.getText(18);
            this.dX = this.x;
            break;
        default:
            canvas.app.battle.log("DmgFly WARN: showDMG unknown kick = " + par.kick, 16711680);
    }
    var tf = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_20_BOLD_STROKE, dmg_col, 30, 20, "center");
    tf.text = dmg_txt;
    this.addChild(tf);
    this.dmg_fly_index = 0;
    this.updatePos();
    canvas.EventManager.addEventListener(canvas.app.firstBattle.Event.ENTER_FRAME, null, this.frameHandler, this);
};
canvas.app.firstBattle.view.DmgFly.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.firstBattle.view.DmgFly.prototype.val2str = function (val) {
    if (val > 0) {
        return "+" + String(val);
    }
    return String(val);
};
canvas.app.firstBattle.view.DmgFly.prototype.frameHandler = function () {
    this.dmg_fly_index++;
    if (this.dmg_fly_index < this.ARR_A.length) {
        this.updatePos();
    } else {
        canvas.EventManager.removeEventListener(canvas.app.firstBattle.Event.ENTER_FRAME, null, this.frameHandler, this);
        this.parent.removeChild(this);
        this.destroy({ children: true });
    }
};
canvas.app.firstBattle.view.DmgFly.prototype.updatePos = function () {
    this.y = this.yy + this.ARR_Y[this.dmg_fly_index] * this.dV;
    this.alpha = this.ARR_A[this.dmg_fly_index] * this.dV;
    if (Math.abs(this.x - this.dX) > 1) {
        this.x -= (this.x - this.dX) * this.dVx;
    }
};
canvas.app.firstBattle.view.EffectView = function () {
    canvas.px.Container.call(this);
    this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "inferno_effect")));
    this.interactive = true;
    this.hint = new canvas.app.view.PxHint();
    canvas.EventManager.dispatchEvent(canvas.app.firstBattle.Event.HINT_ADD, null, { target: this, params: new canvas.utils.HintParams(this.hint) });
    this.seconds = 12;
    this.update();
    this.interval = setInterval(this.intervalHandler.bind(this), 1e3);
};
canvas.app.firstBattle.view.EffectView.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.firstBattle.view.EffectView.prototype.update = function () {
    this.hint.text = canvas.Translator.getText(1713, [this.seconds]);
};
canvas.app.firstBattle.view.EffectView.prototype.intervalHandler = function () {
    this.seconds--;
    this.update();
    if (this.seconds < 1) {
        clearInterval(this.interval);
        canvas.EventManager.dispatchEvent(canvas.app.firstBattle.Event.HINT_REMOVE, null, { target: this });
        this.destroy({ children: true });
        return;
    }
    if (this.seconds % 3 == 0) canvas.EventManager.dispatchEvent(canvas.app.firstBattle.Event.PERS_EFFECT_DAMAGE);
};
canvas.app.firstBattle.view.FinishView = function () {
    canvas.px.Container.call(this);
    this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("locale", "victory_win")));
    var sprite = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("locale", "victory_win_title")));
    sprite.position.set(102, 138);
    sprite = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11, 7158057, 256, 100, "center"));
    sprite.position.set(10, 2);
    sprite.text = canvas.Translator.getText(1716);
    sprite.position.set(102, 176);
    var mask = this.addChild(new canvas.px.Mask(150, 28, 0, 0));
    mask.position.set(150, 270);
    mask.interactive = true;
    mask.buttonMode = true;
    mask.click = this.clickHandler.bind(this);
};
canvas.app.firstBattle.view.FinishView.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.firstBattle.view.FinishView.prototype.clickHandler = function () {
    canvas.EventManager.dispatchEvent(canvas.app.firstBattle.Event.FINISH);
};
canvas.app.firstBattle.view.HpMpView = function () {
    canvas.px.Container.call(this);
    this.hpPersFill = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_hp_fill"));
    this.hpPers = new canvas.px.Graphics();
    this.hpPers.beginFill(0, 1);
    this.hpPers.lineStyle(0, 0, 0);
    this.hpPers.drawRect(0, 0, this.hpPersFill.width, this.hpPersFill.height);
    this.hpPers.endFill();
    this.addChild(this.hpPersFill);
    this.addChild(this.hpPers);
    this.hpPersFill.mask = this.hpPers;
    this.hpPersFill.position.set(42, 38);
    this.hpPers.position.set(42, 38);
    this.hpOppFill = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_hp_fill"));
    this.hpOpp = new canvas.px.Graphics();
    this.hpOpp.beginFill(0, 1);
    this.hpOpp.lineStyle(0, 0, 0);
    this.hpOpp.drawRect(0, 0, this.hpOppFill.width, this.hpOppFill.height);
    this.hpOpp.endFill();
    this.addChild(this.hpOppFill);
    this.addChild(this.hpOpp);
    this.hpOppFill.mask = this.hpOpp;
    this.hpOppFill.scale.x = -1;
    this.hpOppFill.position.set(403, 38);
    this.hpOpp.position.set(403, 38);
    this.mpPersFill = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_mp_fill"));
    this.mpPers = new canvas.px.Graphics();
    this.mpPers.beginFill(0, 1);
    this.mpPers.lineStyle(0, 0, 0);
    this.mpPers.drawRect(0, 0, this.mpPersFill.width, this.mpPersFill.height);
    this.mpPers.endFill();
    this.addChild(this.mpPersFill);
    this.addChild(this.mpPers);
    this.mpPersFill.mask = this.mpPers;
    this.mpPersFill.position.set(42, 52);
    this.mpPers.position.set(42, 52);
    this.mpOppFill = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_mp_fill"));
    this.mpOpp = new canvas.px.Graphics();
    this.mpOpp.beginFill(0, 1);
    this.mpOpp.lineStyle(0, 0, 0);
    this.mpOpp.drawRect(0, 0, this.mpOppFill.width, this.mpOppFill.height);
    this.mpOpp.endFill();
    this.addChild(this.mpOppFill);
    this.addChild(this.mpOpp);
    this.mpOppFill.mask = this.mpOpp;
    this.mpOppFill.position.set(275, 52);
    this.mpOpp.position.set(403, 52);
    this.hpPersText = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_9, 16770533, 129, 16, "center");
    this.hpPersText.position.set(42, 38);
    this.addChild(this.hpPersText);
    this.mpPersText = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_9, 16770533, 129, 16, "center");
    this.mpPersText.position.set(42, 52);
    this.addChild(this.mpPersText);
    this.hpOppText = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_9, 16770533, 129, 16, "center");
    this.hpOppText.position.set(275, 38);
    this.addChild(this.hpOppText);
    this.mpOppText = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_9, 16770533, 129, 16, "center");
    this.mpOppText.position.set(275, 52);
    this.addChild(this.mpOppText);
    this.setHpPers(0, 0);
    this.setMpPers(0, 0);
    this.setHpOpp(0, 0);
    this.setMpOpp(0, 0);
};
canvas.app.firstBattle.view.HpMpView.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.firstBattle.view.HpMpView.prototype.setHpPers = function (valCur, valMax) {
    this.setValue(this.hpPersText, this.hpPers, valCur, valMax, 1);
};
canvas.app.firstBattle.view.HpMpView.prototype.setMpPers = function (valCur, valMax) {
    this.setValue(this.mpPersText, this.mpPers, valCur, valMax, 1);
};
canvas.app.firstBattle.view.HpMpView.prototype.setHpOpp = function (valCur, valMax) {
    this.setValue(this.hpOppText, this.hpOpp, valCur, valMax, -1);
};
canvas.app.firstBattle.view.HpMpView.prototype.setMpOpp = function (valCur, valMax) {
    this.setValue(this.mpOppText, this.mpOpp, valCur, valMax, -1);
};
canvas.app.firstBattle.view.HpMpView.prototype.setValue = function (textField, maskView, valCur, valMax, phase) {
    valMax = valMax < 0 ? 0 : valMax;
    valCur = valCur > valMax ? valMax : valCur < 0 ? 0 : valCur;
    if (valMax != 0) {
        textField.text = valCur + "/" + valMax;
        maskView.scale.x = (valCur / valMax) * phase;
    } else {
        textField.text = "0/0";
        maskView.scale.x = 0;
    }
};
canvas.app.firstBattle.view.LevelView = function () {
    canvas.px.Container.call(this);
    this.field = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_9_BOLD, 3616041, 25, 18, "center");
    this.addChild(this.field);
    this.field.position.set(5, 13);
};
canvas.app.firstBattle.view.LevelView.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.firstBattle.view.LevelView.prototype.setLevel = function (value) {
    this.field.text = value;
};
canvas.app.firstBattle.view.NickView = function () {
    canvas.px.Container.call(this);
    this.field = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_9_BOLD, 16697738, 120, 10, "left");
    this.addChild(this.field);
    this.field.y = 2;
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.infoButton, this.clickHandler, this);
};
canvas.app.firstBattle.view.NickView.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.firstBattle.view.NickView.prototype.update = function (nick, id) {
    this.nick = nick;
    this.id = id;
    if (this.nick.length <= 18) {
        this.field.text = this.nick;
    } else {
        this.field.text = this.nick.substr(0, 16) + "...";
    }
    this.field.x = -Math.round(this.field.width / 2) - 5;
    this.visible = true;
};
canvas.app.firstBattle.view.NickView.prototype.unshow = function () {
    this.nick = "";
    this.id = 0;
    this.field.text = "";
    this.visible = false;
};
canvas.app.firstBattle.view.SelectGenderWindow = function () {
    canvas.px.Container.call(this);
    var sprite = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "select_win_back")));
    sprite = sprite.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD, 15660470, sprite.width - 20, 20, "center"));
    sprite.position.set(10, 2);
    sprite.text = canvas.Translator.getText(1702);
    this.selectField = sprite.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_12_BOLD, 9788490, 80, 20, "center"));
    this.selectField.position.set(63, 30);
    this.leftButton = this.addChild(new canvas.ui.Button(canvas.ResourceLoader.getImage("ui", "arrow_red"), canvas.ResourceLoader.getImage("ui", "arrow_yellow")));
    this.leftButton.scale.x = -1;
    this.leftButton.position.set(70, 33);
    this.rightButton = this.addChild(new canvas.ui.Button(canvas.ResourceLoader.getImage("ui", "arrow_red"), canvas.ResourceLoader.getImage("ui", "arrow_yellow")));
    this.rightButton.position.set(156, 33);
    this.selectButton = this.addChild(new canvas.app.view.OldButton(9722697));
    this.selectButton.setTitle(canvas.Translator.getText(1705));
    this.selectButton.position.set(29, 52);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.leftButton, this.changeHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.rightButton, this.changeHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.selectButton, this.selectHandler, this);
    this.update();
};
canvas.app.firstBattle.view.SelectGenderWindow.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.firstBattle.view.SelectGenderWindow.prototype.update = function () {
    this.selectField.text = canvas.Translator.getText(canvas.app.firstBattle.model.gender == canvas.Const.GENDER.MALE ? 1703 : 1704);
};
canvas.app.firstBattle.view.SelectGenderWindow.prototype.changeHandler = function () {
    canvas.EventManager.dispatchEvent(canvas.app.firstBattle.Event.GENDER_CHANGE);
};
canvas.app.firstBattle.view.SelectGenderWindow.prototype.selectHandler = function () {
    canvas.EventManager.dispatchEvent(canvas.app.firstBattle.Event.GENDER_SELECT);
};
canvas.app.firstBattle.view.TipView = function () {
    canvas.px.Container.call(this);
    this.field = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_12_BOLD_STROKE_RED_WHITE, -1, canvas.app.firstBattle.Const.WIDTH, 18, "center");
    this.addChild(this.field);
    this.field.text = canvas.Translator.getText(1714);
    setTimeout(this.hide.bind(this), 3e3);
    this.interactive = false;
};
canvas.app.firstBattle.view.TipView.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.firstBattle.view.TipView.prototype.update = function () {};
canvas.app.firstBattle.view.TipView.prototype.hide = function () {
    this.interval = setInterval(this.intervalHandler.bind(this), 50);
};
canvas.app.firstBattle.view.TipView.prototype.intervalHandler = function () {
    this.alpha -= 0.05;
    if (this.alpha <= 0) {
        clearInterval(this.interval);
        this.destroy({ children: true });
    }
};
canvas.app.puzzle.Event = { ENTER_FRAME: "Puzzle.ENTER_FRAME", GAME_OVER: "Puzzle.GAME_OVER", FINISH_GAME: "Puzzle.FINISH_GAME", CLOSE_GAME: "Puzzle.CLOSE_GAME", CONTINUE_GAME: "Puzzle.CONTINUE_GAME" };
canvas.app.puzzle.Main = function (model) {
    canvas.px.Container.call(this);
    this.model = model;
    this.windowsManager = new canvas.utils.WindowsManager();
    this.view = new canvas.app.puzzle.View();
    this.addChild(this.view);
    this.windowsContainer = new canvas.px.Container();
    this.addChild(this.windowsContainer);
    this.windowsManager.init(this.windowsContainer, this.model.width, this.model.height, this.view);
    canvas.EventManager.addEventListener(canvas.app.puzzle.Event.GAME_OVER, null, this.gameOverHandler, this);
    canvas.EventManager.addEventListener(canvas.app.puzzle.Event.FINISH_GAME, null, this.finishGameHandler, this);
    canvas.EventManager.addEventListener(canvas.app.puzzle.Event.CLOSE_GAME, null, this.closeGameHandler, this);
    this.puzzle = new canvas.app.puzzle.view.PuzzleWindow();
    canvas.utils.WindowsManager.instance.openWindow(this.puzzle);
    this.initPuzzle();
};
canvas.app.puzzle.Main.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.puzzle.Main.prototype.initPuzzle = function () {
    this.model.gameFinished = false;
    this.puzzle.initGame();
};
canvas.app.puzzle.Main.prototype.gameOverHandler = function () {
    this.model.gameFinished = true;
    this.puzzle.finishGame();
};
canvas.app.puzzle.Main.prototype.finishGameHandler = function () {
    var request = new canvas.utils.URLRequest(canvas.Config.entryPoint + "?object=user&action=puzzle_finish&json_mode_on=1");
    request.load();
};
canvas.app.puzzle.Main.prototype.closeGameHandler = function () {
    closePuzzle();
};
canvas.app.puzzle.Main.prototype.destroy = function () {
    canvas.EventManager.removeEventListener(canvas.app.puzzle.Event.GAME_OVER, null, this.gameOverHandler, this);
    canvas.EventManager.removeEventListener(canvas.app.puzzle.Event.FINISH_GAME, null, this.finishGameHandler, this);
    canvas.EventManager.removeEventListener(canvas.app.puzzle.Event.CLOSE_GAME, null, this.closeGameHandler, this);
    canvas.px.Container.prototype.destroy.apply(this, [{ children: true }]);
    this.puzzle.destroy();
};
canvas.app.puzzle.Model = function (par) {
    this.pictureUrl = this.ok(par.pictureURI) ? par.pictureURI : "testImage.png";
    this.segmentsOnSide = this.ok(par.segmentsOnSide) ? parseInt(par.segmentsOnSide) : 3;
    this.quickStart = this.ok(par.quickStart) ? parseInt(par.quickStart) == 1 : false;
};
canvas.app.puzzle.Model.prototype.ok = function (value) {
    return value != undefined;
};
canvas.app.puzzle.View = function () {
    canvas.px.Container.call(this);
};
canvas.app.puzzle.View.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.puzzle.view.PuzzleList = function () {
    canvas.px.Container.call(this);
    canvas.EventManager.addEventListener(canvas.app.puzzle.Event.CONTINUE_GAME, null, this.finishAnimHandler, this);
    this.click = this.clickHandler.bind(this);
    this.interactive = true;
    this.interactiveChildren = true;
};
canvas.app.puzzle.view.PuzzleList.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.puzzle.view.PuzzleList.prototype.create = function (texture, size) {
    if (size == undefined) size = 4;
    this.clear();
    this.items = new Array();
    var bd;
    var tmpBitmapData;
    var i;
    var j;
    this.sizeW = texture.width;
    this.sizeH = texture.height;
    var sizeW = Math.floor(texture.width / size);
    var sizeH = Math.floor(texture.height / size);
    var renderer;
    for (i = 0; i < size; i++)
        for (j = 0; j < size; j++) {
            bd = new canvas.px.Texture(texture, new canvas.px.Rectangle(i * sizeW, j * sizeH, sizeW, sizeH));
            renderer = new canvas.app.puzzle.view.PuzzleRenderer(bd, new canvas.px.Point(i, j));
            this.addChild(renderer);
        }
};
canvas.app.puzzle.view.PuzzleList.prototype.clear = function () {
    var i = this.numChildren;
    var renderer;
    while (i--) {
        renderer = this.getChildAt(i);
        renderer.dispose();
        this.removeChild(renderer);
    }
};
canvas.app.puzzle.view.PuzzleList.prototype.randomize = function (quickStart) {
    if (quickStart == undefined) quickStart = false;
    var i = this.numChildren;
    var renderer;
    var tmpRenderer;
    var tmpPoint;
    var tween;
    while (i--) {
        renderer = this.getChildAt(i);
        if (renderer.point.equals(renderer.newPoint)) {
            tmpRenderer = this.getChildAt(canvas.Functions.random(i));
            tmpPoint = renderer.newPoint;
            renderer.newPoint = tmpRenderer.newPoint;
            tmpRenderer.newPoint = tmpPoint;
            if (quickStart) {
                renderer.goNewPoint(true);
                tmpRenderer.goNewPoint(true);
            }
        }
    }
    if (quickStart) {
        this.alpha = 0;
        tween = new canvas.px.Tween.Tween(this).to({ alpha: 1 }, 1e3).start();
    } else {
        this.animateParts();
    }
};
canvas.app.puzzle.view.PuzzleList.prototype.animateParts = function () {
    var i = this.numChildren;
    var centerPoint = new canvas.px.Point(Math.round(this.sizeW * 0.5), Math.round(this.sizeH * 0.5));
    while (i--) this.getChildAt(i).animate(centerPoint);
};
canvas.app.puzzle.view.PuzzleList.prototype.clickHandler = function (mouseData) {
    var renderer = mouseData.target;
    var tmpPoint;
    if (renderer) {
        if (this.selectedRenderer) {
            if (this.selectedRenderer != renderer) {
                tmpPoint = this.selectedRenderer.newPoint;
                this.selectedRenderer.newPoint = renderer.newPoint;
                renderer.newPoint = tmpPoint;
                renderer.goNewPoint();
                this.selectedRenderer.goNewPoint();
                this.setChildIndex(renderer, this.numChildren - 1);
            }
            this.selectedRenderer.selected = false;
            this.selectedRenderer = null;
        } else {
            this.selectedRenderer = renderer;
            this.selectedRenderer.selected = true;
            this.setChildIndex(renderer, this.numChildren - 1);
        }
    }
};
canvas.app.puzzle.view.PuzzleList.prototype.finishAnimHandler = function () {
    this.testGameOver();
};
canvas.app.puzzle.view.PuzzleList.prototype.testGameOver = function () {
    if (canvas.app.puzzle.model.gameFinished) return;
    var i = this.numChildren;
    while (i--) {
        if (!this.getChildAt(i).isDone()) return;
    }
    canvas.EventManager.dispatchEvent(canvas.app.puzzle.Event.GAME_OVER);
};
canvas.app.puzzle.view.PuzzleList.prototype.destroy = function () {
    canvas.EventManager.removeEventListener(canvas.app.puzzle.Event.CONTINUE_GAME, null, this.finishAnimHandler, this);
};
canvas.app.puzzle.view.PuzzleRenderer = function (texture, point) {
    this._selected = false;
    Object.defineProperty(this, "selected", {
        get: function () {
            return this._selected;
        },
        set: function (value) {
            this._selected = value;
            var size = 6;
            this.line0.height = this.line1.height = this.line2.height = this.line3.height = value ? size : 1;
        },
    });
    canvas.px.Container.call(this);
    this.point = point;
    this.newPoint = point.clone();
    this.x = this.point.x * texture.width;
    this.y = this.point.y * texture.height;
    this.sprite = this.addChild(new canvas.px.Sprite());
    this.texture = texture;
    this.sprite.texture = texture;
    this.interactive = this.interactiveChildren = false;
    var line = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("puzzle", "line")));
    line.interactive = false;
    line.width = this.texture.width;
    this.line0 = line;
    line = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("puzzle", "line")));
    line.interactive = false;
    line.scale.y = -1;
    line.width = this.texture.width;
    line.y = this.texture.height - 0;
    this.line1 = line;
    line = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("puzzle", "line")));
    line.interactive = false;
    line.scale.y = -1;
    line.width = this.texture.height;
    line.rotation = canvas.Functions.degToRad(90);
    this.line2 = line;
    line = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("puzzle", "line")));
    line.interactive = false;
    line.width = this.texture.height;
    line.rotation = canvas.Functions.degToRad(90);
    line.x = this.texture.width;
    this.line3 = line;
};
canvas.app.puzzle.view.PuzzleRenderer.prototype = Object.create(canvas.px.Container.prototype);
canvas.app.puzzle.view.PuzzleRenderer.prototype.isDone = function () {
    return this.point.equals(this.newPoint);
};
canvas.app.puzzle.view.PuzzleRenderer.prototype.animate = function (centerPoint) {
    new canvas.px.Tween.Tween(this)
        .to({ x: centerPoint.x - Math.round(this.width * 0.5), y: centerPoint.y - Math.round(this.height * 0.5) }, 700)
        .onComplete(this.animationComplete.bind(this))
        .start();
};
canvas.app.puzzle.view.PuzzleRenderer.prototype.animationComplete = function () {
    this.goNewPoint();
};
canvas.app.puzzle.view.PuzzleRenderer.prototype.goNewPoint = function (quick) {
    if (quick == undefined) quick = false;
    var targetPoint = new canvas.px.Point(this.newPoint.x * this.width, this.newPoint.y * this.height);
    if (quick) {
        this.x = targetPoint.x;
        this.y = targetPoint.y;
        this.interactive = this.interactiveChildren = true;
    } else {
        this.interactive = this.interactiveChildren = false;
        new canvas.px.Tween.Tween(this).to({ x: targetPoint.x, y: targetPoint.y }, 700).onComplete(this.continueGame.bind(this)).start();
    }
};
canvas.app.puzzle.view.PuzzleRenderer.prototype.continueGame = function () {
    this.interactive = this.interactiveChildren = true;
    canvas.EventManager.dispatchEvent(canvas.app.puzzle.Event.CONTINUE_GAME);
};
canvas.app.puzzle.view.PuzzleRenderer.prototype.dispose = function () {
    if (this.texture) this.texture.destroy();
};
canvas.app.puzzle.view.PuzzleWindow = function () {
    canvas.app.manor.view.WindowManorBase.call(this, canvas.app.puzzle.model.width, canvas.app.puzzle.model.height);
    this.dragAvailable = false;
    this.container = this.addChild(new canvas.px.Container());
    this.container.position.set(20, 30);
    this.beginButton = this.addChild(new canvas.app.view.MainButton());
    this.beginButton.visible = false;
    this.list = new canvas.app.puzzle.view.PuzzleList();
    this.visible = false;
    this.interactive = true;
    this.interactiveChildren = true;
};
canvas.app.puzzle.view.PuzzleWindow.prototype = Object.create(canvas.app.manor.view.WindowManorBase.prototype);
canvas.app.puzzle.view.PuzzleWindow.prototype.initGame = function () {
    canvas.Functions.destroyChildren(this.container);
    this.container.addChild(this.list);
    this.beginButton.setTitle(canvas.Translator.getText(1523));
    this.texture = canvas.ResourceLoader.getTexture("puzzleImage");
    this.resize(this.texture.width + 42, this.texture.height + 100);
    this.content = this.container.addChild(new canvas.px.Sprite());
    this.content.texture = this.texture;
    this.content.alpha = 0;
    if (canvas.app.puzzle.model.quickStart) {
        this.beginGameQuick();
    } else {
        new canvas.px.Tween.Tween(this.content).to({ alpha: 1 }, 500).onComplete(this.initAnimationComplete.bind(this)).start();
    }
};
canvas.app.puzzle.view.PuzzleWindow.prototype.initAnimationComplete = function () {
    this.beginButton.visible = true;
};
canvas.app.puzzle.view.PuzzleWindow.prototype.beginAnimationComplete = function () {
    this.list.randomize();
};
canvas.app.puzzle.view.PuzzleWindow.prototype.beginGame = function () {
    this.list.create(this.texture, canvas.app.puzzle.model.segmentsOnSide);
    new canvas.px.Tween.Tween(this.content).to({ alpha: 0 }, 1e3).onComplete(this.beginAnimationComplete.bind(this)).start();
    this.beginButton.visible = false;
};
canvas.app.puzzle.view.PuzzleWindow.prototype.beginGameQuick = function () {
    this.list.create(this.texture, canvas.app.puzzle.model.segmentsOnSide);
    this.list.randomize(true);
};
canvas.app.puzzle.view.PuzzleWindow.prototype.clickHandler = function (mouseData) {
    if (canvas.Functions.findParent(this.beginButton, mouseData.target)) {
        if (canvas.app.puzzle.model.gameFinished) {
            canvas.EventManager.dispatchEvent(canvas.app.puzzle.Event.FINISH_GAME);
        } else {
            this.beginGame();
        }
        return;
    }
    canvas.px.Window.prototype.clickHandler.call(this, mouseData);
};
canvas.app.puzzle.view.PuzzleWindow.prototype.resize = function (w, h) {
    this.visible = true;
    this.setSize(w, h);
    this.beginButton.y = h - 60;
    this.beginButton.x = Math.round((w - this.beginButton.width) * 0.5);
};
canvas.app.puzzle.view.PuzzleWindow.prototype.finishGame = function () {
    new canvas.px.Tween.Tween(this.content).to({ alpha: 1 }, 1e3).onComplete(this.finishAnimationComplete.bind(this)).start();
};
canvas.app.puzzle.view.PuzzleWindow.prototype.finishAnimationComplete = function () {
    this.list.clear();
    this.beginButton.setTitle(canvas.Translator.getText(1524));
    this.beginButton.visible = true;
};
canvas.app.puzzle.view.PuzzleWindow.prototype.hide = function () {
    canvas.app.manor.view.WindowManorBase.prototype.hide.call(this);
    canvas.EventManager.dispatchEvent(canvas.app.puzzle.Event.CLOSE_GAME);
};
canvas.app.puzzle.view.PuzzleWindow.prototype.destroy = function () {
    this.list.destroy();
};
canvas.modules.ChatClock = function (parent, ts, tm) {
    parent.style.backgroundImage = "url('images/tbl-main_chat-clock-bg.gif')";
    var img = document.createElement("img");
    parent.appendChild(img);
    img.src = "images/tbl-main_chat-clock-btn.gif";
    img.style.cursor = "pointer";
    img.style.position = "relative";
    img.style.top = 12;
    img.onclick = this.clickHandler.bind(this);
    var span = document.createElement("span");
    parent.appendChild(span);
    span.style.position = "relative";
    span.style.color = "#f9dfa1";
    span.style.fontSize = 13;
    span.style.fontWeight = "bold";
    span.style.top = 14;
    span.style.left = 2;
    this.span = span;
    var d1 = new Date();
    if (tm == undefined) {
        tm = d1.getHours() + ":" + d1.getMinutes() + ":" + d1.getSeconds();
    }
    var ar = tm.split(":");
    var d2 = new Date();
    d2.setHours(parseInt(ar[0]));
    d2.setMinutes(parseInt(ar[1]));
    d2.setSeconds(parseInt(ar[2]));
    this.delta = d2.getTime() - d1.getTime();
    setInterval(this.timerHandler.bind(this), 1e4);
    this.timerHandler();
};
canvas.modules.ChatClock.prototype.clickHandler = function () {
    chat_change_time_zone();
};
canvas.modules.ChatClock.prototype.timerHandler = function () {
    var d = new Date(Date.now() + this.delta);
    this.span.innerText = canvas.Functions.setNumberLen(d.getHours()) + ":" + canvas.Functions.setNumberLen(d.getMinutes());
};
canvas.modules.ChatClock.prototype.getTime = function () {
    return Date.now() + this.delta;
};
canvas.modules.ChatClock.prototype.time_shift = function (minutes) {
    this.delta += parseInt(minutes) * 6e4;
};
canvas.modules.EservProxy = function () {
    this.callBacks = {};
    this.proxyRequest = null;
    this.ON_CONNECT = "onConnect";
    this.ON_DISCONNECT = "onDisconnect";
    this.ON_ERROR = "onError";
    this.ON_DATA = "onData";
    this.CONNECT_TIMEOUT = 1e4;
    this.stack = [];
};
canvas.modules.EservProxy.prototype.connect = function (host, port, proxy, connectionType) {
    this.proxy = proxy;
    this.createProxy();
    this.firstRequest = this.proxyRequest;
    this.proxyLoad();
    this.connectRequest = this.proxyRequest;
    if (this.timer) clearInterval(this.timer);
    this.timer = setInterval(this.frameHandler.bind(this), 100);
    this.connectTime = Date.now();
    window[this.callBacks[this.ON_CONNECT]]();
};
canvas.modules.EservProxy.prototype.createProxy = function () {
    if (this.proxyRequest) {
        canvas.EventManager.removeEventListener(canvas.utils.URLRequestEvent.EVENT_COMPLETE, this.proxyRequest, this.proxyCompleteHandler, this);
        canvas.EventManager.removeEventListener(canvas.utils.URLRequestEvent.EVENT_ERROR, this.proxyRequest, this.proxyErrorHandler, this);
    }
    this.proxyRequest = new canvas.utils.URLRequest(this.proxy, "POST", null, "arraybuffer");
    canvas.EventManager.addEventListener(canvas.utils.URLRequestEvent.EVENT_COMPLETE, this.proxyRequest, this.proxyCompleteHandler, this);
    canvas.EventManager.addEventListener(canvas.utils.URLRequestEvent.EVENT_ERROR, this.proxyRequest, this.proxyErrorHandler, this);
};
canvas.modules.EservProxy.prototype.frameHandler = function () {
    if (this.firstRequest) {
        if (this.firstRequest.request.readyState == 4 && this.firstRequest.request.status == 200) {
            this.parseResponse(this.firstRequest.request.response);
            clearInterval(this.timer);
            this.firstRequest = null;
        } else if (Date.now() - this.connectTime > this.CONNECT_TIMEOUT) {
            clearInterval(this.timer);
            this.firstRequest = null;
        }
    }
};
canvas.modules.EservProxy.prototype.proxyCompleteHandler = function () {
    if (this.proxyRequest.request.response) {
        var size = this.proxyRequest.request.response.byteLength;
        if (size > 0) {
            this.parseResponse(this.proxyRequest.request.response);
        } else {
        }
    }
    this.proxyLoad();
};
canvas.modules.EservProxy.prototype.proxyErrorHandler = function () {
    this.proxyLoad();
};
canvas.modules.EservProxy.prototype.proxyLoad = function () {
    var data = this.stack.length > 0 ? this.stack.pop() : undefined;
    if (data == undefined) {
        var myArray = new ArrayBuffer(1);
        var longInt8View = new Uint8Array(myArray);
        longInt8View[0] = 0;
        this.proxyRequest.load(undefined, myArray, false);
    } else {
        this.proxyRequest.load(undefined, data, false);
    }
    if (this.timeout) clearTimeout(this.timeout);
    this.timeout = setTimeout(this.timerHandler.bind(this), 3e4);
};
canvas.modules.EservProxy.prototype.timerHandler = function () {
    this.proxyRequest.abort();
    this.proxyLoadData();
};
canvas.modules.EservProxy.prototype.proxyLoadData = function (data) {
    if (data != undefined) this.stack.push(data);
    this.createProxy();
    this.proxyLoad();
};
canvas.modules.EservProxy.prototype.sendRequest = function (params) {
    var str = canvas.px.AMF.stringify(this.objectToArray(params));
    this.proxyLoadData(str);
};
canvas.modules.EservProxy.prototype.addCallback = function (type, funcName) {
    this.callBacks[type] = funcName;
};
canvas.modules.EservProxy.prototype.httpRequest = function () {};
canvas.modules.EservProxy.prototype.getLog = function () {};
canvas.modules.EservProxy.prototype.objectToArray = function (data) {
    var array = [];
    for (var key in data) {
        if (typeof data[key] == "string" || typeof data[key] == "number") {
            array[key] = data[key];
        } else {
            array[key] = this.objectToArray(data[key]);
        }
    }
    return array;
};
canvas.modules.EservProxy.prototype.parseResponse = function (buffer) {
    var str,
        dataLen,
        view = new Uint8Array(buffer);
    var j,
        i = 0,
        len = view.length;
    while (true) {
        if (i + 4 > len) break;
        dataLen = new DataView(buffer, i, 4).getUint32(0);
        i += 4;
        if (i + dataLen > len) break;
        str = "";
        i += dataLen;
        for (j = i - dataLen; j < i; j++) {
            str += String.fromCharCode(view[j]);
        }
        str = canvas.px.AMF.parse(str);
        window[this.callBacks[this.ON_DATA]](this.arrayToObjectDoubleBackslash(str));
    }
};
canvas.modules.EservProxy.prototype.arrayToObjectDoubleBackslash = function (array) {
    var object = new Object();
    var key;
    var a = [];
    var value;
    for (key in array) {
        value = array[key];
        key = key.replace(/"/g, "");
        if (Array.isArray(value)) {
            object[key] = this.arrayToObjectDoubleBackslash(value);
        } else if (typeof value == "string") {
            object[key] = value.replace(/\\/g, "\\\\");
        } else {
            object[key] = value;
        }
    }
    return object;
};
