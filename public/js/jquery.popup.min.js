;
(function($, window) {
    'use strict';
    $.fn.popup = function(settings) {
        var selector = this.selector,
            popup = new $.Popup(settings);
        $(document).on('click.popup', selector, function(e) {
            e.preventDefault();
            popup.open($(this).attr('href'), undefined, this)
        });
        return this.each(function() {
            $(this).data('popup', popup)
        })
    };
    $.Popup = function(settings) {
        var p = this,
            defaults = {
                backClass: 'popup_back',
                backOpacity: 0.7,
                containerClass: 'popup_cont',
                closeContent: '<div class="popup_close">&times;</div>',
                markup: '<div class="popup"><div class="popup_content"/></div>',
                contentClass: 'popup_content',
                preloaderContent: '<p class="preloader">Loading</p>',
                activeClass: 'popup_active',
                hideFlash: false,
                speed: 200,
                popupPlaceholderClass: 'popup_placeholder',
                keepInlineChanges: true,
                modal: false,
                content: null,
                type: 'auto',
                width: null,
                height: null,
                typeParam: 'pt',
                widthParam: 'pw',
                heightParam: 'ph',
                beforeOpen: function(type) {},
                afterOpen: function() {},
                beforeClose: function() {},
                afterClose: function() {},
                error: function() {},
                show: function($popup, $back) {
                    var plugin = this;
                    plugin.center();
                    $popup.animate({
                        opacity: 1
                    }, plugin.o.speed, function() {
                        plugin.o.afterOpen.call(plugin)
                    })
                },
                replaced: function($popup, $back) {
                    this.center().o.afterOpen.call(this)
                },
                hide: function($popup, $back) {
                    if ($popup !== undefined) {
                        $popup.animate({
                            opacity: 0
                        }, this.o.speed)
                    }
                },
                types: {
                    inline: function(content, callback) {
                        var $content = $(content);
                        $content.addClass(p.o.popupPlaceholderClass);
                        if (!p.o.keepInlineChanges) {
                            cachedContent = $content.html()
                        }
                        callback.call(this, $content.children())
                    },
                    image: function(content, callback) {
                        var plugin = this;
                        var $image = $('<img />').one('load', function() {
                            var img = this;
                            setTimeout(function() {
                                callback.call(plugin, img)
                            }, 0)
                        }).one('error', function() {
                            p.o.error.call(p, content, 'image')
                        }).attr('src', content).each(function() {
                            if (this.complete) {
                                $(this).trigger('load')
                            }
                        })
                    },
                    external: function(content, callback) {
                        var $frame = $('<iframe />').attr({
                            src: content,
                            frameborder: 0,
                            width: p.width,
                            height: p.height
                        });
                        callback.call(this, $frame)
                    },
                    html: function(content, callback) {
                        callback.call(this, content)
                    },
                    jQuery: function(content, callback) {
                        callback.call(this, content.html())
                    },
                    'function': function(content, callback) {
                        callback.call(this, content.call(p))
                    },
                    ajax: function(content, callback) {
                        $.ajax({
                            url: content,
                            success: function(data) {
                                callback.call(this, data)
                            },
                            error: function(data) {
                                p.o.error.call(p, content, 'ajax')
                            }
                        })
                    }
                }
            },
            imageTypes = ['png', 'jpg', 'gif'],
            type, cachedContent, $back, $pCont, $close, $preloader, $p;
        p.ele = undefined;
        p.o = $.extend(true, {}, defaults, settings);
        p.open = function(content, popupType, ele) {
            content = (content === undefined || content === '#') ? p.o.content : content;
            if (content === null) {
                p.o.error.call(p, content, type);
                return false
            }
            if (ele !== undefined) {
                if (p.ele && p.o.activeClass) {
                    $(p.ele).removeClass(p.o.activeClass)
                }
                p.ele = ele;
                if (p.ele && p.o.activeClass) {
                    $(p.ele).addClass(p.o.activeClass)
                }
            }
            if ($back === undefined) {
                $back = $('<div class="' + p.o.backClass + '"/>').appendTo($('body')).css('opacity', 0).animate({
                    opacity: p.o.backOpacity
                }, p.o.speed);
                if (!p.o.modal) {
                    $back.one('click.popup', function() {
                        p.close()
                    })
                }
                if (p.o.hideFlash) {
                    $('object, embed').css('visibility', 'hidden')
                }
                if (p.o.preloaderContent) {
                    $preloader = $(p.o.preloaderContent).appendTo($('body'))
                }
            }
            popupType = getValue([popupType, p.o.type]);
            popupType = (popupType === 'auto') ? guessType(content) : popupType;
            type = popupType;
            p.width = (p.o.width) ? p.o.width : 800;
            p.height = (p.o.height) ? p.o.height : 800; 
            if ($.inArray(popupType, ['inline', 'jQuery', 'function']) === -1) {
                var paramType = getParameterByName(p.o.typeParam, content),
                    paramWidth = getParameterByName(p.o.widthParam, content),
                    paramHeight = getParameterByName(p.o.heightParam, content);
                popupType = (paramType !== null) ? paramType : popupType;
                p.width = (paramWidth !== null) ? paramWidth : p.width;
                p.height = (paramHeight !== null) ? paramHeight : p.height
            }
            p.o.beforeOpen.call(p, popupType);
            if (p.o.types[popupType]) {
                p.o.types[popupType].call(p, content, showContent)
            } else {
                p.o.types.ajax.call(p, content, showContent)
            }
        };

        function getValue(items) {
            var finalValue;
            $.each(items, function(i, value) {
                if (value) {
                    finalValue = value;
                    return false
                }
            });
            return finalValue
        }

        function guessType(content) {
            if (typeof content === 'function') {
                return 'function'
            } else if (content instanceof $) {
                return 'jQuery'
            } else if (content.substr(0, 1) === '#' || content.substr(0, 1) === '.') {
                return 'inline'
            } else if ($.inArray(content.substr(content.length - 3), imageTypes) !== -1) {
                return 'image'
            } else if (content.substr(0, 4) === 'http') {
                return 'external'
            } else {
                return 'ajax'
            }
        }

        function showContent(content) {
            if ($preloader) {
                $preloader.fadeOut('fast', function() {
                    $(this).remove()
                })
            }
            var replacing = true;
            if ($pCont === undefined) {
                replacing = false;
                $pCont = $('<div class="' + p.o.containerClass + '">');
                $p = $(p.o.markup).appendTo($pCont);
                $close = $(p.o.closeContent).one('click', function() {
                    p.close()
                }).appendTo($pCont);
                $(window).resize(p.center);
                $pCont.appendTo($('body')).css('opacity', 0)
            }
            var $pContent = $('.' + p.o.contentClass, $pCont);
            if (p.width) {
                $pContent.css('width', p.width, 10)
            } else {
                $pContent.css('width', '')
            }
            if (p.height) {
                $pContent.css('height', p.height, 10)
            } else {
                $pContent.css('height', '')
            }
            if ($p.hasClass(p.o.contentClass)) {
                $p.html(content)
            } else {
                $p.find('.' + p.o.contentClass).html(content)
            }
            if (!replacing) {
                p.o.show.call(p, $pCont, $back)
            } else {
                p.o.replaced.call(p, $pCont, $back)
            }
        }
        p.close = function() {
            p.o.beforeClose.call(p);
            if (type === 'inline' && p.o.keepInlineChanges) {
                cachedContent = $('.' + p.o.contentClass).html()
            }
            if ($back !== undefined) {
                $back.animate({
                    opacity: 0
                }, p.o.speed, function() {
                    p.cleanUp()
                })
            }
            p.o.hide.call(p, $pCont, $back);
            return p
        };
        p.cleanUp = function() {
            $back.add($pCont).remove();
            $pCont = $back = undefined;
            $(window).unbind('resize', p.center);
            if (p.o.hideFlash) {
                $('object, embed').css('visibility', 'visible')
            }
            if (p.ele && p.o.activeClass) {
                $(p.ele).removeClass(p.o.activeClass)
            }
            var $popupPlaceholder = $('.' + p.o.popupPlaceholderClass);
            if (type == 'inline' && $popupPlaceholder.length) {
                $popupPlaceholder.html(cachedContent).removeClass(p.o.popupPlaceholderClass)
            }
            type = null;
            p.o.afterClose.call(p);
            return p
        };
        p.center = function() {
            $pCont.css(p.getCenter());
            $back.css({
                height: document.documentElement.offsetHeight
            });
            return p
        };
        p.getCenter = function() {
            var pW = $pCont.children().outerWidth(),
                pH = $pCont.children().outerHeight(),
                wW = document.documentElement.offsetWidth,
                wH = document.documentElement.offsetHeight;
            return {
                top: wH * 0.5 - pH * 0.5,
                left: wW * 0.5 - pW * 0.5
            }
        };

        function getParameterByName(name, url) {
            var match = new RegExp('[?&]' + name + '=([^&]*)').exec(url);
            return match && decodeURIComponent(match[1].replace(/\+/g, ' '))
        }
    }
}(jQuery, window));